<?xml version="1.0" encoding="UTF-8"?>
<argo:snx xmlns:argo="http://www.navis.com/argo" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.navis.com/argo snx.xsd">
<digital-asset id="NowMessageBuilder" short-description="NowMessageBuilder" groovy-code="import com.navis.argo.business.reference.Chassis&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.road.business.atoms.TranSubTypeEnum&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import groovy.xml.MarkupBuilder&#xA;&#xA;class NowMessageBuilder {&#xA;&#xA;    public String formIngateMessage(TransactionAndVisitHolder inOutDao) {&#xA;        def transactions = (Set&lt;TruckTransaction&gt;) inOutDao.tv.tvdtlsTruckTrans&#xA;&#xA;        def fixNull = {s -&gt; s == null ? &quot;&quot; : s }&#xA;&#xA;        def stageId = inOutDao.stage.id&#xA;        def gateId = inOutDao.gate.gateId&#xA;        def truckId = inOutDao.tv.truckIdOrLicenseNbr&#xA;        def truckCo = inOutDao.tv.carrierOperator.bzuId&#xA;        def eitId = inOutDao.tv.tvdtlsBatNbr&#xA;        def lane = inOutDao.gateLane;&#xA;        def laneId = lane == null ? '99' : lane.laneId;&#xA;        def tvGkey = inOutDao.tv.cvdCv.cvGkey;&#xA;&#xA;        def writer = new StringWriter()&#xA;        def xml = new MarkupBuilder(writer)&#xA;        xml.tracking() {&#xA;            'truck-arrival'() {&#xA;                'gate-id'(gateId)&#xA;                'stage-id'(stageId)&#xA;                'lane-id'(laneId)&#xA;                truck(id: fixNull(truckId), 'trucking-co-id': fixNull(truckCo))&#xA;                'truck-visit'('tv-key': tvGkey, 'tracking-tag-nbr': fixNull(eitId))&#xA;                dropoff() {&#xA;                    for (t in transactions) {&#xA;                        if (t.tranSubType in [TranSubTypeEnum.RE, TranSubTypeEnum.RM, TranSubTypeEnum.RC, TranSubTypeEnum.RI]) {&#xA;                            def ctrNbr = t.tranCtrNbr;&#xA;                            def chsNbr = t.tranChsNbr;&#xA;                            Container ctr = Container.findContainer(ctrNbr);&#xA;                            container(eqid: ctrNbr, type: ctr.eqEquipType.eqtypId, 'length-mm': ctr.eqLengthMm, 'height-mm': ctr.eqHeightMm, 'on-chassis-id': chsNbr) {&#xA;                                position(slot: fixNull(t.tranCtrPosition))&#xA;                            }&#xA;&#xA;                            if (chsNbr) {&#xA;                                Chassis chs = Chassis.findChassis(chsNbr);&#xA;                                if (chs) {&#xA;                                    chassis(eqid: chsNbr, type: chs.eqEquipType.eqtypId, 'length-mm': chs.eqLengthMm, 'height-mm': chs.eqHeightMm) {&#xA;                                        position(slot: fixNull(t.tranChsPosition))&#xA;                                    }&#xA;                                }&#xA;                            }&#xA;                        }&#xA;                    }&#xA;                }&#xA;                def ts = java.text.MessageFormat.format(&quot;{0,date,yyyy-MM-dd'T'HH:mm:ss}&quot;, new Date())&#xA;                timestamp(ts)&#xA;            }&#xA;        }&#xA;&#xA;        return writer.toString();&#xA;    }&#xA;}" />
</argo:snx>

