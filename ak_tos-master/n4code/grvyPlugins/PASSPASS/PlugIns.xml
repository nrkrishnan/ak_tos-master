<?xml version="1.0" encoding="UTF-8"?>
<argo:snx xmlns:argo="http://www.navis.com/argo" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.navis.com/argo snx.xsd">
<digital-asset id="GvyCmisPositionProcessDetail" short-description="GvyCmisPositionProcessDetail" groovy-code="import com.navis.vessel.business.operation.VesselClass&#xA;import com.navis.vessel.business.operation.VesselClassHbr&#xA;import com.navis.vessel.business.atoms.VesselTypeEnum&#xA;&#xA;public class GvyCmisPositionProcessDetail {&#xA;&#xA;public String doIt(Object u, Object gvyTxtMsgFmt)    &#xA;{&#xA;  println('GvyCmisPositionProcessDetail.doIt()')&#xA;  def positionProFldAttr = ''&#xA;  try&#xA;  {&#xA;      def lkpLocType=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;      def lkpLocTypeKey = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;&#xA;      def lkpCarrierId=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocId&quot;)&#xA;&#xA;      def _category=u.getFieldValue(&quot;unitCategory&quot;)&#xA;      def categoryKey = _category != null ? _category.getKey() : ''&#xA;   &#xA;      def _transitState=u.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;      def transitStateKey = _transitState != null ? _transitState.getKey() : ''&#xA;  &#xA;      def _drayStatus=u.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;      def drayStatusKey = _drayStatus!= null ? _drayStatus.getKey() : _drayStatus&#xA;&#xA;       def _freightkind=u.getFieldValue(&quot;unitFreightKind&quot;)&#xA;       def freightkind = _freightkind != null ? _freightkind.getKey() : ''&#xA;&#xA;     def ibVesselType = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);      &#xA;     def ibVesselTypeKey = ibVesselType != null ? ibVesselType.getKey() : ''&#xA;&#xA;     def obVesselType = u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);      &#xA;     def obVesselTypeKey = obVesselType != null ? obVesselType.getKey() : ''&#xA;&#xA;     //ReArrange Fields Used by VESVOY / TRUCK / MISC&#xA;     def aibcarrierMode=u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCarrierMode&quot;)&#xA;     aibcarrierMode = aibcarrierMode!= null ? aibcarrierMode.getKey() : ''&#xA;     def inBoundCarrier = aibcarrierMode.equals('VESSEL') ? (ibVesselTypeKey.trim().length() &gt; 1 ? ibVesselTypeKey : 'GEN_VESSEL')   : aibcarrierMode   &#xA;&#xA;     def aobcarrierMode=u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCarrierMode&quot;) &#xA;     aobcarrierMode = aobcarrierMode != null ? aobcarrierMode.getKey() : ''&#xA;     def outBoundCarrier = aobcarrierMode.equals('VESSEL') ? (obVesselTypeKey.trim().length() &gt; 1 ? obVesselTypeKey : 'GEN_VESSEL')  : aobcarrierMode&#xA;&#xA;     def aibcarrierId=u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;)&#xA;    //def aibcarrierId=u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.carrierOperatorId&quot;)&#xA;    def dibcarrierId=u.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;)&#xA;    def aobcarrierId=u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;) &#xA;    //def aobcarrierId=u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.carrierOperatorId&quot;)&#xA;    def intdObCarrierId=u.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;) &#xA;    def dobcarrierId=u.getFieldValue(&quot;unitRouting.rtgDeclaredCv.cvId&quot;)&#xA;  &#xA;    //VESVOY&#xA;    def idOBCarrierId =  intdObCarrierId != null ? intdObCarrierId : dobcarrierId&#xA;    def adIBCarrierId = aibcarrierId != null ? aibcarrierId : dibcarrierId&#xA;  &#xA;    def vesvoy = getVesVoy(lkpLocTypeKey,lkpCarrierId,categoryKey,transitStateKey,idOBCarrierId, aibcarrierId,dibcarrierId,freightkind)&#xA;    def vesvoyAttr = gvyTxtMsgFmt.doIt('vesvoy',vesvoy)&#xA;    println('VESVOY : '+vesvoy)&#xA;&#xA;&#xA;    //TRUCK&#xA;    def truckValue = '' &#xA;   def aiObCarrierId = aobcarrierId != null ? aobcarrierId : intdObCarrierId&#xA;   truckValue = getTruck(lkpLocTypeKey,drayStatusKey,transitStateKey,aiObCarrierId,aibcarrierId,u)&#xA;&#xA;    //MISC1&#xA;   def misc1Value = ''&#xA;   //Ship to Ship&#xA;   println('IB_CARRIER :'+inBoundCarrier+'  OB_CARRIER: '+outBoundCarrier)&#xA;   println('LKP_LOC_TYPE:'+lkpLocTypeKey+'LKP_CARRIER_ID:'+lkpCarrierId)&#xA;   def aidObCarrierId = aobcarrierId != null ? aobcarrierId : (intdObCarrierId != null ? intdObCarrierId : dobcarrierId)&#xA;   if(inBoundCarrier.equals('CELL') &amp;&amp; outBoundCarrier.equals('CELL'))&#xA;   {&#xA;      misc1Value= getShipToShip(lkpLocTypeKey,lkpCarrierId,aibcarrierId,aobcarrierId,aidObCarrierId,adIBCarrierId)&#xA;      println('MISC1_1 : '+misc1Value)&#xA;    }&#xA;    //Ship to Barge&#xA;   else if(inBoundCarrier.equals('CELL') &amp;&amp; outBoundCarrier.equals('BARGE'))&#xA;   {  &#xA;      ArrayList arrList = getShipToBarge(lkpLocTypeKey,lkpCarrierId,aobcarrierId,aidObCarrierId)&#xA;      misc1Value= arrList.get(0)&#xA;      println('MISC1_2 : '+misc1Value)&#xA;      truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;      println('truckValue_2 : '+truckValue)&#xA;   }&#xA;   //Barge to Ship&#xA;   else if(inBoundCarrier.equals('BARGE') &amp;&amp; outBoundCarrier.equals('CELL'))&#xA;   {&#xA;    ArrayList arrList = getBargeToShip(lkpLocTypeKey,lkpCarrierId,adIBCarrierId)&#xA;    misc1Value= arrList.get(0)&#xA;    println('MISC1_3 : '+misc1Value)&#xA;    truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;    println('truckValue_3 : '+truckValue)&#xA;   }&#xA;   //Barge to Barge&#xA;   else if(inBoundCarrier.equals('BARGE') &amp;&amp; outBoundCarrier.equals('BARGE'))&#xA;   {&#xA;     ArrayList arrList = getBargeToBarge(lkpLocTypeKey,lkpCarrierId,aibcarrierId,aobcarrierId,aidObCarrierId,adIBCarrierId)&#xA;     misc1Value = arrList.get(0)&#xA;     println('MISC1_4 : '+misc1Value)&#xA;     truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;     println('truckValue_4 : '+truckValue)&#xA;   }&#xA;   //Barge to AnyOtherCarrier&#xA;   else if(inBoundCarrier.equals('BARGE') &amp;&amp; (outBoundCarrier.equals('TRUCK') || outBoundCarrier.equals('UNKNOWN') || outBoundCarrier.equals('GEN_VESSEL')))&#xA;   {&#xA;     ArrayList arrList = getBargeToOtherCarriers(lkpLocTypeKey, lkpCarrierId,aibcarrierId)&#xA;     misc1Value = arrList.get(0)&#xA;     println('MISC1_5 : '+misc1Value)&#xA;     truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;     println('truckValue_5 : '+truckValue)&#xA;   }&#xA;   //TRUCK to BARGE&#xA;   else if(inBoundCarrier.equals('TRUCK') &amp;&amp; outBoundCarrier.equals('BARGE')) &#xA;   {&#xA;     ArrayList arrList = getTruckToBarge(lkpLocTypeKey,lkpCarrierId,aidObCarrierId,aobcarrierId,idOBCarrierId)&#xA;     misc1Value = arrList.get(0)&#xA;     println('MISC1_6 : '+misc1Value)&#xA;     truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;     println('truckValue_6 : '+truckValue)&#xA;   }&#xA;   //Last Truck Check &#xA;   if (truckValue.equals('GEN_TRUCK') || truckValue.equals('GEN_VESSEL') &#xA;                              || truckValue.equals('GEN_CARRIER'))&#xA;   {&#xA;    truckValue = ''&#xA;   }&#xA;   def truckAttr = gvyTxtMsgFmt.doIt('truck',truckValue)&#xA;   def misc1Attr = gvyTxtMsgFmt.doIt('misc1',misc1Value)&#xA;   println('FINAL_TRUCK :'+truckValue+'  FINAL_MISC1:'+misc1Value)&#xA;&#xA;   //LOAD PORT &amp; DPORT&#xA;   def loadPort = u.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;)&#xA;   def dischargePort = u.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;  &#xA;   //ACTUAL VESSEL,ACTUAL VOYAGE,LEG&#xA;   def actualVessel = '%'&#xA;   def actualVoyage = '%'&#xA;   def leg = '%'&#xA;   if(lkpLocTypeKey.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrierId).equals('BARGE')){&#xA;    actualVessel = misc1Value.length() &gt; 6 ? misc1Value.substring(0,3) : ''&#xA;    actualVoyage = misc1Value.length() &gt; 6 ? misc1Value.substring(3,6) : ''&#xA;    leg = misc1Value.length() &gt; 6 ? misc1Value.substring(6) : ''&#xA;   }&#xA;   else if(lkpLocTypeKey.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrierId).equals('CELL')){&#xA;    actualVessel = lkpCarrierId.length() &gt; 5 ? lkpCarrierId.substring(0,3) : ''&#xA;    actualVoyage = lkpCarrierId.length() &gt; 5 ? lkpCarrierId.substring(3) : ''&#xA;    leg = loadPort+'_'+dischargePort&#xA;   } &#xA;   def actualVesselAttr = gvyTxtMsgFmt.doIt('actualVessel',actualVessel)&#xA;   def actualVoyageAttr = gvyTxtMsgFmt.doIt('actualVoyage',actualVoyage)&#xA;   def legAttr = gvyTxtMsgFmt.doIt('leg',leg)&#xA;   println('ACTUAL VESSEL : '+actualVessel+' ACTUAL VOYAGE: '+actualVoyage+' leg : '+leg)&#xA;&#xA;   positionProFldAttr = vesvoyAttr+truckAttr+misc1Attr+actualVesselAttr+actualVoyageAttr+legAttr&#xA;   println('positionProFldAttr : '+positionProFldAttr)&#xA;&#xA;  }catch(Exception e){&#xA;    e.printStackTrace()&#xA;  }&#xA;   &#xA;   return positionProFldAttr&#xA;&#xA; &#xA; }//Method doit() Ends&#xA; &#xA;private ArrayList getTruckToBarge(String lkpLocTypeKy, String lkpCarrId, String aidObCarrId,String aobcarrId,String idOBCarrId)&#xA;{&#xA;   def misc1=''&#xA;   def truck = ''&#xA;   def bargeCode = ''&#xA;   ArrayList arrLst = new ArrayList()&#xA;   try&#xA;  {&#xA;       if(lkpLocTypeKy.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrId).equals('BARGE')){&#xA;         misc1 = aidObCarrId&#xA;         bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0,3) : ''   &#xA;         truck = '9'+bargeCode&#xA;       }&#xA;       else if(lkpLocTypeKy.equals('TRUCK')){&#xA;         misc1=aobcarrId&#xA;       }&#xA;      else if(lkpLocTypeKy.equals('YARD')){&#xA;         misc1 = idOBCarrId&#xA;       }&#xA;       arrLst.add(misc1)&#xA;       arrLst.add(truck)&#xA;   }catch(Exception e){&#xA;      e.printStackTrace()&#xA;   }&#xA;   return arrLst&#xA;}&#xA;&#xA;private ArrayList getBargeToOtherCarriers(String lkpLocTypeKy, String lkpCarrId, String aibcarrId)&#xA;{&#xA;   def misc1=''&#xA;   def truck = ''&#xA;   def bargeCode = ''&#xA;   ArrayList arrLst = new ArrayList()&#xA;   try&#xA;   {&#xA;        if(lkpLocTypeKy.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrId).equals('BARGE')){&#xA;            misc1 = aibcarrId&#xA;            bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0,3) : ''   &#xA;            truck = '9'+bargeCode&#xA;        }&#xA;       arrLst.add(misc1)&#xA;       arrLst.add(truck)&#xA;   }catch(Exception e){&#xA;       e.printStackTrace()&#xA;   }&#xA;   return arrLst&#xA; }&#xA;&#xA;private ArrayList getBargeToBarge(String lkpLocTypeKy, String lkpCarrId, String aibcarrId, String aobcarrId, String aidObCarrId, String adIBCarrId)&#xA;{&#xA;   def misc1=''&#xA;   def truck = ''&#xA;   def bargeCode = ''&#xA;   ArrayList arrLst = new ArrayList()&#xA;  try&#xA;  {&#xA;       if(lkpLocTypeKy.equals('VESSEL'))&#xA;      {&#xA;          if(lkpCarrId.equals(aibcarrId)){&#xA;            misc1 = adIBCarrId&#xA;            bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0,3) : ''   &#xA;            truck = '9'+bargeCode&#xA;          }&#xA;          else if(lkpCarrId.equals(aobcarrId)){&#xA;            misc1 = aidObCarrId&#xA;            bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0,3) : ''   &#xA;            truck = '9'+bargeCode&#xA;          }&#xA;      }&#xA;       if(lkpLocTypeKy.equals('YARD')){&#xA;           misc1 = adIBCarrId&#xA;      }&#xA;      arrLst.add(misc1)&#xA;      arrLst.add(truck)&#xA;  }catch(Exception e){&#xA;     e.printStackTrace()&#xA;  }&#xA;   return arrLst&#xA; }&#xA;&#xA;private ArrayList getBargeToShip(String lkpLocTypeKy,String lkpCarrId,String adIBCarrId)&#xA;{  &#xA;   def misc1=''&#xA;   def truck = ''&#xA;   ArrayList arrLst = new ArrayList()&#xA;   try&#xA;   {&#xA;       if(lkpLocTypeKy.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrId).equals('BARGE')){&#xA;            def bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0,3) : ''&#xA;            truck = '9'+bargeCode&#xA;        }&#xA;        if(lkpLocTypeKy.equals('VESSEL') || lkpLocTypeKy.equals('YARD')){&#xA;&#x9;misc1 = adIBCarrId&#xA;        }&#xA;       arrLst.add(misc1)&#xA;       arrLst.add(truck)&#xA;   }catch(Exception e){&#xA;      e.printStackTrace()&#xA;   }&#xA;   return arrLst&#xA;}&#xA;&#xA;private ArrayList getShipToBarge(String lkpLocTypeKy, String lkpCarrId,String aobcarrId, String aidObCarrId)&#xA;{&#xA;   def misc1=''&#xA;   def truck = ''&#xA;   ArrayList arrLst = new ArrayList()&#xA;   try&#xA;   {&#xA;       if(lkpLocTypeKy.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrId).equals('CELL')){&#xA;           misc1 = aidObCarrId&#xA;       }&#xA;       else if(lkpLocTypeKy.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrId).equals('BARGE')){&#xA;           misc1 = aidObCarrId&#xA;           def bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0,3) : ''&#xA;           truck = '9'+bargeCode&#xA;       }&#xA;       else if(lkpLocTypeKy.equals('YARD')){&#xA;           misc1 = aidObCarrId&#xA;       }&#xA;       else if(kpLocTypeKy.equals('TRUCK')){&#xA;           misc1 = aobcarrId&#xA;       }&#xA;       arrLst.add(misc1)&#xA;       arrLst.add(truck)&#xA;    }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    }&#xA;   return arrLst&#xA; }&#xA;&#xA; private String getShipToShip(String lkpLocTypeKy, String lkpCarrId, String aibcarrId, String aobcarrId, String aidObCarrId, String adIBCarrId)&#xA; {&#xA;     def misc1=''&#xA;     try&#xA;    {&#xA;        if(lkpLocTypeKy.equals('VESSEL'))&#xA;       {&#xA;           if(lkpCarrId.equals(aibcarrId)){&#xA;                  misc1 = aidObCarrId&#xA;           }&#xA;           else if(lkpCarrId.equals(aobcarrId)){&#xA;                  misc1 = adIBCarrId&#xA;            }&#xA;       }&#xA;       if(lkpLocTypeKy.equals('YARD'))&#xA;       {&#xA;             misc1 = adIBCarrId&#xA;       }&#xA;    }catch(Exception e){ &#xA;        e.printStackTrace()&#xA;    }&#xA;     return misc1&#xA; }&#xA;&#xA; private String getTruck(String lkpLocTypeKy,String drayStatusKy,String transitStateKy,String obCarrierId,String ibCarrierId, Object unit )&#xA; {&#xA;     def truck = ''&#xA;     try&#xA;    {&#xA;        if(lkpLocTypeKy.equals('TRUCK'))&#xA;        {&#xA;            if(drayStatusKy.equals('TRANSFER') &amp;&amp; transitStateKy.equals('S70_DEPARTED')){&#xA;               truck = 'YBUU'&#xA;            }&#xA;           else if(transitStateKy.equals('S30_ECIN')){&#xA;              truck = ibCarrierId&#xA;            }&#xA;            else{&#xA;              truck = obCarrierId&#xA;           }&#xA;        }&#xA;        else if (lkpLocTypeKy.equals('VESSEL') || lkpLocTypeKy.equals('YARD')){&#xA;              truck = unit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;             // println('DEST TRUCK :'+truck)&#xA;        }&#xA;    }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    }&#xA;     return truck&#xA;  }&#xA; &#xA; private String getVesVoy(String lkpLocTypeKy,String lkpCarrId,String categoryKy,String transitStateKy,String obCarrierId,String  actIbCarrierId,String decIbCarrierId, freightkind )&#xA; {&#xA;     def vesVoy = ''&#xA;     try&#xA;    {&#xA;         if(lkpLocTypeKy.equals('VESSEL') &amp;&amp; (getVesselClassType(lkpCarrId).equals('CELL'))) {&#xA;             vesVoy = lkpCarrId&#xA;         }&#xA;         else if(lkpLocTypeKy.equals('YARD') || lkpLocTypeKy.equals('TRUCK') || &#xA;                 (lkpLocTypeKy.equals('VESSEL') &amp;&amp; (getVesselClassType(lkpCarrId).equals('BARGE'))))&#xA;        {&#xA;              if (categoryKy.equals('EXPRT') || categoryKy.equals('THRGH')){&#xA;                  vesVoy= obCarrierId&#xA;              }else if (categoryKy.equals('IMPRT') &amp;&amp; lkpLocTypeKy.equals('YARD') ){&#xA;                   vesVoy=actIbCarrierId&#xA;             }else if (categoryKy.equals('IMPRT') &amp;&amp; ( lkpLocTypeKy.equals('TRUCK') || (lkpLocTypeKy.equals('VESSEL')))){&#xA;                     if(freightkind.equals('MTY')){&#xA;                           vesVoy=''&#xA;                     }else{&#xA;                           vesVoy=decIbCarrierId&#xA;                     }&#xA;             } else if (categoryKy.equals('TRSHP') &amp;&amp; transitStateKy.equals('S20_INBOUND'))  {&#xA;                  vesVoy=actIbCarrierId != null ? actIbCarrierId : decIbCarrierId&#xA;             }else if (categoryKy.equals('TRSHP') &amp;&amp; transitStateKy.trim().length() &gt; 0){&#xA;                 vesVoy= obCarrierId&#xA;             }&#xA;         } &#xA;     }catch(Exception e){&#xA;         e.printStackTrace()&#xA;     }&#xA;    return vesVoy   &#xA;  }&#xA;&#xA; private String getVesselClassType(String vesselId)    &#xA; {&#xA;    def vesselType = ''&#xA;    try&#xA;   {&#xA;      def vesselClassId = vesselId != null &amp;&amp; vesselId.length() &gt;3 ? vesselId.substring(0,3) : ''&#xA;      VesselClass vesselClass = new VesselClass()&#xA;      vesselClass = vesselClass.findVesselClassById(vesselClassId)&#xA;      VesselTypeEnum  vesselTypeEnum = vesselClass.getVesclassVesselType()&#xA;      vesselType = vesselTypeEnum.getKey()&#xA;       println('VESSEL TYPE :'+vesselType)&#xA;    }catch(Exception e){&#xA;      e.printStackTrace()&#xA;    }&#xA;    return vesselType&#xA; }&#xA;&#xA;&#xA; }&#xA;" />
<digital-asset id="GvyCmisActionDetail" short-description="GvyCmisActionDetail" groovy-code="public class GvyCmisActionDetail {&#xA;&#xA;  public String doIt(Object gvyTxtMsgFmt, Object event, Object gvyBaseClass, Object unit)    &#xA;  {&#xA;      try&#xA;     {&#xA;        println(&quot;In Class GvyCmisActionDetail.doIt()&quot;)&#xA;        //ACTION&#xA;        def action = ''&#xA;        def actionAttr = gvyTxtMsgFmt.doIt('action',action)&#xA;   &#xA;        //DATE &amp; TIME&#xA;        def evtAppliedDt = event.getEvntAppliedDate()&#xA;        def zone =  unit.getUnitComplex().getTimeZone();&#xA;        def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;        def aDate  = gvyEventUtil.formatDate(evtAppliedDt,zone)&#xA;        def aTime = gvyEventUtil.formatTime(evtAppliedDt,zone)&#xA;        def aDateAttr = gvyTxtMsgFmt.doIt('aDate',aDate)&#xA;        def aTimeAttr = gvyTxtMsgFmt.doIt('aTime',aTime)&#xA;&#xA;       //DOER&#xA;       def doer = event.getEvntAppliedBy()&#xA;       if(doer!=null &amp;&amp; doer.startsWith(&quot;xps&quot;)) {&#xA;           int startIdx = doer.indexOf(':');&#xA;           int endIdx = doer.indexOf(&quot;:&quot;, startIdx+1); &#xA;           if(startIdx != -1 &amp;&amp; endIdx != -1){&#xA;               doer = doer.substring(startIdx+1,endIdx);  &#xA;            }&#xA;       }&#xA;       def doerAttr = gvyTxtMsgFmt.doIt('doer',doer)&#xA;&#xA;      //SECTION CODE - Currently hardcoded&#xA;      def sectionCode = 'Z'&#xA;      def sectionCodeAttr = gvyTxtMsgFmt.doIt('sectionCode',sectionCode)&#xA;&#xA;     //LAST ACTION&#xA;     def lastAction = ''&#xA;     def lastActionAttr = gvyTxtMsgFmt.doIt('lastAction',lastAction)&#xA;  &#xA;     //LAST ADATE &#xA;     def lastADate = aDate&#xA;     def lastADateAttr = gvyTxtMsgFmt.doIt('lastADate',lastADate)&#xA;&#xA;     //LAST ATIME &#xA;     def lastATime = aTime&#xA;     def lastATimeAttr = gvyTxtMsgFmt.doIt('lastATime',lastATime)&#xA;&#xA;     //LAST DOER &#xA;     def lastDoer = doer&#xA;     def lastDoerAttr = gvyTxtMsgFmt.doIt('lastDoer',lastDoer)&#xA;&#xA;    //BLANK FIELDS&#xA;    def blankFieldAttr = blankFields(gvyTxtMsgFmt)&#xA;&#xA;   def  actionFieldAttr = actionAttr+aDateAttr+aTimeAttr+doerAttr+sectionCodeAttr+lastActionAttr+lastADateAttr+lastATimeAttr+lastDoerAttr+blankFieldAttr&#xA;&#xA;  // println('actionFieldAttr : '+actionFieldAttr)&#xA; &#xA;    return  actionFieldAttr&#xA;&#xA;     }catch(Exception e){&#xA;     e.printStackTrace()&#xA;   }&#xA;&#xA; }&#xA;&#xA;  //Appending Blank Fields For Cmis Processing  (Not Req in CMIS) &#xA;  public String blankFields(Object gvyTxtMsgFmt)&#xA; {&#xA;      //HAZFLAG OPEN/CLOSE &#xA;     def hazOpenCloseFlag=''&#xA;     def hazOpenCloseFlagAttr=gvyTxtMsgFmt.doIt('hazOpenCloseFlag',hazOpenCloseFlag)&#xA;&#xA;    //AEI &#xA;    def aei = ''&#xA;    def aeiAttr = gvyTxtMsgFmt.doIt('aei',aei)&#xA;&#xA;    //DSS&#xA;    def _dss = ''&#xA;    def dssAttr = gvyTxtMsgFmt.doIt('dss',_dss)&#xA;   &#xA;    //ERF &#xA;    def erf = ''&#xA;    def erfAttr = gvyTxtMsgFmt.doIt('erf',erf)&#xA;&#xA;     def blankFields = hazOpenCloseFlagAttr+aeiAttr+dssAttr+erfAttr&#xA;&#xA;     return blankFields&#xA;  }&#xA;  &#xA;}//Class Ends" />
<digital-asset id="GvyCmisDataProcessor" short-description="GvyCmisDataProcessor" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import weblogic.cluster.singleton.SingletonService;&#xA;import com.navis.framework.util.DateUtil;&#xA;&#xA;&#xA;public class GvyCmisDataProcessor {&#xA;&#xA;public String doIt(Object event)    &#xA;{&#xA;  println(&quot;In Class GvyCmisDataProcessor.doIt()&quot;)&#xA;&#xA;  def groovyfinalXml  = ''&#xA;  try&#xA;  {&#xA;     //Calling Msg Formater class&#xA;     def gvyBaseClass = new GroovyInjectionBase()&#xA;     def gvyTxtMsgFmt = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisTxtMsgFormatter&quot;);&#xA;   &#xA;     //Get OBJECT&#xA;    Object unitObj = event.getEntity()&#xA;    def isUnitObj = false  &#xA;&#xA;    //Gets EVENT ID&#xA;    Event gvyEventObj = event.getEvent()&#xA;    String eventType =  gvyEventObj.getEventTypeId() &#xA;    def eventTypeAttr = gvyTxtMsgFmt.doIt('msgType',eventType)&#xA;  &#xA;    //Check For Unit Object to handle Reporting Tag Event Call&#xA;    if(unitObj instanceof Unit) {&#xA;       isUnitObj = true&#xA;    }&#xA;&#xA;    //Getting UNIT_OBJ from EQUIP_OBJ&#xA;    if(unitObj instanceof EquipmentState){&#xA;       unitObj = getUnitFromEquipment(unitObj)&#xA;    }&#xA;     &#xA;    // EQUIP CLASS   &#xA;    def equiClass =unitObj.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;    def equiClassKey = equiClass != null ? equiClass.getKey() : ''&#xA;&#xA;    //ACTION SPECIFIC CLASS CALLS &#xA;    def unitDetails = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUnitDetail&quot;);&#xA;    def unitDetailsAttr = unitDetails.doIt(equiClassKey,gvyTxtMsgFmt,unitObj);&#xA; &#xA;    def unitEquip = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEquiDetail&quot;);&#xA;    def equipDetailAttr = unitEquip.doIt(gvyTxtMsgFmt,unitObj, event, isUnitObj);&#xA;&#xA;    def unitPhyStatus = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisPhysicalStatusDetail&quot;);&#xA;    def phyStatusAttr =unitPhyStatus.doIt(eventType,gvyTxtMsgFmt,unitObj);&#xA;&#xA;    def unitShipmentDetails = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisShipmentDetail&quot;);&#xA;    def shipmentDetailsAttr =unitShipmentDetails.doIt(gvyTxtMsgFmt,unitObj,eventType,gvyBaseClass,event, isUnitObj );&#xA; &#xA;    def unitRtgProcess = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisRtgProcessDetail&quot;);&#xA;    def rtgProcessAttr =unitRtgProcess.doIt(eventType,gvyTxtMsgFmt,unitObj);&#xA; &#xA;    def unitRouting = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisRoutingDetail&quot;);&#xA;    def routingAttr =unitRouting.doIt(gvyTxtMsgFmt,unitObj,eventType);&#xA;&#xA;    def unitposition = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisPositionDetail&quot;);&#xA;    def positionAttr =unitposition.doIt(eventType,gvyTxtMsgFmt,unitObj);&#xA;&#xA;   def unitpositionProc = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisPositionProcessDetail&quot;);&#xA;   def positionProcAttr =unitpositionProc.doIt(unitObj,gvyTxtMsgFmt);&#xA;&#xA;   def flexFields = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisFlexFieldDetail&quot;);&#xA;   def unitFlexFieldsAttr =flexFields.doIt(gvyTxtMsgFmt,unitObj, event, eventType, isUnitObj, gvyBaseClass);&#xA;&#xA;   def actionDetail = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisActionDetail&quot;);&#xA;   def actionDetailAttr =actionDetail.doIt(gvyTxtMsgFmt, gvyEventObj, gvyBaseClass,unitObj);&#xA;&#xA;   def commentNotes = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisCommentNotesField&quot;);&#xA;   def commentNotesAttr = commentNotes.doIt(gvyEventObj,eventType,gvyTxtMsgFmt,unitObj);&#xA;&#xA;   def unitChassisObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisChassisAttributes&quot;);&#xA;   def unitChassisAttr = unitChassisObj.getChassisAttributes(gvyTxtMsgFmt,unitObj);&#xA;&#xA;   def unitGateObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventUnitReceive&quot;);&#xA;   def unitGateAttr = unitGateObj.gateAttributes(unitObj, gvyTxtMsgFmt, gvyBaseClass,eventType );&#xA;&#xA;&#xA;def msgString = eventTypeAttr+' '+unitDetailsAttr+' '+equipDetailAttr+' '+phyStatusAttr+' '+shipmentDetailsAttr+' '+rtgProcessAttr+' '+routingAttr+' '+positionAttr+' '+positionProcAttr+' '+unitFlexFieldsAttr+' '+actionDetailAttr+' '+commentNotesAttr+' '+unitChassisAttr+' '+unitGateAttr&#xA;&#xA;   //Creates Groovy Xml &#xA;   def groovyXml = gvyTxtMsgFmt.createGroovyXml(msgString)&#xA;    //def groovyfinalXml =  getEventSpecificValues(eventType,groovyXml, gvyBaseClass,event,unitObj, isUnitObj, equiClassKey)&#xA;  &#xA;    def eventFeedObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventFeedManipulation&quot;);&#xA;    groovyfinalXml = eventFeedObj.processCmisEventFeedManipulation(eventType,groovyXml, gvyBaseClass,event,unitObj, isUnitObj, equiClassKey)&#xA;&#xA;    //println(&quot;GVY XML : &quot;+groovyfinalXml)&#xA;&#xA;  }catch(Exception e){&#xA;    e.printStackTrace()&#xA;  }&#xA;&#xA;   return groovyfinalXml &#xA;&#xA; }&#xA;&#xA; public Object getUnitFromEquipment(Object EquipObj)&#xA; { &#xA;    def unit = ''&#xA;    try&#xA;   {&#xA;      def equiId = EquipObj.getFieldValue(&quot;eqsEquipment.eqIdFull&quot;) &#xA;      def injBase = new GroovyInjectionBase();&#xA;      def complex = ContextHelper.getThreadComplex();&#xA;      def unitFinder = injBase.getUnitFinder();&#xA;      def eq = Equipment.loadEquipment( equiId);&#xA;      unit = unitFinder.findAttachedUnit(complex, eq);&#xA;&#xA;   }catch(Exception e){&#xA;      e.printStackTrace()&#xA;   }&#xA; &#xA;    return unit&#xA;  }&#xA;&#xA;/*  public String getEventSpecificValues(String eventType,String xmlGvyString, Object gvyInjtBase, Object event, Object unit, Object isUnitObj, String equiClass)&#xA;  {&#xA;     Object eventSpecObj = null;&#xA;     def groupCode = unit.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;);&#xA;          groupCode = groupCode != null ? groupCode : ''&#xA;      def _commodityId=unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;)&#xA;      def commodityId = _commodityId != null ? _commodityId : ''&#xA;      def designatedTrucker=unit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;      def _drayStatus=unit.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;      def drayStatus = _drayStatus!= null ? _drayStatus.getKey() : _drayStatus&#xA;&#xA;     def xmlGvyData = xmlGvyString&#xA;      &#xA;      if(groupCode != null &amp;&amp; groupCode.equals('TS')){&#xA;        eventSpecObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;        xmlGvyData = eventSpecObj.getAfterTagStripAssign(xmlGvyData)&#xA;      }&#xA;      else if((groupCode.equals('XFER-P2') || groupCode.equals('XFER-WO') &#xA;         || groupCode.equals('XFER-SI')) &amp;&amp; drayStatus.equals('OFFSITE') ){&#xA;        eventSpecObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;        xmlGvyData = eventSpecObj.getTransferEventChanges(xmlGvyData)&#xA;     }&#xA;     //SIT EVENT&#xA;    else if(commodityId.equals('SIT') &amp;&amp; drayStatus.equals('OFFSITE'))&#xA;    {&#xA;      println('INSIDE THE SIT ASSIGN CONDITION')&#xA;      eventSpecObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyCmisEventSIT&quot;);&#xA;      def appendObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;      xmlGvyData = eventSpecObj.processSitAssign(xmlGvyData,event,unit,commodityId,drayStatus) &#xA;     }&#xA;     else if(eventType.equals('TRANSFER_CANCEL')){&#xA;        eventSpecObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;        xmlGvyData = eventSpecObj.getTransferCancelEvent(xmlGvyData, designatedTrucker, commodityId)&#xA;     }&#xA;     else if(eventType.equals('COMMUNITY_SERVICE_UNASSIGN')){&#xA;        eventSpecObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;        xmlGvyData = eventSpecObj.getCommunityServiceUnAssign(xmlGvyData)&#xA;      }&#xA;     else if(eventType.equals('TAG_STRIP_UNASSIGN')){&#xA;        eventSpecObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;        xmlGvyData = eventSpecObj.getTagStripUnAssign(xmlGvyData)&#xA;      }&#xA;    else if (eventType.equals('YB_ASSIGN') || eventType.equals('YB_UNASSIGN')) {&#xA;        eventSpecObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;        xmlGvyData = eventSpecObj.getYBEvent(xmlGvyData,designatedTrucker,eventType)&#xA;    }&#xA;   else  if(eventType.equals('RETURN_TO_CUSTOMER_ASSIGN')){&#xA;        eventSpecObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;        xmlGvyData = eventSpecObj.getRetCustomerAssign(xmlGvyData)&#xA;     }&#xA;   //Check for Over Dimension OVD&#xA;   else if (eventType.equals('UNIT_OVERDIMENSIONS_UPDATE') &amp;&amp; isUnitObj.equals(Boolean.TRUE))&#xA;   {&#xA;        eventSpecObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyCmisEventOverDimension&quot;);&#xA;        xmlGvyData = eventSpecObj.getUnitDimensionUpdate(xmlGvyData,event,unit)&#xA;    }&#xA;   else  if(eventType.equals('UNIT_DELIVER'))&#xA;   {&#xA;      //EVENT DELIVER/RECIEVE&#xA;      eventSpecObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyCmisEventUnitDeliver&quot;);&#xA;      xmlGvyData= eventSpecObj.processUnitDeliver(xmlGvyData,eventType,unit,groupCode, commodityId, equiClass)&#xA;    }&#xA;   //SIT UNASSIGN&#xA;   else if(eventType.equals('SIT_UNASSIGN'))&#xA;   {&#xA;      eventSpecObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyCmisEventSIT&quot;);&#xA;      def appendObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;     xmlGvyData = eventSpecObj.processSitUnAssign(xmlGvyData, appendObj)&#xA;    }&#xA;  &#xA;   //EQUIP HOLD/RELEASE FIELD MANIPULATION&#xA;  def equipHold = gvyInjtBase.getGroovyClassInstance(&quot;GvyCmisEquipmentHoldEvents&quot;)&#xA;  xmlGvyData = equipHold.setEquipmentHoldFields(xmlGvyData,event,unit)&#xA;&#xA;     //BDC Event Mapping - A1(Find action and then update)&#xA;   if(eventType.equals(&quot;UNIT_PROPERTY_UPDATE&quot;) || eventType.equals(&quot;UNIT_REROUTE&quot;))&#xA;    {&#xA;         if(isUnitObj.equals(Boolean.TRUE) &amp;&amp; (event.wasFieldChanged('GoodsBlNbr') || event.wasFieldChanged('POD') ||  event.wasFieldChanged('Destination'))) &#xA;        {&#xA;           xmlGvyData = xmlGvyData.replace(&quot;lastAction='null'&quot;,&quot;lastAction='BDC'&quot;);&#xA;           xmlGvyData = xmlGvyData.replace(&quot;action='null'&quot;,&quot;action='BDC'&quot;) &#xA;        }&#xA;     }&#xA;&#xA;     return xmlGvyData &#xA;  }&#xA;*/&#xA;&#xA;public String doTheVessel(Object event, String action)    &#xA;{&#xA;  println(&quot;In Class GvyCmisDataProcessor.doTheVessel()&quot;)&#xA;  &#xA;  //Calling Msg Formater class&#xA;   def groovyXml = ''&#xA;  try&#xA;  { &#xA;     def gvyBaseClass = new GroovyInjectionBase()&#xA;     def gvyTxtMsgFmt = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisTxtMsgFormatter&quot;);&#xA;     def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;     def gvyVesselLookup = gvyBaseClass.getGroovyClassInstance(&quot;GvyVesselLookup&quot;);&#xA;   &#xA;   //Get OBJECT&#xA;   def visit = event.getEntity();&#xA;   def zone =  visit.getCvdCv().getCvComplex() .getTimeZone();&#xA;&#xA;   //Gets EVENT ID&#xA;   Event gvyEventObj = event.getEvent();&#xA;   String eventType =  gvyEventObj.getEventTypeId();&#xA; &#xA;   //EVENT TYPE&#xA;   def eventTypeAttr = gvyTxtMsgFmt.doIt(&quot;msgType&quot;,eventType);&#xA;   &#xA;   def unitClassAttr = gvyTxtMsgFmt.doIt(&quot;unitClass&quot;,&quot;VESSELVISIT&quot;);&#xA;   &#xA;   def visitId = visit.getFieldValue(&quot;cvdCv.cvId&quot;);&#xA;   def vistAttr = gvyTxtMsgFmt.doIt(&quot;visit&quot;,visitId);&#xA;   &#xA;   def facility = visit.getFieldValue(&quot;cvdCv.cvFacility.fcyId&quot;)&#xA;   def facilityAttr = gvyTxtMsgFmt.doIt(&quot;facility&quot;,facility);&#xA;      &#xA;   def nextFacility = visit.getFieldValue(&quot;cvdCv.cvNextFacility.fcyId&quot;)&#xA;   def nextFacilityAttr = gvyTxtMsgFmt.doIt(&quot;nextFacility&quot;,nextFacility);&#xA;   &#xA;   &#xA;   def line = event.getPropertyAsString(&quot;VesselLineOperator&quot;)&#xA;   def lineAttr = gvyTxtMsgFmt.doIt(&quot;line&quot;,line);&#xA;   &#xA;   def vessel = event.getPropertyAsString(&quot;VesselId&quot;)&#xA;   def vesselAttr = gvyTxtMsgFmt.doIt(&quot;vesselVes&quot;,vessel);&#xA;   &#xA;   def ibVoyage = visit.getFieldValue(&quot;vvdIbVygNbr&quot;)&#xA;   def ibVoyageAttr = gvyTxtMsgFmt.doIt(&quot;ibVoyage&quot;,ibVoyage);&#xA;   &#xA;   def obVoyage = visit.getFieldValue(&quot;vvdObVygNbr&quot;)&#xA;   def obVoyageAttr = gvyTxtMsgFmt.doIt(&quot;obVoyage&quot;,obVoyage);&#xA;   &#xA;   def phase = visit.getFieldValue(&quot;cvdCv.cvVisitPhase&quot;).key;&#xA;   if(phase != null &amp;&amp; phase.length() &gt; 2) {&#xA;      phase = phase.substring(2);&#xA;   }&#xA;   def phaseAttr = gvyTxtMsgFmt.doIt(&quot;phase&quot;,phase);&#xA;   &#xA;   def etaDate = visit.getFieldValue(&quot;cvdETA&quot;)  &#xA;   def etaDateAttr = gvyTxtMsgFmt.doIt(&quot;etaDate&quot;,gvyEventUtil.formatDate(etaDate,zone));&#xA;   def etaTimeAttr = gvyTxtMsgFmt.doIt(&quot;etaTime&quot;,gvyEventUtil.formatTime(etaDate,zone));&#xA;   &#xA;   def etdDate = visit.getFieldValue(&quot;cvdETD&quot;);  &#xA;   def etdDateAttr = gvyTxtMsgFmt.doIt(&quot;etdDate&quot;,gvyEventUtil.formatDate(etdDate,zone));&#xA;   def etdTimeAttr = gvyTxtMsgFmt.doIt(&quot;etdTime&quot;,gvyEventUtil.formatTime(etdDate,zone));&#xA;   &#xA;   def ataDate = visit.getFieldValue(&quot;cvdCv.cvATA&quot;) &#xA;   def ataDateAttr = gvyTxtMsgFmt.doIt(&quot;ataDate&quot;,gvyEventUtil.formatDate(ataDate,zone));&#xA;   def ataTimeAttr = gvyTxtMsgFmt.doIt(&quot;ataTime&quot;,gvyEventUtil.formatTime(ataDate,zone));&#xA;      &#xA;   def atdDate = visit.getFieldValue(&quot;cvdCv.cvATD&quot;)&#xA;   def atdDateAttr = gvyTxtMsgFmt.doIt(&quot;atdDate&quot;,gvyEventUtil.formatDate(atdDate,zone));&#xA;   def atdTimeAttr = gvyTxtMsgFmt.doIt(&quot;atdTime&quot;,gvyEventUtil.formatTime(atdDate,zone));&#xA;   &#xA;   // Action VST or EDT&#xA;   def actionAttr = gvyTxtMsgFmt.doIt(&quot;action&quot;, action);&#xA;   &#xA;    def aDate  = event.getEvent().getEvntAppliedDate();&#xA;    def aDateAttr = gvyTxtMsgFmt.doIt(&quot;aDate&quot;,gvyEventUtil.formatDate(aDate,zone));&#xA;    def aTimeAttr = gvyTxtMsgFmt.doIt(&quot;aTime&quot;,gvyEventUtil.formatTime(aDate,zone));&#xA;&#xA;    //DOER&#xA;    def doer = event.getEvent().getEvntAppliedBy()&#xA;    def doerAttr = gvyTxtMsgFmt.doIt('doer',doer)&#xA;&#xA;   def legAttr = gvyTxtMsgFmt.doIt(&quot;leg&quot;,getLeg(vessel,visit,gvyVesselLookup));&#xA;   &#xA;   def msgString = eventTypeAttr+' '+unitClassAttr+' '+vistAttr+' '+facilityAttr+' '+nextFacilityAttr+' '+lineAttr+' '+vesselAttr+' '+ibVoyageAttr+' '+obVoyageAttr+' '+phaseAttr+' '+etaDateAttr+' '+etaTimeAttr+' '+etdDateAttr+' '+etdTimeAttr+' '+ataDateAttr+' '+ataTimeAttr+' '+atdDateAttr+' '+atdTimeAttr+' '+actionAttr+' '+aDateAttr+' '+aTimeAttr+' '+doerAttr+' '+legAttr;&#xA;&#xA;   //Creates Groovy Xml &#xA;   groovyXml = gvyTxtMsgFmt.createGroovyXml(msgString);&#xA;   &#xA;  //def groovyfinalXml =  getEventSpecificValues(eventType,groovyXml, gvyBaseClass,event,unitObj, isUnitObj, equiClassKey)&#xA;&#xA;   println(&quot;GVY XML : &quot;+groovyXml)&#xA;  &#xA;   }catch(Exception e){&#xA;           e.printStackTrace()&#xA;   }&#xA;&#xA;   return groovyXml; &#xA;&#xA; }&#xA;&#xA;public String getLeg(Object vessel, Object visit, Object gvyVesselLookup) {&#xA;   def service = visit.cvdItinerary.itinId;&#xA;   // Dumpy value for Triangulation service, need to replace.&#xA;   if(&quot;TRI-STD&quot;.equals(service) ) return &quot;S&quot;;&#xA;   if(&quot;GCS-STD&quot;.equals(service) ) return &quot;W&quot;;&#xA;   if(gvyVesselLookup.isBarge(vessel)) {&#xA;      def visitId = visit.getFieldValue(&quot;cvdCv.cvId&quot;);&#xA;      return visitId.substring(visitId.length()-1);&#xA;   &#xA;   }&#xA;   return &quot;E&quot;;&#xA;   &#xA;   &#xA;}&#xA;&#xA;}//Class Ends" />
<digital-asset id="StripUnit" short-description="StripUnit" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.atoms.EventEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.framework.util.BizViolation&#xA;&#xA;class StripUnit extends GroovyInjectionBase {&#xA;    public String execute(Map inParameters) {&#xA;&#x9;def ctrId = inParameters.get(&quot;equipment-id&quot;);&#xA;try {&#xA;    def recorder = (String) inParameters.get(&quot;recorder&quot;);&#xA;&#xA;&#x9;// Find the active UFV&#xA;&#x9;def fullUfv = null;&#xA;&#x9;try {&#xA;&#x9;&#x9;fullUfv = findActiveUfv(ctrId);&#xA;&#x9;} catch ( BizViolation ex) {&#xA;&#x9;&#x9;fail((new StringBuilder()).append(&quot;ERR_GVY_STRIP_001. Could not find unit: &quot;).append(ctrId).toString());&#xA;&#x9;}&#xA;&#x9;// check if the commodity id is ok.&#xA;&#x9;def ufvUnit = fullUfv.getUfvUnit();&#xA;&#x9;if ( ufvUnit.isStorageEmpty())&#xA;&#x9;&#x9;fail((new StringBuilder()).append(&quot;ERR_GVY_STRIP_002. Could not STRIP EMPTY unit: &quot;).append(ctrId).toString());&#xA;&#x9;def stripGoods = ufvUnit.getUnitGoods();&#xA;&#x9;if ( stripGoods != null) {&#xA;&#x9;&#x9;def stripComm = stripGoods.getGdsCommodity();&#xA;&#x9;&#x9;if ( stripComm != null) {&#xA;&#x9;&#x9;&#x9;def commId = stripComm.getCmdyShortName();&#xA;&#x9;&#x9;&#x9;if ( commId.length() &lt; 3)&#xA;&#x9;&#x9;&#x9;&#x9;fail((new StringBuilder()).append(&quot;ERR_GVY_STRIP_003. Could not STRIP unit: &quot;).append(ctrId).append(&quot; with COMMODITY code: &quot;).append(commId).toString());&#xA;&#xA;&#x9;&#x9;&#x9;if ( !commId.substring(0, 3).equalsIgnoreCase( &quot;AUT&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&amp;&amp; !commId.substring(0, 3).equalsIgnoreCase( &quot;CFS&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&amp;&amp; !commId.substring(0, 3).equalsIgnoreCase( &quot;COB&quot;)) {&#xA;&#x9;&#x9;&#x9;&#x9;fail((new StringBuilder()).append(&quot;ERR_GVY_STRIP_003. Could not STRIP unit: &quot;).append(ctrId).append(&quot; with COMMODITY code: &quot;).append(commId).toString());&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;// Strp it, and get back the new full UFV and Unit&#xA;&#x9;def strippedUfv = stripUfvAndRecordEvent( fullUfv, null, &quot;JF&quot;);&#xA;&#x9;def strippedUnit = strippedUfv.getUfvUnit();&#xA;&#x9;// get commodity code&#xA;&#x9;def unitGoods = strippedUnit.getUnitGoods();&#xA;&#x9;def unitComm = unitGoods.getGdsCommodity();&#xA;&#x9;if ( unitComm != null) {&#xA;&#x9;&#x9;def commodityId = unitComm.getCmdyShortName();&#xA;&#x9;&#x9;if ( commodityId.equalsIgnoreCase( &quot;AUTOCON&quot;)) {&#xA;&#x9;&#x9;&#x9;unitComm = Commodity.findOrCreateCommodity( commodityId);&#xA;&#x9;&#x9;&#x9;unitComm.setCmdyShortName( &quot;EMPTY CFS&quot;);&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;unitComm = Commodity.findOrCreateCommodity( &quot;MTYAUT&quot;);&#xA;&#x9;&#x9;&#x9;unitComm.setCmdyShortName( &quot;EMPTY AUTO&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;} else {&#xA;&#x9;&#x9;unitComm = Commodity.findOrCreateCommodity( &quot;MTYAUT&quot;);&#xA;&#x9;&#x9;unitComm.setCmdyShortName( &quot;EMPTY AUTO&quot;);&#xA;&#x9;}&#xA;&#xA;&#x9;unitGoods.setGdsCommodity(unitComm);&#xA;&#xA;&#x9;// Record an event&#xA;&#x9;strippedUnit.recordUnitEvent(EventEnum.UNIT_STRIP, null, &quot;Stripped by &quot; + recorder);&#xA;&#x9;return &quot;done via Groovy, unit is: &quot; + strippedUnit;&#xA;&#xA;} catch ( Exception ex) {&#xA;&#x9;fail((new StringBuilder()).append(ex.toString()).append(&quot;ERR_GVY_STRIP_999. Could not STRIP unit: &quot;).append(ctrId).toString());&#xA;}&#xA;}&#xA;}&#xA;&#xA;" />
<digital-asset id="NOWMessageBuilder" short-description="Builds NOW XML document" groovy-code="/*&#xA;&#xA;Groovy code called to build an XML message to be used for now solutions. See Sample below&#xA;&#xA;&lt;tracking&gt;&#xA;  &lt;truck-arrival&gt;&#xA;    &lt;gate-id&gt;SI GATE&lt;/gate-id&gt;&#xA;    &lt;stage-id&gt;SI GATE&lt;/stage-id&gt;&#xA;    &lt;lane-id&gt;2&lt;/lane-id&gt;&#xA;    &lt;truck trucking-co-id='AABV' id='1234' /&gt;&#xA;    &lt;truck-visit tracking-tag-nbr='101' tv-key='5067538' /&gt;&#xA;    &lt;dropoff&gt;&#xA;      &lt;chassis eqid='AMIN012826X' length-mm='6068' height-mm='0' type='C20' /&gt;&#xA;      &lt;position slot='' /&gt;&#xA;    &lt;/dropoff&gt;&#xA;    &lt;timestamp&gt;2008-07-03T00:06:41&lt;/timestamp&gt;&#xA;  &lt;/truck-arrival&gt;&#xA;&lt;/tracking&gt;&#xA;&#xA;Amine Nebri, anebri@navis.com - June 25 2008&#xA;Added OutgateMessage SKB - Aug 12 2008&#xA;&#xA;*/&#xA;&#xA;import groovy.xml.MarkupBuilder&#xA;import com.navis.argo.business.reference.Chassis&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.road.business.atoms.TranSubTypeEnum&#xA;&#xA;class NOWMessageBuilder&#xA;{&#xA;&#x9;public String formIngateMessage(inOutDao) &#xA;&#x9;{&#xA;&#x9;&#x9;def fixNull = {s -&gt; s == null ? &quot;&quot; : s }&#xA;&#x9;&#x9;def writer = new StringWriter()&#xA;&#x9;&#x9;def xml = new MarkupBuilder(writer)&#xA;&#xA;&#x9;&#x9;xml.tracking()&#xA;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;'truck-arrival'() &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;'gate-id'(inOutDao.gate.gateId)&#xA;&#x9;&#x9;&#x9;&#x9;'stage-id'(inOutDao.gate.gateId)&#xA;&#x9;&#x9;&#x9;&#x9;'lane-id'(inOutDao.tv.tvdtlsEntryLane == null ? '99' : inOutDao.tv.tvdtlsEntryLane.laneId)&#xA;&#x9;&#x9;&#x9;&#x9;truck(id: fixNull(inOutDao.tv.tvdtlsTruckId), 'trucking-co-id': fixNull(inOutDao.tv.carrierOperator.bzuId))&#xA;&#x9;&#x9;&#x9;&#x9;'truck-visit'('tv-key': inOutDao.tv.cvdCv.cvGkey, 'tracking-tag-nbr': fixNull(inOutDao.tv.tvdtlsBatNbr))&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;dropoff()&#xA;&#x9;&#x9;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def transactions = (Set&lt;TruckTransaction&gt;) inOutDao.tv.tvdtlsTruckTrans&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (transaction in transactions)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (transaction.tranSubType in [TranSubTypeEnum.RE, TranSubTypeEnum.RM, TranSubTypeEnum.RC, TranSubTypeEnum.RI])&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def container_ = Container.findContainer(transaction.tranCtrNbr)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (container_)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;container(eqid: transaction.tranCtrNbr, type: container_.eqEquipType.eqtypId, 'length-mm': container_.eqLengthMm, 'height-mm': container_.eqHeightMm, 'on-chassis-id': transaction.tranChsNbr, slot: fixNull(transaction.tranCtrPosition))      &#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (transaction.tranChsNbr)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def chassis_ = Chassis.findChassis(transaction.tranChsNbr)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (chassis_)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;chassis(eqid: transaction.tranChsNbr, type: chassis_.eqEquipType.eqtypId, 'length-mm': chassis_.eqLengthMm, 'height-mm': chassis_.eqHeightMm)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;position(slot: fixNull(transaction.tranChsPosition))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;timestamp(java.text.MessageFormat.format(&quot;{0,date,yyyy-MM-dd'T'HH:mm:ss}&quot;, new Date()))&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;//com.navis.road.business.util.RoadBizUtil.getMessageCollector().appendMessage(com.navis.framework.util.BizFailure.create(writer.toString()))&#xA;&#xA;        &#x9;&#x9;return writer.toString()&#xA;   &#x9; }&#xA;   &#x9; &#xA;   &#x9; public String formOutgateMessage(inOutDao) &#xA;&#x9; &#x9;{&#xA;&#x9; &#x9;&#x9;def fixNull = {s -&gt; s == null ? &quot;&quot; : s }&#xA;&#x9; &#x9;&#x9;def writer = new StringWriter()&#xA;&#x9; &#x9;&#x9;def xml = new MarkupBuilder(writer)&#xA;&#x9; &#xA;&#x9; &#x9;&#x9;xml.tracking()&#xA;&#x9; &#x9;&#x9; {&#xA;&#x9; &#x9;&#x9;&#x9;'truck-departure'() &#xA;&#x9; &#x9;&#x9;&#x9;{&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;'gate-id'(inOutDao.gate.gateId)&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;'stage-id'(inOutDao.gate.gateId)&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;'lane-id'(inOutDao.tv.tvdtlsEntryLane == null ? '99' : inOutDao.tv.tvdtlsEntryLane.laneId)&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;truck(id: fixNull(inOutDao.tv.tvdtlsTruckId), 'trucking-co-id': fixNull(inOutDao.tv.carrierOperator.bzuId))&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;'truck-visit'('tv-key': inOutDao.tv.cvdCv.cvGkey, 'tracking-tag-nbr': fixNull(inOutDao.tv.tvdtlsBatNbr))&#xA;&#x9; &#xA;&#x9; &#x9;&#x9;&#x9;&#x9;pickup()&#xA;&#x9; &#x9;&#x9;&#x9;&#x9; {&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;def transactions = (Set&lt;TruckTransaction&gt;) inOutDao.tv.tvdtlsTruckTrans&#xA;&#x9; &#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;for (transaction in transactions)&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9; {&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (transaction.tranSubType in [TranSubTypeEnum.RE, TranSubTypeEnum.RM, TranSubTypeEnum.RC, TranSubTypeEnum.RI])&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9; {&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def container_ = Container.findContainer(transaction.tranCtrNbr)&#xA;&#x9; &#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (container_)&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;container(eqid: transaction.tranCtrNbr, type: container_.eqEquipType.eqtypId, 'length-mm': container_.eqLengthMm, 'height-mm': container_.eqHeightMm, 'on-chassis-id': transaction.tranChsNbr, slot: fixNull(transaction.tranCtrPosition))      &#xA;&#x9; &#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (transaction.tranChsNbr)&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; {&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def chassis_ = Chassis.findChassis(transaction.tranChsNbr)&#xA;&#x9; &#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (chassis_)&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; {&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;chassis(eqid: transaction.tranChsNbr, type: chassis_.eqEquipType.eqtypId, 'length-mm': chassis_.eqLengthMm, 'height-mm': chassis_.eqHeightMm)&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;position(slot: fixNull(transaction.tranChsPosition))&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9; &#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;timestamp(java.text.MessageFormat.format(&quot;{0,date,yyyy-MM-dd'T'HH:mm:ss}&quot;, new Date()))&#xA;&#x9; &#x9;&#x9;&#x9;}&#xA;&#x9; &#x9;&#x9;}&#xA;&#x9; &#xA;&#x9; &#x9;&#x9;//com.navis.road.business.util.RoadBizUtil.getMessageCollector().appendMessage(com.navis.framework.util.BizFailure.create(writer.toString()))&#xA;&#x9; &#xA;&#x9;         &#x9;&#x9;return writer.toString()&#xA;   &#x9; }&#xA;}" />
<digital-asset id="QuayCleanup" short-description="Delete extra Quay entities (JJS)" groovy-code="package com.navis.argo.webservice&#xA;&#xA;import com.navis.argo.ArgoEntity&#xA;import com.navis.argo.ArgoField&#xA;import com.navis.argo.business.model.Quay&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;&#xA;/*&#xA;* Copyright (c) 2007 Navis LLC. All Rights Reserved.&#xA;* $Id: PlugIns.xml,v 1.1 2008/11/17 22:36:38 sbauer Exp $&#xA;*/&#xA;class QuayCleanup {&#xA;    public void execute(Map inParameters) {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(ArgoEntity.QUAY);&#xA;        dq.addDqPredicate(PredicateFactory.eq(ArgoField.QUAY_ID, &quot;52&quot;));&#xA;         dq.addDqPredicate(PredicateFactory.eq(ArgoField.PRTL_GKEY, 256424));&#xA;       List quays = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;        for (Quay quay in quays) {&#xA;            try {&#xA;                HibernateApi.getInstance().delete(quay, true);&#xA;            } catch (Exception e) {&#xA;                println(&quot;could not delete quay: &quot; + e)&#xA;            }&#xA;        }&#xA;    }&#xA;}" />
<digital-asset id="GvyEventSpecificFldValue" short-description="GvyEventSpecificFldValue" groovy-code="public class GvyEventSpecificFldValue {&#xA;&#xA;  //For COMMUNITY_SERVICE_UNASSIGN&#xA;  public String getCommunityServiceUnAssign(String xmlGvyData)&#xA;  { &#xA;    def  xmlGvyString = xmlGvyData&#xA;    xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;truck=&quot;,&quot;null&quot;,null,null,null);&#xA;    xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;consignee=&quot;,&quot;null&quot;,null,null,null);&#xA;    xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;shipper=&quot;,&quot;null&quot;,null,null,null);&#xA;    xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;cargoNotes=&quot;,&quot;null&quot;,null,null,null);&#xA;    println(&quot;After_Change_COMMUNITY_SERVICE_UNASSIGN&quot;);&#xA;    return xmlGvyString;&#xA;  }&#xA;  //Events After TAG_STRIP_ASSIGN&#xA;  public String getAfterTagStripAssign(String xmlGvyData)&#xA;  {&#xA;    println('AFTER_TAG_STRIP_ASSIGN') &#xA;    def  xmlGvyString = xmlGvyData&#xA;    xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;planDisp=&quot;,&quot;T&quot;,null,null,null);&#xA;    xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;dsc=&quot;,&quot;C&quot;,null,null,null);&#xA;    println(&quot;After_Change_TAG_STRIP_UNASSIGN&quot;);&#xA;    return xmlGvyString;&#xA;  }&#x9;&#xA; &#xA;  //TAG_STRIP_UNASSIGN&#xA;  public String getTagStripUnAssign(String xmlGvyData)&#xA;  {&#xA;    println('TAG_STRIP_UNASSIGN') &#xA;    def  xmlGvyString = xmlGvyData&#xA;    xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;planDisp=&quot;,&quot;null&quot;,null,null,null);&#xA;    xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;dsc=&quot;,&quot;null&quot;,null,null,null);&#xA;    xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;crStatus=&quot;,&quot;TS&quot;,null,&quot;L&quot;,&quot; &quot;);&#xA;    println(&quot;After_Change_TAG_STRIP_UNASSIGN&quot;);&#xA;    return xmlGvyString;&#xA;  }&#xA;&#x9;&#xA;  //TRANSFER EVENT CHANGE&#xA;  public String getTransferEventChanges(String xmlGvyData)&#xA;  {&#xA;    def  xmlGvyString = xmlGvyData&#xA;    xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;truck=&quot;,&quot;&quot;,null,null,null);&#xA;&#xA;    return xmlGvyString;&#xA;  }&#xA; &#xA;  //TRANSFER CANCEL EVENT&#xA;  public String getTransferCancelEvent(String xmlGvyData, String trucker, String commodity)&#xA;  {&#xA;    def  xmlGvyString = xmlGvyData&#xA;   if(commodity.equals('SIT')){&#xA;       xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;dsc=&quot;,&quot;S&quot;,null,null,null);&#xA;   }else{&#xA;      xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;dsc=&quot;,&quot;&quot;,null,null,null); &#xA;   } &#xA;    xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;truck=&quot;,trucker,null,null,null); &#xA;    xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;planDisp=&quot;,&quot;&quot;,null,null,null); &#xA;    &#xA;    return xmlGvyString;&#xA;  }&#xA;  &#xA;  //YB ASSIGN/UNASSIGN EVENT&#xA;  public String getYBEvent(String xmlGvyData, String trucker, String msgType)&#xA;  {&#xA;    def  xmlGvyString = xmlGvyData&#xA;    if(msgType.equals('YB_UNASSIGN')){&#xA;       xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;planDisp=&quot;,&quot;&quot;,null,null,null); &#xA;    }&#xA;    xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;truck=&quot;,trucker,null,null,null); &#xA;    &#xA;    return xmlGvyString;&#xA;  }&#xA;  &#xA;&#xA;  //MDA_ASSIGN and  RETURN_TO_CUSTOMER_ASSIGN&#xA;  public String getRetCustomerAssign(String xmlGvyData)&#xA;  {&#xA;     def xmlGvyString = xmlGvyData&#xA;     try&#xA;    {&#xA;       def  locationStatus = getFieldValues(xmlGvyString, &quot;locationStatus=&quot;);&#xA;       def planDisp = getFieldValues(xmlGvyString, &quot;planDisp=&quot;);&#xA;       println(&quot;locationStatus ::&quot;+locationStatus+&quot;  planDisp ::&quot;+planDisp);&#xA;       if(locationStatus.equals(&quot;3&quot;)){&#xA;          def locStatusOld = &quot;locationStatus='&quot;+locationStatus+&quot;'&quot;;&#xA;          def locStatusNew = &quot;locationStatus='&quot;+planDisp+&quot;'&quot;;&#xA;          def planDispOld = &quot;planDisp='&quot;+planDisp+&quot;'&quot;;&#xA;          def planDispNew = &quot;planDisp='null'&quot;;&#xA;        &#xA;          xmlGvyString = xmlGvyString.replace(locStatusOld,locStatusNew);&#xA;          xmlGvyString = xmlGvyString.replace(planDispOld,planDispNew);&#xA;         }&#xA;       }catch(Exception e){&#xA;          e.printStackTrace()&#xA;       }&#xA;        return xmlGvyString;&#xA;   }&#xA;   &#xA;   public static String getFieldValues(String xmlGvyString, String field)&#xA;  {&#xA;      String fieldValue = ''&#xA;      try&#xA;     {&#xA;        def fieldIndx = xmlGvyString.indexOf(field);&#xA;        def equalsIndx = xmlGvyString.indexOf(&quot;=&quot;,fieldIndx);&#xA;        def nextspace = xmlGvyString.indexOf(&quot;'&quot;, equalsIndx+2);&#xA;        fieldValue  = xmlGvyString.substring(equalsIndx+2, nextspace);&#xA;        //println(&quot;equalsIndx:&quot;+equalsIndx+&quot;  nextspace:&quot;+nextspace+&quot; oldValue:&quot;+fieldValue);&#xA;      }catch(Exception e){&#xA;         e.printStackTrace()&#xA;      }&#xA;      return fieldValue;&#xA;   }&#xA;&#xA;  public String addEventSpecificFldValue(String xmlGvyData,String field,String newFieldValue,String appendDir,String StripDir,String stripChar)&#xA;  {&#xA;     String newValue = null;&#xA;     String oldValue = null;&#xA;     String xmlGvyString = xmlGvyData;&#xA;     int fieldIndx = xmlGvyString.indexOf(field);&#xA;     try&#xA;     {&#x9;&#xA;        if(fieldIndx != -1)&#xA;       {&#xA;          int equalsIndx = xmlGvyString.indexOf(&quot;=&quot;,fieldIndx);&#xA;          int nextspace = xmlGvyString.indexOf(&quot;'&quot;, equalsIndx+2);&#xA;          oldValue = xmlGvyString.substring(equalsIndx+2, nextspace);&#xA;         //Append New Value&#xA;         if(appendDir != null )&#xA;         {  &#xA;            if(appendDir.equals(&quot;L&quot;)){&#xA;              newValue =  oldValue.equals('null') ? newFieldValue : newFieldValue+oldValue;&#xA;             //  println(&quot;Append_Left:&quot;+newValue);&#xA;             }&#xA;             else if(appendDir.equals(&quot;R&quot;)){&#xA;             newValue = oldValue.equals('null') ? newFieldValue : oldValue+newFieldValue;&#xA;             //  println(&quot;Append_Right:&quot;+newValue);&#xA;            }&#xA;          }&#xA;          //Strip Value&#xA;         else if(StripDir != null)&#xA;         {&#xA;            if(StripDir.equals(&quot;L&quot;))&#xA;           {&#xA;              if(oldValue.startsWith(newFieldValue)){&#xA;                   newValue = oldValue.indexOf(stripChar) != -1 ?   oldValue.substring(oldValue.indexOf(stripChar)+1): oldValue;&#xA;              }else{&#xA;                   newValue = oldValue.equals(newFieldValue) ? 'null' : oldValue ; &#xA;              }&#xA;              // println(&quot;Strip_Left:&quot;+newValue);&#xA;            }&#xA;           else if(StripDir.equals(&quot;R&quot;))&#xA;          {&#xA;             if(oldValue.endsWith(newFieldValue)){&#xA;                 newValue = oldValue.indexOf(stripChar) != -1 ? oldValue.substring(0,oldValue.indexOf(stripChar)): oldValue;&#xA;              }else{&#xA;                newValue = oldValue.equals(newFieldValue) ? 'null' : oldValue ; &#xA;             }&#xA;           }&#xA;      }//Strip Ends&#xA;      else if(oldValue.equals(&quot;null&quot;) ){&#xA;         newValue = newFieldValue;&#xA;       }&#xA;      else{&#xA;        //CHECK FOR VALUE HERE&#xA;         newValue = newFieldValue;&#xA;      }&#xA;     println(&quot;oldValue ::&quot;+oldValue+&quot;  newValue :::&quot;+newValue)&#xA;      String oldXmlValue = field+&quot;'&quot;+oldValue+&quot;'&quot;;&#xA;      String newXmlValue = field+&quot;'&quot;+newValue+&quot;'&quot;;&#xA;     // println(&quot;oldXmlValue ::&quot;+oldXmlValue+&quot;  newXmlValue :::&quot;+newXmlValue); &#xA;      xmlGvyString = xmlGvyString.replace(oldXmlValue, newXmlValue);&#xA;      }//IF Ends&#xA;    }catch(Exception e){&#xA;       e.printStackTrace()&#xA;    }&#xA;     return xmlGvyString;&#xA;    }// Method addEventSpecificFldValue Ends&#xA; }//Class Ends" />
<digital-asset id="GvyUnitInGateTempCheck" short-description="GvyUnitInGateTempCheck" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.inventory.business.units.ReeferRecord&#xA;import java.util.Set&#xA;&#xA;public class GvyUnitInGateTempCheck{&#xA;&#xA;  public void doIt(Object u, Object event)&#xA;  {&#xA;    def gvyBaseClass = new GroovyInjectionBase()&#xA;    def unit = event.getEntity();&#xA;    def unitId = unit.getFieldValue(&quot;unitId&quot;);                                          &#xA;    def bookingNumber = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;);&#xA;    def IngateSetPoint = getSetPointTmp(unit)&#x9;&#xA;    def IngateReqTemp = getTempDecimalValue(IngateSetPoint)&#xA;    def expGateBkgReqTemp = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqoiTempRequired&quot;);&#xA;    def expBkgReqTemp = getTempDecimalValue(expGateBkgReqTemp)&#xA;    def expBkgPort = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqoDestination&quot;);                   &#xA;     println(&quot;unitId : &quot;+unitId+&quot;bookingNumber : &quot;+bookingNumber+&quot; IngateReqTemp :&gt;&gt;&quot;+IngateReqTemp+&quot;expBkgReqTemp:&gt;&gt;&quot;+expBkgReqTemp+ &quot;expBkgPort : &quot;+expBkgPort);&#xA;    if(IngateReqTemp != expBkgReqTemp)&#xA;    {&#xA;      def writer = new StringWriter()&#xA;      def builder = new groovy.xml.MarkupBuilder(writer)&#xA;      def container = builder.GroovyMsg(msgType:'InGateReqTemp',unit:unitId,  bkgNum:bookingNumber,gateReqTemp:IngateReqTemp,bkgReqTemp:expBkgReqTemp,port:expBkgPort)&#xA;      def xml = writer.toString()&#xA;      println('XML &gt;&gt;'+xml)&#xA;     // send the XML to the jms queue &#xA;     gvyBaseClass.sendXml(xml)&#xA;    }&#xA;  }&#xA;&#xA;  public String getTempDecimalValue(Object tempValue)&#xA;  {&#xA;    def reqTemp = ''+tempValue&#xA;    println(&quot;InGateTemp :1 :&quot;+reqTemp);&#xA;    if(reqTemp.trim().length() &gt; 5)&#xA;    {&#xA;      def indx = reqTemp.indexOf(&quot;.&quot;);&#xA;      reqTemp = reqTemp.substring(0,indx+3);&#xA;      println(&quot;InGateTemp :2 :&quot;+reqTemp);&#xA;    }&#xA;    return reqTemp&#xA;  }&#xA;&#xA;  public Object getSetPointTmp(Object u)&#xA;  {&#xA;     def setPoint =''&#xA;     ReeferRecord latestRecord = null;&#xA;     Set reefRecordSet= u.getUnitReeferRecordSet()&#xA;     println('reefRecordSet :&gt;&gt; '+reefRecordSet)  &#xA;     if (reefRecordSet != null &amp;&amp; reefRecordSet.size() &gt; 0) {&#xA;       Object [] reefRecords  = reefRecordSet.toArray();&#xA;       Arrays.sort(reefRecords);&#xA;       latestRecord = (ReeferRecord)reefRecords[reefRecords.length - 1];&#xA;       setPoint = latestRecord.getRfrecSetPointTmp()&#xA;       println('setPoint ::'+setPoint)&#xA;    }&#xA;    return setPoint&#xA;  }&#xA;&#xA;}" />
<digital-asset id="GvyUnitCargoStatus" short-description="Cargo Status Process" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.services.business.event.EventFieldChange&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;import com.navis.framework.util.DateUtil;&#xA;import com.navis.argo.business.atoms.EquipClassEnum;&#xA;&#xA;&#xA;public class GvyUnitCargoStatus {&#xA;&#xA;public String lookupCommodity(String id) {&#xA;   DomainQuery dq = QueryUtils.createDomainQuery(&quot;Commodity&quot;).addDqPredicate(PredicateFactory.eq(com.navis.argo.ArgoRefField.CMDY_GKEY, id));&#xA;   Commodity c = (Commodity)HibernateApi.getInstance().getUniqueEntityByDomainQuery(dq);&#xA;  if(c == null)  {&#xA;     return &quot;&quot;;&#xA;  }&#xA;  return c.getCmdyShortName();&#xA;&#xA;}&#xA;&#xA;public String getPrevValue( Object event, String tagName) {&#xA;&#x9;Set set = event.getEvent().getEvntFieldChanges();&#xA;&#x9;Iterator iter = set.iterator();&#xA;&#x9;EventFieldChange efc;&#xA;&#x9;String ret = &quot;&quot;;&#xA;&#x9;while ( iter.hasNext()) {&#xA;&#x9;&#x9;efc = (EventFieldChange)iter.next();&#xA;&#x9;&#x9;if ( tagName.equalsIgnoreCase(efc.getMetafieldId())) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return efc.getPrevVal();&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return ret;&#xA;}&#xA;&#xA;public String sendXml(String N4MsgType,Object event)&#xA;{&#xA;&#x9;def unit = event.getEntity();&#xA;&#x9;if ( ! EquipClassEnum.CONTAINER.equals( unit.getPrimaryEq().getEqClass()))&#xA;&#x9;&#x9;return &quot;Not a container. No Cargo Status email sent out.&quot;;&#xA;&#xA;  def gvyBase = new GroovyInjectionBase()&#xA;  def gvyMsgFmt = gvyBase.getGroovyClassInstance(&quot;GvyMsgFormatter&quot;);&#xA;  def _msgType =  'CARGO_STATUS';&#xA;  def api = new GroovyApi();&#xA;&#xA;&#x9;//def eqClass = unit.getPrimaryEq().getEqClass();&#xA;&#x9;//api.log( &quot;eqClass=&quot; + eqClass);&#xA;&#xA;  def editedBy = event.getEvent().getEvntCreator();&#xA;&#xA;&#xA; // def eventTags = ['Destination', 'FreightKind', 'Commodity', 'ConsigneeName', 'Holds', 'DrayStatus',&#xA;  //&#x9;&#x9;'SpecialStow', 'RoutingGroup', 'BlNumber', 'UnitRemark', 'InboundCarrierId', 'UnitNbr'];&#xA;&#xA;  def unitTags = ['Destination', 'FreightKind', 'CommodityDescription',&#xA;  &#x9;&#x9;'GoodsConsigneeName', 'UnitHoldsAndPermissions', 'DrayStatus',&#xA;  &#x9;&#x9;'SpecialStow', 'RoutingGroup', 'GoodsBlNbr', 'UnitRemark', 'UnitNbr'];&#xA;&#xA;&#xA;  def xmlMsg = new StringBuffer();&#xA;&#xA;  def tempMsg = event.getPropertyXml( &quot;GroovyMsg&quot;, unitTags);&#xA;  //println(tempMsg.substring( 0, tempMsg.length()-2));&#xA;&#xA;&#x9;xmlMsg.append( tempMsg.substring( 0, tempMsg.length()-2));&#xA;&#xA;//def eachAttr = null;&#xA;&#xA;  for( eachAttr in unitTags)&#xA;  {&#xA;&#x9;  api.log( &quot;trying to get prev attr: &quot; + eachAttr);&#xA;    if (event.wasFieldChanged(eachAttr))&#xA;    {&#xA;        println(&quot;eachAttr Changed : &quot;+eachAttr)&#xA;        def preValue = event.getPreviousPropertyAsString(eachAttr)&#xA;        if(eachAttr.equals(&quot;CommodityDescription&quot;)) {&#xA;             preValue = lookupCommodity(preValue);&#xA;        }&#xA;        //  def preValue = event.getPreviousProperty(eachAttr)&#xA;&#xA;        if ( preValue == null || preValue.size() == 0)&#xA;        &#x9;preValue = &quot;&quot;;&#xA;//println(&quot;preval=&quot;+preValue+&quot;class=&quot;+preValue.getClass());&#xA;        xmlMsg.append(gvyMsgFmt.doIt(' updt_'+eachAttr, preValue))&#xA;&#xA;     }&#xA;   }&#xA;&#xA;    //def msgfmt = msgformat.substring(0,msgformat.length()-1)&#xA;    //println(&quot;Message1 : &quot;+msgfmt);&#xA;&#xA;    def category = unit.getFieldValue(&quot;unitCategory&quot;);&#xA;    api.log( &quot;unitCategory = &quot; + category);&#xA;    def vesvoy = &quot;&quot;;&#xA;    if ( UnitCategoryEnum.IMPORT.equals( category) || UnitCategoryEnum.TRANSSHIP.equals( category))&#xA;    &#x9;vesvoy = unit.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;);&#xA;    else if ( UnitCategoryEnum.EXPORT.equals(category) || UnitCategoryEnum.THROUGH.equals(category) )&#xA;    &#x9;vesvoy = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;);&#xA;&#xA;    // special handle for consignee change&#xA;    def cnee = getPrevValue( event, &quot;gdsConsigneeAsString&quot;);&#xA;&#x9;&#x9;api.log( cnee);&#xA;&#xA;&#x9;&#x9;if ( cnee != &quot;&quot;)&#xA;&#x9;&#x9;&#x9;cnee = &quot; updt_GoodsConsigneeName='&quot; + cnee + &quot;' &quot;;&#xA;&#xA;&#x9;&#x9;// get local time&#xA;&#x9;&#x9;def inTime = event.getEvent().getEventTime();&#xA;&#x9;&#x9;def timezone = unit.getUnitComplex().getTimeZone();&#xA;    def eventTime = DateUtil.convertDateToLocalTime(inTime, timezone);&#xA;&#xA;&#xA;    def finalmsg = xmlMsg + cnee + &quot;Vesvoy='&quot; + vesvoy + &quot;' editedBy='&quot; +&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;editedBy + &quot;' msgType='&quot; + N4MsgType + &quot;' eventTime='&quot; + eventTime + &quot;' /&gt;&quot;;&#xA;&#xA;    //def xmlMessage = gvyBase.getGroovyClassInstance(&quot;GvyXmlMsgFormatter&quot;)&#xA;    //def xmlmsg = xmlMessage.doIt(finalmsg)&#xA;    api.log(&quot;XML :&quot;+finalmsg)&#xA;&#xA;    api.sendXml( finalmsg);&#xA;    return finalmsg&#xA; }&#xA;}" />
<digital-asset id="EITCheck" short-description="EITCheck" groovy-code="/*&#xA;&#xA;Groovy code called to check EIT&#xA;&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;&#xA;public class EITCheck  extends GroovyInjectionBase&#xA;{&#xA;&#x9;public void execute(inDao, api)&#xA;&#x9;{&#xA;&#x9;&#x9;println(&quot;\nEITCheck: --Executing Groovy Gate Task---&quot;)&#xA;&#xA;&#x9;&#x9;def eitString = inDao.tv.tvdtlsBatNbr&#xA;&#x9;&#x9;def eitOutString = inDao.tv.tvdtlsOutBatNbr&#xA;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;println(&quot;EITCheck: &quot;+eitString+&quot; &quot;+eitOutString+&quot;!\n\n&quot;)&#xA;&#xA;                                     &#xA;&#x9;                    // println(inDao.tv.dump());&#xA;&#x9;&#x9;if(eitString != null &amp;&amp; eitOutString == null) {&#xA;&#x9;&#x9;   throw new Exception(&quot;Out Gate: Enter Out Bat #&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" />
<digital-asset id="NOWProcessor" short-description="called at the end of the truck gatein transaction. It submits an XML document to NOW Solutions Web service using SOAP" groovy-code="/*&#xA;&#xA;Groovy code called at the end of the truck gatein transaction. It submits an XML document to NOW Solutions Web service using SOAP&#xA;&#xA;Amine Nebri, anebri@navis.com - June 25 2008&#xA;&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;&#xA;public class NOWProcessor  extends GroovyInjectionBase&#xA;{&#xA;&#x9;public void execute(inDao, api, arrival)&#xA;&#x9;{&#xA;&#x9;&#x9;println(&quot;\nNOWProcessor: --Executing Groovy Gate Task---&quot;)&#xA;&#xA;&#x9;&#x9;def eitString = inDao.tv.tvdtlsBatNbr&#xA;&#xA;&#x9;&#x9;// We exit if the Bat Number is not numeric or &lt;100 and &gt;200&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;if (eitString == null)&#xA;&#x9;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;NOWProcessor: Skipping null id!\n\n&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;return &#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;int eitId = eitString.toInteger() &#xA;&#xA;&#x9;&#x9;&#x9;if (eitId &lt; 101 || eitId &gt;200)&#xA;&#x9;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;NOWProcessor: Skipping eit &quot;+eitId+&quot;!\n\n&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;return &#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (Exception e)&#xA;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;println(&quot;NOWProcessor: Skipping non numeric id  &quot;+eitString+&quot;!\n\n&quot;)&#xA;&#x9;&#x9;&#x9;return &#xA;&#x9;&#x9;}&#xA;&#xA;                                         def url = api.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;).getNowServer();&#xA;&#x9;&#x9;if(url == null) {&#xA;&#x9;&#x9;      println(&quot;NOWProcessor: Skipping no now server  !\n\n&quot;)&#xA;&#x9;&#x9;}&#xA;&#xA;                                          // Build the message by calling NOWMessageBuilder&#xA;&#x9;&#x9;def msg =null;&#xA;                                          if(arrival) {&#xA;                             &#x9;    msg  = api.getGroovyClassInstance(&quot;NOWMessageBuilder&quot;).formIngateMessage(inDao)&#xA;                                          } else {&#xA;&#x9;&#x9;   msg  = api.getGroovyClassInstance(&quot;NOWMessageBuilder&quot;).formOutgateMessage(inDao)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;def time = System.currentTimeMillis();&#xA;&#x9;&#x9;// Invoke NOW&#xA;&#x9;&#x9;println(&quot;NOWProcessor: invoking NOW WebService with: &quot; + msg)&#xA;&#x9;&#x9;//def proxy = new groovy.net.soap.SoapClient(&quot;http://192.168.170.175:10060/.wsdl&quot;)&#xA;                                         def proxy = new groovy.net.soap.SoapClient(url);&#xA;&#x9;&#x9;def result&#xA;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;result = proxy.process_tracking(msg)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (Exception e)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;throw new Exception(&quot;NOWProcessor: Could not connect to NOW: &quot; + e.getClass())&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;// Test for null result&#xA;&#xA;&#x9;&#x9;time = System.currentTimeMillis() - time;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA; &#x9;&#x9;println(&quot;NOWProcessor:(&quot;+(double)time/1000.0+&quot;) NOW result is: &quot; + result)&#xA;&#xA;&#x9;&#x9;if (!result)&#xA;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;throw new Exception(&quot;NOW WebService returned null&quot;)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;// Examine the result document&#xA;&#x9;&#x9;def resultDoc = new XmlParser().parseText(result)&#xA;&#xA;&#x9;&#x9;def status = resultDoc.'truck-arrival-response'[0].'@status'&#xA;&#xA;&#x9;&#x9;println(&quot;NOWProcessor: status is &quot; + status)&#xA;&#xA;&#x9;&#x9;if (status == &quot;3&quot;) &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;def error = resultDoc.'truck-arrival-response'[0].messages.message[0].'@text'&#xA;&#xA;&#x9;&#x9;&#x9;println(&quot;NOWProcessor: error is: &quot; + error)&#xA;&#x9;&#x9;&#x9;throw new Exception(error)&#xA;&#x9;&#x9;}&#xA;                                       &#xA; &#x9;&#x9;time = System.currentTimeMillis() - time;&#xA;&#x9;&#x9;time = (double)time/1000.0;&#xA;&#x9;&#x9;println(&quot;NOWProcessor: success! Parse Time=&quot;+time+&quot;\n\n&quot;)&#xA;&#x9;}&#xA;}" />
<digital-asset id="NOWOutgateProcessor" short-description="NOWOutgateProcessor" groovy-code="/*&#xA;&#xA;Groovy code called at the end of the truck outgate transaction. It submits an XML document to NOW Solutions Web service using SOAP&#xA;&#xA;Amine Nebri, anebri@navis.com - June 25 2008&#xA;&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;&#xA;public class NOWOutgateProcessor  extends GroovyInjectionBase&#xA;{&#xA;&#x9;public void execute(inDao, api, departure)&#xA;&#x9;{&#xA;&#x9;&#x9;println(&quot;\nNOWProcessor: --Executing Groovy Gate Task---&quot;)&#xA;&#xA;&#x9;&#x9;def eitString = inDao.tv.tvdtlsBatNbr&#xA;&#xA;&#x9;&#x9;// We exit if the Bat Number is not numeric or &lt;100 and &gt;200&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;if (eitString == null)&#xA;&#x9;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;NOWProcessor: Skipping null id!\n\n&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;return &#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;int eitId = eitString.toInteger() &#xA;&#xA;&#x9;&#x9;&#x9;if (eitId &lt; 101 || eitId &gt;200)&#xA;&#x9;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;NOWProcessor: Skipping eit &quot;+eitId+&quot;!\n\n&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;return &#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (Exception e)&#xA;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;println(&quot;NOWProcessor: Skipping non numeric id  &quot;+eitString+&quot;!\n\n&quot;)&#xA;&#x9;&#x9;&#x9;return &#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;def url = api.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;).getNowServer();&#xA;&#x9;&#x9;if(url == null) {&#xA;&#x9;&#x9;      println(&quot;NOWProcessor: Skipping no now server  !\n\n&quot;);&#xA;                                                return;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;// Build the message by calling NOWMessageBuilder&#xA;&#x9;&#x9;def msg = api.getGroovyClassInstance(&quot;NOWMessageBuilder&quot;).formOutgateMessage(inDao)&#xA;&#xA;&#x9;&#x9;def time = System.currentTimeMillis();&#xA;&#x9;&#x9;// Invoke NOW&#xA;&#x9;&#x9;println(&quot;NOWProcessor: invoking NOW WebService with: &quot; + msg)&#xA;&#x9;&#x9;def proxy = new groovy.net.soap.SoapClient(url)&#xA;&#x9;&#x9;def result&#xA;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;result = proxy.process_tracking(msg)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (Exception e)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;throw new Exception(&quot;NOWProcessor: Could not connect to NOW: &quot; + e.getClass())&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;// Test for null result&#xA;&#xA;&#x9;&#x9;time = System.currentTimeMillis() - time;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA; &#x9;&#x9;println(&quot;NOWProcessor:(&quot;+(double)time/1000.0+&quot;) NOW result is: &quot; + result)&#xA;&#xA;&#x9;&#x9;if (!result)&#xA;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;throw new Exception(&quot;NOW WebService returned null&quot;)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;// Examine the result document&#xA;&#x9;&#x9;def resultDoc = new XmlParser().parseText(result)&#xA;&#xA;&#x9;&#x9;def status = resultDoc.'truck-departure-response'[0].'@status'&#xA;&#xA;&#x9;&#x9;println(&quot;NOWProcessor: status is &quot; + status)&#xA;&#xA;&#x9;&#x9;if (status == &quot;3&quot;) &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;def error = resultDoc.'truck-departure-response'[0].messages.message[0].'@text'&#xA;&#xA;&#x9;&#x9;&#x9;println(&quot;NOWProcessor: error is: &quot; + error)&#xA;&#x9;&#x9;&#x9;throw new Exception(error)&#xA;&#x9;&#x9;}&#xA;                                       &#xA; &#x9;&#x9;time = System.currentTimeMillis() - time;&#xA;&#x9;&#x9;time = (double)time/1000.0;&#xA;&#x9;&#x9;println(&quot;NOWProcessor: success! Parse Time=&quot;+time+&quot;\n\n&quot;)&#xA;&#x9;}&#xA;}" />
<digital-asset id="GvyXmlMsgFormatter" short-description="Groovy Xml MsgFormatter " groovy-code="public class GvyXmlMsgFormatter {&#xA;&#xA;  public String doIt(String msgObj) &#xA;  {&#xA;    println(&quot;In Class GvyXmlMsgFormatter.doIt()&quot;)&#xA;&#xA;    def gvyXmlMsg = createGroovyXml(msgObj)&#xA;    return gvyXmlMsg;&#xA;  }&#xA;&#x9;&#xA;  public String  createGroovyXml(String msgString)&#xA;  {&#xA;     def strBuff = new StringBuffer();&#xA;     strBuff.append( '&lt;GroovyMsg');&#xA;     strBuff.append(' '+msgString);&#xA;     strBuff.append( '/&gt;');&#xA;     return strBuff.toString();&#xA;   }&#xA;&#xA;  &#xA;}" />
<digital-asset id="MtyFructoseStripUnit" short-description="MTY FRUCTOSE Process" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.atoms.EventEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.atoms.FreightKindEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.orders.business.eqorders.EquipmentOrderManagerPea&#xA;import com.navis.orders.business.api.EquipmentOrderManager&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.services.business.event.GroovyEvent&#xA;&#xA;public class MtyFructoseStripUnit {&#xA;    public String mtyFrucroseProc(Object unit) {&#xA;&#xA;&#xA;&#x9;def ctrId = unit.getFieldValue(&quot;unitId&quot;);&#xA;&#x9;def bl_nbr = unit.getFieldValue(&quot;unitFlexString09&quot;);&#xA;&#x9;def dobCvId = unit.getFieldValue(&quot;unitFlexString10&quot;);&#xA;&#x9;def unitNotes = &quot;&quot;; //unit.getFieldValue(&quot;unitRemark&quot;);&#xA;&#x9;unit.setFieldValue(&quot;unitFlexString09&quot;, &quot;&quot;);&#xA;&#x9;unit.setFieldValue(&quot;unitFlexString10&quot;, &quot;&quot;);&#xA;&#x9;def f09 = unit.getFieldValue(&quot;unitFlexString09&quot;);&#xA;&#x9;def f10 = unit.getFieldValue(&quot;unitFlexString10&quot;);&#xA;try {&#xA;    //def recorder = (String) inParameters.get(&quot;recorder&quot;);&#xA;&#xA;// find booking&#xA;&#x9;def injBase = new GroovyInjectionBase();&#xA;&#x9;//injBase.log( &quot;unitID= &quot; + ctrId + &quot; bl_nbr= &quot; + bl_nbr + &quot; dobCvId= &quot; + dobCvId);&#xA;&#x9;def facility = injBase.getFacility();&#xA;&#x9;def cv = CarrierVisit.findVesselVisit( facility, dobCvId);&#xA;&#x9;if ( cv == null) {&#xA;&#x9;&#x9;return &quot;ERR_MTY_F_001. Could not find the carrier visit: &quot; + dobCvId;&#xA;&#x9;}&#xA;&#xA;&#x9;def bizScope = ScopedBizUnit.findScopedBizUnit( &quot;MAT&quot;, BizRoleEnum.LINEOP);&#xA;&#x9;if ( bizScope == null) {&#xA;&#x9;&#x9;&#x9;return &quot;ERR_MTY_F_002. Could not find the business unit: MAT&quot;;&#xA;&#x9;}&#xA;&#xA;&#x9;def booking = Booking.findBookingByUniquenessCriteria( bl_nbr, bizScope, cv);&#xA;&#x9;if ( booking == null) {&#xA;&#x9;&#x9;&#x9;return &quot;ERR_MTY_F_003. Could not find booking: &quot; + bl_nbr;&#xA;&#x9;}&#xA;&#xA;&#x9;//get Freight Kind from booking&#xA;&#x9;def freightKindBkg = booking.getFieldValue(&quot;eqoEqStatus&quot;);&#xA;&#x9;injBase.log( &quot;Booking freight kind = &quot; + freightKindBkg);&#xA;&#xA;&#xA;&#x9;// check if the commodity id is ok.&#xA;&#x9;if ( unit.isStorageEmpty())&#xA;&#x9;&#x9;return (new StringBuilder()).append(&quot;ERR_GVY_MTY_F_004. Could not STRIP EMPTY unit: &quot;).append(ctrId).toString();&#xA;&#xA;&#x9;// find the facilityVisit&#xA;&#x9;def fullUfv = unit.getUfvForFacilityNewest(facility);&#xA;&#x9;if ( fullUfv == null) {&#xA;&#x9;&#x9;return &quot;ERR_MTY_F_005. Could not find facility visit for unit:&quot; + ctrId;&#xA;&#x9;}&#xA;&#xA;&#x9;// Strip it, and get back the new full UFV and Unit&#xA;&#x9;def strippedUfv = null;&#xA;&#x9;try {&#xA;&#x9;&#x9;strippedUfv = injBase.stripUfvAndRecordEvent( fullUfv, null, &quot;Gvy MTY Fructose proc&quot;);&#xA;&#x9;} catch ( Exception stripEx) {&#xA;&#x9;&#x9;return &quot;ERR_GVY_MTY_F_006. Could not STRIP unit: &quot; + ctrId;&#xA;&#x9;}&#xA;&#x9;def strippedUnit = strippedUfv.getUfvUnit();&#xA;&#xA;&#x9;if ( strippedUnit == null)&#xA;&#x9;&#x9;return &quot;ERR_GVY_MTY_F_007. Could not get UFV unit after STRIP unit: &quot; + ctrId;&#xA;&#xA;//set FrightKind&#xA; &#x9;if ( !freightKindBkg.equals( FreightKindEnum.MTY)) {&#xA;&#x9;&#x9;strippedUnit.setUnitFreightKind(FreightKindEnum.FCL);&#xA;&#x9;}&#xA;&#x9;// set CATEGORY&#xA;&#x9;strippedUnit.setUnitCategory(UnitCategoryEnum.EXPORT);&#xA;&#xA;  EquipmentOrderManager manager = (EquipmentOrderManager)Roastery.getBean(&quot;equipmentOrderManager&quot;);&#xA;  manager.assignExportBookingToUnit(booking, strippedUnit);&#xA;&#x9;//def eqoMgr = new EquipmentOrderManagerPea();&#xA;&#x9;//eqoMgr.assignExportBookingToUnit( booking, strippedUnit);&#xA;&#xA;&#x9;// set BOOKING NUM and Carrier info&#xA;&#x9;strippedUnit.setFieldValue(&quot;unitGoods.gdsBlNbr&quot;, bl_nbr);&#xA;&#x9;// set back to MTY&#xA;&#x9;strippedUnit.setUnitFreightKind(FreightKindEnum.MTY);&#xA;&#xA;//def api = new GroovyApi();&#xA;def orderItemVal;&#xA;&#xA;def ue = strippedUnit.getUnitPrimaryUe();&#xA;if (ue.getUeDepartureOrderItem() != null) {&#xA;&#x9;orderItemVal = &quot;OrderItem is not null&quot;;&#xA;   ue.getUeDepartureOrderItem().getEqboiOrder().setEqboNbr(bl_nbr);&#xA;} else {&#xA;&#x9;orderItemVal = &quot;OrderItem is null&quot;;&#xA;}&#xA;&#xA;&#x9;//strippedUnit.recordUnitEvent(EventEnum.UNIT_STRIP, null, &quot;Stripped by MtyFructoseStripUnit&quot;);&#xA;&#xA;&#xA;&#x9;GroovyEvent event = new GroovyEvent( null, strippedUnit);&#xA;&#x9;event.postNewEvent( &quot;FRUCTOSE_LOAD&quot;, unitNotes);&#xA;&#xA;&#xA;def routing = strippedUnit.getUnitRouting();&#xA;routing = booking.getRoutingInfo();&#xA;&#xA;&#xA;if ( routing == null)&#xA;&#x9;routing = new Routing();&#xA;def rdcv = booking.getEqoVesselVisit();&#xA;routing.setRtgDeclaredCv( rdcv);&#xA;&#xA;&#x9;def  pod1 = booking.getEqoPod1();&#xA;&#x9;routing.setRtgPOD1( pod1);&#xA;&#xA;&#x9;def pol = booking.getEqoPol();&#xA;&#x9;routing.setRtgPOL( pol);&#xA;&#xA;&#xA;&#xA;&#x9;&#x9;strippedUnit.updateUnitRouting(routing);&#xA;&#x9;&#x9;strippedUnit.getUnitGoods().setGoodsDestination( booking.getEqoDestination());&#xA;&#x9;&#x9;strippedUnit.getUnitGoods().updateShipper( booking.getShipperAsString());&#xA;&#x9;&#x9;strippedUnit.getUnitGoods().updateConsignee( booking.getConsigneeAsString());&#xA;&#x9;&#x9;strippedUnit.setUnitRemark( &quot;Booking number: &quot; + bl_nbr + &quot; vessel visit: &quot; + dobCvId);&#xA;&#x9;// Record an event&#xA;&#x9;return &quot;done via Groovy, booking=&quot; + f09 + &quot; cv=&quot; + f10;&#xA;&#xA;} catch ( Exception ex) {&#xA;&#x9;return ((new StringBuilder()).append(&quot;ERR_GVY_MTY_F_999. Could not fire MTY FRUCTOSE event on unit: &quot;).append(ctrId).append(&quot;\nSN4 Exception: &quot;).append(ex.toString()).toString());&#xA;}&#xA;}&#xA;}&#xA;&#xA;" />
<digital-asset id="GvyCmisEventSIT" short-description="GvyCmisEventSIT" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;import com.navis.framework.util.DateUtil;&#xA;&#xA;public class GvyCmisEventSIT{&#xA; &#xA;  def ACTION = &quot;action='null'&quot;&#xA;  def LAST_ACTION = &quot;lastAction='null'&quot;&#xA;&#xA;   public String lookupCommodity(String id) {&#xA;   DomainQuery dq = QueryUtils.createDomainQuery(&quot;Commodity&quot;).addDqPredicate(PredicateFactory.eq(com.navis.argo.ArgoRefField.CMDY_GKEY, id));&#xA;   Commodity c = (Commodity)HibernateApi.getInstance().getUniqueEntityByDomainQuery(dq);&#xA;  if(c == null)  {&#xA;     return &quot;&quot;;&#xA;  }&#xA;  return c.getCmdyId();&#xA;&#xA;}&#xA;&#xA;  //SIT_ASSIGN&#xA;  public String processSitAssign(String xmlGvyData,Object event,Object unit,String commodity,String drayStatus)&#xA;  {&#xA;     def xmlGvyString =  xmlGvyData&#xA;     try&#xA;     { &#xA;        def destination= unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;)&#xA;        destination = destination != null ? destination : ''&#xA;        //println(&quot;destination ::::: &quot;+destination)&#xA;&#xA;       //Put condition for EQUIPMENT OBJECT (isUnitObj)&#xA;       //println(&quot;COMMODITY ACTUAL VALUE ::::::::&quot;+commodity)&#xA;     &#xA;       GroovyInjectionBase gvybase = new GroovyInjectionBase()&#xA;       def appendObj = gvybase.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;); &#xA;       def utilObj =  gvybase.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;       def cmdyId = utilObj.getPreviousPropertyAsString(event, 'gdsCommodity')&#xA;       //println(&quot;Commodity from method D :::::::&quot;+cmdyId )&#xA;       def preCommodity  = lookupCommodity(cmdyId)&#xA;       //println(&quot;Commodity from method preCommodity:::::::&quot;+preCommodity)&#xA;&#xA;       def preDrayStatus = utilObj.getPreviousPropertyAsString(event, 'unitDrayStatus')&#xA;       preDrayStatus = preDrayStatus != null ? preDrayStatus : '' &#xA;       //println(&quot;preDrayStatus ::::: &quot;+preDrayStatus) &#xA; &#xA;       //ACTION&#xA;       if(preCommodity.equals(commodity) &amp;&amp; preDrayStatus.equals(drayStatus)){&#xA;          //println('COMMODITY CODE SAME')&#xA;          xmlGvyString = xmlGvyString.replace(LAST_ACTION,&quot;lastAction='EDT'&quot;);&#xA;          xmlGvyString = xmlGvyString.replace(ACTION,&quot;action='EDT'&quot;)        &#xA;       }&#xA; &#xA;       //MISC1&#xA;       def misc1 = appendObj.getFieldValues(xmlGvyString, &quot;misc1=&quot;);&#xA;       //println('MISC VALUE ------------ '+misc1)&#xA;        if(!misc1.equals('null')){&#xA;           xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;commodity=&quot;,misc1,null,null,null)&#xA;        }else{&#xA;           xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;commodity=&quot;,&quot;SIT&quot;,null,null,null)&#xA;       }  &#xA;       //DESTINATION&#xA;       if(!destination.equals('HON'))&#xA;       {&#xA;          xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;misc3=&quot;,&quot;null&quot;,null,null,null)&#xA;       }&#xA;&#xA;     }catch(Exception e){&#xA;         e.printStackTrace()&#xA;     }&#xA;     return xmlGvyString;&#xA;   }&#xA;&#xA;   //MAP ACTION SIT_UNASSIGN&#xA;   public String processSitUnAssign(String xmlGvyData, Object appendObj)&#xA;   {&#xA;    def  xmlGvyString = xmlGvyData&#xA;    xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;dsc=&quot;,null,null,null,null)&#xA;&#xA;    return xmlGvyString;&#xA;   }&#xA;&#xA; }//Class Ends" />
<digital-asset id="GvyMsgFormatter" short-description="Groovy Txt Msg Formatter" groovy-code="//Class Formats the message string by appending Attr &amp; Attr value &#xA;&#xA;public class GvyMsgFormatter {&#xA;&#xA;   public String doIt(String attrName,Object attrValue ) &#xA;  {&#xA;       def fmtValue = ''&#xA;       if(attrValue != null)&#xA;       {&#xA;        def attrFmtValue= replaceQuotes(attrValue)&#xA;        fmtValue = attrName+'=\''+attrFmtValue+'\' '&#xA;        return fmtValue;&#xA;       }&#xA;       else&#xA;       {&#xA;         return fmtValue;&#xA;        }&#xA;   }&#xA;&#xA;  public  String replaceQuotes(Object message)&#xA;   {&#xA;     def msg = message.toString();&#xA;     def replaceAmp = msg.replaceAll('&amp;', '&amp;amp;');&#xA;           replaceAmp = replaceAmp.replaceAll('\'', '&amp;apos;');&#xA;     return replaceAmp; &#xA;    }&#xA; &#xA;}&#xA;" />
<digital-asset id="StuffUnit" short-description="GroovyStuffUnit" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.atoms.EventEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.framework.util.BizViolation&#xA;&#xA;class StuffUnit extends GroovyInjectionBase {&#xA;&#x9;public String execute(Map inParameters) {&#xA;&#xA;&#x9;def ctrId = (String) inParameters.get(&quot;equipment-id&quot;);&#xA;try {&#xA;&#x9;def recorder = (String) inParameters.get(&quot;recorder&quot;);&#xA;&#xA;&#x9;// Find the empty UFV&#xA;&#x9;def emptyUfv = findActiveUfv(ctrId);&#xA;&#x9;if( emptyUfv == null)&#xA;            fail((new StringBuilder()).append(&quot;ERR_GVY_STUFF_001. Could not find Active UFV for &quot;).append(ctrId).toString());&#xA;&#x9;// Stuff it, and get back the new full UFV and Unit&#xA;&#x9;def stuffedUfv = null;&#xA;&#x9;def strippedUfv = null;&#xA;&#x9;def action = &quot;&quot;;&#xA;&#xA;&#x9;try {&#xA;&#x9;&#x9;action = &quot;stuff &quot;;&#xA;&#x9;&#x9;stuffedUfv = stuffUfv(emptyUfv, null);&#xA;&#x9;} catch ( BizViolation ex) {&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;action = &quot;stuff or strip &quot;;&#xA;&#xA;&#x9;&#x9;&#x9;// check if the commodity id is ok.&#xA;&#x9;&#x9;&#x9;def ufvUnit = emptyUfv.getUfvUnit();&#xA;&#x9;&#x9;&#x9;if ( ufvUnit.isStorageEmpty())&#xA;&#x9;&#x9;&#x9;&#x9;fail((new StringBuilder()).append(&quot;ERR_GVY_STUFF_002. Could not STRIP EMPTY unit: &quot;).append(ctrId).toString());&#xA;&#x9;&#x9;&#x9;def stripGoods = ufvUnit.getUnitGoods();&#xA;&#x9;&#x9;&#x9;if ( stripGoods != null) {&#xA;&#x9;&#x9;&#x9;&#x9;def stripComm = stripGoods.getGdsCommodity();&#xA;&#x9;&#x9;&#x9;&#x9;if ( stripComm != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def commId = stripComm.getCmdyShortName();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ( commId.length() &lt; 3)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;fail((new StringBuilder()).append(&quot;ERR_GVY_STUFF_003. Could not STRIP unit: &quot;).append(ctrId).append(&quot; with COMMODITY code: &quot;).append(commId).toString());&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ( !commId.substring(0, 3).equalsIgnoreCase( &quot;AUT&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&amp; !commId.substring(0, 3).equalsIgnoreCase( &quot;CFS&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&amp; !commId.substring(0, 3).equalsIgnoreCase( &quot;COB&quot;)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;fail((new StringBuilder()).append(&quot;ERR_GVY_STUFF_003. Could not STRIP unit: &quot;).append(ctrId).append(&quot; with COMMODITY code: &quot;).append(commId).toString());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;strippedUfv = stripUfvAndRecordEvent( emptyUfv, null, &quot;JF&quot;);&#xA;&#x9;&#x9;&#x9;def strippedUnit = strippedUfv.getUfvUnit();&#xA;&#x9;&#x9;&#x9;action = &quot;strip then stuff again &quot;;&#xA;&#x9;&#x9;&#x9;// record strip event.&#xA;&#x9;&#x9;&#x9;//strippedUnit.recordUnitEvent(EventEnum.UNIT_STRIP, null, &quot;Stripped by &quot; + recorder);&#xA;&#x9;&#x9;&#x9;stuffedUfv = stuffUfv( strippedUfv, null);&#xA;&#x9;&#x9;} catch ( BizViolation ex1) {&#xA;&#x9;&#x9;&#x9;fail((new StringBuilder()).append(&quot;ERR_GVY_STUFF_004. Could not &quot;).append(action).append(ctrId).toString());&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;def stuffedUnit = stuffedUfv.getUfvUnit();&#xA;&#x9;// Update the routing&#xA;&#x9;def carrierModeId = (String) inParameters.get(&quot;routing-carrier-mode&quot;);&#xA;&#x9;def carrierId = (String) inParameters.get(&quot;routing-carrier-id&quot;);&#xA;&#x9;def pod1Id = (String) inParameters.get(&quot;routing-pod-1&quot;);&#xA;&#x9;def polId = (String) inParameters.get(&quot;routing-pol&quot;);&#xA;&#x9;def destination = (String) inParameters.get(&quot;routing-destination&quot;);&#xA;&#x9;def carrierMode = LocTypeEnum.getEnum( carrierModeId);&#xA;&#x9;def obCarrier = CarrierVisit.findCarrierVisit(getFacility(), carrierMode, carrierId);&#xA;&#x9;if ( obCarrier == null)&#xA;&#x9;&#x9;fail((new StringBuilder()).append(&quot;ERR_GVY_STUFF_005. Could not find Carrier for &quot;).append(ctrId).toString());&#xA;&#x9;stuffedUfv.updateObCv(obCarrier);&#xA;&#x9;def routing = stuffedUnit.getUnitRouting();&#xA;&#x9;if ( routing == null)&#xA;&#x9;&#x9;fail((new StringBuilder()).append(&quot;ERR_GVY_STUFF_006. Could not find Routing for &quot;).append(ctrId).toString());&#xA;&#xA;&#x9;routing.setRtgDeclaredCv(obCarrier);&#xA;&#x9;if ( pod1Id != null)&#xA;&#x9;&#x9;routing.setRtgPOD1(RoutingPoint.findRoutingPoint(pod1Id));&#xA;&#x9;if ( polId != null)&#xA;&#x9;&#x9;routing.setRtgPOL(RoutingPoint.findRoutingPoint(polId));&#xA;&#x9;stuffedUnit.updateUnitRouting(routing);&#xA;&#x9;GoodsBase goods = stuffedUnit.getUnitGoods();&#xA;&#x9;if ( destination != null)&#xA;&#x9;&#x9;goods.setGoodsDestination(destination);&#xA;&#x9;// update other info&#xA;&#x9;def sealNum = (String) inParameters.get(&quot;seal-1&quot;);&#xA;&#x9;def consigneeId = (String) inParameters.get(&quot;consignee-id&quot;);&#xA;&#x9;def consigneeName = (String) inParameters.get(&quot;consignee-name&quot;);&#xA;&#x9;def shipperId = (String) inParameters.get(&quot;shipper-id&quot;);&#xA;&#x9;def shipperName = (String) inParameters.get(&quot;shipper-name&quot;);&#xA;&#x9;def remark = (String) inParameters.get(&quot;remark&quot;);&#xA;&#x9;def oogBack = (String) inParameters.get(&quot;oog-back&quot;);&#xA;&#x9;def oogFront = (String) inParameters.get(&quot;oog-front&quot;);&#xA;&#x9;def oogLeft = (String) inParameters.get(&quot;oog-left&quot;);&#xA;&#x9;def oogRight = (String) inParameters.get(&quot;oog-right&quot;);&#xA;&#x9;def oogHeight = (String) inParameters.get(&quot;oog-height&quot;);&#xA;&#x9;def commodityId = (String) inParameters.get(&quot;commodity-id&quot;);&#xA;&#x9;def commodityName = (String) inParameters.get(&quot;commodity-name&quot;);&#xA;&#x9;def weight = (String) inParameters.get(&quot;unit-gross-weight&quot;);&#xA;&#xA;&#x9;if ( sealNum != null)&#xA;&#x9;&#x9;stuffedUnit.setUnitSealNbr1( sealNum);&#xA;&#x9;if ( shipperId != null || shipperName != null) {&#xA;&#x9;&#x9;Shipper shipper = Shipper.findOrCreateShipper(shipperId, shipperName);&#xA;&#x9;&#x9;//goods.setGdsShipperBzu(shipper);&#xA;&#x9;&#x9;goods.updateShipper( shipper);&#xA;&#x9;}&#xA;&#x9;if ( consigneeId != null || consigneeName != null) {&#xA;&#x9;&#x9;Shipper consignee = Shipper.findOrCreateShipper(consigneeId, consigneeName);&#xA;&#x9;&#x9;//goods.setGdsConsigneeBzu(consignee);&#xA;&#x9;&#x9;goods.updateConsignee( consignee);&#xA;&#x9;}&#xA;&#x9;if ( weight != null)&#xA;&#x9;&#x9;stuffedUnit.updateGoodsAndCtrWtKg( new Double(weight));&#xA;&#xA;&#x9;stuffedUnit.updateRemarks(remark);&#xA;&#x9;if ( oogBack != null &amp;&amp; oogFront != null &amp;&amp; oogLeft != null &amp;&amp; oogRight != null &amp;&amp; oogHeight != null)&#xA;&#x9;&#x9;stuffedUnit.updateOog( new Integer(oogBack), new Integer(oogFront), new Integer(oogLeft), new Integer(oogRight), new Integer(oogHeight));&#xA;&#xA;&#x9;//def cmdity = Commodity.findCommodity( &quot;AUTO&quot;);&#xA;&#x9;//stuffedUnit.updateCommodity( cmdity);&#xA;&#xA;&#x9;if ( commodityId != null) {&#xA;&#x9;&#x9;def unitComm = Commodity.findOrCreateCommodity(commodityId);&#xA;&#x9;&#x9;//def unitGoods = stuffedUnit.getUnitGoods();&#xA;&#x9;&#x9;unitComm.setCmdyShortName( commodityName);&#xA;&#x9;&#x9;goods.setGdsCommodity(unitComm);&#xA;&#x9;}&#xA;&#xA;&#x9;// Update the hazardous info&#xA;&#x9;//def hazardItem = stuffedUnit.getUnitGoods().attachHazard(&quot;3&quot;, &quot;1203&quot;)&#xA;&#x9;//hazardItem.setHzrdiPageNumber(&quot;52&quot;);&#xA;&#x9;// Record an event&#xA;&#x9;stuffedUnit.recordUnitEvent(EventEnum.UNIT_STUFF, null, &quot;Stuffed by &quot; + recorder);&#xA;&#x9;return &quot;done via Groovy, unit is: &quot; + stuffedUnit;&#xA;} catch ( Exception ex) {&#xA;&#x9;fail((new StringBuilder()).append(ex.toString()).append(&quot;ERR_GVY_STUFF_999. Could not STUFF unit: &quot;).append(ctrId).toString());&#xA;}&#xA;}&#xA;}" />
<digital-asset id="GvyCmisShipmentDetail" short-description="GvyCmisShipmentDetail" groovy-code="public class GvyCmisShipmentDetail {&#xA;&#xA;public String doIt(Object gvyTxtMsgFmt, Object unit, String eventMsg, Object gvyBaseClass, Object event, Object isUnitObj)    &#xA;{ &#xA;  println(&quot;In Class GvyCmisShipmentDetail.doIt()&quot;)&#xA;&#xA;   def shipmentFieldAttr = ''&#xA;   try&#xA;   {&#xA;    //BOOKING NUMBER&#xA;    def bookingNbr=unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;)&#xA;    def bookingNbrAttr = gvyTxtMsgFmt.doIt('bookingNumber',bookingNbr)&#xA;&#xA;    //ARRDATE&#xA;    def arrDate = ''&#xA;    def arrDateAttr = gvyTxtMsgFmt.doIt('arrDate',arrDate)&#xA;&#xA;   //CONSIGNEE&#xA;   def consignee=getConsigneeValue(unit,eventMsg)&#xA;   def consigneeAttr = gvyTxtMsgFmt.doIt('consignee',consignee)&#xA;&#xA;   //SHIPPER&#xA;   def shipper = ''&#xA;   if(eventMsg.equals('COMMUNITY_SERVICE_ASSIGN')){&#xA;      shipper='COMMUNITY SERVICE'&#xA;   }else{&#xA;     shipper=unit.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuName&quot;)&#xA;     shipper = shipper != null ? shipper : unit.getFieldValue(&quot;unitGoods.gdsShipperAsString&quot;)&#xA;   }&#xA;   def shipperAttr = gvyTxtMsgFmt.doIt('shipper',shipper) &#xA;&#xA;   //CNEE CODE&#xA;   def consigneeTempId = ''&#xA;   def consigneeId=unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzunit.bzuId&quot;)&#xA;   if(isUnitObj){&#xA;      consigneeTempId = event.getProperty('GoodsConsignee')&#xA;   }&#xA;   consigneeId = consigneeId != null ? consigneeId : consigneeTempId&#xA;   def cneeCodeAttr = gvyTxtMsgFmt.doIt('cneeCode',consigneeId)&#xA;&#xA;   //HAZF&#xA;   def isHazardous=unit.getFieldValue(&quot;unitGoods.gdsIsHazardous&quot;)&#xA;   isHazardous = isHazardous == true ? 'Y' : '' &#xA;   def hazfAttr = gvyTxtMsgFmt.doIt('hazF',isHazardous)&#xA;&#xA;   //HAZ IMDG&#xA;   def hazImdg=unit.getFieldValue(&quot;unitGoods.goodsThreeMainHazardCodes&quot;)&#xA;   def mostHazItem =   getMostHazMaterial(hazImdg)&#xA;   def hazImdgAttr = gvyTxtMsgFmt.doIt('hazImdg',mostHazItem)&#xA;&#xA;   //HAZ UNNUM&#xA;   def hazUnNum=unit.getFieldValue(&quot;unitGoods.goodsThreeMainHazardUNNumbers&quot;)&#xA;   def mostHazNum =   getMostHazMaterial(hazUnNum)&#xA;   def hazUnNumAttr = gvyTxtMsgFmt.doIt('hazUnNum',mostHazNum)&#xA; &#xA;   //LOCATION CATEGORY - LAST FREE DATE - YY DOY&#xA;   def lastfreeDay = unit.getFieldValue(&quot;unitActiveUfv.ufvLastFreeDay&quot;);               &#xA;   def gvyUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;   lastfreeDay = lastfreeDay != null ? gvyUtil.convertToJulianDate(''+lastfreeDay) : '' &#xA;   def locationCategoryAttr = gvyTxtMsgFmt.doIt('locationCategory',lastfreeDay) &#xA;&#xA;   shipmentFieldAttr = bookingNbrAttr+consigneeAttr+shipperAttr+cneeCodeAttr+hazfAttr+hazImdgAttr+hazUnNumAttr+locationCategoryAttr+arrDateAttr&#xA;  }catch(Exception e){&#xA;    e.printStackTrace()&#xA;  }&#xA;  //println('shipmentFieldAttr : '+shipmentFieldAttr)&#xA;&#xA;  return shipmentFieldAttr; &#xA;&#xA;}&#xA;&#xA;//Method Returns MostHazMaterial&#xA;public String getMostHazMaterial(String hazItem)&#xA;{&#xA;   def pattern = ','&#xA;&#xA;   if(hazItem != null){&#xA;     for(i in hazItem){&#xA;       if(i == pattern){&#xA;       def mostHazItem = hazItem.substring(0, hazItem.indexOf(i));&#xA;       return mostHazItem; &#xA;      }&#xA;     }&#xA;   }&#xA;  return hazItem; &#xA;}&#xA;&#xA; //Retrieves the Consignee Value&#xA; private String getConsigneeValue(Object unit, String eventMsg)&#xA; {&#xA;   def consignee=unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzunit.bzuName&quot;) &#xA;   consignee  = consignee != null ? consignee : unit.getFieldValue(&quot;unitGoods.gdsConsigneeAsString&quot;)&#xA;   consignee = consignee != null ? consignee : &quot;&quot;&#xA;  def releaseToParty = unit.getFieldValue(&quot;unitFlexString02&quot;)&#xA;//  releaseToParty  =  releaseToParty != null ? (releaseToParty.length() &gt;10 ? //releaseToParty.substring(0,10) : releaseToParty) : &quot;&quot;&#xA;   releaseToParty  =  releaseToParty != null ? releaseToParty : &quot;&quot;&#xA;&#xA;   if(eventMsg.equals('COMMUNITY_SERVICE_ASSIGN')){&#xA;      consignee= releaseToParty&#xA;   }&#xA;  else if(consignee.startsWith(&quot;PACIFIC TRANSPORTATION LINES&quot;)){&#xA;         consignee= releaseToParty.length() &gt; 0 ? &quot;PAC TRAN LINES%&quot;+releaseToParty : &#xA;&#x9; &quot;PAC TRAN LINES&quot;&#xA;   }&#xA;   else{&#xA;       consignee= releaseToParty.length() &gt; 0 ? consignee+&quot;%&quot;+releaseToParty : consignee&#xA;   }&#xA;   def fmtConsigneeVal = formatConsigneeSize(consignee);&#xA;   &#xA;   return fmtConsigneeVal;&#xA; &#xA; }&#xA;&#xA; //Consignee Size Formatter&#xA; private String formatConsigneeSize(String _consignee)&#xA; {&#xA;   def consigneeVal = null; &#xA;   def consignee = _consignee;&#xA;   if(consignee != null &amp;&amp; consignee.length() &gt; 35)&#xA;   {&#xA;    def conLength = consignee.length();&#xA;    def perIndex = consignee.indexOf(&quot;%&quot;);&#xA;     if(perIndex != -1){&#xA;       def stripIndex = conLength - 35;&#xA;       consigneeVal = consignee.substring(0,perIndex - stripIndex)+consignee.substring(perIndex);&#xA;     }else{&#xA;       consigneeVal =  consignee.substring(0,35);&#xA;     }&#xA;   }else{&#xA;     consigneeVal =  consignee;&#xA;   }&#xA; return consigneeVal;&#xA; }&#xA;&#xA;&#xA;}//Class Ends" />
<digital-asset id="CoBizBooking" short-description="Co Biz Booking" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.atoms.EventEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.orders.business.eqorders.EquipmentOrderManagerPea&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.services.business.event.GroovyEvent&#xA;&#xA;public class CoBizBooking {&#xA;    public String process(Object unit) {&#xA;&#xA;&#xA;&#x9;def ctrId = unit.getFieldValue(&quot;unitId&quot;);&#xA;&#x9;def bl_nbr = unit.getFieldValue(&quot;unitFlexString09&quot;);&#xA;&#x9;def dobCvId = unit.getFieldValue(&quot;unitFlexString10&quot;);&#xA;&#x9;def unitNotes = unit.getFieldValue(&quot;unitRemark&quot;);&#xA;&#x9;unit.setFieldValue(&quot;unitFlexString09&quot;, &quot;&quot;);&#xA;&#x9;unit.setFieldValue(&quot;unitFlexString10&quot;, &quot;&quot;);&#xA;&#xA;try {&#xA;&#xA;&#x9;// check if the unit is empty.&#xA;&#x9;if ( unit.isStorageEmpty())&#xA;&#x9;&#x9;return (new StringBuilder()).append(&quot;ERR_GVY_COBIZ_BK_001. Could not ASSIGN CO BIZ BOOKING to EMPTY unit: &quot;).append(ctrId).toString();&#xA;&#xA;&#x9;// find booking&#xA;&#x9;def injBase = new GroovyInjectionBase();&#xA;&#x9;def facility = injBase.getFacility();&#xA;&#x9;def cv = CarrierVisit.findVesselVisit( facility, dobCvId);&#xA;&#x9;if ( cv == null) {&#xA;&#x9;&#x9;return &quot;ERR_GVY_COBIZ_BK_002. Could not find the carrier visit: &quot; + dobCvId;&#xA;&#x9;}&#xA;&#xA;&#x9;def bizScope = ScopedBizUnit.findScopedBizUnit( &quot;MAT&quot;, BizRoleEnum.LINEOP);&#xA;&#x9;if ( bizScope == null) {&#xA;&#x9;&#x9;&#x9;return &quot;ERR_GVY_COBIZ_BK_003. Could not find the business unit: MAT&quot;;&#xA;&#x9;}&#xA;&#xA;&#x9;def booking = Booking.findBookingByUniquenessCriteria( bl_nbr, bizScope, cv);&#xA;&#x9;if ( booking == null) {&#xA;&#x9;&#x9;&#x9;return &quot;ERR_GVY_COBIZ_BK_004. Could not find booking: &quot; + bl_nbr;&#xA;&#x9;}&#xA;&#xA;&#x9;// set CATEGORY&#xA;&#x9;unit.setUnitCategory(UnitCategoryEnum.EXPORT);&#xA;&#x9;// set BOOKING NUM and Carrier info&#xA;&#x9;unit.setFieldValue(&quot;unitGoods.gdsBlNbr&quot;, bl_nbr);&#xA;&#x9;unit.setUnitRemark( unitNotes);&#xA;&#xA;&#x9;def eqoMgr = new EquipmentOrderManagerPea();&#xA;&#x9;eqoMgr.assignExportBookingToUnit( booking, unit);&#xA;&#xA;&#x9;GroovyEvent event = new GroovyEvent( null, unit);&#xA;&#x9;//event.postNewEvent( &quot;UNIT_ROLL&quot;, unitNotes);&#xA;&#x9;event.postNewEvent( &quot;ROUTE_COBIZ&quot;, unitNotes);&#xA;&#xA;&#x9;// Record an event&#xA;&#x9;return &quot;done via Groovy, unit=&quot; + ctrId + &quot;booking=&quot; + bl_nbr + &quot; cv=&quot; + dobCvId;&#xA;&#xA;} catch ( Exception ex) {&#xA;&#x9;return ((new StringBuilder()).append(&quot;ERR_GVY_COBIZ_BK_999. Could not fire COBIZ_BOOKING event on unit: &quot;).append(ctrId).append(&quot;\nSN4 Exception: &quot;).append(ex.toString()).toString());&#xA;}&#xA;}&#xA;}&#xA;&#xA;" />
<digital-asset id="OutGateCheck" short-description="Fails the transaction with an error message if ufvFlexString02 is not Y and user entered a chassis accessory number" groovy-code="/*&#xA;&#xA;Groovy code called from the outgate form to prevent from outgating MG with chassis.&#xA;The logic fails the transaction with an error message if ufvFlexString02 is not Y and user entered a chassis accessory number&#xA;&#xA;Amine Nebri, anebri@navis.com - June 25 2008&#xA;&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.framework.util.BizFailure&#xA;&#xA;public class OutGateCheck extends GroovyInjectionBase&#xA;{&#xA;&#x9;public void execute(inDao, api)&#xA;&#x9;{&#xA;&#x9;&#x9;// We retrieve the transaction object&#xA;&#x9;&#x9;def tran = inDao.getTran()&#xA;&#xA;&#x9;&#x9;if (tran == null)&#xA;&#x9;&#x9;&#x9;return&#xA;&#xA;&#x9;&#x9;// We exit here if no chassis accessory number was entered&#xA;&#x9;&#x9;if (tran.getTranChsAccNbr() == null)&#xA;&#x9;&#x9;&#x9;return&#xA;&#xA;&#x9;&#x9;// We retrieve everything we need to get to ufvFlexString01&#xA;&#x9;&#x9;def unit = tran.getTranUnit()&#xA;&#xA;&#x9;&#x9;// We now retrieve the unit facility visit&#xA;&#x9;&#x9;def ufv = tran.getTranUfv()&#xA;&#xA;&#x9;&#x9;if (ufv == null)&#xA;&#x9;&#x9;&#x9;return&#xA;&#xA;&#x9;&#x9;// Finally we retrieve ufvFlexString02&#xA;&#x9;&#x9;def ufvFlexField02 = ufv.getUfvFlexString02()&#xA;&#xA;&#x9;&#x9;// This is the error message&#xA;&#x9;&#x9;def message = BizFailure.create(&quot;MG cannot be outgated with Chassis - Permission Required&quot;)&#xA;&#xA;&#x9;&#x9;// We fail the transaction if ufvFlexString02 is null&#xA;&#x9;&#x9;if (ufvFlexField02 == null)&#xA;&#x9;&#x9;&#x9;RoadBizUtil.getMessageCollector().appendMessage(message)&#xA;&#xA;&#x9;&#x9;// We fail the transaction if ufvFlexString01 is not Y&#xA;&#x9;&#x9;if (&quot;MG&quot;.equals(ufvFlexField02) == false)&#xA;&#x9;&#x9;&#x9;RoadBizUtil.getMessageCollector().appendMessage(message)&#xA;&#x9;}&#xA;}&#xA;" />
<digital-asset id="MdaHoldProc" short-description="MDA HOLD Proc" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.atoms.EventEnum&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.argo.business.atoms.DrayStatusEnum&#xA;&#xA;public class MdaHoldProc {&#xA;    public String process(Object equip) {&#xA;&#xA;&#x9;def equiId = equip.getFieldValue(&quot;eqsEquipment.eqIdFull&quot;) // Object Equipment.EqId&#xA;&#xA;&#x9;//println(&quot;equiId = &quot;+equiId)&#xA;&#xA;&#x9;def injBase = new GroovyInjectionBase();&#xA;&#xA;&#x9;def complex = ContextHelper.getThreadComplex();&#xA;&#xA;&#x9;def unitFinder = injBase.getUnitFinder();&#xA;&#xA;&#x9;def eq = Equipment.loadEquipment( equiId);&#xA;&#xA;&#x9;def unit = unitFinder.findAttachedUnit(complex, eq);&#xA;&#xA;&#x9;if ( unit != null) {&#xA;&#x9;&#x9;def unitId = unit.getFieldValue(&quot;unitId&quot;);&#xA;&#x9;&#x9;//println( &quot;UnitId = &quot; + unitId);&#xA;&#x9;&#x9;unit.setFieldValue( &quot;unitDrayStatus&quot;, DrayStatusEnum.RETURN);&#xA;&#x9;} else {&#xA;&#x9;&#x9;println( &quot;Unit is null.&quot;);&#xA;&#x9;}&#xA;&#xA;&#xA;}&#xA;}" />
<digital-asset id="MdaReleaseProc" short-description="MDA Release Proc" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.atoms.EventEnum&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.argo.business.atoms.DrayStatusEnum&#xA;&#xA;public class MdaReleaseProc {&#xA;    public String process(Object equip) {&#xA;&#xA;&#x9;def equiId = equip.getFieldValue(&quot;eqsEquipment.eqIdFull&quot;) // Object Equipment.EqId&#xA;&#xA;&#x9;//println(&quot;equiId = &quot;+equiId)&#xA;&#xA;&#x9;def injBase = new GroovyInjectionBase();&#xA;&#xA;&#x9;def complex = ContextHelper.getThreadComplex();&#xA;&#xA;&#x9;def unitFinder = injBase.getUnitFinder();&#xA;&#xA;&#x9;def eq = Equipment.loadEquipment( equiId);&#xA;&#xA;&#x9;def unit = unitFinder.findAttachedUnit(complex, eq);&#xA;&#xA;&#x9;if ( unit != null) {&#xA;&#x9;&#x9;def unitId = unit.getFieldValue(&quot;unitId&quot;);&#xA;&#x9;&#x9;//println( &quot;UnitId = &quot; + unitId);&#xA;&#x9;&#x9;unit.setFieldValue( &quot;unitDrayStatus&quot;, null);&#xA;&#x9;} else {&#xA;&#x9;&#x9;println( &quot;Unit is null.&quot;);&#xA;&#x9;}&#xA;&#xA;&#xA;}&#xA;}" />
<digital-asset id="CustomCreateAndPrintDocument" short-description="CustomCreateAndPrintDocument" groovy-code="/*&#xA;&#xA;Groovy code called from the gate form to print or not print the document based on the logic below.&#xA;The logic fails the transaction with an error message if ufvFlexString02 is not Y and user entered a chassis accessory number&#xA;&#xA;Amine Nebri, anebri@navis.com - July 4 2008&#xA;&#xA;Setup:  BAT # is a required field at the Trk Visit IN stage.&#xA;&#xA;If the BAT # entered is between 101 ? 200, print the Doc Type ID = EIT.&#xA;If the BAT # entered is between 701 ? 799, do not print anything (this is an in-house UTR, no ticket needed).&#xA;If the BAT # entered is any other value, print the Doc Type ID = NO EIT.&#xA;&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.road.business.adaptor.document.CreateDocument&#xA;import com.navis.road.business.adaptor.document.PrintDocument&#xA;&#xA;public class CustomCreateAndPrintDocument extends GroovyInjectionBase&#xA;{&#xA;&#x9;public void execute(inDao, api)&#xA;&#x9;{&#xA;&#x9;&#x9;def batString = inDao.tv.tvdtlsBatNbr&#xA;&#xA;&#x9;&#x9;if (batString == null)&#xA;&#x9;&#x9;&#x9;return&#xA;&#xA;&#x9;&#x9;def batNumber = -99&#xA;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;// We convert the string into an integer&#xA;&#x9;&#x9;&#x9;batNumber = batString.toInteger() &#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (Exception e)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;// We exit if the Bat Number is not numeric&#xA;&#x9;&#x9;&#x9;throw new Exception(&quot;BAT # must be numeric&quot;)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;// No need to print anything in this case. This is an in house UTR&#xA;&#x9;&#x9;if ( batNumber &gt;= 701 &amp;&amp; batNumber &lt;= 799)&#xA;&#x9;&#x9;&#x9;return&#xA;&#xA;&#x9;&#x9;def docTypeId = &quot;NO EIT&quot;&#xA;&#xA;&#x9;&#x9;if (batNumber &gt;= 101 &amp;&amp; batNumber &lt;= 200)&#xA;&#x9;&#x9;&#x9;docTypeId = &quot;EIT&quot;&#xA;&#xA;&#x9;&#x9;// Set the doc type id&#xA;&#x9;&#x9;inDao.put(&quot;docTypeId&quot;, docTypeId)&#xA;&#xA;&#x9;&#x9;// Create the document&#xA;&#x9;&#x9;(new CreateDocument()).execute(inDao)&#xA;&#xA;&#x9;&#x9;// Print the document&#xA;&#x9;&#x9;(new PrintDocument()).execute(inDao)&#xA;&#x9;}&#xA;}&#xA;" />
<digital-asset id="GvyCmisTxtMsgFormatter" short-description="GvyCmisTxtMsgFormatter" groovy-code="public class GvyCmisTxtMsgFormatter {&#xA;&#xA;  public String doIt(Object attrName,Object attrValue ) &#xA;  {&#xA;     def attrValueFmt = ''&#xA; &#xA;     //Converting value to String&#xA;     attrValue = replaceQuotes(''+attrValue)&#xA; &#xA;     if(attrValue == null || attrValue.trim().length() == 0){&#xA;        attrValueFmt = 'null'&#xA;      }else{&#xA;        attrValueFmt = attrValue  &#xA;      }&#xA;  &#xA;     def fmtValue = attrName+'=\''+attrValueFmt+'\' '&#xA;&#xA;     return fmtValue;&#xA;   }&#xA;&#xA;   public  String replaceQuotes(Object message)&#xA;   {&#xA;     def msg = message.toString();&#xA;     def replaceAmp = msg.replaceAll('&amp;', '&amp;amp;');&#xA;           replaceAmp = replaceAmp.replaceAll('\'', '&amp;apos;');&#xA;     return replaceAmp; &#xA;    }&#xA;&#xA;   public String  createGroovyXml(String msgString)&#xA;  {&#xA;     def strBuff = new StringBuffer();&#xA;     strBuff.append( '&lt;GroovyMsg');&#xA;     strBuff.append(' '+msgString);&#xA;     strBuff.append( '/&gt;');&#xA;     return strBuff.toString();&#xA;   }&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyCmisUnitDetail" short-description="GvyCmisUnitDetail" groovy-code="public class GvyCmisUnitDetail {&#xA;&#xA; public String doIt(String equiClass, Object gvyTxtMsgFmt, Object unit)   &#xA; {&#xA;   &#xA;   println(&quot;In Class GvyCmisUnitDetail.doIt()&quot;)&#xA;   def unitFieldAttr = ''&#xA;   def ctrNoAttr = ''&#xA;    def checkDigitAttr = ''&#xA;&#xA;   def unitClassAttr = gvyTxtMsgFmt.doIt('unitClass', equiClass)&#xA;   try&#xA;  {&#xA;     //CTRNO &amp; CHECK DIGIT &#xA;     def ctrNo = ''&#xA;     def checkDigit = ''&#xA;     def unitIdVal=unit.getFieldValue(&quot;unitId&quot;)&#xA;      print('unitId ::'+unitIdVal)&#xA;      if(equiClass.equals('CONTAINER') &amp;&amp; unitIdVal.startsWith('MATU')){&#xA;        ctrNo = unitIdVal.substring(4,unitIdVal.length()-1)&#xA;        checkDigit = unitIdVal.substring(unitIdVal.length()-1)&#xA;      }else if(equiClass.equals('ACCESSORY')){&#xA; &#x9;ctrNo = unitIdVal&#xA;                     checkDigit = ''&#xA;       }&#xA;      else{&#xA;           ctrNo =unitIdVal.substring(0,unitIdVal.length()-1) &#xA;           checkDigit = unitIdVal.substring(unitIdVal.length()-1)&#xA;       }&#xA;      if(!equiClass.equals('CHASSIS')){&#xA;           println(&quot;INSIDE THE CHASSIS CODE&quot;)&#xA;           ctrNoAttr = gvyTxtMsgFmt.doIt('ctrNo',ctrNo)&#xA;           checkDigitAttr = gvyTxtMsgFmt.doIt('checkDigit',checkDigit)&#xA;      }&#xA;   &#xA;      //CHASSIS NUMBER&#xA;      def carriage = unit.getFieldValue(&quot;unitCarriageUe.ueEquipment.eqIdFull&quot;)&#xA;      def chassisId = carriage != null ? carriage.substring(0,carriage.length()-1) : carriage&#xA;      def chassisNum = equiClass.equals('CHASSIS') ? ctrNo : chassisId&#xA;      def chassisNumAttr = gvyTxtMsgFmt.doIt('chassisNumber',chassisNum)&#xA;&#xA;      //CHASSIS CHECK DIGIT&#xA;     def chassisCd = carriage != null ? carriage.substring(carriage.length()-1) : ''&#xA;     def chassisNumCd = equiClass.equals('CHASSIS') ? checkDigit : chassisCd&#xA;     def chassisCdAttr = gvyTxtMsgFmt.doIt('chassisCd',chassisNumCd)&#xA;&#xA;     //CATEGORY&#xA;    def category=unit.getFieldValue(&quot;unitCategory&quot;)&#xA;    category = category != null ? category.getKey() : ''&#xA;    def categoryAttr = gvyTxtMsgFmt.doIt('category',category)&#xA; &#xA;     unitFieldAttr = unitClassAttr+ctrNoAttr+checkDigitAttr+chassisNumAttr+chassisCdAttr+categoryAttr&#xA;    // println('unitFieldAttr : '+unitFieldAttr)&#xA;   }catch(Exception e){&#xA;     e.printStackTrace()&#xA;   }&#xA;   return unitFieldAttr;&#xA;   &#xA; }&#xA;&#xA; }//Class Ends" />
<digital-asset id="GvyCmisRtgProcessDetail" short-description="GvyCmisRtgProcessDetail" groovy-code="public class GvyCmisRtgProcessDetail {&#xA;&#xA; public String doIt(String strMsgType, Object gvyTxtMsgFmt, Object unitObj)    &#xA; {&#xA;   println(&quot;In Class GvyCmisRtgProcessDetail.doIt()&quot;)&#xA;   def u =  unitObj&#xA;   def rtgProcessFieldAttr = ''&#xA;   try&#xA;   {&#xA;    def _freightkind=u.getFieldValue(&quot;unitFreightKind&quot;)&#xA;    def freightkindKey = _freightkind != null ? _freightkind.getKey() : ''&#xA;&#xA;    def _category=u.getFieldValue(&quot;unitCategory&quot;)&#xA;    def categoryKey = _category != null ? _category.getKey() : ''&#xA;   &#xA;    def _transitState=u.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;    def transitStatekey = _transitState != null ? _transitState.getKey() : ''&#xA;&#xA;    def _drayStatus=u.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;    def drayStatusKey = _drayStatus!= null ? _drayStatus.getKey() : ''&#xA;&#xA;    def group=u.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;)&#xA;    group = group != null ? group : ''&#xA;&#xA;    def lkpSlot=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)   &#xA;    lkpSlot = lkpSlot != null ? lkpSlot : ''&#xA;&#xA;    //COMMODITY&#xA;    def designatedTrucker=u.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;    designatedTrucker = designatedTrucker != null ? (designatedTrucker.length() == 3 ? designatedTrucker+' ' : designatedTrucker)  : ''&#xA;       &#xA;    def _commodityId=u.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;)&#xA;    def cmdtyId = _commodityId != null ? _commodityId : ''&#xA;    def commodityId= commodityCode(cmdtyId,group,designatedTrucker,lkpSlot)&#xA;    def commodityAttr= gvyTxtMsgFmt.doIt('commodity',commodityId)&#xA;     &#xA;    //DIR&#xA;    def dir =  getDir(categoryKey,transitStatekey)&#xA;    def dirAttr = gvyTxtMsgFmt.doIt('dir',dir)&#xA; &#xA;    //DSC&#xA;    def dsc = getDsc(strMsgType,freightkindKey,drayStatusKey,group,lkpSlot,cmdtyId) &#xA;    def dscAttr = gvyTxtMsgFmt.doIt('dsc',dsc)&#xA;&#xA;    //PLAN DISP&#xA;    def planDisp = getPlanDisp(drayStatusKey, strMsgType, group, lkpSlot)&#xA;    def planDispAttr = gvyTxtMsgFmt.doIt('planDisp',planDisp)&#xA;&#xA;    //DS - A1 - (Discussion to add more Conditions) &#xA;    def ds = getDs(freightkindKey,cmdtyId)&#xA;    def dsAttr = gvyTxtMsgFmt.doIt('ds',ds) &#xA;&#xA;    //ORIENTATION&#xA;    def orientation = freightkindKey.equals('MTY') ? 'E' : (freightkindKey.length() &gt; 1 ? 'F' : '')&#xA;    def orientationAttr = gvyTxtMsgFmt.doIt('orientation',orientation)&#xA;&#xA;    rtgProcessFieldAttr = commodityAttr+dirAttr+dscAttr+planDispAttr+dsAttr+orientationAttr&#xA;   }catch(Exception e){&#xA;     e.printStackTrace()&#xA;   }&#xA;  &#xA;    return rtgProcessFieldAttr&#xA; }&#xA;&#xA;   // Retrieves DS Field-Based on freightkindKey,commodityId &#xA;   public String getDs(String freightkindKey,String cmdtyId)&#xA;   {&#xA;      def ds = ''&#xA;      if(cmdtyId.equals('AUTOCON')){ &#xA;         ds = 'CON'&#xA;      }else if(cmdtyId.equals('AUTO')){&#xA;         ds = 'AUT'&#xA;      }else if (freightkindKey.equals('FCL')){&#xA;         ds = 'CY'&#xA;      }else{&#xA;         ds = ''&#xA;      }&#xA;      return ds &#xA;    }&#xA;&#xA;    //Retrieves DSC Field-Based on transitState,drayStatus and group&#xA;    public String getDsc(String strMsgType, String freightkindKey,String  drayStatus, String group, String lkpSlot, String cmdtyId)&#xA;   {&#xA;      def dsc = ''&#xA;      if(group != null &amp;&amp; group.equals(&quot;TS&quot;)){&#xA;         dsc = 'C'&#xA;      }&#xA;      else if((group.equals(&quot;XFER-P2&quot;) || group.equals(&quot;XFER-SI&quot;) || group.equals(&quot;XFER-WO&quot;)) &amp;&amp; freightkindKey.equals('MTY'))    {&#xA;        dsc = ''&#xA;      }&#xA;      else if((group.equals(&quot;XFER-P2&quot;) || group.equals(&quot;XFER-SI&quot;) || group.equals(&quot;XFER-WO&quot;)) &amp;&amp; !freightkindKey.equals('MTY'))  {&#xA;        dsc = 'C'&#xA;      }&#xA;      else if(drayStatus.equals('OFFSITE') &amp;&amp; cmdtyId.equals('SIT')){&#xA;        dsc = 'S'&#xA;      }else if (drayStatus.equals('OFFSITE') || drayStatus.equals('DRAYIN')){&#xA;        dsc = 'C'&#xA;     }else if(cmdtyId.equals('SIT')){&#xA;        dsc = 'S'&#xA;     }else{&#xA;       dsc = ''&#xA;     }&#xA;     return dsc&#xA;   }&#xA;&#xA;   // Retrieves PlanDisp Field-Based on DrayStatus and Eventype&#xA;  public String getPlanDisp(String drayStatus, String eventType, String group, String lkpSlot)&#xA; {&#xA;    def planDisp = ''&#xA;    if(group.equals('TS')) {&#xA;        planDisp='T'&#xA;    }&#xA;    else if (group.equals('XFER-P2') || group.equals('XFER-WO')) {&#xA;       planDisp = group.equals('XFER-P2') ? '3' : 'W' &#xA;     }&#xA;    else if(group.equals('XFER-SI')){&#xA;        planDisp = lkpSlot.startsWith('WOA') ? &quot;W&quot; : &quot;3&quot;&#xA;    }&#xA;    else if(group.equals('COMSVC')) {&#xA;        planDisp='3'&#xA;    }else if(group.equals('OTR')) {&#xA;        planDisp='8'&#xA;    }else if(group.equals('YB')){&#xA;        planDisp='7' &#xA;    }else  if (group.equals('1WAY')){&#xA;        planDisp='9' &#xA;    }else if (group.equals('SHOW')){&#xA;        planDisp='A' &#xA;    }else if (group.equals('MDA')){&#xA;        planDisp='B'&#xA;   }&#xA;    return planDisp;&#xA; }&#xA;&#xA;   // Retrieves DIR Field-Based on category &amp; transitState  &#xA;   public  String getDir(String category,String transitState)&#xA;  {&#xA;    def dir = ''&#xA;    if (category.equals('EXPRT') || category.equals('THRGH')){&#xA;      dir='OUT'&#xA;    }else if (category.equals('IMPRT')){&#xA;      dir='IN'&#xA;    }else if (category.equals('TRSHP') &amp;&amp; transitState.equals('S20_INBOUND')){&#xA;      dir = 'IN'&#xA;    }else if (category.equals('TRSHP') &amp;&amp; transitState.trim().length() &gt; 0){&#xA;      dir = 'OUT'&#xA;    }else{&#xA;      dir = 'MTY'&#xA;    }&#xA;    return dir;&#xA;  }&#xA;&#xA;//Method Retrieves CommodityCode-CMIS Relation value  &#xA;public  String commodityCode(String commodity, String group, String designatedTrucker, String lkpSlot)&#xA;{&#xA;    def commodityCode = ''&#xA;    def map = new HashMap()&#xA;    map.put(&quot;PINEAPPLE CANNED&quot;, &quot;CANNED P&quot;)&#xA;    map.put(&quot;PINEAPPLE FRESH&quot;, &quot;FRESH PI&quot;)&#xA;    map.put(&quot;GOLDEN STATE&quot;,&quot;GOLDNSTA&quot;)&#xA;    map.put(&quot;MTY MILK CASES&quot;, &quot;MLK CASE&quot;)&#xA;    try&#xA;    {&#xA;      commodityCode = map.get(commodity) != null ? map.get(commodity) : commodity;&#xA;      def truckerFlag = designatedTrucker.length() &gt; 0 &#xA;&#xA;      if(group.equals(&quot;XFER-WO&quot;) &amp;&amp; commodityCode.equals('SIT')){&#xA;             commodityCode = truckerFlag ? designatedTrucker+&quot;   S&quot; : &quot;       S&quot;&#x9;&#xA;      }&#xA;      else if(group.equals(&quot;XFER-SI&quot;)){&#xA;          if(commodityCode.equals('SIT') &amp;&amp; lkpSlot.startsWith('WOA')){&#xA;             commodityCode = truckerFlag ? designatedTrucker+&quot;   S&quot; : &quot;       S&quot; &#x9;&#xA;          }&#xA;      }&#xA;      else if(group.equals(&quot;YB&quot;)){&#xA;          commodityCode = 'YB'&#xA;      }&#xA;    }catch(Exception e){&#xA;      e.printStackTrace()&#xA;    }&#xA;    return commodityCode;&#xA;}&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyCmisRoutingDetail" short-description="GvyCmisRoutingDetail" groovy-code="import com.navis.argo.business.api.GroovyApi&#xA;&#xA;public class GvyCmisRoutingDetail {&#xA;&#xA; public String doIt(Object gvyTxtMsgFmt, Object unitObj, String eventMsg)    &#xA; {&#xA;   println(&quot;In Class GvyCmisRoutingDetail.doIt()&quot;)&#xA;    def u = unitObj&#xA;    def routingFieldAttr = ''&#xA;    try&#xA;   {&#xA;     //SHIPPER POOL&#xA;     def shipperPool = u.getFieldValue(&quot;unitRouting.rtgOPL.pointId&quot;); &#xA;     def shipperPoolAttr = gvyTxtMsgFmt.doIt('shipperPool',shipperPool)&#xA;&#xA;     //DISCHARGE PORT&#xA;     def dischargePort = u.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;     def dischargePortAttr = gvyTxtMsgFmt.doIt('dischargePort',dischargePort)&#xA;&#xA;     //DPORT&#xA;     def dPort=u.getFieldValue(&quot;unitGoods.gdsDestination&quot;)&#xA;     def dPortAttr = gvyTxtMsgFmt.doIt('dPort',dPort)&#xA;&#xA;     //LOAD PORT&#xA;     def loadPort = u.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;)&#xA;     def loadPortAttr = gvyTxtMsgFmt.doIt('loadPort',loadPort)&#xA;&#xA;     //RET_PORT &#xA;     def retport = u.getFieldValue(&quot;unitRouting.rtgReturnToLocation&quot;);  &#xA;    def retportAttr = gvyTxtMsgFmt.doIt('retPort',retport)&#xA;&#xA;      //OVER_DIMENSIONS ATTRIBUTES&#xA;      def overLongBack = null;&#xA;      def overLongFront = null;&#xA;      def overWideLeft = null;&#xA;      def overWideRight = null;&#xA;      def overHeight = null;&#xA;&#xA;      if (eventMsg.equals('UNIT_OVERDIMENSIONS_UPDATE')) {&#xA;        overLongBack=convertCmToInch(u.getFieldValue(&quot;unitOogBackCm&quot;))&#xA;        overLongBack = overLongBack != null ? overLongBack : 0&#xA;    &#xA;       overLongFront=convertCmToInch(u.getFieldValue(&quot;unitOogFrontCm&quot;))&#xA;       overLongFront = overLongFront != null ? overLongFront : 0  &#xA;&#xA;       overWideLeft=convertCmToInch(u.getFieldValue(&quot;unitOogLeftCm&quot;))&#xA;       overWideLeft = overWideLeft != null ? overWideLeft : 0&#xA;&#xA;       overWideRight=convertCmToInch(u.getFieldValue(&quot;unitOogRightCm&quot;))&#xA;       overWideRight = overWideRight != null ? overWideRight : 0&#xA;&#xA;       overHeight=convertCmToInch(u.getFieldValue(&quot;unitOogTopCm&quot;))&#xA;       overHeight = overHeight != null ? overHeight : 0&#xA;    }&#xA;&#xA;   def overBackAttr = gvyTxtMsgFmt.doIt('overLongBack',overLongBack)&#xA;   def overFrontAttr = gvyTxtMsgFmt.doIt('overLongFront',overLongFront)&#xA;   def overLeftAttr = gvyTxtMsgFmt.doIt('overWideLeft',overWideLeft)&#xA;   def overRightAttr = gvyTxtMsgFmt.doIt('overWideRight',overWideRight)&#xA;   def overTopAttr = gvyTxtMsgFmt.doIt('overHeight',overHeight)&#xA;&#xA;&#xA;    routingFieldAttr = shipperPoolAttr+dischargePortAttr+dPortAttr+loadPortAttr+retportAttr+overBackAttr+overFrontAttr+overLeftAttr+overRightAttr+overTopAttr&#xA;&#xA;  //println('routingFieldAttr : '+routingFieldAttr)&#xA;   }catch(Exception e){&#xA;     e.printStackTrace()&#xA;   }&#xA;&#xA;   return routingFieldAttr&#xA;&#xA; }&#xA;&#xA;  //convert Cm To Inch&#xA;  private Object convertCmToInch(Object cmValue)&#xA;  {&#xA;     def inchValue = null &#xA;       def api = new GroovyApi();&#xA;     if(cmValue != null &amp;&amp; cmValue &gt; 0){&#xA;        def inchVal = cmValue * 0.393700787;&#xA;        inchVal = new BigDecimal(inchVal).setScale(2, BigDecimal.ROUND_HALF_UP);&#xA;        inchValue = Math.round(inchVal)&#xA;       }&#xA;     return inchValue&#xA;   }&#xA;&#xA;&#xA; }//Class Ends&#xA;" />
<digital-asset id="GvyCmisPhysicalStatusDetail" short-description="GvyCmisPhysicalStatusDetail" groovy-code="import com.navis.framework.business.Roastery&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.api.IFlagType&#xA;import com.navis.argo.business.atoms.FlagPurposeEnum&#xA;&#xA;public class GvyCmisPhysicalStatusDetail {&#xA;&#xA; public String doIt(String strMsgType, Object gvyTxtMsgFmt, Object unitObj)    &#xA; { &#xA;     println(&quot;In Class GvyCmisPhysicalStatusDetail.doIt()&quot;)&#xA;     def u = unitObj&#xA;     def phyStatusFields = ''&#xA;     try&#xA;    {&#xA;       def groupCode = u.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;);&#xA;       def lkpSlot=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;       lkpSlot = lkpSlot != null ? lkpSlot : ''   &#xA;&#xA;       // LOCATION ROW&#xA;      def _lineOperator=u.getFieldValue(&quot;unitLineOperator.bzuId&quot;)&#xA;      def locationRowAttr =  gvyTxtMsgFmt.doIt('locationRow',_lineOperator)&#xA;&#xA;      //CW Weight&#xA;      def weightKg=u.getFieldValue(&quot;unitGoodsAndCtrWtKg&quot;)&#xA;      def weightLB = weightKg != null ? Math.round(weightKg * 2.20462262) : ''&#xA;      def cwWeightAttr =  gvyTxtMsgFmt.doIt('cWeight',weightLB)&#x9;&#xA;&#xA;      //SEAL&#xA;     def _seal1=u.getFieldValue(&quot;unitSealNbr1&quot;)&#xA;     def sealAttr = gvyTxtMsgFmt.doIt('seal',_seal1)&#xA; &#xA;     //STOW RESTRICTION CODE&#xA;     def stowId= u.getFieldValue(&quot;unitSpecialStow.stwId&quot;) &#xA;     def stowRestCode = stowId != null ? getStowCode(stowId) : ''&#xA;     def stowRestCodeAttr = gvyTxtMsgFmt.doIt('stowRestCode',stowRestCode)&#xA;&#xA;     //STOW FLAG&#xA;     def stowFlag =  strMsgType.equals('REVIEW_FOR_STOW') ? 'Y' : '%'&#xA;     def stowFlagAttr = gvyTxtMsgFmt.doIt('stowFlag',stowFlag) &#xA; &#xA;     //ODF&#xA;    def odf = u.getFieldValue(&quot;unitIsOog&quot;);  &#xA;    odf = odf == true ? 'Y' : ''&#xA;    def odfAttr = gvyTxtMsgFmt.doIt('odf',odf)&#xA;   &#xA;    phyStatusFields = locationRowAttr+cwWeightAttr+sealAttr+stowRestCodeAttr+stowFlagAttr+odfAttr&#xA;    //println('Phyysical Status Fields : '+phyStatusFields)&#xA;&#xA;   }catch(Exception e){&#xA;     e.printStackTrace()&#xA;   }&#xA;  return phyStatusFields&#xA;&#xA;}&#xA;&#xA;    //Method Retrieves StowCode - CMIS Relation value&#xA;    public String getStowCode(String stowId)&#xA;   {&#xA;     def map = new HashMap()&#xA;     map.put(&quot;INSP&quot;, &quot;3&quot;)&#xA;     map.put(&quot;SHOP&quot;, &quot;W&quot;)&#xA;     map.put(&quot;CL&quot;, &quot;C&quot;)&#xA;    &#xA;    def stowCode = map.get(stowId) != null ? map.get(stowId) : stowId;&#xA;    return stowCode;&#xA;   }&#xA;&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyCmisFlexFieldDetail" short-description="GvyCmisFlexFieldDetail" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;&#xA;public class GvyCmisFlexFieldDetail {&#xA;&#xA;public String doIt(Object gvyTxtMsgFmt, Object unitObj, Object event, String eventType, Object isUnitObj,Object gvyBaseClass)    &#xA;{&#xA;   println(&quot;In Class GvyCmisFlexFieldDetail.doIt()&quot;)&#xA;   def u = unitObj&#xA;    def flexFieldAttr = ''&#xA;    try&#xA;    {&#xA;       //HSF7 &#xA;       def hsf7 = u.getFieldValue(&quot;unitFlexString05&quot;)&#xA;       def hsf7Attr = gvyTxtMsgFmt.doIt('hsf7',hsf7)&#xA;   &#xA;       //PMD&#xA;       def pmd = null; &#xA;       def chasType =u.getFieldValue(&quot;unitActiveUfv.ufvFlexString02&quot;)&#xA;         if(chasType != null){&#xA;            pmd = chasType;&#xA;         }else{&#xA;           def _pmdDt =u.getFieldValue(&quot;unitActiveUfv.ufvFlexDate01&quot;) &#xA;           def strpmd = _pmdDt != null ? (''+_pmdDt) : ''&#xA;           pmd =  strpmd.length() &gt; 10 ? strpmd.substring(8,10) : strpmd &#xA;        }&#xA;       def pmdAttr = gvyTxtMsgFmt.doIt('pmd',pmd)&#xA;&#xA;       //LOCATION RUN&#xA;       def  locationRun = '%'&#xA;       def locationRunAttr =  gvyTxtMsgFmt.doIt('locationRun',locationRun) &#xA;&#xA;      //MISC2 - A1(flex fielsds-cargo status field Change code)&#xA;      def misc2 = ''&#xA;      if((eventType.equals(&quot;UNIT_PROPERTY_UPDATE&quot;) || eventType.equals(&quot;UNIT_REROUTE&quot;) || eventType.endsWith('_HOLD') || eventType.endsWith('_RELEASE') ) &amp;&amp; isUnitObj.equals(Boolean.TRUE))  &#xA;     {&#xA;          Event gvyEventObj = event.getEvent()&#xA;          def doer = gvyEventObj.getEvntAppliedBy()&#xA;          println(&quot;doer &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;::&quot;+doer)&#xA;           if(!(doer ==null &amp;&amp; doer.equals(&quot;-jms-&quot;))) &#xA;          {&#xA;              def gvyEditFlag = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisProcessEditFlag&quot;);&#xA;              misc2 =gvyEditFlag.processEditFlag(event, eventType, unitObj, gvyBaseClass )&#xA;              unitObj.setUnitFlexString11(misc2)&#xA;           }&#xA;     }&#xA;     else{&#xA;        misc2 = u.getUnitFlexString11();&#xA;     }&#xA;     def misc2Attr = gvyTxtMsgFmt.doIt('misc2',misc2)&#xA;&#xA;   //MISC3 &#xA;   def gvyUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;   def ufvFlexDate2=u.getFieldValue(&quot;unitActiveUfv.ufvFlexDate02&quot;)&#xA;   def flex2Fmt = ufvFlexDate2 = ufvFlexDate2 != null ? gvyUtil.convertToJulianDate(''+ufvFlexDate2) : '' &#xA;   def ufvFlexDate3=u.getFieldValue(&quot;unitActiveUfv.ufvFlexDate03&quot;)&#xA;   def flex3Fmt = ufvFlexDate3 != null ? gvyUtil.convertToJulianDate(''+ufvFlexDate3) : '' &#xA;   def misc3 = flex2Fmt + flex3Fmt&#xA;   def misc3Attr = gvyTxtMsgFmt.doIt('misc3',misc3)&#xA;&#xA;   flexFieldAttr =  hsf7Attr+pmdAttr+locationRunAttr+misc2Attr+misc3Attr&#xA;  //println('flexFieldAttr : '+flexFieldAttr)&#xA;  }catch(Exception e){&#xA;     e.printStackTrace()&#xA;  }&#xA;   return flexFieldAttr&#xA; }&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyCmisEquiDetail" short-description="GvyCmisEquiDetail" groovy-code="public class GvyCmisEquiDetail {&#xA;&#xA; public String doIt(Object gvyTxtMsgFmt, Object unitObj, Object event, Object isUnitObj)    &#xA; {&#xA;   def u = unitObj&#xA;   def equiFieldAttr = ''&#xA;   try{ &#xA;   println(&quot;In Class GvyCmisEquiDetail.doIt()&quot;)&#xA;   def _equiType=u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;)&#xA;   def eqHgt=u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypNominalHeight&quot;)&#xA;   def equiHeight = eqHgt != null ? eqHgt.getKey() : ''&#xA;   def _equiMaterial=u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqMaterial&quot;)&#xA;   _equiMaterial = _equiMaterial!= null ? _equiMaterial.getKey() : ''&#xA;&#xA;    println('isUnitObj &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;'+isUnitObj)&#xA;   //TYPE CODE &amp; HGT &#xA;   def typeCode = '%'&#xA;   def equiHgtfmt = '%'&#xA;   if ( isUnitObj.equals(Boolean.TRUE) &amp;&amp; event.wasFieldChanged('EquipmentType') ) {&#xA;        // TypeCode &#xA;        typeCode = TypeCodeProcessing(_equiType,equiHeight, _equiMaterial)&#xA;&#x9;//HGT - Processing&#xA;&#x9;def equiHgt = getEquiHeight(equiHeight)&#xA;        if(equiHgt.trim().length() &gt; 0){&#xA;        equiHgtfmt = equiHgt.trim().length() &gt; 2 ? &quot;0&quot;+equiHgt+&quot;00&quot; :  &quot;0&quot;+equiHgt.substring(0,1)+&quot;0&quot;+equiHgt.substring(1)+&quot;00&quot; ;&#xA;       }&#xA;    }&#xA;   def typeCodeAttr = gvyTxtMsgFmt.doIt('typeCode',typeCode)&#xA;   def hgtAttr = gvyTxtMsgFmt.doIt('hgt',equiHgtfmt)&#xA;  &#x9;&#xA;   //TARE WEIGHT &#xA;   def equiTareKg=u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqTareWeightKg&quot;)&#xA;   def equiTareLB = equiTareKg != null ? Math.round(equiTareKg * 2.20462262 ) : ''&#xA;   def tareWeightAttr = gvyTxtMsgFmt.doIt('tareWeight',equiTareLB)&#xA;&#xA;   //STRENGTH CODE&#xA;   def equiStrengthCode=u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqStrengthCode&quot;)&#xA;   def strengthAttr = gvyTxtMsgFmt.doIt('strength', equiStrengthCode)&#xA;&#xA;   //OWNER&#xA;   def _equiOwner =u.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOwner.bzuId&quot;)&#xA;   def ownerAttr = gvyTxtMsgFmt.doIt('owner',_equiOwner)&#xA;   &#xA;   //DMG_CODE&#xA;   def damageCode = u.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsDamageSeverity&quot;)&#xA;   damageCode = damageCode != null ? damageCode.getKey() : damageCode&#xA;   def dmgCodeFmt = damageCode.equals('MAJOR') ? 'H' : (damageCode.equals('MINOR') ? 'L' : '')  &#xA;   def damageCodeAttr = gvyTxtMsgFmt.doIt('damageCode',dmgCodeFmt)&#xA;&#xA;   //SRV&#xA;   def equiOperator=u.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOperator.bzuId&quot;)&#xA;   equiOperator = equiOperator != null ? equiOperator : ''&#xA;   def equiConvOperator = equiOperator.equals('CSX') ? 'MAT' : equiOperator&#xA;   def srvAttr = gvyTxtMsgFmt.doIt('srv',equiConvOperator) &#xA;   &#xA;   //TEMP &amp; TEMPERATURE MEASUREMENT UNIT&#xA;   def tempConvUnit = null&#xA;   def tempMeasurementUnit = null &#xA;   def tempReq = u.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempRequiredC&quot;);&#xA;   if(equiOperator.equals('MAT')){&#xA;     tempConvUnit = tempReq != null ? Math.round((tempReq * 9/5) + 32) : tempReq&#xA;     tempMeasurementUnit = tempConvUnit != null ? 'F' : '' &#xA;    }else{&#xA;      tempConvUnit  = tempReq != null ? Math.round(tempReq) : tempReq&#xA;      tempMeasurementUnit  = tempConvUnit != null ? 'C' : '' &#xA;    }&#xA;    def tempAttr = gvyTxtMsgFmt.doIt('temp',tempConvUnit)&#xA;    def tempMeasureUnitAttr = gvyTxtMsgFmt.doIt('tempMeasurementUnit',tempMeasurementUnit)&#xA;&#xA;   //ACCESSORY&#xA;   def accessory =u.getUnitAcryEquipIds()&#xA;   def accessoryAttr = gvyTxtMsgFmt.doIt('accessory',accessory)&#xA;  &#xA;    equiFieldAttr = tareWeightAttr+typeCodeAttr+hgtAttr+strengthAttr+ownerAttr+damageCodeAttr+srvAttr+tempAttr+tempMeasureUnitAttr+accessoryAttr&#xA;    &#xA;   //println(&quot;Equipment : &quot;+equiFieldAttr)&#xA;  &#xA;   }catch(Exception e){&#xA;      e.printStackTrace()&#xA;   }&#xA;    return equiFieldAttr&#xA;}&#xA;&#xA;//Equipment Material,Height Code mapping&#xA;public  String TypeCodeProcessing(String equiType,String equiHeight, String equiMaterial)&#xA;{&#xA;   def equiMat =  equiMaterial.equals('STEEL') ? 'ST' : (equiMaterial.equals('ALUMINUM') ? 'AL' : 'XX')&#xA;   def equiTypeFmt = equiType.substring(0, 3) &#xA;   if(equiType.length()&gt; 4){&#xA;     equiMat = equiType.substring(4); &#xA;    }&#xA;   def equiHgt = getEquiHeight(equiHeight)&#xA;   def typeCode = equiTypeFmt +' '+equiHgt+equiMat&#xA;   return typeCode;&#xA;}&#xA;&#xA;private String getEquiHeight(String equiHeight)&#xA;{&#xA; def hgt = ''&#xA;  if(equiHeight.startsWith('NOM')){&#xA;    hgt = equiHeight.length() &gt; 5 ? equiHeight.substring(3) : equiHeight.substring(3)&#xA;    return hgt&#xA;  } &#xA; return hgt&#xA;}&#xA;&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyCmisPositionDetail" short-description="GvyCmisPositionDetail" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;&#xA;public class GvyCmisPositionDetail {&#xA;&#xA;public String doIt(String msgType, Object gvyTxtMsgFmt, Object unitObj)    &#xA;{&#xA;  println(&quot;In Class GvyCmisPositionDetail.doIt()&quot;)&#xA;  def poistionFieldAttr = ''&#xA;  try&#xA;  {&#xA;     //Calling Msg Formater class&#xA;    def gvyBaseClass = new GroovyInjectionBase()&#xA;    def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;&#xA;    def u = unitObj   &#xA;    def lkpSlot=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;    lkpSlot = lkpSlot!= null ? lkpSlot : '' &#xA;    def lkpSlotValue = lkpSlot.indexOf(&quot;.&quot;)== -1 ? lkpSlot : lkpSlot.substring(0,lkpSlot.indexOf(&quot;.&quot;));&#xA;&#xA;    def lkpLocType=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;    def lkpLocTypeKey = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;&#xA;    def _transitState=u.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;    def transitStateKey = _transitState != null ? _transitState.getKey() : ''&#xA;  &#xA;    def _drayStatus=u.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;    def drayStatusKey = _drayStatus!= null ? _drayStatus.getKey() : _drayStatus&#xA;&#xA;    def lkpCarrierId=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocId&quot;)&#xA;  &#xA;    //LOC &#xA;    def _loc = lkpLocTypeKey.equals('YARD') ? lkpSlotValue : ''&#xA;    def locAttr = gvyTxtMsgFmt.doIt('loc',_loc)&#xA;&#xA;    //CELL&#xA;    def _cell = lkpLocTypeKey.equals('VESSEL') ? lkpSlotValue : ''&#xA;    def cellAttr = gvyTxtMsgFmt.doIt('cell',_cell)&#xA;&#xA;    //LOCATION TIER -&#xA;    def locationTier = getLocationTier(lkpLocTypeKey, lkpSlotValue)&#xA;    def locationTierAttr = gvyTxtMsgFmt.doIt('locationTier',locationTier)&#xA;  &#xA;    //A1 LOCATION STATUS &#xA;    def locationType = getLocationStatus(lkpLocTypeKey,lkpCarrierId,transitStateKey,  drayStatusKey,gvyCmisUtil,msgType)&#xA;    def locationStatusAttr = gvyTxtMsgFmt.doIt('locationStatus',locationType) &#xA;&#xA;    //LOCATION STALL CONFIG&#xA;    def locationStallConfig= u.getFieldValue(&quot;unitFlexString08&quot;) != null ? 'PS' : ''&#xA;    def locationStallConfigAttr =  gvyTxtMsgFmt.doIt('locationStallConfig',locationStallConfig) &#xA;  &#xA;    poistionFieldAttr = locAttr+cellAttr+locationTierAttr+locationStatusAttr+locationStallConfigAttr&#xA;&#xA;  }catch(Exception e){&#xA;     e.printStackTrace()&#xA;  }&#xA; &#xA;  return poistionFieldAttr&#xA;  &#xA; }&#xA; &#xA; private String getLocationTier(String lkpLocTypeKy, String lkpSlotVal)&#xA; {&#xA;     def locationTier = ''&#xA;     try&#xA;     {&#xA;         if(lkpLocTypeKy.equals('YARD'))&#xA;        {&#xA;           if(lkpSlotVal.startsWith('P2A') || lkpSlotVal.startsWith('P29') || lkpSlotVal.startsWith('29Z'))&#xA;          {&#xA;             locationTier = 'T2'&#xA;           }else if(lkpSlotVal.startsWith('WOA')){&#xA;              locationTier = 'T3'&#xA;           }else{&#xA;             locationTier = ''&#xA;          }&#xA;        }&#xA;     }catch(Exception e){&#xA;       e.printStackTrace()&#xA;     }&#xA;   return locationTier&#xA; }&#xA;&#xA; private String getLocationStatus(String lkpLocTypeKy,String lkpCarrId,String transitStateky,String drayStatusKy,Object gvyUtil,String eventType)&#xA; {&#xA;   def locationStatus = ''&#xA;   try&#xA;   {&#xA;       if(lkpLocTypeKy.equals('TRUCK')){&#xA;             locationStatus='3'&#xA;       }&#xA;       else if(lkpLocTypeKy.equals('YARD')){&#xA;              locationStatus='1' &#xA;       }&#xA;       else if(lkpLocTypeKy.equals('VESSEL'))&#xA;      {&#xA;           if(gvyUtil != null &amp;&amp; gvyUtil.getVesselClassType(lkpCarrId).equals('BARGE')){&#xA;                locationStatus='7'&#xA;          }&#xA;         else if(gvyUtil != null &amp;&amp; gvyUtil.getVesselClassType(lkpCarrId).equals('CELL'))&#xA;         {&#xA;            if(transitStateky.equals('S60_LOADED') || transitStateky.equals('S70_DEPARTED')){&#xA;                 locationStatus='2'&#xA;            }else if(transitStateky.equals('S20_INBOUND')){&#xA;                 locationStatus='4'&#xA;            }&#xA;         }&#xA;      }&#xA;      else if(eventType.equals('UNIT_OUT_GATE') &amp;&amp; drayStatusKy.equals('TRANSFER')) {&#xA;         locationStatus='7'&#xA;      }&#xA;    }catch(Exception e){&#xA;       e.printStackTrace()&#xA;    }&#xA;    return locationStatus&#xA; }&#xA; &#xA; }//Class Ends" />
<digital-asset id="GvyUnitLookup" short-description="GvyUnitLookup" groovy-code="import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import java.util.Iterator;&#xA;import java.util.Collection;&#xA;&#xA;&#xA;public class GvyUnitLookup {&#xA;&#xA;public Object lookupFacility(Object id) {&#xA;   println(&quot;GvyUnitLookup.lookupFacility&quot;);&#xA;  &#xA;   try {&#xA;      DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#x9;&#x9;&#xA;      dq.addDqPredicate(PredicateFactory.eq(InventoryField.UFV_UNIT,id ));    &#xA;      //     dq.addDqPredicate(PredicateFactory.eq(InventoryField.UFV_TRANSIT_STATE,com.navis.inventory.business.atoms.UfvTransitStateEnum.S10_ADVISED));&#xA;   def list = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;   if(list != null) {&#xA;      Iterator iter = list.iterator();&#xA;      while(iter.hasNext()) {&#xA;          def visit = iter.next();&#xA;          if(visit.getFieldValue(&quot;ufvTransitState&quot;).equals(com.navis.inventory.business.atoms.UfvTransitStateEnum.S10_ADVISED)) {&#xA;      return visit;&#xA;}&#xA;   }}&#xA;   println(&quot;unit=&quot;+unit);&#xA;   return list.get(0);&#xA;   } catch (Exception e) {&#xA;      println(&quot;Exception in GvyUnitLookup &quot;+e.getMessage());&#xA;      e.printStackTrace();&#xA;   }&#xA;&#xA;   return null;&#xA;  }&#xA;&#xA;public Object lookupActiveUnit(Object id) {&#xA;   println(&quot;GvyUnitLookup.lookupActiveUnit&quot;);&#xA;&#xA;   try {&#xA;      DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;);&#xA;&#x9;&#x9;&#xA;      dq.addDqPredicate(PredicateFactory.eq(InventoryField.UNIT_ID,id ));     &#xA;      def list = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;      if(list != null) {&#xA;         Iterator iter = list.iterator();&#xA;         while(iter.hasNext()) {&#xA;             def unit = iter.next();&#xA;             if(unit.getFieldValue(&quot;unitVisitState&quot;).equals(&#xA;                 com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE)) {&#xA;                 return unit;&#xA;             }&#xA;        }&#xA;   }&#xA;  &#xA;   return null;&#xA;   } catch (Exception e) {&#xA;      println(&quot;Exception in GvyUnitLookup &quot;+e.getMessage());&#xA;      e.printStackTrace();&#xA;   }&#xA;&#xA;   return null;&#xA;  }&#xA;&#xA;   public void copyFeild(String key,Object oldUnit,Object newUnit) {&#xA;      def value = oldUnit.getFieldValue(key);&#xA;      println(&quot;Key=&quot;+key+&quot; value=&quot;+value);&#xA;      if(value != null)  newUnit.setFieldValue(key,value);&#xA;      println(&quot;Key=&quot;+key+&quot; value=&quot;+value+&quot; new val=&quot;+newUnit.getFieldValue(key));&#xA;   }&#xA;&#xA;   public void copyCVFeild(String key,Object oldUnit,Object newUnit) {&#xA;      def value = oldUnit.getFieldValue(key+&quot;.cvId&quot;);&#xA;      println(&quot;Key=&quot;+key+&quot; value=&quot;+value);&#xA;      if(value != null)  newUnit.setFieldValue(key,value);&#xA;   }&#xA;&#xA;  public void copyUnitValues(Object oldUnit,Object newUnit) {&#xA;    copyFeild(&quot;unitFreightKind&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitSealNbr1&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitSealNbr2&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitSealNbr3&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitSealNbr4&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitCategory&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitDrayStatus&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitLineOperator&quot;,oldUnit,newUnit);&#xA;&#xA;    copyFeild(&quot;unitDeclaredIbCv&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitIntendedObCv&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitActiveUfv.ufvActualIbCv&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitActiveUfv.ufvActualObCv&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitActiveUfv.ufvIntendedObCv&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitActiveUfv.ufvArrivePosition&quot;,oldUnit,newUnit);&#xA;&#xA;    copyFeild(&quot;unitActiveUfv.ufvLastFreeDay&quot;,oldUnit,newUnit);&#xA; &#xA;    copyFeild(&quot;unitGoods.gdsConsigneeBzu&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitGoods.gdsShipperBzu&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitGoods.gdsBlNbr&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitGoods.gdsHazards&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitGoods.gdsOrigin&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitGoods.gdsDestination&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitGoods.gdsCommodity&quot;,oldUnit,newUnit);&#xA;&#xA;    copyFeild(&quot;unitGoods.gdsHazards&quot;,oldUnit,newUnit);&#xA;   &#xA;    copyFeild(&quot;unitGoods.gdsReeferRqmnts.rfreqTempRequiredC&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitGoods.gdsReeferRqmnts.rfreqTempLimitMaxC&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitGoods.gdsReeferRqmnts.rfreqTempLimitMinC&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitGoods.gdsReeferRqmnts.rfreqTempShowFarenheit&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitGoods.gdsReeferRqmnts.rfreqVentRequired&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitGoods.gdsReeferRqmnts.rfreqVentUnit&quot;,oldUnit,newUnit);&#xA;&#xA;    copyFeild(&quot;rtgGroup&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;rtgPOL&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;rtgPOD1&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;rtgPOD2&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;rtgOPL&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;rtgTruckingCompany&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;rtgCarrierService&quot;,oldUnit,newUnit);&#xA;&#xA;    copyFeild(&quot;unitFlexString01&quot;,oldUnit,newUnit);  // Consignee PO #&#xA;    copyFeild(&quot;unitFlexString02&quot;,oldUnit,newUnit);  // Release To&#xA;    copyFeild(&quot;unitFlexString03&quot;,oldUnit,newUnit);  // CSR ID&#xA;    copyFeild(&quot;unitFlexString04&quot;,oldUnit,newUnit);  // Advanced VVD&#xA;    copyFeild(&quot;unitFlexString05&quot;,oldUnit,newUnit);  // Det Code&#xA;    copyFeild(&quot;unitFlexString06&quot;,oldUnit,newUnit);  // Stif Shpr  &#xA;    copyFeild(&quot;unitFlexString08&quot;,oldUnit,newUnit);  // Priority Stow&#xA;   &#xA;    copyFeild(&quot;unitSpecialStow&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitSpecialStow2&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitSpecialStow3&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitRemark&quot;,oldUnit,newUnit);&#xA;&#xA;    // Holds&#xA;   try {&#xA;    ServicesManager sm = (ServicesManager)Roastery.getBean(&quot;servicesManager&quot;);&#xA;    sm.copyActiveFlags (oldUnit, newUnit);&#xA;   } catch (Exception e) {&#xA;     e.printStackTrace();&#xA;   }&#xA;&#xA;  /* Not working&#xA;   Collection collect =  com.navis.services.business.rules.Flag.findAllFlagsForEntity(oldUnit);&#xA;   println(&quot;Flags=&quot;+collect);&#xA;   Iterator iter = collect.iterator();&#xA;    println(&quot;Flags=&quot;+collect);&#xA;&#xA;   while(iter.hasMore()) {&#xA;      Object o = iter.next();&#xA;      println(&quot;Hold=&quot;+o);&#xA;      com.navis.services.business.rules.Flag.createFlag(o.getFlagFlagType(), newUnit, null, o.getFlagNote() );&#xA;    }&#xA;   */&#xA; &#xA;   &#xA;  &#xA;   }&#xA;}&#xA;" />
<digital-asset id="GvyInjAbdb" short-description="ACETS BDB Process" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.atoms.EventEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.orders.business.eqorders.EquipmentOrderManagerPea&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;&#xA;class GvyInjAbdb extends GroovyInjectionBase {&#xA;&#x9;public String execute(Map inParameters) {&#xA;&#xA;&#x9;def ctrId = (String) inParameters.get(&quot;equipment-id&quot;);&#xA;&#xA;&#x9;def recorder = (String) inParameters.get(&quot;recorder&quot;);&#xA;&#x9;def vesvoyBdb = (String) inParameters.get( &quot;vesvoy&quot;);&#xA;&#x9;def dbdBookingNum = (String) inParameters.get( &quot;bookngNum&quot;);&#xA;&#x9;def sit = (String) inParameters.get( &quot;sit&quot;);&#xA;&#x9;def consigneeIdBdb = (String) inParameters.get( &quot;consigneeId&quot;);&#xA;&#x9;def consigneeNameBdb = (String) inParameters.get( &quot;consigneeName&quot;);&#xA;&#x9;def shipperNameBdb = (String) inParameters.get( &quot;shipperName&quot;);&#xA;&#x9;def shipperIdBdb = (String) inParameters.get( &quot;shipperId&quot;);&#xA;&#x9;def destPortBdb = (String) inParameters.get( &quot;destPort&quot;);&#xA;&#x9;def inBoundBdb = (String) inParameters.get( &quot;inBound&quot;);&#xA;&#x9;def agFlag = (String) inParameters.get( &quot;ag&quot;);&#xA;&#x9;def discPortBdb = (String) inParameters.get( &quot;dischargePort&quot;);&#xA;&#x9;def primCarrierBdb = (String) inParameters.get( &quot;primCarrier&quot;);&#xA;&#xA;&#x9;// Find the UFV&#xA;&#x9;log( &quot;Starting BDB Injection process.&quot;);&#xA;&#x9;def ufv;&#xA;&#x9;def unit;&#xA;&#x9;try {&#xA;&#x9;&#x9;ufv = findActiveUfv(ctrId);&#xA;&#x9;&#x9;unit = ufv.getUfvUnit();&#xA;&#x9;} catch ( Exception ex) {&#xA;&#x9;&#x9;fail((new StringBuilder()).append(ex.toString()).append(&quot; ERR_GVY_DBD_001. Could not find unit: &quot;).append( ctrId).toString());&#xA;&#x9;}&#xA;&#xA;&#x9;if( UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory()) &amp;&amp;&#xA;&#x9;&#x9;isLongHaul( vesvoyBdb) &amp;&amp;&#xA;&#x9;&#x9;UnitVisitStateEnum.DEPARTED.equals(ufv.getUfvVisitState())) {&#xA;&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_DBD_002. VesVoy: &quot; + vesvoyBdb + &quot; sailed. Could not apply DBD.&quot;);&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;def uoi = unit.getUnitPrimaryUe().getUeDepartureOrderItem();&#xA;&#x9;def n4BookingNum = null;&#xA;&#x9;if ( uoi != null) {&#xA;&#x9;&#x9;n4BookingNum = uoi.getEqboiOrder().getEqboNbr();&#xA;&#x9;}&#xA;&#x9;log( &quot;n4BookingNum = &quot; + n4BookingNum + &quot; dbdBookingNum = &quot; + dbdBookingNum);&#xA;&#xA;&#x9;if ( n4BookingNum != null &amp;&amp; n4BookingNum != dbdBookingNum) {&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_DBD_003. Unit: &quot; + ctrId + &quot; Booking Num dismatch: N4 num=&quot; + n4BookingNum + &quot;DBD num=&quot; + dbdBookingNum);&#xA;&#x9;}&#xA;&#xA;&#x9;if ( !UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory()) &amp;&amp; !UnitCategoryEnum.EXPORT.equals(unit.getUnitCategory())) {&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_DBD_004. Category is not for IMPORT or EXPORT for unit; &quot; + ctrId);&#xA;&#x9;}&#xA;&#xA;&#x9;UfvTransitStateEnum transitState = ufv.getUfvTransitState();&#xA;&#x9;UnitVisitStateEnum visitState = unit.getUnitVisitState();&#xA;&#x9;if ( UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory()) &amp;&amp;&#xA;&#x9;&#x9;!UfvTransitStateEnum.S30_ECIN.equals(transitState) &amp;&amp;&#xA;&#x9;&#x9;!UfvTransitStateEnum.S40_YARD.equals(transitState) &amp;&amp;&#xA;&#x9;&#x9;!UnitVisitStateEnum.ADVISED.equals(visitState)) {&#xA;&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_DBD_004. Bad location status for unit: &quot; + ctrId);&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;Routing rtg = unit.getUnitRouting();&#xA;&#xA;&#x9;if ( rtg == null) {&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_DBD_0041. Can not find routing info for unit: &quot; + ctrId);&#xA;&#x9;}&#xA;&#x9;def rtgGroup = rtg.getRtgGroup();&#xA;&#x9;def grpId = null;&#xA;&#x9;if ( rtgGroup != null) {&#xA;&#x9;&#x9;grpId = rtgGroup.getGrpId();&#xA;&#x9;}&#xA;&#xA;&#x9;if ( sit != &quot;Y&quot; &amp;&amp; grpId == &quot;SIT&quot;) {&#xA;&#x9;&#x9;//sendSitEmail();&#xA;&#x9;&#x9;log( &quot;send email.&quot;);&#xA;&#x9;&#x9;return &quot;Send SIT email.&quot;;&#xA;&#x9;}&#xA;&#xA;&#x9;// find booking&#xA;&#x9;def facility = getFacility();&#xA;&#x9;def cv = CarrierVisit.findVesselVisit( facility, vesvoyBdb);&#xA;&#x9;if ( cv == null) {&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_BDB_005. Could not find the carrier visit: &quot; + vesvoyBdb);&#xA;&#x9;}&#xA;&#xA;&#x9;def bizScope = ScopedBizUnit.findScopedBizUnit( &quot;MAT&quot;, BizRoleEnum.LINEOP);&#xA;&#x9;if ( bizScope == null) {&#xA;&#x9;&#x9;&#x9;fail( &quot;ERR_GVY_BDB_006. Could not find the business unit: MAT&quot;);&#xA;&#x9;}&#xA;&#xA;&#x9;def booking = Booking.findBookingByUniquenessCriteria( dbdBookingNum, bizScope, cv);&#xA;&#x9;if ( booking == null) {&#xA;&#x9;&#x9;&#x9;fail( &quot;ERR_GVY_BDB_007. Could not find booking: &quot; + dbdBookingNum);&#xA;&#x9;}&#xA;&#xA;&#x9;def event = new GroovyEvent( null, unit);&#xA;&#x9;def comments = &quot;&quot;;&#xA;&#x9;// start if IMPORT&#xA;&#x9;if ( UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory())) {&#xA;&#x9;&#x9;log( &quot;in IMPORT section.&quot;);&#xA;&#x9;&#x9;def consigneeN4 = unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;);&#xA;&#x9;&#x9;def consigneeN4Id = unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuId&quot;);&#xA;&#x9;&#x9;log( &quot;cneeNameN4 = &quot; + consigneeN4 + &quot; cneeIdN4 = &quot; + consigneeN4Id);&#xA;&#x9;&#x9;if ( consigneeN4 != null &amp;&amp; ( consigneeN4.contains( &quot;unapproved&quot;) || consigneeN4.contains( &quot;invalid assign&quot;)) &amp;&amp;&#xA;&#x9;&#x9;&#x9;&#x9;n4BookingNum == null) {&#xA;&#x9;&#x9;&#x9;&#x9;// assign booking to unit&#xA;&#x9;&#x9;&#x9;&#x9;def eqoMgr = new EquipmentOrderManagerPea();&#xA;&#x9;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsBlNbr&quot;, dbdBookingNum);&#xA;&#x9;&#x9;&#x9;&#x9;eqoMgr.assignExportBookingToUnit( booking, strippedUnit);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;def misc2 = unit.getFieldValue(&quot;unitFlexString11&quot;);&#xA;&#x9;&#x9;log( &quot;misc2 = &quot; + misc2);&#xA;&#x9;&#x9;if ( misc2 != null &amp;&amp; !misc2.contains( &quot;C&quot;) &amp;&amp; consigneeN4Id != consigneeIdBdb) {&#xA;&#x9;&#x9;&#x9;def cneeGrp = ScopedBizUnit.findScopedBizUnit( consigneeIdBdb, BizRoleEnum.SHIPPER);&#xA;&#x9;&#x9;&#x9;if ( cneeGrp == null) {&#xA;&#x9;&#x9;&#x9;&#x9;log( &quot;Consignee&quot; + consigneeNameBdb + &quot; not configured in N4.&quot;);&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;unit.getUnitGoods().updateConsignee( consigneeIdBdb);&#xA;&#x9;&#x9;&#x9;&#x9;log( &quot;update consignee with BDB.&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;comments += &quot;RECON X &quot; + consigneeN4;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;def destPortN4 = unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;);&#xA;&#x9;&#x9;log( &quot;destPortN4 = &quot; + destPortN4);&#xA;&#x9;&#x9;if ( misc2 != null &amp;&amp; !misc2.contains( &quot;P&quot;) &amp;&amp; destPortN4 != destPortBdb) {&#xA;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsDestination&quot;, destPortBdb);&#xA;&#x9;&#x9;&#x9;comments = comments + &quot; &quot; + destPortN4 + &quot; to &quot; + destPortBdb;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;log( &quot;shipperIdBdb = &quot; + shipperIdBdb);&#xA;&#x9;&#x9;unit.getUnitGoods().updateShipper( shipperIdBdb);&#xA;&#xA;&#x9;&#x9;if ( misc2 != null &amp;&amp; inBoundBdb == &quot;Y&quot; &amp;&amp; !misc2.contains( &quot;B&quot;)) {&#xA;&#x9;&#x9;&#x9;event.postNewEvent( &quot;INB_HOLD&quot;);&#xA;&#x9;&#x9;&#x9;event.postNewEvent( &quot;CUS_HOLD&quot;);&#xA;&#x9;&#x9;&#x9;comments = comments + &quot; INB and CUS hold applied.&quot;;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;def eqType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;&#x9;&#x9;log( &quot;eqType = &quot; + eqType);&#xA;&#x9;&#x9;if ( agFlag != null &amp;&amp; misc2 != null &amp;&amp; agFlag == &quot;Y&quot; &amp;&amp; eqType[0] != &quot;R&quot; &amp;&amp; !misc2.contains( &quot;A&quot;)) {&#xA;&#x9;&#x9;&#x9;event.postNewEvent( &quot;AG_HOLD&quot;);&#xA;&#x9;&#x9;&#x9;comments += &quot; add AG hold.&quot;;&#xA;&#x9;&#x9;&#x9;misc2 += &quot;L&quot;;&#xA;&#x9;&#x9;&#x9;if ( destPortBdb == &quot;HON&quot; || destPortBdb == &quot;LNI&quot; || destPortBdb == &quot;MOL&quot; ) {&#xA;&#x9;&#x9;&#x9;&#x9;log( &quot;SpecialStow N4 = &quot; + unit.getFieldValue(&quot;unitSpecialStow.stwId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;//unit.setFieldValue(&quot;unitSpecialStow.stwId&quot;, &quot;3&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;unit.setUnitSpecialStow( SpecialStow.findSpecialStow( &quot;3&quot;));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;if ( agFlag != null &amp;&amp; misc2 != null &amp;&amp; agFlag == &quot;N&quot; &amp;&amp; !misc2.contains( &quot;A&quot;)) { //&amp;&amp; onAgHold()) {&#xA;&#x9;&#x9;&#x9;event.postNewEvent( &quot;AG_RELEASE&quot;);&#xA;&#x9;&#x9;&#x9;if ( unit.getFieldValue(&quot;unitSpecialStow.stwId&quot;) == &quot;3&quot;) {&#xA;&#x9;&#x9;&#x9;&#x9;unit.setUnitSpecialStow( null);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;} else { // if not IMPORT&#xA;&#x9;&#x9;log( &quot;in NOT IMPORT section.&quot;);&#xA;&#x9;&#x9;//def transitN4 = ufv.getFieldValue(&quot;VisitsTransitState&quot;);&#xA;&#x9;&#x9;def transitN4 = unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;).getKey();&#xA;&#x9;&#x9;log( &quot;transitN4 = &quot; + transitN4);&#xA;&#x9;&#x9;if ( !transitN4.contains(&quot;INBOUND&quot;) &amp;&amp; !transitN4.contains(&quot;DEPARTED&quot;)) {&#xA;&#x9;&#x9;&#x9;//n4.vesvoy = vesvoyBdb;&#xA;&#x9;&#x9;&#x9;unit.setFieldValue( &quot;unitActiveUfv.ufvActualObCv.cvId&quot;, vesvoyBdb);&#xA;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;def dischargePortN4 = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;&#x9;&#x9;log( &quot;dischargePortN4 = &quot; + dischargePortN4);&#xA;&#x9;&#x9;if ( discPortBdb != dischargePortN4 &amp;&amp; !transitN4.contains(&quot;INBOUND&quot;)) {&#xA;&#x9;&#x9;&#x9;unit.getUnitRouting().setRtgPOD1( RoutingPoint.findRoutingPoint( discPortBdb));&#xA;&#x9;&#x9;&#x9;//unit.setFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;, discPortBdb);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsDestination&quot;, destPortBdb);&#xA;&#x9;&#x9;def shipper = Shipper.findOrCreateShipper( shipperIdBdb, shipperNameBdb);&#xA;&#x9;&#x9;unit.getUnitGoods().updateShipper( shipper);&#xA;&#x9;&#x9;def conee = Shipper.findOrCreateShipper( consigneeIdBdb, consigneeNameBdb);&#xA;&#x9;&#x9;unit.getUnitGoods().updateConsignee( consigneeIdBdb);&#xA;&#x9;&#x9;//unit.setFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuId&quot;, consigneeIdBdb);&#xA;&#x9;&#x9;//unit.setFieldValue(&quot;unitGoods.gdsShipperBzu.bzuId&quot;, shipperIdBdb);&#xA;&#xA;&#x9;} // end of if IMPORT&#xA;log( &quot;end of import.&quot;);&#xA;&#x9;def lineOperatorN4 = unit.getUnitLineOperator();&#xA;&#x9;if ( primCarrierBdb != &quot;&quot; &amp;&amp;  lineOperatorN4 != primCarrierBdb) {&#xA;&#x9;&#x9;unit.setFieldValue( &quot;unitLineOperator.bzuId&quot;, primCarrierBdb);&#xA;&#x9;}&#xA;&#xA;&#x9;if( UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory())) {&#xA;&#x9;&#x9;unit.setFieldValue(&quot;unitDeclaredIbCv.cvId&quot;, vesvoyBdb);&#xA;&#x9;&#x9;//unit.setFieldValue( &quot;unitActiveUfv.ufvActualIbCv.cvCvd.cvdService.srvcId&quot;, vesvoyBdb);&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;if (isLongHaul( vesvoyBdb) &amp;&amp; UnitCategoryEnum.EXPORT.equals(unit.getUnitCategory()))  {&#xA;&#x9;&#x9;&#x9;event.postNewEvent( &quot;UNIT_REROUTE&quot;);&#xA;&#x9;}&#xA;  log( &quot;grpId = &quot; + grpId);&#xA;&#x9;if ( sit == &quot;Y&quot; &amp;&amp; grpId != &quot;SIT&quot;) {&#xA;&#x9;&#x9;rtg = unit.getUnitRouting();&#xA;&#x9;&#x9;if ( rtg != null) {&#xA;&#x9;&#x9;&#x9;rtgGroup = rtg.getRtgGroup();&#xA;&#x9;&#x9;&#x9;if ( rtgGroup == null)&#xA;&#x9;&#x9;&#x9;&#x9;rtgGroup = Group.findGroup( &quot;SIT&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;rtg.setRtgGroup( rtgGroup);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;log( &quot;comments = &quot; + comments);&#xA;&#x9;if ( comments != &quot;&quot;)&#xA;&#x9;&#x9;unit.setFieldValue( &quot;unitRemark&quot;, comments);&#xA;&#xA;}&#xA;&#xA;  private boolean isLongHaul( String vesvoy) {&#xA;&#x9;&#x9;//def gvyBaseClass = new GroovyInjectionBase()&#xA;  &#x9;def gvyUtil = getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;  &#x9;def vType = gvyUtil.getVesselClassType( vesvoy);&#xA;  &#x9;return vType == &quot;BARGE&quot; ? true : false;&#xA;&#x9;}&#xA;}" />
<digital-asset id="GvyCmisProcessEditFlag" short-description="GvyCmisProcessEditFlag" groovy-code="import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;&#xA;public class GvyCmisProcessEditFlag {&#xA;&#xA;public String processEditFlag(Object event, String eventType, Object unit, Object gvyBaseClass)&#xA;{&#xA; //MISC2 Field &#xA; def editFlag = ''&#xA; try&#xA; {&#xA;     Map fieldMap = new HashMap();&#xA;     fieldMap.put(&quot;GoodsConsigneeName&quot;, &quot;C&quot;); fieldMap.put(&quot;Destination&quot;,&quot;P&quot;);&#xA;     fieldMap.put(&quot;FreightKind&quot;,&quot;D&quot;); fieldMap.put(&quot;CommodityDescription&quot;,&quot;D&quot;);&#xA;     fieldMap.put(&quot;DrayStatus&quot;,&quot;S&quot;); fieldMap.put(&quot;UnitRemark&quot;,&quot;R&quot;);&#xA;     fieldMap.put(&quot;GoodsBlNbr&quot;,&quot;K&quot;);&#xA;     //Get Flag value  &#xA;     editFlag = unit.getUnitFlexString11();&#xA;     //Process Flag value&#xA;     editFlag = processFieldEditFlag(fieldMap,editFlag,event, unit,gvyBaseClass); &#xA;     editFlag = processEventEditFlag(eventType, editFlag);&#xA;  }catch(Exception e){&#xA;      e.printStackTrace()&#xA;  }&#xA;  return editFlag&#xA;&#xA;}&#xA;&#xA;//Method Set's Updated Field from UI in EDIT FLAG&#xA;public String processFieldEditFlag(Map map, String editFlagVal, Object event, Object unit, Object gvyBaseClass)&#xA;{&#xA;  String editFlag = ''&#xA;  try&#xA;  {&#xA;     def remark=unit.getFieldValue(&quot;unitRemark&quot;)&#xA;     remark = remark != null ? remark.trim() : ''&#xA;&#xA;     def eventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;     editFlag = editFlagVal;&#xA;&#x9;&#xA;     for(itr in map)&#xA;    {&#xA;      String key = (String)itr.getKey();&#xA;      String value = (String)itr.getValue();&#xA;      //println(&quot;KEY : Value &quot;+key+&quot;:&quot;+value+&quot;Key Changed : &quot;+event.wasFieldChanged(key))&#xA;      if(key.equals('GoodsConsigneeName')){&#xA;          if(eventUtil.wasFieldChanged(event,&quot;gdsConsigneeAsString&quot;)) {&#xA;             editFlag = appendValue(editFlagVal,value);&#xA;           //  println (&quot;KEY : Value &quot;+key+&quot;:&quot;+value+&quot;Key Changed : &quot;+event.wasFieldChanged(key))&#xA;          }&#xA;       }&#xA;       else if(key.equals('UnitRemark')){&#xA;           if(eventUtil.wasFieldChanged(event,&quot;unitRemark&quot;)) &#xA;           {&#xA;              def prevRemarks = eventUtil.getPreviousPropertyAsString(event, 'unitRemark')&#xA;              prevRemarks = prevRemarks != null ? prevRemarks : '' &#xA;             if(!prevRemarks.trim().equals(remark))&#xA;             {&#xA;                editFlag = appendValue(editFlagVal,value);&#xA;             }&#xA;          }&#xA;      }&#xA;      else if(event.wasFieldChanged(key))&#xA;     {&#xA;       if(key.equals(&quot;CommodityDescription&quot;) &amp;&amp;  event.getProperty(key).equals(&quot;AUTO&quot;)){&#xA;   &#x9;editFlag = appendValue(editFlagVal,value);&#xA;      }&#xA;      else if(key.equals(&quot;DrayStatus&quot;) &amp;&amp; event.getProperty(key) != null){&#xA;         if(event.getProperty(key).getKey().equals(&quot;DRAYIN&quot;) &#xA;             || event.getProperty(key).getKey().equals(&quot;OFFSITE&quot;)){&#xA;&#x9;editFlag = appendValue(editFlagVal,value);&#xA;&#x9;}&#xA;      }&#xA;      else if(!(key.equals(&quot;CommodityDescription&quot;) || key.equals(&quot;DrayStatus&quot;))){&#xA;               // println(&quot;KEY : Value &quot;+key+&quot;:&quot;+value+&quot;Key Changed : &quot;+event.wasFieldChanged(key))                &#xA;&#x9;editFlag = appendValue(editFlagVal,value);&#xA;      }&#xA;    }//IF Ends&#xA;   }//For Ends&#xA;  }catch(Exception e){&#xA;    e.printStackTrace()&#xA;  }&#xA;  return editFlag;&#xA;}&#xA;&#xA;// Set's EditFlag for Hold/Release Events&#x9;&#xA;public static String processEventEditFlag(String eventType, String editFlagVal)&#xA;{&#xA;  String editFlag = ''&#xA;  try&#xA; {&#xA;    editFlag = editFlagVal;&#xA;&#x9;&#xA;    if(eventType.equals(&quot;HP_HOLD&quot;) || eventType.equals(&quot;HP_RELEASE&quot;)&#xA;       ||eventType.equals(&quot;CC_HOLD&quot;) || eventType.equals(&quot;CC_RELEASE&quot;))&#xA;    {&#xA;      editFlag = appendValue(editFlagVal,&quot;M&quot;);&#xA;     }&#xA;     else if(eventType.equals(&quot;AG_HOLD&quot;) || eventType.equals(&quot;AG_RELEASE&quot;) &#xA;&#x9;   || eventType.equals(&quot;XT_HOLD&quot;) || eventType.equals(&quot;XT_RELEASE&quot;))&#xA;     {&#xA;        editFlag = appendValue(editFlagVal,&quot;A&quot;);&#xA;      }&#xA;      else if(eventType.equals(&quot;INB_HOLD&quot;) || eventType.equals(&quot;INB_RELEASE&quot;) &#xA;&#x9;|| eventType.equals(&quot;CUS_HOLD&quot;) || eventType.equals(&quot;CUS_RELEASE&quot;))&#xA;     {&#xA;        editFlag  = appendValue(editFlagVal,&quot;B&quot;); &#xA;      }&#xA;      else if(eventType.equals(&quot;ON_HOLD&quot;) || eventType.equals(&quot;ON_RELEASE&quot;))&#xA;     {&#xA;       editFlag = appendValue(editFlagVal,&quot;O&quot;); &#xA;     }&#xA;   }catch(Exception e){&#xA;      e.printStackTrace()&#xA;   }&#xA;   return editFlag;&#xA;}&#xA;&#xA;//Appends EditFlag value from the Right (10Char max)&#x9;&#xA;public static String appendValue(String edtFlag, String fldEditFlag)&#xA;{   &#xA;  String editFlagValue = &quot;&quot;;&#xA;  try&#xA;  {&#xA;     if(edtFlag != null &amp;&amp; edtFlag.length() == 10){&#xA;       String stripFirstChar = edtFlag.substring(1, edtFlag.length());&#xA;       editFlagValue = stripFirstChar+fldEditFlag;&#xA;     }else{&#xA;         if(edtFlag == null || edtFlag.trim().length() == 0){&#x9;&#xA;             editFlagValue = fldEditFlag;&#xA;         }else{&#xA;            editFlagValue = edtFlag+fldEditFlag;&#x9;&#xA;         }&#xA;      }&#xA;   }catch(Exception e){&#xA;      e.printStackTrace()&#xA;   }&#xA;  return editFlagValue; &#xA;}&#xA;&#xA;}" />
<digital-asset id="GvyOldConsignee" short-description="GvyOldConsignee" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.framework.persistence.HibernateApi; &#xA;import com.navis.services.business.event.EventFieldChange;&#xA;&#xA;public class GvyOldConsignee {&#xA;&#xA;public String doIt(Object event)    &#xA;{&#xA;  println(&quot;In Class GvyOldCosignee.doIt() !!!!!!!!!!!!!&quot;)&#xA;  &#xA;  //Calling Msg Formater class&#xA;  def gvyBaseClass = new GroovyInjectionBase();&#xA;&#xA;  //Get OBJECT&#xA;  Object unitObj = event.getEntity();&#xA;&#xA;  def eventBase = event.getEvent();&#xA;  println(&quot;Changes=&quot;+eventBase.getEvntFieldChanges());&#xA;&#xA;  Iterator i1 = eventBase.getEvntFieldChanges().iterator();&#xA;&#xA;   String id;&#xA;   while(i1.hasNext()) {&#xA;       def efc = (EventFieldChange)i1.next();&#xA;       def name = efc.getEvntfcMetafieldId();&#xA;       def value = efc.getPrevVal();&#xA;       println(&quot;name=&quot;+name+&quot; value=&quot;+value);   &#xA;       println(efc.dump());&#xA;    }&#xA;            &#xA;&#xA;  &#xA;  // Test&#xA;  def current  =  unitObj.getFieldValue(&quot;unitGoods.gdsConsigneeAsString&quot;)&#xA;  println(&quot;CurrentConsignee= &quot;+current);&#xA;  def result1 = event.wasFieldChanged(&quot;GoodsConsignee&quot;)&#xA;  def result2 = event.getPreviousPropertyAsString(&quot;GoodsConsigneeName&quot;);&#xA;  def result3 = event.getPreviousPropertyAsString(&quot;GoodsConsigneeRef&quot;);&#xA;   def prevc = event.getPreviousPropertyAsString(&quot;GoodsConsignee&quot;);&#xA;   if(result1) {&#xA;      &#xA;      HibernateApi api = HibernateApi.getInstance();&#xA;      ScopedBizUnit biz = api.get(ScopedBizUnit.class, Long.valueOf(prevc));&#xA;      def prevCosignee = biz.getBzuName();&#xA;      println(&quot;Previous Consignee = &quot;+prevCosignee+&quot; id=&quot;+prevc+&quot; &quot;+result2+&quot; &quot;+result3);&#xA;      return prevCosignee;&#xA;   } else {&#xA;      println(&quot;No Change&quot;);&#xA;   }&#xA;&#xA;   println(event.dump());&#xA;   return null;&#xA;}&#xA;}" />
<digital-asset id="GvyEventUtil" short-description="GvyEventUtil" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import java.util.TimeZone;&#xA; &#xA; // Event Utils using metafieldId and not Reportable Entity names&#xA; &#xA; // gdsConsigneeAsString for Consignee name&#xA; &#xA; public class GvyEventUtil {&#xA; &#xA; public String getPreviousPropertyAsString(Object event, String metafieldId) {&#xA;           def eventBase = event.getEvent();&#xA;           def change = eventBase.getEvntFieldChanges();&#xA;           if(change == null) return null;&#xA;           Iterator i1 = change.iterator();&#xA;           while(i1.hasNext()) {&#xA;              def efc = (EventFieldChange)i1.next();&#xA;              println(&quot;MetaField=&quot;+efc.getEvntfcMetafieldId());&#xA;              if(metafieldId.equalsIgnoreCase(efc.getEvntfcMetafieldId())) {&#xA;                 return efc.getPrevVal();&#xA;              }&#xA;           }&#xA;        &#xA;        return null;&#xA;}&#xA;&#xA;public boolean wasFieldChanged(Object event, String metafieldId)&#xA;    {&#xA;       def eventBase = event.getEvent();&#xA;       def change = eventBase.getEvntFieldChanges();&#xA;       if(change == null) return null;&#xA;       Iterator i1 = change.iterator();&#xA;       while(i1.hasNext()) {&#xA;          def efc = (EventFieldChange)i1.next();&#xA;          if(metafieldId.equalsIgnoreCase(efc.getEvntfcMetafieldId())) {&#xA;             return true;&#xA;          }&#xA;       }&#xA;               &#xA;       return false;&#xA;    }&#xA;&#xA;&#xA;&#xA;public static String formatDate(java.util.Date date, TimeZone zone) {&#xA;java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy&quot;);&#xA;dateFormat.setTimeZone(zone);&#xA;&#x9;return dateFormat.format(date);&#xA;}&#xA;&#x9;&#xA;public static String formatTime(java.util.Date date, TimeZone zone) {&#xA;java.text.SimpleDateFormat timeFormat = new java.text.SimpleDateFormat(&quot;HH:mm:ss&quot;);&#xA;timeFormat.setTimeZone(zone);&#xA;&#x9;return timeFormat.format(date);&#xA;}&#xA;&#xA;&#xA;//Convert to Julian Date&#xA;  public static String convertToJulianDate(String date)&#xA;  {&#xA;     def year  = date.substring(0,4);&#xA;     def month = date.substring(5,7);&#xA;     def day   = date.substring(8,10);&#xA;     def newGregCal = new GregorianCalendar(Integer.parseInt(year),Integer.parseInt(month) - 1,Integer.parseInt(day))&#xA;    def lngTime = newGregCal.getTimeInMillis() &#xA;    def today = new Date(lngTime)&#xA;    def julianDate = new java.text.SimpleDateFormat(&quot;yyDDD&quot;)&#xA;    def dayOfYear = julianDate.format(today)&#xA;    return dayOfYear;&#xA;  }&#xA;&#xA;}&#xA;&#xA;&#xA;" />
<digital-asset id="GvyInjAbob" short-description="ACETS BOB Process" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.argo.business.reference.*&#xA;&#xA;class GvyInjAbob extends GroovyInjectionBase {&#xA;&#x9;public String execute(Map inParameters) {&#xA;&#xA;&#x9;&#x9;def eventId = (String) inParameters.get(&quot;eventId&quot;);&#xA;&#x9;&#x9;def bookingNum = (String) inParameters.get( &quot;bookingNum&quot;);&#xA;&#x9;&#x9;def vesvoy = (String) inParameters.get( &quot;vesvoy&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;// find booking&#xA;&#x9;&#x9;&#x9;def facility = getFacility();&#xA;&#x9;&#x9;&#x9;def cv = CarrierVisit.findVesselVisit( facility, vesvoy);&#xA;&#x9;&#x9;&#x9;if ( cv == null) {&#xA;&#x9;&#x9;&#x9;&#x9;fail( &quot;ERR_GVY_BOB_001. Could not find the carrier visit: &quot; + vesvoy);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;def bizScope = ScopedBizUnit.findScopedBizUnit( &quot;MAT&quot;, BizRoleEnum.LINEOP);&#xA;&#x9;&#x9;&#x9;if ( bizScope == null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;fail( &quot;ERR_GVY_BOB_002. Could not find the business unit: MAT&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;def booking = Booking.findBookingByUniquenessCriteria( bookingNum, bizScope, cv);&#xA;&#x9;&#x9;&#x9;if ( booking == null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;fail( &quot;ERR_GVY_BOB_003. Could not find booking: &quot; + bookingNum);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;def event = new GroovyEvent( null, booking);&#xA;&#xA;&#x9;&#x9;event.postNewEvent( eventId);&#xA;&#x9;&#x9;log( &quot;GvyInjAbob post event: &quot; + eventId + &quot; for booking: &quot; + bookingNum);&#xA;&#x9;}&#xA;&#xA;}" />
<digital-asset id="GvyInjTest" short-description="John's GVY Test" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.framework.presentation.internationalization.IMessageTranslatorProvider;&#xA;import com.navis.framework.presentation.internationalization.MessageTranslator;&#xA;import com.navis.argo.business.atoms.CarrierVisitPhaseEnum;&#xA;import com.navis.framework.util.AtomizedEnum;&#xA;import com.navis.framework.portal.context.PortalApplicationContext;&#xA;&#xA;&#xA; class GvyInjTest extends GroovyInjectionBase {&#xA;&#x9;public String execute(Map inParameters) {&#xA;&#xA;  def inLocale = Locale.ENGLISH;&#xA;  def inValue = CarrierVisitPhaseEnum.CLOSED;&#xA;  IMessageTranslatorProvider translatorProvider = (IMessageTranslatorProvider)PortalApplicationContext.getBean(&quot;messageTranslatorProvider&quot;);&#xA;  MessageTranslator translator = translatorProvider.getMessageTranslator(inLocale);&#xA;  com.navis.framework.util.internationalization.PropertyKey key = ((AtomizedEnum)inValue).getDescriptionPropertyKey();&#xA;  Object outValue;&#xA;  if(translator.isMessageAvailable(key))&#xA;    {&#xA;      outValue = translator.getMessage(key);&#xA;       log( &quot;outValue=&quot; + outValue);&#xA;    }&#xA;&#x9;log( &quot;key=&quot; + key);&#xA; &#xA;&#xA;&#x9;}&#xA;}" />
<digital-asset id="GvyCmisEventFeedManipulation" short-description="GvyCmisEventFeedManipulation" groovy-code=" public class GvyCmisEventFeedManipulation&#xA; {&#xA;   &#xA;   public String processCmisEventFeedManipulation(String eventType,String xmlGvyString, Object gvyInjtBase, Object event, Object unit, Object isUnitObj, String equiClass)&#xA;   {&#xA;      def xmlGvyData = xmlGvyString&#xA;      try&#xA;      { &#xA;          println('GvyCmisEventFeedManipulation-1')&#xA;         Object eventSpecObj = null;&#xA;         def groupCode = unit.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;);&#xA;         groupCode = groupCode != null ? groupCode : ''&#xA;         def _commodityId=unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;)&#xA;         def commodityId = _commodityId != null ? _commodityId : ''&#xA;         def designatedTrucker=unit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;         def _drayStatus=unit.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;         def drayStatus = _drayStatus!= null ? _drayStatus.getKey() : _drayStatus&#xA;&#xA;      &#xA;      if(groupCode != null &amp;&amp; groupCode.equals('TS')){&#xA;        eventSpecObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;        xmlGvyData = eventSpecObj.getAfterTagStripAssign(xmlGvyData)&#xA;      }&#xA;      else if((groupCode.equals('XFER-P2') || groupCode.equals('XFER-WO') &#xA;         || groupCode.equals('XFER-SI')) &amp;&amp; drayStatus.equals('OFFSITE') ){&#xA;        eventSpecObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;        xmlGvyData = eventSpecObj.getTransferEventChanges(xmlGvyData)&#xA;     }&#xA;     else if(groupCode.equals('COMSVC')){&#xA;        eventSpecObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;        xmlGvyData = eventSpecObj.getCommunityServiceUnAssign(xmlGvyData)&#xA;     }&#xA;     else  if(groupCode.equals('SHOW') || groupCode.equals('MDA')){&#xA;        eventSpecObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;        xmlGvyData = eventSpecObj.getRetCustomerAssign(xmlGvyData)&#xA;     }&#xA;     else if (groupCode.equals('YB') || eventType.equals('YB_UNASSIGN')) {&#xA;        eventSpecObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;        xmlGvyData = eventSpecObj.getYBEvent(xmlGvyData,designatedTrucker,eventType)&#xA;     }&#xA;     //SIT EVENT&#xA;     else if(commodityId.equals('SIT') &amp;&amp; drayStatus.equals('OFFSITE'))&#xA;     {&#xA;      println('INSIDE THE SIT ASSIGN CONDITION')&#xA;      eventSpecObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyCmisEventSIT&quot;);&#xA;      def appendObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;      xmlGvyData = eventSpecObj.processSitAssign(xmlGvyData,event,unit,commodityId,drayStatus) &#xA;     }&#xA;     else if(eventType.equals('TRANSFER_CANCEL')){&#xA;        eventSpecObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;        xmlGvyData = eventSpecObj.getTransferCancelEvent(xmlGvyData, designatedTrucker, commodityId)&#xA;     }&#xA;     else if(eventType.equals('TAG_STRIP_UNASSIGN')){&#xA;        eventSpecObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;        xmlGvyData = eventSpecObj.getTagStripUnAssign(xmlGvyData)&#xA;     }&#xA;     //Check for Over Dimension OVD&#xA;     else if (eventType.equals('UNIT_OVERDIMENSIONS_UPDATE') &amp;&amp; isUnitObj.equals(Boolean.TRUE))&#xA;     {&#xA;        eventSpecObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyCmisEventOverDimension&quot;);&#xA;        xmlGvyData = eventSpecObj.getUnitDimensionUpdate(xmlGvyData,event,unit)&#xA;     }&#xA;     else  if(eventType.equals('UNIT_DELIVER'))&#xA;     {&#xA;      //EVENT DELIVER/RECIEVE&#xA;      eventSpecObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyCmisEventUnitDeliver&quot;);&#xA;      xmlGvyData= eventSpecObj.processUnitDeliver(xmlGvyData,eventType,unit,groupCode, commodityId, equiClass)&#xA;     }&#xA;     //SIT UNASSIGN&#xA;     else if(eventType.equals('SIT_UNASSIGN'))&#xA;     {&#xA;      eventSpecObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyCmisEventSIT&quot;);&#xA;      def appendObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;      xmlGvyData = eventSpecObj.processSitUnAssign(xmlGvyData, appendObj)&#xA;     }&#xA;     //UNIT_DISCH&#xA;     else if(eventType.equals('UNIT_DISCH'))&#xA;     {&#xA;         def unitDischObj = gvyInjtBase.getGroovyClassInstance(&quot;GvyCmisEventUnitDisch&quot;) &#xA;         xmlGvyData  = unitDischObj.processUnitDisch(xmlGvyData,equiClass,gvyInjtBase,unit)   &#xA;     }&#xA;   &#xA;     //EQUIP HOLD/RELEASE FIELD MANIPULATION&#xA;    def equipHold = gvyInjtBase.getGroovyClassInstance(&quot;GvyCmisEquipmentHoldEvents&quot;)&#xA;    xmlGvyData = equipHold.setEquipmentHoldFields(xmlGvyData,event,unit)&#xA;&#xA;   //BDC Event Mapping - A1(Find action and then update)&#xA;   if(eventType.equals(&quot;UNIT_PROPERTY_UPDATE&quot;) || eventType.equals(&quot;UNIT_REROUTE&quot;))&#xA;    {&#xA;         if(isUnitObj.equals(Boolean.TRUE) &amp;&amp; (event.wasFieldChanged('GoodsBlNbr') || event.wasFieldChanged('POD') ||  event.wasFieldChanged('Destination'))) &#xA;        {&#xA;           xmlGvyData = xmlGvyData.replace(&quot;lastAction='null'&quot;,&quot;lastAction='BDC'&quot;);&#xA;           xmlGvyData = xmlGvyData.replace(&quot;action='null'&quot;,&quot;action='BDC'&quot;) &#xA;        }&#xA;     }&#xA;    println('GvyCmisEventFeedManipulation-2') &#xA;&#xA;     }catch(Exception e){&#xA;         e.printStackTrace()&#xA;     }&#xA;     return xmlGvyData &#xA;  }&#xA;&#xA; }" />
<digital-asset id="GvyCmisUtil" short-description="GvyCmisUtil" groovy-code="import com.navis.vessel.business.operation.VesselClass&#xA;import com.navis.vessel.business.operation.VesselClassHbr&#xA;import com.navis.vessel.business.atoms.VesselTypeEnum&#xA;&#xA;public class GvyCmisUtil {&#xA;&#xA;  //Method Returns the Vessel Type [Ship/Barge]&#xA;  //Methof takes input last known Position&#xA;  private String getVesselClassType(String vesselId)    &#xA; {&#xA;   def vesselType = ''&#xA;   try&#xA;  {&#xA;    def vesselClassId = vesselId != null &amp;&amp; vesselId.length() &gt;3 ? vesselId.substring(0,3) : ''&#xA;     VesselClass vesselClass = new VesselClass()&#xA;     vesselClass = vesselClass.findVesselClassById(vesselClassId)&#xA;     VesselTypeEnum  vesselTypeEnum = vesselClass.getVesclassVesselType()&#xA;     vesselType = vesselTypeEnum.getKey()&#xA;     //println('VESSEL TYPE :'+vesselType)&#xA;   }catch(Exception e){&#xA;      e.printStackTrace()&#xA;   }&#xA;     return vesselType&#xA; }&#xA;&#xA;  //Method Returns the Vessel Type [Ship/Barge]&#xA; //Method Takes Input Vessel Cd&#xA;  private String getVesselClassForVesCode(String vesselId)    &#xA; {&#xA;   try&#xA;  {&#xA;    def vesselClassId = vesselId != null ? vesselId : ''&#xA;     VesselClass vesselClass = new VesselClass()&#xA;     vesselClass = vesselClass.findVesselClassById(vesselClassId)&#xA;      if(vesselClass != null){&#xA;         VesselTypeEnum  vesselTypeEnum = vesselClass.getVesclassVesselType()&#xA;         def vesselType = vesselTypeEnum.getKey()&#xA;         //println('VESSEL TYPE :'+vesselType)&#xA;         return vesselType&#xA;       }&#xA;    }catch(Exception e){&#xA;       e.printStackTrace()&#xA;    }&#xA;    return ''&#xA; }&#xA;&#xA; public String eventSpecificFieldValue(String xmlGvyData,String field,String newFieldValue)&#xA;{&#xA;    String newValue = null;&#xA;    String oldValue = null;&#xA;    String xmlGvyString = xmlGvyData;&#xA;    int fieldIndx = xmlGvyString.indexOf(field);&#xA;    try&#xA;   {&#xA;       if(fieldIndx != -1)&#xA;       {&#xA;         int equalsIndx = xmlGvyString.indexOf(&quot;=&quot;,fieldIndx);&#xA;         int nextspace = xmlGvyString.indexOf(&quot;'&quot;, equalsIndx+2);&#xA;         oldValue = xmlGvyString.substring(equalsIndx+2, nextspace);&#xA;&#x9;  &#xA;          if(oldValue.equals(&quot;null&quot;) ){&#xA;            newValue = newFieldValue;&#xA;          }&#xA;          else{&#xA;             //CHECK FOR VALUE HERE&#xA;             newValue = newFieldValue;&#xA;           }&#xA;           System.out.println(&quot;oldValue ::&quot;+oldValue+&quot;  newValue :::&quot;+newValue);&#xA;           String oldXmlValue = field+&quot;'&quot;+oldValue+&quot;'&quot;;&#xA;           String newXmlValue = field+&quot;'&quot;+newValue+&quot;'&quot;;&#xA;           // println(&quot;oldXmlValue ::&quot;+oldXmlValue+&quot;  newXmlValue :::&quot;+newXmlValue); &#xA;           xmlGvyString = xmlGvyString.replace(oldXmlValue, newXmlValue);&#xA;        }//IF Ends&#xA;     }catch(Exception e){&#xA;         e.printStackTrace()&#xA;     }&#xA;     return xmlGvyString;&#xA;   }// Method eventSpecificFieldValue Ends&#xA; &#xA;   public static String getFieldValues(String xmlGvyString, String field)&#xA;  {&#xA;      String fieldValue = ''&#xA;      try&#xA;     {&#xA;       def fieldIndx = xmlGvyString.indexOf(field);&#xA;       def equalsIndx = xmlGvyString.indexOf(&quot;=&quot;,fieldIndx);&#xA;       def nextspace = xmlGvyString.indexOf(&quot;'&quot;, equalsIndx+2);&#xA;       fieldValue  = xmlGvyString.substring(equalsIndx+2, nextspace);&#xA;       //println(&quot;equalsIndx:&quot;+equalsIndx+&quot;  nextspace:&quot;+nextspace+&quot; oldValue:&quot;+fieldValue);&#xA;      }catch(Exception e){&#xA;        e.printStackTrace()&#xA;     }&#xA;      return fieldValue;&#xA;   }&#xA;  &#xA;&#xA;}" />
<digital-asset id="GvyRefDataLookup" short-description="GvyRefDataLookup" groovy-code="import java.sql.Connection;&#xA;import java.sql.PreparedStatement;&#xA;import java.sql.ResultSet;&#xA;import javax.naming.Context;&#xA;import javax.naming.InitialContext;&#xA;&#xA;&#xA;class GvyRefDataLookup {&#xA;&#x9;Connection conn;&#xA;&#x9;&#xA;&#x9;public void connect() {&#xA;&#x9;&#x9;String datasource = &quot;jdbc.ds.tdp.nontx&quot;;&#xA;&#xA;&#x9;&#x9;Context ctx = null;&#xA;        Hashtable ht = new Hashtable();&#xA;        ht.put(Context.INITIAL_CONTEXT_FACTORY, &quot;weblogic.jndi.WLInitialContextFactory&quot;);&#xA;        ctx = new InitialContext(ht);&#xA;        javax.sql.DataSource ds  = (javax.sql.DataSource) ctx.lookup (datasource);&#xA;        conn = ds.getConnection();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void disconnect() {&#xA;&#x9;&#x9;if(conn != null) conn.close();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public String lookup(String key) {&#xA;&#x9;&#x9;PreparedStatement stmt = null;&#xA;&#x9;&#x9;ResultSet rs = null;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;  String sql = &quot;select value from TOS_APP_PARAMETER where key = ?&quot;;&#xA;&#x9;&#x9;  stmt = conn.prepareStatement(sql);&#xA;&#x9;&#x9;  stmt.setString(1,key);&#xA;&#x9;&#x9;  rs = stmt.executeQuery();&#xA;&#x9;      if(rs.next()) {&#xA;&#x9;    &#x9;  return rs.getString(1);&#xA;&#x9;      }&#xA;&#x9;      &#xA;&#x9;    } finally {&#xA;&#x9;    &#x9;if(stmt != null) stmt.close();&#xA;&#x9;    &#x9;if(rs != null )rs.close();&#xA;&#x9;    }&#xA;&#x9;    &#xA;&#x9;    return null;&#xA;&#x9;&#x9;  &#xA;&#x9;}&#xA;&#xA;// Code for getNowServer&#xA;                    public static String host;&#xA;&#x9;public static boolean dynamic = true;&#xA;&#x9;&#xA;&#x9;public static synchronized void initName() {&#xA;&#x9;&#x9;GvyRefDataLookup lookup = new GvyRefDataLookup();&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;lookup.connect();&#xA;&#x9;&#x9;&#x9;host = lookup.lookup(&quot;NOW_URL&quot;);&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;String dynamicString =  lookup.lookup(&quot;NOW_DYNAMIC&quot;);&#xA;&#x9;&#x9;&#x9;dynamic = Boolean.parseBoolean(dynamicString);&#xA;&#x9;&#x9;} finally {&#xA;&#x9;&#x9;&#x9;lookup.disconnect();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//println(&quot;initNowServer&quot;)&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public getNowServer() {&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if(dynamic) {&#xA;&#x9;&#x9;&#x9;initName();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;println(&quot;DEBUG getNowServer &quot;+host);&#xA;&#x9;&#x9;return host;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#xA;}" />
<digital-asset id="GvyCmisCommentNotesField" short-description="GvyCmisCommentNotesField" groovy-code="import com.navis.framework.business.Roastery&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.api.IFlagType&#xA;import com.navis.argo.business.atoms.FlagPurposeEnum&#xA;&#xA;&#xA;public class GvyCmisCommentNotesField {&#xA;&#xA; public String doIt(Object gvyEventObj, String eventType, Object gvyTxtMsgFmt, Object unitObj)    &#xA; { &#xA;    println(&quot;In Class GvyCmisCommentNotesField.doIt()&quot;)&#xA;    def u = unitObj&#xA;    def CommentCargoStatusFields = ''&#xA;    try&#xA;   { &#xA;       def groupCode = u.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;);&#xA;    &#xA;      def lkpSlot=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;      lkpSlot = lkpSlot != null ? lkpSlot : ''   &#xA;  &#xA;      def _pmdDt =u.getFieldValue(&quot;unitActiveUfv.ufvFlexDate01&quot;)    &#xA;      def strpmd = _pmdDt != null ? (''+_pmdDt) : ''&#xA;      def pmd =  strpmd.length() &gt; 10 ? strpmd.substring(8,10) : strpmd&#xA; &#xA;      def equiType=u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;)&#xA;      equiType = equiType != null ? equiType : '' &#xA;&#xA;      def _drayStatus=u.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;      def drayStatus = _drayStatus!= null ? _drayStatus.getKey() : _drayStatus&#xA; &#xA;      def reviewForStow =u.getFieldValue(&quot;unitActiveUfv.ufvFlexString01&quot;)&#xA;&#xA;     //Cargo Status  &#xA;     def cargoNotes=u.getFieldValue(&quot;unitRemark&quot;) &#xA;     cargoNotes = cargoNotes != null ? cargoNotes : ''&#xA;   cargoNotes = processCargoNotesOnEvent(gvyEventObj,eventType,cargoNotes,groupCode,lkpSlot,pmd,equiType,reviewForStow,drayStatus)&#xA;&#xA;   String cargoNotesOverFlow = '';&#xA;    if(cargoNotes.length() &gt; 65){&#xA;       int cargoNotesIndex = cargoNotes.substring(0,65).lastIndexOf(&quot; &quot;);&#xA;       cargoNotesOverFlow = cargoNotes.substring(cargoNotesIndex+1,cargoNotes.length());&#xA;       cargoNotes = cargoNotes.substring(0,cargoNotesIndex);&#xA;    }&#xA;   def cargoNotesAttr = gvyTxtMsgFmt.doIt('cargoNotes',cargoNotes.trim())&#xA;&#xA;  //CRSSTATUS &#xA;  def crsStatus = null&#xA;   if(eventType.equals(&quot;TAG_STRIP_ASSIGN&quot;) || &#xA;              (groupCode != null &amp;&amp; groupCode.equals('TS') )) {&#xA;          crsStatus = groupCode +' '+ getUnitActiveHolds(unitObj)&#xA;   }else{&#xA;         crsStatus = getUnitActiveHolds(unitObj)&#xA;   }&#xA;   def holdsApp = ''&#xA;   if(crsStatus.length() &gt; 10){  &#xA;       int commaIndex = crsStatus.substring(0,11).lastIndexOf(' ');&#xA;       holdsApp = crsStatus.substring(commaIndex+1,crsStatus.length());&#xA;       crsStatus = crsStatus.substring(0,commaIndex);&#xA;    }&#xA;    def crsStatusAttr = gvyTxtMsgFmt.doIt('crStatus',crsStatus)&#xA;    &#xA;    //Comments&#xA;    def commentValue = holdsApp.trim()+'_'+cargoNotesOverFlow.trim()&#xA;    def comments = processCommentOnEvent(commentValue,unitObj,eventType,groupCode, lkpSlot,drayStatus)&#xA;&#x9;&#x9;comments = comments != null ? comments.trim() : ''&#xA;    def commentAttr =  gvyTxtMsgFmt.doIt('comments', comments)&#xA;  &#xA;    //Save unitRemark (cargoNotes + comments)&#xA;    saveUnitRemarks(unitObj,cargoNotes,comments,holdsApp) &#xA;&#xA;    CommentCargoStatusFields = commentAttr+crsStatusAttr+cargoNotesAttr&#xA;  &#xA;   }catch(Exception e){&#xA;       e.printStackTrace()&#xA;   }&#xA;&#xA;    return CommentCargoStatusFields&#xA;&#xA;   }//doIt Ends &#xA;&#xA;   public String processCommentOnEvent(String commentData, Object unit, String eventType, String groupCd, String lkpSlot,String drayStatus)&#xA;   {   &#xA;       println(&quot;processCommentOnEvent method&quot;)&#xA;       def comment = commentData != null ? commentData : ''&#xA;&#xA;       def groupCode = groupCd != null ? groupCd : ''&#xA;       def rfsNotes =  unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString01&quot;)&#xA;       def commentFlag = comment.endsWith(&quot;_&quot;)&#xA;  &#xA;       &#xA;       //Checking on Group&#xA;        if(groupCode.equals('XFER-P2') &amp;&amp; drayStatus.equals('OFFSITE') )&#xA;       {&#xA;        comment = commentFlag ? comment+'XFR BTW P53-P2' : comment+' XFR BTW P53-P2' &#xA;&#xA;       }else if(groupCode.equals('XFER-WO') &amp;&amp; drayStatus.equals('OFFSITE'))&#xA;       {&#xA;        comment = commentFlag ? comment+'XFR BTW P53-WO' : comment+' XFR BTW P53-WO' &#xA;       }&#xA;        else if(groupCode.equals('XFER-SI') &amp;&amp; drayStatus.equals('OFFSITE'))&#xA;       {&#xA;         //Check if Unit in P2 or WO and then Update Comments &#xA;          if(lkpSlot.startsWith('WOA')){&#xA;              comment = commentFlag ? comment+'XFR BTW P53-WO' : comment+' XFR BTW P53-WO'&#xA;          }&#xA;          else if(lkpSlot.startsWith('P2')){&#xA;            comment = commentFlag ?comment+'XFR BTW P53-P2' : comment+' XFR BTW P53-P2' &#xA;          }&#xA;       }&#xA;&#xA;       //Formatting the comment&#xA;       comment = formatCommentSize(comment);&#xA;       def appendFlag = comment.startsWith(&quot;_&quot;) || comment.endsWith(&quot;_&quot;);&#xA;       comment = appendFlag ? comment.replace(&quot;_&quot;, &quot;&quot;) : comment&#xA;  &#xA;       return comment&#xA;    }&#xA;    private  String formatCommentSize(String _comment)&#xA;    {&#xA;       def commentValue = null;&#xA;       def comment = _comment;&#xA;       def  commentLen = comment.length();&#xA;       if(commentLen &gt; 65 &amp;&amp; comment.indexOf(&quot;_&quot;)!= -1)&#xA;       {&#xA;           def index = comment.indexOf(&quot;_&quot;);&#xA;           def stripCharLen = commentLen - 65;&#xA;           commentValue = comment.substring(0, index+1)+comment.substring((index+1)+stripCharLen);&#xA;       }&#xA;       else if(commentLen &gt; 65 &amp;&amp; comment.indexOf(&quot;_&quot;)== -1){&#xA;            def stripCharLen = commentLen - 65;&#xA;            commentValue = comment.substring(stripCharLen);&#xA;       }&#xA;       else{&#xA;            commentValue = comment; &#xA;       }&#xA;      return commentValue; &#xA;     }&#xA;&#xA;   private String processCargoNotesOnEvent(Object gvyEventObj,String eventType,String cargoNotesInfo,String group, String lkpSlot, String pmd,String equiType,String reviewForStow,String drayStatus)&#xA;   {  &#xA;     def groupCode = group != null ? group : ''&#xA;     def cargoNotes = cargoNotesInfo != null ? cargoNotesInfo : ''&#xA;     def eventnotes = gvyEventObj.getEvntNote()&#xA;     &#xA;      //Striping Event based Cargo Notes Information &#xA;      cargoNotes = stripCargoNotes(eventType,cargoNotes,groupCode,pmd)&#xA;&#xA;      //Appending Information  &#xA;     if((groupCode.equals('XFER-WO') || &#xA;             (groupCode.equals('XFER-SI') &amp;&amp; lkpSlot.startsWith('WOA')) ) &amp;&amp; drayStatus.equals('OFFSITE'))&#xA;     {&#xA;       if(!cargoNotes.startsWith(&quot;WEST OAHU&quot;)){   &#xA;          cargoNotes = cargoNotes != null ? 'WEST OAHU-'+cargoNotes : 'WEST OAHU'&#xA;&#x9;   }&#xA;     }&#xA;     &#xA;     if (eventType.equals('TRANSFER_CANCEL'))&#xA;     {&#xA;        cargoNotes = cargoNotes != null ? 'PDISP CANCEL '+cargoNotes : 'PDISP CANCEL '    &#xA;     }&#xA;     else if(eventType.equals('PREMOUNT_REQUEST') &amp;&amp; equiType.startsWith('R'))&#xA;     {&#xA;        cargoNotes = cargoNotes != null ? cargoNotes+' UPG-'+pmd : 'UPG-'+pmd&#xA;     }&#xA;     else if(eventType.equals('PREMOUNT_REQUEST') &amp;&amp; !equiType.startsWith('R'))&#xA;     {&#xA;         cargoNotes = cargoNotes ?cargoNotes+' PMD-'+pmd : 'PMD-'+pmd &#xA;     }&#xA;     else if(eventType.equals('REVIEW_FOR_STOW'))&#xA;     {&#xA;         cargoNotes = cargoNotes ?cargoNotes+' '+reviewForStow : reviewForStow &#xA;     }&#xA;     else if(eventType.equals('SHOP_HOLD'))   &#xA;     {&#xA;       cargoNotes = cargoNotes != null ? (eventnotes!= null ? 'TO F&amp;M-'+eventnotes+'.'+cargoNotes : 'TO F&amp;M '+cargoNotes) : (eventnotes!= null ? 'TO F&amp;M-'+eventnotes+'.' : 'TO F&amp;M ')&#xA;     }&#xA;     else if(eventType.equals('CL_HOLD'))&#xA;     {&#xA;         cargoNotes = cargoNotes != null ? (eventnotes!= null ? eventnotes+' '+cargoNotes : cargoNotes) : (eventnotes!= null ? eventnotes : '')&#xA;     }&#xA;     return cargoNotes.trim()&#xA;   }&#xA;   &#xA;   //Method Strips event specific information  &#xA;   private String stripCargoNotes(String eventType,String cargoNotes, String groupCode, String pmd)&#xA;   {   &#xA;      println(&quot;First stripCargoNotes Method&quot;)&#xA;      def stripCargoNotes = cargoNotes != null ? cargoNotes : ''&#xA;&#xA;      if(groupCode.equals('XFER-WO') || groupCode.equals('XFER-SI') || groupCode.equals('XFER-P2') ||  eventType.equals('TRANSFER_CANCEL')){&#xA;        stripCargoNotes = stripCargoNotes.replace(&quot;WEST OAHU-&quot;, &quot;&quot;) &#xA;        stripCargoNotes = stripCargoNotes.replace(&quot;WEST OAHU&quot;, &quot;&quot;)&#xA;        stripCargoNotes = stripCargoNotes.replace(&quot;XFR BTW P53-P2&quot;,&quot;&quot;);&#xA;        stripCargoNotes = stripCargoNotes.replace(&quot;XFR BTW P53-WO&quot;,&quot;&quot;);&#xA;     }&#xA;     if(eventType.equals('SHOP_RELEASE'))&#xA;     {&#xA;       stripCargoNotes = stripCargoNotes.replace(&quot;TO F&amp;M &quot;, &quot;&quot;)&#xA;       if(stripCargoNotes.indexOf(&quot;TO F&amp;M-&quot;) != -1)&#xA;       {&#xA;            stripCargoNotes = stripCargoNotes.substring(stripCargoNotes.indexOf(&quot;.&quot;)+1)&#xA;       }&#xA;     }&#xA;     else if(eventType.equals('PREMOUNT_REQUEST_CANCEL'))&#xA;     {&#xA;&#x9;&#x9; if(stripCargoNotes.indexOf(&quot;UPG-&quot;) != -1)&#xA;         stripCargoNotes = stripCargoNotes.substring(0,stripCargoNotes.indexOf(&quot;UPG-&quot;))&#xA;&#xA;         if(stripCargoNotes.indexOf(&quot;PMD-&quot;) != -1)&#xA;         stripCargoNotes = stripCargoNotes.substring(0,stripCargoNotes.indexOf(&quot;PMD-&quot;))  &#xA;     }&#xA;     else if (groupCode.equals('XFER-P2') || groupCode.equals('XFER-WO') || groupCode.equals('XFER-SI'))&#xA;     {&#xA;         stripCargoNotes = stripCargoNotes.replace(&quot;PDISP CANCEL&quot;, &quot;&quot;)&#xA;     }&#xA;     return stripCargoNotes.trim()&#xA;   }&#xA;    &#xA;&#xA;   private void saveUnitRemarks(Object unit,String cargoNotes,String comments, String holdsApp)&#xA;   {&#xA;     //CARGO NOTES &#xA;     def cargoNotesValue = cargoNotes != null ? cargoNotes : ''&#xA;     def holdsOverFlow = holdsApp != null ? holdsApp : '' &#xA;     &#xA;     //COMMENT&#xA;     def commentOverFlow = comments != null ? comments : ''&#xA;     println('holdsOverFlow :::'+holdsOverFlow.length()+&quot;      COMMENTS OVERFLOW :::::&quot;+commentOverFlow.length())&#xA;     def commentIndex = commentOverFlow.indexOf(&quot;_&quot;)&#xA;     if(commentIndex != -1)&#xA;     {&#xA;        commentOverFlow = commentOverFlow.substring(commentIndex+1) &#xA;     }&#xA;    &#xA;     if((holdsOverFlow.length() &gt; 0) &amp;&amp; (holdsOverFlow.length() == commentOverFlow.length()))&#xA;     {&#xA;          commentOverFlow = ''&#xA;     }&#xA;&#x9;&#x9; &#xA;     def unitRemark = cargoNotesValue.trim()+(commentOverFlow.trim().length() &gt; 0 ? ' '+commentOverFlow : commentOverFlow.trim()) &#xA;     println(&quot;unitRemark :::&quot;+unitRemark)&#xA;     //unit.setUnitRemark(unitRemark)&#xA;   }&#xA;&#xA;   //Method Get Active Holds for Unit&#xA;   public String getUnitActiveHolds(Object unitbase) &#xA;   {&#xA;     def map = new HashMap()      &#xA;     map.put('DRAY CANNOT LTV','')&#xA;     map.put('HOLD FOR BKG','HLD')&#xA;     map.put('CG_INSP','CG')&#xA;     map.put('OUTGATE','RD')      &#xA;&#xA;     def strBuffer = new StringBuffer()&#xA;     ServicesManager sm = (ServicesManager)Roastery.getBean(&quot;servicesManager&quot;);&#xA;     def flagIds = sm.getActiveFlagIds(unitbase);&#xA;      if (flagIds != null) {&#xA;        for(holdId in flagIds)&#xA;       {&#xA;         def  iFlageType = sm.getFlagTypeById(holdId)&#xA;         def flagPurpose =  iFlageType.getPurpose().getKey()&#xA;         if(flagPurpose.equals('HOLD')) {&#xA;             def appHoldId = map.get(holdId) != null ? map.get(holdId) : holdId &#xA;             strBuffer.append(appHoldId+' ')&#xA;             }&#xA;           }&#xA;        }&#xA;      def fmtHoldId = strBuffer != null ? (''+strBuffer).trim() : strBuffer&#xA;            fmtHoldId = orderHoldsOnPriority(fmtHoldId)&#xA;      println('FMT HOLDS ::::'+fmtHoldId)&#xA;      return fmtHoldId &#xA;   }&#xA;&#xA;  //Method Orders the Holds &#xA;  public static String orderHoldsOnPriority(String holdsArr)&#xA; {&#xA;   Map holdsMap = new LinkedHashMap();&#xA;   holdsMap.put(&quot;12&quot;,&quot;XT&quot;); holdsMap.put(&quot;11&quot;,&quot;TI&quot;); holdsMap.put(&quot;10&quot;,&quot;PER&quot;);&#xA;   holdsMap.put(&quot;9&quot;,&quot;ON&quot;); holdsMap.put(&quot;8&quot;,&quot;INB&quot;); holdsMap.put(&quot;7&quot;,&quot;GX&quot;);&#xA;   holdsMap.put(&quot;6&quot;,&quot;CG&quot;); holdsMap.put(&quot;5&quot;,&quot;RM&quot;); holdsMap.put(&quot;4&quot;,&quot;CC&quot;);&#xA;   holdsMap.put(&quot;3&quot;,&quot;HP&quot;); holdsMap.put(&quot;2&quot;,&quot;AG&quot;); holdsMap.put(&quot;1&quot;,&quot;CUS&quot;);&#xA;&#x9;   &#xA;   Iterator it = holdsMap.keySet().iterator();&#xA;   String holdsLst = holdsArr;&#xA;   println(&quot; holdsList-Actual :&quot;+holdsLst);&#xA;    while (it.hasNext()) &#xA;    {&#xA;       String holdkey = (String) it.next();&#xA;       String ahold = (String)holdsMap.get(holdkey);&#xA;     &#xA;        int holdIndex = holdsLst.indexOf(ahold);&#xA;         if(holdIndex != -1)&#xA;        {&#xA;           holdsLst = holdsLst.replace(ahold, &quot;&quot;);&#xA;           holdsLst = ahold+&quot; &quot;+holdsLst.trim();&#xA;         }&#xA;      }&#xA;       holdsLst = holdsLst.replace(&quot;    &quot;, &quot; &quot;);&#xA;       holdsLst = holdsLst.replace(&quot;   &quot;, &quot; &quot;);&#xA;       holdsLst = holdsLst.replace(&quot;  &quot;, &quot; &quot;);&#xA;      println(&quot; holdsList-Ordered :::::&quot;+holdsLst.trim());&#xA;      return holdsLst;&#xA;   }&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyCmisEventOverDimension" short-description="GvyCmisEventOverDimension" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;&#xA;public class GvyCmisEventOverDimension{&#xA; &#xA;  def ACTION = &quot;action='null'&quot;&#xA;  def LAST_ACTION = &quot;lastAction='null'&quot;&#xA;&#xA;  //UNIT_DIMENSION_UPDATE  &#xA;  public String getUnitDimensionUpdate(String xmlGvyData,Object event,Object unit)&#xA;  {&#xA;     def  xmlGvyString = xmlGvyData&#xA;     try&#xA;    {&#xA;       def outOfGauge  = unit.getFieldValue(&quot;unitIsOog&quot;); &#xA; &#xA;        if( (event.wasFieldChanged('OOGFront') || event.wasFieldChanged('OOGBack') ||&#xA;           event.wasFieldChanged('OOGTop') || event.wasFieldChanged('OOGLeft') ||  &#xA;           event.wasFieldChanged('OOGRight')) &amp;&amp; outOfGauge.equals(Boolean.FALSE) )&#xA;        {&#xA;            xmlGvyString = xmlGvyString.replace(LAST_ACTION,&quot;lastAction='OVD'&quot;);&#xA;            xmlGvyString = xmlGvyString.replace(ACTION,&quot;action='OVD'&quot;) &#xA;         }&#xA;     }catch(Exception e){&#xA;        e.printStackTrace()&#xA;     }&#xA;&#xA;     return xmlGvyString;&#xA;   }&#xA;&#xA;   //MAP ACTION EDT&#xA;   public String getCmisActionEDT(String xmlGvyData, Object appendObj)&#xA;  {&#xA;    def  xmlGvyString = xmlGvyData&#xA;    try&#xA;   {&#xA;      def action = appendObj.getFieldValues(xmlGvyString, &quot;action=&quot;);&#xA;      def lastaction = appendObj.getFieldValues(xmlGvyString, &quot;lastAction=&quot;);&#xA;      def actionOld = &quot;action='&quot;+action+&quot;'&quot;;&#xA;      def lastActionOld = &quot;lastAction='&quot;+lastaction+&quot;'&quot; &#xA;&#xA;      xmlGvyString = xmlGvyString.replace(lastActionOld,&quot;lastAction='EDT'&quot;);&#xA;      xmlGvyString = xmlGvyString.replace(actionOld,&quot;action='EDT'&quot;) &#xA;&#xA;   }catch(Exception e){&#xA;       e.printStackTrace()&#xA;   }&#xA;&#xA;    return xmlGvyString;&#xA;   }&#xA;&#xA; }//Class Ends" />
<digital-asset id="GvyCmisEventFructoseMty" short-description="GvyCmisEventFructoseMty" groovy-code="public class GvyCmisEventFructoseMty{&#xA;&#xA;  def ACTION = &quot;action='null'&quot;&#xA;  def LAST_ACTION = &quot;lastAction='null'&quot;&#xA;&#xA;  public String getOGT(String xmlGvyData)&#xA;  {&#xA;    def  xmlGvyString = xmlGvyData&#xA;    try{&#xA;        def truck = getFieldValues(xmlGvyString, &quot;truck=&quot;);&#xA;        def truckOld = &quot;truck='&quot;+truck+&quot;'&quot;;&#xA;        xmlGvyString = xmlGvyString.replace(truckOld,&quot;truck='ZZZZ'&quot;);&#xA;        xmlGvyString = xmlGvyString.replace(LAST_ACTION,&quot;lastAction='OGT'&quot;);&#xA;         xmlGvyString = xmlGvyString.replace(ACTION,&quot;action='OGT'&quot;)&#xA;         println('&lt;&lt;&lt;&lt;&lt;OGT&gt;&gt;&gt;&gt;&gt;&gt;&gt;'+xmlGvyString)&#xA;&#xA;     }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    } &#xA;&#xA;    return xmlGvyString&#xA;  }&#xA;   &#xA;   public String getIGT(String xmlGvyData,Object unit)&#xA;  {&#xA;    def  xmlGvyString = xmlGvyData&#xA;    try{&#xA;    def commodityId=unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;)&#xA;    def commodity = commodityId != null ? commodityId : ''&#xA;    def lineOperator=unit.getFieldValue(&quot;unitLineOperator.bzuId&quot;)&#xA;&#xA;    def cargoNotes = getFieldValues(xmlGvyString, &quot;cargoNotes=&quot;);&#xA;    def locationRow = getFieldValues(xmlGvyString, &quot;locationRow=&quot;);&#xA;    def truck = getFieldValues(xmlGvyString, &quot;truck=&quot;);&#xA;    def action = getFieldValues(xmlGvyString, &quot;action=&quot;);&#xA;    def lastAction = getFieldValues(xmlGvyString, &quot;lastAction=&quot;);&#xA;   &#xA;    def cargoNotesOld = &quot;cargoNotes='&quot;+cargoNotes+&quot;'&quot;;&#xA;    def locationRowOld = &quot;locationRow='&quot;+locationRow+&quot;'&quot;;&#xA;    def truckOld = &quot;truck='&quot;+truck+&quot;'&quot;;&#xA;    def actionOld = &quot;action='&quot;+action+&quot;'&quot;;&#xA;    def lastActionOld = &quot;lastAction='&quot;+lastAction+&quot;'&quot;; &#xA;&#xA;    xmlGvyString = xmlGvyString.replace(cargoNotesOld,&quot;cargoNotes='&quot;+commodity+&quot;'&quot;);&#xA;    xmlGvyString = xmlGvyString.replace(locationRowOld,&quot;locationRow='&quot;+lineOperator+&quot;'&quot;);&#xA;    xmlGvyString = xmlGvyString.replace(truckOld,&quot;truck='ZZZZ'&quot;);&#xA;    xmlGvyString = xmlGvyString.replace(lastActionOld,&quot;lastAction='IGT'&quot;);&#xA;    xmlGvyString = xmlGvyString.replace(actionOld,&quot;action='IGT'&quot;) &#xA;    xmlGvyString = xmlGvyString.replace(&quot;msgType='UNIT_ROLL'&quot;,&quot;msgType='FRUCTOSE_MTY'&quot;)&#xA;    println('&lt;&lt;&lt;&lt;&lt;IGT&gt;&gt;&gt;&gt;&gt;&gt;&gt;'+xmlGvyString)&#xA;   &#xA;     }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    }     &#xA;&#xA;    return xmlGvyString&#xA;  }&#xA;&#xA;  public String getEDT(String xmlGvyData)&#xA;  {&#xA;    def  xmlGvyString = xmlGvyData&#xA;    try&#xA;    { &#xA;       def truck = getFieldValues(xmlGvyString, &quot;truck=&quot;);&#xA;       def dir = getFieldValues(xmlGvyString, &quot;dir=&quot;);&#xA;       def truckOld = &quot;truck='&quot;+truck+&quot;'&quot;;&#xA;&#xA;       xmlGvyString = xmlGvyString.replace(truckOld,&quot;truck='null'&quot;);&#xA;       xmlGvyString = xmlGvyString.replace(&quot;lastAction='IGT'&quot;,&quot;lastAction='EDT'&quot;);&#xA;       xmlGvyString = xmlGvyString.replace(&quot;action='IGT'&quot;,&quot;action='EDT'&quot;)&#xA;       xmlGvyString = xmlGvyString.replace(&quot;msgType='UNIT_ROLL'&quot;,&quot;msgType='FRUCTOSE_MTY'&quot;)&#xA;      println('&lt;&lt;&lt;&lt;&lt;EDT&gt;&gt;&gt;&gt;&gt;&gt;&gt;'+xmlGvyString)&#xA;&#xA;    }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    }   &#xA;    return xmlGvyString&#xA;  }&#xA;&#xA;  public String getYMV(String xmlGvyData, Object utilObj)&#xA;  {&#xA;    def  xmlGvyString = xmlGvyData&#xA;    try&#xA;   {&#xA;     xmlGvyString = utilObj.addEventSpecificFldValue(xmlGvyString,&quot;lastAction=&quot;,&quot;YMV&quot;,null,null,null); &#xA;     xmlGvyString = utilObj.addEventSpecificFldValue(xmlGvyString,&quot;action=&quot;,&quot;YMV&quot;,null,null,null); &#xA;     xmlGvyString = utilObj.addEventSpecificFldValue(xmlGvyString,&quot;msgType=&quot;,&quot;FRUCTOSE_MTY&quot;,null,null,null); &#xA;     println('&lt;&lt;&lt;&lt;&lt;YMV&gt;&gt;&gt;&gt;&gt;&gt;&gt;'+xmlGvyString)&#xA;&#xA;   }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    }&#xA;   &#xA;    return xmlGvyString&#xA;  }&#xA;&#xA;   public static String getFieldValues(String xmlGvyString, String field)&#xA;   {&#xA;      def fieldIndx = xmlGvyString.indexOf(field);&#xA;      def equalsIndx = xmlGvyString.indexOf(&quot;=&quot;,fieldIndx);&#xA;      def lastChar = xmlGvyString.indexOf(&quot;'&quot;, equalsIndx+2);&#xA;      String fieldValue  = xmlGvyString.substring(equalsIndx+2, lastChar);&#xA;      println(&quot;equalsIndx:&quot;+equalsIndx+&quot;  lastChar:&quot;+lastChar+&quot; oldValue:&quot;+fieldValue);&#xA;      return fieldValue;&#xA;   } &#xA;}" />
<digital-asset id="GvyInjAupd" short-description="ACETS UPD process" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.atoms.DataSourceEnum;&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.argo.ArgoBizMetafield&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.argo.business.api.IBizUnitManager&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.argo.business.reference.Equipment;&#xA;import com.navis.argo.business.reference.Accessory;&#xA;import com.navis.inventory.business.units.EquipmentState;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;import com.navis.inventory.business.api.UnitFinder;&#xA;&#xA;class GvyInjAupd extends GroovyInjectionBase {&#xA;&#x9;public String execute(Map inParameters) {&#xA;&#xA;&#x9;def gvyBaseClass = new GroovyInjectionBase();&#xA;&#x9;def eqId = (String) inParameters.get(&quot;equipment-id&quot;);&#xA;&#x9;def typeCodeUpd = (String) inParameters.get( &quot;typeCode&quot;);&#xA;&#x9;def primCarrierUpd = (String) inParameters.get( &quot;primCarrier&quot;);&#xA;&#x9;def primControllerUpd = (String) inParameters.get( &quot;primController&quot;);&#xA;&#x9;def acetsMsgType = (String) inParameters.get( &quot;acetsMsgType&quot;);&#xA;&#xA;&#x9;def gvyEquipmentLookup = gvyBaseClass.getGroovyClassInstance(&quot;GvyEquipmentLookup&quot;);&#xA;&#xA;log(&quot;Eqid=&quot;+eqId);&#xA;def equipment =  gvyEquipmentLookup.getEquipment( eqId);&#xA;//def equipment =  Equipment.findEquipment(eqId);&#xA;log(&quot;eq=&quot;+equipment);&#xA;&#xA;if ( equipment == null) {&#xA;&#x9;fail( &quot;ERR_GVY_UPD_001. Could not find equipment: &quot; + eqId);&#xA;}&#xA;&#xA;equipment.upgradeEqType( typeCodeUpd, DataSourceEnum.USER_DBA);&#xA;&#xA;def eqs = EquipmentState.findEquipmentState(equipment, ContextHelper.getThreadOperator());&#xA;if ( eqs == null) {&#xA;&#x9;fail( &quot;ERR_GVY_UPD_002.Could not find equipment state for: &quot; + eqId);&#xA;}&#xA;&#xA;&#x9;def bzu = null;&#xA;&#xA;&#x9;bzu = ScopedBizUnit.findScopedBizUnit( primControllerUpd, BizRoleEnum.LEASINGCO);&#xA;&#x9;if ( bzu == null) {&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_UPD_003. Can not find leasing company: &quot; + primControllerUpd + &quot; in N4.&quot;);&#xA;&#x9;}&#xA;&#xA;&#x9;//def bzu = ScopedBizUnit.findOrCreateLeasingCompany( primControllerUpd);&#xA;&#x9;IBizUnitManager bum = (IBizUnitManager)Roastery.getBean(&quot;bizUnitManager&quot;);&#xA;  //ScopedBizUnit bzu = ScopedBizUnit.hydrate((Serializable)inFieldValue);&#xA;&#xA;  bum.upgradeEqOwner( equipment, bzu, ContextHelper.getThreadDataSource());&#xA;&#xA;&#x9;// update primary carrier&#xA;&#x9;bzu = ScopedBizUnit.findScopedBizUnit( primCarrierUpd, BizRoleEnum.LINEOP);&#xA;&#x9;if ( bzu == null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;fail( &quot;ERR_GVY_UPD_004. Can not find line operator: &quot; + primCarrierUpd + &quot; in N4.&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;def ufv;&#xA;&#x9;&#x9;def unit;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;def uf = (UnitFinder)Roastery.getBean(&quot;unitFinder&quot;);&#xA;&#x9;&#x9;&#x9;def facility = getFacility();&#xA;      unit = uf.findActiveUnit(facility.getFcyComplex(), equipment);&#xA;&#x9;&#x9;} catch ( Exception ex) {&#xA;&#x9;&#x9;&#x9;fail( &quot; ERR_GVY_UPD_005. Could not find unit: &quot; + eqId);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if ( unit == null) {&#xA;&#x9;&#x9;&#x9;fail( &quot; ERR_GVY_UPD_005. Could not find unit: &quot; + eqId);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if ( UnitCategoryEnum.STORAGE.equals(unit.getUnitCategory())) {&#xA;&#x9;&#x9;&#x9;bum.upgradeEqOperator( equipment, bzu, ContextHelper.getThreadDataSource());&#xA;&#xA;&#x9;&#x9;&#x9;def primEq = unit.getPrimaryEq();&#xA;&#x9;&#x9;&#x9;if ( primEq.equals( equipment)) {&#xA;&#x9;&#x9;&#x9;&#x9;log( &quot;eq is primary eq.&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;unit.updateLineOperator( bzu);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;def event = new GroovyEvent( null, unit);&#xA;&#x9;event.postNewEvent( &quot;UPU&quot;);&#xA;&#xA;}&#xA;}" />
<digital-asset id="GvyCmisEventHazards" short-description="GvyCmisEventHazards" groovy-code="import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.services.business.event.EventFieldChange&#xA;&#xA;&#xA;public class GvyCmisEventHazards&#xA;{&#xA; &#xA; public synchronized String createHazMessage(Object event, Object gvyBaseClass, String xmlGvyData)&#xA; {&#xA;  def hazImdg = ''&#xA;  def hazUnNum = ''&#xA;  def prev  = ''&#xA;  def gvyEventObj = event.getEvent()&#xA;  def unit = event.getEntity()&#xA;  def eventType =  gvyEventObj.getEventTypeId() &#xA;  def xmlGvyString = xmlGvyData&#xA;&#xA;  try&#xA;  {&#x9;  &#xA;&#xA;   Set changes =  gvyEventObj.getFieldChanges()&#xA;   Iterator iterator = changes.iterator();&#xA;   while(iterator.hasNext()) &#xA;   {&#xA;     println('Inside While loop :')&#xA;     EventFieldChange fieldChange = (EventFieldChange)iterator.next();&#xA;     String fieldName = fieldChange.getMetafieldId()&#xA;     MetafieldId mfId =  MetafieldIdFactory.valueOf(fieldName);&#xA;     if(eventType.equals('UNIT_HAZARDS_INSERT')){&#xA;        prev = ArgoUtils.getPropertyValueAsUiString(mfId, fieldChange.getEvntfcNewVal());&#xA;    }else{&#xA;         prev = ArgoUtils.getPropertyValueAsUiString(mfId, fieldChange.getEvntfcPrevVal()); &#xA;    } &#xA;     println('mfId :'+mfId+'   prev:'+prev)&#xA;     if (prev != null){&#xA;       if(fieldName.equals(&quot;hzrdiImdgClass&quot;)){ &#xA;          println(&quot;prev :::&quot;+prev+&quot;  fieldName  ::&quot;+fieldName)  &#xA;          String [] imdg  = prev.split(&quot; &quot;) &#xA;          hazImdg = imdg != null ? imdg[0] : ''       &#xA;       }&#xA;       else if(fieldName.equals(&quot;hzrdiUNnum&quot;)){&#xA;         println(&quot;prev :::&quot;+prev+&quot;  fieldName  ::&quot;+fieldName)         &#xA;          hazUnNum = prev        &#xA;       }&#xA;     }&#xA;   }&#xA;   &#xA;   def utilObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);  &#xA;   xmlGvyString = utilObj.eventSpecificFieldValue(xmlGvyString,&quot;hazImdg=&quot;,hazImdg)&#xA;   xmlGvyString = utilObj.eventSpecificFieldValue(xmlGvyString,&quot;hazUnNum=&quot;,hazUnNum)      &#xA;&#xA;   //MSG FOR ACETS&#xA;   def xmlGvyAcetsMsg = xmlGvyString&#xA;   if(eventType.equals('UNIT_HAZARDS_INSERT')){&#xA;      xmlGvyAcetsMsg = xmlGvyAcetsMsg.replace(&quot;lastAction='null'&quot;,&quot;lastAction='HZU'&quot;);&#xA;      xmlGvyAcetsMsg = xmlGvyAcetsMsg.replace(&quot;action='null'&quot;,&quot;action='HZU'&quot;) &#xA;   }&#xA;   else{&#xA;      xmlGvyAcetsMsg = xmlGvyAcetsMsg.replace(&quot;lastAction='null'&quot;,&quot;lastAction='HZD'&quot;);&#xA;      xmlGvyAcetsMsg = xmlGvyAcetsMsg.replace(&quot;action='null'&quot;,&quot;action='HZD'&quot;)    &#xA;   }&#xA;&#xA;  gvyBaseClass.sendXml(xmlGvyAcetsMsg)&#xA;  gvyBaseClass.sendXml(xmlGvyString) &#xA;&#xA;  }catch(Exception e){&#xA;      e.printStackTrace() &#xA;  }&#xA;&#xA;  return xmlGvyString&#xA;}&#xA;&#xA;   public synchronized String updateHazardousMsg(Object event, Object gvyBaseClass, String xmlGvyData)&#xA;  {&#xA;      def gvyEventObj = event.getEvent()&#xA;      def eventNotes = gvyEventObj.getEventNote()&#xA;      def updtImdg = ''&#xA;      def updtUNnum = '' &#xA;      def xmlGvyString = xmlGvyData&#xA;     try&#xA;    {&#xA;        if(eventNotes != null){&#xA;          def startIndex = eventNotes.indexOf(&quot;[&quot;) != -1 ? eventNotes.indexOf(&quot;[&quot;) : 0&#xA;          def endIndex = eventNotes.indexOf(&quot;]&quot;) != -1 ? eventNotes.indexOf(&quot;]&quot;) : 0&#xA;          updtImdg = eventNotes.substring(startIndex+1,endIndex)&#xA;        }&#xA;&#xA;        if(eventNotes != null){&#xA;            String[] eventString = eventNotes.split(&quot; &quot;);&#xA;            int length = eventString.length;&#xA;             updtUNnum = eventString[length -1];&#xA;         }&#xA;&#xA;       def utilObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);  &#xA;       xmlGvyString = utilObj.eventSpecificFieldValue(xmlGvyString,&quot;hazImdg=&quot;,updtImdg)&#xA;       xmlGvyString = utilObj.eventSpecificFieldValue(xmlGvyString,&quot;hazUnNum=&quot;,updtUNnum)      &#xA;&#xA;       //MSG FOR ACETS&#xA;       def xmlGvyAcetsMsg = xmlGvyString&#xA;       xmlGvyAcetsMsg = xmlGvyAcetsMsg.replace(&quot;lastAction='null'&quot;,&quot;lastAction='HZU'&quot;);&#xA;       xmlGvyAcetsMsg = xmlGvyAcetsMsg.replace(&quot;action='null'&quot;,&quot;action='HZU'&quot;) &#xA;&#xA;       gvyBaseClass.sendXml(xmlGvyAcetsMsg)&#xA;       gvyBaseClass.sendXml(xmlGvyString) &#xA;&#xA;       return  xmlGvyString&#xA;&#xA;     }catch(Exception e){&#xA;        e.printStackTrace()&#xA;     }&#xA;&#xA;  }&#xA;&#xA;}&#xA;" />
<digital-asset id="TestEvent" short-description="TestEvent" groovy-code="import com.navis.services.business.event.*&#xA;import com.navis.argo.business.api.Serviceable;&#xA;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.atoms.LogicalEntityEnum&#xA;import com.navis.services.business.rules.*&#xA;import com.navis.argo.business.api.IFlagType&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.inventory.business.units.Unit&#xA;&#xA;&#xA;public class TestEvent{&#xA;    &#xA; public String getMostRecentEvent(String inEventId, Object unit)&#xA; {      &#xA;      println(&quot;&lt;&lt;&lt;getMostRecentEvent &gt;&gt;&gt; ::: &quot;)         &#xA;      EventType eventType = EventType.findEventType(inEventId);         &#xA;      if (eventType == null) {                                          &#xA;         println(&quot;&lt;&lt;&lt;EVENT TYPE IS NULL&gt;&gt;&gt;&quot;)&#xA;          return null;                                                  &#xA;      }                                                                 &#xA;      EventManager sem = (EventManager)Roastery.getBean(&quot;eventManager&quot;);&#xA;      List events = sem.getEventHistory(eventType, unit);       &#xA;       if (events.isEmpty()) {                                           &#xA;            return null;                                                  &#xA;       } else {                                                          &#xA;           Event eventObj = (Event)events.get(0);   &#xA;           def eventTypeMsg = eventObj.getEventTypeId()&#xA;          println(&quot;&lt;&lt;&lt;EVENT TYPE &gt;&gt;&gt; ::: &quot;+eventTypeMsg)&#xA;           return eventTypeMsg&#xA;        }                                                                 &#xA;  }&#xA;  &#xA; public Object getActiveUfvUnit(Object unit)&#xA; {&#xA;    println('&lt;&lt;&lt;getActiveUfvUnit-1&gt;&gt;&gt;')&#xA;    GroovyInjectionBase  injBase = new GroovyInjectionBase()&#xA;    def facility = injBase.getFacility();&#xA;    println('&lt;&lt;&lt;getActiveUfvUnit-2&gt;&gt;&gt;::: '+facility)&#xA;    def activeUfv = unit.getUfvForFacilityLiveOnly(facility) &#xA;    println('&lt;&lt;&lt;getActiveUfvUnit-3&gt;&gt;&gt;::: '+activeUfv)&#xA;    return activeUfv&#xA;  } &#xA;&#xA;  public Object getHoldAppliesToClass(String aHold)&#xA; {&#xA;    ServicesManager sm = (ServicesManager)Roastery.getBean(&quot;servicesManager&quot;);&#xA;    IFlagType iflagType =  sm.getFlagTypeById(aHold)&#xA;    LogicalEntityEnum logicalEnum = iflagType.getFlgtypAppliesTo()&#xA;   if(logicalEnum instanceof Unit) {&#xA;       println(&quot;Print 123 &quot;) &#xA;   }&#xA;  else{&#xA;    println(&quot;Print 456&quot;) &#xA;  }&#xA;&#xA; }                                                                    &#xA;                                                      &#xA;&#xA;&#xA;}" />
<digital-asset id="GvyVesselLookup" short-description="GvyVesselLookup" groovy-code="import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import java.util.Iterator;&#xA;import java.util.Collection;&#xA;import com.navis.vessel.VesselField;&#xA;import com.navis.vessel.business.atoms.VesselTypeEnum;&#xA;import com.navis.argo.ArgoField;&#xA;&#xA;public class GvyVesselLookup {&#xA;&#xA;public boolean isBarge(String id) {&#xA;    def type = lookupType(id);&#xA;    if(type != null &amp;&amp; type.equals(VesselTypeEnum.BARGE)) {&#xA;       return true;&#xA;    }&#xA;    return false;&#xA;}&#xA;&#xA;// Lookup a vessel type by vessel id.&#xA;// Returns a com.navis.vessel.VesselField.VesselTypeEnum;&#xA;public Object lookupType(String id) {&#xA;   //Example IDs&#xA;   // def id = &quot;ALE&quot;;&#xA;   //def id = &quot;MHI&quot;;&#xA;&#xA;   try {&#xA;      DomainQuery dq = QueryUtils.createDomainQuery(&quot;VesselClass&quot;);&#xA;&#x9;&#x9;&#xA;      dq.addDqPredicate(PredicateFactory.eq(VesselField.VESCLASS_ID,id ));     &#xA;      def list = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#xA;      if(list != null) {&#xA;         Iterator iter = list.iterator();&#xA;         while(iter.hasNext()) {&#xA;             def item = iter.next();&#xA;            // println(&quot;type=&quot;+item.getFieldValue(&quot;Type&quot;));&#xA;             return item.getFieldValue(&quot;vesclassVesselType&quot;);&#xA;             // Possible values are&#xA;            VesselTypeEnum.CELL // Containership&#xA;            VesselTypeEnum.BARGE // Barge&#xA;        }&#xA;   }&#xA;  &#xA; &#xA;   return null;&#xA;   } catch (Exception e) {&#xA;      println(&quot;Exception in Vessel Type lookup  &quot;+e.getMessage());&#xA;      e.printStackTrace();&#xA;   }&#xA;&#xA;   return null;&#xA;  }&#xA;&#xA;&#xA;  public Object getCarrierVisit(String id) {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(&quot;CarrierVisit&quot;);&#x9;&#xA;        dq.addDqPredicate(PredicateFactory.eq(ArgoField.CV_ID,id ));    &#xA;        def list = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;        if(list != null &amp;&amp; list.size() &gt; 0) return list.get(0);&#xA;        return null;&#xA;  }&#xA;}" />
<digital-asset id="GvyCmisEventUnitOutGate" short-description="GvyCmisEventUnitOutGate" groovy-code="import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import  com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;&#xA; &#xA;public class GvyCmisEventUnitOutGate&#xA;{&#xA;  public void processOutGate(Object event, Object api)&#xA;  {&#xA;    def unit = event.getEntity()&#xA;    try&#xA;   {&#xA;       def groupCode = unit.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;)&#xA;       groupCode = groupCode != null ? groupCode : ''&#xA;&#xA;       def _drayStatus=unit.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;       def drayStatus = _drayStatus!= null ? _drayStatus.getKey() : _drayStatus&#xA; &#xA;         if(drayStatus.equals('OFFSITE'))&#xA;        {&#xA;           def unitId=unit.getFieldValue(&quot;unitGkey&quot;)&#xA;           println(&quot;!!!!!!!!!!Dray Out &quot;+unitId)&#xA;           //Thread.sleep(100000);&#xA;           //&#xA;           def unitDetails = api.getGroovyClassInstance(&quot;GvyUnitLookup&quot;)&#xA;           println(&quot;Lookup Unit&quot;)&#xA;           def visit = unitDetails.lookupFacility(unitId)&#xA;&#xA;           if(visit != null) &#xA;          {&#xA;             visit.setFieldValue(&quot;ufvTransitState&quot;, com.navis.inventory.business.atoms.UfvTransitStateEnum.S20_INBOUND)&#xA;             visit.setFieldValue(&quot;ufvVisitState&quot;, com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE)&#xA;             if(groupCode.equals('XFER-WO')){&#xA;                unit.setFieldValue(&quot;unitActiveUfv&quot;, visit)&#xA;             }&#xA;             println(&quot;Make Inbound!!!!!!!!!!!!!!!!!!!!!!!&quot;)&#xA;          } &#xA;           else &#xA;          {&#xA;           println(&quot;Inbound lookup failed!!!!!!!!!!!!!!!!!!!!!!!&quot;)&#xA;           }&#xA;        } //Dray status Filter Ends &#xA;   }catch(Exception e){&#xA;     e.printStackTrace()&#xA;   }&#xA;&#xA;  }//Method doIt Ends&#xA;&#xA;&#xA;}//Class Ends&#xA;" />
<digital-asset id="GvyCmisEventUnitDisch" short-description="GvyCmisEventUnitDisch" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;&#xA;public class GvyCmisEventUnitDisch&#xA;{&#xA;&#xA;   public String processUnitDisch(String xmlGvyData,String equipClass,Object gvyBaseClass, Object unit)&#xA;   {&#xA;     println(&quot;GvyCmisEventUnitDisch.processUnitDisch()&quot;)&#xA;     def xmlGvyString = xmlGvyData;&#xA;     try&#xA;     {&#xA;         def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;) &#xA;         def vesselCd =  unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdVessel.vesId&quot;); &#xA;         println('UNIT_DISCH_vesselCd::'+vesselCd) &#xA;         vesselCd = vesselCd != null ? vesselCd : ''    &#xA;&#x9; &#xA;         if(equipClass.equals('CHASSIS')){&#xA;             //dischChassis&#xA;             return xmlGvyString&#xA;         }&#xA;         else if(equipClass.equals('CONTAINER')){&#xA;            def vesselType = gvyCmisUtil.getVesselClassForVesCode(vesselCd)&#xA;            vesselType = vesselType != null ? vesselType : ''&#xA;&#xA;          if(vesselType.equals('CELL')){&#xA;            xmlGvyString = dischLongHual(xmlGvyString,gvyCmisUtil,unit)&#xA;          }&#xA;          else if(vesselType.equals('BARGE')){&#xA;            xmlGvyString = dischBarge(xmlGvyString,gvyCmisUtil,unit) &#xA;         }&#xA;         println('Completed Disch:: ')&#xA;          return xmlGvyString&#xA;         }//Else if&#xA;&#xA;      }//try Ends&#xA;     catch(Exception e){&#xA;            e.printStackTrace();&#xA;     }&#xA;      &#xA;       return xmlGvyString&#xA;   }//processUnitDisch Ends&#xA;&#xA;   public void dischChassis()&#xA;   {&#xA;   }&#xA;&#xA;  &#xA;   private String dischLongHual(String xmlGvyData,Object gvyCmisUtil, Object unit)&#xA;   {&#xA;       def xmlGvyString = xmlGvyData;&#xA;       def freightkind=unit.getFieldValue(&quot;unitFreightKind&quot;)&#xA;       freightkind = freightkind != null ? freightkind.getKey() : ''&#xA;       println('dischLongHual  Freight Kind:: '+freightkind)&#xA;      //FREIGHT KIND EMPTY &#xA;      if(freightkind.equals('MTY')){&#xA;         xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;vesvoy=&quot;,&quot;null&quot;)&#xA;         xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dPort=&quot;,&quot;OPT&quot;) &#xA;         xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dischargePort=&quot;,&quot;OPT&quot;)         &#xA;         xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;loadPort=&quot;,&quot;null&quot;) &#xA;         xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dsc=&quot;,&quot;null&quot;) &#xA;     }      &#xA;     return xmlGvyString&#xA;   }&#xA;&#xA;   private String dischBarge(String xmlGvyData,Object gvyCmisUtil,Object unit)&#xA;   {&#xA;       def xmlGvyString = xmlGvyData;&#xA;       println('dischBarge :: ')&#xA;      try&#xA;     {&#xA;       def ds = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;ds=&quot;);&#xA;       def dir = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;dir=&quot;);&#xA;       def vesvoy = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;vesvoy=&quot;);&#xA;       def loadport = unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;)&#xA;       loadport = loadport != null ? loadport : '' &#xA;  &#xA;       if(ds.equals('AUT')){&#xA;          xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;shipper=&quot;,&quot;AUTO&quot;)&#xA;          xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;comments=&quot;,&quot;null&quot;)&#xA;       }&#xA;      else if(dir.equals('MTY')){&#xA;           xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dPort=&quot;,&quot;null&quot;)&#xA;           xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dsc=&quot;,&quot;null&quot;)&#xA;           xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;comments=&quot;,&quot;null&quot;)&#xA;        }&#xA;       else{&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;comments=&quot;,&quot;null&quot;) &#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;commodity=&quot;,&quot;null&quot;)   &#xA;        }&#xA;&#xA;        if(loadport.equals('HIL') || loadport.equals('NAW') || loadport.equals('KAH') &#xA;&#x9;&#x9;    || loadport.equals('KHI'))&#xA;        {&#xA;               xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;shipper=&quot;,loadport)&#xA;         }else{&#xA;               xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;shipper=&quot;,vesvoy)&#xA;          }&#xA;        &#xA;       //Do we need to set this &#xA;        xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;actualVessel=&quot;,&quot;null&quot;) &#xA;        xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;actualVoyage=&quot;,&quot;null&quot;) &#xA;     }&#xA;     catch(Exception e){&#xA;           e.printStackTrace() &#xA;     }&#x9;&#x9;  &#xA;     &#xA;     return xmlGvyString&#xA;  }//DischBarge Ends&#xA;&#xA;&#xA;}" />
<digital-asset id="GvyCmisEventUnitDeliver" short-description="GvyCmisEventUnitDeliver" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;&#xA;public class GvyCmisEventUnitDeliver{&#xA; &#xA;  //Event UNIT_DELIVER Condition&#xA;  /*&#xA;  For outgate events, set the CMIS action as follows:&#xA;  1] Regular HON outgate ? OGC&#xA;  2] Transfer to P2/SI/WO ? OGT (group = XFER*; dray status = dray out and back)&#xA;  3] SIT ? OGC (commodity = SIT; dray status = dray out and back)&#xA;  4] YB ? OGA (group =  YB; dray status = transfer to other facility)&#xA;  5] MDA ? OGF (MDA hold on equipment) // Only MDA HOLD Left&#xA;  6] Mty with booking number ? OGS&#xA;  7] Outgate chassis only - OGP&#xA;  */&#xA;&#xA;  def ACTION = &quot;action='null'&quot;&#xA;  def LAST_ACTION = &quot;lastAction='null'&quot;&#xA;&#xA;&#xA;  public String processUnitDeliver(String xmlGvyData,String eventType,Object unit,&#xA;                                        String group, String commodity, String equiClass)&#xA;  {&#xA;     def  xmlGvyString = xmlGvyData&#xA;     try&#xA;    {&#xA;         def holdsList = unit.getFieldValue(&quot;unitAppliedHoldOrPermName&quot;)&#xA;         holdsList = holdsList != null ? holdsList : ''&#xA;&#xA;        def gvyBaseClass = new GroovyInjectionBase()&#xA;        def eventSpecObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;&#xA;        //Mapping Cmis Action for OUT_GATE Event&#xA;        if(eventType.equals('UNIT_DELIVER'))&#xA;       {&#xA;           getUnitDeliver(xmlGvyString,unit,group,commodity,equiClass,eventSpecObj,holdsList)     &#xA;        }//Out Gate Mapping Ends&#xA;&#xA;   }catch(Exception e){&#xA;     e.printStackTrace()&#xA;   }&#xA;   &#xA;   return xmlGvyString&#xA;  } //ProcessActionMapping Ends&#xA;&#xA;&#xA;    &#xA;   //UNIT_DELIVER&#xA;   private String getUnitDeliver(String xmlGvyData,Object unit,String group, &#xA;&#x9;                                     String commodity, String equiClass, Object eventSpecObj,String holdsList)&#xA;   {&#xA;     def xmlGvyString = xmlGvyData   &#xA;&#xA;     def _drayStatus=unit.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;     String drayStatus = _drayStatus!= null ? _drayStatus.getKey() : ''&#xA;          &#xA;     def _freightkind=unit.getFieldValue(&quot;unitFreightKind&quot;)&#xA;     def freightkindKey = _freightkind != null ? _freightkind.getKey() : ''&#xA;&#xA;     def facilityId = unit.getFieldValue(&quot;unitActiveUfv.ufvFacility.fcyId&quot;)&#xA;     facilityId = facilityId != null ? facilityId : ''&#xA;     &#xA;     def bookingNumber = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;);&#xA;     def obTruckId =unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.carrierOperatorId&quot;)&#xA;&#x9;  &#xA;      //Assigning the outgate trucker Id&#xA;      xmlGvyString = eventSpecObj.addEventSpecificFldValue(xmlGvyString,&quot;truck=&quot;,obTruckId,null,null,null);  &#xA;&#x9;  &#xA;      //CHASSIS&#xA;      if(equiClass.equals('CHASSIS'))&#xA;      {  &#xA;         xmlGvyString = xmlGvyString.replace(LAST_ACTION,&quot;lastAction='OGP'&quot;);&#xA;         xmlGvyString = xmlGvyString.replace(ACTION,&quot;action='OGP'&quot;) &#xA;        return xmlGvyString&#xA;      }&#xA;      //MDA_HOLD&#xA;       def holdPresent = holdsList!= null ? holdsList.indexOf(&quot;MDA&quot;) : -1&#xA;      if(holdPresent != -1){&#xA;         xmlGvyString = xmlGvyString.replace(LAST_ACTION,&quot;lastAction='OGF'&quot;);&#xA;         xmlGvyString = xmlGvyString.replace(ACTION,&quot;action='OGF'&quot;) &#xA;         return xmlGvyString&#xA;       }&#xA;       //TRANSFER EVENT&#xA;       if(group.equals('XFER-P2') || group.equals('XFER-WO') || group.equals('XFER-SI'))&#xA;       {&#xA;         xmlGvyString = xmlGvyString.replace(LAST_ACTION,&quot;lastAction='OGT'&quot;);&#xA;         xmlGvyString = xmlGvyString.replace(ACTION,&quot;action='OGT'&quot;) &#xA;         return xmlGvyString&#xA;       }&#xA;       //SIT &#xA;       if(commodity.equals('SIT') &amp;&amp; drayStatus.equals('OFFSITE'))&#xA;       {&#xA;         xmlGvyString = xmlGvyString.replace(LAST_ACTION,&quot;lastAction='OGC'&quot;);&#xA;         xmlGvyString = xmlGvyString.replace(ACTION,&quot;action='OGC'&quot;) &#xA;         return xmlGvyString&#xA;       }&#xA;       //YB&#xA;      if(group.equals('YB') &amp;&amp; drayStatus.equals('TRANSFER'))&#xA;      {&#xA;         xmlGvyString = xmlGvyString.replace(LAST_ACTION,&quot;lastAction='OGA'&quot;);&#xA;         xmlGvyString = xmlGvyString.replace(ACTION,&quot;action='OGA'&quot;) &#xA;        return xmlGvyString&#xA;      }&#xA;      //EMPTY &#xA;      if(freightkindKey.equals('MTY') &amp;&amp; bookingNumber != null)&#xA;      {&#xA;         xmlGvyString = xmlGvyString.replace(LAST_ACTION,&quot;lastAction='OGS'&quot;);&#xA;         xmlGvyString = xmlGvyString.replace(ACTION,&quot;action='OGS'&quot;) &#xA;        return xmlGvyString&#xA;      }&#xA;      if(facilityId.equals('HON'))&#xA;      {&#xA;         xmlGvyString = xmlGvyString.replace(LAST_ACTION,&quot;lastAction='OGC'&quot;);&#xA;         xmlGvyString = xmlGvyString.replace(ACTION,&quot;action='OGC'&quot;) &#xA;         return xmlGvyString&#xA;      }&#xA;   }&#xA;&#xA; }//Class Ends" />
<digital-asset id="GvyCmisEventUnitReceive" short-description="GvyCmisEventUnitReceive" groovy-code="import com.navis.argo.business.api.ArgoRoadManager&#xA;import com.navis.argo.business.api.ITruckVisitDetails&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.argo.business.api.*;&#xA;import com.navis.framework.business.*;&#xA;&#xA;&#xA;public class GvyCmisEventUnitReceive&#xA;{&#xA;    public String processUnitRecieve(String xmlGvyData, Object unit,Object gvyBaseClass)&#xA;    {&#xA;        def xmlGvyString = xmlGvyData&#xA;       try&#xA;      {&#xA;        &#xA;         def utilObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);  &#xA;       &#xA;         def freightkind=unit.getFieldValue(&quot;unitFreightKind&quot;)&#xA;         freightkind = freightkind != null ? freightkind.getKey() : ''&#xA;        //def expGateBkgNbr = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;); &#xA;         def vesselCd =  unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdVessel.vesId&quot;);                       &#xA;         def vesVoyageNbr =  unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdObVygNbr&quot;)&#xA;&#xA;         //BOOKING NUM&#xA;         //xmlGvyString = utilObj.eventSpecificFieldValue(xmlGvyString,&quot;bookingNumber=&quot;,expGateBkgNbr)&#xA;&#xA;         //Location Status&#xA;         xmlGvyString = utilObj.eventSpecificFieldValue(xmlGvyString,&quot;locationStatus=&quot;,'1')&#xA;&#xA;         if(freightkind.equals('FCL')){&#xA;           xmlGvyString = processUnitRecieveFull(xmlGvyString,utilObj,vesselCd,vesVoyageNbr)              &#xA;         }  &#xA;         /*else if(freightkind.equals('MTY')){&#xA;             processRecieveEmpty()&#xA;          }*/&#xA;&#xA;      }catch(Exception e){&#xA;            e.printStackTrace();&#x9;&#xA;      }&#xA;      &#xA;      return xmlGvyString&#xA;    }&#xA;&#xA;   public String processUnitRecieveFull(String xmlGvyData,Object utilObj,String vesselCd, Object vesVoyageNbr)&#xA;   {&#xA;       def xmlGvyString = xmlGvyData&#xA;&#xA;     //ACTUAL VESSEL,ACTUAL VOYAGE,LEG&#xA;     def vesselType = utilObj.getVesselClassForVesCode(vesselCd)&#xA;     if(vesselType != null &amp;&amp; vesselType.equals('CELL'))&#xA;    {&#xA;        xmlGvyString = utilObj.eventSpecificFieldValue(xmlGvyString,&quot;actualVessel=&quot;,vesselCd)&#xA;        xmlGvyString = utilObj.eventSpecificFieldValue(xmlGvyString,&quot;actualVoyage=&quot;,vesVoyageNbr)&#x9;&#xA;        //println('VESSEL TYPE ::'+vesselType)&#xA;     }  &#xA;     return xmlGvyString&#xA;   }&#xA;&#xA;   public String processRecieveEmpty()&#xA;   {&#xA;   }&#xA;&#xA;&#xA;  public String gateAttributes(Object unit, Object gvyTxtMsgFmt, Object gvyBaseClass, String eventType)&#xA;  {&#xA;    def carrierVisitGkey = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvdGkey&quot;)&#xA;    def gateTruckCmpyCd =''&#xA;    def gateTruckCmpyName =''&#xA;    def gateTruckId =''&#xA;    def batNumber = ''&#xA;    def turnTime = ''&#xA;    def gateSeqNo = ''&#xA;    &#xA;     println(&quot;GvyCmisEventUnitReceive.gateAttributes()&quot;)&#xA;     if(eventType.equals('UNIT_IN_GATE') || eventType.equals('UNIT_DELIVER'))&#xA;    {&#xA;       // TRUCK CMPY CODE  &#xA;      gateTruckCmpyCd =unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.carrierOperatorId&quot;)&#xA;      &#xA;     //TRUCK CMPY NAME&#xA;      gateTruckCmpyName =unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.carrierOperatorName&quot;)&#xA;  &#xA;      //TRUCK ID&#xA;      gateTruckId = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;)&#xA;      &#xA;     //BAT NUM&#xA;     batNumber = getTruckBatNbr(carrierVisitGkey)&#xA;     &#xA;     //TURN TIME &#xA;      turnTime = ''&#xA;     &#xA;     //GATE SEQ &#xA;     gateSeqNo = gateSequenceNo(gvyBaseClass, unit) &#xA;    &#xA;   } else{&#xA;      gateTruckCmpyCd ='%'&#xA;      gateTruckCmpyName ='%'&#xA;      gateTruckId = '%'&#xA;      batNumber = '%'&#xA;      turnTime = '%'&#xA;      gateSeqNo = '%'&#xA;    } &#xA;    def gateTruckCmpyCdAttr = gvyTxtMsgFmt.doIt(&quot;gateTruckCmpyCd&quot;,gateTruckCmpyCd)&#xA;    def gateTruckCmpyNameAttr = gvyTxtMsgFmt.doIt(&quot;gateTruckCmpyName&quot;,gateTruckCmpyName)&#xA;    def gateTruckIdAttr = gvyTxtMsgFmt.doIt(&quot;gateTruckId&quot;,gateTruckId)&#xA;    def batNumberAttr = gvyTxtMsgFmt.doIt(&quot;batNumber&quot;,batNumber) &#xA;    def turnTimeAttr = gvyTxtMsgFmt.doIt(&quot;turnTime&quot;,turnTime) &#xA;    def gateSeqNoAttr = gvyTxtMsgFmt.doIt('gateSeqNo',gateSeqNo)&#xA;&#xA;    def gateAttr =  gateTruckCmpyCdAttr+gateTruckCmpyNameAttr+gateTruckIdAttr+batNumberAttr+turnTimeAttr+gateSeqNoAttr&#xA;   println(&quot;Gate ATTR ::&quot;+gateAttr)&#xA;   return gateAttr&#xA;  }&#xA;&#xA;  public String getTruckBatNbr(Long cvdGkey)&#xA;  {&#xA;    ITruckVisitDetails tvd = null;&#xA;      try&#xA;      {&#xA;         ArgoRoadManager argoRoadMgr = (ArgoRoadManager)Roastery.getBean(&quot;argoRoadManager&quot;);&#xA;         tvd = argoRoadMgr.getTvdFromCvGkey(cvdGkey);&#xA;         String batNbr = tvd != null ? tvd.getTruckBatNbr() : ''&#xA;         return batNbr&#xA;     }&#xA;     catch(Exception e){&#xA;         e.printStackTrace();&#x9;&#xA;    }&#xA;  }&#xA;&#xA;&#xA;  public String gateSequenceNo(Object gvyBaseClass, Object unit) &#xA;  {&#xA;      def gateSeqNo = ''&#xA;     try&#xA;     {&#xA;         def carrierVisitGkey = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvdGkey&quot;)&#xA;         if(carrierVisitGkey != null)&#xA;        {  &#xA;           ArgoRoadManager argoRoadMgr = (ArgoRoadManager)Roastery.getBean(&quot;argoRoadManager&quot;);&#xA;           def tvd = argoRoadMgr.getTvdFromCvGkey(carrierVisitGkey);&#xA;          &#xA;          String dateStr = &quot;&quot;;&#xA;&#x9;  &#xA;          Date dateObj = null;&#xA;          if(tvd != null)&#xA;         {&#xA;            def  stats = tvd.tvdtlsStats != null ? tvd.tvdtlsStats.iterator() : tvd.tvdtlsStats ;&#xA;            while(stats.hasNext()) &#xA;            {&#xA;             def stages = stats.next().tvstatStages.iterator();&#xA;             while(stages.hasNext()) &#xA;             { &#xA;               def state = stages.next();&#xA;               if(state != null)&#xA;              { &#xA;               dateStr += state.tvstageStart &#xA;               dateObj = state.tvstageStart &#xA;&#xA;                //Date Formatting&#xA;                def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);   &#xA;                def zone =  unit.getUnitComplex().getTimeZone();&#xA;                def aDate  = gvyEventUtil.convertToJulianDate(dateStr)&#xA;                def aTime = gvyEventUtil.formatTime(dateObj,zone) &#xA;                def datefmt = aDate+aTime&#xA;                gateSeqNo = datefmt != null ? datefmt.replace(&quot;:&quot;,&quot;&quot;) : datefmt&#xA;                println('gateSeqNo ::::'+gateSeqNo) &#xA;               }&#xA;             }&#xA;           }&#xA;         }&#xA;         //Date Formatting&#xA;         &#xA;        }//If ends&#xA;      }//try Ends&#xA;      catch(Exception e){&#xA;        e.printStackTrace();&#x9;&#xA;      }&#xA;        return gateSeqNo;&#xA;&#xA;   }//method execute ends&#xA;&#xA;&#xA;/*   public String execute(Object gvyBaseClass, Object unit, ) &#xA;  {&#xA;     try&#xA;     {&#xA;         def carrierVisitGkey = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvdGkey&quot;)&#xA;&#xA;         ArgoRoadManager argoRoadMgr = (ArgoRoadManager)Roastery.getBean(&quot;argoRoadManager&quot;);&#xA;         def tvd = argoRoadMgr.getTvdFromCvGkey(6541863);&#xA; &#xA;         String batNbr = tvd.getTruckBatNbr();&#xA;         println(&quot;batNbr :::::&quot;+batNbr)&#xA;&#xA;        String result = &quot;&quot;;&#xA;        def stats = tvd.tvdtlsStats.iterator();&#xA;        while(stats.hasNext()) &#xA;        {&#xA;           def stages = stats.next().tvstatStages.iterator();&#xA;           println(&quot;stages :::::&quot;+stages)&#xA;           while(stages.hasNext()) &#xA;           {&#xA;              def state = stages.next();&#xA;              println(&quot;State :::::&quot;+state)&#xA;              result += state.tvstageId+&quot; Start=&quot;+state. tvstageStart+&quot; End=&quot;+ state.tvstageEnd+&quot;\n&quot;;&#xA;                def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;                def zone =  unit.getUnitComplex().getTimeZone();&#xA;                def aDate  = gvyEventUtil.convertToJulianDate(''+state.tvstageStart)&#xA;                def aTime = gvyEventUtil.formatTime(state.tvstageStart,zone) &#xA;                def datefmt = aDate+aTime&#xA;                datefmt = datefmt != null ? datefmt.replace(&quot;:&quot;,&quot;&quot;) : datefmt&#xA;              println('datefmt ::::'+datefmt) &#xA;              println('result ::::'+result)&#xA;            }&#xA;        }&#xA;      }//try Ends&#xA;      catch(Exception e){&#xA;        e.printStackTrace();&#x9;&#xA;      }&#xA;        return result;&#xA;&#xA;   }//method execute ends&#xA;*/&#xA;}" />
<digital-asset id="GvyCmisEquipmentHoldEvents" short-description="GvyCmisEquipmentHoldEvents" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;&#xA;public class GvyCmisEquipmentHoldEvents{&#xA;&#xA;public String setEquipmentHoldFields(String xmlGvyData, Object event, Object unit)&#xA;{&#xA;&#xA;  def xmlGvyString = xmlGvyData&#xA;  try{&#xA;  Event gvyEventObj = event.getEvent()&#xA;  def eventNotes = gvyEventObj.getEventNote()&#xA;  eventNotes = eventNotes != null ? eventNotes : ''&#xA;  String eventType =  gvyEventObj.getEventTypeId() &#xA;  def u = unit&#xA;  &#xA;  def _freightkind=u.getFieldValue(&quot;unitFreightKind&quot;)&#xA;  def freightkind = _freightkind != null ? _freightkind.getKey() : ''&#xA;&#xA;  def holdsList = u.getFieldValue(&quot;unitAppliedHoldOrPermName&quot;)&#xA;  holdsList = holdsList != null ? holdsList : ''&#xA;&#xA;  GroovyInjectionBase gvyBaseClass = new GroovyInjectionBase()&#xA;  def appendObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;)&#xA;&#xA;  def holdFlag = true &#xA;  //CHECK ON EVENT TYPE&#xA;  if(eventType.equals(&quot;CL_HOLD&quot;)){&#xA;     xmlGvyString = getClaimHold(freightkind, xmlGvyString, eventNotes, appendObj)  &#xA;     getClaim(xmlGvyString,gvyBaseClass,unit)  &#xA;     holdFlag = false&#xA;  }&#xA;  else if(eventType.equals(&quot;CG_DMG_HOLD&quot;)){&#xA;     xmlGvyString = getCgDmgHold(xmlGvyString, appendObj, gvyBaseClass, eventType)&#xA;     holdFlag = false&#xA;  }&#xA;  else if(eventType.equals(&quot;CL_RELEASE&quot;)){&#xA;     getClaim(xmlGvyString,gvyBaseClass,unit)  &#xA;     holdFlag = false&#xA;  }&#xA;  else if(eventType.equals(&quot;CG_DMG_RELEASE&quot;)){&#xA;     getClaim(xmlGvyString,gvyBaseClass,unit)  &#xA;     holdFlag = false&#xA;  } &#x9; &#xA;  else if(eventType.equals(&quot;SHOP_HOLD&quot;)){&#xA;     println(&quot;SHOP_HOLD EVENT CALL&quot;) &#xA;     xmlGvyString = getShopHold(xmlGvyString,eventType,appendObj)&#xA;     holdFlag = false&#xA;  }&#xA;  else if(eventType.equals('SHOP_RELEASE')){&#xA;     xmlGvyString  = getShopRelease(xmlGvyString,appendObj) &#xA;     holdFlag = false&#xA;  }&#xA;  else if(eventType.equals('LTV_HOLD')){&#xA;    xmlGvyString  = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;stowFlag=&quot;,&quot;C&quot;,null,null,null)&#xA;     holdFlag = false&#xA;  }&#xA;  else if(eventType.equals('LTV_RELEASE')){&#xA;    xmlGvyString  = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;stowFlag=&quot;,&quot;null&quot;,null,null,null)&#xA;     holdFlag = false&#xA;  }&#xA;  else if(eventType.equals('INGATE_HOLD')){&#xA;    xmlGvyString  = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;damageCode=&quot;,&quot;Z&quot;,null,null,null)&#xA;     holdFlag = false&#xA;  }&#xA;  else if(eventType.equals('INGATE_RELEASE')){&#xA;    xmlGvyString  = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;damageCode=&quot;,&quot;null&quot;,null,null,null)&#xA;     holdFlag = false&#xA;  }&#xA;&#xA; &#xA;  //Process fields for CL,CG_DMG and SHOP HOLD&#xA;  if(holdFlag)&#xA;  {&#xA;    def claimsHold = holdsList!= null ? holdsList.indexOf(&quot;CL&quot;) : -1&#xA;    def cgmgHold = holdsList!= null ? holdsList.indexOf(&quot;CG_DMG&quot;) : -1&#xA;    def shopHold = holdsList!= null ? holdsList.indexOf(&quot;SHOP&quot;) : -1&#xA;    def ltvHold = holdsList!= null ? holdsList.indexOf(&quot;LTV&quot;) : -1&#xA;    def ingateHold = holdsList!= null ? holdsList.indexOf(&quot;INGATE&quot;) : -1&#xA;&#xA;    if(claimsHold != -1){&#xA;      xmlGvyString = getClaimHold(freightkind, xmlGvyString, eventNotes, appendObj)&#xA;    }&#xA;    if(cgmgHold != -1){&#xA;       xmlGvyString = getCgDmgHold(xmlGvyString, appendObj, gvyBaseClass, eventType)&#xA;    }&#xA;    if(shopHold != -1){&#xA;      xmlGvyString = getShopHold(xmlGvyString,eventType,appendObj)&#xA;    }&#xA;    if (ltvHold != -1){&#xA;       xmlGvyString  = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;stowFlag=&quot;,&quot;C&quot;,null,null,null)&#xA;    }&#xA;    if(ingateHold != -1){&#xA;       xmlGvyString  = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;damageCode=&quot;,&quot;Z&quot;,null,null,null)&#xA;    }&#xA;&#xA;  }&#xA; &#xA; }catch(Exception e){&#xA;   e.printStackTrace();&#xA; }&#xA;  &#xA;&#xA; return xmlGvyString&#xA;}&#xA;&#xA;   //CL_HOLD&#xA;   public String getClaimHold(String freightkind, String xmlGvyData, String eventNotes, Object appendObj)&#xA;  {&#xA;     println(&quot;&lt;&lt;&lt; getClaimHold - Start&gt;&gt;&gt; :: &quot;)&#xA;     def xmlGvyString = xmlGvyData &#xA;     def locationStatus = appendObj.getFieldValues(xmlGvyString, &quot;locationStatus=&quot;);&#xA;/*     if(freightkind.equals('FCL')){&#xA;       xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;consignee=&quot;,&quot;CLAIMS-FULL&quot;,null,null,null)&#xA;          if(!locationStatus.equals(&quot;1&quot;)){&#xA;             xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;dsc=&quot;,&quot;C&quot;,null,null,null)   &#xA;          }&#xA;     }&#xA;     else{&#xA;        xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;consignee=&quot;,&quot;CLAIMS-MTY&quot;,null,null,null)   &#xA;     }&#xA;*/&#xA;     xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;consignee=&quot;,&quot;CLAIMS-MTY&quot;,null,null,null)   &#xA;&#xA;     if (locationStatus.equals(&quot;1&quot;))&#xA;    {&#xA;       xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;locationStatus=&quot;,&quot;6&quot;,null,null,null)   &#xA;    }&#xA;    println(&quot;&lt;&lt;&lt; getClaimHold - End&gt;&gt;&gt;&quot;) &#xA;    return xmlGvyString&#xA;  }&#xA;&#xA;  //CG_DMG_HOLD&#xA;  public String getCgDmgHold(String xmlGvyData, Object appendObj, Object gvyBaseClass, String  eventType)&#xA;  {&#xA;    println(&quot;&lt;&lt;&lt; getCgDmgHold - Start&gt;&gt;&gt;&quot;)&#xA;    def xmlGvyString = xmlGvyData &#xA;    try&#xA;    {&#xA;      def locationStatus = appendObj.getFieldValues(xmlGvyString, &quot;locationStatus=&quot;);&#xA;      def dir = appendObj.getFieldValues(xmlGvyString, &quot;dir=&quot;);&#xA;      def cargoNotes = appendObj.getFieldValues(xmlGvyString, &quot;cargoNotes=&quot;);&#xA;      xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;consignee=&quot;,&quot;CLAIMS-MTY &quot;,&quot;L&quot;,null,null)&#xA;      def cargoNotesValue = appendObj.getFieldValues(xmlGvyString, &quot;cargoNotes=&quot;);&#xA;      if(!cargoNotesValue.equals('null')){&#xA;        xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;cargoNotes=&quot;,&quot;CG/EQUIP HOLD-&quot;,&quot;L&quot;,null,null)&#xA;      }&#xA;      else{&#xA;        xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;cargoNotes=&quot;,&quot;CG/EQUIP HOLD&quot;,null,null,null) &#xA;      }&#xA;&#xA;      if(locationStatus.equals(&quot;1&quot;) &amp;&amp; dir.equals(&quot;MTY&quot;)){&#xA;        xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;locationStatus=&quot;,&quot;6&quot;,null,null,null) &#xA;          if(eventType.equals(&quot;CG_DMG_HOLD&quot;)){&#xA;                postAcetHoldsMsg(xmlGvyString,gvyBaseClass)&#xA;         }  &#xA;     }&#xA;     println(&quot;&lt;&lt;&lt; getCgDmgHold - End&gt;&gt;&gt;&quot;) &#xA;    }catch(Exception e){&#xA;       e.printStackTrace();&#xA;    }&#xA;&#xA;   return xmlGvyString&#xA;  }&#xA;&#xA;  //SHOP_HOLD&#xA;  public String getShopHold(String xmlGvyData,String eventType,Object appendObj)&#xA;  {&#xA;     println(&quot;&lt;&lt;&lt; getShopHold - Start&gt;&gt;&gt;&quot;)&#xA;     def xmlGvyString = xmlGvyData&#xA;     try&#xA;     {&#xA;       def  locationStatus = appendObj.getFieldValues(xmlGvyString, &quot;locationStatus=&quot;);&#xA;       def action = appendObj.getFieldValues(xmlGvyString, &quot;action=&quot;);&#xA;       def lastaction = appendObj.getFieldValues(xmlGvyString, &quot;lastAction=&quot;);&#xA;       println(&quot;locationStatus ::&quot;+locationStatus+&quot;  action ::&quot;+action);&#xA;  &#xA;       if(locationStatus.equals(&quot;1&quot;))&#xA;       {&#xA;         def locStatusOld = &quot;locationStatus='&quot;+locationStatus+&quot;'&quot;;&#xA;         def locStatusNew = &quot;locationStatus='6'&quot;;&#xA;         def actionOld = &quot;action='&quot;+action+&quot;'&quot;;&#xA;         def lastActionOld = &quot;lastAction='&quot;+lastaction+&quot;'&quot;&#xA;&#xA;         xmlGvyString = xmlGvyString.replace(locStatusOld,locStatusNew);&#xA;         if(eventType.equals('SHOP_HOLD')){&#xA;           xmlGvyString = xmlGvyString.replace(actionOld,&quot;action='TFM'&quot;);&#xA;           xmlGvyString = xmlGvyString.replace(lastActionOld,&quot;lastAction='TFM'&quot;);&#xA;         }&#xA;       }&#xA;      println(&quot;&lt;&lt;&lt; getShopHold - End&gt;&gt;&gt;&quot;) &#xA;     }catch(Exception e){&#xA;         e.printStackTrace()&#xA;     }&#xA;&#xA;     return xmlGvyString;&#xA;   }&#xA;&#xA;   //SHOP_RELEASE&#xA;   public String getShopRelease(String xmlGvyData, Object appendObj)&#xA;  {&#xA;     println(&quot;&lt;&lt;&lt; getShopRelease - Start&gt;&gt;&gt;&quot;) &#xA;     def xmlGvyString = xmlGvyData&#xA;     def  locationStatus = appendObj.getFieldValues(xmlGvyString, &quot;locationStatus=&quot;);&#xA;     println(&quot;locationStatus SHOP RELEASE ::&quot;+locationStatus);&#xA;     if(locationStatus.equals(&quot;1&quot;))&#xA;    {&#xA;      xmlGvyString = xmlGvyString.replace(&quot;lastAction='null'&quot;,&quot;lastAction='FFM'&quot;)&#xA;      xmlGvyString = xmlGvyString.replace(&quot;action='null'&quot;,&quot;action='FFM'&quot;) &#xA;     }&#xA;     println(&quot;&lt;&lt;&lt; getShopRelease - End&gt;&gt;&gt;&quot;) &#xA;     return xmlGvyString;&#xA;   }&#xA;&#xA;&#xA;  //CL_RELEASE and CG_DMG_RELEASE&#xA;  public void getClaim(String xmlGvyData, Object gvyBaseClass, Object unit)&#xA;  {&#xA;     println(&quot;&lt;&lt;&lt; getClaimRelease - Start&gt;&gt;&gt;&quot;)&#xA;     def xmlGvyString = xmlGvyData&#xA;     def lkpLocType=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;     def lkpLocTypeKy = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;     if(lkpLocTypeKy.equals('YARD')){&#xA;         postAcetHoldsMsg(xmlGvyString,gvyBaseClass)&#xA;      }&#xA;  }&#xA;&#xA;  //Post Acets Msg for CL/CG Hold&#xA;  public void postAcetHoldsMsg(String xmlGvyData, Object gvyBaseClass){&#xA;       def xmlGvyString = xmlGvyData&#xA;&#xA;       xmlGvyString = xmlGvyString.replace(&quot;lastAction='null'&quot;,&quot;lastAction='CLS'&quot;)&#xA;       xmlGvyString = xmlGvyString.replace(&quot;action='null'&quot;,&quot;action='CLS'&quot;) &#xA;      // println(&quot;&lt;&lt;&lt; setAcetsMsg - End&gt;&gt;&gt;:&quot;+xmlGvyString)   &#xA;       gvyBaseClass.sendXml(xmlGvyString)&#xA;  }&#xA;&#xA;}" />
<digital-asset id="GvyInjAbda" short-description="ACETS BDA Process" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.atoms.EventEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.orders.business.eqorders.EquipmentOrderManagerPea&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;&#xA;class GvyInjAbda extends GroovyInjectionBase {&#xA;&#x9;public String execute(Map inParameters) {&#xA;&#xA;&#x9;def ctrId = (String) inParameters.get(&quot;equipment-id&quot;);&#xA;&#xA;&#x9;def recorder = (String) inParameters.get(&quot;recorder&quot;);&#xA;&#x9;def vesvoyBda = (String) inParameters.get( &quot;vesvoy&quot;);&#xA;&#x9;def bdaBookingNum = (String) inParameters.get( &quot;bookingNum&quot;);&#xA;&#x9;def consigneeIdBda = (String) inParameters.get( &quot;consigneeId&quot;);&#xA;&#x9;def consigneeNameBda = (String) inParameters.get( &quot;consigneeName&quot;);&#xA;&#x9;def shipperNameBda = (String) inParameters.get( &quot;shipperName&quot;);&#xA;&#x9;def shipperIdBda = (String) inParameters.get( &quot;shipperId&quot;);&#xA;&#x9;def destPortBda = (String) inParameters.get( &quot;destPort&quot;);&#xA;&#x9;def discPortBda = (String) inParameters.get( &quot;dischargePort&quot;);&#xA;&#x9;def primCarrierBda = (String) inParameters.get( &quot;primCarrier&quot;);&#xA;&#x9;def tempBda = (String) inParameters.get( &quot;temp&quot;);&#xA;&#x9;def sealBda = (String) inParameters.get( &quot;sealNum&quot;);&#xA;&#x9;def commodityBda = (String) inParameters.get( &quot;commodity&quot;);&#xA;&#xA;&#xA;&#x9;// Find the UFV&#xA;&#x9;log( &quot;Starting BDA Injection process.&quot;);&#xA;&#x9;def ufv;&#xA;&#x9;def unit;&#xA;&#x9;try {&#xA;&#x9;&#x9;ufv = findActiveUfv(ctrId);&#xA;&#x9;&#x9;unit = ufv.getUfvUnit();&#xA;&#x9;} catch ( Exception ex) {&#xA;&#x9;&#x9;fail((new StringBuilder()).append(ex.toString()).append(&quot; ERR_GVY_BDA_001. Could not find unit: &quot;).append( ctrId).toString());&#xA;&#x9;}&#xA;&#xA;&#x9;if( UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory()) &amp;&amp;&#xA;&#x9;&#x9;isBarge( vesvoyBda) &amp;&amp;&#xA;&#x9;&#x9;UnitVisitStateEnum.DEPARTED.equals(ufv.getUfvVisitState())) {&#xA;&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_BDA_002. VesVoy: &quot; + vesvoyBda + &quot; sailed. Could not apply BDA.&quot;);&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;def uoi = unit.getUnitPrimaryUe().getUeDepartureOrderItem();&#xA;&#x9;def n4BookingNum = null;&#xA;&#x9;if ( uoi != null) {&#xA;&#x9;&#x9;n4BookingNum = uoi.getEqboiOrder().getEqboNbr();&#xA;&#x9;}&#xA;&#x9;log( &quot;n4BookingNum = &quot; + n4BookingNum + &quot; bdaBookingNum = &quot; + bdaBookingNum);&#xA;&#xA;&#x9;if ( n4BookingNum != null &amp;&amp; n4BookingNum != bdaBookingNum) {&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_BDA_003. Unit: &quot; + ctrId + &quot; Booking Num dismatch: N4 num=&quot; + n4BookingNum + &quot;  BDA num=&quot; + bdaBookingNum);&#xA;&#x9;}&#xA;&#xA;&#x9;// if not export or import then return&#xA;&#x9;if ( !UnitCategoryEnum.EXPORT.equals(unit.getUnitCategory()) &amp;&amp; !UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory())) {&#xA;&#x9;&#x9;log( &quot;ERR_GVY_BDA_004. Unit: &quot; + ctrId + &quot; category is not EXPORT or IMPORT.&quot;);&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_BDA_004. Unit: &quot; + ctrId + &quot; category is not EXPORT or IMPORT.&quot;);&#xA;&#x9;}&#xA;&#xA;&#xA;&#xA;&#x9;// if N4 vesvoy is not equal to dba.vesvoy then return&#xA;&#x9;def vesvoyN4 = unit.getFieldValue( &quot;unitActiveUfv.ufvActualObCv.cvId&quot;);&#xA;&#x9;if ( vesvoyN4 != vesvoyBda &amp;&amp; !isBarge(vesvoyN4)) {&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_BDA_006. vesvoy mismatch for unit; &quot; + ctrId + &quot;. vesvoyN4=&quot; + vesvoyN4 + &quot; vesvoyBda=&quot; + vesvoyBda);&#xA;&#x9;}&#xA;&#xA;&#x9;def oldDestPort = unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;);&#xA;&#x9;def oldConsinee = unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;);&#xA;&#x9;def consigneeN4 = unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;);&#xA;&#xA;&#x9;def misc2 = unit.getFieldValue(&quot;unitFlexString11&quot;);&#xA;&#x9;if ( misc2 != null &amp;&amp; ! misc2.contains( &quot;P&quot;)) {&#xA;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsDestination&quot;, destPortBda);&#xA;&#x9;}&#xA;&#xA;&#x9;if ( (n4BookingNum == null || n4BookingNum == &quot;&quot;) &amp;&amp; ( consigneeN4 != null &amp;&amp; (consigneeN4.contains( &quot;.*unapproved.*&quot;) ||&#x9;consigneeN4.contains( &quot;.*invalid assign.*&quot;)))) {&#xA;&#xA;&#x9;&#x9;// find booking&#xA;&#x9;&#x9;def facility = getFacility();&#xA;&#x9;&#x9;def cv = CarrierVisit.findVesselVisit( facility, vesvoyBda);&#xA;&#x9;&#x9;if ( cv == null) {&#xA;&#x9;&#x9;&#x9;fail( &quot;ERR_GVY_BDA_007. Could not find the carrier visit: &quot; + vesvoyBda);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;def bizScope = ScopedBizUnit.findScopedBizUnit( &quot;MAT&quot;, BizRoleEnum.LINEOP);&#xA;&#x9;&#x9;if ( bizScope == null) {&#xA;&#x9;&#x9;&#x9;&#x9;fail( &quot;ERR_GVY_BDA_008. Could not find the business unit: MAT&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;def booking = Booking.findBookingByUniquenessCriteria( bdaBookingNum, bizScope, cv);&#xA;&#x9;&#x9;if ( booking == null) {&#xA;&#x9;&#x9;&#x9;&#x9;fail( &quot;ERR_GVY_BDB_009. Could not find booking: &quot; + bdaBookingNum);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;// assign BDA booking to N4&#xA;&#x9;&#x9;def eqoMgr = new EquipmentOrderManagerPea();&#xA;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsBlNbr&quot;, bdaBookingNum);&#xA;&#x9;&#x9;eqoMgr.assignExportBookingToUnit( booking, unit);&#xA;&#x9;}&#xA;&#xA;&#x9;def comments = &quot;&quot;;&#xA;&#x9;if ( misc2 != null &amp;&amp; !misc2.contains( &quot;C&quot;) &amp;&amp; consigneeN4 != consigneeNameBda) {&#xA;&#x9;&#x9;// find BDA consignee in N4&#xA;&#x9;&#x9;def cneeGrp = ScopedBizUnit.findScopedBizUnit( consigneeIdBda, BizRoleEnum.SHIPPER);&#xA;&#x9;&#x9;if ( cneeGrp == null) {&#xA;&#x9;&#x9;&#x9;log( &quot;Consignee&quot; + consigneeNameBda + &quot; not configured in N4.&quot;);&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;unit.getUnitGoods().updateConsignee( cneeGrp);&#xA;&#x9;&#x9;&#x9;log( &quot;update consignee with BDA.&quot;);&#xA;&#x9;&#x9;&#x9;comments += &quot;RECON X &quot; + consigneeN4;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;if ( misc2!= null &amp;&amp; !misc2.contains( &quot;P&quot;) &amp;&amp; oldDestPort != destPortBda) {&#xA;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsDestination&quot;, destPortBda);&#xA;&#x9;&#x9;comments += &quot; &quot; + oldDestPort + &quot; &quot; +  destPortBda;&#xA;&#x9;}&#xA;&#xA;&#x9;unit.setFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempRequiredC&quot;, new Double( tempBda));&#xA;&#x9;unit.setFieldValue(&quot;unitSealNbr1&quot;, sealBda);&#xA;&#x9;def shipper = Shipper.findOrCreateShipper( shipperIdBda, shipperNameBda);&#xA;&#x9;unit.getUnitGoods().updateShipper( shipper);&#xA;&#x9;def conee = Shipper.findOrCreateShipper( consigneeIdBda, consigneeNameBda);&#xA;&#x9;unit.getUnitGoods().updateConsignee( conee);&#xA;&#x9;//unit.setFieldValue(&quot;unitGoods.gdsCommodity&quot;, commodityBda);&#xA;&#xA;&#x9;unit.setFieldValue(&quot;unitRemark&quot;, unit.getFieldValue(&quot;unitRemark&quot;) + &quot; &quot; + comments + &quot; &quot; + commodityBda);&#xA;&#x9;def event = new GroovyEvent( null, unit);&#xA;&#x9;event.postNewEvent( &quot;BDA&quot;);&#xA;}&#xA;&#xA;  private boolean isBarge( String vesvoy) {&#xA;&#x9;&#x9;//def gvyBaseClass = new GroovyInjectionBase()&#xA;  &#x9;def gvyUtil = getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;  &#x9;def vType = gvyUtil.getVesselClassType( vesvoy);&#xA;  &#x9;return vType == &quot;BARGE&quot; ? true : false;&#xA;&#x9;}&#xA;}" />
<digital-asset id="GvyWOIngate" short-description="GvyWOIngate" groovy-code="import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import java.util.Iterator;&#xA;import java.util.Collection;&#xA;&#xA;public class GvyWOIngate {&#xA;&#xA;/** If commodity code is SIT reapply DRAY status&#xA;*/&#xA;public void setDray(Object unit) {&#xA;                println(&quot;WO Gate set dray&quot;);&#xA;                if(unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;).equals(&quot;SIT&quot;)) {&#xA;                     unit.setFieldValue(&quot;unitDrayStatus&quot;,com.navis.argo.business.atoms.DrayStatusEnum.OFFSITE);&#xA;                }&#xA;}&#xA;&#xA;public void setPosition(Object unit) {&#xA;  &#x9;     // Update Position to WOA1&#xA;                     println(&quot;WO Gate set positiony&quot;);&#xA;                  GroovyEvent moveEvent = new GroovyEvent( null, unit);&#xA;                  moveEvent.setProperty(&quot;PositionFull&quot;,&quot;Y-SI-WOA-1&quot;);&#xA;                   moveEvent.setProperty(&quot;PositionSlot&quot;,&quot;WOA1&quot;);&#xA;                  moveEvent.postNewEvent( &quot;UNIT_YARD_MOVE&quot;, &quot;Position Update on West Oahu In Gate&quot;);&#xA;&#xA;}&#xA;&#xA;public void transferToSI(Object unit) {&#xA;                       println(&quot;WO Gate transfer to SI&quot;);&#xA;&#x9; GroovyEvent event = new GroovyEvent( null, unit);&#xA;                   event.postNewEvent( &quot;TRANSFER_TO_SI&quot;, &quot;Transfer on West Oahu In Gate&quot;);&#xA;&#xA;}&#xA;&#xA;}" />
<digital-asset id="GvyCmisEventUnitStuff" short-description="GvyCmisEventUnitStuff" groovy-code="public class GvyCmisEventUnitStuff&#xA;{&#xA;   public String processUnitStuff(String xmlGvyData, String comodtiy, Object gvyCmisUtil)&#xA;   {&#xA;      def xmlGvyString = xmlGvyData&#xA;      try&#xA;     {&#xA;         if(comodtiy.equals('AUTO')){&#xA;             xmlGvyString = setCommodityAutoFields(xmlGvyString,gvyCmisUtil)&#xA;          }&#xA;          else{&#xA;             xmlGvyString = setCommodityNonAutoFields(xmlGvyString,gvyCmisUtil)&#xA;         }&#xA;         xmlGvyString = setUnitStuffFields(xmlGvyString,gvyCmisUtil)&#xA;     }catch(Exception e){&#xA;         e.printStackTrace()&#xA;     }&#xA;      return xmlGvyString&#xA;   }&#xA; &#xA;   public String setCommodityAutoFields(String xmlGvyData, Object gvyCmisUtil)&#xA;   {&#xA;      def xmlGvyString = xmlGvyData&#xA;      xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;hazF=&quot;,&quot;Y&quot;)&#xA;      xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;cargoNotes=&quot;,&quot;AUTOMOBILE&quot;)&#xA;      xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;shipper=&quot;,&quot;AUTO&quot;)&#xA;&#xA;      return xmlGvyString&#xA;   }&#xA;&#xA;   public String setCommodityNonAutoFields(String xmlGvyData, Object gvyCmisUtil)&#xA;   {&#xA;      def xmlGvyString = xmlGvyData&#xA;      xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;commodity=&quot;,&quot;null&quot;)&#xA;&#xA;      return xmlGvyString&#xA;   }&#xA;&#xA;   public String setUnitStuffFields(String xmlGvyData, Object gvyCmisUtil)&#xA;   {&#xA;      def xmlGvyString = xmlGvyData&#xA;      xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dPort=&quot;,&quot;HON&quot;)&#xA;      xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dischargePort=&quot;,&quot;HON&quot;)&#xA;      xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dir=&quot;,&quot;IN&quot;)&#xA;      xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;truck=&quot;,&quot;null&quot;)&#xA;      xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;leg=&quot;,&quot;null&quot;)&#xA;      xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;misc1=&quot;,&quot;null&quot;)&#xA;&#xA;      return xmlGvyString&#xA;   }&#xA;}" />
<digital-asset id="GvyInjOffLease" short-description="OFF_LEASE Process" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.argo.business.api.ServicesManager;&#xA;import com.navis.framework.business.Roastery;&#xA;&#xA; class GvyInjOffLease {&#xA;&#x9;public String doIt( Object unit, String note) {&#xA;&#xA;  def servicesMgr = (ServicesManager)Roastery.getBean(&quot;servicesManager&quot;);&#xA;  &#xA;  servicesMgr.applyHold( &quot;IGMTY&quot;, unit, null, null, note);&#xA;&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;&#xA;&#xA;" />
<digital-asset id="GvyApplyHold" short-description="GvyApplyHold" groovy-code="import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;&#xA;// Doesn't work&#xA;public class GvyApplyHold {&#xA;&#xA;public void applyEquipmentHold(Object equipment, String eventName,String note) {&#xA;         println(&quot;Apply Hold &quot;+eventName);&#xA;         GroovyEvent event = new GroovyEvent( null, equipment);&#xA;         event.postNewEvent( eventName, note);&#xA;&#xA;}&#xA;&#xA;}" />
<digital-asset id="GvyInjAulk" short-description="ACETS ULK Process" groovy-code="import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;&#xA;class GvyInjAulk extends GroovyInjectionBase {&#xA;&#x9;public String execute(Map inParameters) {&#xA;&#xA;&#x9;&#x9;def ctrId = (String) inParameters.get(&quot;equipment-id&quot;);&#xA;&#x9;&#x9;def recorder = (String) inParameters.get(&quot;recorder&quot;);&#xA;&#xA;&#x9;&#x9;// find the unit&#xA;&#x9;&#x9;def ufv;&#xA;&#x9;&#x9;def unit;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;ufv = findActiveUfv(ctrId);&#xA;&#x9;&#x9;&#x9;unit = ufv.getUfvUnit();&#xA;&#x9;&#x9;} catch ( Exception ex) {&#xA;&#x9;&#x9;&#x9;fail(&quot;ERR_GVY_ULK_001. Could not find active unit: &quot; + ctrId);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if ( unit == null) {&#xA;&#x9;&#x9;&#x9;fail(&quot;ERR_GVY_ULK_001. Could not find active unit: &quot; + ctrId);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;def transitState = ufv.getUfvTransitState();&#xA;&#x9;&#x9;def obCarrier = unit.getFieldValue( &quot;unitActiveUfv.ufvActualObCv.cvId&quot;);&#xA;&#x9;&#x9;log( &quot;obCarrier = &quot; + obCarrier);&#xA;&#xA;&#x9;&#x9;if ( !(transitState.equals( UfvTransitStateEnum.S50_ECOUT) ||&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;transitState.equals( UfvTransitStateEnum.S30_ECIN) ||&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;transitState.equals( UfvTransitStateEnum.S20_INBOUND) ||&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;transitState.equals( UfvTransitStateEnum.S40_YARD))) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ( !((transitState.equals( UfvTransitStateEnum.S70_DEPARTED) ||&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;transitState.equals( UfvTransitStateEnum.S60_LOADED)) &amp;&amp;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;isBarge( obCarrier))) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;fail( &quot;ERR_GVY_ULK_002. The unit: &quot; + ctrId +&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; TransitState is not in DEPARTURED or LOAD and OB Carrier is not barge.&quot; +&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; And TransitState is not in YARD or INBOUND or EC/In or EC/out.&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#xA;&#xA;&#x9;&#x9;if ( transitState.equals( UfvTransitStateEnum.S60_LOADED) &amp;&amp; isShip( obCarrier)) {&#xA;&#x9;&#x9;&#x9;fail( &quot;ERR_GVY_ULK_003. The unit: &quot; + ctrId + &quot; TransitState is in LOAD and OB Carrier is SHIP.&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;def shipper = ScopedBizUnit.findOrCreateScopedBizUnit( &quot;CSACTION&quot;, BizRoleEnum.SHIPPER);&#xA;&#x9;&#x9;unit.getUnitGoods().updateShipper( shipper);&#xA;&#xA;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsDestination&quot;, &quot;HON&quot;);&#xA;&#xA;&#x9;&#x9;Routing rtg = unit.getUnitRouting();&#xA;&#xA;&#x9;&#x9;if ( rtg == null) {&#xA;&#x9;&#x9;&#x9;&#x9;fail( &quot;ERR_GVY_ULK_004. Can not find routing info for unit: &quot; + ctrId);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;def rtgPoint = RoutingPoint.findRoutingPoint( &quot;HON&quot;);&#xA;&#x9;&#x9;rtg.setRtgPOD1( rtgPoint);&#xA;&#xA;    unit.setFieldValue(&quot;unitRemark&quot;, recorder);&#xA;&#x9;&#x9;def event = new GroovyEvent( null, unit);&#xA;&#x9;&#x9;event.postNewEvent( &quot;ULK&quot;, recorder);&#xA;&#x9;}&#xA;&#xA;&#x9;private boolean isBarge( String vesvoy) {&#xA;&#x9;&#x9;&#x9;//def gvyBaseClass = new GroovyInjectionBase()&#xA;&#x9;  &#x9;def gvyUtil = getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;&#x9;  &#x9;def vType = gvyUtil.getVesselClassType( vesvoy);&#xA;&#x9;  &#x9;return vType == &quot;BARGE&quot; ? true : false;&#xA;&#x9;}&#xA;&#xA;&#x9;private boolean isShip( String vesvoy) {&#xA;&#x9;&#x9;&#x9;&#x9;//def gvyBaseClass = new GroovyInjectionBase()&#xA;&#x9;&#x9;  &#x9;def gvyUtil = getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;&#x9;&#x9;  &#x9;def vType = gvyUtil.getVesselClassType( vesvoy);&#xA;&#x9;&#x9;  &#x9;return vType == &quot;SHIP&quot; ? true : false;&#xA;&#x9;}&#xA;}" />
<digital-asset id="GvyCmisChassisAttributes" short-description="GvyCmisChassisAttributes" groovy-code="public class GvyCmisChassisAttributes{&#xA;&#xA;   //Method gets the chassis attributes &#xA;   public String getChassisAttributes(Object gvyTxtMsgFmt, Object unit)&#xA;   {&#xA;       def chassisAttr= ''&#xA;      try&#xA;     {&#xA;         println(&quot;GvyCmisChassisAttributes.getChassisAttributes()&quot;)&#xA;         //MG Number&#xA;        def unitChsAcryId = unit.getUnitChsAcryId()&#xA;        def mgNumberAttr = gvyTxtMsgFmt.doIt('mgNumber',unitChsAcryId)&#xA;        println(&quot;unitChsAcryId ::&quot;+unitChsAcryId)     &#xA;&#xA;        //MG Tare &#xA;       def acryObj = unit.getUnitChsAccessory()&#xA;       def acryTareWeight = acryObj != null ? acryObj.getEqTareWeightKg() : null&#xA;       acryTareWeight = acryTareWeight != null ? Math.round(acryTareWeight * 2.20462262 ) : ''&#xA;       def mgWeightAttr = gvyTxtMsgFmt.doIt('mgWeight',acryTareWeight)&#xA;&#xA;       //Saftey Expiry&#xA;       def safetyExpiry = ''&#xA;       def safetyExpAttr = gvyTxtMsgFmt.doIt('safetyExpiry',safetyExpiry)&#xA;&#xA;       //Last Inspection&#xA;       def lastInspection = ''&#xA;       def lastInspectAttr = gvyTxtMsgFmt.doIt('lastInspection',lastInspection)&#xA;&#xA;       //Last Annual&#xA;       def lastAnnual = ''&#xA;       def lastAnnualAttr = gvyTxtMsgFmt.doIt('lastAnnual',lastAnnual) &#xA;      &#xA;       //Chassis Alert&#xA;       def chassisAlert = ''&#xA;       def chassisAlertAttr = gvyTxtMsgFmt.doIt('chassisAlert',chassisAlert)    &#xA;&#xA;       //MGP&#xA;       def mgp = ''&#xA;       def mgpAttr = gvyTxtMsgFmt.doIt('mgp',mgp)    &#xA;&#xA;      chassisAttr = mgNumberAttr+mgWeightAttr+safetyExpAttr+lastInspectAttr+lastAnnualAttr+chassisAlertAttr+mgpAttr&#xA;&#xA;     //println('chassisAttr ::'+chassisAttr) &#x9;  &#xA;     }catch(Exception e){&#xA;        e.printStackTrace()&#xA;     } &#xA;   &#xA;      return  chassisAttr;   &#xA;&#xA;   }&#xA; &#xA;&#xA;}" />
<digital-asset id="GvyEquipmentLookup" short-description="GvyEquipmentLookup" groovy-code="import com.navis.argo.business.reference.Accessory;&#xA;import com.navis.argo.business.reference.Equipment;&#xA;/*&#xA;* Get the n4 equipment object.&#xA;*/&#xA;class GvyEquipmentLookup {&#xA;    public Object getEquipment(Object id) {&#xA;        return Equipment.findEquipment(id);&#xA;    }&#xA;}" />
<digital-asset id="GvyCmisEventUnitStrip" short-description="GvyCmisEventUnitStrip" groovy-code="import com.navis.services.business.event.Event;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;&#xA;public class GvyCmisEventUnitStrip&#xA;{&#xA;  public void processUnitStrip(Object unit, String eventNotes, Object gvyBaseClass, Object gvyEventObj)&#xA;  {&#xA;     try&#xA;    {&#xA;       println(&quot;GvyCmisEventUnitStrip()&quot;)&#xA;      //Calling Msg Formater class&#xA;      def gvyTxtMsgFmt = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisTxtMsgFormatter&quot;);&#xA;      //Unit    &#xA;      def u = unit &#xA;&#x9;&#x9;&#xA;      String eventType = &quot;UNIT_STRIP&quot;&#xA;      println(&quot;STRIP EVENT - 1&quot;) &#xA;      if(eventNotes.startsWith('Gvy MTY')){&#xA;           eventType = &quot;FRUCTOSE_MTY&quot;&#xA;       }&#xA;       //MSGTYPE&#xA;       def eventTypeAttr = gvyTxtMsgFmt.doIt('msgType',eventType) &#xA;&#xA;       // EQUIP CLASS   &#xA;      def equiClass = u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;      def equiClassKey = equiClass != null ? equiClass.getKey() : equiClass&#xA;      def unitClassAttr = gvyTxtMsgFmt.doIt('unitClass', equiClassKey)&#xA;&#xA;     //CTRNO &amp; CHECK DIGIT &#xA;     def ctrNo = ''&#xA;     def checkDigit = ''&#xA;     def unitIdVal=u.getFieldValue(&quot;unitId&quot;)&#xA;      print('unitId ::'+unitIdVal)&#xA;      if(equiClassKey.equals('CONTAINER') &amp;&amp; unitIdVal.startsWith('MATU')){&#xA;         ctrNo = unitIdVal.substring(4,unitIdVal.length()-1)&#xA;         checkDigit = unitIdVal.substring(unitIdVal.length()-1)&#xA;      }else if(equiClass.equals('ACCESSORY')){&#xA; &#x9;ctrNo = unitIdVal&#xA;        checkDigit = ''&#xA;      }else{&#xA;         ctrNo =unitIdVal.substring(0,unitIdVal.length()-1) &#xA;         checkDigit = unitIdVal.substring(unitIdVal.length()-1)&#xA;     }&#xA;     def ctrNoAttr = gvyTxtMsgFmt.doIt('ctrNo',ctrNo)&#xA;     def checkDigitAttr = gvyTxtMsgFmt.doIt('checkDigit',checkDigit)&#xA;     println(&quot;STRIP EVENT - 2&quot;)&#xA;     //SRV&#xA;    def equiOperator=u.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOperator.bzuId&quot;)&#xA;    equiOperator = equiOperator != null ? equiOperator : ''&#xA;    def equiConvOperator = equiOperator.equals('CSX') ? 'MAT' : equiOperator&#xA;    def srvAttr = gvyTxtMsgFmt.doIt('srv',equiConvOperator) &#xA;   &#xA;   //LOC&#xA;   def lkpSlot=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;   lkpSlot = lkpSlot!= null ? lkpSlot : '' &#xA;   def lkpSlotValue = lkpSlot.indexOf(&quot;.&quot;)== -1 ? lkpSlot : lkpSlot.substring(0,lkpSlot.indexOf(&quot;.&quot;));&#xA;   def lkpLocType=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;   def lkpLocTypeKey = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;   def loc = lkpLocTypeKey.equals('YARD') ? lkpSlotValue : ''&#xA;   def locAttr = gvyTxtMsgFmt.doIt('loc',loc)&#xA;   println(&quot;STRIP EVENT - 3&quot;) &#xA;   //OWNER&#xA;   def equiOwner =u.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOwner.bzuId&quot;)&#xA;   def ownerAttr = gvyTxtMsgFmt.doIt('owner',equiOwner)&#xA;&#xA;   //CWEIGHT &amp; TAREWEIGHT&#xA;   def equiTareKg= u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqTareWeightKg&quot;)&#xA;   def equiTareLB = equiTareKg != null ? Math.round(equiTareKg * 2.20462262 ) : ''&#xA;   def cWeightAttr = gvyTxtMsgFmt.doIt('cWeight',equiTareLB)&#xA;   def tareWeightAttr = gvyTxtMsgFmt.doIt('tareWeight',equiTareLB)&#xA;&#xA;   //RET_PORT &#xA;   def retport = u.getFieldValue(&quot;unitRouting.rtgReturnToLocation&quot;);  &#xA;   def retportAttr = gvyTxtMsgFmt.doIt('retPort',retport)&#xA;   println(&quot;STRIP EVENT - 4&quot;)&#xA;   //STRENGTH CODE&#xA;   def equiStrengthCode=u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqStrengthCode&quot;)&#xA;   def strengthAttr = gvyTxtMsgFmt.doIt('strength', equiStrengthCode)&#xA;&#xA;   //HARDCODED VALUES &#xA;   def dirAttr =  gvyTxtMsgFmt.doIt('dir', 'MTY')&#xA;   def dPortAttr =  gvyTxtMsgFmt.doIt('dPort', 'OPT')&#xA;   def dischargePortAttr = gvyTxtMsgFmt.doIt('dischargePort', 'OPT')&#xA;   def locationRunAttr = gvyTxtMsgFmt.doIt('locationRun', 'NO')&#xA;   def orientationAttr = gvyTxtMsgFmt.doIt('orientation', 'E') &#xA;&#xA;   println(&quot;STRIP EVENT - 5&quot;)&#xA;   //Location Status&#xA;   def _transitState=u.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;   def transitStateKey = _transitState != null ? _transitState.getKey() : ''&#xA;  &#xA;   def _drayStatus=u.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;   def drayStatusKey = _drayStatus!= null ? _drayStatus.getKey() : _drayStatus&#xA;&#xA;   def lkpCarrierId=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocId&quot;)&#xA;   def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;   def positionObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisPositionDetail&quot;);&#xA;   def locationType = positionObj.getLocationStatus(lkpLocTypeKey,lkpCarrierId,transitStateKey,drayStatusKey,gvyCmisUtil,eventType)&#xA;   def locationStatusAttr = gvyTxtMsgFmt.doIt('locationStatus',locationType) &#xA;&#xA;   &#xA;   //DAMAGE_CODE&#xA;   def damageCode = u.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsDamageSeverity&quot;)&#xA;   damageCode = damageCode != null ? damageCode.getKey() : damageCode&#xA;   def dmgCodeFmt = damageCode.equals('MAJOR') ? 'H' : (damageCode.equals('MINOR') ? 'L' : '')  &#xA;   def damageCodeAttr = gvyTxtMsgFmt.doIt('damageCode',dmgCodeFmt)&#xA;&#xA;   //LOCATION ROW&#xA;   def lineOperator=u.getFieldValue(&quot;unitLineOperator.bzuId&quot;)&#xA;   def locationRowAttr =  gvyTxtMsgFmt.doIt('locationRow',lineOperator)&#xA; &#xA;   //ACTION INFORMATION &#xA;   def actionObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisActionDetail&quot;);&#xA;   def actionAttributes = actionObj.doIt(gvyTxtMsgFmt,gvyEventObj,gvyBaseClass,u)     &#xA;   println(&quot;STRIP EVENT - 6&quot;)  &#xA;   def commodity =  getCommodityAuto(unit);&#xA;&#xA;   if(commodity.equals('MTYAUT') || commodity.equals('MTYCFS'))&#xA;   {&#xA;      actionAttributes = actionAttributes.replace(&quot;lastAction='null'&quot;,&quot;lastAction='ULD'&quot;)&#xA;      actionAttributes = actionAttributes.replace(&quot;action='null'&quot;,&quot;action='ULD'&quot;) &#xA;   }&#xA;   else if(eventNotes.startsWith('Gvy MTY'))&#xA;  {&#xA;      actionAttributes = actionAttributes.replace(&quot;lastAction='null'&quot;,&quot;lastAction='MTX'&quot;)&#xA;      actionAttributes = actionAttributes.replace(&quot;action='null'&quot;,&quot;action='MTX'&quot;)       &#xA;   }&#xA;   println(&quot;STRIP EVENT - 7&quot;)&#xA;  &#xA;  //LEG&#xA;  def legAttr = gvyTxtMsgFmt.doIt('leg','null') &#xA;  &#xA;  //TYPE CODE / HEIGHT&#xA;  def typeCodeAttr = gvyTxtMsgFmt.doIt('typeCode','%')&#xA;  def hgtAttr = gvyTxtMsgFmt.doIt('hgt','%')&#xA; &#xA;   //Passing List &#xA;   def stripAttributes = eventTypeAttr+unitClassAttr+ctrNoAttr+checkDigitAttr+srvAttr+locAttr+ownerAttr+cWeightAttr+tareWeightAttr+retportAttr+strengthAttr+dirAttr+dPortAttr+dischargePortAttr+locationRunAttr+orientationAttr+locationStatusAttr+damageCodeAttr+locationRowAttr+' '+actionAttributes+legAttr+typeCodeAttr+hgtAttr&#xA;   println(&quot;stripAttributes ::::::&quot;+stripAttributes)&#xA;&#xA;      def groovyXml = gvyTxtMsgFmt.createGroovyXml(stripAttributes) &#xA;      gvyBaseClass.sendXml(groovyXml)&#xA;    }catch(Exception e){&#xA;   e.printStackTrace();&#xA;   }&#xA;&#xA;  }//Method Ends&#xA;&#xA;  public String getCommodityAuto(Object unit)&#xA;  {&#xA;      def commodity = ''&#xA;      try&#xA;      {&#xA;           //set commodity value&#xA;          def commodityId=unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;)&#xA;          commodity = commodityId != null ? commodityId : ''&#xA;   &#xA;          if(commodity.equals('AUTO')){&#xA;                 commodity='MTYAUT'&#xA;          }else if(commodity.equals('AUTOCON')){&#xA;            commodity='MTYCFS'&#xA;          }&#xA;    &#xA;     }catch(Exception e){&#xA;        e.printStackTrace();&#xA;     }&#xA;     return commodity&#xA;  }&#xA;&#xA;  //Generate Release Records for ACETS before Stripping the unit   &#xA;  public void processHoldsReleaseStrip(Object event, String holds,Object gvyBaseClass)&#xA;  {&#xA;     println(&quot;GvyCmisEventUnitStrip()&quot;)&#xA;     try{&#xA;        def unitProcessor = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisDataProcessor&quot;)&#xA;        def appendObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;)&#xA;        def unitXml = unitProcessor.doIt(event)&#xA;        def xmlGvyString = unitXml&#xA;&#xA;        println(&quot;After Getting the Unit &gt;&gt;&gt;&gt;&quot;)&#xA;        def unitHolds = holds != null ? holds : ''&#xA;        def holdsList = unitHolds.split(' ')&#xA;        for(aHold in holdsList)&#xA;       {&#xA;          println(&quot;aHold &gt;&gt;&gt;&gt;&quot;+aHold)&#xA;          xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;msgType=&quot;,aHold+'_RELEASE',null,null,null)&#xA;          xmlGvyString = stripHoldOfField(appendObj,xmlGvyString,&quot;crStatus=&quot;,aHold)&#xA;          xmlGvyString = stripHoldOfField(appendObj,xmlGvyString,&quot;comments=&quot;,aHold)&#xA;          xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;lastAction=&quot;,'ALT',null,null,null)&#xA;          xmlGvyString =  appendObj.addEventSpecificFldValue(xmlGvyString,&quot;action=&quot;,'ALT',null,null,null)&#xA;          // println('xmlGvyString -2 :::::'+xmlGvyString)&#xA;          gvyBaseClass.sendXml(xmlGvyString)&#xA;       }&#xA;     }catch(Exception e){&#xA;        e.printStackTrace();&#xA;     }&#xA;  }&#xA;  &#xA;  //Strip of Hold from CrStatus and Comments  &#xA;  public String stripHoldOfField(Object utilObj, String xmlGvyData, String field, String aHold)&#xA;  {&#xA;     def xmlGvyString = xmlGvyData&#xA;     try&#xA;    {&#xA;       def  fieldValue = utilObj.getFieldValues(xmlGvyString, field)&#xA;       def fieldNew = fieldValue.replace(aHold,'')&#xA;       fieldNew = fieldNew != null &amp;&amp; fieldNew.trim().length() &gt; 0  ? fieldNew.trim() : 'null'&#xA;       //println('fieldNew - 2:::'+fieldNew)&#xA;       xmlGvyString = utilObj.addEventSpecificFldValue(xmlGvyString,field,fieldNew,null,null,null); &#xA;       //println('stripHoldOfField - 3:::'+xmlGvyString)&#xA;    }&#xA;    catch(Exception e){&#xA;      e.printStackTrace()&#xA;    }&#xA;    return xmlGvyString&#xA;  }&#xA;&#xA;  public void stripUnit(Object event)&#xA;  {&#xA;    try&#xA;    {&#xA;         def gvyBaseClass = new GroovyInjectionBase()&#xA;         Event gvyEventObj = event.getEvent()&#xA;         def eventNotes = gvyEventObj.getEventNote()&#xA;         eventNotes = eventNotes != null ? eventNotes : ''&#xA;         def unit = event.getEntity()&#xA;&#xA;         if(eventNotes.startsWith('Gvy MTY'))&#xA;        {&#xA;          /* --- Call To get Strip values --- */&#xA;          processUnitStrip(unit, eventNotes, gvyBaseClass, gvyEventObj)&#xA;         }&#xA;          println(&quot;&lt;&lt;&lt;Strip Unit&gt;&gt;&gt;&quot;) &#xA;          /* --- Check and Create Release ACETS Msg before Stripping the Unit -- */&#xA;    &#xA;          def notesObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisCommentNotesField&quot;)&#xA;          if(!eventNotes.startsWith('Gvy MTY'))&#xA;         {&#xA;            def holds = notesObj.getUnitActiveHolds(unit) &#xA;             if(holds != null &amp;&amp; holds.length() &gt; 1){&#xA;                  processHoldsReleaseStrip(event,holds,gvyBaseClass)&#xA;            }&#xA;       &#xA;            /* --- Call To get Strip values --- */&#xA;            processUnitStrip(unit, eventNotes, gvyBaseClass, gvyEventObj)&#xA;          }&#xA;          println(&quot;After RELEASE PROCESSING&quot;)&#xA;      }catch(Exception e){&#xA;        e.printStackTrace();&#xA;      }&#xA;       &#xA;    }&#xA;&#xA;}" />
<digital-asset id="GvyInjAard" short-description="ACETS ARD Process" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.services.business.event.GroovyEvent&#xA;&#xA;class GvyInjAard extends GroovyInjectionBase {&#xA;&#x9;public String execute(Map inParameters) {&#xA;&#xA;&#x9;def ctrId = (String) inParameters.get(&quot;equipment-id&quot;);&#xA;&#x9;def vesvoyArd = (String) inParameters.get( &quot;vesvoy&quot;);&#xA;&#x9;def recDateArd = (String) inParameters.get( &quot;autoRecDate&quot;);&#xA;&#xA;&#x9;// Find the UFV&#xA;&#x9;log( &quot;Starting ARD Injection process.&quot;);&#xA;&#x9;def ufv;&#xA;&#x9;def unit;&#xA;&#x9;try {&#xA;&#x9;&#x9;ufv = findActiveUfv(ctrId);&#xA;&#x9;&#x9;unit = ufv.getUfvUnit();&#xA;&#x9;} catch ( Exception ex) {&#xA;&#x9;&#x9;fail((new StringBuilder()).append(ex.toString()).append(&quot; ERR_GVY_ARD_001. Could not find unit: &quot;).append( ctrId).toString());&#xA;&#x9;}&#xA;&#x9;def cmdyName = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyShortName&quot;);&#xA;&#x9;log( &quot;CmdyName=&quot; + cmdyName);&#xA;&#x9;if ( cmdyName != null &amp;&amp; ! cmdyName.contains( &quot;AUTO&quot;)) {&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_ARD_002. ARD commodity code: &quot; + cmdyArd + &quot; is not AUTO.&quot;);&#xA;&#x9;}&#xA;&#xA;def obDecVesvoy = ufv.getUfvIntendedObCv().toString();&#xA;&#xA;&#x9;//def obDecVesvoy = unit.getFieldValue( &quot;unitActiveUfv.ufvIntendedObCv&quot;);&#xA;&#x9;log( &quot;obDecVesvoy=&quot; + obDecVesvoy);&#xA;&#x9;if ( obDecVesvoy != vesvoyArd) {&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_ARD_003. OB Carrier in N4: &quot; + obDecVesvoy + &quot; does not match ARD vesvoy: &quot; + vesvoyArd);&#xA;&#x9;}&#xA;&#xA;&#xA;&#x9;unit.setFieldValue(&quot;unitGoods.gdsBlNbr&quot;, recDateArd);&#xA;&#x9;log( &quot;post ARD event.&quot;);&#xA;&#x9;def event = new GroovyEvent( null, unit);&#xA;&#x9;event.postNewEvent( &quot;ARD&quot;);&#xA;}&#xA;}" />
<digital-asset id="GvyCmisEventUnitReroute" short-description="GvyCmisEventUnitReroute" groovy-code="public class GvyCmisEventUnitReroute&#xA;{&#xA;  public void processUnitReroute(Object unit, Object event, Object gvyBaseClass)&#xA;  {&#xA;    try{&#xA;       def unitNbr =unit.getFieldValue(&quot;unitId&quot;)&#xA;       println(&quot;XPS_Change_Routing: to update OPT destination - start.&quot; + unitNbr);&#xA;&#xA;      /* Pre-Conditions:&#xA;       *  1. Event created by XPS&#xA;       *  2. Event created by XPS for &quot;CHNG_RTNG&quot; (change routing)&#xA;       *  3. Category is storage&#xA;       *  4. Freight-kind is empty&#xA;      *  5. Destination is optional&#xA;      *  6. POD was changed&#xA;      */&#xA;&#xA;     //------ 1] Event created by XPS for a routing change&#xA;     if(unitNbr.startsWith('CNB'))&#xA;     {&#xA;         println(&quot;XPS_Change_Routing: STARTS WITH CNB&quot;)  &#xA;       def recorder = event.getEvent().getFieldValue(&quot;evntAppliedBy&quot;);&#xA;        if (recorder.indexOf(&quot;xps&quot;) &gt;= 0 &#xA;         &amp;&amp; recorder.indexOf(&quot;CHNG_RTNG&quot;) &gt;= 0&#xA;         &amp;&amp; unit.getFieldValue(&quot;unitCategory&quot;) == com.navis.argo.business.atoms.UnitCategoryEnum.STORAGE&#xA;         &amp;&amp; unit.getFieldValue(&quot;unitFreightKind&quot;) == com.navis.argo.business.atoms.FreightKindEnum.MTY&#xA;         &amp;&amp; unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;).equals(&quot;OPT&quot;)&#xA;         &amp;&amp; event.wasFieldChanged(&quot;POD&quot;) ) &#xA;&#x9; {&#xA;           println(&quot;XPS_Change_Routing: All pre-conditions for XPS change routing are met.&quot;);&#xA;&#xA;           /* Preform Update:&#xA;            * 1. Set destination to match POD&#xA;            */&#xA;           println(&quot;XPS_Change_Routing: Setting destinationt to &quot; + unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;));&#xA;           unit.setFieldValue(&quot;unitGoods.gdsDestination&quot;, unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;));&#xA;           println(&quot;XPS_Change_Routing: XPS Change routing update is complete.&quot;);&#xA;          }&#xA;        }&#xA;&#xA;       //------ 2] Cargo Status &#xA;       //changing export to import we want to set (export) booking number to null for Unit_reroute event type&#xA;      //Filter for Category=Import&#xA;      println( &quot;In Reroute code&quot;);&#xA;      def mtyFructoseGvy = gvyBaseClass.getGroovyClassInstance( &quot;GvyUnitCargoStatus&quot;);&#xA;      def ret = mtyFructoseGvy.sendXml( &quot;CARGO_STATUS&quot;, event);&#xA;      println( ret);&#xA;      //api.sendXml(xml)&#xA;&#xA;     //----- 3] N4 TO CMIS data processing &#xA;     def unitDetails = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisDataProcessor&quot;)&#xA;     def unitDtl = unitDetails.doIt(event)&#xA;     gvyBaseClass.sendXml(unitDtl);&#xA;   }catch(Exception e){&#xA;      e.printStackTrace();&#x9;&#xA;    }&#xA; &#xA;&#xA;  } // processUnitReroute End&#xA; &#xA;}&#xA;" />
<digital-asset id="GvyCmisMessagesForAcets" short-description="GvyCmisMessagesForAcets" groovy-code="import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.services.business.event.EventFieldChange&#xA;&#xA;&#xA;public class GvyCmisMessagesForAcets&#xA;{&#xA;&#xA;   //UNIT_POSITION_CORRECTION&#xA;   public void unitPositionCorrection(String xmlGvyData, Object unit, Object GvyBaseClass)&#xA;  {&#xA;     try&#xA;    {&#xA;      def transitState=unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;      transitState = transitState != null ? transitState.getKey() : ''&#xA;      def lkpLocType=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;      def locType = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;&#xA;       def carrierOperatorIdOB = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.carrierOperatorId&quot;)&#xA;       carrierOperatorIdOB = carrierOperatorIdOB != null ? carrierOperatorIdOB : ''&#xA;       def carrierOperatorIdIB = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.carrierOperatorId&quot;)&#xA;       carrierOperatorIdIB  = carrierOperatorIdIB != null ? carrierOperatorIdIB : ''&#xA;       println(&quot;carrierOperatorIdIB ::&quot;+carrierOperatorIdIB+&quot;carrierOperatorIdOB ::&quot;+carrierOperatorIdOB)&#xA;&#xA;      def carrierTypeOB = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCarrierMode&quot;)&#xA;      carrierTypeOB = carrierTypeOB !=null ? carrierTypeOB.getKey() : ''&#xA;      def carrierTypeIdIB = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCarrierMode&quot;)&#xA;      carrierTypeIdIB = carrierTypeIdIB != null ? carrierTypeIdIB.getKey() : '' &#xA;      println(&quot;  carrierTypeOB ::&quot;+ carrierTypeOB+&quot;   carrierTypeIdIB ::&quot;+carrierTypeIdIB)&#xA;      &#xA;      def vesselLineOperator = carrierTypeOB.equals('VESSEL')   ? carrierOperatorIdOB : ( carrierTypeIdIB.equals('VESSEL') ? carrierOperatorIdIB : '')&#xA;&#xA;      def xmlGvyString = xmlGvyData&#xA;      println(&quot;Vessel Line :&quot;+vesselLineOperator+&quot;  LKPLocType:&quot;+locType+&quot;   T-State:&quot;+transitState)&#xA;       if( locType.equals('VESSEL') &amp;&amp; vesselLineOperator.equals('MAT')  &amp;&amp;&#xA;            (transitState.equals('S60_LOADED') || transitState.equals('S20_INBOUND')))&#xA;       {&#xA;         xmlGvyString = xmlGvyString.replace(&quot;lastAction='null'&quot;,&quot;lastAction='RHN'&quot;);&#xA;         xmlGvyString = xmlGvyString.replace(&quot;action='null'&quot;,&quot;action='RHN'&quot;) &#xA;         //println(&quot;xmlGvyString ::&quot;+xmlGvyString)&#xA;        GvyBaseClass.sendXml(xmlGvyString)&#xA;       }&#xA;     }catch(Exception e){&#xA;       e.printStackTrace();&#xA;     }&#xA;    &#xA;  }&#xA;   &#xA;}" />
<digital-asset id="PlaceUnitIntoSkipYard" short-description="PlaceUnitIntoSkipYard" groovy-code="import com.navis.argo.ContextHelper;&#xA;import com.navis.argo.business.atoms.LocTypeEnum;&#xA;import com.navis.argo.business.model.Position;&#xA;import com.navis.argo.business.model.Yard;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder;&#xA;import com.navis.road.business.util.RoadBizUtil;&#xA;import com.navis.framework.util.BizViolation;&#xA;import com.navis.framework.util.message.MessageLevel;&#xA;import com.navis.framework.util.internationalization.PropertyKey;&#xA;import com.navis.framework.util.internationalization.PropertyKeyFactory;&#xA;&#xA;public class PlaceUnitIntoSkipYard {&#xA;&#xA;    public static final String BEAN_ID = &quot;placeUnitIntoSkipYard&quot;;&#xA;    public static PropertyKey PLACE_UNIT_INTO_SKIP_YARD = PropertyKeyFactory.valueOf(&quot;gate.place_unit_into_skip_yard&quot;);&#xA;&#xA;    public void execute(TransactionAndVisitHolder dao, api) {&#xA;&#xA;        UnitFacilityVisit ufv = dao.getTran().getTranUfv();&#xA;        Position currentPos = ufv.getUfvLastKnownPosition();&#xA;        if (LocTypeEnum.VESSEL.equals(currentPos.getPosLocType())) {&#xA;            Yard moveYard = ContextHelper.getThreadYard();&#xA;            Position skipYardPos = Position.resolvePosition(ufv.getUfvFacility(),&#xA;                    LocTypeEnum.YARD, moveYard.getYrdId(), SKIP_YARD_BLOCK_NAME, null, ufv.getBasicLength());&#xA;            Unit unit = dao.getTran().getTranUnit();&#xA;            try {&#xA;                unit.move(skipYardPos);&#xA;            } catch (BizViolation bv) {&#xA;                RoadBizUtil.appendMessage(MessageLevel.SEVERE, PLACE_UNIT_INTO_SKIP_YARD, null);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    private static final String SKIP_YARD_BLOCK_NAME = &quot;SKPYRD&quot;;&#xA;}&#xA;" />
<digital-asset id="RejectWorkInstructionForContainerNotFound" short-description="RejectWorkInstructionForContainerNotFound" groovy-code="import java.util.Iterator;&#xA;import java.util.List;&#xA;&#xA;import com.navis.argo.business.atoms.WiMoveStageEnum;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.framework.util.internationalization.PropertyKey;&#xA;import com.navis.framework.util.internationalization.PropertyKeyFactory;&#xA;import com.navis.framework.util.message.MessageLevel;&#xA;import com.navis.inventory.MovesEntity;&#xA;import com.navis.inventory.MovesField;&#xA;import com.navis.inventory.business.api.UnitField;&#xA;import com.navis.inventory.business.moves.WorkInstruction;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.road.business.util.RoadBizUtil;&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder;&#xA;&#xA;public class RejectWorkInstructionForContainerNotFound {&#xA;&#xA;    public static final String BEAN_ID = &quot;rejectWorkInstructionForContainerNotFound&quot;;&#xA;    public static PropertyKey WORK_INSTRUCTION_NOT_FOUND = PropertyKeyFactory.valueOf(&quot;gate.work_instruction_not_found&quot;);&#xA;&#xA;    public void execute(TransactionAndVisitHolder dao, api) {&#xA;        UnitFacilityVisit ufv = dao.getTran().getTranUfv();&#xA;        List workInstructions = findWorkInstructionsByUfv(ufv);&#xA;        WorkInstruction activeWorkInstruction = null;&#xA;&#xA;        Iterator it = workInstructions.iterator();&#xA;        while (it.hasNext()) {&#xA;            WorkInstruction workInstruction = (WorkInstruction) it.next();&#xA;            String posSlot = workInstruction.getWiPosition().getPosSlot();&#xA;            if (CSXGATE_YARD_BLOCK_NAME.equals(posSlot) || CSXYARD_YARD_BLOCK_NAME.equals(posSlot)) {&#xA;                activeWorkInstruction = workInstruction;&#xA;                break;&#xA;            }&#xA;        }&#xA;&#xA;        if (activeWorkInstruction == null) {&#xA;            RoadBizUtil.appendMessage(MessageLevel.SEVERE, WORK_INSTRUCTION_NOT_FOUND, dao.getTran().getTranCtrNbr());&#xA;        }&#xA;    }&#xA;&#xA;    private List findWorkInstructionsByUfv(UnitFacilityVisit ufv) {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(MovesEntity.WORK_INSTRUCTION)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.WI_UFV_GKEY, ufv.getUfvGkey()))&#xA;                .addDqPredicate(PredicateFactory.ne(MovesField.WI_MOVE_STAGE, WiMoveStageEnum.COMPLETE));&#xA;&#xA;        return HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;    }&#xA;&#xA;    private static final String CSXGATE_YARD_BLOCK_NAME = &quot;CSXGT&quot;;&#xA;    private static final String CSXYARD_YARD_BLOCK_NAME = &quot;CSXYD&quot;;&#xA;}&#xA;" />
<digital-asset id="RejectContainerNotInGroup" short-description="RejectContainerNotInGroup" groovy-code="import com.navis.argo.business.reference.Group;&#xA;import com.navis.framework.util.internationalization.PropertyKey;&#xA;import com.navis.framework.util.internationalization.PropertyKeyFactory;&#xA;import com.navis.framework.util.message.MessageLevel;&#xA;import com.navis.inventory.business.units.Routing;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.road.business.util.RoadBizUtil;&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder;&#xA;&#xA;public class RejectContainerNotInGroup {&#xA;&#xA;    public static final String BEAN_ID = &quot;rejectContainerNotInGroup&quot;;&#xA;    public static PropertyKey CONTAINER_NOT_IN_GROUP = PropertyKeyFactory.valueOf(&quot;gate.container_not_in_group&quot;);&#xA;&#xA;    public void execute(TransactionAndVisitHolder dao, api) {&#xA;        Unit unit = dao.getTran().getTranUnit();&#xA;        String groupId = getGroupId(unit);&#xA;&#xA;        if (!GROUP_ID.equals(groupId)) {&#xA;            RoadBizUtil.appendMessage(MessageLevel.SEVERE, CONTAINER_NOT_IN_GROUP, dao.getTran().getTranCtrNbr(), groupId);&#xA;        }&#xA;    }&#xA;&#xA;    private String getGroupId(Unit unit) {&#xA;        Routing routing = unit.getUnitRouting();&#xA;        if (routing == null) {&#xA;            return null;&#xA;        }&#xA;&#xA;        Group group = routing.getRtgGroup();&#xA;        if (group == null) {&#xA;            return null;&#xA;        }&#xA;&#xA;        return group.getGrpId();&#xA;    }&#xA;&#xA;    private static final String GROUP_ID = &quot;PASSPASS&quot;;&#xA;}&#xA;" />
<digital-asset id="RejectInternalTruckUnknown" short-description="RejectInternalTruckUnknown" groovy-code="import java.io.Serializable;&#xA;&#xA;import com.navis.argo.ArgoEntity;&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.argo.ContextHelper;&#xA;import com.navis.argo.business.xps.model.XpeChe;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.framework.util.internationalization.PropertyKey;&#xA;import com.navis.framework.util.internationalization.PropertyKeyFactory;&#xA;import com.navis.framework.util.message.MessageLevel;&#xA;import com.navis.road.business.adaptor.Adaptor;&#xA;import com.navis.road.business.model.TruckVisitDetails;&#xA;import com.navis.road.business.util.RoadBizUtil;&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder;&#xA;&#xA;public class RejectInternalTruckUnknown {&#xA;&#xA;    public static String BEAN_ID = &quot;rejectInternalTruckUnknown&quot;;&#xA;    public static PropertyKey INTERNAL_TRUCK_ID_UNKNOWN = PropertyKeyFactory.valueOf(&quot;gate.internal_truck_id_unknown&quot;);&#xA;&#xA;    public void execute(TransactionAndVisitHolder dao, api) {&#xA;&#xA;        TruckVisitDetails tv = dao.getTv();&#xA;        if (tv == null) {&#xA;            return;&#xA;        }&#xA;&#xA;        String truckId = tv.getTvdtlsTruckId();&#xA;        if (truckId == null) {&#xA;            return;&#xA;        }&#xA;&#xA;        Serializable yardKey = ContextHelper.getThreadYardKey();&#xA;&#xA;        XpeChe xpeChe = findCheByShortName(truckId, yardKey);&#xA;&#xA;        if (xpeChe == null || xpeChe.getCheKind() != INTERNAL_TRUCK) {&#xA;            RoadBizUtil.appendMessage(MessageLevel.SEVERE, INTERNAL_TRUCK_ID_UNKNOWN, truckId);&#xA;        }&#xA;    }&#xA;&#xA;    private XpeChe findCheByShortName(String shortName, Serializable yardKey) {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(ArgoEntity.XPE_CHE)&#xA;                .addDqPredicate(PredicateFactory.eq(ArgoField.CHE_YARD, yardKey))&#xA;                .addDqPredicate(PredicateFactory.eq(ArgoField.CHE_SHORT_NAME, shortName));&#xA;&#xA;        return (XpeChe) HibernateApi.getInstance().getUniqueEntityByDomainQuery(dq);&#xA;    }&#xA;&#xA;    private static final Long INTERNAL_TRUCK = 3L;&#xA;}&#xA;" />
</argo:snx>

