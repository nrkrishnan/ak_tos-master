<?xml version="1.0" encoding="UTF-8"?>
<argo:snx xmlns:argo="http://www.navis.com/argo" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.navis.com/argo snx.xsd">
<digital-asset id="GvyCmisTxtMsgFormatter" short-description="GvyCmisTxtMsgFormatter" groovy-code="public class GvyCmisTxtMsgFormatter {&#xA;&#xA; public String doIt(Object attrName,Object attrValue ) &#xA; {&#xA;    def attrValueFmt = ''&#xA; &#xA;   //Converting value to String&#xA;    attrValue = replaceQuotes(''+attrValue)&#xA; &#xA;    if(attrValue == null || attrValue.trim().length() == 0){&#xA;        attrValueFmt = 'null'&#xA;      }else{&#xA;        attrValueFmt = attrValue  &#xA;      }&#xA;  &#xA;   def fmtValue = attrName+'=\''+attrValueFmt+'\' '&#xA;&#xA;   return fmtValue;&#xA; }&#xA;&#xA;   public  String replaceQuotes(Object message)&#xA;   {&#xA;     def msg = message.toString();&#xA;     def replaceAmp = msg.replaceAll('&amp;', '&amp;amp;');&#xA;           replaceAmp = replaceAmp.replaceAll('\'', '&amp;apos;');&#xA;     return replaceAmp; &#xA;    }&#xA;&#xA;   public String  createGroovyXml(String msgString)&#xA;  {&#xA;     def strBuff = new StringBuffer();&#xA;     strBuff.append( '&lt;GroovyMsg');&#xA;     strBuff.append(' '+msgString);&#xA;     strBuff.append( '/&gt;');&#xA;     return strBuff.toString();&#xA;   }&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyCmisUnitDetail" short-description="GvyCmisUnitDetail" groovy-code="public class GvyCmisUnitDetail {&#xA;&#xA; public String doIt(String equiClass, Object gvyTxtMsgFmt, Object unitObj)   &#xA; {&#xA;   println(&quot;In Class GvyCmisUnitDetail.doIt()&quot;)&#xA;   def u = unitObj&#xA;   //UNIT CLASS&#xA;   def unitClassAttr = gvyTxtMsgFmt.doIt('unitClass', equiClass)&#xA;   &#xA;   //CTRNO &amp; CHECK DIGIT &#xA;   def ctrNo = null&#xA;   def checkDigit = null&#xA;   def unitId=u.getFieldValue(&quot;unitId&quot;)&#xA;   if(equiClass.equals('CONTAINER') &amp;&amp; unitId.startsWith('MATU')){&#xA;      ctrNo = unitId.substring(4,unitId.length()-1)&#xA;      checkDigit = unitId.substring(unitId.length()-1)&#xA;   }else if(equiClass.equals('ACCESSORY')){&#xA; &#x9;ctrNo = unitId&#xA;       checkDigit = ''&#xA;   }else{&#xA;       ctrNo =unitId.substring(0,unitId.length()-1) &#xA;       checkDigit = unitId.substring(unitId.length()-1)&#xA;   }&#xA;   def ctrNoAttr = gvyTxtMsgFmt.doIt('ctrNo',ctrNo)&#xA;   def checkDigitAttr = gvyTxtMsgFmt.doIt('checkDigit',checkDigit)&#xA;   &#xA;   //CHASSIS NUMBER&#xA;   def carriage = u.getFieldValue(&quot;unitCarriageUe.ueEquipment.eqIdFull&quot;)&#xA;   def chassisNum = equiClass.equals('CHASSIS') ? unitId : carriage&#xA;   def chassisNumAttr = gvyTxtMsgFmt.doIt('chassisNumber',chassisNum)&#xA;   def unitFieldAttr = unitClassAttr+ctrNoAttr+checkDigitAttr+chassisNumAttr&#xA;  &#xA;  // println('unitFieldAttr : '+unitFieldAttr)&#xA;&#xA;   return unitFieldAttr;&#xA;   &#xA; }&#xA;&#xA; }//Class Ends" />
<digital-asset id="GvyCmisShipmentDetail" short-description="GvyCmisShipmentDetail" groovy-code="public class GvyCmisShipmentDetail {&#xA;&#xA;public String doIt(Object gvyTxtMsgFmt, Object unitObj)    &#xA;{ &#xA;  println(&quot;In Class GvyCmisShipmentDetail.doIt()&quot;)&#xA;&#xA;   def u = unitObj&#xA;  //BOOKING NUMBER&#xA;  def bookingNbr=u.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;)&#xA;  def bookingNbrAttr = gvyTxtMsgFmt.doIt('bookingNumber',bookingNbr)&#xA;&#xA;  //ARRDATE&#xA;  def arrDate = ''&#xA;  def arrDateAttr = gvyTxtMsgFmt.doIt('arrDate',arrDate)&#xA;&#xA;  //CONSIGNEE&#xA;  def _consignee=u.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;)&#xA;  def consigneeAttr = gvyTxtMsgFmt.doIt('consignee',_consignee)&#xA;  &#xA;  //SHIPPER&#xA;  def _shipper=u.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuName&quot;)&#xA;  def shipperAttr = gvyTxtMsgFmt.doIt('shipper',_shipper) &#xA;&#xA;  //CNEE CODE&#xA;  def _consigneeId=u.getFieldValue(&quot;unitGoods.gdsConsigneeBzu&quot;)&#xA;  def cneeCodeAttr = gvyTxtMsgFmt.doIt('cneeCode',_consigneeId)&#xA;&#xA;  //HAZF&#xA;  def isHazardous=u.getFieldValue(&quot;unitGoods.gdsIsHazardous&quot;)&#xA;  isHazardous = isHazardous == true ? 'Y' : '' &#xA;  def hazfAttr = gvyTxtMsgFmt.doIt('hazF',isHazardous)&#xA;&#xA;  //HAZ IMDG&#xA;  def hazImdg=u.getFieldValue(&quot;unitGoods.goodsThreeMainHazardCodes&quot;)&#xA;  def mostHazItem =   getMostHazMaterial(hazImdg)&#xA;  def hazImdgAttr = gvyTxtMsgFmt.doIt('hazImdg',mostHazItem)&#xA;&#xA;  //HAZ UNNUM&#xA;  def hazUnNum=u.getFieldValue(&quot;unitGoods.goodsThreeMainHazardUNNumbers&quot;)&#xA;  def mostHazNum =   getMostHazMaterial(hazUnNum)&#xA;  def hazUnNumAttr = gvyTxtMsgFmt.doIt('hazUnNum',mostHazNum)&#xA; &#xA;  //LOCATION CATEGORY - LAST FREE DATE - YY DOY&#xA;  def lastfreeDay = u.getFieldValue(&quot;unitActiveUfv.ufvLastFreeDay&quot;);               &#xA;  lastfreeDay = lastfreeDay != null ? convertToJulianDate(''+lastfreeDay) : '' &#xA;  def locationCategoryAttr = gvyTxtMsgFmt.doIt('locationCategory',lastfreeDay) &#xA;&#xA;  def shipmentFieldAttr = bookingNbrAttr+consigneeAttr+shipperAttr+cneeCodeAttr+hazfAttr+hazImdgAttr+hazUnNumAttr+locationCategoryAttr+arrDateAttr&#xA;&#xA;  //println('shipmentFieldAttr : '+shipmentFieldAttr)&#xA;&#xA;  return shipmentFieldAttr; &#xA;&#xA;}&#xA;&#xA;//Convert to Julian Date&#xA;public static String convertToJulianDate(String date)&#xA;{&#xA;  def year  = date.substring(0,4);&#xA;  def month = date.substring(5,7);&#xA;  def day   = date.substring(8,10);&#xA;  def newGregCal = new GregorianCalendar(Integer.parseInt(year),Integer.parseInt(month) - 1,Integer.parseInt(day))&#xA;  def lngTime = newGregCal.getTimeInMillis() &#xA;  def today = new Date(lngTime)&#xA;  def julianDate = new java.text.SimpleDateFormat(&quot;yyDDD&quot;)&#xA;  def dayOfYear = julianDate.format(today)&#xA;  return dayOfYear;&#xA;}&#xA;&#xA;public String getMostHazMaterial(String hazItem)&#xA;{&#xA;   def pattern = ','&#xA;&#xA;   if(hazItem != null){&#xA;     for(i in hazItem){&#xA;       if(i == pattern){&#xA;       def mostHazItem = hazItem.substring(0, hazItem.indexOf(i));&#xA;       return mostHazItem; &#xA;      }&#xA;     }&#xA;   }&#xA;  return hazItem; &#xA;}&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyCmisRtgProcessDetail" short-description="GvyCmisRtgProcessDetail" groovy-code="public class GvyCmisRtgProcessDetail {&#xA;&#xA; public String doIt(String strMsgType, Object gvyTxtMsgFmt, Object unitObj)    &#xA; {&#xA;   println(&quot;In Class GvyCmisRtgProcessDetail.doIt()&quot;)&#xA;   def u =  unitObj&#xA;   def _freightkind=u.getFieldValue(&quot;unitFreightKind&quot;)&#xA;   def freightkindKey = _freightkind != null ? _freightkind.getKey() : ''&#xA;&#xA;   def _category=u.getFieldValue(&quot;unitCategory&quot;)&#xA;   def categoryKey = _category != null ? _category.getKey() : ''&#xA;   &#xA;   def _transitState=u.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;   def transitStatekey = _transitState != null ? _transitState.getKey() : ''&#xA;&#xA;   def _drayStatus=u.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;   def drayStatusKey = _drayStatus!= null ? _drayStatus.getKey() : _drayStatus&#xA;&#xA;   def group=u.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;)&#xA;&#xA;   //COMMODITY - A2 Group with Freight Kind Commodity Code&#xA;   def _commodityId=u.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;)&#xA;   def cmdtyId = _commodityId != null ? _commodityId : ''&#xA;   def commodityId= commodityCode(cmdtyId)&#xA;   def commodityAttr= gvyTxtMsgFmt.doIt('commodity',commodityId)&#xA;     &#xA;   //DIR&#xA;   def dir =  getDir(categoryKey,transitStatekey)&#xA;   def dirAttr = gvyTxtMsgFmt.doIt('dir',dir)&#xA; &#xA;   //DSC - A1 (TState not appearing for ADVISED id unit not active)&#xA;   def dsc = getDsc(transitStatekey,drayStatusKey,group) &#xA;   def dscAttr = gvyTxtMsgFmt.doIt('dsc',dsc)&#xA;&#xA;   //PLAN DISP&#xA;   def planDisp = getPlanDisp(drayStatusKey, strMsgType)&#xA;   def planDispAttr = gvyTxtMsgFmt.doIt('planDisp',planDisp)&#xA;&#xA;   //DS - A1 - (Discussion to add more Conditions) &#xA;   def ds = getDs(freightkindKey,cmdtyId)&#xA;   def dsAttr = gvyTxtMsgFmt.doIt('ds',ds) &#xA;&#xA;   //ORIENTATION&#xA;   def orientation = freightkindKey.equals('MTY') ? 'E' : (freightkindKey.length() &gt; 1 ? 'F' : '')&#xA;   def orientationAttr = gvyTxtMsgFmt.doIt('orientation',orientation)&#xA;&#xA;   def rtgProcessFieldAttr = commodityAttr+dirAttr+dscAttr+planDispAttr+dsAttr+orientationAttr&#xA; &#xA;   return rtgProcessFieldAttr&#xA;   &#xA; }&#xA;&#xA; // Retrieves DS Field-Based on freightkindKey,commodityId &#xA; public String getDs(String freightkindKey,String cmdtyId)&#xA; {&#xA;    def ds = ''&#xA;    if(cmdtyId.equals('AUTOCON')){ &#xA;        ds = 'CON'&#xA;     }else if(cmdtyId.equals('AUTO')){&#xA;        ds = 'AUT'&#xA;     }else if (freightkindKey.equals('FCL')){&#xA;        ds = 'CY'&#xA;     }else{&#xA;        ds = ''&#xA;     }&#xA;   return ds &#xA; }&#xA; //Retrieves DSC Field-Based on transitState,drayStatus and group&#xA; public String getDsc(String transitState,String drayStatus, String group)&#xA; {&#xA;  def dsc = ''&#xA;  if(drayStatus.equals('OFFSITE') &amp;&amp; group.equals('SIT')){&#xA;     dsc = 'S'&#xA;  }else if (drayStatus.equals('OFFSITE') || drayStatus.equals('DRAYIN')){&#xA;     dsc = 'C'&#xA;  }else if(group.equals('SIT')){&#xA;     dsc = 'S'&#xA;  }else{&#xA;     dsc = ''&#xA;  }&#xA;  return dsc&#xA;}&#xA;// Retrieves PlanDisp Field-Based on DrayStatus and Eventype&#xA;public String getPlanDisp(String drayStatus, String eventType)&#xA;{&#xA;  def planDisp = ''&#xA;  if(drayStatus.equals('TRANSFER') &amp;&amp; eventType.equals('YB_ASSIGN')){&#xA;   planDisp='7' &#xA;  }else  if (drayStatus.equals('RETURN')&amp;&amp; eventType.equals('OFF_LEASE_ASSIGNMENT')){&#xA;    planDisp='9' &#xA;  }else if (drayStatus.equals('RETURN') &amp;&amp; eventType.equals('RETURN_TO_CUSTOMER_ASSIGN')){&#xA;    planDisp='A' &#xA;  }else if (drayStatus.equals('RETURN') &amp;&amp; eventType.equals('MDA_HOLD')){&#xA;   planDisp='B'&#xA;  }&#xA;   return planDisp;&#xA;}&#xA; // Retrieves DIR Field-Based on category &amp; transitState  &#xA; public  String getDir(String category,String transitState)&#xA; {&#xA;  def dir = ''&#xA;  if (category.equals('EXPRT') || category.equals('THRGH')){&#xA;    dir='OUT'&#xA;  }else if (category.equals('IMPRT')){&#xA;    dir='IN'&#xA;  }else if (category.equals('TRSHP') &amp;&amp; transitState.equals('S20_INBOUND')){&#xA;    dir = 'IN'&#xA;  }else if (category.equals('TRSHP') &amp;&amp; transitState.trim().length() &gt; 0){&#xA;    dir = 'OUT'&#xA;  }else{&#xA;    dir = 'MTY'&#xA;  }&#xA;  return dir;&#xA;}&#xA;&#xA;//Method Retrieves CommodityCode-CMIS Relation value  &#xA;public  String commodityCode(String commodity)&#xA;{&#xA;    def map = new HashMap()&#xA;    map.put(&quot;PINEAPPLE CANNED&quot;, &quot;CANNED P&quot;)&#xA;    map.put(&quot;PINEAPPLE FRESH&quot;, &quot;FRESH PI&quot;)&#xA;    map.put(&quot;GOLDEN STATE&quot;,&quot;GOLDNSTA&quot;)&#xA;    map.put(&quot;MTY MILK CASES&quot;, &quot;MLK CASE&quot;)&#xA;&#xA;    def commodityCode = map.get(commodity) != null ? map.get(commodity) : commodity;&#xA;    return commodityCode;&#xA;}&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyCmisRoutingDetail" short-description="GvyCmisRoutingDetail" groovy-code="public class GvyCmisRoutingDetail {&#xA;&#xA; public String doIt(Object gvyTxtMsgFmt, Object unitObj)    &#xA; {&#xA;   println(&quot;In Class GvyCmisRoutingDetail.doIt()&quot;)&#xA;    def u = unitObj&#xA;  &#xA;   //SHIPPER POOL&#xA;   def shipperPool = u.getFieldValue(&quot;unitRouting.rtgOPL.pointId&quot;); &#xA;   def shipperPoolAttr = gvyTxtMsgFmt.doIt('shipperPool',shipperPool)&#xA;&#xA;   //LOAD PORT&#xA;   def loadPort = u.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;)&#xA;   def loadPortAttr = gvyTxtMsgFmt.doIt('loadPort',loadPort)&#xA;&#xA;   //DISCHARGE PORT&#xA;   def dischargePort = u.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;   def dischargePortAttr = gvyTxtMsgFmt.doIt('dischargePort',dischargePort)&#xA;&#xA;   //DPORT&#xA;   def dPort=u.getFieldValue(&quot;unitGoods.gdsDestination&quot;)&#xA;   def dPortAttr = gvyTxtMsgFmt.doIt('dPort',dPort)&#xA;&#xA;   //RET_PORT &#xA;   def retport = u.getFieldValue(&quot;unitRouting.rtgReturnToLocation&quot;);  &#xA;   def retportAttr = gvyTxtMsgFmt.doIt('retPort',retport)&#xA;&#xA;def routingFieldAttr = shipperPoolAttr+loadPortAttr+dischargePortAttr+dPortAttr+retportAttr&#xA;&#xA;  // println('routingFieldAttr : '+routingFieldAttr)&#xA;&#xA;   return routingFieldAttr&#xA;&#xA; }&#xA;&#xA; }//Class Ends&#xA;" />
<digital-asset id="GvyCmisPositionDetail" short-description="GvyCmisPositionDetail" groovy-code="public class GvyCmisPositionDetail {&#xA;&#xA;public String doIt(String strMsgType, Object gvyTxtMsgFmt, Object unitObj)    &#xA;{&#xA;  println(&quot;In Class GvyCmisPositionDetail.doIt()&quot;)&#xA;  def u = unitObj   &#xA;  def lkpSlot=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;      lkpSlot = lkpSlot!= null ? lkpSlot : '' &#xA;  def lkpSlotValue = lkpSlot.indexOf(&quot;.&quot;)== -1 ? lkpSlot : lkpSlot.substring(0,lkpSlot.indexOf(&quot;.&quot;));&#xA;&#xA;  def lkpLocType=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;  def lkpLocTypeKey = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;&#xA;  def _transitState=u.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;  def transitStateKey = _transitState != null ? _transitState.getKey() : ''&#xA;  &#xA;  def _drayStatus=u.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;  def drayStatusKey = _drayStatus!= null ? _drayStatus.getKey() : _drayStatus&#xA;&#xA;  def vesselType = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);      &#xA;  def  vesselTypeKey = vesselType != null ? vesselType.getKey() : ''&#xA;&#xA;  &#xA;  //LOC &#xA;  def _loc = lkpLocTypeKey.equals('YARD') ? lkpSlotValue : ''&#xA;  def locAttr = gvyTxtMsgFmt.doIt('loc',_loc)&#xA;&#xA;  //CELL&#xA;  def _cell = lkpLocTypeKey.equals('VESSEL') ? lkpSlotValue : ''&#xA;  def cellAttr = gvyTxtMsgFmt.doIt('cell',_cell)&#xA;&#xA;  //LOCATION TIER -&#xA;  def locationTier = getLocationTier(lkpLocTypeKey, lkpSlotValue)&#xA;  def locationTierAttr = gvyTxtMsgFmt.doIt('locationTier',locationTier)&#xA;  &#xA;  //A1 LOCATION STATUS &#xA;  def locationType = getLocationStatus(lkpLocTypeKey,vesselTypeKey,transitStateKey,drayStatusKey)&#xA;  def locationStatusAttr = gvyTxtMsgFmt.doIt('locationStatus',locationType) &#xA;&#xA;  //LOCATION STALL CONFIG&#xA;  def locationStallConfig= u.getFieldValue(&quot;unitFlexString08&quot;) != null ? 'PS' : ''&#xA;  def locationStallConfigAttr =  gvyTxtMsgFmt.doIt('locationStallConfig',locationStallConfig) &#xA;  &#xA;def poistionFieldAttr = locAttr+cellAttr+locationTierAttr+locationStatusAttr+locationStallConfigAttr&#xA;&#xA;  return poistionFieldAttr&#xA;  &#xA; }&#xA; &#xA; private String getLocationTier(String lkpLocTypeKy, String lkpSlotVal)&#xA; {&#xA;   def locationTier = ''&#xA;   if(lkpLocTypeKy.equals('YARD'))&#xA;   {&#xA;     if(lkpSlotVal.startsWith('P2A') || lkpSlotVal.startsWith('P29') || lkpSlotVal.startsWith('29Z'))&#xA;     {&#xA;        locationTier = 'T2'&#xA;     }else if(lkpSlotVal.startsWith('WOA')){&#xA;        locationTier = 'T3'&#xA;     }else{&#xA;       locationTier = ''&#xA;     }&#xA;   }&#xA;   return locationTier&#xA; }&#xA;&#xA; private String getLocationStatus(String lkpLocTypeKy,String misc1Ky,String transitStateky,String drayStatusKy)&#xA; {&#xA;   def locationStatus = ''&#xA;   if(lkpLocTypeKy.equals('TRUCK')){&#xA;     locationStatus='3'&#xA;   }&#xA;  else if(lkpLocTypeKy.equals('YARD')){&#xA;              locationStatus='1' &#xA;   }&#xA;   else if(lkpLocTypeKy.equals('VESSEL'))&#xA;   {&#xA;        if(misc1Ky.equals('BARGE')){&#xA;            locationStatus='7'&#xA;        }&#xA;       else if(misc1Ky.equals('CELL'))&#xA;       {&#xA;          if(transitStateky.equals('S60_LOADED') || transitStateky.equals('S70_DEPARTED')){&#xA;              locationStatus='2'&#xA;          }else if(transitStateky.equals('S20_INBOUND')){&#xA;              locationStatus='4'&#xA;          }&#xA;       }&#xA;   }&#xA;  else if(strMsgType.equals('UNIT_OUT_GATE') &amp;&amp; drayStatusKy.equals('TRANSFER')) {&#xA;      locationStatus='7'&#xA;   }&#xA;   return locationStatus&#xA; }&#xA;  &#xA;&#xA; }//Class Ends" />
<digital-asset id="GvyCmisPhysicalStatusDetail" short-description="GvyCmisPhysicalStatusDetail" groovy-code="import com.navis.framework.business.Roastery&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.api.IFlagType&#xA;import com.navis.argo.business.atoms.FlagPurposeEnum&#xA;&#xA;public class GvyCmisPhysicalStatusDetail {&#xA;&#xA; public String doIt(String strMsgType, Object gvyTxtMsgFmt, Object unitObj)    &#xA; { &#xA;     println(&quot;In Class GvyCmisPhysicalStatusDetail.doIt()&quot;)&#xA;    def u = unitObj&#xA;    &#xA;    // LOCATION ROW&#xA;    def _lineOperator=u.getFieldValue(&quot;unitLineOperator.bzuId&quot;)&#xA;    def locationRowAttr =  gvyTxtMsgFmt.doIt('locationRow',_lineOperator)&#xA;&#xA;    //CW Weight&#xA;    def weightKg=u.getFieldValue(&quot;unitGoodsAndCtrWtKg&quot;)&#xA;    def weightLB = weightKg != null ? Math.round(weightKg * 2.2046) : ''&#xA;    def cwWeightAttr =  gvyTxtMsgFmt.doIt('cWeight',weightLB)&#x9;&#xA;&#xA;   //COMMENT  &#xA;   def comment=u.getFieldValue(&quot;unitRemark&quot;)&#xA;   String commentApp = '';&#xA;    if(comment != null &amp;&amp; comment.length() &gt; 65){&#xA;       int commentIndex = comment.substring(0,65).lastIndexOf(&quot; &quot;);&#xA;       commentApp = comment.substring(commentIndex+1,comment.length());&#xA;       comment = comment.substring(0,commentIndex);&#xA;    }&#xA;   def commentAttr =  gvyTxtMsgFmt.doIt('comments',comment)&#xA;&#xA;   //CRSSTATUS &#xA;   def crsStatus = getUnitActiveHolds(unitObj)&#xA;   def holdsApp = ''&#xA;   if(crsStatus.length() &gt; 10){  &#xA;       int commaIndex = crsStatus.substring(0,11).lastIndexOf(' ');&#xA;       holdsApp = crsStatus.substring(commaIndex+1,crsStatus.length());&#xA;       crsStatus = crsStatus.substring(0,commaIndex);&#xA;    }&#xA;    def crsStatusAttr = gvyTxtMsgFmt.doIt('crStatus',crsStatus)&#xA;&#xA;    //CARGO NOTES&#xA;    def cargoNotesValue = holdsApp.trim()+'_'+commentApp.trim()&#xA;    def cargoNotes = cargoNotesValue.trim().length() == 1 ? '' : cargoNotesValue&#xA;    def cargoNotesAttr = gvyTxtMsgFmt.doIt('cargoNotes',cargoNotes)&#xA;&#xA;   //SEAL&#xA;   def _seal1=u.getFieldValue(&quot;unitSealNbr1&quot;)&#xA;   def sealAttr = gvyTxtMsgFmt.doIt('seal',_seal1)&#xA;&#xA;   //STOW RESTRICTION CODE&#xA;   def stowId= u.getFieldValue(&quot;unitSpecialStow.stwId&quot;) &#xA;   def stowRestCode = stowId != null ? getStowCode(stowId) : ''&#xA;   def stowRestCodeAttr = gvyTxtMsgFmt.doIt('stowRestCode',stowRestCode)&#xA;&#xA;   //STOW FLAG&#xA;   def stowFlag = strMsgType!= null &amp;&amp; strMsgType.equals('REVIEW_FOR_STOW') ? 'Y' : ''&#xA;   def stowFlagAttr = gvyTxtMsgFmt.doIt('stowFlag',stowFlag) &#xA;&#xA;   //ODF&#xA;   def odf = u.getFieldValue(&quot;unitIsOog&quot;);  &#xA;   odf = odf == true ? 'Y' : ''&#xA;   def odfAttr = gvyTxtMsgFmt.doIt('odf',odf)&#xA;   &#xA;  def phyStatusFields = locationRowAttr+cwWeightAttr+commentAttr+crsStatusAttr+cargoNotesAttr+sealAttr+stowRestCodeAttr+stowFlagAttr+odfAttr&#xA;//  println('Phyysical Status Fields : '+phyStatusFields)&#xA;&#xA;  return phyStatusFields&#xA;&#xA;}&#xA;&#xA;    //Method Retrieves StowCode - CMIS Relation value&#xA;    public String getStowCode(String stowId)&#xA;   {&#xA;     def map = new HashMap()&#xA;     map.put(&quot;INSP&quot;, &quot;3&quot;)&#xA;     map.put(&quot;SHOP&quot;, &quot;W&quot;)&#xA;     map.put(&quot;CL&quot;, &quot;C&quot;)&#xA;    &#xA;    def stowCode = map.get(stowId) != null ? map.get(stowId) : stowId;&#xA;    return stowCode;&#xA;   }&#xA;&#xA;   public String getUnitActiveHolds(Object unitbase) &#xA;   {&#xA;     def map = new HashMap()      &#xA;     map.put('DRAY CANNOT LTV','')&#xA;     map.put('HOLD FOR BKG','HLD')&#xA;     map.put('CG_INSP','CG')   &#xA;&#xA;     def strBuffer = new StringBuffer()&#xA;     ServicesManager sm = (ServicesManager)Roastery.getBean(&quot;servicesManager&quot;);&#xA;     def flagIds = sm.getActiveFlagIds(unitbase);&#xA;      if (flagIds != null) {&#xA;        for(holdId in flagIds)&#xA;       {&#xA;         def  iFlageType = sm.getFlagTypeById(holdId)&#xA;         def flagPurpose =  iFlageType.getPurpose().getKey()&#xA;         if(flagPurpose.equals('HOLD')) {&#xA;             def appHoldId = map.get(holdId) != null ? map.get(holdId) : holdId &#xA;        //    println('HOLD ID : '+holdId+' APP_HOLD_ID :'+appHoldId) &#xA;             strBuffer.append(appHoldId+' ')&#xA;             }&#xA;           }&#xA;        }&#xA;      def fmtHoldId = strBuffer != null ? (''+strBuffer).trim() : strBuffer&#xA;      return fmtHoldId &#xA;   }&#xA; &#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyCmisFlexFieldDetail" short-description="GvyCmisFlexFieldDetail" groovy-code="public class GvyCmisFlexFieldDetail {&#xA;&#xA;public String doIt(Object gvyTxtMsgFmt, Object unitObj)    &#xA;{&#xA;  println(&quot;In Class GvyCmisFlexFieldDetail.doIt()&quot;)&#xA;  def u = unitObj&#xA;&#xA;  //HSF7 &#xA;  def hsf7 = u.getFieldValue(&quot;unitFlexString05&quot;)&#xA;  def hsf7Attr = gvyTxtMsgFmt.doIt('hsf7',hsf7)&#xA;   &#xA;  //PMD - Date formattting for DD&#xA;  def pmd = null; &#xA;  def chasType =u.getFieldValue(&quot;unitActiveUfv.ufvFlexString02&quot;)&#xA;  if(chasType != null){&#xA;    pmd = chasType;&#xA;  }else{&#xA;    def _pmdDt =u.getFieldValue(&quot;unitActiveUfv.ufvFlexDate01&quot;) &#xA;    def strpmd = _pmdDt != null ? (''+_pmdDt) : ''&#xA;    pmd =  strpmd.length() &gt; 10 ? strpmd.substring(8,10) : strpmd &#xA;   }&#xA;  def pmdAttr = gvyTxtMsgFmt.doIt('pmd',pmd)&#xA;&#xA;  //LOCATION RUN&#xA;  def  locationRun = ''&#xA;  if(chasType == null || chasType != &quot;MG&quot;){&#xA;      locationRun = 'NO'&#xA;   }else if(chasType.equals(&quot;MG&quot;)){&#xA;      locationRun= ''&#xA;   }&#xA;  def locationRunAttr =  gvyTxtMsgFmt.doIt('locationRun',locationRun) &#xA;&#xA;  //MISC2 - A1(flex fielsds-cargo status field Change code)&#xA;  def misc2 ='' &#xA;  def misc2Attr = gvyTxtMsgFmt.doIt('misc2',misc2)&#xA;&#xA;  //MISC3 &#xA;  def ufvFlexDate2=u.getFieldValue(&quot;unitActiveUfv.ufvFlexDate02&quot;)&#xA;  def flex2Fmt = ufvFlexDate2 = ufvFlexDate2 != null ? convertToJulianDate(''+ufvFlexDate2) : '' &#xA;  def ufvFlexDate3=u.getFieldValue(&quot;unitActiveUfv.ufvFlexDate03&quot;)&#xA;   def flex3Fmt = ufvFlexDate3 != null ? convertToJulianDate(''+ufvFlexDate3) : '' &#xA;  def misc3 = flex2Fmt + flex3Fmt&#xA;  def misc3Attr = gvyTxtMsgFmt.doIt('misc3',misc3)&#xA;&#xA;  def flexFieldAttr =  hsf7Attr+pmdAttr+locationRunAttr+misc2Attr+misc3Attr&#xA;  //println('flexFieldAttr : '+flexFieldAttr)&#xA;&#xA;  return flexFieldAttr&#xA;&#xA; }&#xA;&#xA;//Convert to Julian Date&#xA;public static String convertToJulianDate(String date)&#xA;{&#xA;  def year  = date.substring(0,4);&#xA;  def month = date.substring(5,7);&#xA;  def day   = date.substring(8,10);&#xA;  def newGregCal = new GregorianCalendar(Integer.parseInt(year),Integer.parseInt(month) - 1,Integer.parseInt(day))&#xA;  def lngTime = newGregCal.getTimeInMillis() &#xA;  def today = new Date(lngTime)&#xA;  def julianDate = new java.text.SimpleDateFormat(&quot;yyDDD&quot;)&#xA;  def dayOfYear = julianDate.format(today)&#xA;  //println(&quot;dayOfYearAsInt : &quot;+dayOfYear);&#xA;  return dayOfYear;&#xA;}&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyCmisEquiDetail" short-description="GvyCmisEquiDetail" groovy-code="public class GvyCmisEquiDetail {&#xA;&#xA; public String doIt(Object gvyTxtMsgFmt, Object unitObj, String eventName)    &#xA; {&#xA;   def u = unitObj&#xA;   println(&quot;In Class GvyCmisEquiDetail.doIt()&quot;)&#xA;   def _equiType=u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;)&#xA;   def _equiHeightmm=u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqHeightMm&quot;)&#xA;   def _equiMaterial=u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqMaterial&quot;)&#xA;   _equiMaterial = _equiMaterial!= null ? _equiMaterial.getKey() : ''&#xA;&#xA;   //TYPE CODE &#xA;   def typeCode = ''&#xA;   if(eventName != null &amp;&amp; eventName.equals('UNIT_PROPERTY_UPDATE')){&#xA;     typeCode = TypeCodeProcessing(_equiType,_equiHeightmm, _equiMaterial)&#xA;   }&#xA;   def typeCodeAttr = gvyTxtMsgFmt.doIt('typeCode',typeCode)&#xA;  &#x9;&#xA;   //TARE WEIGHT &#xA;   def equiTareKg=u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqTareWeightKg&quot;)&#xA;   def equiTareLB = equiTareKg != null ? Math.round(equiTareKg * 2.2046) : ''&#xA;   def tareWeightAttr = gvyTxtMsgFmt.doIt('tareWeight',equiTareLB)&#xA;&#xA;   //HGT - A1 Unit Expected Fmt-080600/090600&#xA;   def equiHgtlen = getEquiHeight(_equiHeightmm).replace(&quot;.&quot;, &quot;0&quot;)&#xA;   def equiHgtfmt = equiHgtlen.length() &gt; 3 ? &quot;0&quot;+equiHgtlen+&quot;0&quot; : &quot;0&quot;+equiHgtlen+&quot;00&quot;;&#xA;   def hgtAttr = gvyTxtMsgFmt.doIt('hgt',equiHgtfmt)&#x9;&#xA;&#xA;   //STRENGTH CODE&#xA;   def equiStrengthCode=u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqStrengthCode&quot;)&#xA;   def strengthAttr = gvyTxtMsgFmt.doIt('strength', equiStrengthCode)&#xA;&#xA;   //OWNER&#xA;   def _equiOwner =u.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOwnerbzuId&quot;)&#xA;   def ownerAttr = gvyTxtMsgFmt.doIt('owner',_equiOwner)&#xA;   &#xA;   //DMG_CODE&#xA;   def damageCode = u.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsDamageSeverity&quot;)&#xA;   damageCode = damageCode != null ? damageCode.getKey() : damageCode&#xA;   def dmgCodeFmt = damageCode.equals('MAJOR') ? 'H' : (damageCode.equals('MINOR') ? 'L' : '')  &#xA;   def damageCodeAttr = gvyTxtMsgFmt.doIt('damageCode',dmgCodeFmt)&#xA;&#xA;   //SRV&#xA;   def equiOperator=u.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOperator.bzuId&quot;)&#xA;   equiOperator = equiOperator != null ? equiOperator : ''&#xA;   def equiConvOperator = equiOperator.equals('CSX') ? 'MAT' : equiOperator&#xA;   def srvAttr = gvyTxtMsgFmt.doIt('srv',equiConvOperator) &#xA;   &#xA;   //TEMP &amp; TEMPERATURE MEASUREMENT UNIT&#xA;   def tempConvUnit = null&#xA;   def tempMeasurementUnit = null &#xA;   def tempReq = u.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempRequiredC&quot;);&#xA;   if(equiOperator.equals('MAT')){&#xA;     tempConvUnit = tempReq != null ? Math.round((tempReq * 9/5) + 32) : tempReq&#xA;     tempMeasurementUnit = tempConvUnit != null ? 'F' : '' &#xA;    }else{&#xA;      tempConvUnit  = tempReq != null ? Math.round(tempReq) : tempReq&#xA;      tempMeasurementUnit  = tempConvUnit != null ? 'C' : '' &#xA;    }&#xA;    println('tempConvUnit  :'+tempConvUnit+' tempMeasurementUnit :'+tempMeasurementUnit)&#xA;    def tempAttr = gvyTxtMsgFmt.doIt('temp',tempConvUnit)&#xA;    def tempMeasureUnitAttr = gvyTxtMsgFmt.doIt('tempMeasurementUnit',tempMeasurementUnit)&#xA;&#xA;    //ACCESSORY&#xA;   def accessory =u.getUnitAcryEquipIds()&#xA;   def accessoryAttr = gvyTxtMsgFmt.doIt('accessory',accessory)&#xA;  &#xA;    def equiFieldAttr = tareWeightAttr+typeCodeAttr+hgtAttr+strengthAttr+ownerAttr+damageCodeAttr+srvAttr+tempAttr+tempMeasureUnitAttr+accessoryAttr&#xA;    &#xA;   // println('EQUI FIELD ATTR : '+equiFieldAttr)&#xA;&#xA;    return equiFieldAttr&#xA;}&#xA;&#xA;//Equipment Material,Height Code mapping&#xA;public  String TypeCodeProcessing(String equiType,Object equiHeight, String equiMaterial)&#xA;{&#xA;    equiMaterial =  equiMaterial.equals('STEEL') ? 'ST' : (equiMaterial.equals('ALUMINUM') ? 'AL' : '')&#xA;   def equiTypeFmt = equiType.endsWith(&quot;H&quot;) ? equiType.substring(0, 3) : equiType&#xA;   def equiHgtVal = getEquiHeight(equiHeight).replace('.', '')&#xA;def equiHgtValFmt= equiHgtVal.length() &gt; 2 ? equiHgtVal.substring(0,2) : equiHgtVal.substring(0)&#xA;   def typeCode = equiTypeFmt +' '+equiHgtValFmt+equiMaterial&#xA;   return typeCode;&#xA;}&#xA;&#xA;private String getEquiHeight(Object equiHeight)&#xA;{&#xA;   def equiHgtVal = ''&#xA;   def equiHgtFeet = (equiHeight+31)* 0.003280;&#xA;   def equiHgt = new BigDecimal(&quot;&quot;+equiHgtFeet).setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue();&#xA;   equiHgtVal = &quot;&quot;+equiHgt;&#xA;   return equiHgtVal&#xA;}&#xA;&#xA;&#xA;&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyCmisActionDetail" short-description="GvyCmisActionDetail" groovy-code="public class GvyCmisActionDetail {&#xA;&#xA;  public String doIt(Object gvyTxtMsgFmt, Object event)    &#xA;  {&#xA;     println(&quot;In Class GvyCmisActionDetail.doIt()&quot;)&#xA;     //ACTION&#xA;     def action = ''&#xA;     def actionAttr = gvyTxtMsgFmt.doIt('action',action)&#xA;   &#xA;     //DATE &amp; TIME&#xA;    def dtfmt = ''+event.getEvntAppliedDate()&#xA;    def aDate  = dtfmt.substring(5,7)+&quot;/&quot;+dtfmt.substring(8,10)+&quot;/&quot;+dtfmt.substring(0,4)&#xA;    def aTime = dtfmt.substring(11,19)&#xA;    def aDateAttr = gvyTxtMsgFmt.doIt('aDate',aDate)&#xA;    def aTimeAttr = gvyTxtMsgFmt.doIt('aTime',aTime)&#xA;&#xA;    //DOER&#xA;    def doer = event.getEvntAppliedBy()&#xA;    def doerAttr = gvyTxtMsgFmt.doIt('doer',doer)&#xA;&#xA;    //SECTION CODE - Currently hardcoded&#xA;    def sectionCode = 'Z'&#xA;    def sectionCodeAttr = gvyTxtMsgFmt.doIt('sectionCode',sectionCode)&#xA;&#xA;    //LAST ACTION&#xA;    def lastAction = ''&#xA;    def lastActionAttr = gvyTxtMsgFmt.doIt('lastAction',lastAction)&#xA;  &#xA;    //LAST ADATE &#xA;    def lastADate = aDate&#xA;    def lastADateAttr = gvyTxtMsgFmt.doIt('lastADate',lastADate)&#xA;&#xA;    //LAST ATIME &#xA;    def lastATime = aTime&#xA;    def lastATimeAttr = gvyTxtMsgFmt.doIt('lastATime',lastATime)&#xA;&#xA;    //LAST DOER &#xA;    def lastDoer = doer&#xA;    def lastDoerAttr = gvyTxtMsgFmt.doIt('lastDoer',lastDoer)&#xA;&#xA;    //BLANK FIELDS&#xA;    def blankFieldAttr = blankFields(gvyTxtMsgFmt)&#xA;&#xA;   def actionFieldAttr = actionAttr+aDateAttr+aTimeAttr+doerAttr+sectionCodeAttr+lastActionAttr+lastADateAttr+lastATimeAttr+lastDoerAttr+blankFieldAttr&#xA;&#xA;  // println('actionFieldAttr : '+actionFieldAttr)&#xA; &#xA;   return  actionFieldAttr&#xA; }&#xA;&#xA;  //Appending Blank Fields For Cmis Processing  (Not Req in CMIS) &#xA;  public String blankFields(Object gvyTxtMsgFmt)&#xA; {&#xA;      //HAZFLAG OPEN/CLOSE &#xA;     def hazOpenCloseFlag=''&#xA;     def hazOpenCloseFlagAttr=gvyTxtMsgFmt.doIt('hazOpenCloseFlag',hazOpenCloseFlag)&#xA;&#xA;     //GATE SEQ &#xA;    def gateSeqNo = ''&#xA;    def gateSeqNoAttr = gvyTxtMsgFmt.doIt('gateSeqNo',gateSeqNo)&#xA;&#xA;    //AEI &#xA;    def aei = ''&#xA;    def aeiAttr = gvyTxtMsgFmt.doIt('aei',aei)&#xA;&#xA;    //DSS&#xA;    def _dss = ''&#xA;    def dssAttr = gvyTxtMsgFmt.doIt('dss',_dss)&#xA;   &#xA;    //ERF &#xA;    def erf = ''&#xA;    def erfAttr = gvyTxtMsgFmt.doIt('erf',erf)&#xA;&#xA;     def blankFields = hazOpenCloseFlagAttr+gateSeqNoAttr+aeiAttr+dssAttr+erfAttr&#xA;&#xA;     return blankFields&#xA;  }&#xA;  &#xA;}//Class Ends" />
<digital-asset id="GvyCmisDataProcessor" short-description="GvyCmisDataProcessor" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;&#xA;public class GvyCmisDataProcessor {&#xA;&#xA;public String doIt(Object event)    &#xA;{&#xA;  println(&quot;In Class GvyCmisDataProcessor.doIt()&quot;)&#xA;  &#xA;  //Calling Msg Formater class&#xA;  def gvyBaseClass = new GroovyInjectionBase()&#xA;  def gvyTxtMsgFmt = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisTxtMsgFormatter&quot;);&#xA;&#xA;  //Gets UNIT OBJECT&#xA;  Object unitObj = event.getEntity()&#xA;  //Gets EVENT ID&#xA;  Event evnt = event.getEvent()&#xA;  String msgType = evnt.getEventTypeId()&#xA;&#xA;  //EVENT TYPE&#xA;  def eventTypeAttr = gvyTxtMsgFmt.doIt('msgType',msgType)&#xA;     &#xA; // EQUIP CLASS   &#xA; def equiClass =unitObj.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA; def equiClassKey = equiClass != null ? equiClass.getKey() : equiClass&#xA;&#xA; def unitDetails = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUnitDetail&quot;);&#xA; def unitDetailsAttr = unitDetails.doIt(equiClassKey,gvyTxtMsgFmt,unitObj);&#xA; &#xA; def unitEquip = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEquiDetail&quot;);&#xA; def equipDetailAttr = unitEquip.doIt(gvyTxtMsgFmt,unitObj);&#xA;&#xA; def unitRtgProcess = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisRtgProcessDetail&quot;);&#xA; def rtgProcessAttr =unitRtgProcess.doIt(msgType,gvyTxtMsgFmt,unitObj);&#xA; &#xA; def unitRouting = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisRoutingDetail&quot;);&#xA; def routingAttr =unitRouting.doIt(gvyTxtMsgFmt,unitObj);&#xA;&#xA; def unitPhyStatus = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisPhysicalStatusDetail&quot;);&#xA; def phyStatusAttr =unitPhyStatus.doIt(msgType,gvyTxtMsgFmt,unitObj);&#xA;&#xA; def unitshipmentDetails = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisShipmentDetail&quot;);&#xA; def shipmentDetailsAttr =unitshipmentDetails.doIt(gvyTxtMsgFmt,unitObj);&#xA;&#xA; def unitposition = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisPositionDetail&quot;);&#xA; def positionAttr =unitposition.doIt(msgType,gvyTxtMsgFmt,unitObj);&#xA;&#xA; def unitpositionProc = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisPositionProcessDetail&quot;);&#xA; def positionProcAttr =unitpositionProc.doIt(unitObj,gvyTxtMsgFmt);&#xA;&#xA; def flexFields = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisFlexFieldDetail&quot;);&#xA; def unitFlexFieldsAttr =flexFields.doIt(gvyTxtMsgFmt,unitObj);&#xA;&#xA; def actionDetail = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisActionDetail&quot;);&#xA; def actionDetailAttr =actionDetail.doIt(gvyTxtMsgFmt, evnt);&#xA;&#xA;&#xA;def msgString = eventTypeAttr+' '+unitDetailsAttr+' '+equipDetailAttr+' '+rtgProcessAttr+' '+routingAttr+' '+phyStatusAttr+' '+shipmentDetailsAttr+' '+positionAttr+' '+positionProcAttr+' '+unitFlexFieldsAttr+' '+actionDetailAttr&#xA;&#xA;//Creates Groovy Xml &#xA;def groovyXml = gvyTxtMsgFmt.createGroovyXml(msgString)&#xA;&#xA;&#xA;gvyBaseClass.sendXml(groovyXml)&#xA;&#xA;println(&quot;GVY XML : &quot;+groovyXml)&#xA; }&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyCmisPositionProcessDetail" short-description="GvyCmisPositionProcessDetail" groovy-code="import com.navis.vessel.business.operation.VesselClass&#xA;import com.navis.vessel.business.operation.VesselClassHbr&#xA;import com.navis.vessel.business.atoms.VesselTypeEnum&#xA;&#xA;public class GvyCmisPositionProcessDetail {&#xA;  &#xA;public String doIt(Object u, Object gvyTxtMsgFmt)    &#xA;{&#xA;  println('GvyCmisPositionProcessDetail.doIt()')&#xA;  def lkpLocType=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;  def lkpLocTypeKey = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;&#xA;  def lkpCarrierId=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocId&quot;)&#xA;&#xA;  def _category=u.getFieldValue(&quot;unitCategory&quot;)&#xA;  def categoryKey = _category != null ? _category.getKey() : ''&#xA;   &#xA;  def _transitState=u.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;  def transitStateKey = _transitState != null ? _transitState.getKey() : ''&#xA;  &#xA;  def _drayStatus=u.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;  def drayStatusKey = _drayStatus!= null ? _drayStatus.getKey() : _drayStatus&#xA;&#xA;  def ibVesselType = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);      &#xA;  def ibVesselTypeKey = ibVesselType != null ? ibVesselType.getKey() : ''&#xA;&#xA;  def obVesselType = u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);      &#xA;  def obVesselTypeKey = obVesselType != null ? obVesselType.getKey() : ''&#xA;&#xA;  //ReArrange Fields Used by VESVOY / TRUCK / MISC&#xA;  def aibcarrierMode=u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCarrierMode&quot;)&#xA;  aibcarrierMode = aibcarrierMode!= null ? aibcarrierMode.getKey() : ''&#xA;  def inBoundCarrier = aibcarrierMode.equals('VESSEL') ? (ibVesselTypeKey.trim().length() &gt; 1 ? ibVesselTypeKey : 'GEN_VESSEL')   : aibcarrierMode   &#xA;&#xA;  def aobcarrierMode=u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCarrierMode&quot;) &#xA;  aobcarrierMode = aobcarrierMode != null ? aobcarrierMode.getKey() : ''&#xA;  def outBoundCarrier = aobcarrierMode.equals('VESSEL') ? (obVesselTypeKey.trim().length() &gt; 1 ? obVesselTypeKey : 'GEN_VESSEL')  : aobcarrierMode&#xA;&#xA;  def aibcarrierId=u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;)&#xA;  def dibcarrierId=u.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;)&#xA;  def aobcarrierId=u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;) &#xA;  def intdObCarrierId=u.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;) &#xA;  def dobcarrierId=u.getFieldValue(&quot;unitRouting.rtgDeclaredCv.cvId&quot;)&#xA;  &#xA;  //VESVOY&#xA;  def idOBCarrierId =  intdObCarrierId != null ? intdObCarrierId : dobcarrierId&#xA;  def adIBCarrierId = aibcarrierId != null ? aibcarrierId : dibcarrierId&#xA;  &#xA;  def vesvoy = getVesVoy(lkpLocTypeKey,lkpCarrierId,categoryKey,transitStateKey,idOBCarrierId, adIBCarrierId)&#xA;  def vesvoyAttr = gvyTxtMsgFmt.doIt('vesvoy',vesvoy)&#xA;  //println('VESVOY : '+vesvoy)&#xA;&#xA;&#xA;  //TRUCK&#xA;  def truckValue = '' &#xA;  def aiObCarrierId = aobcarrierId != null ? aobcarrierId : intdObCarrierId&#xA;  truckValue = getTruck(lkpLocTypeKey,drayStatusKey,transitStateKey,aiObCarrierId,aibcarrierId,u)&#xA;&#xA;   //MISC1&#xA;  def misc1Value = ''&#xA;  //Ship to Ship&#xA;  //println('IB_CARRIER :'+inBoundCarrier+'  OB_CARRIER: '+outBoundCarrier)&#xA;  //println('LKP_LOC_TYPE:'+lkpLocTypeKey+'LKP_CARRIER_ID:'+lkpCarrierId)&#xA;  def aidObCarrierId = aobcarrierId != null ? aobcarrierId : (intdObCarrierId != null ? intdObCarrierId : dobcarrierId)&#xA;  if(inBoundCarrier.equals('CELL') &amp;&amp; outBoundCarrier.equals('CELL'))&#xA;  {&#xA;      misc1Value= getShipToShip(lkpLocTypeKey,lkpCarrierId,aibcarrierId,aobcarrierId,aidObCarrierId,adIBCarrierId)&#xA;     // println('MISC1_1 : '+misc1Value)&#xA;  }&#xA;   //Ship to Barge&#xA;  else if(inBoundCarrier.equals('CELL') &amp;&amp; outBoundCarrier.equals('BARGE'))&#xA;  {  &#xA;      ArrayList arrList = getShipToBarge(lkpLocTypeKey,lkpCarrierId,aobcarrierId,aidObCarrierId)&#xA;      misc1Value= arrList.get(0)&#xA;      //println('MISC1_2 : '+misc1Value)&#xA;      truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;      //println('truckValue_2 : '+truckValue)&#xA;  }&#xA;  //Barge to Ship&#xA;  else if(inBoundCarrier.equals('BARGE') &amp;&amp; outBoundCarrier.equals('CELL'))&#xA;  {&#xA;    ArrayList arrList = getBargeToShip(lkpLocTypeKey,lkpCarrierId,adIBCarrierId)&#xA;    misc1Value= arrList.get(0)&#xA;    //println('MISC1_3 : '+misc1Value)&#xA;    truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;    //println('truckValue_3 : '+truckValue)&#xA;  }&#xA;   //Barge to Barge&#xA;  else if(inBoundCarrier.equals('BARGE') &amp;&amp; outBoundCarrier.equals('BARGE'))&#xA;  {&#xA;     ArrayList arrList = getBargeToBarge(lkpLocTypeKey,lkpCarrierId,aibcarrierId,aobcarrierId,aidObCarrierId,adIBCarrierId)&#xA;     misc1Value = arrList.get(0)&#xA;     //println('MISC1_4 : '+misc1Value)&#xA;     truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;     //println('truckValue_4 : '+truckValue)&#xA;  }&#xA;   //Barge to AnyOtherCarrier&#xA;  else if(inBoundCarrier.equals('BARGE') &amp;&amp; (outBoundCarrier.equals('TRUCK') || outBoundCarrier.equals('UNKNOWN') || outBoundCarrier.equals('GEN_VESSEL')))&#xA;  {&#xA;     ArrayList arrList = getBargeToOtherCarriers(lkpLocTypeKey, lkpCarrierId,aibcarrierId)&#xA;     misc1Value = arrList.get(0)&#xA;     //println('MISC1_5 : '+misc1Value)&#xA;     truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;     //println('truckValue_5 : '+truckValue)&#xA;  }&#xA;  //TRUCK to BARGE&#xA;  else if(inBoundCarrier.equals('TRUCK') &amp;&amp; outBoundCarrier.equals('BARGE')) &#xA;  {&#xA;     ArrayList arrList = getTruckToBarge(lkpLocTypeKey,lkpCarrierId,aidObCarrierId,aobcarrierId,idOBCarrierId)&#xA;     misc1Value = arrList.get(0)&#xA;     //println('MISC1_6 : '+misc1Value)&#xA;     truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;     //println('truckValue_6 : '+truckValue)&#xA;  }&#xA;  //Last Truck Check &#xA;  if (truckValue.equals('GEN_TRUCK') || truckValue.equals('GEN_VESSEL') &#xA;                              || truckValue.equals('GEN_CARRIER'))&#xA;  {&#xA;    truckValue = ''&#xA;  }&#xA;  def truckAttr = gvyTxtMsgFmt.doIt('truck',truckValue)&#xA;  def misc1Attr = gvyTxtMsgFmt.doIt('misc1',misc1Value)&#xA;  //println('FINAL_TRUCK :'+truckValue+'  FINAL_MISC1:'+misc1Value)&#xA;&#xA;  //LOAD PORT &amp; DPORT&#xA;  def loadPort = u.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;)&#xA;  def dischargePort = u.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;  &#xA;  //ACTUAL VESSEL,ACTUAL VOYAGE,LEG&#xA;  def actualVessel = ''&#xA;  def actualVoyage = ''&#xA;  def leg = ''&#xA;  if(lkpLocTypeKey.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrierId).equals('BARGE')){&#xA;    actualVessel = misc1Value.length() &gt; 6 ? misc1Value.substring(0,3) : ''&#xA;    actualVoyage = misc1Value.length() &gt; 6 ? misc1Value.substring(3,6) : ''&#xA;    leg = misc1Value.length() &gt; 6 ? misc1Value.substring(6) : ''&#xA;  }&#xA;  else if(lkpLocTypeKey.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrierId).equals('CELL')){&#xA;    actualVessel = lkpCarrierId.length() &gt; 5 ? lkpCarrierId.substring(0,3) : ''&#xA;    actualVoyage = lkpCarrierId.length() &gt; 5 ? lkpCarrierId.substring(3) : ''&#xA;    leg = loadPort+'_'+dischargePort&#xA;  } &#xA;  def actualVesselAttr = gvyTxtMsgFmt.doIt('actualVessel',actualVessel)&#xA;  def actualVoyageAttr = gvyTxtMsgFmt.doIt('actualVoyage',actualVoyage)&#xA;  def legAttr = gvyTxtMsgFmt.doIt('leg',leg)&#xA;  //println('ACTUAL VESSEL : '+actualVessel+' ACTUAL VOYAGE: '+actualVoyage+' leg : '+leg)&#xA;&#xA;  def positionProFldAttr = vesvoyAttr+truckAttr+misc1Attr+actualVesselAttr+actualVoyageAttr+legAttr&#xA;  //println('positionProFldAttr : '+positionProFldAttr)&#xA;&#xA;  return positionProFldAttr&#xA;&#xA; &#xA; }//Method doit() Ends&#xA; &#xA;private ArrayList getTruckToBarge(String lkpLocTypeKy, String lkpCarrId, String aidObCarrId,String aobcarrId,String idOBCarrId)&#xA;{&#xA;   def misc1=''&#xA;   def truck = ''&#xA;   def bargeCode = ''&#xA;   ArrayList arrLst = new ArrayList()&#xA;&#xA;   if(lkpLocTypeKy.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrId).equals('BARGE')){&#xA;&#x9;misc1 = aidObCarrId&#xA;        bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0,3) : ''   &#xA;&#x9;truck = '9'+bargeCode&#xA;   }&#xA;   else if(lkpLocTypeKy.equals('TRUCK')){&#xA;      misc1=aobcarrId&#xA;   }&#xA;   else if(lkpLocTypeKy.equals('YARD')){&#xA;     misc1 = idOBCarrId&#xA;   }&#xA;   arrLst.add(misc1)&#xA;   arrLst.add(truck)&#xA;&#xA;   return arrLst&#xA;}&#xA;&#xA;private ArrayList getBargeToOtherCarriers(String lkpLocTypeKy, String lkpCarrId, String aibcarrId)&#xA;{&#xA;   def misc1=''&#xA;   def truck = ''&#xA;   def bargeCode = ''&#xA;   ArrayList arrLst = new ArrayList()&#xA;&#xA;   if(lkpLocTypeKy.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrId).equals('BARGE')){&#xA;&#x9;misc1 = aibcarrId&#xA;        bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0,3) : ''   &#xA;&#x9;truck = '9'+bargeCode&#xA;   }&#xA;   arrLst.add(misc1)&#xA;   arrLst.add(truck)&#xA;&#xA;   return arrLst&#xA; }&#xA;&#xA;private ArrayList getBargeToBarge(String lkpLocTypeKy, String lkpCarrId, String aibcarrId, String aobcarrId, String aidObCarrId, String adIBCarrId)&#xA;{&#xA;   def misc1=''&#xA;   def truck = ''&#xA;   def bargeCode = ''&#xA;   ArrayList arrLst = new ArrayList()&#xA;&#xA;   if(lkpLocTypeKy.equals('VESSEL'))&#xA;   {&#xA;     if(lkpCarrId.equals(aibcarrId)){&#xA;&#x9;misc1 = adIBCarrId&#xA;        bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0,3) : ''   &#xA;&#x9;truck = '9'+bargeCode&#xA;     }&#xA;     else if(lkpCarrId.equals(aobcarrId)){&#xA;&#x9;misc1 = aidObCarrId&#xA;&#x9;bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0,3) : ''   &#xA;&#x9;truck = '9'+bargeCode&#xA;     }&#xA;   }&#xA;   if(lkpLocTypeKy.equals('YARD')){&#xA;&#x9; misc1 = adIBCarrId&#xA;   }&#xA;   arrLst.add(misc1)&#xA;   arrLst.add(truck)&#xA;&#xA;   return arrLst&#xA; }&#xA;&#xA;private ArrayList getBargeToShip(String lkpLocTypeKy,String lkpCarrId,String adIBCarrId)&#xA;{  &#xA;   def misc1=''&#xA;   def truck = ''&#xA;   ArrayList arrLst = new ArrayList()&#xA;   if(lkpLocTypeKy.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrId).equals('BARGE')){&#xA;&#x9;def bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0,3) : ''&#xA;&#x9;truck = '9'+bargeCode&#xA;   }&#xA;   if(lkpLocTypeKy.equals('VESSEL') || lkpLocTypeKy.equals('YARD')){&#xA;&#x9;misc1 = adIBCarrId&#xA;   }&#xA;   arrLst.add(misc1)&#xA;   arrLst.add(truck)&#xA;&#xA;   return arrLst&#xA;}&#xA;&#xA;private ArrayList getShipToBarge(String lkpLocTypeKy, String lkpCarrId,String aobcarrId, String aidObCarrId)&#xA;{&#xA;   def misc1=''&#xA;   def truck = ''&#xA;   ArrayList arrLst = new ArrayList()&#xA;&#xA;   if(lkpLocTypeKy.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrId).equals('CELL')){&#xA;&#x9;misc1 = aidObCarrId&#xA;   }&#xA;   else if(lkpLocTypeKy.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrId).equals('BARGE')){&#xA;&#x9;misc1 = aidObCarrId&#xA;&#x9;def bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0,3) : ''&#xA;&#x9;truck = '9'+bargeCode&#xA;   }&#xA;   else if(lkpLocTypeKy.equals('YARD')){&#xA;      misc1 = aidObCarrId&#xA;   }&#xA;   else if(kpLocTypeKy.equals('TRUCK')){&#xA;      misc1 = aobcarrId&#xA;   }&#xA;   arrLst.add(misc1)&#xA;   arrLst.add(truck)&#xA;&#xA;   return arrLst&#xA; }&#xA;&#xA; private String getShipToShip(String lkpLocTypeKy, String lkpCarrId, String aibcarrId, String aobcarrId, String aidObCarrId, String adIBCarrId)&#xA; {&#xA;     def misc1=''&#xA;     if(lkpLocTypeKy.equals('VESSEL'))&#xA;     {&#xA;        if(lkpCarrId.equals(aibcarrId)){&#xA;&#x9;   misc1 = aidObCarrId&#xA;&#x9;}&#xA;        else if(lkpCarrId.equals(aobcarrId)){&#xA;&#x9;   misc1 = adIBCarrId&#xA;&#x9;}&#xA;     }&#xA;     if(lkpLocTypeKy.equals('YARD'))&#xA;     {&#xA;&#x9; misc1 = adIBCarrId&#xA;     }&#xA;     return misc1&#xA; }&#xA;&#xA; private String getTruck(String lkpLocTypeKy,String drayStatusKy,String transitStateKy,String obCarrierId,String ibCarrierId, Object unit )&#xA; {&#xA;     def truck = ''&#xA;     if(lkpLocTypeKy.equals('TRUCK'))&#xA;     {&#xA;         if(drayStatusKy.equals('TRANSFER') &amp;&amp; transitStateKy.equals('S70_DEPARTED')){&#xA;            truck = 'YBUU'&#xA;         }&#xA;         else if(transitStateKy.equals('S30_ECIN')){&#xA;            truck = ibCarrierId&#xA;         }&#xA;         else{&#xA;           truck = obCarrierId&#xA;        }&#xA;     }&#xA;     else if (lkpLocTypeKy.equals('VESSEL') || lkpLocTypeKy.equals('YARD')){&#xA;         truck = unit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;&#x9;// println('DEST TRUCK :'+truck)&#xA;     }&#xA;&#xA;     return truck&#xA;  }&#xA; &#xA; private String getVesVoy(String lkpLocTypeKy,String lkpCarrId,String categoryKy,String transitStateKy,String obCarrierId,String  ibCarrierId )&#xA; {&#xA;     def vesVoy = ''&#xA;     if(lkpLocTypeKy.equals('VESSEL') &amp;&amp; (getVesselClassType(lkpCarrId).equals('CELL'))) {&#xA;         vesVoy = lkpCarrId&#xA;     }&#xA;    else if(lkpLocTypeKy.equals('YARD') || lkpLocTypeKy.equals('TRUCK') || &#xA;                 (lkpLocTypeKy.equals('VESSEL') &amp;&amp; (getVesselClassType(lkpCarrId).equals('BARGE'))))&#xA;    {&#xA;         if (categoryKy.equals('EXPRT') || categoryKy.equals('THRGH')){&#xA;             vesVoy= obCarrierId&#xA;         }else if (categoryKy.equals('IMPRT') ){&#xA;             vesVoy=ibCarrierId&#xA;         }else if (categoryKy.equals('TRSHP') &amp;&amp; transitStateKy.equals('S20_INBOUND'))  {&#xA;             vesVoy=ibCarrierId&#xA;         }else if (categoryKy.equals('TRSHP') &amp;&amp; transitStateKy.trim().length() &gt; 0){&#xA;             vesVoy= obCarrierId&#xA;         }&#xA;    }&#xA;    return vesVoy   &#xA;  }&#xA;&#xA; private String getVesselClassType(String vesselId)    &#xA; {&#xA;    def vesselClassId = vesselId != null &amp;&amp; vesselId.length() &gt;3 ? vesselId.substring(0,3) : ''&#xA;    VesselClass vesselClass = new VesselClass()&#xA;    vesselClass = vesselClass.findVesselClassById(vesselClassId)&#xA;    VesselTypeEnum  vesselTypeEnum = vesselClass.getVesclassVesselType()&#xA;    def vesselType = vesselTypeEnum.getKey()&#xA;    //println('VESSEL TYPE :'+vesselType)&#xA;    return vesselType&#xA; }&#xA; &#xA; }&#xA;" />
</argo:snx>

