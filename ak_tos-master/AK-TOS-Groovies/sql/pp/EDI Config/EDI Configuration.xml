<?xml version="1.0" encoding="UTF-8"?>
<argo:snx xmlns:argo="http://www.navis.com/argo" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.navis.com/argo snx.xsd">
<edi-trading-partner name="MAEU1" business-id="MAE" business-role="LINEOP" is-retired="N" life-cycle-state="OBS" />
<edi-trading-partner name="APLU" business-id="APL" business-role="LINEOP" is-retired="N" life-cycle-state="ACT">
  <mailboxes>
    <mailbox name="RECEIVE_APL_FLEET" direction="R" directory="/var/tmp/aplfleet" comm-type="FTP" comm-address="10.102.0.29" comm-folder="~/tos/ib/COEDOR" comm-passwd="L0werCAS" comm-user-id="mataedi1" life-cycle-state="ACT" />
  </mailboxes>
  <sessions>
    <session name="RECEIVE_APL_FLEET" direction="R" complex="653" message-class="SNX" description="Receive APL fleet files" last-run-time="2016-09-12T15:09:35" last-run-status="ERRORS" interchange-num-check-flag="N" is-auto-posted="N" life-cycle-state="ACT" edi-trading-partner="APLU">
      <mailboxes>
        <mailbox name="RECEIVE_APL_FLEET" is-primary="Y" />
      </mailboxes>
    </session>
  </sessions>
</edi-trading-partner>
<edi-trading-partner name="NRK-TEST" business-id="0000000150" business-role="SHIPPER" is-retired="N" life-cycle-state="ACT">
  <mailboxes>
    <mailbox name="NRK-TEST" direction="S" directory="temp" comm-type="NONE" life-cycle-state="ACT" />
    <mailbox name="TEST_MAILBOX" direction="R" directory="temp" comm-type="NONE" life-cycle-state="ACT" />
  </mailboxes>
  <sessions>
    <session name="TEST_SESSION" direction="R" complex="653" message-class="BOOKING" description="TEST" interchange-num-check-flag="N" is-auto-posted="N" life-cycle-state="ACT" edi-trading-partner="NRK-TEST">
      <mailboxes>
        <mailbox name="TEST_MAILBOX" is-primary="Y" />
      </mailboxes>
    </session>
    <session name="TEST-SESSION" direction="S" complex="653" message-class="BOOKING" description="TEST" interchange-num-check-flag="N" is-auto-posted="N" life-cycle-state="ACT" edi-trading-partner="NRK-TEST">
      <mailboxes>
        <mailbox name="NRK-TEST" is-primary="Y" />
      </mailboxes>
    </session>
  </sessions>
</edi-trading-partner>
<edi-trading-partner name="HLCUPROD" business-id="HLC" business-role="LINEOP" is-retired="N" life-cycle-state="ACT">
  <mailboxes>
    <mailbox name="RECEIVE_HLC_MANIFEST" direction="R" directory="C:\EDI" comm-type="NONE" life-cycle-state="OBS" />
    <mailbox name="RVE_HLC_MANI_TEST" direction="R" directory="C:\EDI" comm-type="NONE" life-cycle-state="OBS" />
  </mailboxes>
  <sessions>
    <session name="RECEIVE_HLC_MANIFEST" direction="R" complex="653" message-class="MANIFEST" message-map="RECEIVE_310_IN_4010" description="RECEIVE_HLC_MANIFEST" last-run-status="UNKNOWN" is-auto-posted="Y" life-cycle-state="OBS" edi-trading-partner="HLCUPROD">
      <mailboxes>
        <mailbox name="RECEIVE_HLC_MANIFEST" is-primary="Y" />
      </mailboxes>
    </session>
  </sessions>
</edi-trading-partner>
<edi-trading-partner name="MAEU" business-id="MAE" business-role="LINEOP" is-retired="N" life-cycle-state="ACT">
  <mailboxes>
    <mailbox name="RECEIVE_MAE_BOOKING" direction="R" directory="/var/tmp/edibookingmae" comm-type="FTP" comm-address="10.102.0.29" comm-folder="~/tos/ib/edi301" comm-passwd="L0werCAS" comm-user-id="mataedi1" life-cycle-state="ACT" />
    <mailbox name="SEND_MAE_BAPLIE2DUT" direction="S" directory="/var/tmp/edistowob" comm-type="SMTP" comm-address="1aktosdevteam@matson.com" life-cycle-state="ACT" />
    <mailbox name="SEND_MAE_322_LOAD" direction="S" directory="/var/tmp/edi322ob " comm-type="FTP" comm-address="10.102.0.29" comm-folder="~/tos/ob/edi322/LOAD" comm-passwd="L0werCAS" comm-user-id="mataedi1" life-cycle-state="ACT" />
    <mailbox name="RECEIVE_MAE_BAPLIE" direction="R" directory="var/tmp/ibbaplie" comm-type="NONE" life-cycle-state="ACT" />
    <mailbox name="SEND_MAE_BAPLIE_EMAI" direction="S" directory="/var/tmp/edistowob" comm-type="SMTP" comm-address="1aktosdevteam@matson.com" life-cycle-state="ACT" />
    <mailbox name="SEND_MAE_BAPLIE2KDK" direction="S" directory="/var/tmp/edistowob" comm-type="SMTP" comm-address="1aktosdevteam@matson.com" life-cycle-state="ACT" />
    <mailbox name="MAE_BAPLIE" direction="R" directory="c:\tmemp" comm-type="SFTP" comm-passwd="u8d$pYd3r" comm-user-id="tosedipd" life-cycle-state="OBS" />
    <mailbox name="SEND_MAE_322" direction="S" directory="/var/tmp/edi322ob" comm-type="FTP" comm-address="10.102.0.29" comm-folder="~/tos/ob/edi322" comm-passwd="L0werCAS" comm-user-id="mataedi1" life-cycle-state="ACT" />
    <mailbox name="SEND_MAE_322_PRE" direction="S" directory="/var/tmp/edi322ob" comm-type="FTP" comm-address="10.201.2.4" comm-folder="~/tos/ob/edi322" comm-passwd="L0werCAS" comm-user-id="mataedi1" life-cycle-state="OBS" />
    <mailbox name="SEND_MAE_322_DISCH" direction="S" directory="/var/tmp/edi322ob" comm-type="FTP" comm-address="10.102.0.29" comm-folder="~/tos/ob/edi322" life-cycle-state="OBS" />
    <mailbox name="SEND_MAE_322_DISC" direction="S" directory="/var/tmp/edi322ob" comm-type="FTP" comm-address="10.102.0.29" comm-folder="~/tos/ob/edi322/DISCH" comm-passwd="L0werCAS" comm-user-id="mataedi1" life-cycle-state="OBS" />
    <mailbox name="SEND_MAE_322_OUTGATE" direction="S" directory="/var/tmp/edi322ob " comm-type="FTP" comm-address="10.102.0.29" comm-folder="~/tos/ob/edi322/OUTGATE" comm-passwd="L0werCAS" comm-user-id="mataedi1" life-cycle-state="ACT" />
    <mailbox name="RECEIVE_MAE_BOOK_TES" direction="R" directory="/var/tmp/snxmailbox/ANK" comm-type="NONE" life-cycle-state="ACT" />
    <mailbox name="SEND_MAE_BAPLIE_FTP" direction="S" directory="/var/tmp/edistowob" comm-type="FTP" comm-address="10.102.0.29" comm-folder="~/tos/ob/baplie/Maersk" comm-passwd="changeme" comm-user-id="mataedi1" life-cycle-state="ACT" />
    <mailbox name="SEND_MAE_322_INGATE" direction="S" directory="/var/tmp/edi322ob" comm-type="FTP" comm-address="10.102.0.29" comm-folder="~/tos/ob/edi322/INGATES" comm-passwd="L0werCAS" comm-user-id="mataedi1" life-cycle-state="ACT" />
    <mailbox name="SEND_MAE_322_DIS" direction="S" directory="/var/tmp/edi322ob" comm-type="FTP" comm-address="10.102.0.29" comm-folder="~/tos/ob/edi322/DISH" comm-passwd="L0werCAS" comm-user-id="mataedi1" life-cycle-state="ACT" />
  </mailboxes>
  <sessions>
    <session name="MAE_BAPLIE" direction="R" complex="653" message-class="STOWPLAN" message-map="BAPLIE_20_IN" last-run-status="UNKNOWN" is-auto-posted="N" life-cycle-state="OBS" edi-trading-partner="MAEU">
      <mailboxes>
        <mailbox name="MAE_BAPLIE" is-primary="Y" />
      </mailboxes>
      <settings>
        <setting config-id="ARGOBAPLIE001" value="false" />
        <setting config-id="ARGOBAPLIE002" value="true" />
        <setting config-id="ARGOBAPLIE004" value="false" />
      </settings>
      <edi-filters>
        <edi-filter name="MAE BAPLIE IN" />
      </edi-filters>
    </session>
    <session name="RECEIVE_MAE_BAPLIE" direction="R" complex="653" message-class="STOWPLAN" message-map="BAPLIE_20_IN" description="RECEIVE_MAE_BAPLIE" last-run-time="2017-03-08T00:30:46" last-run-status="COMPLETE" interchange-num-check-flag="N" is-auto-posted="Y" life-cycle-state="ACT" edi-trading-partner="MAEU">
      <mailboxes>
        <mailbox name="RECEIVE_MAE_BAPLIE" is-primary="Y" />
      </mailboxes>
      <edi-filters>
        <edi-filter name="PORT CODE TRANSLATION" />
        <edi-filter name="CLIENT BAPLIE TRANSLATION" />
      </edi-filters>
    </session>
    <session name="SEND_MAE_BAPLIE" direction="S" complex="653" message-class="STOWPLAN" message-map="BAPLIE_20_OUT_V5" description="SEND_MAE_BAPLIE" last-run-time="2016-04-20T04:05:58" last-run-status="COMPLETE" transaction-control-num="0" message-sequence-num="18" interchange-num-check-flag="N" is-auto-posted="N" life-cycle-state="ACT" edi-trading-partner="MAEU">
      <mailboxes>
        <mailbox name="SEND_MAE_BAPLIE_EMAI" is-primary="Y" />
        <mailbox name="SEND_MAE_BAPLIE_FTP" is-primary="N" />
        <mailbox name="SEND_MAE_BAPLIE2DUT" is-primary="N" />
      </mailboxes>
      <settings>
        <setting config-id="ARGOBAPLIE011" value="0" />
      </settings>
      <edi-filters>
        <edi-filter name="MAE_BAPLIE_OUT" />
      </edi-filters>
    </session>
    <session name="SEND MAE BAPLIE 2DUT" direction="S" complex="653" message-class="STOWPLAN" message-map="BAPLIE_20_OUT_V5" description="Sends a BAPLIE to DUT Marine" last-run-time="2016-10-11T23:54:15" last-run-status="COMPLETE" transaction-control-num="0" message-sequence-num="39" interchange-num-check-flag="N" is-auto-posted="N" life-cycle-state="ACT" edi-trading-partner="MAEU">
      <filter>
        <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
          <predicate verb="EQ" metafield="ufvActualObCv.cvOperator" value="^MAE/LINEOP" ui-value="MAE (Line Operator)" order="0" negated="false" parm-type="NO_PARM" />
        </predicate>
      </filter>
      <mailboxes>
        <mailbox name="SEND_MAE_BAPLIE2DUT" is-primary="Y" />
      </mailboxes>
      <settings>
        <setting config-id="ARGOBAPLIE011" value="0" />
      </settings>
      <edi-filters>
        <edi-filter name="MAE_BAPLIE_OUT" />
      </edi-filters>
    </session>
    <session name="SEND MAE BAPLIE 2KDK" direction="S" complex="653" message-class="STOWPLAN" message-map="BAPLIE_20_OUT_V5" description="Sends a BAPLIE to KDK Marine" last-run-time="2016-03-27T12:35:10" last-run-status="COMPLETE" transaction-control-num="0" message-sequence-num="3" interchange-num-check-flag="N" is-auto-posted="N" life-cycle-state="ACT" edi-trading-partner="MAEU">
      <filter>
        <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
          <predicate verb="EQ" metafield="ufvActualObCv.cvOperator" value="^MAE/LINEOP" ui-value="MAE (Line Operator)" order="0" negated="false" parm-type="NO_PARM" />
        </predicate>
      </filter>
      <mailboxes>
        <mailbox name="SEND_MAE_BAPLIE2KDK" is-primary="Y" />
      </mailboxes>
      <settings>
        <setting config-id="ARGOBAPLIE011" value="0" />
      </settings>
      <edi-filters>
        <edi-filter name="MAE_BAPLIE_OUT" />
      </edi-filters>
    </session>
    <session name="SEND_MAE_322_INGATE" direction="S" complex="653" message-class="ACTIVITY" message-map="SEND_MAE_322_MATV16" description="SEND_MAE_322_INGATE" last-run-time="2016-12-05T13:38:53" last-run-status="COMPLETE" transaction-control-num="13813" message-sequence-num="4004" interchange-num-check-flag="N" is-auto-posted="N" life-cycle-state="ACT" edi-trading-partner="MAEU">
      <filter>
        <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
          <predicate verb="EQ" metafield="ufvUnit.unitLineOperator" value="^MAE/LINEOP" ui-value="MAE" order="0" negated="false" parm-type="NO_PARM" />
          <predicate verb="NE" metafield="ufvUnit.unitRouting.rtgGroup" value="^ILB" ui-value="ILB (ILB Barge Load and discharge)" order="1" negated="false" parm-type="NO_PARM" />
          <predicate verb="OR" order="2" negated="false" parm-type="NO_PARM">
            <predicate verb="EQ" metafield="evntEventType" value="^UNIT_IN_GATE" ui-value="UNIT_IN_GATE" order="0" negated="false" parm-type="NO_PARM" />
          </predicate>
        </predicate>
      </filter>
      <mailboxes>
        <mailbox name="SEND_MAE_322_INGATE" is-primary="Y" />
      </mailboxes>
      <extract-extension name="MatsonAncActivityExtractInterceptor" type="EDI_EXTRACT_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;import com.navis.argo.util.XmlUtil&#xA;import com.navis.external.edi.entity.AbstractEdiExtractInterceptor&#xA;import com.navis.inventory.business.units.Routing&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.services.business.event.Event&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;import org.jdom.Element&#xA;&#xA;/**&#xA; Set UNLOC code for Port of load.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 09/22/2015&#xA; *&#xA; * Date: 09/22/2015: 5:41 PM&#xA; * JIRA: CSDV-&#xA; * SFDC: 00145621&#xA; * Called from: Edi Session extract code extension for activity message&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;class MatsonAncActivityExtractInterceptor extends AbstractEdiExtractInterceptor {&#xA;  @Override&#xA;  public Element beforeEdiMap(Map inParams) {&#xA;    LOGGER.setLevel(Level.INFO);&#xA;    LOGGER.info(&quot;MatsonAncActivityExtractInterceptor, Started beforeEdiMap Method.&quot;);&#xA;    if (inParams == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor inParams is null.&quot;);&#xA;      return null;&#xA;    }&#xA;    Element xmlTransaction = (Element) inParams.get(&quot;XML_TRANSACTION&quot;);&#xA;    Event event = (Event) inParams.get(&quot;ENTITY&quot;);&#xA;    if (xmlTransaction == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor, xmlTransaction element is null.&quot;);&#xA;      return null;&#xA;    }&#xA;    if (event == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor, event entity is null.&quot;);&#xA;      return null;&#xA;    }&#xA;&#xA;    Unit unit = Unit.hydrate(event.getEventAppliedToGkey());&#xA;    if (Unit == null) {&#xA;      LOGGER.error(&#xA;              &quot;MatsonAncActivityExtractInterceptor, Unit not found for gkey&quot; + event.getEventAppliedToGkey());&#xA;      return null;&#xA;    }&#xA;    Element tranElement = changePOL(inParams, unit);&#xA;    LOGGER.info(&quot;MatsonAncActivityExtractInterceptor, completed beforeEdiMap Method.&quot;);&#xA;    return tranElement;&#xA;  }&#xA;  private Logger LOGGER = Logger.getLogger(MatsonAncActivityExtractInterceptor.class);&#xA;&#xA;  private Element changePOL(Map inParams, Unit inUnit) {&#xA;    Routing routing = inUnit.getUnitRouting();&#xA;    Element xmlTransaction = (Element) inParams.get(&quot;XML_TRANSACTION&quot;);&#xA;    if (xmlTransaction == null || routing == null || routing.getRtgPOL() == null) {&#xA;      return null;&#xA;    }&#xA;    String unLocId = routing.getRtgPOL().getPointUnlocId();&#xA;    if (unLocId == null) {&#xA;      return null;&#xA;    }&#xA;    Element containerElement = xmlTransaction.getChild(&quot;ediContainer&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;    if (containerElement != null) {&#xA;      Element originalLoadPortElement = containerElement.getChild(&quot;loadPort&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;      if (originalLoadPortElement != null) {&#xA;        Element portCodesElement = originalLoadPortElement.getChild(&quot;portCodes&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;        if (portCodesElement != null) {&#xA;          portCodesElement.setAttribute(&quot;unLocCode&quot;, unLocId, XmlUtil.ARGO_NAMESPACE);&#xA;          return xmlTransaction;&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}" />
    </session>
    <session name="SEND_MAE_322_LOAD" direction="S" complex="653" message-class="ACTIVITY" message-map="SEND_MAE_322_MATV16" description="SEND_MAE_322_LOAD" last-run-time="2016-12-01T11:02:35" last-run-status="COMPLETE" transaction-control-num="13819" message-sequence-num="3957" interchange-num-check-flag="N" is-auto-posted="N" life-cycle-state="ACT" edi-trading-partner="MAEU">
      <filter>
        <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
          <predicate verb="EQ" metafield="ufvUnit.unitLineOperator" value="^MAE/LINEOP" ui-value="MAE" order="0" negated="false" parm-type="NO_PARM" />
          <predicate verb="NE" metafield="ufvUnit.unitRouting.rtgGroup" value="^ILB" ui-value="ILB (ILB Barge Load and discharge)" order="1" negated="false" parm-type="NO_PARM" />
          <predicate verb="OR" order="2" negated="false" parm-type="NO_PARM">
            <predicate verb="EQ" metafield="evntEventType" value="^UNIT_LOAD" ui-value="UNIT_LOAD" order="0" negated="false" parm-type="NO_PARM" />
          </predicate>
        </predicate>
      </filter>
      <mailboxes>
        <mailbox name="SEND_MAE_322_LOAD" is-primary="Y" />
      </mailboxes>
      <extract-extension name="MatsonAncActivityExtractInterceptor" type="EDI_EXTRACT_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;import com.navis.argo.util.XmlUtil&#xA;import com.navis.external.edi.entity.AbstractEdiExtractInterceptor&#xA;import com.navis.inventory.business.units.Routing&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.services.business.event.Event&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;import org.jdom.Element&#xA;&#xA;/**&#xA; Set UNLOC code for Port of load.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 09/22/2015&#xA; *&#xA; * Date: 09/22/2015: 5:41 PM&#xA; * JIRA: CSDV-&#xA; * SFDC: 00145621&#xA; * Called from: Edi Session extract code extension for activity message&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;class MatsonAncActivityExtractInterceptor extends AbstractEdiExtractInterceptor {&#xA;  @Override&#xA;  public Element beforeEdiMap(Map inParams) {&#xA;    LOGGER.setLevel(Level.INFO);&#xA;    LOGGER.info(&quot;MatsonAncActivityExtractInterceptor, Started beforeEdiMap Method.&quot;);&#xA;    if (inParams == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor inParams is null.&quot;);&#xA;      return null;&#xA;    }&#xA;    Element xmlTransaction = (Element) inParams.get(&quot;XML_TRANSACTION&quot;);&#xA;    Event event = (Event) inParams.get(&quot;ENTITY&quot;);&#xA;    if (xmlTransaction == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor, xmlTransaction element is null.&quot;);&#xA;      return null;&#xA;    }&#xA;    if (event == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor, event entity is null.&quot;);&#xA;      return null;&#xA;    }&#xA;&#xA;    Unit unit = Unit.hydrate(event.getEventAppliedToGkey());&#xA;    if (Unit == null) {&#xA;      LOGGER.error(&#xA;              &quot;MatsonAncActivityExtractInterceptor, Unit not found for gkey&quot; + event.getEventAppliedToGkey());&#xA;      return null;&#xA;    }&#xA;    Element tranElement = changePOL(inParams, unit);&#xA;    LOGGER.info(&quot;MatsonAncActivityExtractInterceptor, completed beforeEdiMap Method.&quot;);&#xA;    return tranElement;&#xA;  }&#xA;  private Logger LOGGER = Logger.getLogger(MatsonAncActivityExtractInterceptor.class);&#xA;&#xA;  private Element changePOL(Map inParams, Unit inUnit) {&#xA;    Routing routing = inUnit.getUnitRouting();&#xA;    Element xmlTransaction = (Element) inParams.get(&quot;XML_TRANSACTION&quot;);&#xA;    if (xmlTransaction == null || routing == null || routing.getRtgPOL() == null) {&#xA;      return null;&#xA;    }&#xA;    String unLocId = routing.getRtgPOL().getPointUnlocId();&#xA;    if (unLocId == null) {&#xA;      return null;&#xA;    }&#xA;    Element containerElement = xmlTransaction.getChild(&quot;ediContainer&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;    if (containerElement != null) {&#xA;      Element originalLoadPortElement = containerElement.getChild(&quot;loadPort&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;      if (originalLoadPortElement != null) {&#xA;        Element portCodesElement = originalLoadPortElement.getChild(&quot;portCodes&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;        if (portCodesElement != null) {&#xA;          portCodesElement.setAttribute(&quot;unLocCode&quot;, unLocId, XmlUtil.ARGO_NAMESPACE);&#xA;          return xmlTransaction;&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}" />
    </session>
    <session name="SEND_MAE_322_DIS" direction="S" complex="653" message-class="ACTIVITY" message-map="SEND_MAE_322_MATV16" description="SEND_MAE_322_DIS" last-run-time="2016-12-07T15:09:54" last-run-status="COMPLETE" transaction-control-num="13816" message-sequence-num="3994" interchange-num-check-flag="N" is-auto-posted="N" life-cycle-state="ACT" edi-trading-partner="MAEU">
      <filter>
        <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
          <predicate verb="EQ" metafield="ufvUnit.unitLineOperator" value="^MAE/LINEOP" ui-value="MAE" order="0" negated="false" parm-type="NO_PARM" />
          <predicate verb="NE" metafield="ufvUnit.unitRouting.rtgGroup" value="^ILB" ui-value="ILB (ILB Barge Load and discharge)" order="1" negated="false" parm-type="NO_PARM" />
          <predicate verb="OR" order="2" negated="false" parm-type="NO_PARM">
            <predicate verb="EQ" metafield="evntEventType" value="^UNIT_DISCH" ui-value="UNIT_DISCH" order="0" negated="false" parm-type="NO_PARM" />
          </predicate>
        </predicate>
      </filter>
      <mailboxes>
        <mailbox name="SEND_MAE_322_DIS" is-primary="Y" />
      </mailboxes>
      <extract-extension name="MatsonAncActivityExtractInterceptor" type="EDI_EXTRACT_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;import com.navis.argo.util.XmlUtil&#xA;import com.navis.external.edi.entity.AbstractEdiExtractInterceptor&#xA;import com.navis.inventory.business.units.Routing&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.services.business.event.Event&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;import org.jdom.Element&#xA;&#xA;/**&#xA; Set UNLOC code for Port of load.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 09/22/2015&#xA; *&#xA; * Date: 09/22/2015: 5:41 PM&#xA; * JIRA: CSDV-&#xA; * SFDC: 00145621&#xA; * Called from: Edi Session extract code extension for activity message&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;class MatsonAncActivityExtractInterceptor extends AbstractEdiExtractInterceptor {&#xA;  @Override&#xA;  public Element beforeEdiMap(Map inParams) {&#xA;    LOGGER.setLevel(Level.INFO);&#xA;    LOGGER.info(&quot;MatsonAncActivityExtractInterceptor, Started beforeEdiMap Method.&quot;);&#xA;    if (inParams == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor inParams is null.&quot;);&#xA;      return null;&#xA;    }&#xA;    Element xmlTransaction = (Element) inParams.get(&quot;XML_TRANSACTION&quot;);&#xA;    Event event = (Event) inParams.get(&quot;ENTITY&quot;);&#xA;    if (xmlTransaction == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor, xmlTransaction element is null.&quot;);&#xA;      return null;&#xA;    }&#xA;    if (event == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor, event entity is null.&quot;);&#xA;      return null;&#xA;    }&#xA;&#xA;    Unit unit = Unit.hydrate(event.getEventAppliedToGkey());&#xA;    if (Unit == null) {&#xA;      LOGGER.error(&#xA;              &quot;MatsonAncActivityExtractInterceptor, Unit not found for gkey&quot; + event.getEventAppliedToGkey());&#xA;      return null;&#xA;    }&#xA;    Element tranElement = changePOL(inParams, unit);&#xA;    LOGGER.info(&quot;MatsonAncActivityExtractInterceptor, completed beforeEdiMap Method.&quot;);&#xA;    return tranElement;&#xA;  }&#xA;  private Logger LOGGER = Logger.getLogger(MatsonAncActivityExtractInterceptor.class);&#xA;&#xA;  private Element changePOL(Map inParams, Unit inUnit) {&#xA;    Routing routing = inUnit.getUnitRouting();&#xA;    Element xmlTransaction = (Element) inParams.get(&quot;XML_TRANSACTION&quot;);&#xA;    if (xmlTransaction == null || routing == null || routing.getRtgPOL() == null) {&#xA;      return null;&#xA;    }&#xA;    String unLocId = routing.getRtgPOL().getPointUnlocId();&#xA;    if (unLocId == null) {&#xA;      return null;&#xA;    }&#xA;    Element containerElement = xmlTransaction.getChild(&quot;ediContainer&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;    if (containerElement != null) {&#xA;      Element originalLoadPortElement = containerElement.getChild(&quot;loadPort&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;      if (originalLoadPortElement != null) {&#xA;        Element portCodesElement = originalLoadPortElement.getChild(&quot;portCodes&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;        if (portCodesElement != null) {&#xA;          portCodesElement.setAttribute(&quot;unLocCode&quot;, unLocId, XmlUtil.ARGO_NAMESPACE);&#xA;          return xmlTransaction;&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}" />
    </session>
    <session name="SEND_MAE_322" direction="S" complex="653" message-class="ACTIVITY" message-map="SEND_MAE_322_MATV16" description="SEND_MAE_322" last-run-time="2016-12-05T13:29:25" last-run-status="COMPLETE" transaction-control-num="13811" message-sequence-num="3950" interchange-num-check-flag="N" is-auto-posted="N" life-cycle-state="ACT" edi-trading-partner="MAEU">
      <filter>
        <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
          <predicate verb="EQ" metafield="ufvUnit.unitLineOperator" value="^MAE/LINEOP" ui-value="MAE" order="0" negated="false" parm-type="NO_PARM" />
          <predicate verb="NE" metafield="ufvUnit.unitRouting.rtgGroup" value="^ILB" ui-value="ILB (ILB Barge Load and discharge)" order="1" negated="false" parm-type="NO_PARM" />
          <predicate verb="OR" order="2" negated="false" parm-type="NO_PARM">
            <predicate verb="EQ" metafield="evntEventType" value="^UNIT_OUT_GATE" ui-value="UNIT_OUT_GATE" order="0" negated="false" parm-type="NO_PARM" />
            <predicate verb="EQ" metafield="evntEventType" value="^UNIT_DISCH" ui-value="UNIT_DISCH" order="1" negated="false" parm-type="NO_PARM" />
            <predicate verb="EQ" metafield="evntEventType" value="^UNIT_IN_GATE" ui-value="UNIT_IN_GATE" order="2" negated="false" parm-type="NO_PARM" />
            <predicate verb="EQ" metafield="evntEventType" value="^UNIT_LOAD" ui-value="UNIT_LOAD" order="3" negated="false" parm-type="NO_PARM" />
          </predicate>
        </predicate>
      </filter>
      <mailboxes>
        <mailbox name="SEND_MAE_322" is-primary="Y" />
      </mailboxes>
      <edi-filters>
        <edi-filter name="MAE_322 OUT" />
      </edi-filters>
      <extract-extension name="MatsonAncActivityExtractInterceptor" type="EDI_EXTRACT_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;import com.navis.argo.util.XmlUtil&#xA;import com.navis.external.edi.entity.AbstractEdiExtractInterceptor&#xA;import com.navis.inventory.business.units.Routing&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.services.business.event.Event&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;import org.jdom.Element&#xA;&#xA;/**&#xA; Set UNLOC code for Port of load.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 09/22/2015&#xA; *&#xA; * Date: 09/22/2015: 5:41 PM&#xA; * JIRA: CSDV-&#xA; * SFDC: 00145621&#xA; * Called from: Edi Session extract code extension for activity message&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;class MatsonAncActivityExtractInterceptor extends AbstractEdiExtractInterceptor {&#xA;  @Override&#xA;  public Element beforeEdiMap(Map inParams) {&#xA;    LOGGER.setLevel(Level.INFO);&#xA;    LOGGER.info(&quot;MatsonAncActivityExtractInterceptor, Started beforeEdiMap Method.&quot;);&#xA;    if (inParams == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor inParams is null.&quot;);&#xA;      return null;&#xA;    }&#xA;    Element xmlTransaction = (Element) inParams.get(&quot;XML_TRANSACTION&quot;);&#xA;    Event event = (Event) inParams.get(&quot;ENTITY&quot;);&#xA;    if (xmlTransaction == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor, xmlTransaction element is null.&quot;);&#xA;      return null;&#xA;    }&#xA;    if (event == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor, event entity is null.&quot;);&#xA;      return null;&#xA;    }&#xA;&#xA;    Unit unit = Unit.hydrate(event.getEventAppliedToGkey());&#xA;    if (Unit == null) {&#xA;      LOGGER.error(&#xA;              &quot;MatsonAncActivityExtractInterceptor, Unit not found for gkey&quot; + event.getEventAppliedToGkey());&#xA;      return null;&#xA;    }&#xA;    Element tranElement = changePOL(inParams, unit);&#xA;    LOGGER.info(&quot;MatsonAncActivityExtractInterceptor, completed beforeEdiMap Method.&quot;);&#xA;    return tranElement;&#xA;  }&#xA;  private Logger LOGGER = Logger.getLogger(MatsonAncActivityExtractInterceptor.class);&#xA;&#xA;  private Element changePOL(Map inParams, Unit inUnit) {&#xA;    Routing routing = inUnit.getUnitRouting();&#xA;    Element xmlTransaction = (Element) inParams.get(&quot;XML_TRANSACTION&quot;);&#xA;    if (xmlTransaction == null || routing == null || routing.getRtgPOL() == null) {&#xA;      return null;&#xA;    }&#xA;    String unLocId = routing.getRtgPOL().getPointUnlocId();&#xA;    if (unLocId == null) {&#xA;      return null;&#xA;    }&#xA;    Element containerElement = xmlTransaction.getChild(&quot;ediContainer&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;    if (containerElement != null) {&#xA;      Element originalLoadPortElement = containerElement.getChild(&quot;loadPort&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;      if (originalLoadPortElement != null) {&#xA;        Element portCodesElement = originalLoadPortElement.getChild(&quot;portCodes&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;        if (portCodesElement != null) {&#xA;          portCodesElement.setAttribute(&quot;unLocCode&quot;, unLocId, XmlUtil.ARGO_NAMESPACE);&#xA;          return xmlTransaction;&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}" />
    </session>
    <session name="SEND_MAE_322_DISC" direction="S" complex="653" message-class="ACTIVITY" message-map="SEND_MAE_322_MATV16" description="SEND_MAE_322_DISC" last-run-time="2016-11-30T11:30:08" last-run-status="ERRORS" transaction-control-num="13806" message-sequence-num="3982" interchange-num-check-flag="N" is-auto-posted="N" life-cycle-state="OBS" edi-trading-partner="MAEU">
      <filter>
        <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
          <predicate verb="EQ" metafield="ufvUnit.unitLineOperator" value="^MAE/LINEOP" ui-value="MAE" order="0" negated="false" parm-type="NO_PARM" />
          <predicate verb="NE" metafield="ufvUnit.unitRouting.rtgGroup" value="^ILB" ui-value="ILB (ILB Barge Load and discharge)" order="1" negated="false" parm-type="NO_PARM" />
          <predicate verb="OR" order="2" negated="false" parm-type="NO_PARM">
            <predicate verb="EQ" metafield="evntEventType" value="^UNIT_DISCH" ui-value="UNIT_DISCH" order="0" negated="false" parm-type="NO_PARM" />
          </predicate>
        </predicate>
      </filter>
      <mailboxes>
        <mailbox name="SEND_MAE_322_DISC" is-primary="Y" />
      </mailboxes>
      <extract-extension name="MatsonAncActivityExtractInterceptor" type="EDI_EXTRACT_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;import com.navis.argo.util.XmlUtil&#xA;import com.navis.external.edi.entity.AbstractEdiExtractInterceptor&#xA;import com.navis.inventory.business.units.Routing&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.services.business.event.Event&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;import org.jdom.Element&#xA;&#xA;/**&#xA; Set UNLOC code for Port of load.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 09/22/2015&#xA; *&#xA; * Date: 09/22/2015: 5:41 PM&#xA; * JIRA: CSDV-&#xA; * SFDC: 00145621&#xA; * Called from: Edi Session extract code extension for activity message&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;class MatsonAncActivityExtractInterceptor extends AbstractEdiExtractInterceptor {&#xA;  @Override&#xA;  public Element beforeEdiMap(Map inParams) {&#xA;    LOGGER.setLevel(Level.INFO);&#xA;    LOGGER.info(&quot;MatsonAncActivityExtractInterceptor, Started beforeEdiMap Method.&quot;);&#xA;    if (inParams == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor inParams is null.&quot;);&#xA;      return null;&#xA;    }&#xA;    Element xmlTransaction = (Element) inParams.get(&quot;XML_TRANSACTION&quot;);&#xA;    Event event = (Event) inParams.get(&quot;ENTITY&quot;);&#xA;    if (xmlTransaction == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor, xmlTransaction element is null.&quot;);&#xA;      return null;&#xA;    }&#xA;    if (event == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor, event entity is null.&quot;);&#xA;      return null;&#xA;    }&#xA;&#xA;    Unit unit = Unit.hydrate(event.getEventAppliedToGkey());&#xA;    if (Unit == null) {&#xA;      LOGGER.error(&#xA;              &quot;MatsonAncActivityExtractInterceptor, Unit not found for gkey&quot; + event.getEventAppliedToGkey());&#xA;      return null;&#xA;    }&#xA;    Element tranElement = changePOL(inParams, unit);&#xA;    LOGGER.info(&quot;MatsonAncActivityExtractInterceptor, completed beforeEdiMap Method.&quot;);&#xA;    return tranElement;&#xA;  }&#xA;  private Logger LOGGER = Logger.getLogger(MatsonAncActivityExtractInterceptor.class);&#xA;&#xA;  private Element changePOL(Map inParams, Unit inUnit) {&#xA;    Routing routing = inUnit.getUnitRouting();&#xA;    Element xmlTransaction = (Element) inParams.get(&quot;XML_TRANSACTION&quot;);&#xA;    if (xmlTransaction == null || routing == null || routing.getRtgPOL() == null) {&#xA;      return null;&#xA;    }&#xA;    String unLocId = routing.getRtgPOL().getPointUnlocId();&#xA;    if (unLocId == null) {&#xA;      return null;&#xA;    }&#xA;    Element containerElement = xmlTransaction.getChild(&quot;ediContainer&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;    if (containerElement != null) {&#xA;      Element originalLoadPortElement = containerElement.getChild(&quot;loadPort&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;      if (originalLoadPortElement != null) {&#xA;        Element portCodesElement = originalLoadPortElement.getChild(&quot;portCodes&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;        if (portCodesElement != null) {&#xA;          portCodesElement.setAttribute(&quot;unLocCode&quot;, unLocId, XmlUtil.ARGO_NAMESPACE);&#xA;          return xmlTransaction;&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}" />
    </session>
    <session name="SEND_MAE_322_OUTGATE" direction="S" complex="653" message-class="ACTIVITY" message-map="SEND_MAE_322_MATV16" description="SEND_MAE_322_OUTGATE" last-run-time="2016-12-01T11:15:13" last-run-status="COMPLETE" transaction-control-num="13804" message-sequence-num="3967" interchange-num-check-flag="N" is-auto-posted="N" life-cycle-state="ACT" edi-trading-partner="MAEU">
      <filter>
        <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
          <predicate verb="EQ" metafield="ufvUnit.unitLineOperator" value="^MAE/LINEOP" ui-value="MAE" order="0" negated="false" parm-type="NO_PARM" />
          <predicate verb="NE" metafield="ufvUnit.unitRouting.rtgGroup" value="^ILB" ui-value="ILB (ILB Barge Load and discharge)" order="1" negated="false" parm-type="NO_PARM" />
          <predicate verb="OR" order="2" negated="false" parm-type="NO_PARM">
            <predicate verb="EQ" metafield="evntEventType" value="^UNIT_OUT_GATE" ui-value="UNIT_OUT_GATE" order="0" negated="false" parm-type="NO_PARM" />
          </predicate>
        </predicate>
      </filter>
      <mailboxes>
        <mailbox name="SEND_MAE_322_OUTGATE" is-primary="Y" />
      </mailboxes>
      <extract-extension name="MatsonAncActivityExtractInterceptor" type="EDI_EXTRACT_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;import com.navis.argo.util.XmlUtil&#xA;import com.navis.external.edi.entity.AbstractEdiExtractInterceptor&#xA;import com.navis.inventory.business.units.Routing&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.services.business.event.Event&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;import org.jdom.Element&#xA;&#xA;/**&#xA; Set UNLOC code for Port of load.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 09/22/2015&#xA; *&#xA; * Date: 09/22/2015: 5:41 PM&#xA; * JIRA: CSDV-&#xA; * SFDC: 00145621&#xA; * Called from: Edi Session extract code extension for activity message&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;class MatsonAncActivityExtractInterceptor extends AbstractEdiExtractInterceptor {&#xA;  @Override&#xA;  public Element beforeEdiMap(Map inParams) {&#xA;    LOGGER.setLevel(Level.INFO);&#xA;    LOGGER.info(&quot;MatsonAncActivityExtractInterceptor, Started beforeEdiMap Method.&quot;);&#xA;    if (inParams == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor inParams is null.&quot;);&#xA;      return null;&#xA;    }&#xA;    Element xmlTransaction = (Element) inParams.get(&quot;XML_TRANSACTION&quot;);&#xA;    Event event = (Event) inParams.get(&quot;ENTITY&quot;);&#xA;    if (xmlTransaction == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor, xmlTransaction element is null.&quot;);&#xA;      return null;&#xA;    }&#xA;    if (event == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor, event entity is null.&quot;);&#xA;      return null;&#xA;    }&#xA;&#xA;    Unit unit = Unit.hydrate(event.getEventAppliedToGkey());&#xA;    if (Unit == null) {&#xA;      LOGGER.error(&#xA;              &quot;MatsonAncActivityExtractInterceptor, Unit not found for gkey&quot; + event.getEventAppliedToGkey());&#xA;      return null;&#xA;    }&#xA;    Element tranElement = changePOL(inParams, unit);&#xA;    LOGGER.info(&quot;MatsonAncActivityExtractInterceptor, completed beforeEdiMap Method.&quot;);&#xA;    return tranElement;&#xA;  }&#xA;  private Logger LOGGER = Logger.getLogger(MatsonAncActivityExtractInterceptor.class);&#xA;&#xA;  private Element changePOL(Map inParams, Unit inUnit) {&#xA;    Routing routing = inUnit.getUnitRouting();&#xA;    Element xmlTransaction = (Element) inParams.get(&quot;XML_TRANSACTION&quot;);&#xA;    if (xmlTransaction == null || routing == null || routing.getRtgPOL() == null) {&#xA;      return null;&#xA;    }&#xA;    String unLocId = routing.getRtgPOL().getPointUnlocId();&#xA;    if (unLocId == null) {&#xA;      return null;&#xA;    }&#xA;    Element containerElement = xmlTransaction.getChild(&quot;ediContainer&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;    if (containerElement != null) {&#xA;      Element originalLoadPortElement = containerElement.getChild(&quot;loadPort&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;      if (originalLoadPortElement != null) {&#xA;        Element portCodesElement = originalLoadPortElement.getChild(&quot;portCodes&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;        if (portCodesElement != null) {&#xA;          portCodesElement.setAttribute(&quot;unLocCode&quot;, unLocId, XmlUtil.ARGO_NAMESPACE);&#xA;          return xmlTransaction;&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}" />
    </session>
    <session name="SEND_BAPLIE_TO_DUT" direction="S" complex="653" message-class="STOWPLAN" description="Sends a BAPLIE by email to DUT group" interchange-num-check-flag="N" is-auto-posted="N" life-cycle-state="OBS" edi-trading-partner="MAEU">
      <mailboxes>
        <mailbox name="SEND_MAE_BAPLIE_EMAI" is-primary="Y" />
      </mailboxes>
    </session>
    <session name="RECEIVE_MAE_BOOKING" direction="R" complex="653" message-class="BOOKING" description="RECEIVE_MAE_BOOKING" last-run-time="2017-04-07T03:30:45" last-run-status="COMPLETE" interchange-num-check-flag="N" is-auto-posted="Y" life-cycle-state="ACT" edi-trading-partner="MAEU">
      <mailboxes>
        <mailbox name="RECEIVE_MAE_BOOK_TES" is-primary="Y" />
      </mailboxes>
      <edi-filters>
        <edi-filter name="MAE_301_EQP_TYPE" />
      </edi-filters>
      <extension name="MATGvy301MsgFunctionCheck" scope="MATSON/ALASKA" type="EDI_POST_INTERCEPTOR" language="GROOVY" is-enabled="Y" description="MATGvy301MsgFunctionCheck" contents="import com.navis.argo.*&#xA;import com.navis.argo.BookingTransactionDocument.BookingTransaction&#xA;import com.navis.argo.BookingTransactionsDocument.BookingTransactions&#xA;import com.navis.argo.BookingTransactionDocument.BookingTransaction.EdiBookingItem&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.api.VesselVisitFinder&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.model.Complex&#xA;import com.navis.argo.business.model.Facility&#xA;import com.navis.argo.business.reference.CarrierItinerary&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.external.edi.entity.AbstractEdiPostInterceptor&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernatingEntity&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.orders.OrdersPropertyKeys&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import org.apache.log4j.Logger&#xA;import org.apache.xmlbeans.XmlObject;&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails;&#xA;import com.navis.vessel.business.schedule.VesselVisitLine;&#xA;&#xA;public class MATGvy301MsgFunctionCheck extends AbstractEdiPostInterceptor {&#xA;    UserContext context = ContextHelper.getThreadUserContext();&#xA;    Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#xA;    @Override&#xA;    public void beforeEdiPost(Serializable inSessionGkey, XmlObject inXmlObject) throws BizViolation {&#xA;        com.navis.argo.business.api.GroovyApi groovyApi =new GroovyApi();&#xA;        LOGGER.warn(&quot;in MATGvy301MsgFunctionCheck Started&quot; + timeNow);&#xA;&#xA;        if (inXmlObject == null) {&#xA;            LOGGER.warn(&quot;Input XML Object is null&quot;);&#xA;            throw BizFailure.create(OrdersPropertyKeys.ERRKEY__NULL_XMLBEAN, null);&#xA;        }&#xA;        if (!BookingTransactionsDocument.class.isAssignableFrom(inXmlObject.getClass())) {&#xA;            throw BizFailure.create(OrdersPropertyKeys.ERRKEY__TYPE_MISMATCH_XMLBEAN, null, inXmlObject.getClass().getName());&#xA;        }&#xA;        BookingTransactionsDocument bkgDocument = (BookingTransactionsDocument) inXmlObject;&#xA;        final BookingTransactions bkgtrans = bkgDocument.getBookingTransactions();&#xA;        final BookingTransaction[] bkgtransArray = bkgtrans.getBookingTransactionArray();&#xA;        if (bkgtransArray.length != 1) {&#xA;            throw BizFailure.create(OrdersPropertyKeys.ERRKEY__XML_TRANSACTION_DOCUMENT_LENGTH_EXCEED, null, String.valueOf(bkgtransArray.length));&#xA;        }&#xA;        BookingTransaction bkgTrans = bkgtransArray[0];&#xA;        try {&#xA;            EdiOperator ediOp = bkgTrans.getLineOperator();&#xA;            Facility facility = ContextHelper.getThreadFacility();&#xA;            Complex complex = ContextHelper.getThreadComplex();&#xA;            EdiVesselVisit EdiVv = bkgTrans.getEdiVesselVisit();&#xA;            ScopedBizUnit bkgLineOp = this.resolveLineOperator(EdiVv, ediOp);&#xA;            CarrierVisit ediCv = this.resolveCarrierVisit(EdiVv, complex, facility, bkgLineOp);&#xA;            Booking book = this.getBookingDetails(bkgTrans, ediCv, bkgLineOp);&#xA;            // if user changed the O/B carrier or POD of any units manually, then skip updating the Booking with NSS700&#xA;            // Update the booking with its old VV and POD.&#xA;            String vslId = EdiVv.getVesselId();&#xA;            try {&#xA;                if (vslId != null &amp;&amp; vslId.equalsIgnoreCase(&quot;DUMMY&quot;) &amp;&amp; book != null &amp;&amp; book.eqoTally != null &amp;&amp; book.eqoTally &gt; 0&#xA;                        &amp;&amp; book.getEqoVesselVisit() != null &amp;&amp; !vslId.equalsIgnoreCase(book.getEqoVesselVisit().getCvId())) {&#xA;                    CarrierVisit carrierVisit = book.getEqoVesselVisit();&#xA;                    VesselVisitDetails vesselVisitDetails = VesselVisitDetails.resolveVvdFromCv(carrierVisit);&#xA;                    String lyoldsId = vesselVisitDetails.getVvdVessel().getVesLloydsId();&#xA;                    String vesselName = vesselVisitDetails.getVvdVessel().getVesName();&#xA;                    EdiVv.setVesselId(lyoldsId);&#xA;                    EdiVv.setVesselName(vesselName);&#xA;                    VesselVisitLine vslVisitLine = VesselVisitLine.findVesselVisitLine(vesselVisitDetails, bkgLineOp);&#xA;                    if (vslVisitLine!= null) {&#xA;                        EdiVv.setOutOperatorVoyageNbr(vslVisitLine.getVvlineOutVoyNbr());&#xA;                    }&#xA;&#xA;                    EdiVv&#xA;                    if (bkgTrans.getDischargePort1() != null &amp;&amp; &quot;TBA&quot;.equalsIgnoreCase(bkgTrans.getDischargePort1().getPortId())) {&#xA;                        bkgTrans.getDischargePort1().setPortId(book.getEqoPod1().pointUnlocId);&#xA;                        bkgTrans.getDischargePort1().setPortName(book.getEqoPod1().pointId);&#xA;                    }&#xA;                }&#xA;            } catch (Exception e) {&#xA;                //groovyApi.sendEmail(&quot;gbabu@matson.com&quot;, &quot;gbabu@matson.com&quot;,&quot;edi error &quot;, e.toString());&#xA;                //ignore any errors&#xA;            }&#xA;            //bkg msg function code.&#xA;            this.checkMsgFunctionCode(bkgTrans, book);&#xA;            //update dates to null as the date format is not correct&#xA;            this.checkDateFormat(bkgTrans, book);&#xA;            // dkanndasan - Fix to consolidate booking items quantity&#xA;           this.checkBookingItems(bkgTrans);&#xA;        } catch (Exception e) {&#xA;            LOGGER.warn(&quot;Error while processing before edi post&quot;);&#xA;        }&#xA;        LOGGER.warn(&quot;in MATGvy301MsgFunctionCheck Ended&quot; + timeNow);&#xA;    }&#xA;&#xA;    @Override&#xA;    public void afterEdiPost(XmlObject inXmlObject, HibernatingEntity inHibernatingEntity, Map inParams) throws BizViolation {&#xA;        LOGGER.warn(&quot;in MATGvy301MsgFunctionCheck after EDI Post Started&quot;);&#xA;    }&#xA;&#xA;    public void checkDateFormat(BookingTransaction inBkgTrans, Booking inBook) throws BizViolation {&#xA;        try {&#xA;            inBkgTrans.setMsgProducedDateTime(null);&#xA;            Interchange interchange = inBkgTrans.getInterchange();&#xA;            interchange.setDate(null);&#xA;            interchange.setTime(null);&#xA;            inBkgTrans.setInterchange(interchange);&#xA;        } catch (Exception e) {&#xA;            LOGGER.warn(&quot; date and time set to null exception &quot; + e);&#xA;        }&#xA;    }&#xA;&#xA;    private void checkMsgFunctionCode(BookingTransaction inBkgTrans, Booking inBook) throws BizViolation {&#xA;        String msgFunction = this.getMsgFunction(inBkgTrans);&#xA;        if (msgFunction == null) {&#xA;            LOGGER.warn(&quot;msgFunction is Null&quot;);&#xA;            this.reportUserError(&quot;Message Function cannot be Null&quot;);&#xA;            return;&#xA;        }&#xA;        if (msgFunction.equalsIgnoreCase(&quot;D&quot;) || msgFunction.equalsIgnoreCase(&quot;R&quot;) || msgFunction.equalsIgnoreCase(&quot;E&quot;)) {&#xA;            LOGGER.warn(&quot;Booking Cancel is received No Action is Taken&quot;);&#xA;            return;&#xA;        }&#xA;        LOGGER.warn(&quot;msgFunction:&quot; + msgFunction);&#xA;        if (inBook == null) {&#xA;            inBkgTrans.setMsgFunction(&quot;N&quot;);&#xA;            LOGGER.warn(&quot;Msg Function:&quot; + &quot;N&quot;);&#xA;        }&#xA;    }&#xA;&#xA;    private Booking getBookingDetails(BookingTransaction inBkgTrans, CarrierVisit inCv, ScopedBizUnit inBkgLineOp) {&#xA;        EdiBooking bkgNbr = inBkgTrans.getEdiBooking();&#xA;        String bookingNumber = bkgNbr.getBookingNbr();&#xA;        Booking book = null;&#xA;        try {&#xA;            book = this.checkBooking(bookingNumber, inBkgLineOp, inCv);&#xA;            return book;&#xA;        } catch (Exception e) {&#xA;            LOGGER.warn(&quot; Exception:&quot; + e);&#xA;            return book;&#xA;        }&#xA;    }&#xA;&#xA;    private String getMsgFunction(BookingTransaction inBkgTrans) {&#xA;        return inBkgTrans.getMsgFunction();&#xA;    }&#xA;&#xA;    private CarrierVisit resolveCarrierVisit(EdiVesselVisit inEdiVv, Complex complex, Facility inFacility, ScopedBizUnit bkgLineOp) throws BizViolation {&#xA;        if (complex == null) {&#xA;            LOGGER.warn(&quot; Thread Complex is Null&quot;);&#xA;        }&#xA;        String vvConvention = null;&#xA;        String vvId = null;&#xA;        final String ibVoyg = null;&#xA;        final String obVoyg = null;&#xA;        if (inEdiVv != null) {&#xA;            vvConvention = inEdiVv.getVesselIdConvention();&#xA;            vvId = inEdiVv.getVesselId();&#xA;            ibVoyg = inEdiVv.getInVoyageNbr();&#xA;            if (ibVoyg == null) {&#xA;                ibVoyg = inEdiVv.getInOperatorVoyageNbr();&#xA;            }&#xA;            obVoyg = inEdiVv.getOutVoyageNbr();&#xA;            if (obVoyg == null) {&#xA;                obVoyg = inEdiVv.getOutOperatorVoyageNbr();&#xA;            }&#xA;        }&#xA;        CarrierVisit cv;&#xA;        VesselVisitFinder vvf = (VesselVisitFinder) Roastery.getBean(VesselVisitFinder.BEAN_ID);&#xA;        // Note: This will throw a BizViolation if the vessel visit can not be found&#xA;        LOGGER.warn('Convention ' + vvConvention + ' vvId' + vvId + &quot; voyage &quot; + ibVoyg);&#xA;        if (ibVoyg != null) {&#xA;            cv = vvf.findVesselVisitForInboundStow(complex, vvConvention, vvId, ibVoyg, null, null);&#xA;        } else {&#xA;            cv = vvf.findOutboundVesselVisit(complex, vvConvention, vvId, obVoyg, bkgLineOp, null);&#xA;        }&#xA;        LOGGER.warn(cv);&#xA;        return cv;&#xA;    }&#xA;&#xA;    private ScopedBizUnit resolveLineOperator(EdiVesselVisit inEdiVesselVisit, EdiOperator inEdiOperator) {&#xA;        LOGGER.warn(&quot; in Resolve Line Operator&quot;);&#xA;        ScopedBizUnit inLine = null;&#xA;        String lineCode;&#xA;        String lineCodeAgency;&#xA;        try {&#xA;            if (inEdiOperator != null) {&#xA;                lineCode = inEdiOperator.getOperator();&#xA;                lineCodeAgency = inEdiOperator.getOperatorCodeAgency();&#xA;                inLine = ScopedBizUnit.resolveScopedBizUnit(lineCode, lineCodeAgency, BizRoleEnum.LINEOP);&#xA;            }&#xA;            if (inLine == null &amp;&amp; inEdiVesselVisit != null &amp;&amp; inEdiVesselVisit.getShippingLine() != null) {&#xA;                lineCode = inEdiVesselVisit.getShippingLine().getShippingLineCode();&#xA;                lineCodeAgency = inEdiVesselVisit.getShippingLine().getShippingLineCodeAgency();&#xA;                inLine = ScopedBizUnit.resolveScopedBizUnit(lineCode, lineCodeAgency, BizRoleEnum.LINEOP);&#xA;            }&#xA;        } catch (Exception e) {&#xA;            LOGGER.warn(&quot;Cannot Resolve Line Operator&quot; + e);&#xA;        }&#xA;        return inLine;&#xA;    }&#xA;&#xA;    private Booking checkBooking(String inBkgNbr, ScopedBizUnit inLineOperator, CarrierVisit inCv) {&#xA;        LOGGER.warn(&quot; in Check Booking&quot;);&#xA;        if (inBkgNbr == null) {&#xA;            LOGGER.warn(&quot;inBkgNbr is null&quot;);&#xA;        }&#xA;        if (inLineOperator == null) {&#xA;            LOGGER.warn(&quot;inLineOperator is Null&quot;);&#xA;        }&#xA;        if (inCv == null) {&#xA;            LOGGER.warn(&quot;inCv is Null&quot;);&#xA;        }&#xA;        Booking bkg = Booking.findBookingByUniquenessCriteria(inBkgNbr, inLineOperator, inCv);&#xA;        LOGGER.warn(&quot;bkg:&quot; + bkg.toString());&#xA;        return bkg;&#xA;    }&#xA;&#xA;    private ScopedBizUnit getLineOperator(EdiVesselVisit inEdiVv) throws BizViolation {&#xA;        ScopedBizUnit line = null;&#xA;        String lineCode = null;&#xA;        String lineCodeAgency = null;&#xA;        if (inEdiVv != null &amp;&amp; inEdiVv.getShippingLine() != null) {&#xA;            lineCode = inEdiVv.getShippingLine().getShippingLineCode();&#xA;            lineCodeAgency = inEdiVv.getShippingLine().getShippingLineCodeAgency();&#xA;            line = ScopedBizUnit.resolveScopedBizUnit(lineCode, lineCodeAgency, BizRoleEnum.LINEOP);&#xA;        }&#xA;        if (line == null) {&#xA;            throw BizViolation.create(OrdersPropertyKeys.ERRKEY__UNKNOWN_ENCODED_LINE_ID, null, lineCodeAgency, lineCode);&#xA;        }&#xA;        return line;&#xA;    }&#xA;&#xA;    private boolean fcyPortNotInItinerary(CarrierVisit inCarrierVisit, RoutingPoint inRoutingPoint) {&#xA;        boolean notInItin = false;&#xA;        CarrierItinerary itin = inCarrierVisit.getCvCvd().getCvdItinerary();&#xA;        if (itin != null) {&#xA;            notInItin = itin.isPointInItinerary(inRoutingPoint);&#xA;        }&#xA;        return notInItin;&#xA;    }&#xA;    // Adds an error to the list of errors that will be displayed&#xA;    private void reportUserError(String message) {&#xA;        RoadBizUtil.messageCollector.appendMessage(BizFailure.create(message));&#xA;    }&#xA;&#xA;public void checkBookingItems(BookingTransaction inBkgTran)  throws BizViolation{&#xA;  List&lt;BookingTransactionDocument.BookingTransaction.EdiBookingItem&gt; bkgItems =  inBkgTran.getEdiBookingItemList();&#xA;LOGGER.warn(&quot;Bookings Items Size::&quot;+bkgItems.size());&#xA; HashMap&lt;String,Integer&gt; uniqueItemMap = new HashMap();&#xA;  for (EdiBookingItem bkgItem : bkgItems){&#xA;       String isoCode = bkgItem.getISOcode();&#xA;       int newQuantity = Integer.parseInt(bkgItem.getQuantity());&#xA;       int  quantity = uniqueItemMap.get(isoCode) == null?0:uniqueItemMap.get(isoCode);&#xA;        int finalQuantity = newQuantity+quantity;&#xA;       uniqueItemMap.put(isoCode,finalQuantity);&#xA;&#xA;}&#xA;LOGGER.warn(&quot;Unique Items Map ::::&quot;+uniqueItemMap);&#xA;&#xA; for (EdiBookingItem bkgItem : bkgItems){&#xA;int finalQty = uniqueItemMap.get(bkgItem.getISOcode());&#xA;if(finalQty!=null || finalQty==0){&#xA;bkgItem.setQuantity(String.valueOf(finalQty));&#xA;}&#xA;}&#xA;}&#xA;    private static final Logger LOGGER = Logger.getLogger(MATGvy301MsgFunctionCheck.class);&#xA;}" />
    </session>
  </sessions>
</edi-trading-partner>
<edi-trading-partner name="GEMS" business-id="MATU" business-role="LEASINGCO" is-retired="N" life-cycle-state="ACT">
  <mailboxes>
    <mailbox name="SEND_GEMS_STOW_RECON" direction="S" directory="/var/tmp/gemsstowrecon" comm-type="FTP" comm-address="10.102.0.29" comm-folder="~/MatNav/GEMS/IB/tos/stowrecon" comm-passwd="XSg4eDi!" comm-user-id="gxspftp1" life-cycle-state="ACT" />
  </mailboxes>
  <sessions>
    <session name="SEND_GEMS_STOW_RECON" direction="S" complex="653" message-class="STOWPLAN" message-map="SEND_GEMS_STOW_RECON" description="SEND_GEMS_STOW_RECON" last-run-time="2016-10-07T14:17:04" last-run-status="COMPLETE" delimiter="\n" transaction-control-num="0" message-sequence-num="1005" interchange-num-check-flag="N" is-auto-posted="N" life-cycle-state="ACT" edi-trading-partner="GEMS">
      <mailboxes>
        <mailbox name="SEND_GEMS_STOW_RECON" is-primary="Y" />
      </mailboxes>
      <settings>
        <setting config-id="ARGOBAPLIE011" value="0" />
        <setting config-id="ARGOEDI010" value="true" />
      </settings>
      <edi-filters>
        <edi-filter name="GEMS STOWPLAN RECON" />
      </edi-filters>
    </session>
  </sessions>
</edi-trading-partner>
<edi-trading-partner name="MAT SNX" business-id="MAT" business-role="LINEOP" is-retired="N" life-cycle-state="ACT" />
<edi-trading-partner name="MCSC" business-id="MCSC" business-role="LINEOP" is-retired="N" life-cycle-state="ACT">
  <mailboxes>
    <mailbox name="MAERSK_BAPLIE_IN" direction="R" directory="/home/dkannada" comm-type="NONE" life-cycle-state="OBS" />
  </mailboxes>
  <sessions>
    <session name="RECEIVE_MAERSK_BAPLI" direction="R" complex="653" message-class="STOWPLAN" message-map="BAPLIE_20_IN" last-run-time="2015-07-08T06:07:04" last-run-status="COMPLETE" interchange-num-check-flag="N" is-auto-posted="N" life-cycle-state="OBS" edi-trading-partner="MCSC">
      <mailboxes>
        <mailbox name="MAERSK_BAPLIE_IN" is-primary="Y" />
      </mailboxes>
      <edi-filters>
        <edi-filter name="CLIENT BAPLIE TRANSLATION" />
      </edi-filters>
    </session>
  </sessions>
</edi-trading-partner>
<edi-trading-partner name="SNX" business-id="MAT" business-role="LINEOP" is-retired="N" life-cycle-state="ACT">
  <mailboxes>
    <mailbox name="SNX-IN" direction="R" directory="/home/logs/applogs/TOS" comm-type="NONE" life-cycle-state="OBS" />
    <mailbox name="SNX-OB" direction="S" directory="/home/logs/applogs/TOS" comm-type="NONE" life-cycle-state="OBS" />
  </mailboxes>
  <sessions>
    <session name="SNX-IN" direction="R" complex="653" message-class="INVENTORY" interchange-num-check-flag="N" is-auto-posted="N" life-cycle-state="OBS" edi-trading-partner="SNX">
      <mailboxes>
        <mailbox name="SNX-IN" is-primary="Y" />
      </mailboxes>
    </session>
    <session name="SNX-OB" direction="S" complex="653" message-class="INVENTORY" interchange-num-check-flag="N" is-auto-posted="N" life-cycle-state="OBS" edi-trading-partner="SNX">
      <mailboxes>
        <mailbox name="SNX-OB" is-primary="Y" />
      </mailboxes>
    </session>
  </sessions>
</edi-trading-partner>
<edi-trading-partner name="NYK" business-id="NYK" business-role="LINEOP" is-retired="N" life-cycle-state="ACT">
  <mailboxes>
    <mailbox name="SEND_NYK_BAPLIE" direction="S" directory="/var/tmp/edi" comm-type="FTP" comm-address="10.102.0.29" comm-folder="~/tos/ob/baplie/JPXNYK" comm-passwd="L0werCAS" comm-user-id="mataedi1" life-cycle-state="ACT" />
    <mailbox name="RECEIVE_NYK_BAPLIE" direction="R" directory="/var/tmp/edi" comm-type="FTP" comm-address="10.102.0.29" comm-folder="~tos/ib/baplie/JPXNYK" comm-passwd="changeme" comm-user-id="mataedi1" life-cycle-state="ACT" />
    <mailbox name="SEND NYK BAPLIE 2DUT" direction="S" directory="/var/tmp/edi" comm-type="SMTP" comm-address="jlucas@matson.com,cgarcia@matson.com,cparker@matson.com,jbalbarino@matson.com" life-cycle-state="ACT" />
    <mailbox name="RECEIVE_NYK_BOOKING" direction="R" directory="/var/tmp/edi" comm-type="FTP" comm-address="10.102.0.29" comm-folder="~/tos/ib/nykedi301" comm-passwd="L0werCAS" comm-user-id="mataedi1" life-cycle-state="ACT" />
    <mailbox name="SEND_NYK_322" direction="S" directory="/var/tmp/edi" comm-type="SMTP" comm-address="gbabu@matson.com" life-cycle-state="ACT" />
  </mailboxes>
  <sessions>
    <session name="RECEIVE_NYK_BAPLIE" direction="R" complex="653" message-class="STOWPLAN" message-map="BAPLIE_20_IN_NYK" last-run-time="2017-02-02T01:13:03" last-run-status="COMPLETE" interchange-num-check-flag="N" is-auto-posted="Y" life-cycle-state="ACT" edi-trading-partner="NYK">
      <mailboxes>
        <mailbox name="RECEIVE_NYK_BAPLIE" is-primary="Y" />
      </mailboxes>
      <edi-filters>
        <edi-filter name="NYK_EDI_IN" />
      </edi-filters>
    </session>
    <session name="SEND NYK BAPLIE 2DUT" direction="S" complex="653" message-class="STOWPLAN" message-map="BAPLIE_20_OUT_VGM_V1" description="Sends Baplie to DUT Marine" last-run-time="2016-07-17T21:30:02" last-run-status="COMPLETE" transaction-control-num="0" message-sequence-num="2" interchange-num-check-flag="N" is-auto-posted="N" life-cycle-state="ACT" edi-trading-partner="NYK">
      <mailboxes>
        <mailbox name="SEND NYK BAPLIE 2DUT" is-primary="Y" />
      </mailboxes>
      <edi-filters>
        <edi-filter name="NYK_EDI_OUT" />
      </edi-filters>
    </session>
    <session name="SEND_NYK_BAPLIE" direction="S" complex="653" message-class="STOWPLAN" message-map="BAPLIE_20_OUT_VGM_V1" last-run-time="2016-07-08T09:36:56" last-run-status="COMPLETE" transaction-control-num="0" message-sequence-num="3" interchange-num-check-flag="N" is-auto-posted="N" life-cycle-state="ACT" edi-trading-partner="NYK">
      <mailboxes>
        <mailbox name="SEND_NYK_BAPLIE" is-primary="Y" />
      </mailboxes>
      <edi-filters>
        <edi-filter name="NYK_EDI_OUT" />
      </edi-filters>
    </session>
    <session name="SEND_NYK_322" direction="S" complex="653" message-class="ACTIVITY" message-map="SEND_NYK_322_V1" last-run-time="2016-08-02T16:31:57" last-run-status="COMPLETE" transaction-control-num="202" message-sequence-num="38" interchange-num-check-flag="N" is-auto-posted="N" life-cycle-state="ACT" edi-trading-partner="NYK">
      <filter>
        <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
          <predicate verb="EQ" metafield="ufvUnit.unitLineOperator" value="^NYK/LINEOP" ui-value="NYK" order="0" negated="false" parm-type="NO_PARM" />
          <predicate verb="NE" metafield="ufvUnit.unitRouting.rtgGroup" value="^ILB" ui-value="ILB (ILB Barge Load and discharge)" order="1" negated="false" parm-type="NO_PARM" />
          <predicate verb="OR" order="2" negated="false" parm-type="NO_PARM">
            <predicate verb="EQ" metafield="evntEventType" value="^UNIT_OUT_GATE" ui-value="UNIT_OUT_GATE" order="0" negated="false" parm-type="NO_PARM" />
            <predicate verb="EQ" metafield="evntEventType" value="^UNIT_IN_GATE" ui-value="UNIT_IN_GATE" order="1" negated="false" parm-type="NO_PARM" />
            <predicate verb="EQ" metafield="evntEventType" value="^UNIT_LOAD" ui-value="UNIT_LOAD" order="2" negated="false" parm-type="NO_PARM" />
            <predicate verb="EQ" metafield="evntEventType" value="^UNIT_DISCH" ui-value="UNIT_DISCH" order="3" negated="false" parm-type="NO_PARM" />
          </predicate>
        </predicate>
      </filter>
      <mailboxes>
        <mailbox name="SEND_NYK_322" is-primary="Y" />
      </mailboxes>
      <edi-filters>
        <edi-filter name="NYK_EDI_OUT" />
      </edi-filters>
      <extract-extension name="MatsonAncActivityExtractInterceptor" type="EDI_EXTRACT_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;import com.navis.argo.util.XmlUtil&#xA;import com.navis.external.edi.entity.AbstractEdiExtractInterceptor&#xA;import com.navis.inventory.business.units.Routing&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.services.business.event.Event&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;import org.jdom.Element&#xA;&#xA;/**&#xA; Set UNLOC code for Port of load.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 09/22/2015&#xA; *&#xA; * Date: 09/22/2015: 5:41 PM&#xA; * JIRA: CSDV-&#xA; * SFDC: 00145621&#xA; * Called from: Edi Session extract code extension for activity message&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;class MatsonAncActivityExtractInterceptor extends AbstractEdiExtractInterceptor {&#xA;  @Override&#xA;  public Element beforeEdiMap(Map inParams) {&#xA;    LOGGER.setLevel(Level.INFO);&#xA;    LOGGER.info(&quot;MatsonAncActivityExtractInterceptor, Started beforeEdiMap Method.&quot;);&#xA;    if (inParams == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor inParams is null.&quot;);&#xA;      return null;&#xA;    }&#xA;    Element xmlTransaction = (Element) inParams.get(&quot;XML_TRANSACTION&quot;);&#xA;    Event event = (Event) inParams.get(&quot;ENTITY&quot;);&#xA;    if (xmlTransaction == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor, xmlTransaction element is null.&quot;);&#xA;      return null;&#xA;    }&#xA;    if (event == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor, event entity is null.&quot;);&#xA;      return null;&#xA;    }&#xA;&#xA;    Unit unit = Unit.hydrate(event.getEventAppliedToGkey());&#xA;    if (Unit == null) {&#xA;      LOGGER.error(&#xA;              &quot;MatsonAncActivityExtractInterceptor, Unit not found for gkey&quot; + event.getEventAppliedToGkey());&#xA;      return null;&#xA;    }&#xA;    Element tranElement = changePOL(inParams, unit);&#xA;    LOGGER.info(&quot;MatsonAncActivityExtractInterceptor, completed beforeEdiMap Method.&quot;);&#xA;    return tranElement;&#xA;  }&#xA;  private Logger LOGGER = Logger.getLogger(MatsonAncActivityExtractInterceptor.class);&#xA;&#xA;  private Element changePOL(Map inParams, Unit inUnit) {&#xA;    Routing routing = inUnit.getUnitRouting();&#xA;    Element xmlTransaction = (Element) inParams.get(&quot;XML_TRANSACTION&quot;);&#xA;    if (xmlTransaction == null || routing == null || routing.getRtgPOL() == null) {&#xA;      return null;&#xA;    }&#xA;    String unLocId = routing.getRtgPOL().getPointUnlocId();&#xA;    if (unLocId == null) {&#xA;      return null;&#xA;    }&#xA;    Element containerElement = xmlTransaction.getChild(&quot;ediContainer&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;    if (containerElement != null) {&#xA;      Element originalLoadPortElement = containerElement.getChild(&quot;loadPort&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;      if (originalLoadPortElement != null) {&#xA;        Element portCodesElement = originalLoadPortElement.getChild(&quot;portCodes&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;        if (portCodesElement != null) {&#xA;          portCodesElement.setAttribute(&quot;unLocCode&quot;, unLocId, XmlUtil.ARGO_NAMESPACE);&#xA;          return xmlTransaction;&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}" />
    </session>
    <session name="RECEIVE_NYK_BOOKING" direction="R" complex="653" message-class="BOOKING" last-run-time="2016-07-14T13:17:52" last-run-status="ERRORS" interchange-num-check-flag="N" is-auto-posted="Y" life-cycle-state="ACT" edi-trading-partner="NYK">
      <mailboxes>
        <mailbox name="RECEIVE_NYK_BOOKING" is-primary="Y" />
      </mailboxes>
      <edi-filters>
        <edi-filter name="NYK_EDI_IN" />
      </edi-filters>
      <extension name="MATGvy301MsgFunctionCheck" scope="MATSON/ALASKA" type="EDI_POST_INTERCEPTOR" language="GROOVY" is-enabled="Y" description="MATGvy301MsgFunctionCheck" contents="import com.navis.argo.*&#xA;import com.navis.argo.BookingTransactionDocument.BookingTransaction&#xA;import com.navis.argo.BookingTransactionsDocument.BookingTransactions&#xA;import com.navis.argo.BookingTransactionDocument.BookingTransaction.EdiBookingItem&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.api.VesselVisitFinder&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.model.Complex&#xA;import com.navis.argo.business.model.Facility&#xA;import com.navis.argo.business.reference.CarrierItinerary&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.external.edi.entity.AbstractEdiPostInterceptor&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernatingEntity&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.orders.OrdersPropertyKeys&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import org.apache.log4j.Logger&#xA;import org.apache.xmlbeans.XmlObject;&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails;&#xA;import com.navis.vessel.business.schedule.VesselVisitLine;&#xA;&#xA;public class MATGvy301MsgFunctionCheck extends AbstractEdiPostInterceptor {&#xA;    UserContext context = ContextHelper.getThreadUserContext();&#xA;    Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#xA;    @Override&#xA;    public void beforeEdiPost(Serializable inSessionGkey, XmlObject inXmlObject) throws BizViolation {&#xA;        com.navis.argo.business.api.GroovyApi groovyApi =new GroovyApi();&#xA;        LOGGER.warn(&quot;in MATGvy301MsgFunctionCheck Started&quot; + timeNow);&#xA;&#xA;        if (inXmlObject == null) {&#xA;            LOGGER.warn(&quot;Input XML Object is null&quot;);&#xA;            throw BizFailure.create(OrdersPropertyKeys.ERRKEY__NULL_XMLBEAN, null);&#xA;        }&#xA;        if (!BookingTransactionsDocument.class.isAssignableFrom(inXmlObject.getClass())) {&#xA;            throw BizFailure.create(OrdersPropertyKeys.ERRKEY__TYPE_MISMATCH_XMLBEAN, null, inXmlObject.getClass().getName());&#xA;        }&#xA;        BookingTransactionsDocument bkgDocument = (BookingTransactionsDocument) inXmlObject;&#xA;        final BookingTransactions bkgtrans = bkgDocument.getBookingTransactions();&#xA;        final BookingTransaction[] bkgtransArray = bkgtrans.getBookingTransactionArray();&#xA;        if (bkgtransArray.length != 1) {&#xA;            throw BizFailure.create(OrdersPropertyKeys.ERRKEY__XML_TRANSACTION_DOCUMENT_LENGTH_EXCEED, null, String.valueOf(bkgtransArray.length));&#xA;        }&#xA;        BookingTransaction bkgTrans = bkgtransArray[0];&#xA;        try {&#xA;            EdiOperator ediOp = bkgTrans.getLineOperator();&#xA;            Facility facility = ContextHelper.getThreadFacility();&#xA;            Complex complex = ContextHelper.getThreadComplex();&#xA;            EdiVesselVisit EdiVv = bkgTrans.getEdiVesselVisit();&#xA;            ScopedBizUnit bkgLineOp = this.resolveLineOperator(EdiVv, ediOp);&#xA;            CarrierVisit ediCv = this.resolveCarrierVisit(EdiVv, complex, facility, bkgLineOp);&#xA;            Booking book = this.getBookingDetails(bkgTrans, ediCv, bkgLineOp);&#xA;            // if user changed the O/B carrier or POD of any units manually, then skip updating the Booking with NSS700&#xA;            // Update the booking with its old VV and POD.&#xA;            String vslId = EdiVv.getVesselId();&#xA;            try {&#xA;                if (vslId != null &amp;&amp; vslId.equalsIgnoreCase(&quot;DUMMY&quot;) &amp;&amp; book != null &amp;&amp; book.eqoTally != null &amp;&amp; book.eqoTally &gt; 0&#xA;                        &amp;&amp; book.getEqoVesselVisit() != null &amp;&amp; !vslId.equalsIgnoreCase(book.getEqoVesselVisit().getCvId())) {&#xA;                    CarrierVisit carrierVisit = book.getEqoVesselVisit();&#xA;                    VesselVisitDetails vesselVisitDetails = VesselVisitDetails.resolveVvdFromCv(carrierVisit);&#xA;                    String lyoldsId = vesselVisitDetails.getVvdVessel().getVesLloydsId();&#xA;                    String vesselName = vesselVisitDetails.getVvdVessel().getVesName();&#xA;                    EdiVv.setVesselId(lyoldsId);&#xA;                    EdiVv.setVesselName(vesselName);&#xA;                    VesselVisitLine vslVisitLine = VesselVisitLine.findVesselVisitLine(vesselVisitDetails, bkgLineOp);&#xA;                    if (vslVisitLine!= null) {&#xA;                        EdiVv.setOutOperatorVoyageNbr(vslVisitLine.getVvlineOutVoyNbr());&#xA;                    }&#xA;&#xA;                    EdiVv&#xA;                    if (bkgTrans.getDischargePort1() != null &amp;&amp; &quot;TBA&quot;.equalsIgnoreCase(bkgTrans.getDischargePort1().getPortId())) {&#xA;                        bkgTrans.getDischargePort1().setPortId(book.getEqoPod1().pointUnlocId);&#xA;                        bkgTrans.getDischargePort1().setPortName(book.getEqoPod1().pointId);&#xA;                    }&#xA;                }&#xA;            } catch (Exception e) {&#xA;                //groovyApi.sendEmail(&quot;gbabu@matson.com&quot;, &quot;gbabu@matson.com&quot;,&quot;edi error &quot;, e.toString());&#xA;                //ignore any errors&#xA;            }&#xA;            //bkg msg function code.&#xA;            this.checkMsgFunctionCode(bkgTrans, book);&#xA;            //update dates to null as the date format is not correct&#xA;            this.checkDateFormat(bkgTrans, book);&#xA;            // dkanndasan - Fix to consolidate booking items quantity&#xA;           this.checkBookingItems(bkgTrans);&#xA;        } catch (Exception e) {&#xA;            LOGGER.warn(&quot;Error while processing before edi post&quot;);&#xA;        }&#xA;        LOGGER.warn(&quot;in MATGvy301MsgFunctionCheck Ended&quot; + timeNow);&#xA;    }&#xA;&#xA;    @Override&#xA;    public void afterEdiPost(XmlObject inXmlObject, HibernatingEntity inHibernatingEntity, Map inParams) throws BizViolation {&#xA;        LOGGER.warn(&quot;in MATGvy301MsgFunctionCheck after EDI Post Started&quot;);&#xA;    }&#xA;&#xA;    public void checkDateFormat(BookingTransaction inBkgTrans, Booking inBook) throws BizViolation {&#xA;        try {&#xA;            inBkgTrans.setMsgProducedDateTime(null);&#xA;            Interchange interchange = inBkgTrans.getInterchange();&#xA;            interchange.setDate(null);&#xA;            interchange.setTime(null);&#xA;            inBkgTrans.setInterchange(interchange);&#xA;        } catch (Exception e) {&#xA;            LOGGER.warn(&quot; date and time set to null exception &quot; + e);&#xA;        }&#xA;    }&#xA;&#xA;    private void checkMsgFunctionCode(BookingTransaction inBkgTrans, Booking inBook) throws BizViolation {&#xA;        String msgFunction = this.getMsgFunction(inBkgTrans);&#xA;        if (msgFunction == null) {&#xA;            LOGGER.warn(&quot;msgFunction is Null&quot;);&#xA;            this.reportUserError(&quot;Message Function cannot be Null&quot;);&#xA;            return;&#xA;        }&#xA;        if (msgFunction.equalsIgnoreCase(&quot;D&quot;) || msgFunction.equalsIgnoreCase(&quot;R&quot;) || msgFunction.equalsIgnoreCase(&quot;E&quot;)) {&#xA;            LOGGER.warn(&quot;Booking Cancel is received No Action is Taken&quot;);&#xA;            return;&#xA;        }&#xA;        LOGGER.warn(&quot;msgFunction:&quot; + msgFunction);&#xA;        if (inBook == null) {&#xA;            inBkgTrans.setMsgFunction(&quot;N&quot;);&#xA;            LOGGER.warn(&quot;Msg Function:&quot; + &quot;N&quot;);&#xA;        }&#xA;    }&#xA;&#xA;    private Booking getBookingDetails(BookingTransaction inBkgTrans, CarrierVisit inCv, ScopedBizUnit inBkgLineOp) {&#xA;        EdiBooking bkgNbr = inBkgTrans.getEdiBooking();&#xA;        String bookingNumber = bkgNbr.getBookingNbr();&#xA;        Booking book = null;&#xA;        try {&#xA;            book = this.checkBooking(bookingNumber, inBkgLineOp, inCv);&#xA;            return book;&#xA;        } catch (Exception e) {&#xA;            LOGGER.warn(&quot; Exception:&quot; + e);&#xA;            return book;&#xA;        }&#xA;    }&#xA;&#xA;    private String getMsgFunction(BookingTransaction inBkgTrans) {&#xA;        return inBkgTrans.getMsgFunction();&#xA;    }&#xA;&#xA;    private CarrierVisit resolveCarrierVisit(EdiVesselVisit inEdiVv, Complex complex, Facility inFacility, ScopedBizUnit bkgLineOp) throws BizViolation {&#xA;        if (complex == null) {&#xA;            LOGGER.warn(&quot; Thread Complex is Null&quot;);&#xA;        }&#xA;        String vvConvention = null;&#xA;        String vvId = null;&#xA;        final String ibVoyg = null;&#xA;        final String obVoyg = null;&#xA;        if (inEdiVv != null) {&#xA;            vvConvention = inEdiVv.getVesselIdConvention();&#xA;            vvId = inEdiVv.getVesselId();&#xA;            ibVoyg = inEdiVv.getInVoyageNbr();&#xA;            if (ibVoyg == null) {&#xA;                ibVoyg = inEdiVv.getInOperatorVoyageNbr();&#xA;            }&#xA;            obVoyg = inEdiVv.getOutVoyageNbr();&#xA;            if (obVoyg == null) {&#xA;                obVoyg = inEdiVv.getOutOperatorVoyageNbr();&#xA;            }&#xA;        }&#xA;        CarrierVisit cv;&#xA;        VesselVisitFinder vvf = (VesselVisitFinder) Roastery.getBean(VesselVisitFinder.BEAN_ID);&#xA;        // Note: This will throw a BizViolation if the vessel visit can not be found&#xA;        LOGGER.warn('Convention ' + vvConvention + ' vvId' + vvId + &quot; voyage &quot; + ibVoyg);&#xA;        if (ibVoyg != null) {&#xA;            cv = vvf.findVesselVisitForInboundStow(complex, vvConvention, vvId, ibVoyg, null, null);&#xA;        } else {&#xA;            cv = vvf.findOutboundVesselVisit(complex, vvConvention, vvId, obVoyg, bkgLineOp, null);&#xA;        }&#xA;        LOGGER.warn(cv);&#xA;        return cv;&#xA;    }&#xA;&#xA;    private ScopedBizUnit resolveLineOperator(EdiVesselVisit inEdiVesselVisit, EdiOperator inEdiOperator) {&#xA;        LOGGER.warn(&quot; in Resolve Line Operator&quot;);&#xA;        ScopedBizUnit inLine = null;&#xA;        String lineCode;&#xA;        String lineCodeAgency;&#xA;        try {&#xA;            if (inEdiOperator != null) {&#xA;                lineCode = inEdiOperator.getOperator();&#xA;                lineCodeAgency = inEdiOperator.getOperatorCodeAgency();&#xA;                inLine = ScopedBizUnit.resolveScopedBizUnit(lineCode, lineCodeAgency, BizRoleEnum.LINEOP);&#xA;            }&#xA;            if (inLine == null &amp;&amp; inEdiVesselVisit != null &amp;&amp; inEdiVesselVisit.getShippingLine() != null) {&#xA;                lineCode = inEdiVesselVisit.getShippingLine().getShippingLineCode();&#xA;                lineCodeAgency = inEdiVesselVisit.getShippingLine().getShippingLineCodeAgency();&#xA;                inLine = ScopedBizUnit.resolveScopedBizUnit(lineCode, lineCodeAgency, BizRoleEnum.LINEOP);&#xA;            }&#xA;        } catch (Exception e) {&#xA;            LOGGER.warn(&quot;Cannot Resolve Line Operator&quot; + e);&#xA;        }&#xA;        return inLine;&#xA;    }&#xA;&#xA;    private Booking checkBooking(String inBkgNbr, ScopedBizUnit inLineOperator, CarrierVisit inCv) {&#xA;        LOGGER.warn(&quot; in Check Booking&quot;);&#xA;        if (inBkgNbr == null) {&#xA;            LOGGER.warn(&quot;inBkgNbr is null&quot;);&#xA;        }&#xA;        if (inLineOperator == null) {&#xA;            LOGGER.warn(&quot;inLineOperator is Null&quot;);&#xA;        }&#xA;        if (inCv == null) {&#xA;            LOGGER.warn(&quot;inCv is Null&quot;);&#xA;        }&#xA;        Booking bkg = Booking.findBookingByUniquenessCriteria(inBkgNbr, inLineOperator, inCv);&#xA;        LOGGER.warn(&quot;bkg:&quot; + bkg.toString());&#xA;        return bkg;&#xA;    }&#xA;&#xA;    private ScopedBizUnit getLineOperator(EdiVesselVisit inEdiVv) throws BizViolation {&#xA;        ScopedBizUnit line = null;&#xA;        String lineCode = null;&#xA;        String lineCodeAgency = null;&#xA;        if (inEdiVv != null &amp;&amp; inEdiVv.getShippingLine() != null) {&#xA;            lineCode = inEdiVv.getShippingLine().getShippingLineCode();&#xA;            lineCodeAgency = inEdiVv.getShippingLine().getShippingLineCodeAgency();&#xA;            line = ScopedBizUnit.resolveScopedBizUnit(lineCode, lineCodeAgency, BizRoleEnum.LINEOP);&#xA;        }&#xA;        if (line == null) {&#xA;            throw BizViolation.create(OrdersPropertyKeys.ERRKEY__UNKNOWN_ENCODED_LINE_ID, null, lineCodeAgency, lineCode);&#xA;        }&#xA;        return line;&#xA;    }&#xA;&#xA;    private boolean fcyPortNotInItinerary(CarrierVisit inCarrierVisit, RoutingPoint inRoutingPoint) {&#xA;        boolean notInItin = false;&#xA;        CarrierItinerary itin = inCarrierVisit.getCvCvd().getCvdItinerary();&#xA;        if (itin != null) {&#xA;            notInItin = itin.isPointInItinerary(inRoutingPoint);&#xA;        }&#xA;        return notInItin;&#xA;    }&#xA;    // Adds an error to the list of errors that will be displayed&#xA;    private void reportUserError(String message) {&#xA;        RoadBizUtil.messageCollector.appendMessage(BizFailure.create(message));&#xA;    }&#xA;&#xA;public void checkBookingItems(BookingTransaction inBkgTran)  throws BizViolation{&#xA;  List&lt;BookingTransactionDocument.BookingTransaction.EdiBookingItem&gt; bkgItems =  inBkgTran.getEdiBookingItemList();&#xA;LOGGER.warn(&quot;Bookings Items Size::&quot;+bkgItems.size());&#xA; HashMap&lt;String,Integer&gt; uniqueItemMap = new HashMap();&#xA;  for (EdiBookingItem bkgItem : bkgItems){&#xA;       String isoCode = bkgItem.getISOcode();&#xA;       int newQuantity = Integer.parseInt(bkgItem.getQuantity());&#xA;       int  quantity = uniqueItemMap.get(isoCode) == null?0:uniqueItemMap.get(isoCode);&#xA;        int finalQuantity = newQuantity+quantity;&#xA;       uniqueItemMap.put(isoCode,finalQuantity);&#xA;&#xA;}&#xA;LOGGER.warn(&quot;Unique Items Map ::::&quot;+uniqueItemMap);&#xA;&#xA; for (EdiBookingItem bkgItem : bkgItems){&#xA;int finalQty = uniqueItemMap.get(bkgItem.getISOcode());&#xA;if(finalQty!=null || finalQty==0){&#xA;bkgItem.setQuantity(String.valueOf(finalQty));&#xA;}&#xA;}&#xA;}&#xA;    private static final Logger LOGGER = Logger.getLogger(MATGvy301MsgFunctionCheck.class);&#xA;}" />
    </session>
  </sessions>
</edi-trading-partner>
</argo:snx>

