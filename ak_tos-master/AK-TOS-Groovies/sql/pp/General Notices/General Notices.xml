<?xml version="1.0" encoding="UTF-8"?>
<argo:snx xmlns:argo="http://www.navis.com/argo" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.navis.com/argo snx.xsd">
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_TRANSLOAD_TO_FULL" description="Call unit Stuff during Transload to send message to Gems" changed="2017-02-06T09:53:27" changer="vnatesan" created="2016-12-21T10:34:34" creator="vnatesan">
  <filter />
  <message-template>println("Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")


def unit = event.getEntity();
def commodityId=unit.getFieldValue("unitGoods.gdsCommodity.cmdyId")
def commodity = commodityId != null ?commodityId : '' 


try{
  //REMOVED Filter and Added This Check for Commodity = AUTO
  if(commodity.equals('AUTO'))
 {
    com.navis.argo.ContextHelper.setThreadExternalUser(event.event.evntAppliedBy);
    def hazardItem = unit.getUnitGoods().attachHazard("9", "3166"); 
    def eqType = event.getProperty( "EquipmentType");
    def cSize = eqType.substring( 1, 3);
    hazardItem.setHzrdiPackageType("AUTO");

    if ( eqType.substring(0,2) == "A4") {
         hazardItem.setHzrdiQuantity( new Long("4"));
    } else if ( eqType.substring(1, 2) == "4") {
        hazardItem.setHzrdiQuantity( new Long("2"));
    } else {
       hazardItem.setHzrdiQuantity( new Long("1"));
    }
    hazardItem.setHzrdiEmergencyTelephone( "1(800)424-9300");
    hazardItem.setHzrdiProperName( "VEHICLE, FLAMMABLE LIQUID POWERED");
    hazardItem.setHzrdiERGNumber( "128");
    hazardItem.setHzrdiWeight(unit.getFieldValue("unitGoodsAndCtrWtKg"));
}//Commodity AUTO check Ends
}catch(Exception e){
    e.printStackTrace()
}


 // Set Avail Date
 //def unit = event.getEntity()
 def availLookup = api.getGroovyClassInstance("GvyAvailDate");
 boolean update =  availLookup.setAvailDate(unit, event);


//1] Create Cmis Feed for Msg from Acets &amp; UI Transaction

 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 println(" EVENT_STUFF ::Avail Date:"+update+"   processCmisFeed::"+processCmisFeed)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
    def unitDtl = unitDetails.doIt(event)
   
    //Stuff specific Changes
    def gvyStuff = api.getGroovyClassInstance("GvyEventSpecificFldValue")
    def unitStuffXml = gvyStuff.getEventTransloadUnitStuff(unitDtl,commodity,unit,event)

    //Detention Msg Check
    if(update){
        def gvyDentObj = api.getGroovyClassInstance("GvyCmisDetentionMsgProcess"); 
        gvyDentObj.detentionProcess(unitStuffXml,event,api)
    }

   boolean blockForMultipleStuff = gvyUtilObj.holdEventProcessing(event, 'UNIT_STUFF', 2)
  if(!blockForMultipleStuff){     api.sendXml(unitStuffXml); }
}


println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="VGM RELEASE" description="Rferesh the Unit Impediments upon VGM RELEASE" created="2017-04-13T13:25:18" creator="kramachandran">
  <filter />
  <message-template>api.getGroovyClassInstance("MATUtil").refreshUnit(event.getEntity());</message-template>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UNIT_PREADVISE" description="Test Update Sparcs Visibility" changed="2016-10-05T11:28:41" changer="psethuraman" created="2016-10-04T22:11:46" creator="psethuraman" code-extension-name="MatGvyHideAdvisedContainer">
  <filter />
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="NTFY:VESSEL_REMINDER" email-party="unitGoods.gdsConsigneeBzu" description="Vessel reminder notice to consignee" sent-count="4" changed="2015-08-13T04:37:09" changer="psethuraman" created="2016-01-07T14:43:09" creator="admin">
  <filter />
  <message-template>Date : &amp;TIME

                               MATSON TERMINALS - CONTAINER YARD

From: &amp;UfvFlexString03
Subject: VESSEL REMINDER - &amp;UfvFlexString04
         

Phone: (808) 848-1321   Fax: (808) 842-5490
---------------------------------------------------------------------------------------------
CONTAINER: &amp;UnitNbr
 LOCATION: &amp;PositionFull
   VESVOY: &amp;InboundCarrierId
  SHIPPER: &amp;GoodsShipperName
  BOOKING: &amp;GoodsBlNbr
    HOLDS: &amp;UnitImpediments
STORAGE DATE: &amp;UfvFlexDate03
DETENTION DATE: &amp;LastFreeDay

Due Dates:
   Storage Date - Container will incur daily fees unless picked up by date due
   Detention Date - Container will incur daily fees unless returned by date due</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="BL_UPDATE" description="Update unit with BL data" changed="2015-08-13T04:37:10" changer="psethuraman" created="2016-01-07T14:43:11" creator="admin">
  <filter />
  <message-template>println("After BL Update")

def unit = event.getEntity();
println("Updated Unitd is: "+unit)
def unitId = unit.getFieldValue("unitId")
println("Updated Unit Id is: "+unitId);

println("MatUnitUpdateWithBlDetails")
def MatUnitUpdateWithBlDetails= api.getGroovyClassInstance("MatUnitUpdateWithBlDetails");
MatUnitUpdateWithBlDetails.getUnitListForBlUpdate(unit);</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="BARGE_ASSIGN" changed="2015-08-13T04:37:08" changer="psethuraman" created="2016-01-07T14:43:12" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

def unit = event.getEntity()
def gvyEventUtil = api.getGroovyClassInstance( "GvyEventUtil");
def gvyCmisUtil = api.getGroovyClassInstance( "GvyCmisUtil");
Map mapEvntFld = gvyEventUtil.eventFieldChangedValues(event, api)

def doer = event.event.evntAppliedBy
com.navis.argo.ContextHelper.setThreadExternalUser(doer); 
def sendEvent = new GroovyEvent( null,unit);
def dobcarrierId = unit.getFieldValue("unitRouting.rtgDeclaredCv.cvId")
dobcarrierId = dobcarrierId != null ? dobcarrierId : ""

def prevObDecGkey = event.getPreviousPropertyAsString("DeclaredObCarrierId") 
prevObDecGkey = prevObDecGkey != null ? new Long(prevObDecGkey) : ""
println("prevObDecGkey ---- "+prevObDecGkey)
def prevObDecVessel = null;
if(prevObDecGkey != null){
  def carrierVstObj = com.navis.argo.business.model.CarrierVisit.loadByGkey(prevObDecGkey) 
  println("ID=============="+carrierVstObj.cvId)
  prevObDecVessel = carrierVstObj.cvId
}

if(prevObDecVessel.startsWith('YB')){
  sendEvent.postNewEvent( "YB_UNASSIGN","YB Barge Routing"); 
}

if(dobcarrierId.startsWith('YB')){
   sendEvent.postNewEvent( "YB_ASSIGN","YB Barge Routing"); 
}else{
   boolean isActiveUnit = event.entity.unitForeignHostKey != null ? true : false
   if(isActiveUnit){
     def gvyUnitReroute = api.getGroovyClassInstance( "GvyCmisEventUnitReroute");
     gvyUnitReroute.processUnitReroute(unit,event,api)
   }

   // 5/4/2009, SKB, Added YB copy to VESVOY for YB DCM.
   def vesvoy = dobcarrierId;
   if(vesvoy != null &amp;&amp; vesvoy.toUpperCase().startsWith("YB")  ){
     unit.unitFlexString10 = vesvoy;
   }
   else {
    // 5/7/2009 SKB, Added check to remove vesvoy on reroute
	gvyCmisUtil.setObCarrier(unit, dobcarrierId) // Set Intended and Actual

    def unitUpdtObj = event.getEntity();
    def type  = unitUpdtObj.getFieldValue("unitActiveUfv.ufvActualObCv.cvCarrierMode");
    def clazz = unitUpdtObj.getFieldValue("unitActiveUfv.ufvActualObCv.carrierVesselClass");
    def generic = unitUpdtObj.getFieldValue("unitActiveUfv.ufvActualObCv.genericCv");

    if( gvyEventUtil.wasFieldChanged(event, 'rtgDeclaredCv' ) &amp;&amp; com.navis.argo.business.atoms.LocTypeEnum.VESSEL.equals(type) &amp;&amp; clazz != null &amp;&amp; !generic) {
      unitUpdtObj.unitFlexString10 = null;
    }
 }

}//Unit Reroute chek ends

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="CMIS_REFRESH_SELECTED" description="Refresh Selected unit in Cmis with last event action on unit" changed="2015-08-13T04:37:11" changer="psethuraman" created="2016-01-07T14:43:14" creator="admin">
  <filter />
  <message-template>//Release Holds
def unit = event.getEntity()
def gvyReleaseEqSnx = api.getGroovyClassInstance("GvyReleaseEqHolds"); 
gvyReleaseEqSnx.releaseHoldsPermissions(unit)</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_CHECKDIGIT" changed="2015-08-13T04:37:12" changer="psethuraman" created="2016-01-07T14:43:17" creator="admin">
  <filter />
  <message-template>// Create Cmis Feed for Msg from Acets &amp; UI Transaction
def unit = event.getEntity() 
if(unit.unitForeignHostKey != null) {
   def unitUpdate = api.getGroovyClassInstance("GvyUnitUpdate");
   unitUpdate.setForeignKey(unit);
}

 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 boolean processAcetsMsg = gvyUtilObj.acetsMesssageFilter(event)
  if(processCmisFeed &amp;&amp; !processAcetsMsg)
 {
     def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
     gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="MDA_ASSIGN" description="MDA_ASSIGN" changed="2015-08-13T04:37:12" changer="psethuraman" created="2016-01-07T14:43:19" creator="admin">
  <filter />
  <message-template>// Remove as per Joce's email 10/13/2008
//def equip = event.getEntity()
//def proc =  api.getGroovyClassInstance("MdaHoldProc");
//proc.process( equip);

println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}

    // N4 TO CMIS data processing 
    def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
    def unitDtl = unitDetails.doIt(event)
    api.sendXml(unitDtl);

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EQ" event-type="CG_DMG_RELEASE" description="CG_DMG_RELEASE" changed="2015-08-13T04:37:10" changer="psethuraman" created="2016-01-07T14:43:20" creator="admin">
  <filter />
  <message-template>// Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
   // N4 TO CMIS data processing 
   def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
   gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="TAG_STRIP_UNASSIGN" description="TAG_STRIP_UNASSIGN" changed="2015-08-13T04:37:16" changer="psethuraman" created="2016-01-07T14:43:22" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
   // N4 TO CMIS data processing 
   def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
   def unitDtl = unitDetails.doIt(event)
   api.sendXml(unitDtl);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_OVERDIMENSIONS_UPDATE" description="UNIT_OVERDIMENSION_UPDATE" changed="2015-08-13T04:37:14" changer="psethuraman" created="2016-01-07T14:43:23" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

//Thred Sleep Condtion for UI - Show Unit Detail Editor
def gvyEventUtil = api.getGroovyClassInstance("GvyEventUtil")  
boolean propertyUpdt = gvyEventUtil.holdEventProcessing(event, 'UNIT_PROPERTY_UPDATE', 3)
boolean rerouteUpdt = gvyEventUtil.holdEventProcessing(event, 'UNIT_REROUTE', 3)
if(propertyUpdt || rerouteUpdt){
    Thread.sleep(3000)
}

/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
     //Check For Not Processing OOG MSG on INGATE
    boolean blockOogForEvent= gvyUtilObj.holdEventProcessing(event, 'UNIT_IN_GATE', 15)
    println('blockOogForEvent :'+blockOogForEvent)
    if(!blockOogForEvent)
   {
      // N4 TO CMIS data processing - Check for unit out of gauge
      def unit = event.getEntity()
      def outOfGauge  = unit.getFieldValue("unitIsOog"); 
      def equiClass =unit.getFieldValue("unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass")
      def equiClassKey = equiClass != null ? equiClass.getKey() : equiClass
 
    //Class Container and Out of Guage or Field Change
 if(equiClassKey.equals('CONTAINER') &amp;&amp; (outOfGauge || event.wasFieldChanged('OOGFront') || event.wasFieldChanged('OOGBack') || event.wasFieldChanged('OOGTop') ||   event.wasFieldChanged('OOGLeft') ||  event.wasFieldChanged('OOGRight')))
 { 
     def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
     gvyEvntProcessor.processFieldChngCmisFeed(event,api)
   
   }//Ingate Check Ends

  }

}//If Condition Ends
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="RETURN_TO_CUSTOMER_UNASSIGN" description="RETURN_TO_CUSTOMER_UNASSIGN" changed="2015-08-13T04:37:15" changer="psethuraman" created="2016-01-07T14:43:25" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}

def gvyProc = api.getGroovyClassInstance("GvyInjOffLease");

// Release IGMTY hold to the equipment (Containers if there are any then Chassis if there are not)
def eqList=unit.getUnitCtrEquipmentStates();

if(eqList == null || eqList.size() == 0 ) {
  eqList=unit.getUnitChsEquipmentStates();
}


if(eqList != null) {
   def iter = eqList.iterator();
   while (iter.hasNext()) {
       def eq = iter.next();
       println("eq="+eq);
       gvyProc.releaseHold( eq,"IGMTY_HOLD release on OFF_LEASE_UNASSIGN");
  }
}

    // N4 TO CMIS data processing 
   def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
   def unitDtl = unitDetails.doIt(event)
   api.sendXml(unitDtl);

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="SET_EMPTY" description="SET_EMPTY" changed="2015-08-13T04:37:15" changer="psethuraman" created="2016-01-07T14:43:26" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

/* Set Avail Date */
 def unit = event.getEntity()
 def availLookup = api.getGroovyClassInstance("GvyAvailDate");
 boolean update =   availLookup.setAvailDate(unit, event);
 api.log("--------&gt;Avail Update "+update);

/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
   // N4 TO CMIS data processing 
   def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
   def unitDtl = gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  
   //Detention Msg Check
   if(update){
        def gvyDentObj = api.getGroovyClassInstance("GvyCmisDetentionMsgProcess"); 
        gvyDentObj.detentionProcess(unitDtl,event,api)
   }
   api.sendXml(unitDtl);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_RETURN_TO_STORAGE" changed="2015-08-13T04:37:17" changer="psethuraman" created="2016-01-07T14:43:28" creator="admin">
  <filter />
  <message-template>// Send MTX Back up to Acets 
def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil");  
def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
def unitDtl = unitDetails.doIt(event)
gvyCmisUtil.postMsgForAction(unitDtl,api,"MTX")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_BRING_BACK_INTO_YARD" changed="2015-08-13T04:37:18" changer="psethuraman" created="2016-01-07T14:43:29" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 def processAcetsMsg = gvyUtilObj.acetsMesssageFilter(event)
 if(processCmisFeed &amp;&amp; !processAcetsMsg)
 {
   // N4 TO CMIS data processing 
   def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
   def unitDtl = unitDetails.doIt(event)
   api.sendXml(unitDtl);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="ULK" description="ACETS - ULK" changed="2015-08-13T04:37:19" changer="psethuraman" created="2016-01-07T14:43:31" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

 //Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 { 
   // N4 TO CMIS data processing 
   def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
   def unitDtl = unitDetails.doIt(event)
   def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil")   
   gvyCmisUtil.postMsgForAction(unitDtl,api,'AULK')  

 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_RETURN_TO_INBOUND_CARRIER" changed="2015-08-13T04:37:16" changer="psethuraman" created="2016-01-07T14:43:33" creator="admin">
  <filter />
  <message-template>/* Set Deck Position */ 
 def unit = event.getEntity();
 def lookup = api.getGroovyClassInstance("GvyVesselLookup");
 lookup.setDeckPositionType(unit);</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Received container for Far East discharge port notice" sent-count="22770" changed="2014-12-04T09:08:53" changer="pschroeder" created="2016-01-07T14:43:37" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="OR" order="0" negated="false" parm-type="NO_PARM">
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^GUM" ui-value="GUM (Guam)" order="0" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KMI" ui-value="KMI (Kosrae (ex Kusaie))" order="1" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PNP" ui-value="PNP (Pohnpei (ex Ponape))" order="2" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PUX" ui-value="PUX (Koror, Palau)" order="3" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^RTA" ui-value="RTA (Rota)" order="4" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^SPN" ui-value="SPN (Saipan)" order="5" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^TIN" ui-value="TIN (Tinian)" order="6" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^TMGU" ui-value="TMGU (Guam)" order="7" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^UUK" ui-value="UUK (Chuck)" order="8" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^YAP" ui-value="YAP (Yap)" order="9" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^HAK" ui-value="HAK (Hakata/Fukuoka)" order="10" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KAO" ui-value="KAO (Kaohsiung)" order="11" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KEEL" ui-value="KEEL (Keelung (Chilung))" order="12" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KOB" ui-value="KOB (Kobe)" order="13" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^MAPH" ui-value="MAPH (Manila)" order="14" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^MOJ" ui-value="MOJ (Moji/Kitakyushu)" order="15" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^NAH" ui-value="NAH (Naha, Okinawa)" order="16" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^NGB" ui-value="NGB (Ningbo)" order="17" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^NGO" ui-value="NGO (Nagoya, Aichi)" order="18" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^OSA" ui-value="OSA (Osaka)" order="19" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PUS" ui-value="PUS (Busan (ex Pusan))" order="20" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^SHA" ui-value="SHA (Shanghai)" order="21" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^TSI" ui-value="TSI (Qingdao)" order="22" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^YOK" ui-value="YOK (Yokohama)" order="23" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^XMN" ui-value="XMN (Xiamen)" order="24" negated="false" parm-type="NO_PARM" />
      </predicate>
    </predicate>
  </filter>
  <message-template>Received MATU container &amp;UnitNbr for discharge port &amp;POD at &amp;TIME</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EDISESS" event-type="EDI_POST" description="EDI Import Discrepancies Report" changed="2014-10-03T15:35:44" changer="riyer" created="2016-01-07T14:43:39" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="edisessDirection" value="R" ui-value="Receive" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="IN" metafield="edisessName" value=":HLC_BAPLIE|MAE_BAPLIE|RECEIVE_ANL_BAPLIE|STIFIN|HSD_BAPLIE|" ui-value="[HLC_BAPLIE,MAE_BAPLIE,...]" order="1" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>println("Start of  MatReportImportDiscrepancies")

def ediSession = event.getEntity();
def sessionName = ediSession.getFieldValue("EdisessName")
println("END of MatReportImportDiscrepancies session name is "+sessionName)

println("Start of MatGetStowplanVesVoy");
String vesVoy = api.getGroovyClassInstance("MatGetStowplanTrankey").execute(event,api)
println("End of MatGetStowplanVesVoy");

//println("Generating  Import Discrepancies report")

//def reportRunner= api.getGroovyClassInstance("MatReportImportDiscrepancies");
//HashMap parameters = new HashMap();
//reportRunner.generateReport(parameters,vesVoy);</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EDISESS" event-type="EDI_POST" description="EDI Import Discrepancies Report" changed="2014-06-23T04:47:51" changer="riyer" created="2016-01-07T14:43:40" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="edisessDirection" value="R" ui-value="Receive" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="IN" metafield="edisessName" value=":HLC_BAPLIE|MAE_BAPLIE|RECEIVE_ANL_BAPLIE|SEACOS_BAPLIE|STIFIN|HSD_BAPLIE|" ui-value="[HLC_BAPLIE,MAE_BAPLIE,...]" order="1" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>println("Start of  MatReportImportDiscrepancies")

def ediSession = event.getEntity();
def sessionName = ediSession.getFieldValue("EdisessName")
println("END of MatReportImportDiscrepancies session name is "+sessionName)

println("Start of MatGetStowplanVesVoy");
String vesVoy = api.getGroovyClassInstance("MatGetStowplanTrankey").execute(event,api)
println("End of MatGetStowplanVesVoy");

//println("Generating  Import Discrepancies report")

//def reportRunner= api.getGroovyClassInstance("MatReportImportDiscrepancies");
//HashMap parameters = new HashMap();
//reportRunner.generateReport(parameters,vesVoy);</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EDISESS" event-type="EDI_POST" description="EDI Import Discrepancies Report" changed="2012-12-11T12:51:19" changer="riyer" created="2016-01-07T14:43:42" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="edisessDirection" value="R" ui-value="Receive" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="IN" metafield="edisessName" value=":HLC_BAPLIE|MAE_BAPLIE|RECEIVE_ANL_BAPLIE|SEACOS_BAPLIE|STIFIN|HSD_BAPLIE|" ui-value="[HLC_BAPLIE,MAE_BAPLIE,...]" order="1" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>println("Start of MatReportImportDiscrepancies")

def ediSession = event.getEntity();
def sessionName = ediSession.getFieldValue("EdisessName")
println("END of MatReportImportDiscrepancies session name is "+sessionName)

println("Start of MatGetStowplanVesVoy");
String vesVoy = api.getGroovyClassInstance("MatGetStowplanTrankey").execute(event,api)
println("End of MatGetStowplanVesVoy");

//println("Generating  Import Discrepancies report")

//def reportRunner= api.getGroovyClassInstance("MatReportImportDiscrepancies");
//HashMap parameters = new HashMap();
//reportRunner.generateReport(parameters,vesVoy);</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="CANCEL_DO_NOT_BACKLOAD" description="To Update Load Back Field to EMPTY" changed="2016-01-28T20:47:25" changer="kramachandran" created="2016-01-28T21:49:04" creator="kramachandran">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

def unit = event.getEntity();
println("//Unit ---:"+ unit +" ----//")
com.navis.argo.business.model.Facility fcy = com.navis.argo.ContextHelper.getThreadFacility();
println("//Fcy ---:"+ fcy +" ----//")
def  activeUfv = unit.getUfvForFacilityNewest(fcy);
 if(activeUfv == null) {
                activeUfv = unit.getUnitActiveUfvNowActive();
            }
println("//UFV ---:"+ activeUfv +" ----//")
activeUfv.setFieldValue("ufvFlexString09","");</message-template>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UNIT_STUFF" description="Unit Stuff Refresh" created="2016-05-20T17:55:38" creator="psethuraman" code-extension-name="MATHazmatHazardRefresh">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="NE" metafield="unitGoods.gdsCommodity" value="^AUTO" ui-value="AUTO (AUTO)" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UNIT_DISCH" description="Updates the verified grosss mass on Discharge only for Dutch" created="2016-07-19T18:08:55" creator="gbabu" code-extension-name="MatsonUnitSetVGMVerifiedFromBooking">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="unitActiveUfv.ufvFacility" value="46601" ui-value="DUT" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="EQ" metafield="unitCategory" value="EXPRT" ui-value="Export" order="1" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UNIT_BOOKING_VGM_UPDATE" description="This executes when booking property update happens" changed="2016-07-19T18:04:22" changer="gbabu" created="2016-07-01T05:37:06" creator="gbabu" code-extension-name="MatsonUnitSetVGMVerifiedFromBooking">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="NE" metafield="unitLineOperator" value="^MAE/LINEOP" ui-value="MAE" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="NE" metafield="unitLineOperator" value="^NYK/LINEOP" ui-value="NYK" order="1" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UNIT_ROLL" created="2016-10-13T13:38:39" creator="psethuraman" code-extension-name="MATSyncUnitFlexWithBooking">
  <filter />
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="ARD" changed="2015-08-13T04:37:09" changer="psethuraman" created="2016-01-07T14:43:08" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

// Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
   // N4 TO CMIS data processing 
   def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
   gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="OFF_LEASE_ASSIGN" description="OFF_LEASE_ASSIGNMENT" changed="2015-08-13T04:37:09" changer="psethuraman" created="2016-01-07T14:43:09" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}
  def gvyProc = api.getGroovyClassInstance("GvyInjOffLease");

  // Appy IGMTY hold to the equipment (Containers if there are any then Chassis if there are not)
  def eqList=unit.getUnitCtrEquipmentStates();

  if(eqList == null ||  eqList.size() == 0 ) {
    eqList=unit.getUnitChsEquipmentStates();
    println("EQUIP - 1")
  }


  if(eqList != null) {
     def iter = eqList.iterator();
     while (iter.hasNext()) {
       def eq = iter.next();
       println("eq=-------------------------"+eq);
      gvyProc.applyHold( eq,"INGATE on OFF_LEASE_ASSIGN");
   
   }
 }


  // Create Cmis Feed for Msg from Acets &amp; UI Transaction
  def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
  boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
  if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
    def unitDtl = unitDetails.doIt(event)
    api.sendXml(unitDtl);
  }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="ON_HOLD" description="ON_HOLD" changed="2015-08-13T04:37:09" changer="psethuraman" created="2016-01-07T14:43:10" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }

 //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 if(reportProcessing)
{
   def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
   def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
   api.sendXml( ret);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="OFF_LEASE_UNASSIGN" description="OFF_LEASE_UNASSIGNMENT" changed="2015-08-13T04:37:10" changer="psethuraman" created="2016-01-07T14:43:11" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}
def gvyProc = api.getGroovyClassInstance("GvyInjOffLease");

// Appy IGMTY hold to the equipment (Containers if there are any then Chassis if there are not)
def eqList=unit.getUnitCtrEquipmentStates();

if(eqList == null || eqList.size() == 0 ) {
  eqList=unit.getUnitChsEquipmentStates();
}


if(eqList != null) {
   def iter = eqList.iterator();
   while (iter.hasNext()) {
       def eq = iter.next();
       println("eq="+eq);
       gvyProc.releaseHold( eq,"INGATE release on OFF_LEASE_UNASSIGN");
  }
}

/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing   
    def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
    def unitDtl = unitDetails.doIt(event)
    api.sendXml(unitDtl);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="AG_HOLD" description="AG_HOLD" changed="2015-08-13T04:37:08" changer="psethuraman" created="2016-01-07T14:43:12" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

// Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 boolean processAcetsMsg = gvyUtilObj.acetsMesssageFilter(event)
  if(processCmisFeed &amp;&amp; !processAcetsMsg)
 {
     def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
     gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }
 
 //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 if(reportProcessing)
{
  //Cargo Status Report
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml(ret)
 }

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="NTFY:CG_HOLD_PLACE" email-party="unitGoods.gdsConsigneeBzu" description="Coast Guard hold notice for hazardous material inspection" sent-count="19" changed="2015-08-13T04:37:08" changer="psethuraman" created="2016-01-07T14:43:13" creator="admin">
  <filter />
  <message-template>Date : &amp;TIME      
                     NOTIFICATION OF HOLD - HAZARDOUS MATERIAL INSPECTION


            VESSEL : &amp;InboundCarrierName                                      VOYAGE : &amp;InboundCarrierInVoyageNbr

           BOOKING : &amp;GoodsBlNbr                                 CONTAINER : &amp;UnitNbr

DEAR SIR/MADAM,

UNITED STATES COAST GUARD MARINE SAFETY OFFICE HAS PLACED THE ABOVE CONTAINER ON HOLD FOR HAZARDOUS MATERIAL INSPECTION.  ONCE THE INSPECTION HAS BEEN COMPLETED, YOU WILL BE NOTIFIED THAT THE CONTAINER HAS BEEN RELEASED.

&amp;UfvFlexString03
MATSON TERMINALS INC.</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="GX_RELEASE" description="GX_RELEASE" changed="2015-08-13T04:37:11" changer="psethuraman" created="2016-01-07T14:43:13" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }

//Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 def gvyCrsUtil = api.getGroovyClassInstance("GvyCmisCargoStatusUtil")
 boolean isNISPort =  gvyCrsUtil.nisPortCheck(event,api)
 if(reportProcessing &amp;&amp; isNISPort)
{
  //Cargo Status Report
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml( ret);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="DOC_RELEASE" description="DOC_RELEASE" changed="2015-08-13T04:37:13" changer="psethuraman" created="2016-01-07T14:43:14" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }

//Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 def gvyCrsUtil = api.getGroovyClassInstance("GvyCmisCargoStatusUtil")
 boolean isNISPort =  gvyCrsUtil.nisPortCheck(event,api)
 if(reportProcessing &amp;&amp; isNISPort)
{
  //Cargo Status Report
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml( ret);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_IN_GATE" description="Verifies the Ingate Required Temp to the Export Booking RequiredTemp" changed="2017-04-25T14:46:23" changer="kramachandran" created="2016-01-07T14:43:15" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
def u = event.getEntity()
def obCarrier = u.getFieldValue( "unitActiveUfv.ufvActualObCv.cvId");
def expGateBkgNbr = u.getFieldValue("unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr")
def bkgNotes = u.getFieldValue("unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqoNotes")
def commodity = bkgNotes != null &amp;&amp; bkgNotes.indexOf(":") != -1 ? bkgNotes.substring(0,bkgNotes.indexOf(":")) : ""
commodity = commodity.trim().length() &gt; 0 ? commodity : null
   if(expGateBkgNbr != null){
          u.setFieldValue("unitGoods.gdsBlNbr",expGateBkgNbr)
          if(commodity != null){  u.setFieldValue("unitRemark",commodity) }
    }
def equiType=u.getFieldValue("unitPrimaryUe.ueEquipment.eqEquipType.eqtypId")
if(equiType != null &amp;&amp; equiType.startsWith('R'))
{
    def unitDetails = api.getGroovyClassInstance("GvyUnitInGateTempCheck")
    unitDetails.doIt(u,event)

   def tempSetting = u.getFieldValue("unitFlexString07");
   if(tempSetting != null &amp;&amp; tempSetting.equals('AMB') &amp;&amp; u.getUnitRequiresPower()){
       u.setUnitRequiresPower(Boolean.FALSE)
   }
}
//3. Set EquiContainerService if NULL
def gvyEquiObj = api.getGroovyClassInstance("GvyCmisEquiDetail");
gvyEquiObj.setEqCntrSvr(event)
//3.1 Flip Mty Cli Cntr oper from MAT to Cli Oper
gvyEquiObj.flipMtyCliCntrOperator(u)
//4. Cmis Feed
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 def unitReceiveObj = api.getGroovyClassInstance("GvyCmisEventUnitReceive");
 if(processCmisFeed)
 {
    def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
    def unitDtl = unitDetails.doIt(event)
    api.log(unitDtl)

    def gvySrvObj = api.getGroovyClassInstance("GvyCmisSrvMsgProcessor");
    gvySrvObj.processServiceMessage(unitDtl,event,api)

   def unit = event.getEntity()
   def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil")
   def unitReceiveXml = unitReceiveObj.processUnitRecieve(unitDtl,unit,api)
   unitReceiveXml = api.getGroovyClassInstance("GvyCmisEventSIT").ybSatProc(gvyCmisUtil,unit, unitReceiveXml)

   api.sendXml(unitReceiveXml);
   unitReceiveObj.postMsgHazOvd(unitReceiveXml,unit,api)
   unitReceiveObj.setWOAFlag(event, unit, api)
 }
//5. Set Evnt Note with batNbr
def gvyCmisGateData = api.getGroovyClassInstance("GvyCmisGateData")
def carrierVisitGkey = u.getFieldValue("unitActiveUfv.ufvActualIbCv.cvdGkey")
def batNbr = gvyCmisGateData.getTruckBatNbr(carrierVisitGkey)
def note = event.event.evntNote
note = note != null ? note : ''
if(batNbr != null){ event.getEvent().setEvntNote('EIT-'+batNbr+'  '+note); }
//6. Checks Transfer
//gvyCmisGateData.setTransferComplete(u,api);
api.getGroovyClassInstance("GvyCheckSITIgtEmpty").check(event);
api.getGroovyClassInstance("MatUpdateTagId").execute(event.entity.unitId);
api.getGroovyClassInstance("MATUtil").refreshUnit(event.getEntity());</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="COBIZ_ASSIGN_BKG" description="COBIZ_ASSIGN_BKG" changed="2015-08-13T04:37:14" changer="psethuraman" created="2016-01-07T14:43:16" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}

def coBizGvy = api.getGroovyClassInstance( "CoBizBooking");
def ret = coBizGvy.process( unit);
def writer = new StringWriter();
def builder = new groovy.xml.MarkupBuilder(writer);
def container = builder.GroovyMsg(msgType:'GVY_INJ_RET',gvyReturn:ret);
def xml = writer.toString();
// send the XML to the jms queue
api.sendXml(xml);

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_HAZARDS_DELETE" changed="2015-08-13T04:37:11" changer="psethuraman" created="2016-01-07T14:43:16" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
  
// Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyEventUtil = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyEventUtil.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    def xmlStr =  gvyEvntProcessor.processFieldChngCmisFeed(event,api)
    def gvyHazObj = api.getGroovyClassInstance("GvyCmisMostHazardousItem");
    gvyHazObj.processMostHazItem(xmlStr, gvyEventUtil,api, event)
 } 

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="REVENUE_MTY" description="REVENUE_MTY" changed="2015-08-13T04:37:12" changer="psethuraman" created="2016-01-07T14:43:18" creator="admin">
  <filter />
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_BRING_TO_COMMUNITY" description="Unit cancel" sent-count="115" changed="2016-11-15T11:40:15" changer="vnatesan" created="2016-01-07T14:43:17" creator="admin">
  <filter />
  <message-template>UNIT_BRING_TO_COMMUNITY fired in Production.
This should not happen, please investigate.</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="CMIS_REFRESH_ALL" description="Refresh all unit in Cmis with last event action on unit" changed="2015-08-13T04:37:13" changer="psethuraman" created="2016-01-07T14:43:19" creator="admin">
  <filter />
  <message-template>/*
println('//-------------- CMIS REFRESH START -------------------------------//')
def gvyObj = api.getGroovyClassInstance("GvyCmisUnitDataRefresh")
gvyObj.processUnitDataExtraction()
println('//-------------- CMIS REFRESH END -------------------------------//') 
*/</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="CUS_RELEASE" description="CUS_RELEASE" changed="2015-08-13T04:37:13" changer="psethuraman" created="2016-01-07T14:43:20" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 boolean processAcetsMsg = gvyUtilObj.acetsMesssageFilter(event)
 if(processCmisFeed &amp;&amp; !processAcetsMsg)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }

 //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 if(reportProcessing)
{
   def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
   def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
   api.sendXml( ret);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="RD_RELEASE" description="RD_RELEASE" changed="2015-08-13T04:37:11" changer="psethuraman" created="2016-01-07T14:43:21" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

 // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 boolean processAcetsMsg = gvyUtilObj.acetsMesssageFilter(event)
 if(processCmisFeed &amp;&amp; !processAcetsMsg)
 {
   // N4 TO CMIS data processing 
   def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
   gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }

 //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 if(reportProcessing)
{
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml( ret);
}

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="XT_RELEASE" description="XT_RELEASE" changed="2015-08-13T04:37:16" changer="psethuraman" created="2016-01-07T14:43:22" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
   // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }

//Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 def gvyCrsUtil = api.getGroovyClassInstance("GvyCmisCargoStatusUtil")
 boolean isNISPort =  gvyCrsUtil.nisPortCheck(event,api)
 if(reportProcessing &amp;&amp; isNISPort)
{
  //Cargo Status Report
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml( ret);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EQ" event-type="LTV_RELEASE" description="LTV_RELEASE" changed="2015-08-13T04:37:14" changer="psethuraman" created="2016-01-07T14:43:23" creator="admin">
  <filter />
  <message-template>/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
   // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="ST_RELEASE" description="ST_RELEASE" changed="2015-08-13T04:37:14" changer="psethuraman" created="2016-01-07T14:43:24" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
   // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }

//Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 def gvyCrsUtil = api.getGroovyClassInstance("GvyCmisCargoStatusUtil")
 boolean isNISPort =  gvyCrsUtil.nisPortCheck(event,api)
 if(reportProcessing &amp;&amp; isNISPort)
{
  //Cargo Status Report
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml( ret);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EQ" event-type="SHOP_RELEASE" description="SHOP_RELEASE" changed="2015-08-13T04:37:15" changer="psethuraman" created="2016-01-07T14:43:25" creator="admin">
  <filter />
  <message-template>/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
   def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
   gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="ROUTE_COBIZ" description="ROUTE_COBIZ" changed="2015-08-13T04:37:15" changer="psethuraman" created="2016-01-07T14:43:26" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
   // N4 TO CMIS data processing 
   def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
   def unitDtl = unitDetails.doIt(event)
   api.sendXml(unitDtl);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="NTFY:CG_HOLD_RELEASE" changed="2015-08-13T04:37:17" changer="psethuraman" created="2016-01-07T14:43:27" creator="admin">
  <filter />
  <message-template>def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="NTFY:HP_CANCELLED" email-party="unitRouting.rtgTruckingCompany" description="Hold for payment cleared notice to trucker" sent-count="3" changed="2015-08-13T04:37:09" changer="psethuraman" created="2016-01-07T14:43:10" creator="admin">
  <filter />
  <message-template>Date : &amp;TIME

                               MATSON TERMINALS - CONTAINER YARD

From: &amp;UfvFlexString03
Subject: HOLD FOR PAYMENT CLEARED - &amp;UfvFlexString04
         

Phone: (808) 848-1321   Fax: (808) 842-5490
---------------------------------------------------------------------------------------------
CONTAINER: &amp;UnitNbr
 LOCATION: &amp;PositionFull
   VESVOY: &amp;InboundCarrierId
  SHIPPER: &amp;GoodsShipperName
  BOOKING: &amp;GoodsBlNbr
    HOLDS: &amp;UnitImpediments</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="CUS_HOLD" description="CUS_HOLD" changed="2017-04-28T09:40:37" changer="nkrishnan" created="2016-01-07T14:43:12" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 boolean processAcetsMsg = gvyUtilObj.acetsMesssageFilter(event)
 if(processCmisFeed &amp;&amp; !processAcetsMsg)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }

 //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 if(reportProcessing)
{
  // Cargo Status email
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
 
//def assignContextFcyGvy = api.getGroovyClassInstance("AssignFaciltyToContextHelper"); 
//assignContextFcyGvy.setFacility(event, ret); 

  //api.sendXml(ret)
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_PROPERTY_UPDATE" description="Notificaztion for property update" changed="2017-01-18T03:27:41" changer="brajamanickam" created="2016-01-07T14:43:13" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="NOT_NULL" metafield="unitId" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
def unit = event.getEntity();
HashMap map = new HashMap();
def podup = api.getGroovyClassInstance("GvyPodValidationForVesselUnit");
podup.execute(map);

if (unit.getUnitFreightKind().equals(com.navis.argo.business.atoms.FreightKindEnum.MTY)) {
 println("MTY unit, set gross wt to tare wt")
 unit.setUnitWeightToTareWeight();
}
Event evnt = event.getEvent();
println("PROPERTY UPDATE Field changes : "+evnt.getEvntFieldChanges());

if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}

def gvyEventUtil = api.getGroovyClassInstance("GvyEventUtil") 
def gvyPropUpdtObj = api.getGroovyClassInstance("GvyCmisEventUnitPropertyUpdate") 
gvyPropUpdtObj.setDetentionDTDFields(event, unit, gvyEventUtil, api);
boolean rerouteUpdt = gvyEventUtil.holdEventProcessing(event, 'UNIT_REROUTE', 3)
if(rerouteUpdt){ Thread.sleep(3000) }

//Suppressing Event Feed for triggers from Inbuilt,Newves
boolean blockForNonBuiltInEvnts = gvyPropUpdtObj.isCustomEvent(event, gvyEventUtil)
boolean suppressforNv = gvyPropUpdtObj.suppressForNewves(event, gvyEventUtil)
boolean nisDetn = gvyEventUtil.holdEventProcessing(event, 'NIS_DETENTION', 30)
boolean isUnitPropertyUpdateProcessed = false;

 
boolean isActiveUnit = event.entity.unitForeignHostKey != null ? true : false
if(!suppressforNv &amp;&amp; !nisDetn &amp;&amp; isActiveUnit &amp;&amp; !blockForNonBuiltInEvnts &amp;&amp; !event.event.evntAppliedBy.contains('notice')
   &amp;&amp; !event.event.evntAppliedBy.startsWith('user:user:') ){
    boolean OgtUpdt = gvyEventUtil.holdEventProcessing(event, 'UNIT_DELIVER', 3)
    if(OgtUpdt){  return; }
   gvyPropUpdtObj.processUnitPropertyUpdate(event,api) 
   isUnitPropertyUpdateProcessed = true; 
 }

//Create Report - UI, ACETS and SUPPLEMENT 
boolean isTIHoldReleased = gvyEventUtil.holdEventProcessing(event, 'TI_RELEASE', 3)
gvyPropUpdtObj = gvyPropUpdtObj != null ? gvyPropUpdtObj : api.getGroovyClassInstance("GvyCmisEventUnitPropertyUpdate")  
 def isCargoNoticeSent = gvyPropUpdtObj.isCargoNoticeSent();
 boolean reportProcessing = gvyEventUtil.verfiyReportSnxProcessing(event)
 if(!isTIHoldReleased &amp;&amp; !suppressforNv &amp;&amp; !nisDetn &amp;&amp; reportProcessing &amp;&amp; !isCargoNoticeSent &amp;&amp; !blockForNonBuiltInEvnts &amp;&amp; !event.event.evntAppliedBy.contains('notice') 
   &amp;&amp; !event.event.evntAppliedBy.startsWith('user:user:'))
{
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
   api.sendXml( ret);
 }

// 12/22/2014 dkannadasan EP000218967 Update of Detention Due Date After Outgate
if (!isUnitPropertyUpdateProcessed &amp;&amp; !isActiveUnit){
     //gvyPropUpdtObj.processMnsForDepartedUnitDetentionDateUpdate(event,api,gvyEventUtil);  
}

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EQ" event-type="CG_DMG_HOLD" description="CG_DMG_HOLD" changed="2015-08-13T04:37:13" changer="psethuraman" created="2016-01-07T14:43:15" creator="admin">
  <filter />
  <message-template>// Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
     def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="MDA_UNASSIGN" description="MDA_UNASSIGN" changed="2015-08-13T04:37:11" changer="psethuraman" created="2016-01-07T14:43:16" creator="admin">
  <filter />
  <message-template>// Remove as per Joce's email 10/13/2008
//def equip = event.getEntity()
//def equiClass = unit.getFieldValue("eqsEquipment.eqClass")
//equiClass = equiClass.getKey() 
//println("equiClass :"+equiClass)
//def proc =  api.getGroovyClassInstance("MdaReleaseProc");
//proc.process( equip);

println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}
  
   // N4 TO CMIS data processing 
   def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
   def unitDtl = unitDetails.doIt(event)
   api.sendXml(unitDtl);

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="OWNER TEST" description="OWNER_TEST" changed="2015-08-13T04:37:12" changer="psethuraman" created="2016-01-07T14:43:18" creator="admin">
  <filter />
  <message-template>def gvyEquiOwner = api.getGroovyClassInstance("GvyXpsEquipmentOwner") 
gvyEquiOwner.setEquipmentOwner(event)

def unit = event.getEntity() 
com.navis.argo.business.reference.SpecialStow specialStow = new com.navis.argo.business.reference.SpecialStow();
unit.updateSpecialStow(specialStow.findOrCreateSpecialStow("LEAS"))</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="COMMUNITY_SERVICE_UNASSIGN" description="COMMUNITY_SERVICE_UNASSIGN" changed="2015-08-13T04:37:13" changer="psethuraman" created="2016-01-07T14:43:20" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}

/* -- Dont Pass PlanDisp=3   
 // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
    def unitDtl = unitDetails.doIt(event)
    api.sendXml(unitDtl);
  }
*/
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="SHIPPER_REHANDLE" description="SHIPPER_REHANDLE" changed="2015-08-13T04:37:14" changer="psethuraman" created="2016-01-07T14:43:24" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
   // N4 TO CMIS data processing 
   def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
   gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="RETURN_TO_CUSTOMER_ASSIGN" description="RETURN_TO_CUSTOMER_ASSIGN" changed="2015-08-13T04:37:15" changer="psethuraman" created="2016-01-07T14:43:26" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}

def gvyProc = api.getGroovyClassInstance("GvyInjOffLease");
//gvyProc.doIt( unit);
//def servicesMgr = Roastery.getBean("servicesManager");
//servicesMgr.applyHold( "IGMTY", unit, null, null, "ACETS");

// Appy IGMTY hold to the equipment (Containers if there are any then Chassis if there are not)
def eqList=unit.getUnitCtrEquipmentStates();

if(eqList == null || eqList.size() == 0 ) {
  eqList=unit.getUnitChsEquipmentStates();
}

if(eqList != null) {
   def iter = eqList.iterator();
   while (iter.hasNext()) {
       def eq = iter.next();
       println("eq="+eq);
       gvyProc.applyHold( eq,"IGMTY_HOLD on RETURN_TO_CUSTOMER_ASSIGN");
  }
}

   // N4 TO CMIS data processing 
   def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
   def unitDtl = unitDetails.doIt(event)
   api.sendXml(unitDtl);

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="NTFY:CONTAINER_DIVERTED" changed="2015-08-13T04:37:17" changer="psethuraman" created="2016-01-07T14:43:27" creator="admin">
  <filter />
  <message-template>def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="BKG" event-type="EQ_UPDATE_BKG" description="Update ISO Id for booking items" changed="2014-10-03T16:35:41" changer="riyer" created="2016-01-07T14:43:28" creator="admin">
  <filter />
  <message-template>try
{
      def booking = event.getEntity();       
      def bkgNotes = booking.getEqoNotes()
       bkgNotes = bkgNotes==null?"":bkgNotes;
       def bkngNumber = booking.eqboNbr;
       String bkngGkey = booking.eqboGkey;
       if(bkgNotes.contains("METAL SCRAP")||bkgNotes.contains("SCRAP METAL")) {
            api.getGroovyClassInstance("MatUpdateBkngUnitIso").setEquipSeries(bkngGkey)
        }
}catch(Exception e){
       e.printStackTrace();
       println("Error while setting equipment series  to Booking Items :: " + bkngNumber);
}</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_OPERATOR_CHANGE" changed="2015-08-13T04:37:18" changer="psethuraman" created="2016-01-07T14:43:29" creator="admin">
  <filter />
  <message-template>/* println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
  
  //Thread Sleep Condtion for UI - Show Unit Detail Editor
  def gvyEventUtil = api.getGroovyClassInstance("GvyEventUtil")  
  boolean propertyUpdt = gvyEventUtil.holdEventProcessing(event, 'UNIT_PROPERTY_UPDATE', 3)
  boolean rerouteUpdt = gvyEventUtil.holdEventProcessing(event, 'UNIT_REROUTE', 3)
  println('OPERATOR CHNG : Thread Sleep:: propertyUpdt::'+propertyUpdt+'   rerouteUpdt ::'+rerouteUpdt)

  if(propertyUpdt || rerouteUpdt){
      Thread.sleep(3000)
  }

  //1- Set Avail Date
  def unit = event.getEntity()
  def availLookup = api.getGroovyClassInstance("GvyAvailDate");
  boolean update = availLookup.setAvailDate(unit, event);

 //2- Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 boolean processAcetsMsg = gvyUtilObj.acetsMesssageFilter(event)
 println('Dentention :'+update+'    Cmis Feed :'+processCmisFeed+'   AcetsMsg:'+processAcetsMsg)
 if(processCmisFeed &amp;&amp; !processAcetsMsg)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    def gvyOprMsg = gvyEvntProcessor.processFieldChngCmisFeed(event,api)

     //Detention Msg Check
     if(update){
       def gvyDentObj = api.getGroovyClassInstance("GvyCmisDetentionMsgProcess"); 
       gvyDentObj.detentionProcess(gvyOprMsg,event,api)
     }else if(!update){
        api.sendXml(gvyOprMsg)
     }

  } 
  else if (update &amp;&amp; processAcetsMsg)
  {
        // N4 TO CMIS data processing 
        def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
        def gvyOprMsg = gvyEvntProcessor.processFieldChngCmisFeed(event,api)

        //Detention Msg Check
        if(update){
           def gvyDentObj = api.getGroovyClassInstance("GvyCmisDetentionMsgProcess"); 
           gvyDentObj.detentionProcess(gvyOprMsg,event,api)
       }
  }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//") */</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="NTFY:CONTAINER_RECONSIGNED" changed="2015-08-13T04:37:18" changer="psethuraman" created="2016-01-07T14:43:29" creator="admin">
  <filter />
  <message-template>def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EQ" event-type="INGATE_RELEASE" description="INGATE_RELEASE" changed="2015-08-13T04:37:19" changer="psethuraman" created="2016-01-07T14:43:30" creator="admin">
  <filter />
  <message-template>/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_DAMAGED" description="UNIT_DAMAGED" changed="2016-08-09T05:08:44" changer="brajamanickam" created="2016-01-07T14:43:31" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 println("processCmisFeed" +processCmisFeed);
 if(processCmisFeed)
 {
      println("Inside");
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
    println("End");
  }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="LNK" description="ACETS - LNK" changed="2015-08-13T04:37:20" changer="psethuraman" created="2016-01-07T14:43:32" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

  // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 { 
   // N4 TO CMIS data processing 
   def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
   def unitDtl = unitDetails.doIt(event)
   def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil")   
   gvyCmisUtil.postMsgForAction(unitDtl,api,'ALNK')  
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="TV" event-type="MOVE_TV" description="Send MOVE_TC to CMIS for BobTails only." changed="2015-08-13T04:37:20" changer="psethuraman" created="2016-01-07T14:43:32" creator="admin">
  <filter />
  <message-template>def visit = event.getEntity();
def count = visit.getActiveTransactionCount();

if(count == 1) {
    def lookup = api.getGroovyClassInstance("GvyCmisTruckDataProcessor");
    def tran = visit.getActiveTransactions().iterator().next();
    if(lookup.isOutgate(tran) ) {
                     // This should be a Bobtail out.
    	def xml = lookup.doIt(event,tran);
    	//api.log("MOVE_TV XML: "+xml);
    	api.sendXml(xml);
    }
}</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="DONOT_SEND_PLACED" description="DONOT_SEND_PLACED" changed="2015-08-13T04:37:20" changer="psethuraman" created="2016-01-07T14:43:32" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
def unitDtl = unitDetails.doIt(event);

def gvyEventObj = event.getEvent()
def notes = gvyEventObj.getEvntNote();
gvyEventObj.setEvntNote("DNP Placed");

println(":::::::::::::::::unitDtl:::::::::::::"+notes);
def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil");
unitDtl = gvyCmisUtil.eventSpecificFieldValue(unitDtl,"lastAction=", "DNP")
unitDtl = gvyCmisUtil.eventSpecificFieldValue(unitDtl,"action=", "DNP")
println(":::::::::::::::::unitDtl After Action Update :::::::::::::"+unitDtl);

api.sendXml(unitDtl);

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_DAMAGES_UPDATED" description="UNIT_DAMAGES_UPDATED" changed="2015-08-13T04:37:19" changer="psethuraman" created="2016-01-07T14:43:33" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="OUTGATE_HOLD" description="OUTGATE_HOLD" changed="2015-08-13T04:37:17" changer="psethuraman" created="2016-01-07T14:43:34" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EDISESS" event-type="EDI_POST" description="EDI Import Discrepancies Report" changed="2012-12-11T12:50:27" changer="riyer" created="2016-01-07T14:43:34" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="edisessDirection" value="R" ui-value="Receive" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="IN" metafield="edisessName" value=":HLC_BAPLIE|MAE_BAPLIE|RECEIVE_ANL_BAPLIE|STIFIN|HSD_BAPLIE|" ui-value="[HLC_BAPLIE,MAE_BAPLIE,...]" order="1" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>println("Start of MatReportImportDiscrepancies")

def ediSession = event.getEntity();
def sessionName = ediSession.getFieldValue("EdisessName")
println("END of MatReportImportDiscrepancies session name is "+sessionName)

println("Start of MatGetStowplanVesVoy");
String vesVoy = api.getGroovyClassInstance("MatGetStowplanTrankey").execute(event,api)
println("End of MatGetStowplanVesVoy");

//println("Generating  Import Discrepancies report")

//def reportRunner= api.getGroovyClassInstance("MatReportImportDiscrepancies");
//HashMap parameters = new HashMap();
//reportRunner.generateReport(parameters,vesVoy);</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="YB_ASSIGN" description="overweight Alert YB assign weight &gt; 55000 email" sent-count="1707" changed="2014-07-29T09:29:47" changer="kmikami" created="2016-01-07T14:43:35" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="GT" metafield="unitGoodsAndCtrWtKg" value="24947.58035" ui-value="55000 lb" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>&amp;UnitNbr YB Assigned at &amp;TIME for &amp;Destination is Overweight. Exceeds weight limitation of 55,000 lb.</message-template>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UNIT_TRANSLOAD_TO_EMPTY" description="Call unit Strip during Transload to send message to Gems" created="2016-12-21T10:34:34" creator="vnatesan" code-extension-name="MATCallTransloadStrip">
  <filter />
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Ingated Coast Guard damage equipment to F&amp;M" changed="2009-04-09T08:40:16" changer="kmikami" created="2016-01-07T14:43:35" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="MATCHES" metafield="unitImpediments" value="*CG DMG*" ui-value="*CG DMG*" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>Date : &amp;TIME

                               MATSON TERMINALS - CONTAINER YARD

From: Gate
Subject: Coast Guard Damage Container to F&amp;M


Container &amp;UnitNbr for F&amp;M was ingated on &amp;DateOfLastHandling.
&amp;UnitRemark</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Ingated Coast Guard damage equipment to F&amp;M" changed="2009-04-09T07:40:16" changer="kmikami" created="2016-01-07T14:43:35" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="MATCHES" metafield="unitImpediments" value="*CG DMG*" ui-value="*CG DMG*" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>Date : &amp;TIME

                               MATSON TERMINALS - CONTAINER YARD

From: Gate
Subject: Coast Guard Damage Container to F&amp;M


Container &amp;UnitNbr for F&amp;M was ingated on &amp;DateOfLastHandling.
&amp;UnitRemark</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EDISESS" event-type="EDI_POST" description="EDI Import Discrepancies Report" changed="2014-06-23T05:47:51" changer="riyer" created="2016-01-07T14:43:36" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="edisessDirection" value="R" ui-value="Receive" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="IN" metafield="edisessName" value=":HLC_BAPLIE|MAE_BAPLIE|RECEIVE_ANL_BAPLIE|SEACOS_BAPLIE|STIFIN|HSD_BAPLIE|" ui-value="[HLC_BAPLIE,MAE_BAPLIE,...]" order="1" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>println("Start of  MatReportImportDiscrepancies")

def ediSession = event.getEntity();
def sessionName = ediSession.getFieldValue("EdisessName")
println("END of MatReportImportDiscrepancies session name is "+sessionName)

println("Start of MatGetStowplanVesVoy");
String vesVoy = api.getGroovyClassInstance("MatGetStowplanTrankey").execute(event,api)
println("End of MatGetStowplanVesVoy");

//println("Generating  Import Discrepancies report")

//def reportRunner= api.getGroovyClassInstance("MatReportImportDiscrepancies");
//HashMap parameters = new HashMap();
//reportRunner.generateReport(parameters,vesVoy);</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Container Received for AES Port" sent-count="10008" changed="2014-10-20T11:31:42" changer="-notices-" created="2016-01-07T14:43:36" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="OR" order="0" negated="false" parm-type="NO_PARM">
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^NGB" ui-value="NGB (Ningbo)" order="0" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^SHA" ui-value="SHA (Shanghai)" order="1" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^UUK" ui-value="UUK (Chuck)" order="2" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^EBY" ui-value="EBY (Ebeye)" order="3" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KMI" ui-value="KMI (Kosrae (ex Kusaie))" order="4" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KWJ" ui-value="KWJ (Kwajalein)" order="5" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^MAJ" ui-value="MAJ (Majuro)" order="6" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PNP" ui-value="PNP (Pohnpei (ex Ponape))" order="7" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^YAP" ui-value="YAP (Yap)" order="8" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PUX" ui-value="PUX (Koror, Palau)" order="9" negated="false" parm-type="NO_PARM" />
      </predicate>
    </predicate>
  </filter>
  <message-template>Container Ingated at &amp;TIME for &amp;Destination
Booking: &amp;DepartureOrderNo
Container: &amp;UnitNbr
Vesvoy: &amp;OutboundCarrierId
Shipper: &amp;GoodsShipperName</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="NEWVES_COMPLETED" description="Trigger On New Vess Completion" changed="2016-10-24T06:19:25" changer="brajamanickam" created="2016-01-07T14:43:37" creator="admin">
  <filter />
  <message-template>/* EP000220294 dkannadasan Feb 18 2015 - Code to prevent NewVes complete if any errors pending to be corrected */

boolean canProceed = api.getGroovyClassInstance("MATFinalCheckNewVesComplete").execute(event,api);

/* EP000220294 dkannadasan Feb 18 2015 Adding if condition, to proceed only if there are no errors pending on  NewVes process */

println("0 MATFinalCheckNewVesComplete :"+canProceed);

if(canProceed) {
println("//	"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//");
println("1 MATFinalCheckNewVesComplete :"+canProceed);

api.getGroovyClassInstance("MATTriggerGroovyJob").triggerMatVesGroovyJob(event,api);
api.getGroovyClassInstance("MATTriggerGroovyJob").triggerMatVesEventGroovyJob(event,api);


//CMIS_DATA_REFRESH by VesVoy
def unit = event.getEntity();
def vesVoy =unit.getFieldValue("unitDeclaredIbCv.cvId")
println("&lt;&lt;&lt;&lt;&lt;Calling CMIS_DATA_REFRESH for &gt;&gt;&gt;&gt;&gt;&gt;"+vesVoy);
event.getEvent().setEvntNote('NewVes Completed')
api.getGroovyClassInstance("GvyCmisUnitDataRefresh").processCmisDataRefreshByVesVoyNV(api,event,vesVoy);
println("&lt;&lt;&lt;&lt;&lt;End CMIS_DATA_REFRESH for &gt;&gt;&gt;&gt;&gt;&gt;"+vesVoy);
}</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="DONOT_SEND_RELEASED" description="DONOT_SEND_RELEASED" changed="2015-08-13T04:37:21" changer="psethuraman" created="2016-01-07T14:43:37" creator="admin">
  <filter />
  <message-template>println("//Start Event --- :"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
def unitDtl = unitDetails.doIt(event);

def gvyEventObj = event.getEvent()
def notes = gvyEventObj.getEvntNote();
gvyEventObj.setEvntNote("DNR Released");

println(":::::::::::::::::unitDtl:::::::::::::"+notes);
def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil");
unitDtl = gvyCmisUtil.eventSpecificFieldValue(unitDtl,"lastAction=", "DNR")
unitDtl = gvyCmisUtil.eventSpecificFieldValue(unitDtl,"action=", "DNR")
println(":::::::::::::::::unitDtl After Action Update :::::::::::::"+unitDtl);

api.sendXml(unitDtl);

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Non 687 and 689 reefer series container for MIS port" sent-count="179" changed="2014-09-29T12:29:29" changer="-notices-" created="2016-01-07T14:43:38" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="MATCHES" metafield="unitPrimaryUe.ueEquipment.eqEquipType.eqtypId" value="R*" ui-value="R*" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="EQ" metafield="unitPrimaryUe.ueEquipment.eqIdPrefix" value="MATU" ui-value="MATU" order="1" negated="false" parm-type="NO_PARM" />
      <predicate verb="AND" order="2" negated="true" parm-type="NO_PARM">
        <predicate verb="MATCHES" metafield="unitPrimaryUe.ueEquipment.eqIdNbrOnly" value="687*" ui-value="687*" order="0" negated="false" parm-type="NO_PARM" />
        <predicate verb="MATCHES" metafield="unitPrimaryUe.ueEquipment.eqIdNbrOnly" value="689*" ui-value="689*" order="1" negated="false" parm-type="NO_PARM" />
      </predicate>
      <predicate verb="OR" order="3" negated="false" parm-type="NO_PARM">
        <predicate verb="EQ" metafield="unitGoods.gdsDestination" value="MAJ" ui-value="MAJ" order="0" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitGoods.gdsDestination" value="KWJ" ui-value="KWJ" order="1" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitGoods.gdsDestination" value="EBY" ui-value="EBY" order="2" negated="false" parm-type="NO_PARM" />
      </predicate>
    </predicate>
  </filter>
  <message-template>&amp;UnitNbr Ingated at &amp;TIME for &amp;Destination</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="CLIENT_VESSEL_COMPLETED" description="Trigger New Vess XML by Groovy " changed="2015-08-13T04:37:22" changer="psethuraman" created="2016-01-07T14:43:38" creator="admin">
  <filter />
  <message-template>/* When this event is recorded to the Unit the given below groovy is recorded. This groovy takes the inbound vessel visit of the unit and then then triggers MATProcessNewVess groovy which extracts all the Units in the vessel visit and builds the new Vess XML and sends the XML using JMS queue.
AUTHOR : Siva Raja
Date Written : 07/06/2012
*/
//api.getGroovyClassInstance("MATProcessNewVess").execute(event,api);

api.getGroovyClassInstance("MATTriggerGroovyJob").triggerGroovyJob(event,api);

println("Generating Import Discrepancies report")
def vesVoy = event.getProperty("InboundCarrierId") ;

println("Generating Import Discrepancies report for " + vesVoy)
def reportRunner= api.getGroovyClassInstance("MatReportImportDiscrepancies");
HashMap parameters = new HashMap();
reportRunner.generateReport(parameters,vesVoy);

//CMIS_DATA_REFRESH by VesVoy
event.getEvent().setEvntNote('Client Vessel Completed')
api.getGroovyClassInstance("GvyCmisUnitDataRefresh").processCmisDataRefreshByVesVoy(api,event,vesVoy);</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EDISESS" event-type="EDI_POST" description="EDI Import Discrepancies Report" changed="2012-12-11T12:50:27" changer="riyer" created="2016-01-07T14:43:39" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="edisessDirection" value="R" ui-value="Receive" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="IN" metafield="edisessName" value=":HLC_BAPLIE|MAE_BAPLIE|RECEIVE_ANL_BAPLIE|STIFIN|HSD_BAPLIE|" ui-value="[HLC_BAPLIE,MAE_BAPLIE,...]" order="1" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>println("Start of MatReportImportDiscrepancies")

def ediSession = event.getEntity();
def sessionName = ediSession.getFieldValue("EdisessName")
println("END of MatReportImportDiscrepancies session name is "+sessionName)

println("Start of MatGetStowplanVesVoy");
String vesVoy = api.getGroovyClassInstance("MatGetStowplanTrankey").execute(event,api)
println("End of MatGetStowplanVesVoy");

//println("Generating  Import Discrepancies report")

//def reportRunner= api.getGroovyClassInstance("MatReportImportDiscrepancies");
//HashMap parameters = new HashMap();
//reportRunner.generateReport(parameters,vesVoy);</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Container Received for AES Port" sent-count="10008" changed="2014-10-20T10:31:42" changer="-notices-" created="2016-01-07T14:43:40" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="OR" order="0" negated="false" parm-type="NO_PARM">
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^NGB" ui-value="NGB (Ningbo)" order="0" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^SHA" ui-value="SHA (Shanghai)" order="1" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^UUK" ui-value="UUK (Chuck)" order="2" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^EBY" ui-value="EBY (Ebeye)" order="3" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KMI" ui-value="KMI (Kosrae (ex Kusaie))" order="4" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KWJ" ui-value="KWJ (Kwajalein)" order="5" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^MAJ" ui-value="MAJ (Majuro)" order="6" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PNP" ui-value="PNP (Pohnpei (ex Ponape))" order="7" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^YAP" ui-value="YAP (Yap)" order="8" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PUX" ui-value="PUX (Koror, Palau)" order="9" negated="false" parm-type="NO_PARM" />
      </predicate>
    </predicate>
  </filter>
  <message-template>Container Ingated at &amp;TIME for &amp;Destination
Booking: &amp;DepartureOrderNo
Container: &amp;UnitNbr
Vesvoy: &amp;OutboundCarrierId
Shipper: &amp;GoodsShipperName</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Received container for Far East discharge port notice" sent-count="22770" changed="2014-12-04T08:08:53" changer="pschroeder" created="2016-01-07T14:43:40" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="OR" order="0" negated="false" parm-type="NO_PARM">
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^GUM" ui-value="GUM (Guam)" order="0" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KMI" ui-value="KMI (Kosrae (ex Kusaie))" order="1" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PNP" ui-value="PNP (Pohnpei (ex Ponape))" order="2" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PUX" ui-value="PUX (Koror, Palau)" order="3" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^RTA" ui-value="RTA (Rota)" order="4" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^SPN" ui-value="SPN (Saipan)" order="5" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^TIN" ui-value="TIN (Tinian)" order="6" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^TMGU" ui-value="TMGU (Guam)" order="7" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^UUK" ui-value="UUK (Chuck)" order="8" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^YAP" ui-value="YAP (Yap)" order="9" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^HAK" ui-value="HAK (Hakata/Fukuoka)" order="10" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KAO" ui-value="KAO (Kaohsiung)" order="11" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KEEL" ui-value="KEEL (Keelung (Chilung))" order="12" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KOB" ui-value="KOB (Kobe)" order="13" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^MAPH" ui-value="MAPH (Manila)" order="14" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^MOJ" ui-value="MOJ (Moji/Kitakyushu)" order="15" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^NAH" ui-value="NAH (Naha, Okinawa)" order="16" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^NGB" ui-value="NGB (Ningbo)" order="17" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^NGO" ui-value="NGO (Nagoya, Aichi)" order="18" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^OSA" ui-value="OSA (Osaka)" order="19" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PUS" ui-value="PUS (Busan (ex Pusan))" order="20" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^SHA" ui-value="SHA (Shanghai)" order="21" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^TSI" ui-value="TSI (Qingdao)" order="22" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^YOK" ui-value="YOK (Yokohama)" order="23" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^XMN" ui-value="XMN (Xiamen)" order="24" negated="false" parm-type="NO_PARM" />
      </predicate>
    </predicate>
  </filter>
  <message-template>Received MATU container &amp;UnitNbr for discharge port &amp;POD at &amp;TIME</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EDISESS" event-type="EDI_POST" description="EDI Import Discrepancies Report" changed="2014-10-03T16:35:44" changer="riyer" created="2016-01-07T14:43:41" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="edisessDirection" value="R" ui-value="Receive" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="IN" metafield="edisessName" value=":HLC_BAPLIE|MAE_BAPLIE|RECEIVE_ANL_BAPLIE|STIFIN|HSD_BAPLIE|" ui-value="[HLC_BAPLIE,MAE_BAPLIE,...]" order="1" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>println("Start of  MatReportImportDiscrepancies")

def ediSession = event.getEntity();
def sessionName = ediSession.getFieldValue("EdisessName")
println("END of MatReportImportDiscrepancies session name is "+sessionName)

println("Start of MatGetStowplanVesVoy");
String vesVoy = api.getGroovyClassInstance("MatGetStowplanTrankey").execute(event,api)
println("End of MatGetStowplanVesVoy");

//println("Generating  Import Discrepancies report")

//def reportRunner= api.getGroovyClassInstance("MatReportImportDiscrepancies");
//HashMap parameters = new HashMap();
//reportRunner.generateReport(parameters,vesVoy);</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_RECEIVE" description="Unit Receive for facility Hon" changed="2014-10-23T05:19:46" changer="riyer" created="2016-01-07T14:43:41" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="unitActiveUfv.ufvFacility" value="300862" ui-value="HON" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/* Set Avail Date */
 def unit = event.getEntity()
 def availLookup = api.getGroovyClassInstance("GvyAvailDate");
 boolean update = false
 if(event.event.evntAppliedBy.equals('wo') &amp;&amp; unit.unitActiveUfv.ufvFlexDate02 != null){
  //07/21/10 Do not recompute DAS Dates - Issue Avail Date is falling off
 }else{
   update =   availLookup.setAvailDate(unit, event);
 }
  
 // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 def gvyRecieveObj = null;  def xmlGvyReceive=null; def gvyCmisUtil=null;
 if(processCmisFeed)
 {
     // N4 TO CMIS data processing 
     def equiClass =unit.getFieldValue("unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass")
     def equiClassType = equiClass != null ? equiClass.getKey() : ''
     if(!equiClassType.equals('CHASSIS'))
    {
       def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
       def unitDtl = unitDetails.doIt(event)
    
       gvyRecieveObj = api.getGroovyClassInstance("GvyCmisEventUnitReceive")
      xmlGvyReceive = gvyRecieveObj.processUnitRecieve(unitDtl, unit,api)
   
     // POD = NIS port, and the O/B Intended = GEN_TRUCK, set the O/B Intended = BARGE.
     gvyRecieveObj.setOBCarrierToBarge(unit)
    
      //Detention Msg Check
      if(update){
        def gvyDentObj = api.getGroovyClassInstance("GvyCmisDetentionMsgProcess"); 
        gvyDentObj.detentionProcess(xmlGvyReceive,event,api)
      }     
      
      gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil")    
      def locationTier  = gvyCmisUtil.getFieldValues(xmlGvyReceive, "locationTier=") 
      xmlGvyReceive = api.getGroovyClassInstance("GvyCmisEventSIT").ybSatProc(gvyCmisUtil,unit, xmlGvyReceive)
      // Receive Msg - Gems Dont post YMV for WO 02/02/11
      if(!locationTier.equals('T3') &amp;&amp; !locationTier.equals('T2') ){ 
           gvyCmisUtil.postMsgForAction(xmlGvyReceive,api,'null')
      }
    }
 }

//SET DrayStatus &amp; post PDU for YB-SIT 
api.getGroovyClassInstance("GvyCmisEventSIT").ybSitProc(api, gvyCmisUtil, unit, xmlGvyReceive)


println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="YB_ASSIGN" description="overweight Alert YB assign weight &gt; 55000 email" sent-count="1705" changed="2014-05-09T11:47:01" changer="rchinhon" created="2016-01-07T14:43:42" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="GT" metafield="unitGoodsAndCtrWtKg" value="24947.58035" ui-value="55000 lb" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>&amp;UnitNbr YB Assigned at &amp;TIME for &amp;Destination is Overweight. Exceeds weight limitation of 55,000 lb.</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="R40H Control Atmosphere to Route to OAK" sent-count="518" changed="2014-10-20T09:38:06" changer="-notices-" created="2016-01-07T14:43:42" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="LE" metafield="unitPrimaryUe.ueEquipment.eqIdNbrOnly" value="551699" ui-value="551699" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="GE" metafield="unitPrimaryUe.ueEquipment.eqIdNbrOnly" value="551500" ui-value="551500" order="1" negated="false" parm-type="NO_PARM" />
      <predicate verb="MATCHES" metafield="unitPrimaryUe.ueEquipment.eqIdPrefix" value="MATU*" ui-value="MATU*" order="2" negated="false" parm-type="NO_PARM" />
      <predicate verb="EQ" metafield="unitFreightKind" value="MTY" ui-value="Empty" order="3" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>CA Reefer &amp;UnitNbr Ingated at &amp;TIME - Route to OAK</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Full container returned to yard" sent-count="115" changed="2014-11-05T14:55:46" changer="-notices-" created="2016-01-07T14:43:43" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="unitDrayStatus" value="DRAYIN" ui-value="Dray In" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="NE" metafield="unitImpediments" value="*CG DMG*" ui-value="*CG DMG*" order="1" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>Date : &amp;TIME

                               MATSON TERMINALS - CONTAINER YARD

From: Gate
Subject: Full Container Return to Yard


Container &amp;UnitNbr was returned back to the yard on &amp;TIME</message-template>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UPDATE_EQ_GRADE" description="Update Equipment Grade XX to units and delivered inspections" created="2016-05-02T12:31:32" creator="psethuraman" code-extension-name="MATGvyUpdateEquipGradeForImportUnits">
  <filter />
</notice-request>
<notice-request action="GROOVY" business-entity="VV" event-type="PHASE_VV" description="SAIL FUNCTION" changed="2016-12-02T21:13:17" changer="brajamanickam" created="2016-01-07T14:43:44" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="cvdCv.cvVisitPhase" value="60DEPARTED" ui-value="Departed" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>// Process to run during sail function of a long haul vessel or barge




// Get the instance of sail function/audit discharge to invoke the reports.
def sailFunction = api.getGroovyClassInstance("GvySailBatchProcess");
def auditComplete = api.getGroovyClassInstance("GvyAuditDischargeComplete");

def vesvisit= event.getEntity();
def vesselTypeEnum = vesvisit.getFieldValue("vvdVessel.vesVesselClass.vesclassVesselType"); 
def vesselType = vesselTypeEnum != null ? vesselTypeEnum.getKey() : ''
def service =  vesvisit.getFieldValue("vvdBizu.bzuId");
println("Service is "+service)

//Step1 - Rehandle containers
sailFunction.createRehandleContainerRpt(event)

//Step3 - Call c&amp;t and MNC report (This function is already available in TOS, need to make a call to the existing function) &amp;&amp; Send sailed vessel email notification.
auditComplete.discAuditConfirmationEmail(event,"LOAD") //A3 - email confirmation

//Step4 - This report sends client cotainsers loaded in lonhaul / barge vessels.
auditComplete.processClientDischarge(event,"LOAD");</message-template>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="DEPART_UNIT_APL_KDK" description="Departing APL Empty Unit" created="2016-02-16T16:30:25" creator="gbabu" code-extension-name="MatsonAncVesselDischGNHandler">
  <filter />
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UNIT_IN_GATE" changed="2016-07-19T18:07:04" changer="gbabu" created="2016-06-07T15:40:35" creator="gbabu" code-extension-name="MatsonUnitSetVGMVerifiedFromBooking">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="NE" metafield="unitLineOperator" value="^MAE/LINEOP" ui-value="MAE" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="NE" metafield="unitLineOperator" value="^NYK/LINEOP" ui-value="NYK" order="1" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
</notice-request>
<notice-request action="GROOVY" business-entity="VV" event-type="PHASE_VV" description="vess" changed="2016-12-15T03:45:44" changer="brajamanickam" created="2016-12-05T04:31:56" creator="brajamanickam">
  <filter />
  <message-template>def vesselid;
//api.getGroovyClassInstance("MATProcessNewVessIncomplete").sendMail();
api.getGroovyClassInstance("MATProcessNewVessIncomplete").execute(event);</message-template>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="BKG" event-type="BOOKING_PROPERTY_UPDATE" description="This executes when booking property update happens" changed="2016-07-19T18:06:10" changer="gbabu" created="2016-06-07T01:28:41" creator="gbabu" code-extension-name="MatsonUnitVGMUpdateForBookingFieldChange">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="NE" metafield="eqoLine" value="^MAE/LINEOP" ui-value="MAE (MAERSK)" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="NE" metafield="eqoLine" value="^NYK/LINEOP" ui-value="NYK (NYK LINES)" order="1" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="SIT_ASSIGN" description="SIT_ASSIGN" changed="2015-08-13T04:37:16" changer="psethuraman" created="2016-01-07T14:43:21" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

//UNASSIGN YB Trucker if in Rtg Trucking Cmpy
def unitObj = event.getEntity();
api.getGroovyClassInstance("GvyCmisEventSIT").ybTruckerUnassign(unitObj)

def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}

def ufv = unit.unitActiveUfv;

// Added advise back into yard for active ufv.

if(ufv!= null &amp;&amp; ufv.ufvTransitState ==  com.navis.inventory.business.atoms.UfvTransitStateEnum.S70_DEPARTED ) {
    com.navis.argo.ContextHelper.setThreadExternalUser("Snx:ACETS");
   println("adviseBackToFacility check "+unit.unitId);
   if( unit.unitForeignHostKey  == null) {  
   	api.log("Could not revive unit "+unit.unitId+" because no unique Id!");
   } else {
      println("adviseBackToFacility "+unit.unitId);
      try {
          ufv.adviseBackToFacility();
      } catch (Exception e) {
          api.log("Could not bring to Facility "+unit.unitId);
          e.printStackTrace();
      }
   }
}



/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyEventUtil = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyEventUtil.verfiyCmisFeedProcessing(event)
 def processAcetsMsg = gvyEventUtil.acetsMesssageFilter(event)
 if(processCmisFeed &amp;&amp; !processAcetsMsg)
 {
   // N4 TO CMIS data processing 
   def gvyCargoEdit = api.getGroovyClassInstance("GvyCmisUnitCargoEdit"); 
   gvyCargoEdit.autoRollPod(event,unit,api,gvyEventUtil);               

   def gvyEvntcargoEdit = api.getGroovyClassInstance("GvyCmisEventUnitCargoEdit")  
   gvyEvntcargoEdit.processUnitPropertyUpdate(event,api,gvyCargoEdit) 
   //For SIT Action
   def exportXml = gvyEvntcargoEdit.getExportXml()
   def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil");
   def trckCmpy = unit.getFieldValue("unitRouting.rtgTruckingCompany.bzuId")
   if(trckCmpy == null){
     exportXml= gvyCmisUtil.eventSpecificFieldValue(exportXml,"truck=","null")
    }else{
     exportXml= gvyCmisUtil.eventSpecificFieldValue(exportXml,"truck=",trckCmpy)
    }
   gvyCmisUtil.postMsgForAction(exportXml,api,"SIT")
 }

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EQ" event-type="CL_HOLD" description="CL_HOLD" changed="2015-08-13T04:37:16" changer="psethuraman" created="2016-01-07T14:43:22" creator="admin">
  <filter />
  <message-template>/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="VV" event-type="PHASE_VV" description="SAIL FUNCTION" changed="2016-01-07T14:43:36" changer="admin" created="2015-10-05T10:45:57" creator="kramachandran">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="cvdCv.cvVisitPhase" value="60DEPARTED" ui-value="Departed" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>// Process to run during sail function of a long haul vessel or barge

// Get the instance of sail function/audit discharge to invoke the reports.
def sailFunction = api.getGroovyClassInstance("GvySailBatchProcess");
def auditComplete = api.getGroovyClassInstance("GvyAuditDischargeComplete");

def vesvisit= event.getEntity();
def vesselTypeEnum = vesvisit.getFieldValue("vvdVessel.vesVesselClass.vesclassVesselType"); 
def vesselType = vesselTypeEnum != null ? vesselTypeEnum.getKey() : ''
def service =  vesvisit.getFieldValue("vvdBizu.bzuId");
println("Service is "+service)

//Step1 - Rehandle containers
sailFunction.createRehandleContainerRpt(event)

//Step3 - Call c&amp;t and MNC report (This function is already available in TOS, need to make a call to the existing function) &amp;&amp; Send sailed vessel email notification.
auditComplete.discAuditConfirmationEmail(event,"LOAD") //A3 - email confirmation

//Step4 - This report sends client cotainsers loaded in lonhaul / barge vessels.
auditComplete.processClientDischarge(event,"LOAD");</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_DELIVER" description="Unit Deliver or Unit Out Gate" changed="2016-01-28T09:16:42" changer="psethuraman" created="2016-01-07T14:43:24" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*
 * Setting BookingNumber to BL_NBR 
 */
def u = event.getEntity() 
def expGateBkgNbr = u.getFieldValue("unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr")
 if(expGateBkgNbr != null){
       u.setFieldValue("unitGoods.gdsBlNbr",expGateBkgNbr)
 }


 // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 //boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 boolean processCmisFeed = true
 if(processCmisFeed)
 {
    //Check for PassPass event Direct Discharge
    boolean evntDirectPass = gvyUtilObj.holdEventProcessing(event,'UNIT_DISCH', 3)
    if(evntDirectPass){
        Thread.sleep(2000);
   }
   // N4 TO CMIS data processing 
   println('Unit Deliver Execute Code')
   def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
   def unitDtl = unitDetails.doIt(event)
   
   //SERVICE MSG CHECK
   println("---------------SERVICE MSG Starts -------------------------- ")
   def gvySrvObj = api.getGroovyClassInstance("GvyCmisSrvMsgProcessor"); 
   gvySrvObj.processServiceMessage(unitDtl,event,api) 
   println("---------------SERVICE MSG Ends -------------------------- ")

   // Deliver 
   def evntDeliverObj = api.getGroovyClassInstance("GvyCmisEventUnitDeliver");
   def deliverXml = evntDeliverObj.processUnitDeliver(unitDtl,event,api)
   api.sendXml(deliverXml);

   //Set FLAG for TypeCode report
   def unitReceiveObj = api.getGroovyClassInstance("GvyCmisEventUnitReceive");
   unitReceiveObj.setWOAFlag(event, u, api) 
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="NTFY:GEN/MISC_NOTICE" description="NTFY:GEN/MISC_NOTICE" changed="2015-08-13T04:37:09" changer="psethuraman" created="2016-01-07T14:43:09" creator="admin">
  <filter />
  <message-template>// N4 TO CMIS data processing 
//def unit = event.getEntity()
//def msgType='NTFY:GEN/MISC_NOTICE'
//def eventProcess = api.getGroovyClassInstance("GvyUnitEventProcessor");
//def eventOutput = eventProcess.doIt(msgType,unit);
def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="INB_RELEASE" description="INB_RELEASE" changed="2015-08-13T04:37:10" changer="psethuraman" created="2016-01-07T14:43:11" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 boolean processAcetsMsg = gvyUtilObj.acetsMesssageFilter(event)
 if(processCmisFeed &amp;&amp; !processAcetsMsg)
 {
   // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }

 //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 if(reportProcessing)
{
   def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
   def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
   api.sendXml(ret);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="BDA" description="Update Avail dates (ACETS-BDA)" changed="2015-08-13T04:37:08" changer="psethuraman" created="2016-01-07T14:43:13" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

 def unit = event.getEntity()
 def lookup = api.getGroovyClassInstance("GvyAvailDate");
 boolean update =  lookup.setAvailDate(unit, event);
 
 // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
    def unitDtl = unitDetails.doIt(event)

    //Detention Msg Check
    if(update){
        def gvyDentObj = api.getGroovyClassInstance("GvyCmisDetentionMsgProcess"); 
        gvyDentObj.detentionProcess(unitDtl,event,api)
    }

    def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil")  
    gvyCmisUtil.postMsgForAction(unitDtl,api,"ABDA")

 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_YARD_MOVE" description="Test unit yard move" changed="2015-08-13T04:37:13" changer="psethuraman" created="2016-01-07T14:43:14" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
 def unit = event.getEntity()
def unitId = unit.unitId
 
 //10/20/10 Unit Strip case - IF LOC is update to NULL then skip processing - no msg posted
 def lkpSlot=unit.getFieldValue("unitActiveUfv.ufvLastKnownPosition.posSlot")
 if(lkpSlot == null || lkpSlot.length() ==0){
    return ;
 }
 
 //1. Set NOW the Chassis dismount Information
   def equiClass = unit.getFieldValue("unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass")
   def equipmentClass = equiClass != null ? equiClass.getKey() : equiClass
    //IF Bare active Chassis
     if(equipmentClass.equals('CHASSIS') &amp;&amp; !unitId.startsWith('YC')){
         def gvyNow = api.getGroovyClassInstance("NowChassisTrackingBuilder") 
         gvyNow.nowMessagesProcessor(event, api)
    }

  //2.Dont Not Pass YMV for WOA and P2 and YC chassis 02/02/11
  lkpSlot = lkpSlot!= null ? lkpSlot : '' 
  boolean isWoP2 = false
  if(lkpSlot.startsWith('WOA') || lkpSlot.startsWith('P2') || unitId.startsWith('YC')){
    isWoP2 = true
  }

 //3. Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 def processAcetsMsg = gvyUtilObj.acetsMesssageFilter(event)
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed &amp;&amp; !isWoP2 &amp;&amp; !processAcetsMsg)
 {
   // N4 TO CMIS data processing 
   def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
   def unitDtl = gvyEvntProcessor.processFieldChngCmisFeed(event,api)
   def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil") 
   gvyCmisUtil.postMsgForAction(unitDtl,api,'null')
 }

//DVI Hold - commented it as of 06/01/11
//def emailNotice = api.getGroovyClassInstance("GvyEmailNotification") 
//emailNotice.notifyDviHold(event, api)

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="VV" event-type="SEND_VST" description="Report VST message to Gems" changed="2016-02-05T19:58:14" changer="psethuraman" created="2016-01-07T14:43:17" creator="admin">
  <filter />
  <message-template>def vesselDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
def result = vesselDetails.doTheVessel(event, "VST" )
print("SEND_VST")
print(result)
api.sendXml(result);

// VST Email Confirmation
def doer = event.event.evntAppliedBy
def eventType =  event.event.eventTypeId
if(doer.contains('user:user:')){  eventType = 'PHASE_VV' }
doer = doer.replace('user:user:','')
def visit = event.getEntity();
def carrierId = visit.cvdCv
def emailSender = api.getGroovyClassInstance("EmailSender")
def sub = eventType+" sent VST message to GEMS for "+carrierId
if  (!doer.contains("-notices-")){   
emailSender.custSendEmail('1aktosdevteam@matson.com',sub,"Action done by "+doer)
}
def sailFunction = api.getGroovyClassInstance("GvySailBatchProcess");
sailFunction.createReportsAfterSail(event);</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_TRUCKER_ASSIGNED" description="UNIT_TRUCKER_ASSIGNED" changed="2015-08-13T04:37:12" changer="psethuraman" created="2016-01-07T14:43:19" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
    def unitDtl = unitDetails.doIt(event)
    api.sendXml(unitDtl);
  }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="NTFY:CG_HOLD_RELEASE" email-party="unitGoods.gdsConsigneeBzu" description="Released Coast Guard hold notice" sent-count="40" changed="2015-08-13T04:37:11" changer="psethuraman" created="2016-01-07T14:43:21" creator="admin">
  <filter />
  <message-template>Date: &amp;TIME
                  NOTIFICATION OF RELEASE - HAZARDOUS MATERIAL INSPECTION 

             VESSEL : &amp;InboundCarrierName                            VOYAGE : &amp;InboundCarrierInVoyageNbr

            BOOKING : &amp;GoodsBlNbr                       CONTAINER : &amp;UnitNbr
 
                                                   YARD LOCATION : &amp;PositionSlot

DEAR SIR/MADAM,

UNITED STATES COAST GUARD MARINE SAFETY OFFICE HAS COMPLETED ITS INSPECTION AND RELEASED THE ABOVE CONTAINER TO THE OCEAN CARRIER.  PLEASE CONTACT THE CARRIER TO ARRANGE FOR PICKUP.

FOR INFORMATION, USCG MARINE SAFETY OFFICE HAS REPLACED SHIPPER'S SEAL WITH : &amp;SealNbr1

&amp;UfvFlexString03
MATSON TERMINALS INC.</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="TI_RELEASE" description="TI_RELEASE" changed="2015-08-13T04:37:16" changer="psethuraman" created="2016-01-07T14:43:22" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }

//Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 def gvyCrsUtil = api.getGroovyClassInstance("GvyCmisCargoStatusUtil")
 boolean isNISPort =  gvyCrsUtil.nisPortCheck(event,api)
 boolean isTIHoldReleased = gvyUtilObj.holdEventProcessing(event, 'TI_RELEASE', 10)
 if(reportProcessing &amp;&amp; isNISPort &amp;&amp; !isTIHoldReleased)
{
  //Cargo Status Report
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml( ret);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EQ" event-type="CL_RELEASE" description="CL_RELEASE" changed="2015-08-13T04:37:14" changer="psethuraman" created="2016-01-07T14:43:23" creator="admin">
  <filter />
  <message-template>/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 { 
   // N4 TO CMIS data processing  
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="SET_FULL" description="SET_FULL" changed="2015-08-13T04:37:15" changer="psethuraman" created="2016-01-07T14:43:25" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

/* Set Avail Date */
 def unit = event.getEntity()
 def availLookup = api.getGroovyClassInstance("GvyAvailDate");
 boolean update =   availLookup.setAvailDate(unit, event);
 api.log("--------&gt;Avail Update "+update);

/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
     def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    def unitDtl = gvyEvntProcessor.processFieldChngCmisFeed(event,api)

    //Detention Msg Check
   if(update){
        def gvyDentObj = api.getGroovyClassInstance("GvyCmisDetentionMsgProcess"); 
        gvyDentObj.detentionProcess(unitDtl,event,api)
   }

   api.sendXml(unitDtl);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="TAG_STRIP_ASSIGN" description="TAG_STRIP_ASSIGN" changed="2015-08-13T04:37:15" changer="psethuraman" created="2016-01-07T14:43:26" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
   // N4 TO CMIS data processing 
   def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
   def unitDtl = unitDetails.doIt(event)
   api.sendXml(unitDtl);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="VV" event-type="GROOVY TEST" description="Groovy Test" changed="2015-08-13T04:37:17" changer="psethuraman" created="2016-01-07T14:43:28" creator="admin">
  <filter />
  <message-template>//******TESTING - Acct Audit Load Report******
def auditCompleteTest = api.getGroovyClassInstance("GvyAuditDischargeCompleteTest");
auditCompleteTest.discAuditConfirmationEmail(event,"DISCHARGE");</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EQ" event-type="DVI_HOLD" description="Chassis DVIR hold" changed="2015-08-13T04:37:18" changer="psethuraman" created="2016-01-07T14:43:30" creator="admin">
  <filter />
  <message-template>// Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  

  //06/28/10 - Set Value for Gate Check 
 def equipmentState = event.getEntity();
 def equipment = equipmentState.getEqsEquipment(); 
 def chassis = com.navis.argo.business.reference.Chassis.findChassis(equipment.eqIdFull);
 chassis.setEqLicenseNbr('DVI');

  // N4 TO CMIS data processing 
  def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
  def unitDtl = gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil") 

  gvyCmisUtil.postMsgForAction(unitDtl,api,"ALT")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EQ" event-type="LTV_HOLD" description="LTV_HOLD" changed="2015-08-13T04:37:19" changer="psethuraman" created="2016-01-07T14:43:31" creator="admin">
  <filter />
  <message-template>/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
   // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="USA_RELEASE" description="USA_RELEASE" changed="2015-08-13T04:37:20" changer="psethuraman" created="2016-01-07T14:43:32" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

// Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 boolean processAcetsMsg = gvyUtilObj.acetsMesssageFilter(event)
  if(processCmisFeed &amp;&amp; !processAcetsMsg)
 {
     def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
     def unitDtl = gvyEvntProcessor.processFieldChngCmisFeed(event,api)
     gvyCmisUtil.postMsgForAction(unitDtl,api,"ALT")
  }
 
 //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 if(reportProcessing)
{
  //Cargo Status Report
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml(ret)
 }

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Received 24' container for Far East discharge port notice" sent-count="4" changed="2013-05-17T08:46:58" changer="-notices-" created="2016-01-07T14:43:34" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="unitCategory" value="EXPRT" ui-value="Export" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="MATCHES" metafield="unitPrimaryUe.ueEquipment.eqEquipType.eqtypId" value="?24*" ui-value="?24*" order="1" negated="false" parm-type="NO_PARM" />
      <predicate verb="OR" order="2" negated="false" parm-type="NO_PARM">
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^GUM" ui-value="GUM (Guam)" order="0" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KMI" ui-value="KMI (Kosrae (ex Kusaie))" order="1" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PNP" ui-value="PNP (Pohnpei (ex Ponape))" order="2" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PUX" ui-value="PUX (Koror, Palau)" order="3" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^RTA" ui-value="RTA (Rota)" order="4" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^SPN" ui-value="SPN (Saipan)" order="5" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^TIN" ui-value="TIN (Tinian)" order="6" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^TMGU" ui-value="TMGU (Guam)" order="7" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^UUK" ui-value="UUK (Chuck)" order="8" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^YAP" ui-value="YAP (Yap)" order="9" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^HAK" ui-value="HAK (Hakata/Fukuoka)" order="10" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KAO" ui-value="KAO (Kaohsiung)" order="11" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KEEL" ui-value="KEEL (Keelung (Chilung))" order="12" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KOB" ui-value="KOB (Kobe)" order="13" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^MAPH" ui-value="MAPH (Manila)" order="14" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^MOJ" ui-value="MOJ (Moji/Kitakyushu)" order="15" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^NAH" ui-value="NAH (Naha, Okinawa)" order="16" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^NGB" ui-value="NGB (Ningbo)" order="17" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^NGO" ui-value="NGO (Nagoya, Aichi)" order="18" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^OSA" ui-value="OSA (Osaka)" order="19" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PUS" ui-value="PUS (Busan (ex Pusan))" order="20" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^SHA" ui-value="SHA (Shanghai)" order="21" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^TSI" ui-value="TSI (Qingdao)" order="22" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^YOK" ui-value="YOK (Yokohama)" order="23" negated="false" parm-type="NO_PARM" />
      </predicate>
    </predicate>
  </filter>
  <message-template>Received 24' container &amp;UnitNbr for discharge port &amp;POD at &amp;TIME</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Ingated claim reefer container to F&amp;M" sent-count="68" changed="2013-07-08T12:17:43" changer="-notices-" created="2016-01-07T14:43:35" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="MATCHES" metafield="unitImpediments" value="*CL*" ui-value="*CL*" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>Date : &amp;TIME

                               MATSON TERMINALS - CONTAINER YARD

From: Gate
Subject: Claims Container to F&amp;M


Container &amp;UnitNbr for F&amp;M was ingated on &amp;DateOfLastHandling. 
&amp;UnitRemark</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="HAZ_UPDATE" description="Haz Update to gems" changed="2015-08-13T04:37:20" changer="psethuraman" created="2016-01-07T14:43:36" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId + " on Unit :"+event.entity.unitId+" ----//")

def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil");  
def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
def unitDtl = unitDetails.doIt(event)
gvyCmisUtil.postMsgForAction(unitDtl,api,"HZU")  

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EDISESS" event-type="EDI_POST" description="EDI Import Discrepancies Report" changed="2014-06-23T05:47:51" changer="riyer" created="2016-01-07T14:43:38" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="edisessDirection" value="R" ui-value="Receive" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="IN" metafield="edisessName" value=":HLC_BAPLIE|MAE_BAPLIE|RECEIVE_ANL_BAPLIE|SEACOS_BAPLIE|STIFIN|HSD_BAPLIE|" ui-value="[HLC_BAPLIE,MAE_BAPLIE,...]" order="1" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>println("Start of  MatReportImportDiscrepancies")

def ediSession = event.getEntity();
def sessionName = ediSession.getFieldValue("EdisessName")
println("END of MatReportImportDiscrepancies session name is "+sessionName)

println("Start of MatGetStowplanVesVoy");
String vesVoy = api.getGroovyClassInstance("MatGetStowplanTrankey").execute(event,api)
println("End of MatGetStowplanVesVoy");

//println("Generating  Import Discrepancies report")

//def reportRunner= api.getGroovyClassInstance("MatReportImportDiscrepancies");
//HashMap parameters = new HashMap();
//reportRunner.generateReport(parameters,vesVoy);</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Ingated Coast Guard damage equipment to F&amp;M" changed="2009-04-09T08:40:16" changer="kmikami" created="2016-01-07T14:43:39" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="MATCHES" metafield="unitImpediments" value="*CG DMG*" ui-value="*CG DMG*" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>Date : &amp;TIME

                               MATSON TERMINALS - CONTAINER YARD

From: Gate
Subject: Coast Guard Damage Container to F&amp;M


Container &amp;UnitNbr for F&amp;M was ingated on &amp;DateOfLastHandling.
&amp;UnitRemark</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Container Received for AES Port" sent-count="10008" changed="2014-10-20T11:31:42" changer="-notices-" created="2016-01-07T14:43:41" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="OR" order="0" negated="false" parm-type="NO_PARM">
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^NGB" ui-value="NGB (Ningbo)" order="0" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^SHA" ui-value="SHA (Shanghai)" order="1" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^UUK" ui-value="UUK (Chuck)" order="2" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^EBY" ui-value="EBY (Ebeye)" order="3" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KMI" ui-value="KMI (Kosrae (ex Kusaie))" order="4" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KWJ" ui-value="KWJ (Kwajalein)" order="5" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^MAJ" ui-value="MAJ (Majuro)" order="6" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PNP" ui-value="PNP (Pohnpei (ex Ponape))" order="7" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^YAP" ui-value="YAP (Yap)" order="8" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PUX" ui-value="PUX (Koror, Palau)" order="9" negated="false" parm-type="NO_PARM" />
      </predicate>
    </predicate>
  </filter>
  <message-template>Container Ingated at &amp;TIME for &amp;Destination
Booking: &amp;DepartureOrderNo
Container: &amp;UnitNbr
Vesvoy: &amp;OutboundCarrierId
Shipper: &amp;GoodsShipperName</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Ingated claim reefer container to F&amp;M" sent-count="68" changed="2013-07-08T13:17:43" changer="-notices-" created="2016-01-07T14:43:42" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="MATCHES" metafield="unitImpediments" value="*CL*" ui-value="*CL*" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>Date : &amp;TIME

                               MATSON TERMINALS - CONTAINER YARD

From: Gate
Subject: Claims Container to F&amp;M


Container &amp;UnitNbr for F&amp;M was ingated on &amp;DateOfLastHandling. 
&amp;UnitRemark</message-template>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="DRAY_IN" description="Dray In Departed unit to be brought back to Inbound" created="2016-01-07T15:47:04" creator="dkannadasan" code-extension-name="MatsonDrayInDepartedImport">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="unitActiveUfv.ufvTransitState" value="S70_DEPARTED" ui-value="Departed - Departed on the outbound carrier" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
</notice-request>
<notice-request action="GROOVY" business-entity="VV" event-type="PHASE_VV" description="Generate CMIS event on Depart" changed="2016-12-05T04:51:08" changer="brajamanickam" created="2016-01-08T11:33:49" creator="dkannadasan">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="cvdCv.cvVisitPhase" value="60DEPARTED" ui-value="Departed" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>def vesselDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
def noa = api.getGroovyClassInstance("GvyNOA")

def visit = event.getEntity();
def doer = event.event.evntAppliedBy
def facility = visit.getFieldValue("cvdCv.cvFacility.fcyId")
def visitId = visit.cvdCv.cvId
def service =  visit.cvdService.srvcId
def phase = event.getPropertyAsString("VisitPhase");
def prevPhase = event.getPreviousPropertyAsString("VisitPhase");
if(prevPhase == null)  prevPhase = '10CREATED';
if(  phase.equals("60DEPARTED") &amp;&amp;! (prevPhase.equals("60DEPARTED") || prevPhase.equals("70CLOSED") || prevPhase.equals("80CANCELED") ) ) {
   try {
     if(facility != null &amp;&amp; (facility.equals('ANK') || facility.equals('DUT') || facility.equals('KDK')))
     {
          noa.execute( visit, event);
     }
   } catch (Exception e ) {
      api.log("NOA error "+e.getMessage());
      e.printStackTrace();
   }
  println("Send Visit");
  // Send Visit - 02/15/11 Post VST and Email from SEND_VST
  //def result = vesselDetails.doTheVessel(event, "VST" )
  if(!service.startsWith('CLI') &amp;&amp; facility != null &amp;&amp;  (facility.equals('ANK') || facility.equals('DUT') || facility.equals('KDK'))){  //Gems Fix 02/02/2011
     //api.sendXml(result);
     com.navis.argo.ContextHelper.setThreadExternalUser(doer); 
     def sendvstEvent = new GroovyEvent( null,visit);
     sendvstEvent.postNewEvent( "SEND_VST","Dept from PhaseVV"); 
  }
} else if(  ( prevPhase.equals("60DEPARTED") || prevPhase.equals("70CLOSED") || prevPhase.equals("80CANCELED")  ) &amp;&amp;  !( phase.equals("60DEPARTED") || phase.equals("70CLOSED") || phase.equals("80CANCELED")  )  ) {
  println("Send UnVisit");
  // Send UnVisit
}

// Trucker Coding Email Notification 
api.getGroovyClassInstance("GvyCmisEventSIT").truckerCodingNotification(visit, visitId);</message-template>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UPDATEPOSITION" changed="2016-08-01T12:57:57" changer="psethuraman" created="2016-01-22T15:50:03" creator="gbabu" code-extension-name="MatMassUpdateYardPositionExt">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="unitActiveUfv.ufvFacility" value="46597" ui-value="ANK" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>/*if (event.getEvent()!= null &amp;&amp; event.getEvent().getEvntNote()!= null) {
println("UPDATE POSITION FOR EVENT"+event.getEntity()+"POSITION"+event.getEvent().getEvntNote());
api.getGroovyClassInstance("MatMassUpdateYardPosition").execute(event.getEntity(),event.getEvent().getEvntNote());
}*/</message-template>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="SET MULTISTOP RETURNING" created="2016-01-29T05:48:08" creator="admin" code-extension-name="MatsonAncMultiStopImportDelivery">
  <filter />
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UNIT_PROPERTY_UPDATE" description="MATUnitUpdateCargoWeight" changed="2016-08-26T13:41:04" changer="nkrishnan" created="2016-08-26T13:40:38" creator="nkrishnan" code-extension-name="MATUnitUpdateCargoWeight Execution">
  <filter />
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UNIT_CREATE" description="Update 3 Letter Equipment owner code to 4 letter Owner code" changed="2017-02-02T00:38:53" changer="kramachandran" created="2017-02-01T00:19:11" creator="kramachandran" code-extension-name="MATUpdateEquipmentOwnerOnUnitCreate">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="IN" metafield="unitPrimaryUe.ueEquipmentState.eqsEqOwner" value=":148190|54510|17719288|895589|" ui-value="[148190,54510,17719288,895589]" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>//Update 3 Letter Equipment owner code to 4 letter Owner code</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="BL" event-type="BL_CONSIGNEE_UPDATE" description="Update unit shipper/consignee with BL values" changed="2015-08-13T04:37:09" changer="psethuraman" created="2016-01-07T14:43:10" creator="admin">
  <filter />
  <message-template>println("Calling  BL_CONSIGNEE_UPDATE Event");

def bl = event.entity;
def vesVoy = bl.blCarrierVisit;
println(vesVoy);
try{
	def MatUnitUpdateWithBlDetails= api.getGroovyClassInstance("MatUnitUpdateWithBlDetails");
	MatUnitUpdateWithBlDetails.updateUnitWithBlData(vesVoy);

/*Calling Client vessel Descrepancy Report for failed transaction*/
	String reportVesVoy = vesVoy.cvId;
	println("reportVesVoy :::: "+ reportVesVoy);
	api.getGroovyClassInstance("MatReportClientVesDiscrepancy").createReport(reportVesVoy);
	println("Completed without errors :: " + status );
}
catch (e)
{
println ("MatUnitUpdateWithBlDetails Error " + e);
}</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="PREMOUNT_REQUEST_CANCEL" description="PREMOUNT_REQUEST_CANCEL" changed="2015-08-13T04:37:10" changer="psethuraman" created="2016-01-07T14:43:12" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="NTFY:GEN/MISC_NOTICE" email-party="unitRouting.rtgTruckingCompany" description="General/Misc. notice to trucker" sent-count="3" changed="2015-08-13T04:37:08" changer="psethuraman" created="2016-01-07T14:43:13" creator="admin">
  <filter />
  <message-template>Date : &amp;TIME

                               MATSON TERMINALS - CONTAINER YARD

From: &amp;UfvFlexString03
Subject: &amp;UfvFlexString04
         

Phone: (808) 848-1321   Fax: (808) 842-5490
---------------------------------------------------------------------------------------------
CONTAINER: &amp;UnitNbr
 LOCATION: &amp;PositionFull
   VESVOY: &amp;InboundCarrierId
  SHIPPER: &amp;GoodsShipperName
  BOOKING: &amp;GoodsBlNbr
    HOLDS: &amp;UnitImpediments

AVAILABLE DATE: &amp;UfvFlexDate02
  STORAGE DATE: &amp;UfvFlexDate03
DETENTION DATE: &amp;LastFreeDay</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_RETIRE" changed="2015-08-13T04:37:13" changer="psethuraman" created="2016-01-07T14:43:15" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

//Set Visibility to false
com.navis.inventory.business.units.Unit unit = event.getEntity();
    Set&lt;com.navis.inventory.business.units.UnitFacilityVisit&gt; ufvSet = unit.getUnitUfvSet();
    for(com.navis.inventory.business.units.UnitFacilityVisit ufv :ufvSet) {
            if(!ufv.isActive()) {
                   ufv.setUfvVisibleInSparcs(Boolean.FALSE);
           }       
    }


//Filter Condition for Commodity Auto
def commodity = event.getProperty("Commodity")
if(commodity != null &amp;&amp; commodity.equals("AUTO"))
{
   def ctrId = event.getProperty( "UnitNbr")
   def eqType = event.getProperty( "EquipmentType")

/*
   // build xml
  def writer = new StringWriter()
  def builder = new groovy.xml.MarkupBuilder( writer)
  def container = builder.container( id:ctrId, type:eqType)
  def xml = writer.toString()

  // send xml
  api.sendXml( xml)
  api.log( xml)
*/
}
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="VV" event-type="SCAN PLAN DONE" description="Clear group codes for scan plan" changed="2015-08-13T04:37:11" changer="psethuraman" created="2016-01-07T14:43:16" creator="admin">
  <filter />
  <message-template>def visit = event.getEntity();
def inj = new com.navis.apex.business.model.GroovyInjectionBase();
def unitFinder = inj.getUnitFinder();
def cv = visit.cvdCv;
def list = unitFinder.findAllUnitsByDeclaredIbCarrier(cv);
def iter = list.iterator();
while(iter.hasNext()) {
   try {
   def unit = iter.next();
   def group = unit.getFieldValue("unitRouting.rtgGroup.grpId");
   def unitId = unit.getFieldValue("unitId");
   def codes = ["DX","HZ","K","H","KH","GC","IC","2R","4R","20","24","40","45","US"];

    if(group != null)  api.log("group="+group);
    if(group != null &amp;&amp; codes.contains(group)) {
         unit.setFieldValue("unitRouting.rtgGroup",null);
    }
   } catch (Exception e) {
      e.printStackTrace();
  }
}</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="CMIS_DATA_REFRESH" description="Refresh Selected unit in Cmis with last event action on unit" changed="2015-08-13T04:37:12" changer="psethuraman" created="2016-01-07T14:43:18" creator="admin">
  <filter />
  <message-template>// N4 TO CMIS data processing  
def note = event.event.evntNote;
def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil");  
def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
def unitDtl = unitDetails.doCmisDataRefresh(event)
if(note!=null &amp;&amp; note.contains("NIS Load")) {
   gvyCmisUtil.postMsgForAction(unitDtl,api,"NLT")
} else if(note!=null &amp;&amp; (note.contains("NewVes") || note.contains("Client Vessel Completed")))  {
   gvyCmisUtil.postMsgForAction(unitDtl,api,"NVI")
} else {
   gvyCmisUtil.postMsgForAction(unitDtl,api,"EDT")
}</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="COMMUNITY_SERVICE_ASSIGN" description="COMMUNITY_SERVICE_ASSIGN" changed="2015-08-13T04:37:13" changer="psethuraman" created="2016-01-07T14:43:19" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}

/* -- Dont Pass PlanDisp=3 
  // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 { 
    // N4 TO CMIS data processing 
    def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
    def unitDtl = unitDetails.doIt(event)
    api.sendXml(unitDtl);
  }
*/
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="TD_RELEASE" description="TD_RELEASE" changed="2015-08-13T04:37:16" changer="psethuraman" created="2016-01-07T14:43:21" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
   // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }

//Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 def gvyCrsUtil = api.getGroovyClassInstance("GvyCmisCargoStatusUtil")
 boolean isNISPort =  gvyCrsUtil.nisPortCheck(event,api)
 if(reportProcessing &amp;&amp; isNISPort)
{
  //Cargo Status Report
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml( ret);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="OUTGATE_RELEASE" description="OUTGATE_RELEASE" changed="2015-08-13T04:37:16" changer="psethuraman" created="2016-01-07T14:43:22" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 { 
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_HAZARDS_UPDATE" changed="2015-08-13T04:37:14" changer="psethuraman" created="2016-01-07T14:43:24" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

//04/12/11 - Workaround for UN/NA on Haz Gate Ticket
def u = event.getEntity()
def hazards = u.getUnitGoods() != null ? u.getUnitGoods().getGdsHazards() : null
def hazardsList = hazards != null ? hazards.hzrdItems : null
for(aHazItem in hazardsList){
  if(aHazItem.getHzrdiMoveMethod() != aHazItem.hzrdiNbrType.key){aHazItem.setHzrdiMoveMethod(aHazItem.hzrdiNbrType.key)}
}

 
def gvyHazObj = api.getGroovyClassInstance("GvyCmisMostHazardousItem")
def isMostHaz = gvyHazObj.isMostHazardousItem(event)

 // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyEventUtil = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyEventUtil.verfiyCmisFeedProcessing(event)
 if(processCmisFeed &amp;&amp; isMostHaz)
 {
    Thread.sleep(2000)
    // N4 TO CMIS data processing 
   def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
   def xmlStr =  gvyEvntProcessor.processFieldChngCmisFeed(event,api)
   gvyHazObj.processMostHazItem(xmlStr, gvyEventUtil,api, event)
 }

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="BKG" event-type="COMMODITY_UPDATE_BKG" description="Temperature Update" changed="2016-01-29T17:20:31" changer="psethuraman" created="2016-01-07T14:43:25" creator="admin">
  <filter />
  <message-template>print(new java.util.Date());
		println("==&gt;Setting Temp for Booking : "+event.getEntity().getLogEntityId());
        com.navis.orders.business.eqorders.Booking ThisEqOrder = event.getEntity();
		println("size : "+ThisEqOrder.getEqboOrderItems().size());
        for ( com.navis.orders.business.eqorders.EquipmentOrderItem ThisEQOI : ThisEqOrder.getEqboOrderItems())
        {
			String remarksString = ThisEQOI.getEqoiRemarks();
			String tempString = ThisEQOI.getEqoiTempRequired()
			println("first tempString : "+tempString);
			println("first remarksString : "+remarksString);
			if ((tempString==null || tempString.isEmpty() || tempString.equals("-999.0")) 
				&amp;&amp; !((remarksString != null &amp;&amp; remarksString.startsWith("KFF")) || (remarksString != null &amp;&amp; remarksString.startsWith("AMB")))) {
				println("Temp is Emtpy, but remarks :::: " + remarksString);
				ThisEQOI.setEqoiTempRequired(null);
				ThisEQOI.setEqoiRemarks(tempString);
				ThisEqOrder.setEqoNotes(ThisEQOI.getEqoiRemarks());
			} else if (((remarksString == null || remarksString.isEmpty()) 
				|| ((remarksString != null &amp;&amp; remarksString.startsWith("KFF")) || (remarksString != null &amp;&amp; remarksString.startsWith("AMB")))) 
				&amp;&amp; (tempString == null || tempString.isEmpty() || tempString.equals("-999.0"))) {
				println("Remarks :::: " + remarksString);
				ThisEQOI.setEqoiTempRequired(null);
				ThisEqOrder.setEqoNotes(remarksString);
			} else {
				println("temp : "+ThisEQOI.getEqoiTempRequired());
				Double ThisTempReq = ThisEQOI.getEqoiTempRequired()
				ThisTempReq = ThisTempReq * 9/5 + 32;
				java.text.DecimalFormat tempFormat = new java.text.DecimalFormat("###.##");
				String formattedTemp = tempFormat.format(new Double(ThisTempReq));
				String ThisEQOIRemarks = ThisEQOI.getEqoiRemarks();
				println("Remarks : " + ThisEQOIRemarks);
				if (ThisEQOIRemarks != null &amp;&amp; ThisEQOIRemarks.contains('DUAL')) {

					int FirstSlash = ThisEQOIRemarks.indexOf('/');
					int SecondSlash = ThisEQOIRemarks.indexOf('/', FirstSlash + 1);
					if (FirstSlash &lt; SecondSlash) {
						/* get the values of the two tempuratures */
						String remarks = ThisEQOIRemarks.substring(0, FirstSlash) + "/" + formattedTemp + "/";
						ThisEQOIRemarks = remarks +  ThisEQOIRemarks.substring(SecondSlash + 1);
						ThisEQOI.setEqoiRemarks(ThisEQOIRemarks);
					} else {

					}
				}else {
					ThisEQOI.setEqoiRemarks(formattedTemp);
				}
				println("Remarks : " + ThisEQOI.getEqoiRemarks());
				ThisEqOrder.setEqoNotes(ThisEQOI.getEqoiRemarks());
			}
        }</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="TRUCKER_ASSIGN" description="ASSIGN TRUCKER" changed="2015-08-13T04:37:17" changer="psethuraman" created="2016-01-07T14:43:27" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

 // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_MOUNT" description="UNIT_MOUNT" changed="2017-03-30T10:53:52" changer="nkrishnan" created="2016-01-07T14:43:28" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")


def unit = event.getEntity()

api.log("UNIT_MOUNT ::" +unit);
//1. Set NOW the Chassis mount Information
if(!(event.event.evntAppliedBy.contains('GATE') &amp;&amp; event.event.evntAppliedBy.contains('gate') &amp;&amp; event.event.evntAppliedBy.contains('wo')  &amp;&amp;  event.event.evntAppliedBy.contains('xps')  &amp;&amp;  event.event.evntAppliedBy.contains('now') )){

    if(event.event.evntAppliedBy.contains('jms')){ Thread.sleep(3000); }

    

  def gvyNow = api.getGroovyClassInstance("NowChassisTrackingBuilder")
  //gvyNow.nowMessagesProcessor(event, api)

}


//Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  

//2] Add Thread Sleep if Mount create after UNIT_CREATE on the Ingate
 boolean delayMountOnIngate = gvyUtilObj.holdEventProcessing(event,'UNIT_CREATE', 2)
 if(delayMountOnIngate){
        println('Added Thread Sleep on Chs MOUNT at INGATE :'+event.entity.unitId)
        Thread.sleep(2000);
 }

//3] Check for Not Processing UnitMount on Ingate
boolean blockMountForIngate= gvyUtilObj.holdEventProcessing(event, 'UNIT_IN_GATE', 3)
 if(!blockMountForIngate)
{
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)

 //Adding Check for Event Ordering
 def lookup = api.getGroovyClassInstance("GvyVesselLookup");
 def position =  lookup.setDeckPositionType(unit);
 if("RO".equals(position) &amp;&amp; unit.subsidiaryEquipment != null) {
        processCmisFeed = false
        println('INSIDE THE UNIT_MOUNT DECK POISTION : '+processCmisFeed)
  } 

 def recorder = event.event.evntAppliedBy
 //04/14/2010 - Added Code to not pass mounts on Vessel to Cmis (For NOW Chassis Rfid) 
 api.log("unitActiveUFV in UNIT_MOUNT:: " +unit.unitActiveUfv);
 if(processCmisFeed &amp;&amp; unit.unitActiveUfv != null &amp;&amp; unit.unitActiveUfv.ufvLastKnownPosition != null 
	&amp;&amp;  !com.navis.argo.business.atoms.LocTypeEnum.VESSEL.equals(unit.unitActiveUfv.ufvLastKnownPosition.posLocType))
 {
    // N4 TO CMIS data processing 
    def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
    def unitDtl = unitDetails.doIt(event)
    def gvyMountObj = api.getGroovyClassInstance("GvyCmisEventUnitDismount")
    def mountXml = gvyMountObj.getAttachedEquipId(unitDtl,event,api)
  }


}//Ingate Check Ends
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="GROOVY TEST" sent-count="2" changed="2015-08-13T04:37:18" changer="psethuraman" created="2016-01-07T14:43:30" creator="admin">
  <filter />
  <message-template>email sent from general notice</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="CANCEL PREADVISE" description="Delete the advised Unit" changed="2015-08-13T04:37:20" changer="psethuraman" created="2016-01-07T14:43:31" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

def unit = event.getEntity();
def yard = com.navis.argo.ContextHelper.getThreadYard();
def facility = yard.getYrdFacility();

def ufv = unit.getUfvForFacilityLiveOnly(facility);

api.log("Cancel Preadvice "+unit);



 //Pass Cmis Feed only for Export Cancel PreAdvise Full Container
 def freightkind = unit.getFieldValue("unitFreightKind")
 freightkind = freightkind != null ? freightkind.getKey() : ''        
 println('Freight Kind ::'+freightkind )
 if(freightkind.equals('FCL'))
{
    // Create Cmis Feed for Msg from Acets &amp; UI Transaction
   def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
   boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
   if(processCmisFeed)
   {
      def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
      def unitDtl = unitDetails.doIt(event)
      def gvyAdvObj = api.getGroovyClassInstance("GvyCmisEventPreAdvise");
      def gvyXmlStr= gvyAdvObj.processPreAdvise(unitDtl,event,api)
      //api.sendXml(gvyXmlStr)
   }
} //Freight Kind Check

// Have to delete it last as it may purge the unit.
try {
   if(ufv) unit.deleteUfv(ufv);
} catch (Exception e) {
           api.log("Error in cancel preadvise "+e.getMessage());
           e.printStackTrace();
           com.navis.inventory.business.api.UnitManager um = (com.navis.inventory.business.api.UnitManager)com.navis.framework.business.Roastery.getBean("unitManager");
          // um.purgeUnit(unit);
}
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="PASSPASS_ASSIGN (OTR)" description="Pass Pass (OTR)" changed="2015-08-13T04:37:19" changer="psethuraman" created="2016-01-07T14:43:33" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
    def unitDtl = unitDetails.doIt(event)
    def gvyPassObj = api.getGroovyClassInstance("GvyCmisEventPassPass")
    gvyPassObj.passpassAssignOtr(unitDtl,api)
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_RECEIVE" description="Unit Receive for facility Hon" changed="2014-10-23T06:19:46" changer="riyer" created="2016-01-07T14:43:34" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="unitActiveUfv.ufvFacility" value="300862" ui-value="HON" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/* Set Avail Date */
 def unit = event.getEntity()
 def availLookup = api.getGroovyClassInstance("GvyAvailDate");
 boolean update = false
 if(event.event.evntAppliedBy.equals('wo') &amp;&amp; unit.unitActiveUfv.ufvFlexDate02 != null){
  //07/21/10 Do not recompute DAS Dates - Issue Avail Date is falling off
 }else{
   update =   availLookup.setAvailDate(unit, event);
 }
  
 // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 def gvyRecieveObj = null;  def xmlGvyReceive=null; def gvyCmisUtil=null;
 if(processCmisFeed)
 {
     // N4 TO CMIS data processing 
     def equiClass =unit.getFieldValue("unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass")
     def equiClassType = equiClass != null ? equiClass.getKey() : ''
     if(!equiClassType.equals('CHASSIS'))
    {
       def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
       def unitDtl = unitDetails.doIt(event)
    
       gvyRecieveObj = api.getGroovyClassInstance("GvyCmisEventUnitReceive")
      xmlGvyReceive = gvyRecieveObj.processUnitRecieve(unitDtl, unit,api)
   
     // POD = NIS port, and the O/B Intended = GEN_TRUCK, set the O/B Intended = BARGE.
     gvyRecieveObj.setOBCarrierToBarge(unit)
    
      //Detention Msg Check
      if(update){
        def gvyDentObj = api.getGroovyClassInstance("GvyCmisDetentionMsgProcess"); 
        gvyDentObj.detentionProcess(xmlGvyReceive,event,api)
      }     
      
      gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil")    
      def locationTier  = gvyCmisUtil.getFieldValues(xmlGvyReceive, "locationTier=") 
      xmlGvyReceive = api.getGroovyClassInstance("GvyCmisEventSIT").ybSatProc(gvyCmisUtil,unit, xmlGvyReceive)
      // Receive Msg - Gems Dont post YMV for WO 02/02/11
      if(!locationTier.equals('T3') &amp;&amp; !locationTier.equals('T2') ){ 
           gvyCmisUtil.postMsgForAction(xmlGvyReceive,api,'null')
      }
    }
 }

//SET DrayStatus &amp; post PDU for YB-SIT 
api.getGroovyClassInstance("GvyCmisEventSIT").ybSitProc(api, gvyCmisUtil, unit, xmlGvyReceive)


println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="R40H Control Atmosphere to Route to OAK" sent-count="518" changed="2014-10-20T08:38:06" changer="-notices-" created="2016-01-07T14:43:35" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="LE" metafield="unitPrimaryUe.ueEquipment.eqIdNbrOnly" value="551699" ui-value="551699" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="GE" metafield="unitPrimaryUe.ueEquipment.eqIdNbrOnly" value="551500" ui-value="551500" order="1" negated="false" parm-type="NO_PARM" />
      <predicate verb="MATCHES" metafield="unitPrimaryUe.ueEquipment.eqIdPrefix" value="MATU*" ui-value="MATU*" order="2" negated="false" parm-type="NO_PARM" />
      <predicate verb="EQ" metafield="unitFreightKind" value="MTY" ui-value="Empty" order="3" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>CA Reefer &amp;UnitNbr Ingated at &amp;TIME - Route to OAK</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="YB_ASSIGN" description="overweight Alert YB assign weight &gt; 55000 email" sent-count="1707" changed="2014-07-29T10:29:47" changer="kmikami" created="2016-01-07T14:43:36" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="GT" metafield="unitGoodsAndCtrWtKg" value="24947.58035" ui-value="55000 lb" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>&amp;UnitNbr YB Assigned at &amp;TIME for &amp;Destination is Overweight. Exceeds weight limitation of 55,000 lb.</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Ingated claim reefer container to F&amp;M" sent-count="68" changed="2013-07-08T13:17:43" changer="-notices-" created="2016-01-07T14:43:38" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="MATCHES" metafield="unitImpediments" value="*CL*" ui-value="*CL*" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>Date : &amp;TIME

                               MATSON TERMINALS - CONTAINER YARD

From: Gate
Subject: Claims Container to F&amp;M


Container &amp;UnitNbr for F&amp;M was ingated on &amp;DateOfLastHandling. 
&amp;UnitRemark</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_SEAL" description="UNIT_SEAL" changed="2015-08-13T04:37:22" changer="psethuraman" created="2016-01-07T14:43:39" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

def unit = event.getEntity();
 Thread.sleep(3000)

def gvyEventUtil = api.getGroovyClassInstance("GvyEventUtil") 
def gvyPropUpdtObj = api.getGroovyClassInstance("GvyCmisEventUnitPropertyUpdate") 

gvyPropUpdtObj.processUnitPropertyUpdate(event,api) 
 
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="DONOT_BACKLOAD" description="To update Load back field" changed="2015-07-15T22:30:00" changer="admin" created="2016-01-07T14:43:41" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

def unit = event.getEntity();
println("//Unit ---:"+ unit +" ----//")
com.navis.argo.business.model.Facility fcy = com.navis.argo.ContextHelper.getThreadFacility();
println("//Fcy ---:"+ fcy +" ----//")
def  activeUfv = unit.getUfvForFacilityNewest(fcy);
 if(activeUfv == null) {
                activeUfv = unit.getUnitActiveUfvNowActive();
            }
println("//UFV ---:"+ activeUfv +" ----//")
activeUfv.setFieldValue("ufvFlexString09","Y");</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UPDATE_UNIT_NOTES" description="UPDATE_UNIT_NOTES" changed="2017-01-18T03:27:23" changer="brajamanickam" created="2016-01-07T14:43:34" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//") 
/* Set Avail Date */
def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}



 def availLookup = api.getGroovyClassInstance("GvyAvailDate");
 boolean update = availLookup.setAvailDate(unit, event);

//Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 if(reportProcessing)
{
   def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
   def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
   api.sendXml( ret);
 }

 
 // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
   // N4 TO CMIS data processing 
   def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
   def unitDtl = gvyEvntProcessor.processFieldChngCmisFeed(event,api)
   
   //Detention Msg Check
   if(update){
        def gvyDentObj = api.getGroovyClassInstance("GvyCmisDetentionMsgProcess"); 
        gvyDentObj.detentionProcess(unitDtl,event,api)
   }else if(!update){
      api.sendXml(unitDtl);
   }

 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EDISESS" event-type="EDI_POST" description="EDI Import Discrepancies Report" changed="2012-12-11T11:51:19" changer="riyer" created="2016-01-07T14:43:35" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="edisessDirection" value="R" ui-value="Receive" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="IN" metafield="edisessName" value=":HLC_BAPLIE|MAE_BAPLIE|RECEIVE_ANL_BAPLIE|SEACOS_BAPLIE|STIFIN|HSD_BAPLIE|" ui-value="[HLC_BAPLIE,MAE_BAPLIE,...]" order="1" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>println("Start of MatReportImportDiscrepancies")

def ediSession = event.getEntity();
def sessionName = ediSession.getFieldValue("EdisessName")
println("END of MatReportImportDiscrepancies session name is "+sessionName)

println("Start of MatGetStowplanVesVoy");
String vesVoy = api.getGroovyClassInstance("MatGetStowplanTrankey").execute(event,api)
println("End of MatGetStowplanVesVoy");

//println("Generating  Import Discrepancies report")

//def reportRunner= api.getGroovyClassInstance("MatReportImportDiscrepancies");
//HashMap parameters = new HashMap();
//reportRunner.generateReport(parameters,vesVoy);</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="BKG" event-type="BOOKING_HAZ_VERIFIED" created="2016-01-07T14:43:36" creator="admin">
  <filter />
  <message-template>api.getGroovyClassInstance("MATUtil").refreshUnitsForBooking(event.getEntity());</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="YB_ASSIGN" description="overweight Alert YB assign weight &gt; 55000 email" sent-count="1705" changed="2014-05-09T11:47:01" changer="rchinhon" created="2016-01-07T14:43:38" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="GT" metafield="unitGoodsAndCtrWtKg" value="24947.58035" ui-value="55000 lb" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>&amp;UnitNbr YB Assigned at &amp;TIME for &amp;Destination is Overweight. Exceeds weight limitation of 55,000 lb.</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" business-entity-id="MATU5134184" email-address="1aktosdevteam@matson.com" event-type="UNIT_DOCUMENT_CREATE" description="UNIT_DOCUMENT_CREATE" changed="2015-08-13T04:37:22" changer="psethuraman" created="2016-01-07T14:43:39" creator="admin">
  <filter />
</notice-request>
<notice-request action="GROOVY" business-entity="EDISESS" event-type="EDI_POST" description="EDI Import Discrepancies Report" changed="2012-12-11T11:50:27" changer="riyer" created="2016-01-07T14:43:41" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="edisessDirection" value="R" ui-value="Receive" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="IN" metafield="edisessName" value=":HLC_BAPLIE|MAE_BAPLIE|RECEIVE_ANL_BAPLIE|STIFIN|HSD_BAPLIE|" ui-value="[HLC_BAPLIE,MAE_BAPLIE,...]" order="1" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>println("Start of MatReportImportDiscrepancies")

def ediSession = event.getEntity();
def sessionName = ediSession.getFieldValue("EdisessName")
println("END of MatReportImportDiscrepancies session name is "+sessionName)

println("Start of MatGetStowplanVesVoy");
String vesVoy = api.getGroovyClassInstance("MatGetStowplanTrankey").execute(event,api)
println("End of MatGetStowplanVesVoy");

//println("Generating  Import Discrepancies report")

//def reportRunner= api.getGroovyClassInstance("MatReportImportDiscrepancies");
//HashMap parameters = new HashMap();
//reportRunner.generateReport(parameters,vesVoy);</message-template>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UNIT_PROPERTY_UPDATE" description="Set the max temp and temp setting based on flex temp setting field" created="2016-01-29T15:11:00" creator="pseiler" code-extension-name="MATSyncReeferTempFields">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="TRUE" metafield="unitRequiresPower" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Non 687 and 689 reefer series container for MIS port" sent-count="179" changed="2014-09-29T12:29:29" changer="-notices-" created="2016-01-07T14:43:42" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="MATCHES" metafield="unitPrimaryUe.ueEquipment.eqEquipType.eqtypId" value="R*" ui-value="R*" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="EQ" metafield="unitPrimaryUe.ueEquipment.eqIdPrefix" value="MATU" ui-value="MATU" order="1" negated="false" parm-type="NO_PARM" />
      <predicate verb="AND" order="2" negated="true" parm-type="NO_PARM">
        <predicate verb="MATCHES" metafield="unitPrimaryUe.ueEquipment.eqIdNbrOnly" value="687*" ui-value="687*" order="0" negated="false" parm-type="NO_PARM" />
        <predicate verb="MATCHES" metafield="unitPrimaryUe.ueEquipment.eqIdNbrOnly" value="689*" ui-value="689*" order="1" negated="false" parm-type="NO_PARM" />
      </predicate>
      <predicate verb="OR" order="3" negated="false" parm-type="NO_PARM">
        <predicate verb="EQ" metafield="unitGoods.gdsDestination" value="MAJ" ui-value="MAJ" order="0" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitGoods.gdsDestination" value="KWJ" ui-value="KWJ" order="1" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitGoods.gdsDestination" value="EBY" ui-value="EBY" order="2" negated="false" parm-type="NO_PARM" />
      </predicate>
    </predicate>
  </filter>
  <message-template>&amp;UnitNbr Ingated at &amp;TIME for &amp;Destination</message-template>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UPDATE YARD EQUIPMENTS" description="Set the max temp and temp setting based on flex temp setting field" created="2016-01-29T15:11:56" creator="pseiler" code-extension-name="MATSyncReeferTempFields">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="TRUE" metafield="unitRequiresPower" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="SET MULTISTOP NON-RETURNING" created="2016-01-29T05:47:34" creator="admin" code-extension-name="MatsonAncMultiStopImportDelivery">
  <filter />
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="CAR CARRIER UP" description="If CAR CARRIER UP event set the equipment height to 13'6&quot;" created="2016-02-26T07:44:03" creator="pseiler" code-extension-name="MATCarCarrierUp">
  <filter />
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UNIT_REROUTE" description="For Dray Units Set the Unit Flex Booking Number" created="2016-02-29T15:44:24" creator="pseiler" code-extension-name="MATSetBookingNumFlex">
  <filter />
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UNIT_PROPERTY_UPDATE" description="MATBookingUpdateOnBargeEmpty" created="2016-08-23T13:25:55" creator="psethuraman" code-extension-name="MATBookingUpdateOnBargeEmpty">
  <filter />
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="TD_HOLD" description="TD_HOLD" changed="2015-08-13T04:37:15" changer="psethuraman" created="2016-01-07T14:43:25" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
   // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }

//Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 def gvyCrsUtil = api.getGroovyClassInstance("GvyCmisCargoStatusUtil")
 boolean isNISPort =  gvyCrsUtil.nisPortCheck(event,api)
 if(reportProcessing &amp;&amp; isNISPort)
{
  //Cargo Status Report
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml( ret);
 }

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_STORAGE_UPDATE" description="UNIT_STORAGE_UPDATE" changed="2015-08-13T04:37:17" changer="psethuraman" created="2016-01-07T14:43:27" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
try
{
   // Create Cmis Feed for Msg from Acets &amp; UI Transaction
   def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  

   boolean nisDetn = gvyUtilObj.holdEventProcessing(event, 'NIS_DETENTION', 6)

   def gvyPropUpdtObj = api.getGroovyClassInstance("GvyCmisEventUnitPropertyUpdate") 
   boolean suppressforNv = gvyPropUpdtObj.suppressForNewves(event, gvyUtilObj)
 
   boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)

   def unit = event.getEntity();
   def equiClass =unit.getFieldValue("unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass")
   def equiClassKey = equiClass != null ? equiClass.getKey() : equiClass

   //Check To Pass UI Storage Dt Change
   def eventObj = event.getEvent()
   def doer = eventObj.getEvntAppliedBy();
   boolean userFlag = doer.startsWith('user:user:')
   println("N4 TO CMIS data processing  ::"+suppressforNv+"::"+equiClassKey +"::"+userFlag+"::"+processCmisFeed+"::"+nisDetn+"::"+event.event.evntAppliedBy);
   if( !suppressforNv &amp;&amp; equiClassKey.equals('CONTAINER') &amp;&amp; !userFlag &amp;&amp; processCmisFeed &amp;&amp; !nisDetn
    &amp;&amp; !event.event.evntAppliedBy.contains('notice'))
   {
    // N4 TO CMIS data processing 
    def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
    def unitDtl = unitDetails.doIt(event)
   
    boolean lastFreeDateChng = gvyUtilObj.wasFieldChanged(event,'ufvLastFreeDay')
    boolean availDateChng = gvyUtilObj.wasFieldChanged(event,'ufvFlexDate02')
    boolean detentionDateChng =  gvyUtilObj.wasFieldChanged(event,'ufvFlexDate03')
    //Check To Suppress DAS Transasction before NVI
    def passMsg = gvyUtilObj.suppressDasMsgBeforeNvi(event)
    //Detention Msg Check
    println("Detention Msg Check ::"+passMsg+"::"+availDateChng +"::"+detentionDateChng );
    if(passMsg &amp;&amp; (availDateChng || detentionDateChng)){
        def gvyDentObj = api.getGroovyClassInstance("GvyCmisDetentionMsgProcess"); 
        gvyDentObj.detentionProcess(unitDtl,event,api)
    }
     //Post EDT if Last Free Day Changed
    /* if(lastFreeDateChng &amp;&amp; passMsg){
       api.sendXml(unitDtl);  
      } */
   }
}catch(Exception e){
    e.printStackTrace()
}
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="EDI_STOWPLAN" description="Trigger Groovy MatProcessStowPlanUpdates to update unit properties" changed="2015-08-13T04:37:18" changer="psethuraman" created="2016-01-07T14:43:28" creator="admin">
  <filter />
  <message-template>api.getGroovyClassInstance("MATProcessUnitUpdatesFromStowPlan").execute(event,api);</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UPU" description="ACETS - UPU" changed="2015-08-13T04:37:20" changer="psethuraman" created="2016-01-07T14:43:31" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

/* groovy code to copy the owner code to unit flex string 13 when the unit is created */
def gvyEquiOwner = api.getGroovyClassInstance("GvyXpsEquipmentOwner") 
gvyEquiOwner.setEquipmentOwner(event)
 
// Commented for Round-3 Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 { 
   // N4 TO CMIS data processing 
   def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
   def unitDtl = gvyEvntProcessor.processFieldChngCmisFeed(event,api)
   
    def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil")  
    gvyCmisUtil.postMsgForAction(unitDtl,api,"AUPU")
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="MDA_ASSIGN" sent-count="340" changed="2015-08-13T04:37:19" changer="psethuraman" created="2016-01-07T14:43:33" creator="admin">
  <filter />
  <message-template>Unit &amp;UnitNbr &amp;EVENT at &amp;TIME</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="PASSPASS_UNASSIGN" description="Pass Pass UnAssign" changed="2015-08-13T04:37:17" changer="psethuraman" created="2016-01-07T14:43:34" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
    def unitDtl = unitDetails.doIt(event)
    def gvyPassObj = api.getGroovyClassInstance("GvyCmisEventPassPass")
    gvyPassObj.passpassUnAssign(unitDtl,api)
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Ingated Stop In Transit container for YB" sent-count="74" changed="2014-09-29T08:41:52" changer="gloque" created="2016-01-07T14:43:37" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="unitGoods.gdsCommodity" value="^SAT" ui-value="SAT (SIT INGATED)" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="EQ" metafield="unitDrayStatus" value="TRANSFER" ui-value="Transfer to other Facility" order="1" negated="false" parm-type="NO_PARM" />
      <predicate verb="EQ" metafield="unitRouting.rtgGroup" value="^YB" ui-value="YB (Containers to move via YB)" order="2" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>Date : &amp;TIME

                               MATSON TERMINALS - CONTAINER YARD

From: Gate
Subject: SIT Container for YB


SIT container &amp;UnitNbr for Young Brothers was ingated on &amp;DateOfLastHandling.</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_DAMAGES_DELETED" changed="2015-08-13T04:37:22" changer="psethuraman" created="2016-01-07T14:43:39" creator="admin">
  <filter />
  <message-template>println("//Start Event --- :"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

// Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
   def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
   def unitDtl = unitDetails.doIt(event)
   def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil") 
   gvyCmisUtil.postMsgForAction(unitDtl,api,"DGM")
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Full container returned to yard" sent-count="115" changed="2014-11-05T13:55:46" changer="-notices-" created="2016-01-07T14:43:41" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="unitDrayStatus" value="DRAYIN" ui-value="Dray In" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="NE" metafield="unitImpediments" value="*CG DMG*" ui-value="*CG DMG*" order="1" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>Date : &amp;TIME

                               MATSON TERMINALS - CONTAINER YARD

From: Gate
Subject: Full Container Return to Yard


Container &amp;UnitNbr was returned back to the yard on &amp;TIME</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Ingated Stop In Transit container for YB" sent-count="74" changed="2014-09-29T08:41:52" changer="gloque" created="2016-01-07T14:43:42" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="unitGoods.gdsCommodity" value="^SAT" ui-value="SAT (SIT INGATED)" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="EQ" metafield="unitDrayStatus" value="TRANSFER" ui-value="Transfer to other Facility" order="1" negated="false" parm-type="NO_PARM" />
      <predicate verb="EQ" metafield="unitRouting.rtgGroup" value="^YB" ui-value="YB (Containers to move via YB)" order="2" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>Date : &amp;TIME

                               MATSON TERMINALS - CONTAINER YARD

From: Gate
Subject: SIT Container for YB


SIT container &amp;UnitNbr for Young Brothers was ingated on &amp;DateOfLastHandling.</message-template>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UNIT_DISCH" description="Update group on ILB discharge or load " created="2016-03-14T12:05:14" creator="gbabu" code-extension-name="MATUpdateGroupOnBargeDischargeLoad">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="unitActiveUfv.ufvFacility" value="46601" ui-value="DUT" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UNIT_LOAD" description="Update group on ILB discharge or load " created="2016-03-14T12:07:24" creator="gbabu" code-extension-name="MATUpdateGroupOnBargeDischargeLoad">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="unitActiveUfv.ufvFacility" value="46601" ui-value="DUT" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="EQUIPMENT_BKG_HAZ_UPDATE" description="Update unit with booking hazard in Hazmat system" created="2016-07-22T12:17:40" creator="psethuraman" code-extension-name="HazmatUpdateNBSplit">
  <filter />
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="ST_HOLD" description="ST_HOLD" changed="2015-08-13T04:37:15" changer="psethuraman" created="2016-01-07T14:43:25" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
   // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }

//Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 def gvyCrsUtil = api.getGroovyClassInstance("GvyCmisCargoStatusUtil")
 boolean isNISPort =  gvyCrsUtil.nisPortCheck(event,api)
 if(reportProcessing &amp;&amp; isNISPort)
{
  //Cargo Status Report
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml( ret);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="PASSPASS_ASSIGN (SHOW)" description="Pass Pass Assign (SHOW)" changed="2015-08-13T04:37:17" changer="psethuraman" created="2016-01-07T14:43:26" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
    def unitDtl = unitDetails.doIt(event)
    def gvyPassObj = api.getGroovyClassInstance("GvyCmisEventPassPass")
    gvyPassObj.passpassAssignShow(unitDtl,api)
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_DISCH" description="Rehandle container concatenate text &quot;R/H:&quot;+&lt;pol&gt; to front of existing notes" changed="2016-04-04T14:00:02" changer="gbabu" created="2016-01-07T14:43:28" creator="admin">
  <filter />
  <message-template>def unit = event.getEntity();
api.getGroovyClassInstance("DetachChassisFromUnitInComplex").detachChassisFromDepartedUnit(unit, api);
/*api.getGroovyClassInstance("GvyEventUtil").recordUnitDischComplete(unit, api, event.getEvent().getEvntFacility());*/</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="PER_ASSIGN" description="PER_ASSIGN" changed="2015-08-13T04:37:20" changer="psethuraman" created="2016-01-07T14:43:31" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }

 //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 if(reportProcessing)
{
  // Cargo Status email
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml( ret);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_LOAD" description="Loads the Unit on the Vessel" changed="2016-12-02T21:08:14" changer="brajamanickam" created="2016-01-07T14:43:32" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")



/* Set Deck Position */ 
 def unit = event.getEntity();
api.getGroovyClassInstance("GvyCmisUtil").checkValidUnitSendEmail(event,unit)
 def lookup = api.getGroovyClassInstance("GvyVesselLookup");
 def position =  lookup.setDeckPositionType(unit);
 boolean isRoroUnit = false
// RORO vessel with attached eqmnt gets unmounted incorrectly. A1 Correct this.  
//    A1 Correct this.  
    if("RO".equals(position) &amp;&amp; unit.subsidiaryEquipment != null) {
        // Set the event user
        isRoroUnit = true
        com.navis.argo.ContextHelper.setThreadExternalUser(event.event.evntAppliedBy);
       def iter = unit.subsidiaryEquipment.iterator();
       def now = new java.util.Date();
       while(iter.hasNext()) {
	def nextItem = iter.next();
                      // Still attached
	if( nextItem.ueDetachTime == null) continue;
	def ellapseTime = now.getTime() - nextItem.ueDetachTime.getTime();
                  	if(ellapseTime &gt; 120000) continue;

       	def eq = nextItem.ueEquipment;
      	def ueEqRole = nextItem.ueEqRole;
     	 if(eq != null &amp;&amp; ueEqRole != null) {
                        try {
                     	      unitEquip = unit.attachEquipment(eq,ueEqRole,true);
                        } catch (Throwable e) {
		java.io.StringWriter w = new StringWriter();
		java.io.PrintWriter pw = new java.io.PrintWriter(w);
		e.printStackTrace(pw);
		api.log(w.toString());
	 }
      	}
      }
   }
// A1 End Correction

//Detach container accesseries  if attached  start
def contAcc = api.getGroovyClassInstance("MATDetachContAcc");
contAcc.execute(event);
/* 1] Create Cmis Feed for Msg from Acets &amp; UI Transaction */

 def gvyLoadObj = null
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    Thread.sleep(3000)
   // N4 TO CMIS data processing 
   def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
   def unitDtl = unitDetails.doIt(event)
   gvyLoadObj = api.getGroovyClassInstance("GvyCmisEventUnitLoad");
   String outMsg = gvyLoadObj.getLoadedEquipClassMsg(unitDtl,event,api)
   //Gems Issue for barge 12/09/10 
   def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil")  
   def destination = unit.getFieldValue("unitGoods.gdsDestination");
   boolean isNisPort = gvyCmisUtil.isNISPort(destination);
     api.sendXml(outMsg)
def sendOGS = api.getGroovyClassInstance("GvyCmisSendOGSCLS")
sendOGS.isProcessCLSOGSMessage(outMsg,event,api)
 }

//11/19/2009 - Auto Roll POL and/or OPL if blank
gvyLoadObj = gvyLoadObj == null ? api.getGroovyClassInstance("GvyCmisEventUnitLoad") : gvyLoadObj
gvyLoadObj.setPolIfBlank(unit)
gvyLoadObj.passBareChassisToNow(unit, api, event) 

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="VV" event-type="AUDIT_DISCHARGE_COMPLETE" description="Discharge audit complete" changed="2015-08-13T04:37:09" changer="psethuraman" created="2016-01-07T14:43:10" creator="admin">
  <filter />
  <message-template>//Processes to run when audit discharge is complete
try{
def auditComplete = api.getGroovyClassInstance("GvyAuditDischargeComplete");
println("AUDIT_DISCHARGE_COMPLETE-Started")
def isComplete = auditComplete.allUnitsDischarged(event,"DISCHARGE")
if (isComplete == "Y"){
//auditComplete.processClientDischarge(event,"DISCHARGE")       //A1 - client discharge report
auditComplete.processLastDischCntrRpt(event,"DISCHARGE")    //A2 - last discharge report
auditComplete.discAuditConfirmationEmail(event,"DISCHARGE") //A3 - email confirmation
}
} catch (Exception e){
  println ("ERROR_IN_AUDIT_DISCHARGE_COMPLETE::"+e)
}

//******TESTING - Acct Audit Discharge Report******
try{
println ("AUDIT_DISCHARGE_COMPLETE Start::")
def auditCompleteTest = api.getGroovyClassInstance("GvyAuditDischargeCompleteTestUnits");
auditCompleteTest.discAuditConfirmationEmail(event,"DISCHARGE");
} catch (Exception e){
println ("ERROR_IN_AUDIT_DISCHARGE_COMPLETE_TEST_UNIT::"+e)
}
//******TESTING - Last ctr Discharge Report******
try{
println ("LAST_CONTAINER_DISCHARGE_COMPLETE Start::")
def LastDischCntrRpt = api.getGroovyClassInstance("GvyAuditDischargeCompleteLastCtr");
LastDischCntrRpt.processLastDischCntrRpt(event,"DISCHARGE")    //A2 - last discharge report
LastDischCntrRpt.discAuditConfirmationEmail(event,"DISCHARGE") //A3 - email confirmation
} catch (Exception e){
println ("ERROR_IN_LAST_CONTAINER_DISCHARGE_COMPLETE::"+e)
}</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="ASSGN_EXPT_BKG" description="Assign Export Bkg to Import Ctr" changed="2015-08-13T04:37:09" changer="psethuraman" created="2016-01-07T14:43:10" creator="admin">
  <filter />
  <message-template>def gvyEvntUpdBkg =api.getGroovyClassInstance("GvyUpdateBooking");
gvyEvntUpdBkg.execute(event,api);</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="ON_RELEASE" description="ON_RELEASE" changed="2015-08-13T04:37:10" changer="psethuraman" created="2016-01-07T14:43:11" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }

 //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 if(reportProcessing)
{
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml(ret);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="OVER_ROAD_ASSIGN" description="OVER_ROAD_ASSIGN" changed="2015-08-13T04:37:10" changer="psethuraman" created="2016-01-07T14:43:11" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
   // N4 TO CMIS data processing 
   def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
   def unitDtl = unitDetails.doIt(event)
   api.sendXml(unitDtl);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="NTFY:CONTAINER_RECONSIGNED" email-party="unitGoods.gdsConsigneeBzu" description="Container re-consigned notice to consignee" changed="2015-08-13T04:37:08" changer="psethuraman" created="2016-01-07T14:43:13" creator="admin">
  <filter />
  <message-template>Date : &amp;TIME

                               MATSON TERMINALS - CONTAINER YARD

From: &amp;UfvFlexString03
Subject: CONTAINER RECONSIGNED - &amp;UfvFlexString04
         

Phone: (808) 848-1321   Fax: (808) 842-5490
---------------------------------------------------------------------------------------------
CONTAINER: &amp;UnitNbr
 LOCATION: &amp;PositionFull
   VESVOY: &amp;InboundCarrierId
  SHIPPER: &amp;GoodsShipperName
  BOOKING: &amp;GoodsBlNbr
    HOLDS: &amp;UnitImpediments</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="NTFY:GEN/MISC_NOTICE" email-party="unitGoods.gdsConsigneeBzu" description="General/Misc. notice to consignee" sent-count="5" changed="2015-08-13T04:37:08" changer="psethuraman" created="2016-01-07T14:43:13" creator="admin">
  <filter />
  <message-template>Date : &amp;TIME

                               MATSON TERMINALS - CONTAINER YARD

From: &amp;UfvFlexString03
Subject: &amp;UfvFlexString04
         

Phone: (808) 848-1321   Fax: (808) 842-5490
---------------------------------------------------------------------------------------------
CONTAINER: &amp;UnitNbr
 LOCATION: &amp;PositionFull
   VESVOY: &amp;InboundCarrierId
  SHIPPER: &amp;GoodsShipperName
  BOOKING: &amp;GoodsBlNbr
    HOLDS: &amp;UnitImpediments

AVAILABLE DATE: &amp;UfvFlexDate02
  STORAGE DATE: &amp;UfvFlexDate03
DETENTION DATE: &amp;LastFreeDay</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="GX_HOLD" description="GX_HOLD" changed="2015-08-13T04:37:13" changer="psethuraman" created="2016-01-07T14:43:15" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api);
 }

//Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 def gvyCrsUtil = api.getGroovyClassInstance("GvyCmisCargoStatusUtil")
 boolean isNISPort =  gvyCrsUtil.nisPortCheck(event,api)
 if(reportProcessing &amp;&amp; isNISPort)
{
  //Cargo Status Report
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml(ret);
 } 
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="HP_RELEASE" description="HP_RELEASE" changed="2015-08-13T04:37:13" changer="psethuraman" created="2016-01-07T14:43:15" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
   // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }

 //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 if(reportProcessing)
{
   def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
   def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
   api.sendXml(ret);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="CC_HOLD" description="CC_HOLD" changed="2015-08-13T04:37:14" changer="psethuraman" created="2016-01-07T14:43:16" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
  
  // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }

 //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 if(reportProcessing)
{
   def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
   def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
   api.sendXml(ret)
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_POSITION_CORRECTION" description="UNIT_POSITION_CORRECTION" changed="2015-08-13T04:37:11" changer="psethuraman" created="2016-01-07T14:43:16" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

  // Create Cmis Feed for Msg from Acets &amp; UI Transaction  
   def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
   def xpsRtacts = gvyUtilObj.nonProcessingXpsAction(event,'RTACTCS')
   boolean rtactsFlag = true
   if(!xpsRtacts){
      def position = event.getProperty("PositionFull")
      position = position != null ? position : ''
      def prevPosition  = gvyUtilObj.getPreviousProperty(event,'posName')
      if(position.equals(prevPosition)){
             rtactsFlag = false    
       }
      println('position ::--'+position+"  prevPosition ::--"+prevPosition+"   rtactsFlag ::--"+rtactsFlag )
   }

  boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
  def xpsTruckPost  = gvyUtilObj.nonProcessingXpsAction(event,'TruckPosition')
  def xpsAssignPost = gvyUtilObj.nonProcessingXpsAction(event,'AssignPosition')

  if(processCmisFeed &amp;&amp; xpsTruckPost &amp;&amp; xpsAssignPost &amp;&amp; rtactsFlag)
  {
      //Check To Create Acets Msg Action=RHN and post msg
      def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
      def unitAcetsMsg = gvyEvntProcessor.processFieldChngCmisFeed(event,api)
      def unit = event.getEntity()
      def acetsObj = api.getGroovyClassInstance("GvyCmisMessagesForAcets")
      acetsObj.unitPositionCorrection(unitAcetsMsg, unit, api, event, gvyUtilObj)
      //post Msg with Action=EDT 
      def unitDtl = gvyEvntProcessor.processFieldChngCmisFeed(event,api)

      //CHECK FOR YMV - UNIT IN YARD
      def lkpLocType=unit.getFieldValue("unitActiveUfv.ufvLastKnownPosition.posLocType")
      def locType = lkpLocType != null ? lkpLocType.getKey() : ''
      if( locType.equals('YARD')){
         unitDtl = unitDtl.replace("lastAction='null'","lastAction='YMV'");
         unitDtl = unitDtl.replace("action='null'","action='YMV'") 
      }  
	 def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil") 
	 gvyCmisUtil.postMsgForAction(unitDtl,api,'null')
  }//if Ends for ProcessCmisFeed


 def unit = event.getEntity();
 def lookup = api.getGroovyClassInstance("GvyVesselLookup");
// api.log("Deck Type="+lookup.getDeckPositionType(unit));
 lookup.setDeckPositionType(unit);

//DVI Hold - commented it 06/01/11
//def emailNotice = api.getGroovyClassInstance("GvyEmailNotification") 
//emailNotice.notifyDviHold(event, api)
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="GROOVY TEST" description="JF HAZ test" changed="2015-08-13T04:37:12" changer="psethuraman" created="2016-01-07T14:43:17" creator="admin">
  <filter />
  <message-template>//def unit = event.getEntity()

// -- To recal Avail and Detention Dates - just uncomment the blow to lines
//def availLookup = api.getGroovyClassInstance("GvyAvailDate");
//def update = availLookup.setAvailDate(unit, event);


//TO post message to cmis/Gems/MNS/DAS
//def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
//def unitDtl = unitDetails.doIt(event)
//def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil");
//unitDtl = gvyCmisUtil.eventSpecificFieldValue(unitDtl,"action=","BDC");
//unitDtl = gvyCmisUtil.eventSpecificFieldValue(unitDtl,"lastAction=","FREE");

//unitDtl = gvyCmisUtil.eventSpecificFieldValue(unitDtl,"action=","EDT");
//unitDtl = gvyCmisUtil.eventSpecificFieldValue(unitDtl,"lastAction=","EDT");

//api.sendXml(unitDtl)</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="TURNTIME_BY_CONSIGNEE" changed="2015-08-13T04:37:12" changer="psethuraman" created="2016-01-07T14:43:18" creator="admin">
  <filter />
  <message-template>// Gate Turntime Rpt Grp By Trucker 
def gvyTvd = api.getGroovyClassInstance("GvyReportTruckerTurnTime")
//Parameters - (FromDate,ToDate, TruckingCompany, Consignee)
gvyTvd.processLookup("12/01/2009","12/31/2009",null,"C &amp; S")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="RD_HOLD" description="RD_HOLD" changed="2015-08-13T04:37:13" changer="psethuraman" created="2016-01-07T14:43:19" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

println("Update Unit Remarks")
def gvyEvntUpd =api.getGroovyClassInstance("GvyUpdateUnitRemark");
gvyEvntUpd.execute(event,api);

def u = event.getEntity();
def eqTareWt = u.getFieldValue("eqTareWeightKg");
def eqSafeWt = u.getFieldValue("eqSafeWeightKg")
println("UNIT_PRIMARY_EQ_TARE_WEIGHT_KG:" + eqTareWt );
println("UNIT_PRIMARY_EQ_TARE_WEIGHT_KG:" + eqSafeWt );


// Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 boolean processAcetsMsg = gvyUtilObj.acetsMesssageFilter(event)
  if(processCmisFeed &amp;&amp; !processAcetsMsg)
 {
     def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
     gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }
 
 //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 if(reportProcessing)
{
  //Cargo Status Report
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml(ret)
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_STRIP" description="Strip a unit" changed="2015-08-13T04:37:13" changer="psethuraman" created="2016-01-07T14:43:19" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction  2] Setting the Detention Fields in Groovy Class 
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 def stripObj = api.getGroovyClassInstance("GvyCmisEventUnitStrip")
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 def acetsStrip = stripObj.checkAcetsStrip(event)
 if(processCmisFeed &amp;&amp; acetsStrip)
 {
    println("----- FRUCTOSE_MTY_MTX &amp; STRIP EVENT STARTS ---------------")
    stripObj.stripUnit(event)
    println("-------  FRUCTOSE_MTY_MTX &amp; STRIP EVENT ENDS  -----------------")
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="CORRECT_DISCHARGE" description="CORRECT_DISCHARGE" changed="2015-08-13T04:37:11" changer="psethuraman" created="2016-01-07T14:43:21" creator="admin">
  <filter />
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_REROUTE" description="Set export booking number to null" changed="2015-08-13T04:37:12" changer="psethuraman" created="2016-01-07T14:43:17" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

            //YB ASSIGN and UNASSIGN
            def unit = event.getEntity()
            api.getGroovyClassInstance("GvyCmisEventSIT").NISBargeAssign(event, unit,api)
println("TEsting unit_reroute error for 2.6 upgrade");
            //Thread Sleep Condition for UI - Show Unit Detail Editor
            def gvyEventUtil = api.getGroovyClassInstance("GvyEventUtil")
            boolean propertyUpdt= gvyEventUtil.holdEventProcessing(event, 'UNIT_PROPERTY_UPDATE', 3)
            println('REROUTE Thread Sleep ::'+propertyUpdt)
            if(propertyUpdt){
            Thread.sleep(3000)
            }

            boolean isActiveUnit = event.entity.unitForeignHostKey != null ? true : false
            println('isActiveUnit ::'+isActiveUnit+"event.entity.unitForeignHostKey ::"+event.entity.unitForeignHostKey)
            if(isActiveUnit){
            def gvyUnitReroute = api.getGroovyClassInstance( "GvyCmisEventUnitReroute");
            gvyUnitReroute.processUnitReroute(unit,event,api)
            }

            // 5/4/2009, SKB, Added YB copy to VESVOY for YB DCM.
            def vesvoy = unit.getFieldValue("unitActiveUfv.ufvIntendedObCv.cvId")
if(vesvoy != null &amp;&amp; "YB".equals( unit.getFieldValue("unitRouting.rtgGroup.grpId"))  &amp;&amp;   vesvoy.toUpperCase().startsWith("YB")  )  unit.unitFlexString10 = vesvoy;
            else {
            // 5/7/2009 SKB, Added check to remove vesvoy on reroute.
            // type must be vessel, it must be a real cv and not generic.
            def type  = unit.getFieldValue("unitActiveUfv.ufvActualObCv.cvCarrierMode");
            def clazz = unit.getFieldValue("unitActiveUfv.ufvActualObCv.carrierVesselClass");
            def generic = unit.getFieldValue("unitActiveUfv.ufvActualObCv.genericCv");

   if( gvyEventUtil.wasFieldChanged(event, 'ufvIntendedObCv' ) &amp;&amp; com.navis.argo.business.atoms.LocTypeEnum.VESSEL.equals(type) &amp;&amp; clazz != null &amp;&amp; !generic) {
            unit.unitFlexString10 = null;
            }
            }

 println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_STUFF" description="Auto stuff DCM entry" changed="2015-08-13T04:37:12" changer="psethuraman" created="2016-01-07T14:43:18" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")


def unit = event.getEntity();
def commodityId=unit.getFieldValue("unitGoods.gdsCommodity.cmdyId")
def commodity = commodityId != null ?commodityId : '' 


try{
  //REMOVED Filter and Added This Check for Commodity = AUTO
  if(commodity.equals('AUTO'))
 {
    com.navis.argo.ContextHelper.setThreadExternalUser(event.event.evntAppliedBy);
    def hazardItem = unit.getUnitGoods().attachHazard("9", "3166"); 
    def eqType = event.getProperty( "EquipmentType");
    def cSize = eqType.substring( 1, 3);
    hazardItem.setHzrdiPackageType("AUTO");

    if ( eqType.substring(0,2) == "A4") {
         hazardItem.setHzrdiQuantity( new Long("4"));
    } else if ( eqType.substring(1, 2) == "4") {
        hazardItem.setHzrdiQuantity( new Long("2"));
    } else {
       hazardItem.setHzrdiQuantity( new Long("1"));
    }
    hazardItem.setHzrdiEmergencyTelephone( "1(800)424-9300");
    hazardItem.setHzrdiProperName( "VEHICLE, FLAMMABLE LIQUID POWERED");
    hazardItem.setHzrdiERGNumber( "128");
    hazardItem.setHzrdiWeight(unit.getFieldValue("unitGoodsAndCtrWtKg"));
}//Commodity AUTO check Ends
}catch(Exception e){
    e.printStackTrace()
}


 // Set Avail Date
 //def unit = event.getEntity()
 def availLookup = api.getGroovyClassInstance("GvyAvailDate");
 boolean update =  availLookup.setAvailDate(unit, event);


//1] Create Cmis Feed for Msg from Acets &amp; UI Transaction

 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 println("EVNT_STUFF ::Avail Date:"+update+"   processCmisFeed::"+processCmisFeed)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
    def unitDtl = unitDetails.doIt(event)
   
    //Stuff specific Changes
    def gvyStuff = api.getGroovyClassInstance("GvyEventSpecificFldValue")
    def unitStuffXml = gvyStuff.getEventUnitStuff(unitDtl,commodity,unit,event)

    //Detention Msg Check
    if(update){
        def gvyDentObj = api.getGroovyClassInstance("GvyCmisDetentionMsgProcess"); 
        gvyDentObj.detentionProcess(unitStuffXml,event,api)
    }

   boolean blockForMultipleStuff = gvyUtilObj.holdEventProcessing(event, 'UNIT_STUFF', 2)
  if(!blockForMultipleStuff){     api.sendXml(unitStuffXml); }
}

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_HAZARDS_INSERT" changed="2015-08-13T04:37:12" changer="psethuraman" created="2016-01-07T14:43:19" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

//04/12/11 - Workaround for UN/NA on Haz Gate Ticket
def u = event.getEntity()
def hazards = u.getUnitGoods() != null ? u.getUnitGoods().getGdsHazards() : null
def hazardsList = hazards != null ? hazards.hzrdItems : null
for(aHazItem in hazardsList){
  if(aHazItem.getHzrdiMoveMethod() != aHazItem.hzrdiNbrType.key){aHazItem.setHzrdiMoveMethod(aHazItem.hzrdiNbrType.key)}
}

def gvyHazObj = api.getGroovyClassInstance("GvyCmisMostHazardousItem")
def isMostHaz = gvyHazObj.isMostHazardousItem(event)

 // Create Cmis Feed for Msg from Acets &amp;amp; UI Transaction
 def gvyEventUtil = api.getGroovyClassInstance("GvyEventUtil") 
 def processAcetsMsg = gvyEventUtil.acetsMesssageFilter(event) 
 boolean processCmisFeed  = gvyEventUtil.verfiyCmisFeedProcessing(event)
 if(processCmisFeed &amp;&amp;  isMostHaz &amp;&amp; !processAcetsMsg)
 {
    Thread.sleep(3000)
    //Check For Not Processing HAZ_INSERT on INGATE
    boolean blockHazForIngate= gvyEventUtil.holdEventProcessing(event, 'UNIT_IN_GATE', 15)
    if(!blockHazForIngate)
   {
      // N4 TO CMIS data processing 
      def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
      def xmlStr =  gvyEvntProcessor.processFieldChngCmisFeed(event,api)
      gvyHazObj.processMostHazItem(xmlStr, gvyEventUtil, api, event)

   }//Haz Block Ends
 }

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="YB_ASSIGN" description="overweight Alert YB assign weight &gt; 55000 email" sent-count="1707" changed="2014-07-29T10:29:47" changer="kmikami" created="2016-01-07T14:43:41" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="GT" metafield="unitGoodsAndCtrWtKg" value="24947.58035" ui-value="55000 lb" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>&amp;UnitNbr YB Assigned at &amp;TIME for &amp;Destination is Overweight. Exceeds weight limitation of 55,000 lb.</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="BKG" event-type="TEST_APPY_CHASSIS_CHECKDIGIT" description="Replace chassis check digit with X - if Proper chassis name" changed="2016-02-03T11:55:12" changer="psethuraman" created="2016-02-01T15:27:53" creator="psethuraman">
  <filter />
  <message-template>println ("Inside the chassis update: start");
        java.util.List&lt;com.navis.argo.business.reference.Accessory&gt; chsList = com.navis.framework.persistence.HibernateApi.getInstance()
                .findEntitiesByDomainQuery(com.navis.framework.portal.QueryUtils.createDomainQuery("Accessory")
                        .addDqPredicate(com.navis.framework.portal.query.PredicateFactory.ne(com.navis.argo.ArgoRefField.EQ_ID_CHECK_DIGIT, "X")));
        println ("chassis list size : "+chsList.size());
        for (com.navis.argo.business.reference.Accessory chs : chsList) {
            if (!chs.getEqIdFull().endsWith("X") &amp;&amp; chs.getEqIdNbrOnly() != null
                    &amp;&amp; chs.getEqIdFull().length() == 11 &amp;&amp; chs.getEqIdNbrOnly().length() == 7) {
                println ("chassis id before : "+chs.getEqIdFull());
                try {
                    println("chassis id no check digit : " + chs.getEqIdNoCheckDigit());
                    String chsNewNbr = chs.getEqIdFull().substring(0, chs.getEqIdFull().length() - 1) + "X";
                    println("chassis id new name : " + chsNewNbr);
                    java.util.List&lt;com.navis.argo.business.reference.Accessory&gt; chsNewList = com.navis.framework.persistence.HibernateApi.getInstance()
                            .findEntitiesByDomainQuery(com.navis.framework.portal.QueryUtils.createDomainQuery("Accessory")
                                    .addDqPredicate(com.navis.framework.portal.query.PredicateFactory.eq(com.navis.argo.ArgoRefField.EQ_ID_FULL, chsNewNbr)));
                    println ("chassis new list size : "+chsNewList.size());
                    if (chsNewList.isEmpty() || chsNewList.size() == 0) {
                        chs.setFieldValue(com.navis.argo.ArgoRefField.EQ_ID_FULL, chs.getEqIdFull().substring(0, chs.getEqIdFull().length() - 1) + "X");
                    }
                }catch (Exception e) {
                    println("ERROR : CHASSIS CD UDPATE : "+chs.getEqIdFull());
                    println(e.getMessage());
                    break;
                }
                println ("chassis id after : "+chs.getEqIdFull());
            }
        }
        println ("Inside the chassis update: end");</message-template>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UNIT_ROLL" description="This executes when unit roll happens" changed="2016-07-19T18:05:33" changer="gbabu" created="2016-06-07T01:21:08" creator="gbabu" code-extension-name="MatsonUnitSetVGMVerified">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="NE" metafield="unitLineOperator" value="^MAE/LINEOP" ui-value="MAE" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="NE" metafield="unitLineOperator" value="^NYK/LINEOP" ui-value="NYK" order="1" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UNIT_CREATE" description="update POL when ingate empty container" created="2016-08-23T15:08:44" creator="vnatesan" code-extension-name="MatUpdateUnitPOL">
  <filter />
</notice-request>
<notice-request action="GROOVY" business-entity="VV" event-type="AUDIT_LOAD_COMPLETE" description="Audit load complete" changed="2015-08-13T04:37:09" changer="psethuraman" created="2016-01-07T14:43:09" creator="admin">
  <filter />
  <message-template>//Processes to run when audit discharge is complete
//def auditComplete = api.getGroovyClassInstance("GvyAuditDischargeComplete");

//auditComplete.processClientDischarge(event,"LOAD")       //A1 - client load report
//auditComplete.processLastDischCntrRpt(event,"LOAD")    //A2 - last load report
//auditComplete.discAuditConfirmationEmail(event,"LOAD") //A3 - email confirmation


//******TESTING - Acct Audit Discharge Report******
try{
println ("AUDIT_LOAD_COMPLETE Start::")
def auditCompleteTest = api.getGroovyClassInstance("GvyAuditDischargeCompleteTestUnits");
auditCompleteTest.discAuditConfirmationEmail(event,"LOAD");
} catch (Exception e){

println ("ERROR_IN_AUDIT_LOAD_COMPLETE_TEST_UNIT::"+e)
}</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="PREMOUNT_REQUEST" description="PREMOUNT_REQUEST" changed="2015-08-13T04:37:09" changer="psethuraman" created="2016-01-07T14:43:10" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="AG_RELEASE" description="AG_RELEASE" changed="2015-08-13T04:37:08" changer="psethuraman" created="2016-01-07T14:43:12" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

 // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 boolean processAcetsMsg = gvyUtilObj.acetsMesssageFilter(event)
 if(processCmisFeed &amp;&amp; !processAcetsMsg)
 {
   // N4 TO CMIS data processing 
   def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
   gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }

 //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 if(reportProcessing)
{
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml( ret);
}

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="CAR_HOLD" description="CAR_HOLD" changed="2015-08-13T04:37:11" changer="psethuraman" created="2016-01-07T14:43:14" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
  
 // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 { 
     // N4 TO CMIS data processing 
     def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
     gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }

 //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 if(reportProcessing)
{
   def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
   def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
def assignContextFcyGvy = api.getGroovyClassInstance("AssignFaciltyToContextHelper"); 
  assignContextFcyGvy.setFacility(event, ret); 
//api.sendXml( ret);
 }

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="DOC_HOLD" description="DOC_HOLD" changed="2015-08-13T04:37:13" changer="psethuraman" created="2016-01-07T14:43:15" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }


//Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 def gvyCrsUtil = api.getGroovyClassInstance("GvyCmisCargoStatusUtil")
 boolean isNISPort =  gvyCrsUtil.nisPortCheck(event,api)
 if(reportProcessing &amp;&amp; isNISPort)
{
  //Cargo Status Report
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml( ret);
 }

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_YARD_SHIFT" description="UNIT_YARD_SHIFT" changed="2015-08-13T04:37:11" changer="psethuraman" created="2016-01-07T14:43:16" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
    def unitDtl = unitDetails.doIt(event)
    api.sendXml(unitDtl);
  }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="RM_HOLD" description="RM_HOLD" changed="2015-08-13T04:37:12" changer="psethuraman" created="2016-01-07T14:43:18" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }

 //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 def gvyCrsUtil = api.getGroovyClassInstance("GvyCmisCargoStatusUtil")
 boolean isNISPort =  gvyCrsUtil.nisPortCheck(event,api)
 if(reportProcessing &amp;&amp; isNISPort)
{
  //Cargo Status Report
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml( ret);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="HP_HOLD" description="HP_HOLD" changed="2015-08-13T04:37:10" changer="psethuraman" created="2016-01-07T14:43:20" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
try
{
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 println('HP_processCmisFeed ::'+processCmisFeed)
 if(processCmisFeed)
 {
   // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }

 //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 println('HP_reportProcessing ::'+reportProcessing)
 if(reportProcessing)
{
   def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
   def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
   api.sendXml( ret);
 }
}catch(Exception e){
    e.printStackTrace()
}

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="XT_HOLD" description="XT_HOLD" changed="2015-08-13T04:37:15" changer="psethuraman" created="2016-01-07T14:43:24" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 } 

//Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 def gvyCrsUtil = api.getGroovyClassInstance("GvyCmisCargoStatusUtil")
 boolean isNISPort =  gvyCrsUtil.nisPortCheck(event,api)
 if(reportProcessing &amp;&amp; isNISPort)
{
  //Cargo Status Report
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml( ret);
 }

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_RENUMBER" description="rectify the unit number in N4" changed="2015-08-13T04:37:17" changer="psethuraman" created="2016-01-07T14:43:27" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
def unit = event.getEntity() 
if(unit.unitForeignHostKey != null) {
   def unitUpdate = api.getGroovyClassInstance("GvyUnitUpdate");
   unitUpdate.setForeignKey(unit);
}
/*
   // Create Cmis Feed for Msg from Acets &amp; UI Transaction
   def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
   boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
   if(processCmisFeed)
   {
      def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
      def unitDtl = unitDetails.doIt(event)
      def gvyUpdtNbrObj = api.getGroovyClassInstance("GvyCmisEventUnitRenumber");
      gvyUpdtNbrObj.processRenumber(event)
   }
*/
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_SHIFT_ON_CARRIER" description="UNIT_SHIFT_ON_CARRIER" changed="2015-08-13T04:37:18" changer="psethuraman" created="2016-01-07T14:43:29" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
//TT#12587 - To Post Outgate msg
def unit = event.getEntity();
def lkpLocType=unit.getFieldValue("unitActiveUfv.ufvLastKnownPosition.posLocType").getKey()
if(lkpLocType.equals('TRUCK')){
    event.postNewEvent( "UNIT_DELIVER", "Created by Unit Shift on carrier");
    return;
} 

 /* Set Deck type */
 def lookup = api.getGroovyClassInstance("GvyVesselLookup");
 lookup.setDeckPositionType(unit);

 /* Create Cmis Feed for Msg from Acets &amp; UI Transaction  */
  def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
  boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)

  if(processCmisFeed)
  {
      //Check To Create Acets Msg Action=RHN and post msg
      def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
      def unitAcetsMsg = gvyEvntProcessor.processFieldChngCmisFeed(event,api)
      //def unit = event.getEntity()
      def acetsObj = api.getGroovyClassInstance("GvyCmisMessagesForAcets")
      acetsObj.unitPositionCorrection(unitAcetsMsg, unit, api,event,gvyUtilObj)
      //post Msg with Action=EDT 
      def unitDtl = gvyEvntProcessor.processFieldChngCmisFeed(event,api)
      api.sendXml(unitDtl);
  }//if Ends for ProcessCmisFeed
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_REPAIRED" description="UNIT_REPAIRED" changed="2015-08-13T04:37:19" changer="psethuraman" created="2016-01-07T14:43:30" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
   def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
   def unitDtl = unitDetails.doIt(event)
   api.sendXml(unitDtl);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="CAR_RELEASE" description="CAR_RELEASE" changed="2015-08-13T04:37:10" changer="psethuraman" created="2016-01-07T14:43:20" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
 
 // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }

 //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 if(reportProcessing)
{
   def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
   def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
   api.sendXml(ret)
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EQ" event-type="SHOP_HOLD" description="SHOP_HOLD" changed="2015-08-13T04:37:16" changer="psethuraman" created="2016-01-07T14:43:21" creator="admin">
  <filter />
  <message-template>/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
   def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
   gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }


def gvyEvntUpd =api.getGroovyClassInstance("GvyUpdateUnitRemark");
gvyEvntUpd.execute(event,api);</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="YB_ASSIGN" description="YB_ASSIGN" changed="2015-08-13T04:37:14" changer="psethuraman" created="2016-01-07T14:43:23" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}

api.getGroovyClassInstance("GvyCmisEventSIT").setYbDrayStaus(unit)

// 5/4/2009, SKB, Added YB copy to VESVOY for YB DCM.
def vesvoy = unit.getFieldValue("unitActiveUfv.ufvIntendedObCv.cvId");
if(vesvoy != null &amp;&amp; "YB".equals( unit.getFieldValue("unitRouting.rtgGroup.grpId"))  &amp;&amp;   vesvoy.toUpperCase().startsWith("YB")  )  unit.unitFlexString10 = vesvoy;

/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
   def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
   def unitDtl = unitDetails.doIt(event)
   def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil");  
   def intCarrierId = unit.getFieldValue("unitActiveUfv.ufvIntendedObCv.cvId")
    unitDtl = gvyCmisUtil.eventSpecificFieldValue(unitDtl,"ybBarge=",intCarrierId)
    unitDtl = gvyCmisUtil.eventSpecificFieldValue(unitDtl,"flex02=",intCarrierId)
   gvyCmisUtil.postMsgForAction(unitDtl,api,"PDU")
 }

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_SNX_UPDATE" description="UNIT_SNX_UPDATE" changed="2015-08-13T04:37:15" changer="psethuraman" created="2016-01-07T14:43:24" creator="admin">
  <filter />
  <message-template>//1. Copy Owner Code
def gvyEquiOwner = api.getGroovyClassInstance("GvyXpsEquipmentOwner") 
gvyEquiOwner.setEquipmentOwner(event)

//2. Depart and Renumber NLT units
def unit = event.getEntity();
def note = event.event.evntNote;
def renum = api.getGroovyClassInstance("GvyRenumberUnit");
renum.nltDepartAndRenumber(unit,note);

//3. Release Holds
def snxProc = api.getGroovyClassInstance("GvySnxUpdateProcessor"); 
snxProc.releaseHoldsPermissions(unit,note) 

//4. Set Avail Date 
boolean update = false;
println("--snx---skip="+(note.contains("NewVes") ? true : false))
if(!note.contains("NewVes")){
  def availLookup = api.getGroovyClassInstance("GvyAvailDate");
  update = availLookup.setAvailDate(unit, event);
}

//5. Supplemental unit process action items
if(note!= null &amp;&amp; (note.contains("Supplemental") || note.contains("NewVes") || note.contains("NIS Load"))){
  snxProc = snxProc != null ? snxProc : api.getGroovyClassInstance("GvySnxUpdateProcessor");
  snxProc.procBatchExecution(api,event,unit,update)
}

 //6. Set Deck position.
 def lookup = api.getGroovyClassInstance("GvyVesselLookup");
 lookup.setDeckPositionType(unit);

 //7. Check for SIT assign
 // Added 6/29/2009
 def cmdy =     unit.getFieldValue("unitGoods.gdsCommodity.cmdyId");
 if("SIT".equals(cmdy)) {
    event.postNewEvent("SIT_ASSIGN", "SNX SIT_ASSIGN");
 }

//8. Cmis Data Refresh on all units
if(note!= null &amp;&amp; note.contains("NIS Load")){
  api.getGroovyClassInstance("GvySnxUpdateProcessor").procCmisDataRefresh(api,event,unit);
}

//9. Acets Message Processing
String msg1 = "NewVes Completed";  String msg2 = "NIS Load Transaction Completed";
String msg3 = "Supplemental Data Completed"
if(note!= null &amp;&amp; (note.contains(msg1) || note.contains(msg2) || note.contains(msg3))){
  def aibcarrierId=unit.getFieldValue("unitActiveUfv.ufvActualIbCv.cvId")
   if(aibcarrierId != null &amp;&amp; aibcarrierId.equals('GEN_TRUCK')){
             aibcarrierId= unit.getFieldValue("unitDeclaredIbCv.cvId");
   }
 if(note.contains(msg1) || note.contains(msg2)){
  api.getGroovyClassInstance("GvySnxUpdateProcessor").refreshUnitsOnVessel(unit)
 }else if(note.contains(msg3)){
  api.getGroovyClassInstance("GvySnxUpdateProcessor").refreshSuppUnits()
 }
  api.sendXml("&lt;GroovyNotice  snx-update-note=\""+note+"\"  vesvoy=\""+aibcarrierId+"\" /&gt;")
}</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="CARGO_EDIT" description="Cargo Edit for PHX" changed="2015-08-13T04:37:17" changer="psethuraman" created="2016-01-07T14:43:27" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*
 * 1] Set Avail &amp; Detention date
 * 2] Sends the cargo Status
 * 3]  Ingate &amp; Acets Filter
 * 4] Creates Cmis Feed (Detn &amp; Fld chng) 
 * 5] Added Thread Sleep Condition for UI - Show unit Detail Editor message Ordering
*/
def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
   unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}

def gvyEventUtil = api.getGroovyClassInstance("GvyEventUtil")  

boolean isActiveUnit = event.entity.unitForeignHostKey != null ? true : false
if(isActiveUnit &amp;&amp; !event.event.evntAppliedBy.contains('notice')){
    def gvyCargoEdit = api.getGroovyClassInstance("GvyCmisUnitCargoEdit"); 
    gvyCargoEdit.autoRollPod(event,unit,api,gvyEventUtil);               

    def gvyEvntcargoEdit = api.getGroovyClassInstance("GvyCmisEventUnitCargoEdit")  
    gvyEvntcargoEdit.processUnitPropertyUpdate(event,api,gvyCargoEdit) 
 } 

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="ASSIGN VEHICLE" changed="2015-08-13T04:37:10" changer="psethuraman" created="2016-01-07T14:43:11" creator="admin">
  <filter />
  <message-template>//05/31/10
def gvyproc = api.getGroovyClassInstance("KulanaProcessor");
gvyproc.process(event)</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="BDB" description="Update Avail Dates (ACETS-BDB)" changed="2015-08-13T04:37:08" changer="psethuraman" created="2016-01-07T14:43:12" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

 def unit = event.getEntity()
 def lookup = api.getGroovyClassInstance("GvyAvailDate");
 boolean update =  lookup.setAvailDate(unit, event);
 
 // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
    def unitDtl = unitDetails.doIt(event)

    //Detention Msg Check
    if(update){
        def gvyDentObj = api.getGroovyClassInstance("GvyCmisDetentionMsgProcess"); 
        gvyDentObj.detentionProcess(unitDtl,event,api)
    }

    def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil")  
    gvyCmisUtil.postMsgForAction(unitDtl,api,"ABDB")
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="NTFY:VESSEL_REMINDER" email-party="unitRouting.rtgTruckingCompany" description="Vessel reminder notice to trucker" sent-count="4" changed="2015-08-13T04:37:09" changer="psethuraman" created="2016-01-07T14:43:09" creator="admin">
  <filter />
  <message-template>Date : &amp;TIME

                               MATSON TERMINALS - CONTAINER YARD

From: &amp;UfvFlexString03
Subject: VESSEL REMINDER - &amp;UfvFlexString04
         

Phone: (808) 848-1321   Fax: (808) 842-5490
---------------------------------------------------------------------------------------------
CONTAINER: &amp;UnitNbr
 LOCATION: &amp;PositionFull
   VESVOY: &amp;InboundCarrierId
  SHIPPER: &amp;GoodsShipperName
  BOOKING: &amp;GoodsBlNbr
    HOLDS: &amp;UnitImpediments

  STORAGE DATE: &amp;UfvFlexDate03
DETENTION DATE: &amp;LastFreeDay

Due Dates:
     Storage Date - Container will incur daily fees unless picked up by date due
   Detention Date - Container will incur daily fees unless returned by date due</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="NTFY:CONTAINER_DIVERTED" email-party="unitRouting.rtgTruckingCompany" description="Container diverted notice to trucker" sent-count="9" changed="2015-08-13T04:37:11" changer="psethuraman" created="2016-01-07T14:43:14" creator="admin">
  <filter />
  <message-template>Date : &amp;TIME

                               MATSON TERMINALS - CONTAINER YARD

From: &amp;UfvFlexString03
Subject: CONTAINER DIVERTED - &amp;UfvFlexString04
         

Phone: (808) 848-1321   Fax: (808) 842-5490
---------------------------------------------------------------------------------------------
CONTAINER: &amp;UnitNbr
 LOCATION: &amp;PositionFull
   VESVOY: &amp;InboundCarrierId
  SHIPPER: &amp;GoodsShipperName
  BOOKING: &amp;GoodsBlNbr
    HOLDS: &amp;UnitImpediments</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="VV" event-type="REPORT_MANIFEST_NIS" description="NIS Manifest Report" changed="2015-08-13T04:37:12" changer="psethuraman" created="2016-01-07T14:43:17" creator="admin">
  <filter />
  <message-template>def manifestRpt = api.getGroovyClassInstance("GvyReportManifestNis");
manifestRpt.processManifest(event)</message-template>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UNIT_ROLL" description="Set bl number to export booking number" changed="2016-08-05T10:42:41" changer="vnatesan" created="2016-01-07T14:43:18" creator="admin" code-extension-name="MATUnitRollBookingUpdateExt">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="NOT_NULL" metafield="unitActiveUfv.ufvFacility" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="CC_RELEASE" description="CC_RELEASE" changed="2015-08-13T04:37:10" changer="psethuraman" created="2016-01-07T14:43:20" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
  
  // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }

  //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 if(reportProcessing)
{
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml(ret)
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="SIT_UNASSIGN" description="SIT_UNASSIGN" changed="2015-08-13T04:37:16" changer="psethuraman" created="2016-01-07T14:43:21" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
  def gvyEventUtil = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyEventUtil.verfiyCmisFeedProcessing(event)
 def processAcetsMsg = gvyEventUtil.acetsMesssageFilter(event)
 if(processCmisFeed &amp;&amp; !processAcetsMsg)
 {
   // N4 TO CMIS data processing 
   def gvyCargoEdit = api.getGroovyClassInstance("GvyCmisUnitCargoEdit"); 
   gvyCargoEdit.autoRollPod(event,unit,api,gvyEventUtil);               

   def gvyEvntcargoEdit = api.getGroovyClassInstance("GvyCmisEventUnitCargoEdit")  
   gvyEvntcargoEdit.processUnitPropertyUpdate(event,api,gvyCargoEdit) 
 }

// If unit is inbound, cancel_preadvise
def ufv = unit.unitActiveUfv;

// Added advise back into yard for active ufv.

if(ufv!= null &amp;&amp; (ufv.ufvTransitState.equals(com.navis.inventory.business.atoms.UfvTransitStateEnum.S20_INBOUND) || ufv.ufvTransitState.equals(com.navis.inventory.business.atoms.UfvTransitStateEnum.S10_ADVISED)) 
&amp;&amp; ufv.ufvActualIbCv.locType.equals(com.navis.argo.business.atoms.LocTypeEnum.TRUCK) ) {
   println("CANCEL_PREADVISE on SIT_UNASSIGN "+unit.unitId);
   def cancelEvent = new GroovyEvent( null,unit);
   cancelEvent.postNewEvent( "CANCEL PREADVISE","SIT_UNASSIGN"); 
   
}
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_OUT_GATE" description="Flip Advised to Inbound" changed="2015-08-13T04:37:14" changer="psethuraman" created="2016-01-07T14:43:23" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

api.log("EVENT_PROPS: " + event.event.properties)
def OutGateObj = api.getGroovyClassInstance("GvyCmisEventUnitOutGate")
OutGateObj.setYbForSitUnit(event)
OutGateObj.departYBTransferUnit(event)
OutGateObj.processOutGate(event,api)


println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="CG_INSP_HOLD" description="CG_INSP_HOLD" changed="2015-08-13T04:37:10" changer="psethuraman" created="2016-01-07T14:43:20" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
 
 // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }

 //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 def gvyCrsUtil = api.getGroovyClassInstance("GvyCmisCargoStatusUtil")
 boolean isNISPort =  gvyCrsUtil.nisPortCheck(event,api)
 if(reportProcessing &amp;&amp; isNISPort)
{
  //Cargo Status Report
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml( ret);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="TI_HOLD" description="TI_HOLD" changed="2015-08-13T04:37:16" changer="psethuraman" created="2016-01-07T14:43:22" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }

  //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 def gvyCrsUtil = api.getGroovyClassInstance("GvyCmisCargoStatusUtil")
 boolean isNISPort =  gvyCrsUtil.nisPortCheck(event,api)
 if(reportProcessing &amp;&amp; isNISPort)
{
  //Cargo Status Report
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml( ret);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="RM_RELEASE" description="RM_RELEASE" changed="2015-08-13T04:37:15" changer="psethuraman" created="2016-01-07T14:43:25" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }

//Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 def gvyCrsUtil = api.getGroovyClassInstance("GvyCmisCargoStatusUtil")
 boolean isNISPort =  gvyCrsUtil.nisPortCheck(event,api)
 if(reportProcessing &amp;&amp; isNISPort)
{
  //Cargo Status Report
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml(ret);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="SHIPPER_REHANDLE_CANCEL" description="SHIPPER_REHANDLE_CANCEL" changed="2015-08-13T04:37:15" changer="psethuraman" created="2016-01-07T14:43:26" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
   // N4 TO CMIS data processing 
   def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
   gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="RESPOT" description="message for RESPOT" created="2016-01-07T14:43:28" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
  
 // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 { 
     // N4 TO CMIS data processing 
     def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
     gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EQ" event-type="DVI_RELEASE" description="Chassis DVIR Release" changed="2015-08-13T04:37:18" changer="psethuraman" created="2016-01-07T14:43:29" creator="admin">
  <filter />
  <message-template>//06/28/10 - Unset value on Chassis
 def equipmentState = event.getEntity()
 def equipment = equipmentState.getEqsEquipment();
 def chassis = com.navis.argo.business.reference.Chassis.findChassis(equipment.eqIdFull);
 chassis.setEqLicenseNbr(null)

 // Create Cmis Feed for Msg from Acets &amp; UI Transaction
  def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
  boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
  // N4 TO CMIS data processing 
  def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
  def unitDtl =  gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil") 

  gvyCmisUtil.postMsgForAction(unitDtl,api,"ALT")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_PREADVISE" description="UNIT_PREADVISE" changed="2015-08-13T04:37:19" changer="psethuraman" created="2016-01-07T14:43:30" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*
 * Setting BookingNumber to BL_NBR 
*/
def unit = event.getEntity()
def expGateBkgNbr = unit.getFieldValue("unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr")
   if(expGateBkgNbr != null){
          unit.setFieldValue("unitGoods.gdsBlNbr",expGateBkgNbr)
    }

  //Pass Cmis Feed only for Export PreAdvise Full Container
 def freightkind = unit.getFieldValue("unitFreightKind")
 freightkind = freightkind != null ? freightkind.getKey() : ''        
 println('Freight Kind ::'+freightkind )
 if(freightkind.equals('FCL'))
{
   /*  
     1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
   */
   def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
   boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
   if(processCmisFeed)
   {
      def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
      def unitDtl = unitDetails.doIt(event)
      def gvyAdvObj = api.getGroovyClassInstance("GvyCmisEventPreAdvise");
      def gvyXmlStr= gvyAdvObj.processPreAdvise(unitDtl,event,api)
      //api.sendXml(gvyXmlStr)
   }
} //Freight Kind Check
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="NTFY:HP_CANCELLED" changed="2015-08-13T04:37:19" changer="psethuraman" created="2016-01-07T14:43:31" creator="admin">
  <filter />
  <message-template>def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_DRAY_IN" description="IGT DRAY IN CNTR EVNT" changed="2015-08-13T04:37:18" changer="psethuraman" created="2016-01-07T14:43:29" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

 // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def unit = event.getEntity()
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 boolean drayStatusChanged = gvyUtilObj.wasFieldChanged(event,"unitDrayStatus");
 boolean isSAT = "SAT".equals(unit.getFieldValue("unitGoods.gdsCommodity.cmdyId"));
 def cmdyId = unit.getFieldValue("unitGoods.gdsCommodity.cmdyId");
 println("processCmisFeed="+processCmisFeed+" drayStatusChanged="+drayStatusChanged+" isSAT="+isSAT+":"+cmdyId);

 if(processCmisFeed &amp;&amp; (gvyUtilObj.wasFieldChanged(event, "gdsDestination") || gvyUtilObj.wasFieldChanged(event, "rtgPOD1") || (drayStatusChanged &amp;&amp; isSAT)))
 {
   Thread.sleep(4000);
   // N4 TO CMIS data processing 
   def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
   gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }
 else if(processCmisFeed &amp;&amp; drayStatusChanged) {
 	println("*****TESTING drayStatusChanged******")
 	Thread.sleep(4000);
   // N4 TO CMIS data processing 
   def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
   gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }
println("Calling MatReportTempDiscrepancy");
api.getGroovyClassInstance("MatReportTempDiscrepancy").getEventChanges(event);
try{
api.getGroovyClassInstance("MatCheckHazard").execute(event.entity.unitId);
}catch(Exception e){
println("Exception ::"+e)
}
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="NTFY:VESSEL_REMINDER" changed="2015-08-13T04:37:20" changer="psethuraman" created="2016-01-07T14:43:32" creator="admin">
  <filter />
  <message-template>def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="ITN_HOLD" description="ITN Unit HOLD" changed="2015-08-13T04:37:19" changer="psethuraman" created="2016-01-07T14:43:33" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

// Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 boolean processAcetsMsg = gvyUtilObj.acetsMesssageFilter(event)
  if(processCmisFeed &amp;&amp; !processAcetsMsg)
 {
     def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
     def unitDtl = gvyEvntProcessor.processFieldChngCmisFeed(event,api)
     gvyCmisUtil.postMsgForAction(unitDtl,api,"ALT")
  }
 
 //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 if(reportProcessing)
{
  //Cargo Status Report
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml(ret)
 }

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="PTL_RELEASE_TO" description="PTL_RELEASE_TO" changed="2015-08-13T04:37:16" changer="psethuraman" created="2016-01-07T14:43:34" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

// Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
   // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EDISESS" event-type="EDI_POST" description="EDI Import Discrepancies Report" changed="2014-10-03T16:35:44" changer="riyer" created="2016-01-07T14:43:37" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="edisessDirection" value="R" ui-value="Receive" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="IN" metafield="edisessName" value=":HLC_BAPLIE|MAE_BAPLIE|RECEIVE_ANL_BAPLIE|STIFIN|HSD_BAPLIE|" ui-value="[HLC_BAPLIE,MAE_BAPLIE,...]" order="1" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>println("Start of  MatReportImportDiscrepancies")

def ediSession = event.getEntity();
def sessionName = ediSession.getFieldValue("EdisessName")
println("END of MatReportImportDiscrepancies session name is "+sessionName)

println("Start of MatGetStowplanVesVoy");
String vesVoy = api.getGroovyClassInstance("MatGetStowplanTrankey").execute(event,api)
println("End of MatGetStowplanVesVoy");

//println("Generating  Import Discrepancies report")

//def reportRunner= api.getGroovyClassInstance("MatReportImportDiscrepancies");
//HashMap parameters = new HashMap();
//reportRunner.generateReport(parameters,vesVoy);</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Received 24' container for Far East discharge port notice" sent-count="4" changed="2013-05-17T08:46:58" changer="-notices-" created="2016-01-07T14:43:37" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="unitCategory" value="EXPRT" ui-value="Export" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="MATCHES" metafield="unitPrimaryUe.ueEquipment.eqEquipType.eqtypId" value="?24*" ui-value="?24*" order="1" negated="false" parm-type="NO_PARM" />
      <predicate verb="OR" order="2" negated="false" parm-type="NO_PARM">
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^GUM" ui-value="GUM (Guam)" order="0" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KMI" ui-value="KMI (Kosrae (ex Kusaie))" order="1" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PNP" ui-value="PNP (Pohnpei (ex Ponape))" order="2" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PUX" ui-value="PUX (Koror, Palau)" order="3" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^RTA" ui-value="RTA (Rota)" order="4" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^SPN" ui-value="SPN (Saipan)" order="5" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^TIN" ui-value="TIN (Tinian)" order="6" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^TMGU" ui-value="TMGU (Guam)" order="7" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^UUK" ui-value="UUK (Chuck)" order="8" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^YAP" ui-value="YAP (Yap)" order="9" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^HAK" ui-value="HAK (Hakata/Fukuoka)" order="10" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KAO" ui-value="KAO (Kaohsiung)" order="11" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KEEL" ui-value="KEEL (Keelung (Chilung))" order="12" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KOB" ui-value="KOB (Kobe)" order="13" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^MAPH" ui-value="MAPH (Manila)" order="14" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^MOJ" ui-value="MOJ (Moji/Kitakyushu)" order="15" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^NAH" ui-value="NAH (Naha, Okinawa)" order="16" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^NGB" ui-value="NGB (Ningbo)" order="17" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^NGO" ui-value="NGO (Nagoya, Aichi)" order="18" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^OSA" ui-value="OSA (Osaka)" order="19" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PUS" ui-value="PUS (Busan (ex Pusan))" order="20" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^SHA" ui-value="SHA (Shanghai)" order="21" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^TSI" ui-value="TSI (Qingdao)" order="22" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^YOK" ui-value="YOK (Yokohama)" order="23" negated="false" parm-type="NO_PARM" />
      </predicate>
    </predicate>
  </filter>
  <message-template>Received 24' container &amp;UnitNbr for discharge port &amp;POD at &amp;TIME</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="R40H Control Atmosphere to Route to OAK" sent-count="518" changed="2014-10-20T09:38:06" changer="-notices-" created="2016-01-07T14:43:38" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="LE" metafield="unitPrimaryUe.ueEquipment.eqIdNbrOnly" value="551699" ui-value="551699" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="GE" metafield="unitPrimaryUe.ueEquipment.eqIdNbrOnly" value="551500" ui-value="551500" order="1" negated="false" parm-type="NO_PARM" />
      <predicate verb="MATCHES" metafield="unitPrimaryUe.ueEquipment.eqIdPrefix" value="MATU*" ui-value="MATU*" order="2" negated="false" parm-type="NO_PARM" />
      <predicate verb="EQ" metafield="unitFreightKind" value="MTY" ui-value="Empty" order="3" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>CA Reefer &amp;UnitNbr Ingated at &amp;TIME - Route to OAK</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Ingated Stop In Transit container for YB" sent-count="74" changed="2014-09-29T07:41:52" changer="gloque" created="2016-01-07T14:43:40" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="unitGoods.gdsCommodity" value="^SAT" ui-value="SAT (SIT INGATED)" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="EQ" metafield="unitDrayStatus" value="TRANSFER" ui-value="Transfer to other Facility" order="1" negated="false" parm-type="NO_PARM" />
      <predicate verb="EQ" metafield="unitRouting.rtgGroup" value="^YB" ui-value="YB (Containers to move via YB)" order="2" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>Date : &amp;TIME

                               MATSON TERMINALS - CONTAINER YARD

From: Gate
Subject: SIT Container for YB


SIT container &amp;UnitNbr for Young Brothers was ingated on &amp;DateOfLastHandling.</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Received container for Far East discharge port notice" sent-count="22921" changed="2017-04-13T15:16:44" changer="nkrishnan" created="2016-01-07T14:43:42" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="OR" order="0" negated="false" parm-type="NO_PARM">
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^GUM" ui-value="GUM (Guam)" order="0" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KMI" ui-value="KMI (Kosrae (ex Kusaie))" order="1" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PNP" ui-value="PNP (Pohnpei (ex Ponape))" order="2" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PUX" ui-value="PUX (Koror, Palau)" order="3" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^RTA" ui-value="RTA (Rota)" order="4" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^SPN" ui-value="SPN (Saipan)" order="5" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^TIN" ui-value="TIN (Tinian)" order="6" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^TMGU" ui-value="TMGU (Guam)" order="7" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^UUK" ui-value="UUK (Chuck)" order="8" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^YAP" ui-value="YAP (Yap)" order="9" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^HAK" ui-value="HAK (Hakata/Fukuoka)" order="10" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KAO" ui-value="KAO (Kaohsiung)" order="11" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KEEL" ui-value="KEEL (Keelung (Chilung))" order="12" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KOB" ui-value="KOB (Kobe)" order="13" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^MAPH" ui-value="MAPH (Manila)" order="14" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^MOJ" ui-value="MOJ (Moji/Kitakyushu)" order="15" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^NAH" ui-value="NAH (Naha, Okinawa)" order="16" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^NGB" ui-value="NGB (Ningbo)" order="17" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^NGO" ui-value="NGO (Nagoya, Aichi)" order="18" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^OSA" ui-value="OSA (Osaka)" order="19" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PUS" ui-value="PUS (Busan (ex Pusan))" order="20" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^SHA" ui-value="SHA (Shanghai)" order="21" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^TSI" ui-value="TSI (Qingdao)" order="22" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^YOK" ui-value="YOK (Yokohama)" order="23" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^XMN" ui-value="XMN (Xiamen)" order="24" negated="false" parm-type="NO_PARM" />
      </predicate>
    </predicate>
  </filter>
  <message-template>Received MATU container &amp;UnitNbr for discharge port &amp;POD at &amp;TIME</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_RECEIVE" description="Unit Receive for facility Hon" changed="2014-10-23T06:19:46" changer="riyer" created="2016-01-07T14:43:39" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="unitActiveUfv.ufvFacility" value="300862" ui-value="HON" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/* Set Avail Date */
 def unit = event.getEntity()
 def availLookup = api.getGroovyClassInstance("GvyAvailDate");
 boolean update = false
 if(event.event.evntAppliedBy.equals('wo') &amp;&amp; unit.unitActiveUfv.ufvFlexDate02 != null){
  //07/21/10 Do not recompute DAS Dates - Issue Avail Date is falling off
 }else{
   update =   availLookup.setAvailDate(unit, event);
 }
  
 // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 def gvyRecieveObj = null;  def xmlGvyReceive=null; def gvyCmisUtil=null;
 if(processCmisFeed)
 {
     // N4 TO CMIS data processing 
     def equiClass =unit.getFieldValue("unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass")
     def equiClassType = equiClass != null ? equiClass.getKey() : ''
     if(!equiClassType.equals('CHASSIS'))
    {
       def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
       def unitDtl = unitDetails.doIt(event)
    
       gvyRecieveObj = api.getGroovyClassInstance("GvyCmisEventUnitReceive")
      xmlGvyReceive = gvyRecieveObj.processUnitRecieve(unitDtl, unit,api)
   
     // POD = NIS port, and the O/B Intended = GEN_TRUCK, set the O/B Intended = BARGE.
     gvyRecieveObj.setOBCarrierToBarge(unit)
    
      //Detention Msg Check
      if(update){
        def gvyDentObj = api.getGroovyClassInstance("GvyCmisDetentionMsgProcess"); 
        gvyDentObj.detentionProcess(xmlGvyReceive,event,api)
      }     
      
      gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil")    
      def locationTier  = gvyCmisUtil.getFieldValues(xmlGvyReceive, "locationTier=") 
      xmlGvyReceive = api.getGroovyClassInstance("GvyCmisEventSIT").ybSatProc(gvyCmisUtil,unit, xmlGvyReceive)
      // Receive Msg - Gems Dont post YMV for WO 02/02/11
      if(!locationTier.equals('T3') &amp;&amp; !locationTier.equals('T2') ){ 
           gvyCmisUtil.postMsgForAction(xmlGvyReceive,api,'null')
      }
    }
 }

//SET DrayStatus &amp; post PDU for YB-SIT 
api.getGroovyClassInstance("GvyCmisEventSIT").ybSitProc(api, gvyCmisUtil, unit, xmlGvyReceive)


println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Non 687 and 689 reefer series container for MIS port" sent-count="179" changed="2014-09-29T11:29:29" changer="-notices-" created="2016-01-07T14:43:40" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="MATCHES" metafield="unitPrimaryUe.ueEquipment.eqEquipType.eqtypId" value="R*" ui-value="R*" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="EQ" metafield="unitPrimaryUe.ueEquipment.eqIdPrefix" value="MATU" ui-value="MATU" order="1" negated="false" parm-type="NO_PARM" />
      <predicate verb="AND" order="2" negated="true" parm-type="NO_PARM">
        <predicate verb="MATCHES" metafield="unitPrimaryUe.ueEquipment.eqIdNbrOnly" value="687*" ui-value="687*" order="0" negated="false" parm-type="NO_PARM" />
        <predicate verb="MATCHES" metafield="unitPrimaryUe.ueEquipment.eqIdNbrOnly" value="689*" ui-value="689*" order="1" negated="false" parm-type="NO_PARM" />
      </predicate>
      <predicate verb="OR" order="3" negated="false" parm-type="NO_PARM">
        <predicate verb="EQ" metafield="unitGoods.gdsDestination" value="MAJ" ui-value="MAJ" order="0" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitGoods.gdsDestination" value="KWJ" ui-value="KWJ" order="1" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitGoods.gdsDestination" value="EBY" ui-value="EBY" order="2" negated="false" parm-type="NO_PARM" />
      </predicate>
    </predicate>
  </filter>
  <message-template>&amp;UnitNbr Ingated at &amp;TIME for &amp;Destination</message-template>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="BKG" event-type="EQ_ASSIGN_BKG" description="Keep Unit reefer details in sync with booking item requirements" created="2016-01-07T14:53:50" creator="dkannadasan" code-extension-name="MATBookingReeferRequirements">
  <filter />
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="VV" event-type="DISCHARGE AND DEPART UNIT" description="Discharge and Depart Barge units having POD same as Barge facility" created="2016-01-07T14:54:33" creator="dkannadasan" code-extension-name="MATdischargeAndDepartBargeUnits">
  <filter />
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="BKG" event-type="BOOKING_HAZARDS_UPDATE" description="Extension to sync hazard items in Booking with Units attached to it" created="2016-01-07T14:59:02" creator="dkannadasan" code-extension-name="MATSyncBookingHazOntoUnits">
  <filter />
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="DEPART_UNIT_APL_DUT" description="Departing APL Empty Unit" created="2016-01-07T14:59:43" creator="dkannadasan" code-extension-name="MatsonAncVesselDischGNHandler">
  <filter />
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="BKG" event-type="EQ_RECEIVE_BKG" description="Keep Unit reefer details in sync with booking item requirements" created="2016-01-07T15:00:20" creator="dkannadasan" code-extension-name="MATBookingReeferRequirements">
  <filter />
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="BKG" event-type="EQ_UPDATE_BKG" description="Keep Unit reefer details in sync with booking item requirements" created="2016-01-07T15:00:56" creator="dkannadasan" code-extension-name="MATBookingReeferRequirements">
  <filter />
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UNIT_CREATE" description="Notice for Barge Stowplan for Non-Op facility" changed="2016-05-06T14:33:54" changer="psethuraman" created="2016-01-07T15:02:52" creator="dkannadasan" code-extension-name="MATBargeStowplan">
  <filter />
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="VV" event-type="PHASE_VV" description="Create Units in next facility and update Category" created="2016-01-08T11:22:17" creator="dkannadasan" code-extension-name="MATCloneUnitForNextFacilityonVV">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="cvdCv.cvVisitPhase" value="60DEPARTED" ui-value="Departed" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="REPORT_GATE_TRUCKER_TURNTIME" description="Gate TrunTime Report Sorted by Trucker " changed="2015-08-13T04:37:20" changer="psethuraman" created="2016-01-07T14:43:32" creator="admin">
  <filter />
  <message-template>//Gate Turntime Rpt Group By Trucker 
def gvyTvd = api.getGroovyClassInstance("GvyReportTruckerTurnTime")

//Parameters to Enter   *From Date*     *To Date*    *Trucking Cmpy Saperated by Comma*  *CONSIGNEE*
gvyTvd.processLookup("07/13/2009","07/14/2009",  "CCBC,HTC" ,  null)</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="PER_UNASSIGN" description="PER_UNASSIGN" changed="2015-08-13T04:37:19" changer="psethuraman" created="2016-01-07T14:43:33" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
  }

 //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 if(reportProcessing)
{
  // Cargo Status email
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml( ret);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_DISCH_COMPLETE" changed="2017-02-13T23:48:55" changer="kramachandran" created="2016-01-07T14:43:37" creator="admin">
  <filter />
  <message-template>println("//Start Event  ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//") 

//1. When an equipment is rehandled we want to concatenate the text 'R/H:&lt;pol&gt;' to the front of the existing notes
 //Filter for Category=Through
def category = event.getProperty("Category")
category = category.getKey() 
if(category.equals("THRGH")) 
{
  def unit = event.getEntity();
  def notes = unit.getUnitRemark();
  def loadport = event.getProperty("POL");
  def newRemarks = 'R/H:'+loadport+' '+ notes; 
  def newRemarks1 = null;
  if(newRemarks.length()&lt;=255){
  newRemarks1=newRemarks;}
  else{
  newRemarks1=newRemarks.substring(0,255);}// unitRemarks takes only 255 char
  unit.setUnitRemark(newRemarks1);
}
 
 //2. Set Avail Date 
 def unit = event.getEntity()

 //3. Set EquiContainerService if NULL
 def gvyEquiObj = api.getGroovyClassInstance("GvyCmisEquiDetail"); 
 gvyEquiObj.setEqCntrSvr(event)

 //4. Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 boolean msgPosted = false; 

   // N4 TO CMIS data processing 
   def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
   def unitDtl = unitDetails.doIt(event)
   def gvyDischObj = api.getGroovyClassInstance("GvyCmisEventUnitDisch");
   unitDtl= gvyDischObj.passpassDisch(unitDtl,unit,api,event)  

    //SERVICE MSG CHECK
    println("//---- SERVICE MSG STARTS------------------//")
    def gvySrvObj = api.getGroovyClassInstance("GvyCmisSrvMsgProcessor");
    gvySrvObj.processServiceMessage(unitDtl,event,api)
    println("//---- SERVICE MSG ENDS------------------//") 
   
   if(category.equals('TRSHP'))  {
      //Tranship Check from Ship to Ship
      msgPosted = true;
      gvyDischObj.setTranshipValuesforShipToShip(unitDtl,event,api)
   }

   if(!msgPosted){
     api.sendXml(unitDtl);
   }

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_RESERVE" description="Assign BL Dest to Unit, update booking, UCC" changed="2015-12-30T12:25:44" changer="psethuraman" created="2016-01-07T14:43:38" creator="admin">
  <filter />
  <message-template>println("After Unit Added to BL")

def unit = event.getEntity();
println("Updated Unitd is: "+unit)
def unitId = unit.getFieldValue("unitId")

println("Unit Added :::::::: "+unitId);

println("MatUnitUpdateWithBlDetails.updateUnitWithBlDest")
def MatUnitUpdateWithBlDetails= api.getGroovyClassInstance("MatUnitUpdateWithBlDetails");
MatUnitUpdateWithBlDetails.updateUnitWithBlDest(unitId);
MatUnitUpdateWithBlDetails.updateUnitWithBookingShipperAndUCC(unitId);</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Received 24' container for Far East discharge port notice" sent-count="4" changed="2013-05-17T07:46:58" changer="-notices-" created="2016-01-07T14:43:40" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="unitCategory" value="EXPRT" ui-value="Export" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="MATCHES" metafield="unitPrimaryUe.ueEquipment.eqEquipType.eqtypId" value="?24*" ui-value="?24*" order="1" negated="false" parm-type="NO_PARM" />
      <predicate verb="OR" order="2" negated="false" parm-type="NO_PARM">
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^GUM" ui-value="GUM (Guam)" order="0" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KMI" ui-value="KMI (Kosrae (ex Kusaie))" order="1" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PNP" ui-value="PNP (Pohnpei (ex Ponape))" order="2" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PUX" ui-value="PUX (Koror, Palau)" order="3" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^RTA" ui-value="RTA (Rota)" order="4" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^SPN" ui-value="SPN (Saipan)" order="5" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^TIN" ui-value="TIN (Tinian)" order="6" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^TMGU" ui-value="TMGU (Guam)" order="7" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^UUK" ui-value="UUK (Chuck)" order="8" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^YAP" ui-value="YAP (Yap)" order="9" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^HAK" ui-value="HAK (Hakata/Fukuoka)" order="10" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KAO" ui-value="KAO (Kaohsiung)" order="11" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KEEL" ui-value="KEEL (Keelung (Chilung))" order="12" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^KOB" ui-value="KOB (Kobe)" order="13" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^MAPH" ui-value="MAPH (Manila)" order="14" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^MOJ" ui-value="MOJ (Moji/Kitakyushu)" order="15" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^NAH" ui-value="NAH (Naha, Okinawa)" order="16" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^NGB" ui-value="NGB (Ningbo)" order="17" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^NGO" ui-value="NGO (Nagoya, Aichi)" order="18" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^OSA" ui-value="OSA (Osaka)" order="19" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^PUS" ui-value="PUS (Busan (ex Pusan))" order="20" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^SHA" ui-value="SHA (Shanghai)" order="21" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^TSI" ui-value="TSI (Qingdao)" order="22" negated="false" parm-type="NO_PARM" />
        <predicate verb="EQ" metafield="unitRouting.rtgPOD1" value="^YOK" ui-value="YOK (Yokohama)" order="23" negated="false" parm-type="NO_PARM" />
      </predicate>
    </predicate>
  </filter>
  <message-template>Received 24' container &amp;UnitNbr for discharge port &amp;POD at &amp;TIME</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="VV" event-type="UPDATE_VV" description="UPDATE_VV for report" changed="2016-01-07T14:43:43" changer="admin" created="2015-10-05T10:49:52" creator="kramachandran">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="NOT_NULL" metafield="vvdVessel" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>def visit = event.getEntity();
def cls=visit.getCarrierVesselClassType().getKey();
def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil") ;
boolean beginAvailDateChng = gvyUtilObj.wasFieldChanged(event,'vvdTimeBeginReceive');
println("beginAvailDateChng"+beginAvailDateChng);
println("cls"+cls);

if(beginAvailDateChng &amp;&amp; cls != "BARGE"){
def availStorageDate = api.getGroovyClassInstance("MatAvailabilityandStorageDatesReport");
availStorageDate.execute(event,api);
}</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="VV" event-type="UPDATE_VV" description="CMIS event for UPDATE_VV" created="2016-01-08T11:33:05" creator="dkannadasan">
  <filter />
  <message-template>def user = com.navis.argo.ContextHelper.getThreadUserId()
def srv = null;
if(!(user.contains('-jms-') || user.contains('-system-'))){
 def evntVisit = event.getEntity();
 def phase = evntVisit.vvdVisitPhase.getKey()
 srv = evntVisit.cvdService.srvcId;
 evntVisit.setVvdNotes('phase_vv=\''+phase+'\'')
}
def visit = event.getEntity();
def facility = visit.getFieldValue("cvdCv.cvFacility.fcyId")
def cls=visit.getCarrierVesselClassType().getKey();
def nxtFcy=visit.getFieldValue("cvdCv.cvNextFacility.fcyId")
def ves=visit.getFieldValue("cvdCv.cvId")
def nv="Y";
try{
nv="Y";
nv=api.getGroovyClassInstance("MatCheckNvProcess").getNv(ves);
}catch(Exception e){
 println(e);
}
// Update Phase
def note =  visit.vvdNotes;
if(!event.event.evntAppliedBy.contains('notices')){
def phasevv = api.getGroovyClassInstance("GvyVesselLookup").updateVVCheck(visit);
}
/* SetAvailDate*/
boolean update = false;
def beginDate = visit.getFieldValue("cvdCv.cvCvd.cvdTimeFirstAvailability");
def dischargeDate = visit.getFieldValue("vvdTimeBeginReceive");
if(beginDate != null &amp;&amp; !beginDate.equals(dischargeDate)  ) {
     visit.setFieldValue("vvdTimeBeginReceive",beginDate);
     if ((facility == "HON" &amp;&amp; cls == "BARGE")||(nv!="Y")){
        println("Inside IF::"+ves+"::"+cls+"::"+srv+"::"+facility+"::"+nxtFcy+"::"+nv)
     }else{
	println("Inside ELSE::"+ves+"::"+cls+"::"+srv+"::"+facility+"::"+nxtFcy+"::"+nv)
	 def inj = new com.navis.apex.business.model.GroovyInjectionBase();
	 def availLookup = api.getGroovyClassInstance("GvyAvailDate");
	 def unitFinder = inj.getUnitFinder();
	 def cv = visit.cvdCv;
	 def list = unitFinder.findAllUfvOnBoard(cv);
	 def iter = list.iterator();
	 while(iter.hasNext()) {
	    try {
	         def ufv = iter.next();
		     def unit = ufv.ufvUnit;
	         // Skip units with AdvancedVV
	         if(unit.getFieldValue("unitFlexString04") != null) continue;
	         update = availLookup.setAvailDateOnUnit(unit, null,beginDate);
	    } catch (Exception e) {
		java.io.StringWriter w = new StringWriter();
		java.io.PrintWriter pw = new java.io.PrintWriter(w);
		e.printStackTrace(pw);
	    }
	 }
	// Now update advanced vessels.
	def visitId = visit.getFieldValue("cvdCv.cvId");
	list = availLookup.getAdvancedUnits(visitId);
	iter = list.iterator();
	while(iter.hasNext()) {
	    try {
	       def unit = iter.next();
	       update = availLookup.setAvailDate(unit, null);
	    } catch (Exception e) {
		java.io.StringWriter w = new StringWriter();
		java.io.PrintWriter pw = new java.io.PrintWriter(w);
		e.printStackTrace(pw);
	    }
	 }
     }
}
def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")
if(facility != null &amp;&amp; facility.equals('HON'))
  {
    def vesselDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
    def result = vesselDetails.doTheVessel(event, "EDT")
    if(update){
       def gvyDentObj = api.getGroovyClassInstance("GvyCmisDetentionMsgProcess");
    }else if(!update){
   }
}</message-template>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="BKG" event-type="BOOKING_HAZARDS_INSERT" description="Extension to sync hazard items in Booking with Units attached to it" created="2016-02-02T12:02:55" creator="pseiler" code-extension-name="MATSyncBookingHazOntoUnits">
  <filter />
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_ACTIVATE" description="Copy Container owner to Unit Flex Field 13 (Container Owner)" changed="2016-08-24T16:16:48" changer="psethuraman" created="2016-01-07T14:43:30" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

Event evnt = event.getEvent();
        com.navis.framework.portal.FieldChanges inOutChanges = evnt.getEvntFieldChanges();
        println("ACTIVATE Field changes : "+evnt.getEvntFieldChanges());
        if(inOutChanges.hasFieldChange(com.navis.inventory.InventoryBizMetafield.BKG_AND_ERO)) {
            println("Got my Booking : "+inOutChanges.getFieldChange(InventoryBizMetafield.BKG_AND_ERO));

        }

/* groovy code to copy the owner code to unit flex string 13 when the unit is created */
def gvyEquiOwner = api.getGroovyClassInstance("GvyXpsEquipmentOwner") 
gvyEquiOwner.setEquipmentOwner(event)

def unit = event.getEntity()
def obCarrier = unit.getFieldValue( "unitActiveUfv.ufvActualObCv.cvId");
println("TestingobCarrierActivate::::::::"+obCarrier);
def lookup = api.getGroovyClassInstance("GvyAvailDate");
lookup.setAvailDate(unit, event);

//Groovy Code not to Pass Activate message for NLT units 
/* --- Commented out ADD POSTING
def note = event.event.evntNote;
boolean isNLT = false
if(note != null){
    isNLT = note.startsWith("NIS Load Transaction") ? true : false
}

// Create Cmis Feed for UI Transaction only when last known position is Vessel 
 def lkpLocType=unit.getFieldValue("unitActiveUfv.ufvLastKnownPosition.posLocType")
 lkpLocType = lkpLocType != null ? lkpLocType.getKey() : ''
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 def processAcetsMsg = gvyUtilObj.acetsMesssageFilter(event)
 if(processCmisFeed &amp;&amp; lkpLocType.equals('VESSEL') &amp;&amp;  !isNLT &amp;&amp; !processAcetsMsg)
 {
   // N4 TO CMIS data processing 
   def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
   def unitDtl = unitDetails.doIt(event)
   def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil")
    if(unitDtl != null &amp;&amp; unitDtl.trim().length() &gt; 0){
       //gvyCmisUtil.postMsgForAction(unitDtl,api,"ADD")
    }
 } */
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="COLLAPSE AUTO FRAME" created="2016-02-09T16:34:34" creator="pseiler" code-extension-name="MATCollapseAutoFrame">
  <filter />
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="EQUIPMENT_HAZARD_REFRESH" description="Refresh Haz data from Hazmat" changed="2016-07-22T12:16:46" changer="psethuraman" created="2016-05-20T17:56:48" creator="psethuraman" code-extension-name="MATHazmatHazardRefresh">
  <filter />
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UNIT_ROLL" description="Update temp setting from booking on unit roll" created="2016-03-23T23:09:18" creator="gbabu" code-extension-name="MATUpdateTempSettingOnUnitRoll">
  <filter />
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="VGM_UPDATE" changed="2016-07-19T18:04:24" changer="gbabu" created="2016-07-01T05:26:09" creator="gbabu">
  <filter />
  <message-template>api.getGroovyClassInstance("MATUtil").refreshUnit(event.getEntity());</message-template>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UNIT_CREATE" description="Set the Unit Line Operator Correctly to 'Container' Line Operator on Unit created by UNIT_STRIP even" created="2016-05-27T01:22:59" creator="kramachandran" code-extension-name="MATUpdateContainerOperatorOnStrip">
  <filter />
  <message-template>Set the Unit Line Operator Correctly to 'Container' Line Operator on Unit created by UNIT_STRIP even</message-template>
</notice-request>
<notice-request action="CODE_EXTENSION" business-entity="UNIT" event-type="UPDATE" description="Update Vessel slot position" changed="2016-12-17T22:25:11" changer="psethuraman" created="2016-12-17T22:16:47" creator="psethuraman" code-extension-name="MatMassUpdateVesselPositionExt">
  <filter />
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_CREATE" description="Create unit" changed="2016-12-02T21:06:15" changer="brajamanickam" created="2016-08-22T14:50:32" creator="vnatesan">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="IN" metafield="unitFreightKind" value=":MTY|FCL|LCL|BBK|" ui-value="[Empty,FCL,LCL,B-bulk]" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>/** 
      SKB  01/07/2009  Only F type containers will get there routing from there parents.
                                   Other types are returned to storage.
      SKB  06/08/2009  Added set time-in to strip/stuff units.
*/
def newUnit = event.getEntity();

Event evnt = event.getEvent();
        com.navis.framework.portal.FieldChanges inOutChanges = evnt.getEvntFieldChanges();
        println("CREATE Field changes : "+evnt.getEvntFieldChanges());
        if(inOutChanges.hasFieldChange(com.navis.inventory.InventoryBizMetafield.BKG_AND_ERO)) {
            println("Got my Booking : "+inOutChanges.getFieldChange(InventoryBizMetafield.BKG_AND_ERO));
 }

def obCarrier = newUnit.getFieldValue( "unitActiveUfv.ufvActualObCv.cvId");
println("TestingobCarrierCreate::::::::"+obCarrier);
String note = event.getEvent().getEventNote();
String prefix = "detached from ";
String stripPrefix = "Created by strip unit operation.";
String stuffPrefix = "Created by stuff unit operation.";

def equip = newUnit.getPrimaryEq();
boolean fType = false;
// Check that type is F type
if(equip != null) {
   if(equip.eqEquipType.eqtypId.startsWith("F")) fType = true;
}

if(note != null &amp;&amp; note.startsWith(prefix) &amp;&amp; fType) {
   def id = note.substring(prefix.length());
   def lookup = api.getGroovyClassInstance("GvyUnitLookup")
   println("Flat rack Unit Unbundle="+id);
   def oldUnit = lookup.lookupActiveUnit(id);
   if(oldUnit == null) {
       println("Could not match new payload with flat rack!!");
       return;
   }

   //println("oldId="+oldUnit);

   lookup.copyUnitValues(oldUnit,newUnit);

}
else if(note != null &amp;&amp; (note.startsWith(stripPrefix)  || note.startsWith(stuffPrefix) ) ) {
   def lookup = api.getGroovyClassInstance("GvyUnitLookup");
   lookup.setTimeIn(newUnit);
}

/* Set Deck Position */ 
 def unit = event.getEntity();
 def lookup = api.getGroovyClassInstance("GvyVesselLookup");
 lookup.setDeckPositionType(unit);


/* Blank out ForiegnKey and set if for this unit */
lookup = api.getGroovyClassInstance("GvyUnitUpdate");
lookup.setForeignKey(unit);

//12/07/10 - Gems Prod Issue [Set load port on Strip]
def evntNote = event.event.evntNote;
if(evntNote != null &amp;&amp; evntNote.contains('Created by strip unit')){
def routing = newUnit.getUnitRouting();
routing.setRtgPOL(com.navis.argo.business.reference.RoutingPoint.findRoutingPoint(com.navis.argo.ContextHelper.getThreadFacility().getFcyId()));
}</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="OVER_ROAD_UNASSIGN" description="OVER_ROAD_UNASSIGN" changed="2015-08-13T04:37:14" changer="psethuraman" created="2016-01-07T14:43:23" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
   def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
   def unitDtl = unitDetails.doIt(event)
   api.sendXml(unitDtl);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EQ" event-type="INGATE_HOLD" description="INGATE_HOLD" changed="2015-08-13T04:37:15" changer="psethuraman" created="2016-01-07T14:43:24" creator="admin">
  <filter />
  <message-template>/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="REVIEW_FOR_STOW" description="REVIEW_FOR_STOW" changed="2015-08-13T04:37:15" changer="psethuraman" created="2016-01-07T14:43:26" creator="admin">
  <filter />
  <message-template>def unit = event.getEntity();
def intObCarrierMode=unit.getFieldValue("unitActiveUfv.ufvIntendedObCv.cvCarrierMode").getKey() 
def dObCarreirmode = unit.getFieldValue("unitRouting.rtgDeclaredCv.cvCarrierMode").getKey()
if('VESSEL'.equals(dObCarreirmode) &amp;&amp; !'VESSEL'.equals(intObCarrierMode)){
   def dObcarrierId = unit.getFieldValue("unitRouting.rtgDeclaredCv.cvId")
   def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil");
   gvyCmisUtil.setObCarrier(unit, dObcarrierId)
}
if(unit.getFieldValue("unitRemark") != null) {
   unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}
def gvyEventUtil = api.getGroovyClassInstance("GvyEventUtil")  
boolean isActiveUnit = event.entity.unitForeignHostKey != null ? true : false
if(isActiveUnit){
    def gvyCargoEdit = api.getGroovyClassInstance("GvyCmisUnitCargoEdit"); 
    gvyCargoEdit.autoRollPod(event,unit,api,gvyEventUtil);               

    def gvyEvntcargoEdit = api.getGroovyClassInstance("GvyCmisEventUnitCargoEdit")  
    gvyEvntcargoEdit.processUnitPropertyUpdate(event,api,gvyCargoEdit) 
} 
 //SAT TmpSettng Chck 
 def equiType=unit.getFieldValue("unitPrimaryUe.ueEquipment.eqEquipType.eqtypId")
 if(equiType.startsWith('R'))
 {
   def prevTempSetting =  gvyEventUtil.getPreviousPropertyAsString(event, "ufvFlexString07");
   prevTempSetting = prevTempSetting != null ? prevTempSetting.toString() : ""
   def tempSetting = unit.getFieldValue("unitActiveUfv.ufvFlexString07");
   println("prevTempSetting --"+prevTempSetting+"   tempSetting---"+tempSetting) 
   tempSetting = tempSetting != null ? tempSetting : ""
   def cmdyId = unit.getFieldValue("unitGoods.gdsCommodity.cmdyId")
   def bkgNbr = unit.getFieldValue("unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr");
   boolean tempChng = !prevTempSetting.equals(tempSetting) &amp;&amp; !"AMB".equals(tempSetting)
   boolean isImprt = com.navis.argo.business.atoms.UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory())
   //If SAT OR IMPRT with NO Bkg and TmpSetng updtd, chg val to reefer tmp Reqd
   if( ("SAT".equals(cmdyId) || (isImprt &amp;&amp; bkgNbr == null)) &amp;&amp; !"AMB".equals(tempSetting)) {
      if(tempSetting.trim().length() &gt; 0){ 
       tempSetting = tempSetting.replace('F','') 
       double fahrenheit = Double.parseDouble(tempSetting.trim());
       double fahr = (fahrenheit - 32) * 5/9; 
       unit.setFieldValue("unitGoods.gdsReeferRqmnts.rfreqTempRequiredC", fahr)
       if(unit.getUnitRequiresPower().equals(false)) { unit.setUnitRequiresPower(true) }
       if(unit.getUnitWantPowered().equals(false)) { unit.setUnitWantPowered(true) }
      }
   }
   //Chck IGT Temp
    if (!"SAT".equals(cmdyId) &amp;&amp; !prevTempSetting.equals(tempSetting) &amp;&amp; !"AMB".equals(tempSetting)) {
      def gvyTempCheck =  api.getGroovyClassInstance("GvyUnitInGateTempCheck") 
      gvyTempCheck.ImportCntrBkgDiscrepancy(event)
   }
   //email
  //api.getGroovyClassInstance("ReviewForStowTempDiscrepancy").execute(unit,event);
 }</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="ITN_RELEASE" description="ITN Unit Release " changed="2015-08-13T04:37:17" changer="psethuraman" created="2016-01-07T14:43:27" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

// Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 def gvyCmisUtil = api.getGroovyClassInstance("GvyCmisUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 boolean processAcetsMsg = gvyUtilObj.acetsMesssageFilter(event)
  if(processCmisFeed &amp;&amp; !processAcetsMsg)
 {
     def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
     def unitDtl = gvyEvntProcessor.processFieldChngCmisFeed(event,api)
     gvyCmisUtil.postMsgForAction(unitDtl,api,"ALT")
  }
 
 //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 if(reportProcessing)
{
  //Cargo Status Report
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml(ret)
 }

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_RECTIFY" changed="2015-08-13T04:37:18" changer="psethuraman" created="2016-01-07T14:43:29" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")

/* Set Deck Position */ 
 def unit = event.getEntity();
 def lookup = api.getGroovyClassInstance("GvyVesselLookup");
 lookup.setDeckPositionType(unit);

//-- Commented out the Detention as its being set in the Groovy Class
/* Set Avail Date - Commented code as Added In Groovy Plugin*/
 //def unit = event.getEntity()
 def availLookup = api.getGroovyClassInstance("GvyAvailDate");
 def update = availLookup.setAvailDate(unit, event);

/*
  1] Sets the Detention date
  2] Sends the cargo Status
  3]  Ingate &amp; Acets Filter
  4] Creates Cmis Feed (Detn &amp; Fld chng) 
*/

def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
     // N4 TO CMIS data processing 
     def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
     def unitDtl = unitDetails.doIt(event)
    
      //Detention Msg Check
      if(update){
        def gvyDentObj = api.getGroovyClassInstance("GvyCmisDetentionMsgProcess"); 
        gvyDentObj.detentionProcess(unitDtl,event,api)
      }

     //Rectify Process
    def gvyRecieveObj = api.getGroovyClassInstance("GvyCmisEventUnitRectify")
    def xmlGvyRecitfy = gvyRecieveObj.processRectify(unitDtl, event,api) 

 }

//Set Visibility to false
//com.navis.inventory.business.units.Unit unit = event.getEntity();
    Set&lt;com.navis.inventory.business.units.UnitFacilityVisit&gt; ufvSet = unit.getUnitUfvSet();
    for(com.navis.inventory.business.units.UnitFacilityVisit ufv :ufvSet) {
            if(!ufv.isActive()) {
                   ufv.setUfvVisibleInSparcs(Boolean.FALSE);
           }       
    }

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_DISMOUNT" description="UNIT DISMOUNT" changed="2015-08-13T04:37:19" changer="psethuraman" created="2016-01-07T14:43:30" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")


//1. Dont sent as Chassis Msg as position is the same it does not change 
if(!(event.event.evntAppliedBy.contains('GATE') &amp;&amp; event.event.evntAppliedBy.contains('gate') &amp;&amp; event.event.evntAppliedBy.contains('wo')  &amp;&amp;  event.event.evntAppliedBy.contains('xps')  &amp;&amp;  event.event.evntAppliedBy.contains('now') )){
   def note = event.event.evntNote;
   if(note != null &amp;&amp; !note.contains('swiped')){
      def gvyNow = api.getGroovyClassInstance("NowChassisTrackingBuilder") 
      gvyNow.nowMessagesProcessor(event, api)
   }
}

  
//2. Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 
 //Adding Check for Event Ordering
 def unit = event.getEntity()
 def lookup = api.getGroovyClassInstance("GvyVesselLookup");
 def position =  lookup.setDeckPositionType(unit);
 if("RO".equals(position) &amp;&amp; unit.subsidiaryEquipment != null) {
        processCmisFeed = false
        println('INSIDE THE UNIT_DISMOUNT DECK POISTION : '+processCmisFeed)
  } 

 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def unitDetails = api.getGroovyClassInstance("GvyCmisDataProcessor")
    def unitDtl = unitDetails.doIt(event)
    def gvyDismountObj = api.getGroovyClassInstance("GvyCmisEventUnitDismount")
    def dismountXml = gvyDismountObj.getDetachedEquipId(unitDtl,event,api)
  }

println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="RESET AUTO/CONV" description="Rectify to Yard" changed="2015-08-13T04:37:16" changer="psethuraman" created="2016-01-07T14:43:33" creator="admin">
  <filter />
  <message-template>api.log("RESET_AUTO: found event!");

def unit = event.getEntity();

api.log("RESET_AUTO: Unit: " + unit.getFieldValue("unitId"));

/*
 * For this event, update the following:
 * 1. Transit state to YARD
 * 2. Position to Y-SI
 * 3. O/B Carrier to GEN_VESSEL
 */

// 1. Transit state to Yard.
api.log("RESET_AUTO: Enum available: " + com.navis.inventory.business.atoms.UfvTransitStateEnum.S40_YARD);
api.log("RESET_AUTO: Unit Transit State: " + unit.getFieldValue("unitActiveUfv.ufvTransitState"));
unit.setFieldValue("unitActiveUfv.ufvTransitState", com.navis.inventory.business.atoms.UfvTransitStateEnum.S40_YARD);
api.log("RESET_AUTO: Unit Transit State Updated! " + unit.getFieldValue("unitActiveUfv.ufvTransitState"));

// 2. Position to Y-SI
api.log("RESET_AUTO: Enum available: " + com.navis.argo.business.atoms.LocTypeEnum.YARD);
api.log("RESET_AUTO: Position Type: " + unit.getFieldValue("unitActiveUfv.ufvLastKnownPosition.posLocType"));
api.log("RESET_AUTO: Position ID: " + unit.getFieldValue("unitActiveUfv.ufvLastKnownPosition.posLocId"));
api.log("RESET_AUTO: Position Full: " + unit.getFieldValue("unitActiveUfv.ufvLastKnownPosition.posName"));
unit.setFieldValue("unitActiveUfv.ufvLastKnownPosition.posLocType", com.navis.argo.business.atoms.LocTypeEnum.YARD);
unit.setFieldValue("unitActiveUfv.ufvLastKnownPosition.posLocId", "SI");
unit.setFieldValue("unitActiveUfv.ufvLastKnownPosition.posName", "Y-SI");
api.log("RESET_AUTO: Position Type Updated!: " + unit.getFieldValue("unitActiveUfv.ufvLastKnownPosition.posLocType"));
api.log("RESET_AUTO: Position ID Updated!: " + unit.getFieldValue("unitActiveUfv.ufvLastKnownPosition.posLocId"));
api.log("RESET_AUTO: Position Full Updated!: " + unit.getFieldValue("unitActiveUfv.ufvLastKnownPosition.posName"));

// 3. O/B Carrier to GEN_VESSEL
api.log("RESET_AUTO: OB Carrier: " + unit.getFieldValue("unitActiveUfv.ufvIntendedObCv"));
def complex = com.navis.argo.ContextHelper.getThreadComplex();
def visit = com.navis.argo.business.model.CarrierVisit.getGenericVesselVisit(complex);
unit.getUfvForFacilityNewest(com.navis.argo.ContextHelper.getThreadFacility()).updateObCv(visit);
api.log("RESET_AUTO: OB Carrier Updated!: " + unit.getFieldValue("unitActiveUfv.ufvIntendedObCv"));

api.log("RESET_AUTO: event complete!");</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="EDISESS" event-type="EDI_POST" description="EDI Import Discrepancies Report" changed="2012-12-11T12:51:19" changer="riyer" created="2016-01-07T14:43:37" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="edisessDirection" value="R" ui-value="Receive" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="IN" metafield="edisessName" value=":HLC_BAPLIE|MAE_BAPLIE|RECEIVE_ANL_BAPLIE|SEACOS_BAPLIE|STIFIN|HSD_BAPLIE|" ui-value="[HLC_BAPLIE,MAE_BAPLIE,...]" order="1" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>println("Start of MatReportImportDiscrepancies")

def ediSession = event.getEntity();
def sessionName = ediSession.getFieldValue("EdisessName")
println("END of MatReportImportDiscrepancies session name is "+sessionName)

println("Start of MatGetStowplanVesVoy");
String vesVoy = api.getGroovyClassInstance("MatGetStowplanTrankey").execute(event,api)
println("End of MatGetStowplanVesVoy");

//println("Generating  Import Discrepancies report")

//def reportRunner= api.getGroovyClassInstance("MatReportImportDiscrepancies");
//HashMap parameters = new HashMap();
//reportRunner.generateReport(parameters,vesVoy);</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="UNIT_RECEIVE" description="Full container returned to yard" sent-count="115" changed="2014-11-05T14:55:46" changer="-notices-" created="2016-01-07T14:43:39" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="EQ" metafield="unitDrayStatus" value="DRAYIN" ui-value="Dray In" order="0" negated="false" parm-type="NO_PARM" />
      <predicate verb="NE" metafield="unitImpediments" value="*CG DMG*" ui-value="*CG DMG*" order="1" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>Date : &amp;TIME

                               MATSON TERMINALS - CONTAINER YARD

From: Gate
Subject: Full Container Return to Yard


Container &amp;UnitNbr was returned back to the yard on &amp;TIME</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="KAH EVENT" description="KAH EVENT" changed="2015-08-13T04:37:09" changer="psethuraman" created="2016-01-07T14:43:09" creator="admin">
  <filter />
  <message-template>// N4 TO CMIS data processing 
//def unit = event.getEntity()
//def msgType='KAH EVENT'
//def eventProcess = api.getGroovyClassInstance("GvyUnitEventProcessor");
//def eventOutput = eventProcess.doIt(msgType,unit);</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="RELEASE_CONTAINER" description="RELEASE_CONTAINER" changed="2015-08-13T04:37:10" changer="psethuraman" created="2016-01-07T14:43:10" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}
   // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="BKG" event-type="BOOKING_PROPERTY_UPDATE" description="Update ISO Id for booking items" changed="2016-08-17T14:10:53" changer="vnatesan" created="2016-01-07T14:43:09" creator="admin">
  <filter />
  <message-template>try
{
      def booking = event.getEntity();       
      def bkgNotes = booking.getEqoNotes()
       bkgNotes = bkgNotes==null?"":bkgNotes;
       def bkngNumber = booking.eqboNbr;
print("Booking number"+bkngNumber);
       String bkngGkey = booking.eqboGkey;
       if(bkgNotes.contains("METAL SCRAP")||bkgNotes.contains("SCRAP METAL")) {
           print("METAL Booking number"+bkngGkey); api.getGroovyClassInstance("MatUpdateBkngUnitIso").setEquipSeries(bkngGkey)
        }
}catch(Exception e){
       e.printStackTrace();
       println("Error while setting equipment series  to Booking Items ::  " + bkngNumber);
}</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="NTFY:HP_CANCELLED" email-party="unitGoods.gdsConsigneeBzu" description="Hold for payment cleared notice to consignee" sent-count="3" changed="2015-08-13T04:37:10" changer="psethuraman" created="2016-01-07T14:43:11" creator="admin">
  <filter />
  <message-template>Date : &amp;TIME

                               MATSON TERMINALS - CONTAINER YARD

From: &amp;UfvFlexString03
Subject: HOLD FOR PAYMENT CLEARED - &amp;UfvFlexString04
         

Phone: (808) 848-1321   Fax: (808) 842-5490
---------------------------------------------------------------------------------------------
CONTAINER: &amp;UnitNbr
 LOCATION: &amp;PositionFull
   VESVOY: &amp;InboundCarrierId
  SHIPPER: &amp;GoodsShipperName
  BOOKING: &amp;GoodsBlNbr
    HOLDS: &amp;UnitImpediments</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="AUTO / CONV EDIT" changed="2015-08-13T04:37:08" changer="psethuraman" created="2016-01-07T14:43:12" creator="admin">
  <filter />
  <message-template>def unit = event.getEntity();
if(unit.getFieldValue("unitRemark") != null) {
unit.setFieldValue("unitRemark", unit.getFieldValue("unitRemark").replace("\n","").replace("\t",""));
}</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="NTFY:CONTAINER_RECONSIGNED" email-party="unitRouting.rtgTruckingCompany" description="Container re-consigned notice to trucker" changed="2015-08-13T04:37:08" changer="psethuraman" created="2016-01-07T14:43:13" creator="admin">
  <filter />
  <message-template>Date : &amp;TIME

                               MATSON TERMINALS - CONTAINER YARD

From: &amp;UfvFlexString03
Subject: CONTAINER RECONSIGNED - &amp;UfvFlexString04
         

Phone: (808) 848-1321   Fax: (808) 842-5490
---------------------------------------------------------------------------------------------
CONTAINER: &amp;UnitNbr
 LOCATION: &amp;PositionFull
   VESVOY: &amp;InboundCarrierId
  SHIPPER: &amp;GoodsShipperName
  BOOKING: &amp;GoodsBlNbr
    HOLDS: &amp;UnitImpediments</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="CG_INSP_RELEASE" description="CG_INSP_RELEASE" changed="2015-08-13T04:37:11" changer="psethuraman" created="2016-01-07T14:43:14" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
  
Thread.sleep(10000);
println("Calling MatReleaseHold");
def unit = event.getEntity();
def unitId = event.entity.unitId;
def MatRemoveHold = api.getGroovyClassInstance("MatRemoveHold") ;
MatRemoveHold.execute(unitId, "CG_INSP");
println("Calling MatReleaseHold End");

 // Create Cmis Feed for Msg from Acets &amp; UI Transaction
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 if(processCmisFeed)
 {
   // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }

//Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 def gvyCrsUtil = api.getGroovyClassInstance("GvyCmisCargoStatusUtil")
 boolean isNISPort =  gvyCrsUtil.nisPortCheck(event,api)
 if(reportProcessing &amp;&amp; isNISPort)
{
  //Cargo Status Report
  def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
  def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
  api.sendXml( ret);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="NTFY:CONTAINER_DIVERTED" email-party="unitGoods.gdsConsigneeBzu" description="Container diverted notice to consignee" sent-count="2" changed="2015-08-13T04:37:11" changer="psethuraman" created="2016-01-07T14:43:14" creator="admin">
  <filter />
  <message-template>Date : &amp;TIME

                               MATSON TERMINALS - CONTAINER YARD

From: &amp;UfvFlexString03
Subject: CONTAINER DIVERTED - &amp;UfvFlexString04
         

Phone: (808) 848-1321   Fax: (808) 842-5490
---------------------------------------------------------------------------------------------
CONTAINER: &amp;UnitNbr
 LOCATION: &amp;PositionFull
   VESVOY: &amp;InboundCarrierId
  SHIPPER: &amp;GoodsShipperName
  BOOKING: &amp;GoodsBlNbr
    HOLDS: &amp;UnitImpediments</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="INB_HOLD" description="INB_HOLD" changed="2015-08-13T04:37:14" changer="psethuraman" created="2016-01-07T14:43:15" creator="admin">
  <filter />
  <message-template>println("//Start Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")
/*  
   1] Create Cmis Feed for Msg from Acets &amp; UI Transaction
*/
 def gvyUtilObj = api.getGroovyClassInstance("GvyEventUtil")  
 boolean processCmisFeed  = gvyUtilObj.verfiyCmisFeedProcessing(event)
 boolean processAcetsMsg = gvyUtilObj.acetsMesssageFilter(event)
 if(processCmisFeed &amp;&amp; !processAcetsMsg)
 {
    // N4 TO CMIS data processing 
    def gvyEvntProcessor = api.getGroovyClassInstance("GvyCmisEvntFldChngProcessor");
    gvyEvntProcessor.processFieldChngCmisFeed(event,api)
 }

 //Create Report for UI Transaction , ACETS and SUPPLEMENT File Execution
 boolean reportProcessing = gvyUtilObj.verfiyReportSnxProcessing(event)
 if(reportProcessing)
{
   def cargoStatusGvy = api.getGroovyClassInstance( "GvyUnitCargoStatus");
   def ret = cargoStatusGvy.sendXml( "CARGO_STATUS", event);
   api.sendXml( ret);
 }
println("//End Event ---:"+event.event.eventTypeId+ " on Unit :"+event.entity.unitId+" ----//")</message-template>
</notice-request>
<notice-request action="GROOVY" business-entity="UNIT" event-type="UNIT_SWIPE" description="Correct Foriegn Key on Swipe" changed="2015-08-13T04:37:11" changer="psethuraman" created="2016-01-07T14:43:17" creator="admin">
  <filter />
  <message-template>def unit = event.getEntity() 
if(unit.unitForeignHostKey != null) {
   def unitUpdate = api.getGroovyClassInstance("GvyUnitUpdate");
   unitUpdate.setForeignKey(unit);
}</message-template>
</notice-request>
<notice-request action="EMAIL" business-entity="UNIT" email-address="1aktosdevteam@matson.com" event-type="YB_ASSIGN" description="overweight Alert YB assign weight &gt; 55000 email" sent-count="1705" changed="2014-05-09T10:47:01" changer="rchinhon" created="2016-01-07T14:43:40" creator="admin">
  <filter>
    <predicate verb="AND" order="1" negated="false" parm-type="NO_PARM">
      <predicate verb="GT" metafield="unitGoodsAndCtrWtKg" value="24947.58035" ui-value="55000 lb" order="0" negated="false" parm-type="NO_PARM" />
    </predicate>
  </filter>
  <message-template>&amp;UnitNbr YB Assigned at &amp;TIME for &amp;Destination is Overweight. Exceeds weight limitation of 55,000 lb.</message-template>
</notice-request>
</argo:snx>

