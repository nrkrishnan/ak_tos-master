<?xml version="1.0" encoding="UTF-8"?>
<argo:snx xmlns:argo="http://www.navis.com/argo" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.navis.com/argo snx.xsd">
<digital-asset id="NavisStorageCalculationSample" short-description="NavisStorageCalculationSample" is-pre-deployed="Y" groovy-code="/*&#xA; * Copyright (c) 2013 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;import com.navis.inventory.business.units.UnitStorageCalculation&#xA;import com.navis.inventory.external.inventory.AbstractStorageCalculation&#xA;&#xA;/**&#xA; * This groovy is used to set the values ufvFlexStorageString01, ufvFlexStorageString02, ufvFlexStorageString03, ufvFlexStorageDouble01,&#xA; * ufvFlexStorageDouble02 and ufvFlexStorageDouble03 as needed.&#xA; * These values to be configured in Fields.&#xA; * Once the fields are configured it automatically displayed in UnitInspector --&gt; Storage and Line Storage panel.&#xA; * The value needs to be populated using the groovy code.&#xA; * Author: Murali Raghavachari&#xA; * Date Written: 11/25/2013&#xA; * SFDC : 76034&#xA; * JIRA : ARGO-53280, CSDV-1523&#xA; * Called From:&#xA; *&#xA; **/&#xA;public class NavisStorageCalculationSample extends AbstractStorageCalculation {&#xA;&#xA;  @Override&#xA;  public void unitStorageCalculationExtension(Map inMap) {&#xA;    if (!inMap.isEmpty()) {&#xA;      UnitStorageCalculation usc = (UnitStorageCalculation) inMap.get(&quot;UnitStorageCalculation&quot;); //UNIT_STORAGE_CALCULATION is not working. hard coded&#xA;      if (usc != null) {&#xA;        String chargeFor = usc.getChargeFor();&#xA;        if ((&quot;STORAGE&quot;).equals(chargeFor)) {&#xA;          usc.setUfvFlexStorageDouble01(10.00);&#xA;          usc.setUfvFlexStorageDouble02(20.00);&#xA;          usc.setUfvFlexStorageString01(&quot;Testing STORAGE.Sample hard coded value&quot;);&#xA;        } else if ((&quot;LINE_STORAGE&quot;).equals(chargeFor)) {&#xA;          usc.setUfvFlexStorageDouble01(33.00);&#xA;          usc.setUfvFlexStorageDouble02(44.00);&#xA;          usc.setUfvFlexStorageString01(&quot;Testing LINE STORAGE.Sample hard coded value&quot;);&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;" />
<digital-asset id="GvyRefDataLookup" short-description="GvyRefDataLookup" is-pre-deployed="N" groovy-code="import com.navis.argo.ContextHelper&#xA;&#xA;import java.sql.Connection;&#xA;import java.sql.PreparedStatement;&#xA;import java.sql.ResultSet;&#xA;import javax.sql.DataSource;&#xA;import javax.naming.Context;&#xA;import javax.naming.InitialContext;&#xA;import com.navis.argo.business.model.Facility;&#xA;&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.sun.jersey.api.client.Client&#xA;import com.sun.jersey.api.client.ClientResponse&#xA;import com.sun.jersey.api.client.WebResource&#xA;import com.sun.jersey.api.client.config.ClientConfig&#xA;import com.sun.jersey.api.client.config.DefaultClientConfig&#xA;import javax.mail.internet.MimeMessage&#xA;import javax.ws.rs.core.MediaType&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.inventory.business.units.*;&#xA;import com.navis.argo.business.reference.*;&#xA;&#xA;/**&#xA;*  A1 SKB 05/11/2009  Added POD lookup&#xA;*  A2 SKB 06/25/2009  Removed connection to prevent memory leak&#xA;*  A3 GR  10/21/10    Added Chassis RFID WSDL lookup Code&#xA;                      Added Env Spec IP lookup code for JMS Server Connectivity&#xA;*  A4 GR  08/19/11    Added ActiveMQ InitiaContextFactory Lookup&#xA;*/&#xA;class GvyRefDataLookup {&#xA;&#xA;&#xA;&#x9;public Connection connect() {&#xA;&#x9;&#x9;    //String datasource = &quot;jdbc.ds.tdp.nontx&quot;;&#xA;&#xA;&#x9;&#x9;   /* Context ctx = null;&#xA;        &#x9;Hashtable ht = new Hashtable();&#xA;        &#x9;ht.put(Context.INITIAL_CONTEXT_FACTORY, &quot;org.apache.activemq.jndi.ActiveMQInitialContextFactory&quot;);&#xA;        &#x9;ctx = new InitialContext(ht);&#xA;        &#x9;javax.sql.DataSource ds  = (javax.sql.DataSource) ctx.lookup (datasource);&#xA;        &#x9;Connection conn = ds.getConnection();&#xA;        &#x9;return conn; */&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;// Obtain our environment naming context&#xA;&#x9;&#x9;&#x9;Context initCtx = new InitialContext();&#xA;&#x9;&#x9;&#x9;Context envCtx = (Context) initCtx.lookup(&quot;java:comp/env&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;// Look up our data source&#xA;&#x9;&#x9;&#x9;DataSource ds = (DataSource)envCtx.lookup(&quot;jdbc.ds.tdp.nontx&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;// Allocate and use a connection from the pool&#xA;&#x9;&#x9;&#x9;Connection conn = ds.getConnection();&#xA;&#x9;&#x9;&#x9;return conn;&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;public Connection connectTos() {&#xA;&#xA;&#x9;&#x9;&#x9;// Obtain our environment naming context&#xA;&#x9;&#x9;&#x9;Context initCtx = new InitialContext();&#xA;&#x9;&#x9;&#x9;Context envCtx = (Context) initCtx.lookup(&quot;java:comp/env&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;// Look up our data source&#xA;&#x9;&#x9;&#x9;DataSource ds = (DataSource)envCtx.lookup(&quot;jdbc/apexDS&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;// Allocate and use a connection from the pool&#xA;&#x9;&#x9;&#x9;Connection conn = ds.getConnection();&#xA;&#x9;&#x9;&#x9;return conn;&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;public void disconnect(Connection conn) {&#xA;&#x9;&#x9;if(conn != null) conn.close();&#xA;&#x9;}&#xA;&#xA;&#x9;public String lookup(String key, Connection conn) {&#xA;&#x9;&#x9;PreparedStatement stmt = null;&#xA;&#x9;&#x9;ResultSet rs = null;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;  String sql = &quot;select value from TOS_APP_PARAMETER where key = ?&quot;;&#xA;&#x9;&#x9;  println(&quot;JMS_URL Query::&quot;+sql);&#xA;&#x9;&#x9;  stmt = conn.prepareStatement(sql);&#xA;&#x9;&#x9;  stmt.setString(1,key);&#xA;&#x9;&#x9;  rs = stmt.executeQuery();&#xA;&#x9;      if(rs.next()) {&#xA;&#x9;    &#x9;  return rs.getString(1);&#xA;&#x9;&#x9;println(&quot;JMS_URL Query return ::&quot;+rs.getString(1));&#xA;  &#x9;      }&#xA;&#xA;&#x9;    } finally {&#xA;&#x9;    &#x9;if(stmt != null) stmt.close();&#xA;&#x9;    &#x9;if(rs != null )rs.close();&#xA;&#x9;    }&#xA;&#x9;    return null;&#xA;&#x9;}&#xA;&#xA;&#x9;public String lookupPod(String dest) {&#xA;&#x9;&#x9;PreparedStatement stmt = null;&#xA;&#x9;&#x9;ResultSet rs = null;&#xA;&#x9;&#x9;Connection conn;&#xA;&#x9;      def result = dest;&#xA;&#x9;      try {&#xA;&#x9;&#x9;  conn = connect();&#xA;&#x9;&#x9;  String sql = &quot;select pod1_id from TOS_DEST_POD_LOOKUP l where l.dest_id = ?&quot;;&#xA;&#x9;&#x9;  stmt = conn.prepareStatement(sql);&#xA;&#x9;&#x9;  stmt.setString(1,dest);&#xA;&#x9;&#x9;  rs = stmt.executeQuery();&#xA;&#x9;      if(rs.next()) {&#xA;&#x9;    &#x9;  result =  rs.getString(1);&#xA;&#x9;    &#x9;  if(result == null) result = dest;&#xA;&#x9;      }&#xA;&#xA;&#x9;    } finally {&#xA;&#x9;    &#x9;if(stmt != null) stmt.close();&#xA;&#x9;    &#x9;if(rs != null ) rs.close();&#xA;&#x9;    &#x9;disconnect(conn);&#xA;&#x9;    &#x9;conn = null;&#xA;&#x9;    }&#xA;&#xA;&#x9;    return result;&#xA;&#xA;&#x9;}&#xA;&#xA;&#xA;// Code for getNowServer&#xA;    public static String host;&#xA;&#x9;public static boolean dynamic = true;&#xA;&#xA;&#x9;public static synchronized void initName() {&#xA;&#x9;&#x9;GvyRefDataLookup lookup = new GvyRefDataLookup();&#xA;&#x9;&#x9;Connection conn;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;conn = lookup.connect();&#xA;&#x9;&#x9;&#x9;host = lookup.lookup(&quot;NOW_URL&quot;, conn);&#xA;&#xA;&#x9;&#x9;&#x9;String dynamicString =  lookup.lookup(&quot;NOW_DYNAMIC&quot;,conn);&#xA;&#x9;&#x9;&#x9;dynamic = Boolean.parseBoolean(dynamicString);&#xA;&#x9;&#x9;        println(&quot;DEBUG UPDT getNowServer &quot;+host);&#xA;&#xA;&#x9;&#x9;} finally {&#xA;&#x9;&#x9;&#x9;lookup.disconnect(conn);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//println(&quot;initNowServer&quot;)&#xA;&#x9;}&#xA;&#xA;&#x9;public getNowServer() {&#xA;&#xA;&#x9;&#x9;if(dynamic == true) {&#xA;&#x9;&#x9;&#x9;initName();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return host;&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;//A3&#xA;&#x9;public static String chasRfidHost;&#xA;&#x9;public static String n4TopicHost;&#xA;&#x9;public static boolean chasRfidDynamic = true;&#xA;&#xA;&#x9;public static synchronized void initChasRfid() {&#xA;&#x9;&#x9;GvyRefDataLookup lookup = new GvyRefDataLookup();&#xA;&#x9;&#x9;Connection conn;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;conn = lookup.connect();&#xA;&#x9;&#x9;&#x9;chasRfidHost = lookup.lookup(&quot;CHAS_RFID_NOW_URL&quot;, conn);&#xA;&#xA;&#x9;&#x9;&#x9;String dynamicChasStr =  lookup.lookup(&quot;NOW_DYNAMIC&quot;,conn);&#xA;&#x9;&#x9;&#x9;chasRfidDynamic = Boolean.parseBoolean(dynamicChasStr);&#xA;&#x9;&#x9;    println(&quot;DEBUG UPDT getNowServer &quot;+chasRfidHost);&#xA;&#xA;&#x9;&#x9;} finally {&#xA;&#x9;&#x9;&#x9;lookup.disconnect(conn);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//println(&quot;initNowServer&quot;)&#xA;&#x9;}&#xA;&#xA;&#x9;public getChasRfidUrl() {&#xA;&#xA;&#x9;&#x9;if(chasRfidDynamic == true) {&#xA;&#x9;&#x9;&#x9;initChasRfid();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//println(&quot;Called getChasRfidUrl&quot;);&#xA;&#x9;&#x9;return chasRfidHost;&#xA;&#xA;&#x9;}&#xA;&#xA;&#xA;&#x9;public static synchronized String getN4TopicAddress() {&#xA;&#x9;&#x9;//GvyRefDataLookup lookup = new GvyRefDataLookup();&#xA;&#x9;&#x9;//Connection conn;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;//conn = lookup.connect();&#xA;&#x9;&#x9;&#x9;//n4TopicHost = lookup.lookup(&quot;JMS_URL&quot;, conn);&#xA;&#x9;&#x9;&#x9;Facility facility = Facility.findFacility(ContextHelper.getThreadFacility().getFcyId());&#xA;&#x9;&#x9;&#x9;n4TopicHost = facility.fcyJmsConnection.jmsProviderUrl;&#xA;&#x9;&#x9;&#x9;println(&quot;n4TopicHost from Topology :::&quot;+n4TopicHost);&#xA;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;&#x9;println(&quot;Error while getting JMS_URL from topology ::&quot;+e);&#xA;&#x9;&#x9;}&#xA;       return n4TopicHost&#xA;&#x9;}&#xA;&#xA;    //A3 Ends&#xA;&#xA;&#x9;public insertTdpLogData(String vesvoy,String processType, String startDate, String endDate, String status, Connection conn) {&#xA;&#x9;&#x9;PreparedStatement stmt = null;&#xA;&#x9;&#x9;ResultSet rs = null;&#xA;&#x9;&#x9;GvyRefDataLookup lookup = new GvyRefDataLookup();&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;try {&#xA;&#xA;&#x9;&#x9;  String sql = &quot;INSERT INTO TOS_PROCESS_LOGGER_MT (id,vesvoy,processtype,starttime,endtime,status) VALUES (tos_process_logger_mt_seq.NEXTVAL,?,?,TO_DATE(?,'MM/DD/YYYY HH24:MI:SS'),TO_DATE(?,'MM/DD/YYYY HH24:MI:SS'),?)&quot;;&#xA;&#x9;&#x9;  println(&quot;sql  &quot;+sql);&#xA;&#x9;&#x9;  stmt = conn.prepareStatement(sql);&#xA;&#x9;&#x9;  stmt.setString(1,vesvoy);&#xA;&#x9;&#x9;  stmt.setString(2,processType);&#xA;&#x9;&#x9;  stmt.setString(3,startDate);&#xA;&#x9;&#x9;  stmt.setString(4,endDate);&#xA;&#x9;&#x9;  stmt.setString(5,status);&#xA;&#x9;&#x9;  stmt.executeQuery();&#xA;&#x9;    } finally {&#xA;&#x9;    &#x9;if(stmt != null) stmt.close();&#xA;&#x9;&#x9;lookup.disconnect(conn);&#xA;&#x9;    }&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (qe)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;println(&quot;MatInsertClientVesselRecInTDP query error &quot;+qe);&#xA;&#x9;&#x9;}&#xA;&#x9;    return null;&#xA;&#x9;}&#xA;&#xA;&#x9;public deleteGenRefData(String Type, String vesvoy,Connection conn) {&#xA;&#x9;&#x9;PreparedStatement stmt = null;&#xA;&#x9;&#x9;ResultSet rs = null;&#xA;&#x9;&#x9;GvyRefDataLookup lookup = new GvyRefDataLookup();&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;try {&#xA;&#xA;&#x9;&#x9;  String sql = &quot;DELETE FROM TOSMGR.ARGO_GENERAL_REFERENCE WHERE ref_type = ? and id1 = ?&quot;;&#xA;&#x9;&#x9;  println(&quot;sql  &quot;+sql);&#xA;&#x9;&#x9;  stmt = conn.prepareStatement(sql);&#xA;&#x9;&#x9;  stmt.setString(1,Type);&#xA;&#x9;&#x9;  stmt.setString(2,vesvoy);&#xA;&#x9;&#x9;  println(&quot; stmt :: &quot;+stmt);&#xA;&#x9;&#x9;  stmt.executeQuery();&#xA;&#x9;    } finally {&#xA;&#x9;    &#x9;if(stmt != null) stmt.close();&#xA;&#x9;&#x9;lookup.disconnect(conn);&#xA;&#x9;    }&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (qe)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;println(&quot;deleteGenRefData query error &quot;+qe);&#xA;&#x9;&#x9;}&#xA;&#x9;    return null;&#xA;&#x9;}&#xA;&#xA;&#x9;public calcelPermision(String unit, String permisionKey,Connection conn) {&#xA;&#x9;&#x9;PreparedStatement stmtQuery1 = null;&#xA;&#x9;&#x9;PreparedStatement stmtQuery2 = null;&#xA;&#xA;&#x9;&#x9;GvyRefDataLookup lookup = new GvyRefDataLookup();&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;&#x9;try {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String sql1 = &quot;DELETE FROM TOSMGR.SRV_VETOS WHERE APPLIED_TO_NATURAL_KEY = ? and BLOCKED_FLAG_GKEY IN (SELECT GKEY FROM SRV_FLAGS WHERE APPLIED_TO_NATURAL_KEY  = ? AND FLAG_TYPE_GKEY = ?)&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;sql1  &quot;+sql1);&#xA;&#x9;&#x9;&#x9;&#x9;stmtQuery1 = conn.prepareStatement(sql1);&#xA;&#x9;&#x9;&#x9;&#x9;stmtQuery1.setString(1,unit);&#xA;&#x9;&#x9;&#x9;&#x9;stmtQuery1.setString(2,unit);&#xA;&#x9;&#x9;&#x9;&#x9;stmtQuery1.setString(3,permisionKey);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot; stmt :: &quot;+stmtQuery1);&#xA;&#x9;&#x9;&#x9;&#x9;stmtQuery1.executeQuery();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String sql2 = &quot;DELETE FROM SRV_FLAGS WHERE APPLIED_TO_NATURAL_KEY  = ? AND FLAG_TYPE_GKEY = ?&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;sql2  &quot;+sql2);&#xA;&#x9;&#x9;&#x9;&#x9;stmtQuery2 = conn.prepareStatement(sql2);&#xA;&#x9;&#x9;&#x9;&#x9;stmtQuery2.setString(1,unit);&#xA;&#x9;&#x9;&#x9;&#x9;stmtQuery2.setString(2,permisionKey);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot; stmt :: &quot;+stmtQuery2);&#xA;&#x9;&#x9;&#x9;&#x9;stmtQuery2.executeQuery();&#xA;&#x9;&#x9;&#x9;} finally {&#xA;&#x9;&#x9;&#x9;&#x9;if(stmtQuery2 != null) stmtQuery2.close();&#xA;&#x9;&#x9;&#x9;&#x9;lookup.disconnect(conn);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;catch (qe)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;println(&quot;deleteGenRefData query error &quot;+qe);&#xA;&#x9;&#x9;}&#xA;&#x9;    return null;&#xA;&#x9;}&#xA;&#xA;&#x9;public insertDiscrepancy(String vesVoy, String value,String unitId,String typeCode,String sealNbr,String tempReq,String grossWt,String tareWt,String unitVesVoy,Connection conn) {&#xA;&#x9;&#x9;PreparedStatement stmt = null;&#xA;&#x9;&#x9;PreparedStatement checkStmt = null;&#xA;&#x9;&#x9;ResultSet rs = null;&#xA;&#x9;&#x9;GvyRefDataLookup lookup = new GvyRefDataLookup();&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;String checkData = &quot;SELECT * FROM TOSCSTMMGR.TOS_CLIENT_VES_DISCREPANCY_MT WHERE VESVOY = ? AND VALUE = ? AND CONTAINER_ID = ?&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;checkData:::&quot;+checkData);&#xA;&#x9;&#x9;&#x9;&#x9;checkStmt = conn.prepareStatement(checkData);&#xA;&#x9;&#x9;&#x9;&#x9;checkStmt.setString(1,vesVoy);&#xA;&#x9;&#x9;&#x9;&#x9;checkStmt.setString(2,value);&#xA;&#x9;&#x9;&#x9;&#x9;checkStmt.setString(3,unitId);&#xA;&#x9;&#x9;&#x9;&#x9;rs = checkStmt.executeQuery();&#xA;&#x9;&#x9;&#x9;&#x9;if(rs.next()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Resultset :: &quot;+ rs);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(rs.getString(&quot;CONTAINER_ID&quot;) + &quot; Already exists in the table&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rs.close();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;checkStmt.close()&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String sql = &quot;INSERT INTO TOSCSTMMGR.TOS_CLIENT_VES_DISCREPANCY_MT VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;sqlQuery  &quot;+sql);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;stmt = conn.prepareStatement(sql);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;stmt.setString(1,vesVoy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;stmt.setString(2,value);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;stmt.setString(3,unitId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;stmt.setString(4,typeCode);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;stmt.setString(5,sealNbr);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;stmt.setString(6,tempReq);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;stmt.setString(7,grossWt);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;stmt.setString(8,tareWt);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;stmt.setString(9,unitVesVoy);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot; stmt :: &quot;+stmt);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;stmt.executeQuery();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;} finally {&#xA;&#x9;    &#x9;&#x9;if(stmt != null) stmt.close();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;lookup.disconnect(conn);&#xA;&#x9;    &#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (qe)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;println(&quot;deleteGenRefData query error &quot;+qe);&#xA;&#x9;&#x9;}&#xA;&#x9;    return null;&#xA;&#x9;}&#xA;&#xA;public ResultSet getDiscrepancyData(String vesVoy, Connection conn) {&#xA;&#x9;&#x9;PreparedStatement stmt = null;&#xA;&#x9;&#x9;ResultSet rs = null;&#xA;&#xA;&#x9;      try {&#xA;&#x9;&#x9;  String sql = &quot;SELECT * FROM TOSCSTMMGR.TOS_CLIENT_VES_DISCREPANCY_MT WHERE VESVOY = ? ORDER BY CONTAINER_ID, VALUE&quot;;&#xA;&#x9;&#x9;  println(&quot;SQL :::&quot;+sql);&#xA;&#x9;&#x9;  stmt = conn.prepareStatement(sql);&#xA;&#x9;&#x9;  stmt.setString(1,vesVoy);&#xA;&#x9;&#x9;  rs = stmt.executeQuery();&#xA;&#x9;    } catch(Exception e) {&#xA;&#x9;    &#x9;println(&quot;Excpetion in the query :::: &quot;+ e);&#xA;&#x9;    }&#xA;&#x9;    return rs;&#xA;&#x9;}&#xA;&#xA;public delDiscrepancyData(String vesVoy, Connection conn) {&#xA;&#x9;&#x9;PreparedStatement stmt = null;&#xA;&#x9;      try {&#xA;&#x9;&#x9;  String sql = &quot;DELETE FROM TOSCSTMMGR.TOS_CLIENT_VES_DISCREPANCY_MT WHERE VESVOY = ?&quot;&#xA;&#x9;&#x9;  println(&quot;SQL :::&quot;+sql);&#xA;&#x9;&#x9;  stmt = conn.prepareStatement(sql);&#xA;&#x9;&#x9;  stmt.setString(1,vesVoy);&#xA;&#x9;&#x9;  stmt.executeQuery();&#xA;&#x9;    } catch(Exception e) {&#xA;&#x9;    &#x9;println(&quot;Excpetion in the query :::: &quot;+ e);&#xA;&#x9;    }&#xA;&#x9;}&#xA;&#xA;public String lookupNv1(String vesvoy, Connection conn) {&#xA;&#x9;&#x9;PreparedStatement stmt = null;&#xA;&#x9;&#x9;ResultSet rs = null;&#xA;&#x9;&#x9;//Connection conn;&#xA;&#x9;&#x9;def cnt = 0;&#xA;&#x9;      try {&#xA;&#x9;&#x9;  //conn = connect();&#xA;&#x9;&#x9;  String sql = &quot;select count(*) from tos_process_logger_mt l where l.vesvoy = ?&quot;;&#xA;&#x9;&#x9;  stmt = conn.prepareStatement(sql);&#xA;&#x9;&#x9;  stmt.setString(1,vesvoy);&#xA;&#x9;&#x9;  rs = stmt.executeQuery();&#xA;&#xA;&#x9;     &#x9; if(rs.next()) {&#xA;&#x9;    &#x9;  &#x9;cnt =  rs.getString(1);&#xA;&#x9;    &#x9;  &#x9;if(cnt == null) cnt = 0;&#xA;&#x9;      &#x9;}&#xA;&#xA;&#x9;    } finally {&#xA;&#x9;    &#x9;if(stmt != null) stmt.close();&#xA;&#x9;    &#x9;if(rs != null ) rs.close();&#xA;&#x9;    }&#xA;&#x9;    return cnt;&#xA;&#x9;}&#xA;&#xA;public synchronized String lookupNv(String vesVoy) {&#xA;&#x9;&#x9;GvyRefDataLookup lookup = new GvyRefDataLookup();&#xA;&#x9;&#x9;Connection conn;&#xA;&#x9;&#x9;def vesNvCnt = 0;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;conn = lookup.connect();&#xA;&#x9;&#x9;&#x9;vesNvCnt = lookup.lookupNv1(vesVoy, conn);&#xA;&#x9;&#x9;&#x9;println(&quot;nvCnt from TDP      :::&quot;+vesNvCnt);&#xA;&#x9;&#x9;} finally {&#xA;&#x9;&#x9;&#x9;lookup.disconnect(conn);&#xA;&#x9;&#x9;}&#xA;       return vesNvCnt&#xA;&#x9;}&#xA;&#xA;public String lookupPodForAK(String dest) {&#xA;&#x9;&#x9;PreparedStatement stmt = null;&#xA;&#x9;&#x9;ResultSet rs = null;&#xA;&#x9;&#x9;Connection conn;&#xA;&#x9;      def result = null;&#xA;&#x9;      try {&#xA;&#x9;&#x9;  conn = connect();&#xA;&#x9;&#x9;  String sql = &quot;select pod1_id from TOS_DEST_POD_LOOKUP l where l.dest_id = ?&quot;;&#xA;&#x9;&#x9;  stmt = conn.prepareStatement(sql);&#xA;&#x9;&#x9;  stmt.setString(1,dest);&#xA;&#x9;&#x9;  rs = stmt.executeQuery();&#xA;&#x9;      if(rs.next()) {&#xA;println(&quot;going inside&quot;);&#xA;&#x9;    &#x9;  result =  rs.getString(1);&#xA;&#x9;    &#x9; &#xA;&#x9;      }&#xA;&#xA;&#x9;    } finally {&#xA;&#x9;    &#x9;if(stmt != null) stmt.close();&#xA;&#x9;    &#x9;if(rs != null ) rs.close();&#xA;&#x9;    &#x9;disconnect(conn);&#xA;&#x9;    &#x9;conn = null;&#xA;&#x9;    }&#xA;println(&quot;db pod : &quot;+result);&#xA;&#x9;    return result;&#xA;&#xA;&#x9;}&#xA;&#xA;public String lookupPodForAKinCAS(String dest, String unitId, String bkgId){&#xA;&#x9;def inj = new GroovyInjectionBase();&#xA;&#x9;def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;);&#xA;def emailFrom = &quot;1aktosdevteam@matson.com&quot;;&#xA;def emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;String stateCodeAK = &quot;&lt;stateCode&gt;AK&lt;/stateCode&gt;&quot;;&#xA;String stateCode = &quot;stateCode&quot;;&#xA;&#x9;String pod = &quot;&quot;;&#xA;&#x9;GeneralReference genRef = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;CASPODCHECK&quot;, &quot;URL&quot;);&#xA;&#x9;URL url = new URL(genRef.getRefValue1() + dest);&#xA;       &#xA;        DefaultClientConfig clientConfig1 = new DefaultClientConfig();&#xA;        clientConfig1.getProperties().put(ClientConfig.PROPERTY_CONNECT_TIMEOUT, Integer.parseInt(genRef.getRefValue2()));&#xA;        clientConfig1.getProperties().put(ClientConfig.PROPERTY_READ_TIMEOUT, Integer.parseInt(genRef.getRefValue3()));&#xA;        Client client = Client.create(clientConfig1);&#xA;&#xA;        WebResource resource = client.resource(url.toString());&#xA;        ClientResponse response = (ClientResponse) resource.accept(MediaType.APPLICATION_XML).get(ClientResponse.class);&#xA;        if (response.getStatus() != 200) {&#xA;            println(&quot;Request failed&quot;);&#xA;            println(response.toString());&#xA;        } else {&#xA;            println(&quot;Request Success&quot;);&#xA;            println(response.toString());&#xA;        }&#xA;        String xmlResponse = response.getEntity(String.class);&#xA;        println(xmlResponse);&#xA;        StringBuffer content = new StringBuffer();&#xA;&#x9;content.append(&quot;\nUnable to determine the right POD for the destination : &quot;+dest+&quot;, for the unit &quot;+unitId+&quot;.&quot;);&#xA;&#x9;content.append(&quot;\nPlease review or update the correct POD for this container manually.&quot;);&#xA;&#x9;content.append(&quot;\n\n&quot;);&#xA;&#x9;content.append(xmlResponse);&#xA;&#xA;&#x9;&#x9;def emailBody = content.toString();&#xA;&#x9;&#x9;if(xmlResponse.contains(stateCode)){&#xA;&#x9;&#x9;if(xmlResponse.contains(stateCodeAK)){&#xA;&#x9;&#x9; pod = &quot;ANK&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;pod = &quot;TAC&quot;;&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;&#x9;}else{&#xA;&#x9;&#x9; emailSender.custSendEmail(emailFrom,emailTo,&quot;Error : Unable to determine POD during LNK process for unit &quot;+unitId,emailBody);&#xA;&#x9;&#x9;}&#xA;println('POD ::: '+pod);&#xA;&#x9;&#x9;return pod;&#xA;&#x9;}&#xA;public void setUnitPod(Unit unit, String pod){&#xA;def resolvedPod = RoutingPoint.findRoutingPoint(pod);&#xA;unit.getUnitRouting().setRtgPOD1(resolvedPod);&#xA;}&#xA;&#xA;}" />
<digital-asset id="GvyCmisEventUnitStuff" short-description="GvyCmisEventUnitStuff" is-pre-deployed="N" groovy-code="import com.navis.argo.ContextHelper&#xA;&#xA;public class GvyCmisEventUnitStuff&#xA;{&#xA;   public String processUnitStuff(String xmlGvyData, String comodtiy, Object gvyCmisUtil)&#xA;   {&#xA;      def xmlGvyString = xmlGvyData&#xA;      try&#xA;     {&#xA;         if(comodtiy.equals('AUTO')){&#xA;             xmlGvyString = setCommodityAutoFields(xmlGvyString,gvyCmisUtil)&#xA;          }&#xA;          else{&#xA;             xmlGvyString = setCommodityNonAutoFields(xmlGvyString,gvyCmisUtil)&#xA;         }&#xA;         xmlGvyString = setUnitStuffFields(xmlGvyString,gvyCmisUtil)&#xA;     }catch(Exception e){&#xA;         e.printStackTrace()&#xA;     }&#xA;      return xmlGvyString&#xA;   }&#xA;&#xA;   public String setCommodityAutoFields(String xmlGvyData, Object gvyCmisUtil)&#xA;   {&#xA;      def xmlGvyString = xmlGvyData&#xA;      xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;hazF=&quot;,&quot;Y&quot;)&#xA;      xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;cargoNotes=&quot;,&quot;AUTOMOBILE&quot;)&#xA;      xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;shipper=&quot;,&quot;AUTO&quot;)&#xA;&#xA;      return xmlGvyString&#xA;   }&#xA;&#xA;   public String setCommodityNonAutoFields(String xmlGvyData, Object gvyCmisUtil)&#xA;   {&#xA;      def xmlGvyString = xmlGvyData&#xA;      xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;commodity=&quot;,&quot;null&quot;)&#xA;&#xA;      return xmlGvyString&#xA;   }&#xA;&#xA;   public String setUnitStuffFields(String xmlGvyData, Object gvyCmisUtil)&#xA;   {&#xA;      def xmlGvyString = xmlGvyData&#xA;      xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dPort=&quot;,ContextHelper.getThreadFacility().getFcyId())&#xA;      xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dischargePort=&quot;,ContextHelper.getThreadFacility().getFcyId())&#xA;      xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dir=&quot;,&quot;IN&quot;)&#xA;      xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;truck=&quot;,&quot;null&quot;)&#xA;      xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;leg=&quot;,&quot;null&quot;)&#xA;      xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;misc1=&quot;,&quot;null&quot;)&#xA;&#xA;      return xmlGvyString&#xA;   }&#xA;}" />
<digital-asset id="GvyCmisActionDetail" short-description="GvyCmisActionDetail" is-pre-deployed="N" groovy-code="/*&#xA;*  Change   Changer  Date       Desc&#xA;*  A1       GR       08/30/10   Commented out HazOpenCloseFlag&#xA;*  A2       GR       09/01/10   Added Additional Blank Fields for Acets (SN4Q change)&#xA;*  A3       GR       09/15/10   DUE Date Formatted&#xA;*  A4       GR       10/15/10   Added last Free Date value &amp; formatting&#xA; * A5       LC       10/29/12   Add condition to get departed ufv for NIS detention&#xA;*/&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;&#xA;import java.text.DateFormat;&#xA;&#xA;public class GvyCmisActionDetail {&#xA;    def gvyEventUtil = null;&#xA;    GroovyApi gvyApi = new GroovyApi();&#xA;&#xA;    public String doIt(Object gvyTxtMsgFmt, Object event, Object gvyBaseClass, Object unit)&#xA;    {&#xA;        String eventType =  event.getEventTypeId()&#xA;        try&#xA;        {&#xA;            println(&quot;In Class GvyCmisActionDetail.doIt()&quot;)&#xA;            //ACTION&#xA;            def action = ''&#xA;            def actionAttr = gvyTxtMsgFmt.doIt('action',action)&#xA;&#xA;            //Event Type&#xA;&#xA;            //DATE &amp; TIME&#xA;            def evtAppliedDt = event.getEvntAppliedDate()&#xA;            def zone =  unit.getUnitComplex().getTimeZone();&#xA;            gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;            def aDate  = gvyEventUtil.formatDate(evtAppliedDt,zone)&#xA;            def aTime = gvyEventUtil.formatTime(evtAppliedDt,zone)&#xA;            def aDateAttr = gvyTxtMsgFmt.doIt('aDate',aDate)&#xA;            def aTimeAttr = gvyTxtMsgFmt.doIt('aTime',aTime)&#xA;&#xA;            //DOER&#xA;            def doer = event.getEvntAppliedBy()&#xA;            try&#xA;            {&#xA;                String[] doerArr = doer.split(&quot;:&quot;);&#xA;                if(doerArr != null)&#xA;                {&#xA;                    if(doerArr.length == 1){&#xA;                        doer = doerArr[0] ;&#xA;                    }&#xA;                    else if(doerArr.length == 2){&#xA;                        doer = doerArr[1];&#xA;                    }&#xA;                    else if(doerArr.length == 3){&#xA;                        doer = doerArr[1];&#xA;                    }&#xA;                    else if(doerArr.length &gt; 3 ){&#xA;                        doer = doerArr[2];&#xA;                    }&#xA;                }&#xA;                if(eventType.equals('UNIT_IN_GATE') || eventType.equals('UNIT_DELIVER'))&#xA;                {&#xA;                    doer = getGateLaneIdDoer(doer,unit,gvyBaseClass,eventType)&#xA;                }&#xA;&#xA;            }catch(Exception e){&#xA;                e.printStackTrace()&#xA;            }&#xA;            def doerAttr = gvyTxtMsgFmt.doIt('doer',doer)&#xA;&#xA;            //SECTION CODE - Currently hardcoded&#xA;            def sectionCode = '%'&#xA;            def equiClass =unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;            def equiClassKey = equiClass != null ? equiClass.getKey() : equiClass&#xA;            if(!equiClassKey.equals('CHASSIS')){&#xA;                sectionCode = 'Z'&#xA;            }&#xA;            def sectionCodeAttr = gvyTxtMsgFmt.doIt('sectionCode',sectionCode)&#xA;&#xA;            //LAST ACTION&#xA;            def lastAction = ''&#xA;            def lastActionAttr = gvyTxtMsgFmt.doIt('lastAction',lastAction)&#xA;&#xA;            //LAST ADATE&#xA;            def lastADate = aDate&#xA;            def lastADateAttr = gvyTxtMsgFmt.doIt('lastADate',lastADate)&#xA;&#xA;            //LAST ATIME&#xA;            def lastATime = aTime&#xA;            def lastATimeAttr = gvyTxtMsgFmt.doIt('lastATime',lastATime)&#xA;&#xA;            //LAST DOER&#xA;            def lastDoer = doer&#xA;            def lastDoerAttr = gvyTxtMsgFmt.doIt('lastDoer',lastDoer)&#xA;&#xA;            //Cmis BLANK FIELDS&#xA;            def blankFieldAttr = blankFields(gvyTxtMsgFmt)&#xA;&#xA;            //Gems Blank Fields&#xA;            def gemsBlankFldAttr = gemsAdditionalFields(unit,event,gvyTxtMsgFmt,gvyBaseClass)&#xA;&#xA;            def  actionFieldAttr = actionAttr+aDateAttr+aTimeAttr+doerAttr+sectionCodeAttr+lastActionAttr+lastADateAttr+lastATimeAttr+lastDoerAttr+blankFieldAttr+gemsBlankFldAttr&#xA;&#xA;&#xA;            return  actionFieldAttr&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;&#xA;    }&#xA;&#xA;    //Appending Blank Fields For Cmis Processing  (Not Req in CMIS)&#xA;    public String blankFields(Object gvyTxtMsgFmt)&#xA;    {&#xA;        //HAZFLAG OPEN/CLOSE&#xA;        /*  def hazOpenCloseFlag=''&#xA;          def hazOpenCloseFlagAttr=gvyTxtMsgFmt.doIt('hazOpenCloseFlag',hazOpenCloseFlag)*/&#xA;&#xA;        //AEI&#xA;        def aei = ''&#xA;        def aeiAttr = gvyTxtMsgFmt.doIt('aei',aei)&#xA;&#xA;        //DSS&#xA;        def _dss = '%'&#xA;        def dssAttr = gvyTxtMsgFmt.doIt('dss',_dss)&#xA;&#xA;        //ERF&#xA;        def erf = ''&#xA;        def erfAttr = gvyTxtMsgFmt.doIt('erf',erf)&#xA;&#xA;        def blankFields = aeiAttr+dssAttr+erfAttr&#xA;&#xA;        return blankFields&#xA;    }&#xA;&#xA;    public String getGateLaneIdDoer(String evntDoer, Object unit, Object gvyBaseClass,String eventType)&#xA;    {&#xA;        def doer = evntDoer&#xA;        def laneId = ''&#xA;&#xA;        def groupCode = unit.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;);&#xA;        groupCode = groupCode != null ? groupCode : ''&#xA;&#xA;        def ibCarrierVisitGkey = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvdGkey&quot;)&#xA;        def obCarrierVisitGkey = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvdGkey&quot;)&#xA;        def gvyGateObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisGateData&quot;);&#xA;        def ingateId = ibCarrierVisitGkey != null ? gvyGateObj.getGateId(ibCarrierVisitGkey) : ''&#xA;        def outgateId = obCarrierVisitGkey != null ? gvyGateObj.getGateId(obCarrierVisitGkey) : ''&#xA;&#xA;        if(doer.equals('passpass')){&#xA;            doer = '8'+doer&#xA;        }&#xA;        else if(ingateId.equals('PIER2') &amp;&amp; eventType.equals('UNIT_IN_GATE')){&#xA;            doer = '7'+doer&#xA;        }&#xA;        else if(outgateId.equals('PIER2') &amp;&amp; eventType.equals('UNIT_DELIVER')){&#xA;            doer = '9'+doer&#xA;        }&#xA;        else if(ingateId.equals('WO GATE') &amp;&amp; eventType.equals('UNIT_IN_GATE')){&#xA;            doer = '10'+doer&#xA;        }&#xA;        else if(outgateId.equals('WO GATE') &amp;&amp; eventType.equals('UNIT_DELIVER')){&#xA;            doer = '11'+doer&#xA;        }&#xA;        else if(eventType.equals('UNIT_IN_GATE')){&#xA;            laneId = gvyGateObj.getEntryLaneId(ibCarrierVisitGkey)&#xA;            doer = laneId+doer&#xA;        }&#xA;        else if(eventType.equals('UNIT_DELIVER')){&#xA;            println(&quot;doer on unit deliver ::&quot;+doer)&#xA;            laneId = gvyGateObj.getExitLaneId(obCarrierVisitGkey)&#xA;            doer = laneId+doer&#xA;        }&#xA;        return doer.trim()&#xA;    }&#xA;&#xA;    //Added Additional Fields for Gems&#xA;    public String gemsAdditionalFields(Object unit,Object event,Object gvyTxtMsgFmt,Object gvyBaseClass)&#xA;    {&#xA;        def gemsFldAttr = '';&#xA;        try{&#xA;            def dtnAvailDt = 'null'&#xA;            def dtnDueDt = 'null'&#xA;            def lastfreeDayStr = 'null'&#xA;            def lastFreeStgDt = 'null'&#xA;            def OldVesvoy = '%'&#xA;            def lineTime = '%'&#xA;            def tractorNbr = '%'&#xA;            def vNumber = '%'&#xA;            def chassAei = '%'&#xA;            def mgAei = '%'&#xA;            def chasdamageCode='%'&#xA;            def fcy;&#xA;            def ufv;&#xA;&#xA;            /* First attempts to get the avail date from an active ufv&#xA;              however if it is null then it will get the avail date from a depart&#xA;              ufv (for NIS detention)&#xA;            */&#xA;&#xA;            dtnAvailDt = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate02&quot;);&#xA;&#xA;            if(dtnAvailDt.equals(null)) {&#xA;                fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;                ufv = unit.getUfvForFacilityCompletedOnly(fcy); //get ufv departed unit&#xA;                if (ufv != null) {&#xA;                    dtnAvailDt = ufv.getFieldValue(&quot;ufvFlexDate02&quot;);&#xA;                    dtnDueDt = ufv.getFieldValue(&quot;ufvFlexDate03&quot;);&#xA;                    lastfreeDayStr = ufv.getFieldValue(&quot;ufvCalculatedLastFreeDay&quot;);&#xA;                }&#xA;            } else {&#xA;                dtnDueDt = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate03&quot;);&#xA;                lastfreeDayStr = unit.getFieldValue(&quot;unitActiveUfv.ufvCalculatedLastFreeDay&quot;);&#xA;            }&#xA;&#xA;            dtnAvailDt = (dtnAvailDt == null || &quot;NULL&quot;.equalsIgnoreCase(dtnAvailDt) || dtnAvailDt == &quot;&quot;) ? null :&#xA;                    gvyEventUtil.dateFormat(dtnAvailDt, 'MM/dd/yyyy');//A3&#xA;            def dtnAvailDtAttr = gvyTxtMsgFmt.doIt('availDt', dtnAvailDt);//A3&#xA;&#xA;            dtnDueDt = ((dtnDueDt == null || &quot;NULL&quot;.equalsIgnoreCase(dtnDueDt)) || dtnDueDt == &quot;&quot;) ? null : gvyEventUtil.dateFormat(dtnDueDt, 'MM/dd/yyyy');&#xA;            def dtnDueDtAttr = gvyTxtMsgFmt.doIt('dtnDueDt', dtnDueDt);&#xA;&#xA;            Date lastfreeDate = getlastFreeDate(dtnAvailDt, lastfreeDayStr, gvyBaseClass)&#xA;            lastFreeStgDt = lastfreeDate != null ? gvyEventUtil.dateFormat(lastfreeDate,'MM/dd/yyyy') : lastfreeDate&#xA;            def lastFreeStgDtAttr =  gvyTxtMsgFmt.doIt('lastFreeStgDt',lastFreeStgDt)&#xA;&#xA;            def OldVesvoyAttr =  gvyTxtMsgFmt.doIt('oldVesvoy',OldVesvoy)&#xA;            def lineTimeAttr =  gvyTxtMsgFmt.doIt('lineTime',lineTime)&#xA;            def tractorNbrAttr =  gvyTxtMsgFmt.doIt('tractorNbr',tractorNbr)&#xA;            def vNumberAttr =  gvyTxtMsgFmt.doIt('vNumber',vNumber)&#xA;            def chassAeiAttr =  gvyTxtMsgFmt.doIt('chassAei',chassAei)&#xA;            def mgAeiAttr =  gvyTxtMsgFmt.doIt('mgAei',mgAei)&#xA;            def chsDmgCodeAttr =  gvyTxtMsgFmt.doIt('chasdamageCode',chasdamageCode)&#xA;&#xA;            gemsFldAttr =  dtnAvailDtAttr+dtnDueDtAttr+lastFreeStgDtAttr+OldVesvoyAttr+lineTimeAttr+tractorNbrAttr+vNumberAttr+chassAeiAttr+mgAeiAttr+chsDmgCodeAttr&#xA;        }catch(Exception e){&#xA;            gvyApi.log(&quot;Exception in GvyCmisActionDetail.gemsAdditionalFields() &quot; + e);&#xA;        }&#xA;        return gemsFldAttr&#xA;    }&#xA;&#xA;&#xA;    public Date getlastFreeDate(Object availDate, String lastfreeDay, Object gvyBaseClass)&#xA;    {&#xA;        Date lastFreeDate = null;&#xA;&#xA;        if(availDate == null){&#xA;            lastFreeDate = null&#xA;        }&#xA;        else if (lastfreeDay != null &amp;&amp; lastfreeDay.indexOf(&quot;no&quot;) == -1)&#xA;        {&#xA;            def gvyUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;            DateFormat formatter = new java.text.SimpleDateFormat(&quot;yyyy-MMM-dd&quot;);&#xA;            lastFreeDate = (Date)formatter.parse(lastfreeDay);&#xA;        }else if (lastfreeDay != null &amp;&amp; lastfreeDay.indexOf(&quot;no&quot;) != -1) {&#xA;            lastFreeDate = null&#xA;        }&#xA;        return lastFreeDate&#xA;    }&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyEventSpecificFldValue" short-description="GvyEventSpecificFldValue" is-pre-deployed="N" groovy-code="/*&#xA;* SrNo Doer  Date       Change&#xA;* A1   GR    08/22/10   SN4Q change : Add parameters to method getRetCustomerAssign and action CLS for Acets&#xA;* A2   GR    10/06/10   Added Vesvoy, Actual Values for UNIT_STUFF&#xA;* A3   KR    08/28/13   Added: Pass trucker to the WO TRANSFER EVENT.&#xA;*/&#xA;&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.hibernate.CarinaPersistenceCallback&#xA;import com.navis.framework.persistence.hibernate.PersistenceTemplate&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.util.TransactionParms&#xA;import com.navis.framework.util.message.MessageCollector&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.units.EqBaseOrder&#xA;import com.navis.inventory.business.units.EqBaseOrderItem&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.orders.business.eqorders.EquipmentOrder&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.rules.EventType;&#xA;&#xA;public class GvyEventSpecificFldValue {&#xA;&#xA;    //For COMMUNITY_SERVICE_UNASSIGN&#xA;public String getCommunityServiceUnAssign(String xmlGvyData)&#xA;{&#xA;    def  xmlGvyString = xmlGvyData&#xA;    xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;truck=&quot;,&quot;null&quot;,null,null,null);&#xA;    xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;consignee=&quot;,&quot;null&quot;,null,null,null);&#xA;    xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;shipper=&quot;,&quot;null&quot;,null,null,null);&#xA;    xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;cargoNotes=&quot;,&quot;null&quot;,null,null,null);&#xA;    return xmlGvyString;&#xA;}&#xA;&#xA;//TRANSFER EVENT CHANGE&#xA;public String getTransferEventChanges(String xmlGvyData, String trucker) // A3&#xA;{&#xA;    def  xmlGvyString = xmlGvyData&#xA;    xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;truck=&quot;,&quot;%&quot;,null,null,null);&#xA;&#xA;    return xmlGvyString;&#xA;}&#xA;&#xA;//TRANSFER CANCEL EVENT&#xA;public String getTransferCancelEvent(String xmlGvyData, String trucker, String commodity)&#xA;{&#xA;    def  xmlGvyString = xmlGvyData&#xA;    xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;truck=&quot;,&quot;%&quot;,null,null,null);&#xA;&#xA;    return xmlGvyString;&#xA;}&#xA;&#xA;//YB ASSIGN/UNASSIGN EVENT&#xA;public String getYBEvent(String xmlGvyData, String trucker, String msgType)&#xA;{&#xA;    def  xmlGvyString = xmlGvyData&#xA;    if(trucker == null || trucker.length() == 0) {&#xA;        xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;truck=&quot;,&quot;%&quot;,null,null,null);&#xA;    }else{&#xA;        xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;truck=&quot;,trucker,null,null,null);&#xA;    }&#xA;&#xA;    return xmlGvyString;&#xA;}&#xA;&#xA;&#xA;//MDA_ASSIGN and  RETURN_TO_CUSTOMER_ASSIGN&#xA;public String getRetCustomerAssign(String xmlGvyData,Object unit, Object gvyCmisUtil,Object gvyBaseClass)&#xA;{&#xA;    def xmlGvyString = xmlGvyData&#xA;    try&#xA;    {&#xA;        def lkpLocType=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;        lkpLocType = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;&#xA;        def locationStatus = lkpLocType.equals(&quot;TRUCK&quot;) ? '3' : ''&#xA;        def planDisp = getFieldValues(xmlGvyString, &quot;planDisp=&quot;);&#xA;        if(locationStatus.equals('3')){&#xA;            xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;locationStatus=&quot;,planDisp,null,null,null);&#xA;            xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;planDisp=&quot;,&quot;null&quot;,null,null,null);&#xA;            //-- A1 IF on TRUCK &amp; DEPARTED CLS ELSE PDU&#xA;            if(UfvTransitStateEnum.S70_DEPARTED.equals(unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;))){&#xA;                xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;action=&quot;,&quot;CLS&quot;,null,null,null);&#xA;                xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;lastAction=&quot;,&quot;CLS&quot;,null,null,null);&#xA;            }&#xA;        }&#xA;    }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    }&#xA;&#xA;    return xmlGvyString;&#xA;}&#xA;&#xA;//UNIT_STUFF&#xA;public String getEventUnitStuff(String xmlGvyData, String commodity, Object unit, Object event)&#xA;{&#xA;    def  xmlGvyString = xmlGvyData&#xA;    def equiType=unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;)&#xA;    equiType = equiType != null ? equiType : ''&#xA;    commodity = commodity != null ? commodity : ''&#xA;&#xA;    def eventObj = event.getEvent()&#xA;    def doer = eventObj.getEvntAppliedBy();&#xA;    def cmisAction = 'LDC'&#xA;    try&#xA;    {&#xA;        if(equiType.startsWith(&quot;F&quot;) &amp;&amp; (commodity.equals('AUTO') || commodity.equals('AUTOCY') || commodity.equals('AUTOCON'))){&#xA;            if(!doer.contains('ACETS')){ cmisAction = 'LDR' }&#xA;            else{ cmisAction = 'ALDR' }&#xA;        }&#xA;        else if(commodity!= null &amp;&amp; (commodity.equals('AUTO') || commodity.equals('AUTOCY') || commodity.equals('AUTOCON') ) ){&#xA;            if(!doer.contains('ACETS')){ cmisAction = 'LDA'  }&#xA;            else{  cmisAction = 'ALDA'  }&#xA;        }&#xA;        else{&#xA;            if(!doer.contains('ACETS')){ cmisAction = 'LDC'  }&#xA;            else{ cmisAction = 'ALDC' }&#xA;        }&#xA;&#xA;        //A2&#xA;        def loadPort = unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;)&#xA;        def dischargePort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;&#xA;        def unitRouting = unit.getUnitRouting();&#xA;        def declaredObCvObj = unitRouting.getRtgDeclaredCv();&#xA;        def facility = com.navis.argo.ContextHelper.getThreadFacility()&#xA;        //setting the Intended OB carrier&#xA;        unit.getUfvForFacilityNewest(facility).setUfvIntendedObCv(declaredObCvObj);&#xA;        unit.getUfvForFacilityNewest(facility).setUfvActualObCv(declaredObCvObj);&#xA;&#xA;        def declaredObCv = &quot;&quot;+declaredObCvObj&#xA;        def actualVessel = declaredObCv.length() &gt; 5 ? declaredObCv.substring(0,3) : 'null'&#xA;        def actualVoyage = declaredObCv.length() &gt; 5 ? declaredObCv.substring(3) : 'null'&#xA;        def leg = loadPort+'_'+dischargePort&#xA;&#xA;&#xA;        //A2&#xA;        xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;vesvoy=&quot;,declaredObCv,null,null,null)&#xA;        xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;actualVessel=&quot;,actualVessel,null,null,null)&#xA;        xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;actualVoyage=&quot;,actualVoyage,null,null,null)&#xA;        xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;leg=&quot;,leg,null,null,null)&#xA;&#xA;        xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;lastAction=&quot;,cmisAction,null,null,null);&#xA;        xmlGvyString = addEventSpecificFldValue(xmlGvyString,&quot;action=&quot;,cmisAction,null,null,null);&#xA;&#xA;    }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    }&#xA;    return xmlGvyString;&#xA;}&#xA;&#xA;//Added for Transload Stuff&#xA;&#xA;public String getEventTransloadUnitStuff(String xmlGvyData, String commodity, Object unit, Object event)&#xA;{&#xA;    def  xmlGvyString = xmlGvyData&#xA;    Event gvyEventObj = event.getEvent()&#xA;    String eventType =  gvyEventObj.getEventTypeId()&#xA;    def equiType=unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;)&#xA;    equiType = equiType != null ? equiType : ''&#xA;    commodity = commodity != null ? commodity : ''&#xA;&#xA;    def eventObj = event.getEvent()&#xA;    def doer = eventObj.getEvntAppliedBy();&#xA;    def cmisAction = 'LDC'&#xA;    try {&#xA;        if (equiType.startsWith(&quot;F&quot;) &amp;&amp; (commodity.equals('AUTO') || commodity.equals('AUTOCY') || commodity.equals('AUTOCON'))) {&#xA;            if (!doer.contains('ACETS')) {&#xA;                cmisAction = 'LDR'&#xA;            } else {&#xA;                cmisAction = 'ALDR'&#xA;            }&#xA;        } else if (commodity != null &amp;&amp; (commodity.equals('AUTO') || commodity.equals('AUTOCY') || commodity.equals('AUTOCON'))) {&#xA;            if (!doer.contains('ACETS')) {&#xA;                cmisAction = 'LDA'&#xA;            } else {&#xA;                cmisAction = 'ALDA'&#xA;            }&#xA;        } else {&#xA;            if (!doer.contains('ACETS')) {&#xA;                cmisAction = 'LDC'&#xA;            } else {&#xA;                cmisAction = 'ALDC'&#xA;            }&#xA;        }&#xA;        //A2&#xA;        def declaredObCvObj = null;&#xA;        def loadPort = unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;)&#xA;        def dischargePort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;        def unitRouting = unit.getUnitRouting();&#xA;        declaredObCvObj = unitRouting.getRtgDeclaredCv();&#xA;        def facility = com.navis.argo.ContextHelper.getThreadFacility()&#xA;        UnitFacilityVisit unitFacilityVisit = unit.getUfvForFacilityNewest(facility);&#xA;        //Start-if event is Unit Transload to full event then get the declaredObCvObj from booking&#xA;        if (eventType.equalsIgnoreCase(&quot;UNIT_TRANSLOAD_TO_FULL&quot;) &amp;&amp; UnitCategoryEnum.EXPORT.equals(unit.getUnitCategory()) ) {&#xA;            CarrierVisit visit = null;&#xA;            EqBaseOrderItem orderItem = null;&#xA;            EqBaseOrder baseOrder = null;&#xA;            EquipmentOrder eqOrder = null;&#xA;            if (unit != null) {&#xA;                orderItem = unit.getUnitPrimaryUe().getUeDepartureOrderItem();&#xA;            }&#xA;            if (orderItem != null) {&#xA;                baseOrder = orderItem.getEqboiOrder();&#xA;            }&#xA;            if (baseOrder != null) {&#xA;                eqOrder = EquipmentOrder.resolveEqoFromEqbo(baseOrder);&#xA;             }&#xA;            if(eqOrder!=null) {&#xA;                visit = eqOrder.getEqoVesselVisit();&#xA;            }&#xA;&#xA;            if (visit != null) {&#xA;                declaredObCvObj = visit.getOutboundCv();&#xA;            }&#xA;            if(declaredObCvObj!=null) {&#xA;                unitFacilityVisit.setUfvIntendedObCv(declaredObCvObj);&#xA;                unitFacilityVisit.setUfvActualObCv(declaredObCvObj);&#xA;            }&#xA;&#xA;        }else if (eventType.equalsIgnoreCase(&quot;UNIT_TRANSLOAD_TO_FULL&quot;) &amp;&amp; UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory())) {&#xA;            unitFacilityVisit.setUfvIntendedObCv(declaredObCvObj);&#xA;            unitFacilityVisit.setUfvActualObCv(declaredObCvObj);&#xA;            declaredObCvObj =getFieldValues(xmlGvyString,&quot;vesvoy=&quot;);&#xA;            if(declaredObCvObj!=null) {&#xA;                unitFacilityVisit.setUfvActualIbCv(CarrierVisit.findVesselVisit(facility, declaredObCvObj));&#xA;            }&#xA;        }else if (eventType.equalsIgnoreCase(&quot;UNIT_TRANSLOAD_TO_FULL&quot;) &amp;&amp; UnitCategoryEnum.THROUGH.equals(unit.getUnitCategory())) {&#xA;            declaredObCvObj =getFieldValues(xmlGvyString,&quot;vesvoy=&quot;);&#xA;            if(declaredObCvObj!=null) {&#xA;                unitFacilityVisit.setUfvIntendedObCv(CarrierVisit.findVesselVisit(facility, declaredObCvObj));&#xA;                unitFacilityVisit.setUfvActualObCv(CarrierVisit.findVesselVisit(facility, declaredObCvObj));&#xA;                unitFacilityVisit.setUfvActualIbCv(CarrierVisit.findVesselVisit(facility, declaredObCvObj));&#xA;            }&#xA;        }&#xA;&#xA;        def declaredObCv = &quot;&quot; + declaredObCvObj&#xA;        def actualVessel = declaredObCv.length() &gt; 5 ? declaredObCv.substring(0, 3) : 'null'&#xA;        def actualVoyage = declaredObCv.length() &gt; 5 ? declaredObCv.substring(3) : 'null'&#xA;        def leg = loadPort + '_' + dischargePort&#xA;&#xA;&#xA;        //A2&#xA;        xmlGvyString = addEventSpecificFldValue(xmlGvyString, &quot;vesvoy=&quot;, declaredObCv, null, null, null)&#xA;        xmlGvyString = addEventSpecificFldValue(xmlGvyString, &quot;actualVessel=&quot;, actualVessel, null, null, null)&#xA;        xmlGvyString = addEventSpecificFldValue(xmlGvyString, &quot;actualVoyage=&quot;, actualVoyage, null, null, null)&#xA;        xmlGvyString = addEventSpecificFldValue(xmlGvyString, &quot;leg=&quot;, leg, null, null, null)&#xA;&#xA;        xmlGvyString = addEventSpecificFldValue(xmlGvyString, &quot;lastAction=&quot;, cmisAction, null, null, null);&#xA;        xmlGvyString = addEventSpecificFldValue(xmlGvyString, &quot;lastAction=&quot;, cmisAction, null, null, null);&#xA;        xmlGvyString = addEventSpecificFldValue(xmlGvyString, &quot;lastAction=&quot;, cmisAction, null, null, null);&#xA;        xmlGvyString = addEventSpecificFldValue(xmlGvyString, &quot;action=&quot;, cmisAction, null, null, null);&#xA;        //call record service event EQUIPMENT_BKG_HAZ_UPDATE&#xA;        recordBookingHazUpdateEvent(event);&#xA;    } catch (Exception e) {&#xA;        e.printStackTrace()&#xA;    }&#xA;&#xA;    println(&quot;GetEventUnitStuff  Final String xmlGvyString : &quot;+xmlGvyString);&#xA;    return xmlGvyString;&#xA;}&#xA;&#xA;/**&#xA; * recordBookingHazUpdateEvent&#xA; */&#xA;private void recordBookingHazUpdateEvent(Object inEvent){&#xA;     ServicesManager _sm = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;    //get the event&#xA;    Event thisEvent = inEvent.getEvent();&#xA;    GroovyApi groovyApi = new GroovyApi();&#xA;    if (thisEvent == null) {&#xA;        return;&#xA;    }&#xA;    //get the Unit&#xA;    def unit =  inEvent.getEntity();&#xA;    if (unit == null) {&#xA;        return;&#xA;    }&#xA;&#xA;    Set fieldChanges = thisEvent.getEvntFieldChanges();&#xA;    final UserContext userContext = ContextHelper.getThreadUserContext();&#xA;    PersistenceTemplate template = new PersistenceTemplate(userContext);&#xA;    MessageCollector mc = template.invoke(new CarinaPersistenceCallback() {&#xA;        @Override&#xA;        protected void doInTransaction() {&#xA;            try {&#xA;                TransactionParms.getBoundParms().setUserContext(userContext);&#xA;                String evnt= &quot;EQUIPMENT_BKG_HAZ_UPDATE&quot;;&#xA;                EventType event = EventType.findEventType(evnt);&#xA;                if (event != null &amp;&amp; !_sm.hasEventTypeBeenRecorded(event, unit)) {&#xA;                    Date eventTime = new Date(System.currentTimeMillis());&#xA;                    _sm.recordEvent(event, &quot;EQUIPMENT_BKG_HAZ_UPDATE&quot;, null, null, unit, (FieldChanges) null, eventTime);&#xA;&#xA;                }&#xA;&#xA;            }&#xA;            finally {&#xA;                // restore original user context&#xA;                TransactionParms.getBoundParms().setUserContext(userContext);&#xA;            }&#xA;        }&#xA;    });&#xA;&#xA;}&#xA;&#xA;public static String getFieldValues(String xmlGvyString, String field)&#xA;{&#xA;    String fieldValue = ''&#xA;    try&#xA;    {&#xA;        def fieldIndx = xmlGvyString.indexOf(field);&#xA;        def equalsIndx = xmlGvyString.indexOf(&quot;=&quot;,fieldIndx);&#xA;        def nextspace = xmlGvyString.indexOf(&quot;'&quot;, equalsIndx+2);&#xA;        fieldValue  = xmlGvyString.substring(equalsIndx+2, nextspace);&#xA;        //println(&quot;equalsIndx:&quot;+equalsIndx+&quot;  nextspace:&quot;+nextspace+&quot; oldValue:&quot;+fieldValue);&#xA;    }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    }&#xA;    return fieldValue;&#xA;}&#xA;&#xA;public String addEventSpecificFldValue(String xmlGvyData,String field,String newFieldValue,String appendDir,String StripDir,String stripChar)&#xA;{&#xA;    String newValue = null;&#xA;    String oldValue = null;&#xA;    String xmlGvyString = xmlGvyData;&#xA;    int fieldIndx = xmlGvyString.indexOf(field);&#xA;    try&#xA;    {&#xA;        if(fieldIndx != -1)&#xA;        {&#xA;            int equalsIndx = xmlGvyString.indexOf(&quot;=&quot;,fieldIndx);&#xA;            int nextspace = xmlGvyString.indexOf(&quot;'&quot;, equalsIndx+2);&#xA;            oldValue = xmlGvyString.substring(equalsIndx+2, nextspace);&#xA;            //Append New Value&#xA;            if(appendDir != null )&#xA;            {&#xA;                if(appendDir.equals(&quot;L&quot;)){&#xA;                    newValue =  oldValue.equals('null') ? newFieldValue : newFieldValue+oldValue;&#xA;                    //  println(&quot;Append_Left:&quot;+newValue);&#xA;                }&#xA;                else if(appendDir.equals(&quot;R&quot;)){&#xA;                    newValue = oldValue.equals('null') ? newFieldValue : oldValue+newFieldValue;&#xA;                    //  println(&quot;Append_Right:&quot;+newValue);&#xA;                }&#xA;            }&#xA;            //Strip Value&#xA;            else if(StripDir != null)&#xA;            {&#xA;                if(StripDir.equals(&quot;L&quot;))&#xA;                {&#xA;                    if(oldValue.startsWith(newFieldValue)){&#xA;                        newValue = oldValue.indexOf(stripChar) != -1 ?   oldValue.substring(oldValue.indexOf(stripChar)+1): oldValue;&#xA;                    }else{&#xA;                        newValue = oldValue.equals(newFieldValue) ? 'null' : oldValue ;&#xA;                    }&#xA;                    // println(&quot;Strip_Left:&quot;+newValue);&#xA;                }&#xA;                else if(StripDir.equals(&quot;R&quot;))&#xA;                {&#xA;                    if(oldValue.endsWith(newFieldValue)){&#xA;                        newValue = oldValue.indexOf(stripChar) != -1 ? oldValue.substring(0,oldValue.indexOf(stripChar)): oldValue;&#xA;                    }else{&#xA;                        newValue = oldValue.equals(newFieldValue) ? 'null' : oldValue ;&#xA;                    }&#xA;                }&#xA;            }//Strip Ends&#xA;            else if(oldValue.equals(&quot;null&quot;) ){&#xA;                newValue = newFieldValue;&#xA;            }&#xA;            else{&#xA;                //CHECK FOR VALUE HERE&#xA;                newValue = newFieldValue;&#xA;            }&#xA;            println(&quot;oldValue ::&quot;+oldValue+&quot;  newValue :::&quot;+newValue)&#xA;            String oldXmlValue = field+&quot;'&quot;+oldValue+&quot;'&quot;;&#xA;            String newXmlValue = field+&quot;'&quot;+newValue+&quot;'&quot;;&#xA;            // println(&quot;oldXmlValue ::&quot;+oldXmlValue+&quot;  newXmlValue :::&quot;+newXmlValue);&#xA;            xmlGvyString = xmlGvyString.replace(oldXmlValue, newXmlValue);&#xA;        }//IF Ends&#xA;    }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    }&#xA;    return xmlGvyString;&#xA;}// Method addEventSpecificFldValue Ends&#xA;}//Class Ends" />
<digital-asset id="GvyUnitInGateTempCheck" short-description="GvyUnitInGateTempCheck" is-pre-deployed="N" groovy-code="/*&#xA;* A1  01/11/10  GR   Temp Discrepancy Check for Import Cntr.&#xA;* A2  01/15/10  GR   Added EmailSender Groovy Code&#xA;* A3  01/18/10  GR   Report Text Formattter Code&#xA;* A4  04/26/10  GR   NumberFormatException check&#xA;* 08/16/11 2.1 Updated Email Method&#xA;* A5  02/17/12  GR  TOS2.1 : Updt Field unitFlexString07 to UfvFlexString07&#xA;* A6  9/25/12   LC  Added check for booking temp = null, set to AMB&#xA;* A7  9/28/12   LC  Fix AMB ingate temp converting to F&#xA;*/&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.inventory.business.units.ReeferRecord&#xA;import com.navis.framework.util.DateUtil;&#xA;import com.navis.argo.ContextHelper;&#xA;&#xA;import java.util.Set&#xA;import java.text.DateFormat;&#xA;import java.text.SimpleDateFormat;&#xA;&#xA;public class GvyUnitInGateTempCheck{&#xA;&#xA;public static String emailfrom = &quot;1aktosdevteam@matson.com&quot;&#xA;public static String emailTo = &quot;1aktosdevteam@matson.com&quot;&#xA;public static String subject = &quot;Booked Temp. Discrepancy&quot;&#xA;public static String IS_AMB = &quot;AMB&quot;;&#xA;&#xA;  public void doIt(Object u, Object event)&#xA;  {&#xA;    def gvyBaseClass = new GroovyInjectionBase()&#xA;     try&#xA;    {&#xA;&#xA;      def unit = event.getEntity();&#xA;      def unitId = unit.getFieldValue(&quot;unitId&quot;);&#xA;      def bookingNumber = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;);&#xA;&#x9;  println(&quot;Calling GvyUnitInGateTempCheck for :::&quot; + unitId);&#xA;      boolean isIngateAmb = false;&#xA;      boolean isExpBookAmb = false;&#xA;       //Added check for SIT&#xA;       if(bookingNumber == null){&#xA;          return&#xA;       }&#xA;&#xA;      def IngateSetPoint = getSetPointTmp(unit);&#xA;      //A7&#xA;      def ingateReqTemp;&#xA;      if(IngateSetPoint == null) {&#xA;          isIngateAmb = true;&#xA;          ingateReqTemp = IS_AMB;&#xA;      }  else {&#xA;        ingateReqTemp = getValue(IngateSetPoint);&#xA;      }&#xA;&#xA;      def expGateBkgReqTemp = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqoiTempRequired&quot;);&#xA;      //A6&#xA;      def expBkgReqTemp;&#xA;      if(expGateBkgReqTemp == null) {&#xA;          isExpBookAmb = true;&#xA;          expBkgReqTemp = IS_AMB;&#xA;      } else {&#xA;          expBkgReqTemp = getValue(expGateBkgReqTemp);&#xA;      }&#xA;      def expBkgPort = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqoDestination&quot;);&#xA;&#xA;      //both booking and ingate temps are AMB&#xA;      if(isExpBookAmb &amp;&amp; isIngateAmb) {&#xA;          return;&#xA;      }&#xA;&#xA;      def ingateReqTempF;&#xA;      def expBkgReqTempF;&#xA;      if(isIngateAmb) {&#xA;          ingateReqTempF = ingateReqTemp;&#xA;      } else {&#xA;          ingateReqTempF = celsiusToFahrenheit(ingateReqTemp);&#xA;      }&#xA;&#xA;      if(isExpBookAmb)  {&#xA;          expBkgReqTempF = expBkgReqTemp;&#xA;      } else {&#xA;          expBkgReqTempF = celsiusToFahrenheit(expBkgReqTemp);&#xA;      }&#xA;      println(&quot;ingateReqTempF :::: expBkgReqTempF ::&quot; + ingateReqTempF  +&quot;::&quot;+ expBkgReqTempF);&#xA;      //first checks if booking OR ingate is AMB, then it'll send an email&#xA;      //then checks if both have valid temp, then compares the values, sends an email if different&#xA;      String body;&#xA;      def gvyEmailSender;&#xA;      GroovyApi gvyApi = new GroovyApi();&#xA;      if((isIngateAmb &amp;&amp; !isExpBookAmb) || (!isIngateAmb &amp;&amp; isExpBookAmb))   {&#xA;          gvyApi.logWarn(&quot;Sending email to notify booking temp discrepancy &quot;);&#xA;          body = generateReport(unitId, bookingNumber, ingateReqTempF, expBkgReqTempF, expBkgPort, &quot;Gate&quot;)&#xA;          gvyEmailSender = gvyBaseClass.getGroovyClassInstance(&quot;EmailSender&quot;);&#xA;          gvyEmailSender.custSendEmail(emailTo, subject, body)&#xA;      } else {&#xA;        int comparisonVal = ingateReqTemp.compareTo(expBkgReqTemp);&#xA;        if(comparisonVal != 0) {&#xA;            gvyApi.logWarn(&quot;Sending email to notify booking temp discrepancy &quot;);&#xA;            body = generateReport(unitId, bookingNumber, ingateReqTempF, expBkgReqTempF, expBkgPort, &quot;Gate&quot;)&#xA;&#x9;&#x9;    gvyEmailSender = gvyBaseClass.getGroovyClassInstance(&quot;EmailSender&quot;);&#xA;&#x9;&#x9;    gvyEmailSender.custSendEmail(emailTo, subject, body)&#xA;        }&#xA;      }&#xA;    }catch(Exception e){&#xA;         GroovyApi.log(&quot;Exception in GvyUnitInGateTempCheck(): &quot; + e);&#xA;    }&#xA;  }&#xA;&#xA;   //A1 - Temp Discrepancy for Import Units&#xA;    public void ImportCntrBkgDiscrepancy(Object event){&#xA;&#x9;def gvyBaseClass = new GroovyInjectionBase()&#xA;     try&#xA;    {&#xA;      def unit = event.getEntity();&#xA;&#x9;  def unitId = unit.getFieldValue(&quot;unitId&quot;)&#xA;      def bookingNumber = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;);&#xA;&#x9;  //Added check for SIT&#xA;       if(bookingNumber == null){&#xA;          return&#xA;       }&#xA;       // Impt unit temp Setting value&#xA;      def IngateSetPoint = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString07&quot;); //A5&#xA;      def ingateReqTemp = IngateSetPoint != null &amp;&amp; IngateSetPoint.trim().length() &gt; 0 ? getValue(IngateSetPoint.replace('F','')) : 0.0&#xA;&#x9;  ingateReqTemp = ingateReqTemp == null ? null : (ingateReqTemp != 0.0 ? fahrenheitToCelsius(ingateReqTemp) : 0.0)&#xA;&#xA;&#x9;  // Impt unit temp Req value&#xA;      def imptGateBkgReqTemp = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqoiTempRequired&quot;);&#xA;      def imptBkgReqTemp = imptGateBkgReqTemp == null ? null : (imptGateBkgReqTemp != null ? getValue(imptGateBkgReqTemp) : 0.0)&#xA;&#xA;      def imptBkgPort = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqoDestination&quot;);&#xA;&#xA;      //Check for Reefer Empty&#xA;      if(ingateReqTemp == 0.0 &amp;&amp;  imptBkgReqTemp == 0.0){&#xA;             return;&#xA;      }&#xA;&#xA;      int comparisonVal = 0;&#xA;      if((ingateReqTemp == null &amp;&amp; imptBkgReqTemp != null) || (imptBkgReqTemp == null &amp;&amp; ingateReqTemp != null)){&#xA;         comparisonVal = -1&#xA;&#x9;  }else{&#xA;&#x9;    comparisonVal = ingateReqTemp.compareTo(imptBkgReqTemp);&#xA;&#x9;  }&#xA;&#xA;      GroovyApi gvyApi = new GroovyApi();&#xA;      if(comparisonVal != 0)&#xA;      {&#xA;          gvyApi.logWarn(&quot;Sending email to notify booking temp discrepancy &quot;);&#xA;&#x9;&#x9;  def ingateReqTempF = ingateReqTemp != null ? celsiusToFahrenheit(ingateReqTemp) : &quot;--&quot;&#xA;          def imptBkgReqTempF = imptBkgReqTemp != null ? celsiusToFahrenheit(imptBkgReqTemp) : &quot;--&quot;&#xA;          String body = generateReport(unitId, bookingNumber, ingateReqTempF, imptBkgReqTempF, imptBkgPort, &quot;Review For Stow&quot;)&#xA;&#x9;&#x9;  def gvyEmailSender = gvyBaseClass.getGroovyClassInstance(&quot;EmailSender&quot;);&#xA;&#x9;&#x9;  gvyEmailSender.custSendEmail(emailTo, subject, body)&#xA;      }&#xA;    }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    }&#xA;  }&#xA;&#xA;&#xA;  public String getTempDecimalValue(Object tempValue)&#xA;  {&#xA;    def reqTemp = ''+tempValue&#xA;    try&#xA;   {&#xA;      if(reqTemp!= null &amp;&amp; reqTemp.trim().length() &gt; 5)&#xA;      {&#xA;        def indx = reqTemp.indexOf(&quot;.&quot;);&#xA;        reqTemp = reqTemp.substring(0,indx+3);&#xA;       }&#xA;&#xA;    }catch(Exception e){&#xA;      e.printStackTrace()&#xA;      throw e&#xA;    }&#xA;     return reqTemp&#xA;  }&#xA;&#xA;  public Object getValue(Object tempvalue)&#xA; {&#xA;    if(tempvalue != null)&#xA;   {&#xA;      double setPoint = new BigDecimal(&quot;&quot;+tempvalue).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();&#xA;      Double setPointTemp = new Double(setPoint)&#xA;      return setPointTemp&#xA;    }&#xA;    return null&#xA;  }&#xA;&#xA;  public Object getSetPointTmp(Object u)&#xA;  {&#xA;     def setPoint = null&#xA;     try&#xA;    {&#xA;       ReeferRecord latestRecord = null;&#xA;       Set reefRecordSet= u.getUnitReeferRecordSet()&#xA;       if (reefRecordSet != null &amp;&amp; reefRecordSet.size() &gt; 0) {&#xA;         Object [] reefRecords  = reefRecordSet.toArray();&#xA;         Arrays.sort(reefRecords);&#xA;         latestRecord = (ReeferRecord)reefRecords[reefRecords.length - 1];&#xA;         setPoint = latestRecord.getRfrecSetPointTmp()&#xA;       }&#xA;    }catch(Exception e){&#xA;      e.printStackTrace()&#xA;      throw e&#xA;    }&#xA;    return setPoint&#xA;  }&#xA;&#xA;  public double fahrenheitToCelsius(Double fahrenheit)&#xA;  {&#xA;     double fahr = (fahrenheit - 32) * 5/9;&#xA;     double result = new BigDecimal(&quot;&quot;+fahr).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();&#xA;     return result;&#xA;  }&#xA;&#xA;  public double celsiusToFahrenheit(Double celsius)&#xA;  {&#xA;&#x9; double fahr = (celsius * 9/5) + 32;&#xA;&#x9; double result = new BigDecimal(&quot;&quot;+fahr).setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue();&#xA;&#x9; return result;&#xA;  }&#xA;&#xA; public String generateReport(String unitId, String bookingNumber, Object ingateReqTemp, Object expBkgReqTemp, String expBkgPort, String noticeFrom) {&#xA;  def timezone = ContextHelper.getThreadUserTimezone();&#xA;  def eventTime = DateUtil.convertDateToLocalTime(new Date(), timezone);&#xA;  StringBuffer header = new StringBuffer();&#xA;  header.append(&quot;    Date:&quot;+eventTime);&#xA;  header.append(&quot;\n\n\n                       MATSON TERMINALS - CONTAINER YARD     &quot;);&#xA;  header.append(&quot;\n\n\n    From    :&quot;+noticeFrom);&#xA;  header.append(&quot;\n    Subject : Booked Temperature Discrepancy&quot;);&#xA;  header.append(&quot;\n\n\n    Container:&quot;+unitId+&quot;   Booking # : &quot;+bookingNumber+&quot;   Gate Temp: &quot;+ingateReqTemp+&quot;   Book Temp: &quot;+expBkgReqTemp+&quot;   Port: &quot;+expBkgPort);&#xA;  header.append(&quot;\n\n\n\n&quot;);&#xA;  return header.toString();&#xA; }&#xA;&#xA;&#xA;}" />
<digital-asset id="GvyClientStateStorageReport" short-description="GvyClientStateStorageReport" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.atoms.CalendarTypeEnum&#xA;import com.navis.argo.business.atoms.EquipRfrTypeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.calendar.ArgoCalendar&#xA;import com.navis.argo.business.calendar.ArgoCalendarEventType&#xA;import com.navis.argo.business.calendar.ArgoCalendarUtil&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.LineOperator&#xA;import com.navis.argo.business.reports.DigitalAsset&#xA;import com.navis.framework.email.DefaultAttachment&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.Ordering&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.vessel.VesselField&#xA;import net.sf.jasperreports.engine.JRDataSource&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource&#xA;import org.apache.commons.lang.time.DateUtils&#xA;import org.springframework.core.io.ByteArrayResource&#xA;&#xA;import java.text.NumberFormat&#xA;import java.text.ParseException&#xA;import java.text.SimpleDateFormat&#xA;&#xA;/**&#xA; * Created with IntelliJ IDEA.&#xA; * User: lcrouch&#xA; * Date: 4/26/13&#xA; * Time: 12:26 PM&#xA; * To change this template use File | Settings | File Templates.&#xA; */&#xA;public class GvyClientStateStorageReport extends GroovyInjectionBase {&#xA;    GroovyApi gvyBaseClass = new GroovyApi();&#xA;    private static ArgoCalendarEventType[] exemptTypes = null;&#xA;    ArrayList&lt;StorageRate&gt; StgRateTable = new ArrayList&lt;StorageRate&gt;();&#xA;    private final String  emailFrom = '1aktosdevteam@matson.com'&#xA;    private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;    //private final String emailTo = &quot;riyer@matson.com&quot;;&#xA;    def inj = null;&#xA;    private final String designName = &quot;CLIENT STATE STORAGE&quot;&#xA;&#xA;    static {&#xA;        exemptTypes = new ArgoCalendarEventType[2];&#xA;        exemptTypes[0] = ArgoCalendarEventType.findOrCreateArgoCalendarEventType(&quot;EXEMPT_DAY&quot;);&#xA;        exemptTypes[1] = ArgoCalendarEventType.findOrCreateArgoCalendarEventType(&quot;GRATIS_DAY&quot;);&#xA;    }&#xA;&#xA;&#xA;&#xA;    public void execute(Map inParameters) {&#xA;&#xA;        println(&quot;Client State Storage Report::starting...&quot;);&#xA;&#xA;        StgRateTable = readStateStorageMediaAsset();&#xA;        ArrayList&lt;StorageReport&gt; ClientList = findAllClientUnits();&#xA;&#xA;        //for (StorageRate rate : StgRateTable) {&#xA;        //System.out.println(rate.getFormattedDate(rate.getStartDate()) + &quot; &quot; + rate.getStgPort() + &quot; &quot; + Integer.toString(rate.getLowRange()) + &quot; &quot; + Integer.toString(rate.getHighRange()) + &quot; &quot; + rate.getFormattedRate() + &quot; &quot; + rate.getCategory());&#xA;        //}&#xA;&#xA;        println(&quot;Client State Storage Report::ending...&quot;);&#xA;    }&#xA;&#xA;    /*&#xA;    * Method finds all NON-MAT Container and Add the cntrs to a list&#xA;    * Returns a List of containers&#xA;    */&#xA;    public ArrayList findAllClientUnits()&#xA;    {&#xA;        ArrayList&lt;StorageReport&gt; clientReport = new ArrayList&lt;StorageReport&gt;();&#xA;        NumberFormat currency = NumberFormat.getCurrencyInstance();&#xA;        ArrayList reportUnitList =  new ArrayList();&#xA;        ArrayList&lt;String&gt; lineOperatorList= new ArrayList&lt;String&gt;();&#xA;        inj = new GroovyInjectionBase();&#xA;        ArrayList&lt;DefaultAttachment&gt; reportsAttachment = null;&#xA;        def messageText = &quot;No Containers for Client State Storage report&quot;;&#xA;&#xA;        try{&#xA;&#xA;            //Gets today's date and calculates the weekending period&#xA;            String date_start;&#xA;            String date_end;&#xA;            //SimpleDateFormat dt = new SimpleDateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;);&#xA;            SimpleDateFormat dt = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;            SimpleDateFormat sdf = new SimpleDateFormat(&quot;MM-dd-yyyy&quot;);&#xA;            SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat(&quot;EEE&quot;);&#xA;&#xA;            Date today = new Date();&#xA;            String dateNow = simpleDateFormat2.format(today.getTime());&#xA;            System.out.println(&quot;Now the date is :=&gt;  &quot; + dateNow);&#xA;            long endDay = 0;&#xA;            long startDay;&#xA;            ArrayList&lt;String&gt; DOW = new ArrayList&lt;String&gt;();&#xA;            DOW.add(0,&quot;SUN&quot;);&#xA;            DOW.add(1,&quot;MON&quot;);&#xA;            DOW.add(2,&quot;TUE&quot;);&#xA;            DOW.add(3,&quot;WED&quot;);&#xA;            DOW.add(4,&quot;THU&quot;);&#xA;            DOW.add(5,&quot;FRI&quot;);&#xA;            DOW.add(6,&quot;SAT&quot;);&#xA;            for (String d: DOW)&#xA;            {&#xA;                if(d.toString().equalsIgnoreCase(dateNow)) {&#xA;                    System.out.println(DOW.indexOf(d) + &quot; &quot; + dateNow.toUpperCase());&#xA;                    endDay = getDayOfWeek(DOW.indexOf(d));&#xA;                }&#xA;&#xA;            }&#xA;            startDay = endDay - ((24*6) * 60 * 60 * 1000);&#xA;            date_start = dt.format(startDay);&#xA;            date_end = dt.format(endDay);&#xA;&#xA;            //***************REMOVE---FOR TESTING ONLY*********************************&#xA;            //date_start = &quot;2014-02-21 00:00:00.0&quot;;&#xA;            //date_end = &quot;2014-02-28 11:59:59.9&quot;;&#xA;            //***************REMOVE---FOR TESTING ONLY*********************************&#xA;&#xA;            println(&quot;start period:&quot;+dt.parse(date_start));&#xA;            println(&quot;end period:&quot;+dt.parse(date_end));&#xA;            Date weekStarting = dt.parse(date_start);&#xA;            Date weekEnding = dt.parse(date_end);&#xA;&#xA;&#xA;            //start query for report&#xA;            Long lineOpGkey = LineOperator.findLineOperatorById(&quot;MAT&quot;).bzuGkey;&#xA;            ArrayList clientVessels = lookupVessel();&#xA;&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;            dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_CATEGORY, UnitCategoryEnum.IMPORT));&#xA;            dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_TRANSIT_STATE, UfvTransitStateEnum.S70_DEPARTED));&#xA;            dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_VISIT_STATE, UnitVisitStateEnum.DEPARTED));&#xA;            dq = dq.addDqPredicate(PredicateFactory.ge(UnitField.UFV_TIME_OUT, weekStarting));&#xA;            dq = dq.addDqPredicate(PredicateFactory.le(UnitField.UFV_TIME_OUT, weekEnding));&#xA;            //dq = dq.addDqPredicate(PredicateFactory.le(UnitField.UFV_UNIT_ID, &quot;SUDU7986373&quot;));&#xA;            dq = dq.addDqPredicate(PredicateFactory.ne(UnitField.UFV_LINE_OPERATOR_GKEY, lineOpGkey))&#xA;            .addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY, UnitCategoryEnum.THROUGH))&#xA;            .addDqOrdering(Ordering.asc(UnitField.UFV_LINE_OPERATOR_GKEY));  //A17&#xA;            println(&quot;dq ====&quot;+dq);&#xA;            List vesVistUnits  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            println(&quot;dq ====&quot;+dq+&quot; unitsList ====&quot;+(vesVistUnits != null ? vesVistUnits.size() : &quot;NO RESULT&quot;));&#xA;&#xA;            //Gets all the unique lineOperators returned from the query and client vessel id&#xA;            if(vesVistUnits != null) {&#xA;                Iterator iter = vesVistUnits.iterator();&#xA;                while(iter.hasNext()) {&#xA;                    UnitFacilityVisit ufv = iter.next();&#xA;                    ufv.ufvUnit.getUnitId();&#xA;                    String lineOp = ufv.ufvUnit.getFieldValue(&quot;unitLineOperator.bzuId&quot;);&#xA;                    println(&quot;::::::::ufv.getUfvActualIbCv():::::::::&quot;+ufv.getUfvActualIbCv().toString().length()+&quot;::&quot;+ufv.ufvUnit.getUnitId());&#xA;                    String vesselId = null;&#xA;                    if (ufv.getUfvActualIbCv().toString().length() &gt;= 3){&#xA;   &#x9;&#x9;&#x9; vesselId = ufv.getUfvActualIbCv().toString().substring(0,3);&#xA;&#x9;&#x9;&#x9;}&#xA;                    println(&quot;::::::::::::::here:::::::::::::::::::::::&quot; + lineOp + &quot;::&quot;+vesselId +&quot;::&quot;+ufv.ufvUnit.getUnitId());&#xA;                    if (!lineOperatorList.contains(lineOp) &amp;&amp; clientVessels.contains(vesselId))  {&#xA;                        lineOperatorList.add(lineOp);&#xA;                    }&#xA;                }&#xA;            }&#xA;            reportsAttachment = new ArrayList&lt;DefaultAttachment&gt;();&#xA;            if(lineOperatorList.size() &gt; 0) {&#xA;                for(String op : lineOperatorList) {&#xA;                    println(&quot;START LINE OPERATOR: &quot;+op);&#xA;                    if(vesVistUnits != null)  {&#xA;                        Iterator iter = vesVistUnits.iterator();&#xA;&#xA;                        println(&quot;-----------------------------------------------------------------------------------------------------&quot;);&#xA;                        println(&quot;CtrNo.        VesVoy     AvailDate      FreeTimeEnding      OutGated    CtrSize   DaysStored   AmtDue&quot;)&#xA;                        println(&quot;------------------------------------------------------------------------------------------------------&quot;);&#xA;&#xA;                        while(iter.hasNext()) {&#xA;&#xA;                            UnitFacilityVisit ufv = iter.next();&#xA;                            String vesselId = null;&#xA;&#x9;&#x9;&#x9;    if (ufv.getUfvActualIbCv().toString().length() &gt;= 3){&#xA;                                vesselId = ufv.getUfvActualIbCv().toString().substring(0,3);&#xA;                            }&#xA;                            if(clientVessels.contains(vesselId)) {&#xA;                                String unitId =  ufv.ufvUnit.getUnitId();&#xA;                                println(&quot;unitId::&quot;+unitId);&#xA;                                HashMap map = null;&#xA;&#xA;                                //gets the inbound vessel visit voyage&#xA;                                String carrierVisitId = ufv.getUfvActualIbCv().toString();&#xA;                                CarrierVisit vesselVisit = CarrierVisit.findVesselVisit(ContextHelper.getThreadFacility(), carrierVisitId);&#xA;                                String vesVoy = carrierVisitId.substring(0,3) + vesselVisit.getCarrierIbVoyNbrOrTrainId();&#xA;                                String lineOp = ufv.ufvUnit.getFieldValue(&quot;unitLineOperator.bzuId&quot;);&#xA;                                def freightKind = ufv.ufvUnit.getUnitFreightKind().getKey();&#xA;                                boolean isReefer = !EquipRfrTypeEnum.NON_RFR.equals(ufv.ufvUnit.getUnitPrimaryUe().getUeEquipment().getEqEquipType().getEqtypRfrType()) ? true : false;&#xA;                                Date availDate = ufv.ufvFlexDate02;&#xA;                                println(&quot;availDate::&quot;+availDate);&#xA;                                if(!availDate.equals(null)){&#xA;                                    def zone = ufv.ufvUnit.getUnitComplex().getTimeZone();&#xA;                                    println(&quot;zone::&quot;+zone);&#xA;                                    Date freeTimeEnding = calcStorageDate(freightKind, isReefer, availDate, zone);&#xA;                                    println(&quot;freeTimeEnding::&quot;+freeTimeEnding);&#xA;                                    Date outgateDate = null;  //accounts for units that have not outgate yet&#xA;                                    if(!ufv.getUfvTimeEcOut().equals(null)){&#xA;                                        outgateDate = ufv.getUfvTimeEcOut();&#xA;                                    }&#xA;                                    println(&quot;outgateDate::&quot;+outgateDate);&#xA;                                    if(isReefer &amp;&amp; freeTimeEnding==null) {&#xA;                                        freeTimeEnding = outgateDate;&#xA;                                        println(&quot;Reefer changing freeTimeEnding::&quot;+freeTimeEnding);&#xA;                                    }&#xA;                                    int containerSize = ufv.ufvUnit.getPrimaryEq().getEqEquipType().getEqtypLengthMm();&#xA;                                    containerSize = (int) Math.round((containerSize/25.4) / 12);&#xA;&#xA;                                    //int daysOver = Math.round((outgateDate.getTime() - freeTimeEnding.getTime())/ (24 * 60 * 60 * 1000)) ;&#xA;                                    int timeDiff;&#xA;                                    if(outgateDate.equals(null) || freeTimeEnding.equals(null)) {&#xA;                                        timeDiff = 0;&#xA;                                    } else {&#xA;                                        timeDiff =  (int) (outgateDate.getTime() - freeTimeEnding.getTime());&#xA;                                    }&#xA;&#xA;                                    int daysOver = 0;&#xA;                                    if(timeDiff &gt; 0) {&#xA;                                        daysOver = (int) (timeDiff)/ (24 * 60 * 60 * 1000);&#xA;                                    }&#xA;                                    //check that there is storage detention and line operator is for the same report&#xA;                                    println(&quot;daysOver and op ::&quot;+daysOver+&quot;::&quot;+op);&#xA;                                    if(daysOver != 0 &amp;&amp; lineOp.equalsIgnoreCase(op)) {&#xA;                                        //calculates the free time ending date and stores it to the ufv&#xA;&#xA;                                        map = new HashMap();&#xA;&#xA;&#xA;                                        //ufv.setFieldValue(&quot;ufvLastFreeDay&quot;, freeTimeEnding);&#xA;                                        StorageReport storageReport = stateStorageCalc(ufv,daysOver,freeTimeEnding,containerSize);&#xA;&#xA;                                        storageReport.setContainerNo(unitId);&#xA;                                        storageReport.setVesVoy(vesVoy);&#xA;                                        storageReport.setAvailDate(availDate);&#xA;                                        storageReport.setFreeTimeEnding(freeTimeEnding);&#xA;                                        storageReport.setOutgateDate(outgateDate);&#xA;                                        storageReport.setContainerSize(Integer.toString(containerSize));&#xA;                                        storageReport.setDaysStored(daysOver);&#xA;&#xA;&#xA;                                        //CONTAINER STATE STORAGE&#xA;                                        map.put(&quot;weekEnding&quot;,sdf.format(weekEnding));&#xA;                                        map.put(&quot;stgType&quot;,storageReport.getStgType());&#xA;                                        map.put(&quot;category&quot;,storageReport.getCategory());&#xA;                                        map.put(&quot;LineOperator&quot;,lineOp);&#xA;                                        map.put(&quot;UnitNbr&quot;, storageReport.getContainerNo());&#xA;                                        map.put(&quot;InboundCarrierId&quot;, storageReport.getVesVoy());&#xA;                                        map.put(&quot;UnitFlexString01&quot;, storageReport.getFormattedDate(storageReport.getAvailDate()));&#xA;                                        map.put(&quot;UnitFlexString02&quot;, storageReport.getFormattedDate(storageReport.getFreeTimeEnding()));&#xA;                                        map.put(&quot;UnitFlexString03&quot;, storageReport.getFormattedDate(storageReport.getOutgateDate()));&#xA;                                        map.put(&quot;UnitFlexString04&quot;, storageReport.getContainerSize());&#xA;                                        map.put(&quot;UnitFlexString05&quot;, storageReport.getDaysStored());&#xA;                                        map.put(&quot;UnitFlexString06&quot;, storageReport.getAmountDue());&#xA;&#xA;                                        if(map != null) {&#xA;                                            reportUnitList.add(map);&#xA;                                        }&#xA;&#xA;                                        println(&quot;StgType: &quot;+storageReport.getStgType());&#xA;                                        println(&quot;Category: &quot;+storageReport.getCategory());&#xA;                                        println(storageReport.getContainerNo()+&quot;   &quot;+storageReport.getVesVoy()+&quot;     &quot;+storageReport.getFormattedDate(storageReport.getAvailDate())+&#xA;                                                &quot;        &quot;+storageReport.getFormattedDate(storageReport.getFreeTimeEnding())+&quot;          &quot;+storageReport.getFormattedDate(storageReport.getOutgateDate())+&#xA;                                                &quot;    &quot;+storageReport.getContainerSize()+&quot;          &quot;+storageReport.getDaysStored()+&quot;        &quot;+storageReport.getAmountDue());&#xA;                                        println(&quot;------------------------------------------------------------------------------------------------------&quot;);&#xA;&#xA;&#xA;                                    }&#xA;                                } else {&#xA;                                    println(&quot;AvailDate is null!&quot;);&#xA;                                }&#xA;                            }&#xA;                        }&#xA;&#xA;                        //CONTAINER STAT STORAGE&#xA;&#xA;                        if (reportUnitList.size() &gt; 0) {&#xA;&#x9;&#x9;&#x9;    messageText = &quot;Attached report(s) for Client State Storage&quot;;&#xA;                            HashMap parameters = new HashMap();&#xA;&#xA;                           /* //Create and Mail Report&#xA;                            JRDataSource ds = new JRMapCollectionDataSource(reportUnitList);&#xA;&#xA;                            //HashMap reportDesignsmap = new HashMap();&#xA;                            //reportDesignsmap.put(&quot;CLIENT STATE STORAGE&quot;,ds);&#xA;&#xA;                            //def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;                            //reportRunner.emailReports(reportDesignsmap,parameters, emailTo, &quot;Client State Storage&quot; ,&quot;Attached report for Client State Storage&quot;);&#xA;                            println(&quot;reportUnitList ------- Success&quot;)*/&#xA;&#xA;                            // Above code commented on 7/30/2013,&#xA;                            // Collect all the reports here for each line operator and send them in only one email at the end&#xA;                            JRDataSource dataSource = new JRMapCollectionDataSource(reportUnitList)&#xA;                            String attachFileName = op + &quot;-&quot; + designName&#xA;                            def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;)&#xA;                            DefaultAttachment attachment = reportRunner.generateReportAttachment(designName, dataSource, parameters, attachFileName)&#xA;                            if(attachment!=null)&#xA;                                reportsAttachment.add(attachment)&#xA;                            else&#xA;                                println(&quot;Attachment null&quot;)&#xA;                        }&#xA;                        else {&#xA;                            println(&quot;reportUnitList ------- No data to print&quot;)&#xA;                        }&#xA;&#xA;                    }&#xA;                    //clear report list for next line operator&#xA;                    reportUnitList.clear();&#xA;                    println(&quot;END LINE OPERATOR: &quot;+op);&#xA;                }&#xA;            }&#xA;            // Send all the report attachments&#xA;                        &#xA;            inj.getGroovyClassInstance(&quot;ReportRunner&quot;).emailReportAttachments(reportsAttachment, emailFrom, emailTo, &quot;Client State Storage Report&quot;, messageText)&#xA;&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return clientReport;&#xA;    }&#xA;&#xA;    public static long getDayOfWeek(int d) {&#xA;&#xA;        Date today = new Date();&#xA;        long day;&#xA;&#xA;        switch (d) {&#xA;            case 0:&#xA;                day =  (today.getTime() - ((1*24) * 60 * 60 * 1000));&#xA;                break;&#xA;            case 1:&#xA;                day =  (today.getTime() - (((2*24) * 60 * 60 * 1000)));&#xA;                break;&#xA;            case 2:&#xA;                day =  (today.getTime() - (((24*3) * 60 * 60 * 1000)));&#xA;                break;&#xA;            case 3:&#xA;                day =  (today.getTime() - (((24*4) * 60 * 60 * 1000)));&#xA;                break;&#xA;            case 4:&#xA;                day = (today.getTime() - (((24*5) * 60 * 60 * 1000)));&#xA;                break;&#xA;            case 5:&#xA;                day = (today.getTime() - (((24*6) * 60 * 60 * 1000)));&#xA;                break;&#xA;            case 6:&#xA;                day =  (today.getTime());&#xA;                break;&#xA;            default:&#xA;                day = (today.getTime());&#xA;                break;&#xA;&#xA;        }&#xA;        return day;&#xA;&#xA;    }&#xA;&#xA;    public StorageReport stateStorageCalc(UnitFacilityVisit ufv, int daysOver, Date freeTimeEnding, int containerSize) {&#xA;        String dport =  ufv.ufvUnit.getUnitRouting().getRtgPOD1().getPointId();&#xA;        String equiOperator = ufv.ufvUnit.getUnitLineOperator().getBzuId();&#xA;        double storage = 0.0;&#xA;        StorageReport storageReport = new StorageReport();&#xA;&#xA;&#xA;        Date calcDate = DateUtils.addDays(freeTimeEnding,1);&#xA;&#xA;        int temp_count = 1;&#xA;        String stgPort;&#xA;        StorageRate clientRate = new StorageRate();&#xA;&#xA;        if(dport.equalsIgnoreCase(ContextHelper.getThreadFacility().getFcyId())) {&#xA;            stgPort = dport;&#xA;        } else {&#xA;            stgPort = &quot;NIS&quot;;&#xA;        }&#xA;&#xA;        while(temp_count &lt;= daysOver) {&#xA;            clientRate = getRateInfoState(calcDate, stgPort, temp_count);&#xA;&#xA;            calcDate = DateUtils.addDays(calcDate,1);&#xA;            temp_count = temp_count + 1;&#xA;            storage = storage + (clientRate.getRate() * containerSize);&#xA;        }&#xA;        storageReport.setCategory(clientRate.getCategory());&#xA;        storageReport.setStgType(clientRate.getStgType());&#xA;        storageReport.setAmountDue(storage);&#xA;&#xA;&#xA;&#xA;        return storageReport;&#xA;&#xA;&#xA;&#xA;    }&#xA;&#xA;    public StorageRate getRateInfoState(Date calcDate, String stgPort, int temp_count) {&#xA;        TreeMap&lt;Date, String&gt; map = new TreeMap&lt;Date, String&gt;();&#xA;        StorageRate clientRate = new StorageRate();&#xA;        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;dd-MMM-yy&quot;);&#xA;        String calcDateStr = simpleDateFormat.format(calcDate);&#xA;        Date matchDate = new Date();&#xA;        //println(&quot;calcDateStr = &quot; + calcDateStr);&#xA;        try {&#xA;            matchDate = simpleDateFormat.parse(calcDateStr);&#xA;        } catch (ParseException e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;&#xA;        for (StorageRate rate : StgRateTable) {&#xA;            //println(&quot;Formatted Start Date &quot; + rate.getFormattedDate(rate.getStartDate()));&#xA;            map.put(rate.getStartDate(),rate.getFormattedDate(rate.getStartDate()));&#xA;&#xA;        }&#xA;&#xA;        String effDate = getClosestPrevious(map,matchDate);&#xA;        //System.out.println(getClosestPrevious(map,matchDate));&#xA;&#xA;        for (StorageRate rate : StgRateTable) {&#xA;            if(rate.getFormattedDate(rate.getStartDate()).equals(effDate) &amp;&amp; rate.getStgPort().equals(stgPort)){&#xA;                if(( rate.getLowRange() &lt;= temp_count) &amp;&amp; (temp_count &lt;= rate.getHighRange())) {&#xA;                    clientRate.setRate(rate.getRate());&#xA;                    clientRate.setCategory(rate.getCategory());&#xA;                    clientRate.setStgPort(rate.getStgPort());&#xA;                    clientRate.setHighRange(rate.getHighRange());&#xA;                    clientRate.setLowRange(rate.getLowRange());&#xA;                    clientRate.setStgType(rate.getCategory());&#xA;                    /*&#xA;                    println(&quot;Start Date: &quot; + clientRate.getFormattedDate(rate.getStartDate())&#xA;                    + &quot;  Stg Port: &quot; + clientRate.getStgPort()&#xA;                    + &quot;  LowRange: &quot; + clientRate.getLowRange()&#xA;                    + &quot;  HighRange: &quot; + clientRate.getHighRange()&#xA;                    + &quot;  Rate: &quot; + clientRate.getFormattedRate()&#xA;                    + &quot;  Category: &quot; + clientRate.getCategory()&#xA;                    + &quot;  Stg Type: &quot; + clientRate.getStgType());&#xA;                    */&#xA;                    break;&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        return clientRate;&#xA;&#xA;    }&#xA;&#xA;    private static String getClosestPrevious(TreeMap&lt;Date, String&gt; map, Date date) {&#xA;        return map.get(map.headMap(date, true).lastKey());&#xA;    }&#xA;&#xA;&#xA;    public java.util.Date calcStorageDate(String freightKind, boolean isReefer, java.util.Date availDate, TimeZone zone) {&#xA;        if(isReefer)&#xA;            return null;&#xA;&#xA;        if(freightKind.equals(&quot;MTY&quot;))&#xA;            return addBusinessDate(availDate, zone, 7);&#xA;&#xA;        return addBusinessDate(availDate, zone, 5);&#xA;    }&#xA;&#xA;    public Date addBusinessDate(Date startDate, TimeZone zone, int addDays) {&#xA;        int altdays = addDays; //A5&#xA;        //println(&quot;addBusinessDate : altdays=&quot;+altdays+&quot;   addDays=&quot;+addDays)&#xA;        //def exemptCalendarEvents = AppCalendarUtil.getEvents(exemptTypes, ContextHelper.getThreadUserContext());&#xA;        CalendarTypeEnum calendarTypeEnum = CalendarTypeEnum.getEnum(&quot;STORAGE&quot;);&#xA;        ArgoCalendar argoCal = ArgoCalendar.findDefaultCalendar(calendarTypeEnum);&#xA;        def exemptCalendarEvents = ArgoCalendarUtil.getEvents(exemptTypes, argoCal);&#xA;        Date endDate = ArgoCalendarUtil.getEndDate(startDate, zone, altdays, exemptCalendarEvents, exemptTypes);&#xA;        if (endDate != null) {&#xA;            Calendar calendar = Calendar.getInstance(zone);&#xA;            calendar.setTimeInMillis(endDate.getTime());&#xA;            calendar.add(Calendar.DAY_OF_YEAR, -1);&#xA;            endDate = calendar.getTime();&#xA;        }&#xA;        return endDate;&#xA;    }&#xA;&#xA;&#xA;    public ArrayList readStateStorageMediaAsset()&#xA;    {&#xA;&#xA;        try{&#xA;            ByteArrayResource byteResource  = new ByteArrayResource(DigitalAsset.findImage(&quot;STATE_STORAGE&quot;));&#xA;            InputStream inputStream = byteResource.getInputStream();&#xA;            DataInputStream dStream = new DataInputStream(inputStream);&#xA;            BufferedReader br = new BufferedReader(new InputStreamReader(dStream));&#xA;            int count = 0;&#xA;            String line;&#xA;&#xA;            while ((line = br.readLine()) != null) {&#xA;                if(count != 0) {&#xA;                    StgRateTable = processLine(line,count);&#xA;                }&#xA;                count++;&#xA;            }&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return StgRateTable;&#xA;    }&#xA;&#xA;    //process each line of code from the media asset file&#xA;    public ArrayList processLine(String msg, int lineNum)&#xA;    {&#xA;&#xA;        try{&#xA;            String[] loadFile = msg.split(&quot;,&quot;);&#xA;            if(lineNum == 0) {&#xA;&#xA;                String StartDate = loadFile[0];&#xA;                String StgPort = loadFile[1];&#xA;                String LowRange = loadFile[2];&#xA;                String HighRange = loadFile[3];&#xA;                String Rate = loadFile[4];&#xA;                String Category = loadFile[5];&#xA;&#xA;            } else {&#xA;&#xA;                String StartDate = loadFile[0];&#xA;                String StgPort = loadFile[1];&#xA;                String LowRange = loadFile[2];&#xA;                String HighRange = loadFile[3];&#xA;                String Rate = loadFile[4];&#xA;                String Category = loadFile[5];&#xA;                StorageRate stgRate = new StorageRate();&#xA;&#xA;                stgRate.setStartDate(StartDate);&#xA;                stgRate.setStgPort(StgPort);&#xA;                stgRate.setLowRange(Integer.parseInt(LowRange));&#xA;                stgRate.setHighRange(Integer.parseInt(HighRange));&#xA;                stgRate.setRate(Double.parseDouble(Rate));&#xA;                stgRate.setCategory(Category);&#xA;                //println(&quot;Start Date::&quot; + stgRate.getFormattedDate(stgRate.getStartDate()) + &quot; StgPort::&quot; + stgRate.getStgPort() + &quot; LowRange::&quot; + Integer.toString(stgRate.getLowRange()) + &quot; HighRange::&quot; + Integer.toString(stgRate.getHighRange()) + &quot; StgRate::&quot; + stgRate.getFormattedRate() + &quot; Category::&quot; + stgRate.getCategory());&#xA;&#xA;&#xA;                StgRateTable.add(stgRate);&#xA;&#xA;            }&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return StgRateTable;&#xA;    }&#xA;&#xA;    public ArrayList lookupVessel() {&#xA;        ArrayList vessels = new ArrayList();&#xA;&#xA;        try {&#xA;            //search for all vessels except for Matson (303726)&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;Vessel&quot;);&#xA;            dq.addDqPredicate(PredicateFactory.ne(VesselField.VES_OWNER,&quot;303726&quot; ));&#xA;            def list = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#xA;            if(list != null) {&#xA;                Iterator iter = list.iterator();&#xA;                while(iter.hasNext()) {&#xA;                    def item = iter.next();&#xA;                    //println(&quot;vessel id::&quot;+item.getFieldValue(&quot;vesId&quot;));&#xA;                    //println(&quot;vessel owner::&quot;+item.getFieldValue(&quot;vesOwner&quot;));&#xA;                    vessels.add(item.getFieldValue(&quot;vesId&quot;));&#xA;                }&#xA;            }&#xA;&#xA;        } catch (Exception e) {&#xA;            println(&quot;Exception in Vessel lookup  &quot;+e.getMessage());&#xA;            e.printStackTrace();&#xA;        }&#xA;&#xA;        return vessels;&#xA;    }&#xA;&#xA;&#xA;}&#xA;&#xA;/*&#xA;StorageRate class to hold all the rate information&#xA; */&#xA;class StorageRate {&#xA;    private Date startDate;&#xA;    private String stgPort;&#xA;    private int lowRange;&#xA;    private int highRange;&#xA;    private double rate;&#xA;    private String category;&#xA;    private String stgType;&#xA;&#xA;    public StorageRate(){&#xA;        stgPort = &quot;&quot;;&#xA;        stgType = &quot;&quot;;&#xA;        lowRange = 0;&#xA;        highRange = 0;&#xA;        rate = 0;&#xA;        category = &quot;&quot;;&#xA;    }&#xA;&#xA;    public void setStartDate(String date) {&#xA;        Date startDate = setFormatDate(date);&#xA;        this.startDate =  startDate;&#xA;&#xA;    }&#xA;&#xA;    public Date setFormatDate(String date) {&#xA;        //println(&quot;Date &quot; + date);&#xA;        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;dd-MMM-yy&quot;);&#xA;        Date startDate;&#xA;        try {&#xA;            startDate = simpleDateFormat.parse(date);&#xA;            //println(&quot;Formatted &quot; + startDate);&#xA;        } catch (ParseException e1) {&#xA;            e1.printStackTrace();&#xA;        }&#xA;        return startDate;&#xA;    }&#xA;&#xA;    public Date getStartDate(){&#xA;        return startDate;&#xA;    }&#xA;&#xA;    public String getFormattedDate(Date date) {&#xA;        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;dd-MMM-yy&quot;);&#xA;&#xA;        String startDate = simpleDateFormat.format(date);&#xA;&#xA;        return startDate;&#xA;    }&#xA;&#xA;    public void setStgPort(String stgPort) {&#xA;        this.stgPort = stgPort;&#xA;    }&#xA;&#xA;    public String getStgPort() {&#xA;        return stgPort;&#xA;    }&#xA;&#xA;    public void setLowRange(int lowRange) {&#xA;        this.lowRange = lowRange;&#xA;    }&#xA;&#xA;    public int getLowRange() {&#xA;        return lowRange;&#xA;    }&#xA;&#xA;&#xA;    public void setHighRange(int highRange) {&#xA;        this.highRange = highRange;&#xA;    }&#xA;&#xA;    public int getHighRange() {&#xA;        return highRange;&#xA;    }&#xA;&#xA;&#xA;    public void setRate(double rate) {&#xA;        this.rate = rate;&#xA;    }&#xA;&#xA;    public double getRate() {&#xA;        return rate;&#xA;    }&#xA;&#xA;    public String getFormattedRate() {&#xA;        NumberFormat currency = NumberFormat.getCurrencyInstance();&#xA;        return currency.format(rate);&#xA;    }&#xA;&#xA;    public void setCategory(String category) {&#xA;        this.category = category;&#xA;    }&#xA;&#xA;    public String getCategory() {&#xA;        return category;&#xA;    }&#xA;&#xA;    public void setStgType(String stgType) {&#xA;        if(stgType.equals(&quot;00-05&quot;) || stgType.equals(&quot;06-10&quot;)) {&#xA;            this.stgType = &quot;Storage&quot;;&#xA;        }&#xA;        if(stgType.equals(&quot;11-15&quot;) || stgType.equals(&quot;16+&quot;)) {&#xA;            this.stgType = &quot;Demmurage&quot;;&#xA;        }&#xA;    }&#xA;&#xA;    public String getStgType() {&#xA;        return stgType;&#xA;    }&#xA;&#xA;}&#xA;&#xA;class StorageReport {&#xA;    private String containerNo;&#xA;    private String vesVoy;&#xA;    private String stgType;&#xA;    private String category;&#xA;    private Date availDate;&#xA;    private Date freeTimeEnding;&#xA;    private Date outgateDate;&#xA;    private String containerSize;&#xA;    private int daysStored;&#xA;    private double amountDue;&#xA;&#xA;&#xA;    public StorageReport(){&#xA;        containerNo = &quot;&quot;;&#xA;        vesVoy = &quot;&quot;;&#xA;        stgType = &quot;&quot;;&#xA;        category = &quot;&quot;;&#xA;        availDate = new Date();&#xA;        freeTimeEnding = new Date();&#xA;        outgateDate = new Date();&#xA;        containerSize = &quot;&quot;;&#xA;        daysStored = 0;&#xA;        amountDue = 0.0;&#xA;    }&#xA;&#xA;    public void setContainerNo(String containerNo) {&#xA;        this.containerNo = containerNo;&#xA;    }&#xA;&#xA;    public String getContainerNo() {&#xA;        return containerNo;&#xA;    }&#xA;&#xA;    public void setVesVoy(String vesVoy) {&#xA;        this.vesVoy = vesVoy;&#xA;    }&#xA;&#xA;    public String getVesVoy() {&#xA;        return vesVoy;&#xA;    }&#xA;&#xA;    public void setStgType(String stgType) {&#xA;        this.stgType = stgType;&#xA;    }&#xA;&#xA;    public String getStgType() {&#xA;        return stgType;&#xA;    }&#xA;&#xA;    public void setCategory(String category) {&#xA;        this.category = category;&#xA;    }&#xA;&#xA;    public String getCategory() {&#xA;        return category;&#xA;    }&#xA;&#xA;    public void setAvailDate(Date availDate) {&#xA;        this.availDate = availDate;&#xA;    }&#xA;&#xA;    public Date getAvailDate() {&#xA;        return availDate;&#xA;    }&#xA;&#xA;    public String getFormattedDate(Date date) {&#xA;        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;dd-MMM-yy&quot;);&#xA;&#xA;        String startDate = simpleDateFormat.format(date);&#xA;&#xA;        return startDate;&#xA;    }&#xA;&#xA;    public void setFreeTimeEnding(Date freeTimeEnding) {&#xA;        this.freeTimeEnding = freeTimeEnding;&#xA;    }&#xA;&#xA;    public Date getFreeTimeEnding() {&#xA;        return freeTimeEnding;&#xA;    }&#xA;&#xA;    public void setOutgateDate(Date outgateDate) {&#xA;        this.outgateDate = outgateDate;&#xA;    }&#xA;&#xA;    public Date getOutgateDate(){&#xA;        return outgateDate;&#xA;    }&#xA;&#xA;    public void setContainerSize(String containerSize) {&#xA;        this.containerSize = containerSize;&#xA;    }&#xA;&#xA;    public String getContainerSize() {&#xA;        return containerSize;&#xA;    }&#xA;&#xA;    public void setDaysStored(int daysStored) {&#xA;        this.daysStored = daysStored;&#xA;    }&#xA;&#xA;    public int getDaysStored(){&#xA;        return daysStored;&#xA;    }&#xA;&#xA;    public void setAmountDue(double amountDue)  {&#xA;        this.amountDue = amountDue;&#xA;    }&#xA;&#xA;    public double getAmountDue() {&#xA;        return amountDue;&#xA;    }&#xA;&#xA;    public String getFormattedAmtDue() {&#xA;        NumberFormat currency = NumberFormat.getCurrencyInstance();&#xA;        return currency.format(amountDue);&#xA;    }&#xA;}" />
<digital-asset id="GvyCmisPositionProcessDetailNewVes" short-description="GvyCmisPositionProcessDetailNewVes" is-pre-deployed="N" groovy-code="/*&#xA;* Srno Doer Date       Change&#xA;* A1   GR   06/25/10   Added Check to Overwrite misc1=% Only for LH vessels&#xA;* A2   GR   08/24/10   Added GEN_TRUCK &amp; BARGE to vesvoy=BLANK section&#xA;* A3   GR   08/30/10   Misc1 - value check for IB VygNbr&#xA;* A4   GR   09/13/10   vesvoy condition for SIT (YB units)&#xA;* A5   GR   08/26/10   Added BARGE to misc1=BLANK section&#xA;* A6   GR   09/17/10   Add Reroute criteria to set vesvoy for DAS&#xA;                       if POD updated and its HON or NIS then compute vesvoy for DAS&#xA;* A7   GR   10/03/10   Added null to actual veseel and voyage and compute for unit roll&#xA;* A8   GR   11/17/10   TRUCK value being set to Vessel under else condition&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.vessel.business.atoms.VesselTypeEnum&#xA;import com.navis.vessel.business.operation.VesselClass&#xA;&#xA;public class GvyCmisPositionProcessDetailNewVes {&#xA;&#xA;//MISC1&#xA;    def misc1Value = '%'&#xA;    def aibcarrierMode = ''&#xA;&#xA;    public String doIt(Object u, Object gvyTxtMsgFmt, String eventType, Object event) {&#xA;        def positionProFldAttr = ''&#xA;        try {&#xA;            def gvyBaseClass = new GroovyInjectionBase()&#xA;            def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;            def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;&#xA;            def obcarrierChng = gvyEventUtil.wasFieldChanged(event, &quot;ufvIntendedObCv&quot;)&#xA;            obcarrierChng = obcarrierChng != null ? obcarrierChng : ''&#xA;            //A6&#xA;            //def podChng = gvyEventUtil.wasFieldChanged(event, &quot;rtgPOD1&quot;)&#xA;            //podChng = podChng != null ? podChng : ''&#xA;&#xA;            def previousDischPort = gvyEventUtil.getPreviousPropertyAsString(event, &quot;rtgPOD1&quot;);&#xA;            def gvyDomQueryObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisDomainQueryUtil&quot;)&#xA;            previousDischPort = gvyDomQueryObj.lookupRtgPOD(previousDischPort)&#xA;            previousDischPort = previousDischPort != null ? previousDischPort : &quot;&quot;&#xA;            def category = u.getFieldValue(&quot;unitCategory&quot;);&#xA;&#xA;            def currentDischPort = u.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;            /*def isHawaiiPort = UnitCategoryEnum.IMPORT.equals(category) &amp;&amp;&#xA;                               (ContextHelper.getThreadFacility().getFcyId().equals(previousDischPort) || gvyCmisUtil.isNISPort(previousDischPort)) ||&#xA;                               (ContextHelper.getThreadFacility().getFcyId().equals(currentDischPort) || gvyCmisUtil.isNISPort(currentDischPort))*/&#xA;            //A6 Ends&#xA;            //Verify Event Notes for unitRefersh&#xA;            def gvyEventObj = event.getEvent()&#xA;            def eventNotes = gvyEventObj.getEventNote()&#xA;            eventNotes = eventNotes != null ? eventNotes : &quot;&quot;&#xA;&#xA;            //Verifying if the event Changes the position Field&#xA;            def gvyFldUpdtObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventFieldUpdateFilter&quot;);&#xA;            boolean evntUpdatesFlg = gvyFldUpdtObj.evntFilterOnPositionFldChng(eventType)&#xA;            if (!eventNotes.contains(&quot;Unit Correction&quot;) &amp;&amp; evntUpdatesFlg&#xA;                    || ((eventType.equals('UNIT_REROUTE') /*&amp;&amp; !isHawaiiPort*/) &amp;&amp; (eventType.equals('UNIT_REROUTE') &amp;&amp; obcarrierChng.equals(Boolean.FALSE)))) {&#xA;                positionProFldAttr = positionPercentageValue(gvyTxtMsgFmt)&#xA;                return positionProFldAttr&#xA;            }&#xA;&#xA;            def lkpLocType = u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;            def lkpLocTypeKey = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;&#xA;            def lkpCarrierId = u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocId&quot;)&#xA;&#xA;            def _category = u.getFieldValue(&quot;unitCategory&quot;)&#xA;            def categoryKey = _category != null ? _category.getKey() : ''&#xA;&#xA;            def _transitState = u.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;            def transitStateKey = _transitState != null ? _transitState.getKey() : ''&#xA;&#xA;            def _drayStatus = u.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;            def drayStatusKey = _drayStatus != null ? _drayStatus.getKey() : _drayStatus&#xA;&#xA;            def _freightkind = u.getFieldValue(&quot;unitFreightKind&quot;)&#xA;            def freightkind = _freightkind != null ? _freightkind.getKey() : ''&#xA;&#xA;            def dischPort = u.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;            dischPort = dischPort != null ? dischPort : ''&#xA;&#xA;            def ibVesselType = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;            def ibVesselTypeKey = ibVesselType != null ? ibVesselType.getKey() : gvyCmisUtil.getVesClassTypeWithNoVisitEntry(u)&#xA;&#xA;            def obVesselType = u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;            def obVesselTypeKey = obVesselType != null ? obVesselType.getKey() : ''&#xA;&#xA;            //ReArrange Fields Used by VESVOY / TRUCK / MISC&#xA;            aibcarrierMode = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCarrierMode&quot;)&#xA;            aibcarrierMode = aibcarrierMode != null ? aibcarrierMode.getKey() : ''&#xA;            def inBoundCarrier = aibcarrierMode.equals('VESSEL') ? (ibVesselTypeKey.trim().length() &gt; 1 ? ibVesselTypeKey : 'GEN_VESSEL') : aibcarrierMode&#xA;&#xA;            def aobcarrierMode = u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCarrierMode&quot;)&#xA;            aobcarrierMode = aobcarrierMode != null ? aobcarrierMode.getKey() : ''&#xA;            def outBoundCarrier = aobcarrierMode.equals('VESSEL') ? (obVesselTypeKey.trim().length() &gt; 1 ? obVesselTypeKey : 'GEN_VESSEL') : aobcarrierMode&#xA;&#xA;            def aibcarrierId = ''&#xA;            def aibcarrierOperatorId = ''&#xA;            def aobcarrierId = ''&#xA;&#xA;            //A11 - Change Made for Truck Code and TruckId switch on IB and OB carrier&#xA;            if (aibcarrierMode.equals('TRUCK')) {&#xA;                aibcarrierId = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.carrierOperatorId&quot;)&#xA;                aibcarrierOperatorId = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;)&#xA;            } else {&#xA;                aibcarrierId = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;)&#xA;                aibcarrierOperatorId = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.carrierOperatorId&quot;)&#xA;            }&#xA;            if (aobcarrierMode.equals('TRUCK')) {&#xA;                aobcarrierId = u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.carrierOperatorId&quot;)&#xA;            } else {&#xA;                aobcarrierId = u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;)&#xA;            }&#xA;&#xA;            //A11 - def aibcarrierId=u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;)&#xA;            //A11 - def aibcarrierOperatorId=u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.carrierOperatorId&quot;)&#xA;            def dibcarrierId = u.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;)&#xA;            //A11- def aobcarrierId=u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;)&#xA;            def intdObCarrierId = u.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;)&#xA;            def dobcarrierId = u.getFieldValue(&quot;unitRouting.rtgDeclaredCv.cvId&quot;)&#xA;&#xA;            //VESVOY&#xA;            def idOBCarrierId = intdObCarrierId != null ? intdObCarrierId : dobcarrierId&#xA;            def adIBCarrierId = aibcarrierId != null ? aibcarrierId : dibcarrierId&#xA;&#xA;            //IB_VYG_NBR&#xA;            def ibVygNbr = ''&#xA;            def facility = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.cvdCv.cvFacility.fcyId&quot;)&#xA;            if (facility != null &amp;&amp; facility.equals(ContextHelper.getThreadFacility().getFcyId())) {&#xA;                def vesId = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdVessel.vesId&quot;)&#xA;                def VygNbr = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdIbVygNbr&quot;)&#xA;                ibVygNbr = VygNbr != null &amp;&amp; VygNbr.contains(vesId) ? VygNbr : vesId + VygNbr  //A4&#xA;                //println(&quot;facility ::&quot;+facility+&quot;  IbVygNbr::::&quot;+ibVygNbr)&#xA;            }&#xA;&#xA;            //def vesvoy = getVesVoy(lkpLocTypeKey,lkpCarrierId,categoryKey,transitStateKey,idOBCarrierId, aibcarrierId,dibcarrierId,freightkind, aibcarrierMode, u, gvyCmisUtil,dischPort)&#xA;            def vesvoy = '%'; // Changes made - 05/16/2013&#xA;            def vesvoyAttr = gvyTxtMsgFmt.doIt('vesvoy', vesvoy)&#xA;            //println('VESVOY : '+vesvoy)&#xA;&#xA;            //TRUCK&#xA;            def truckValue = ''&#xA;            def aiObCarrierId = aobcarrierId != null ? aobcarrierId : intdObCarrierId&#xA;            //truckValue = getTruck(lkpLocTypeKey,drayStatusKey,transitStateKey,aiObCarrierId,aibcarrierId,u,gvyCmisUtil,dischPort,lkpCarrierId,outBoundCarrier)&#xA;            truckValue = '%'; // Changes made - 05/16/2013&#xA;&#xA;            //Ship to Ship&#xA;            println('IB_CARRIER :' + inBoundCarrier + '  OB_CARRIER: ' + outBoundCarrier)&#xA;            println('LKP_LOC_TYPE:' + lkpLocTypeKey + 'LKP_CARRIER_ID:' + lkpCarrierId)&#xA;            def aidObCarrierId = aobcarrierId != null ? aobcarrierId : (intdObCarrierId != null ? intdObCarrierId : dobcarrierId)&#xA;            if (inBoundCarrier.equals('CELL') &amp;&amp; outBoundCarrier.equals('CELL')) {&#xA;                //misc1Value= getShipToShip(lkpLocTypeKey,lkpCarrierId,aibcarrierId,aobcarrierId,aidObCarrierId,adIBCarrierId,gvyCmisUtil,dischPort,categoryKey)&#xA;                println('MISC1_1 : ' + misc1Value)&#xA;            }&#xA;            //Ship to Barge&#xA;            else if (inBoundCarrier.equals('CELL') &amp;&amp; outBoundCarrier.equals('BARGE')) {&#xA;                ArrayList arrList = getShipToBarge(lkpLocTypeKey, lkpCarrierId, aobcarrierId, aidObCarrierId)&#xA;                //misc1Value= arrList.get(0)&#xA;                //println('MISC1_2 : '+misc1Value)&#xA;                truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;                println('truckValue_2 : ' + truckValue)&#xA;            }&#xA;            //Barge to Ship&#xA;            else if (inBoundCarrier.equals('BARGE') &amp;&amp; outBoundCarrier.equals('CELL')) {&#xA;                ArrayList arrList = getBargeToShip(lkpLocTypeKey, lkpCarrierId, adIBCarrierId, ibVygNbr)&#xA;                //misc1Value= arrList.get(0)&#xA;                //println('MISC1_3 : '+misc1Value)&#xA;                truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;                println('truckValue_3 : ' + truckValue)&#xA;            }&#xA;            //Barge to Barge&#xA;            else if (inBoundCarrier.equals('BARGE') &amp;&amp; outBoundCarrier.equals('BARGE')) {&#xA;                ArrayList arrList = getBargeToBarge(lkpLocTypeKey, lkpCarrierId, aibcarrierId, aobcarrierId, aidObCarrierId, adIBCarrierId, ibVygNbr)&#xA;                //misc1Value = arrList.get(0)&#xA;                //println('MISC1_4 : '+misc1Value)&#xA;                truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;                println('truckValue_4 : ' + truckValue)&#xA;            }&#xA;            //Barge to AnyOtherCarrier&#xA;            else if (inBoundCarrier.equals('BARGE') &amp;&amp; (outBoundCarrier.equals('TRUCK') || outBoundCarrier.equals('UNKNOWN') || outBoundCarrier.equals('GEN_VESSEL'))) {&#xA;                ArrayList arrList = getBargeToOtherCarriers(lkpLocTypeKey, lkpCarrierId, aibcarrierId, ibVygNbr)&#xA;                //misc1Value = arrList.get(0)&#xA;                //println('MISC1_5 : '+misc1Value)&#xA;                truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;                println('truckValue_5 : ' + truckValue)&#xA;            }&#xA;            //TRUCK to BARGE&#xA;            else if (inBoundCarrier.equals('TRUCK') &amp;&amp; outBoundCarrier.equals('BARGE')) {&#xA;                ArrayList arrList = getTruckToBarge(lkpLocTypeKey, lkpCarrierId, aidObCarrierId, aobcarrierId, idOBCarrierId)&#xA;                //misc1Value = arrList.get(0)&#xA;                //println('MISC1_6 : '+misc1Value)&#xA;                truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;                println('truckValue_6 : ' + truckValue)&#xA;            }&#xA;            //REMOVE - Last Truck Check - (Put of the Ingate I think)&#xA;            /*  if(aibcarrierMode.equals('TRUCK')){&#xA;                      println('aibcarrierMode &gt;&gt;&gt;'+aibcarrierMode+&quot;     aibcarrierOperatorId &gt;&gt;&gt;&quot;+aibcarrierOperatorId)&#xA;                      truckValue = aibcarrierOperatorId&#xA;              } */&#xA;            if (truckValue.equals('GEN_TRUCK') || truckValue.equals('GEN_VESSEL')&#xA;                    || truckValue.equals('GEN_CARRIER')) {&#xA;                truckValue = ''&#xA;            }&#xA;            /* if('BARGE'.equals(misc1Value)){ //A3&#xA;                 misc1Value = ''&#xA;             }*/&#xA;            println(&quot;truckValueTESTING---&quot; + truckValue)&#xA;            if (truckValue == null) {&#xA;                truckValue = '%'&#xA;            }&#xA;            truckValue = '%';//Changes made - 05/16/2013&#xA;            def truckAttr = gvyTxtMsgFmt.doIt('truck', truckValue)&#xA;            def vesClassType = getVesselClassType(lkpCarrierId) //A1&#xA;            //MISC1-Override misc1 value for Long haul vessel to NIS&#xA;            def misc1Attr = ''&#xA;            println(&quot;vesClassTypeBEFOREMISC1---&quot; + vesClassType)&#xA;            println(&quot;misc1ValueBEFORESETTING----&quot; + misc1Value)&#xA;            if (transitStateKey.equals(&quot;S60_LOADED&quot;) &amp;&amp; !'BARGE'.equals(vesClassType)) { //A1&#xA;                misc1Attr = gvyTxtMsgFmt.doIt('misc1', '%')&#xA;            } else {&#xA;                //if (misc1Value == null ||''.equals(misc1Value)) {&#xA;                misc1Value = '%'&#xA;                //}&#xA;                //println(&quot;misc1ValueAFTERSETTING----&quot;+misc1Value)&#xA;                misc1Attr = gvyTxtMsgFmt.doIt('misc1', misc1Value)&#xA;            }&#xA;            println('FINAL_TRUCK :' + truckValue + '  FINAL_MISC1:' + misc1Value)&#xA;&#xA;            //LOAD PORT &amp; DPORT&#xA;            def loadPort = u.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;)&#xA;            def dischargePort = u.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;&#xA;            //ACTUAL VESSEL,ACTUAL VOYAGE,LEG&#xA;            def actualVessel = '%'&#xA;            def actualVoyage = '%'&#xA;            def leg = '%'&#xA;            if (lkpLocTypeKey.equals('VESSEL') &amp;&amp; 'BARGE'.equals(vesClassType)) {&#xA;                actualVessel = misc1Value.length() &gt; 6 ? misc1Value.substring(0, 3) : 'null'  //A7&#xA;                actualVoyage = misc1Value.length() &gt; 6 ? misc1Value.substring(3, 6) : 'null'&#xA;                //leg = misc1Value.length() &gt; 6 ? misc1Value.substring(6) : 'null'&#xA;            } else if (lkpLocTypeKey.equals('VESSEL') &amp;&amp; 'CELL'.equals(vesClassType)) {&#xA;                actualVessel = lkpCarrierId.length() &gt; 5 ? lkpCarrierId.substring(0, 3) : 'null'&#xA;                actualVoyage = lkpCarrierId.length() &gt; 5 ? lkpCarrierId.substring(3) : 'null'&#xA;                //leg = loadPort+'_'+dischargePort&#xA;            }&#xA;            actualVessel = '%';//Changes made - 05/16/2013&#xA;            actualVoyage = '%';//Changes made - 05/16/2013&#xA;&#xA;            def actualVesselAttr = gvyTxtMsgFmt.doIt('actualVessel', actualVessel)&#xA;            def actualVoyageAttr = gvyTxtMsgFmt.doIt('actualVoyage', actualVoyage)&#xA;            def legAttr = gvyTxtMsgFmt.doIt('leg', leg)&#xA;            println('ACTUAL VESSEL : ' + actualVessel + ' ACTUAL VOYAGE: ' + actualVoyage + ' leg : ' + leg)&#xA;&#xA;            positionProFldAttr = vesvoyAttr + truckAttr + misc1Attr + actualVesselAttr + actualVoyageAttr + legAttr&#xA;            println('positionProFldAttr : ' + positionProFldAttr)&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;&#xA;        return positionProFldAttr&#xA;&#xA;&#xA;    }//Method doit() Ends&#xA;&#xA;    private ArrayList getTruckToBarge(String lkpLocTypeKy, String lkpCarrId, String aidObCarrId, String aobcarrId, String idOBCarrId) {&#xA;        def misc1 = ''&#xA;        def truck = ''&#xA;        def bargeCode = ''&#xA;        ArrayList arrLst = new ArrayList()&#xA;        try {&#xA;            if (lkpLocTypeKy.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrId).equals('BARGE')) {&#xA;                misc1 = aidObCarrId&#xA;                bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0, 3) : ''&#xA;                truck = '9' + bargeCode&#xA;            } else if (lkpLocTypeKy.equals('TRUCK')) {&#xA;                misc1 = aobcarrId&#xA;            } else if (lkpLocTypeKy.equals('YARD')) {&#xA;                misc1 = idOBCarrId&#xA;            }&#xA;            arrLst.add(misc1)&#xA;            arrLst.add(truck)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return arrLst&#xA;    }&#xA;&#xA;    private ArrayList getBargeToOtherCarriers(String lkpLocTypeKy, String lkpCarrId, String aibcarrId, String IbVygNbr) {&#xA;        def misc1 = ''&#xA;        def truck = ''&#xA;        def bargeCode = ''&#xA;        ArrayList arrLst = new ArrayList()&#xA;        try {&#xA;            if (lkpLocTypeKy.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrId).equals('BARGE')) {&#xA;                misc1 = aibcarrId&#xA;                bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0, 3) : ''&#xA;                truck = '9' + bargeCode&#xA;                println(&quot;***LCROUCH TEST***&quot;);&#xA;                println(&quot;bargeCode--&gt;&quot; + bargeCode);&#xA;                println(&quot;truck---&gt;&quot; + truck);&#xA;                println(&quot;***LCROUCH TEST***&quot;);&#xA;            }&#xA;            if (lkpLocTypeKy.equals('VESSEL') || lkpLocTypeKy.equals('YARD')) {&#xA;                //A12-  misc1 = adIBCarrId&#xA;                misc1 = IbVygNbr&#xA;            }&#xA;            arrLst.add(misc1)&#xA;            arrLst.add(truck)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return arrLst&#xA;    }&#xA;&#xA;    private ArrayList getBargeToBarge(String lkpLocTypeKy, String lkpCarrId, String aibcarrId, String aobcarrId, String aidObCarrId, String adIBCarrId, String IbVygNbr) {&#xA;        def misc1 = ''&#xA;        def truck = ''&#xA;        def bargeCode = ''&#xA;        ArrayList arrLst = new ArrayList()&#xA;        try {&#xA;            if (lkpLocTypeKy.equals('VESSEL')) {&#xA;                if (lkpCarrId.equals(aibcarrId)) {&#xA;                    misc1 = adIBCarrId&#xA;                    bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0, 3) : ''&#xA;                    truck = '9' + bargeCode&#xA;                } else if (lkpCarrId.equals(aobcarrId)) {&#xA;                    misc1 = aidObCarrId&#xA;                    bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0, 3) : ''&#xA;                    truck = '9' + bargeCode&#xA;                }&#xA;            }&#xA;            if (lkpLocTypeKy.equals('YARD')) {&#xA;                //A12-  misc1 = adIBCarrId&#xA;                misc1 = IbVygNbr&#xA;            }&#xA;            arrLst.add(misc1)&#xA;            arrLst.add(truck)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return arrLst&#xA;    }&#xA;&#xA;    private ArrayList getBargeToShip(String lkpLocTypeKy, String lkpCarrId, String adIBCarrId, String IbVygNbr) {&#xA;        def misc1 = ''&#xA;        def truck = ''&#xA;        ArrayList arrLst = new ArrayList()&#xA;        try {&#xA;            if (lkpLocTypeKy.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrId).equals('BARGE')) {&#xA;                def bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0, 3) : ''&#xA;                truck = '9' + bargeCode&#xA;            }&#xA;            if (lkpLocTypeKy.equals('VESSEL') || lkpLocTypeKy.equals('YARD')) {&#xA;                //A12 - misc1 = adIBCarrId&#xA;                misc1 = IbVygNbr&#xA;            }&#xA;            arrLst.add(misc1)&#xA;            arrLst.add(truck)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return arrLst&#xA;    }&#xA;&#xA;    private ArrayList getShipToBarge(String lkpLocTypeKy, String lkpCarrId, String aobcarrId, String aidObCarrId) {&#xA;        def misc1 = ''&#xA;        def truck = ''&#xA;        ArrayList arrLst = new ArrayList()&#xA;        try {&#xA;            if (lkpLocTypeKy.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrId).equals('CELL')) {&#xA;                misc1 = aidObCarrId&#xA;            } else if (lkpLocTypeKy.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrId).equals('BARGE')) {&#xA;                misc1 = aidObCarrId&#xA;                def bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0, 3) : ''&#xA;                truck = '9' + bargeCode&#xA;            } else if (lkpLocTypeKy.equals('YARD')) {&#xA;                misc1 = aidObCarrId&#xA;            } else if (lkpLocTypeKy.equals('TRUCK')) {&#xA;                misc1 = aobcarrId&#xA;            }&#xA;            arrLst.add(misc1)&#xA;            arrLst.add(truck)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return arrLst&#xA;    }&#xA;&#xA;    private String getShipToShip(String lkpLocTypeKy, String lkpCarrId, String aibcarrId, String aobcarrId, String aidObCarrId, String adIBCarrId, Object gvyCmisUtil, String dischPort, String categoryKey) {&#xA;        def misc1 = ''&#xA;        try {&#xA;            if (lkpLocTypeKy.equals('VESSEL')) {&#xA;                /* REMOVE - LH NIS   if(gvyCmisUtil.isNISPort(dischPort)){&#xA;                            misc1 = aidObCarrId&#xA;                            def bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0,3) : ''&#xA;                            truck = '9'+bargeCode&#xA;                          } */&#xA;                if (lkpCarrId.equals(aibcarrId)) {&#xA;                    misc1 = aidObCarrId&#xA;                } else if (lkpCarrId.equals(aobcarrId)) {&#xA;                    misc1 = adIBCarrId&#xA;                }&#xA;            }&#xA;            if (lkpLocTypeKy.equals('YARD')) {&#xA;                misc1 = adIBCarrId&#xA;            }//Condition For SHIP-SHIP Through&#xA;            if (categoryKey.equals('THRGH') &amp;&amp; aibcarrId.equals(aobcarrId)) {&#xA;                misc1 = ''&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return misc1&#xA;    }&#xA;&#xA;    private String getTruck(String lkpLocTypeKy, String drayStatusKy, String transitStateKy, String obCarrierId, String ibCarrierId, Object unit, Object gvyCmisUtil, String dischPort, String lkpCarrierId, Object aobcarrierMode) {&#xA;        def truck = ''&#xA;        try {&#xA;            if (lkpLocTypeKy.equals('TRUCK')) {&#xA;                if (drayStatusKy.equals('TRANSFER') &amp;&amp; transitStateKy.equals('S70_DEPARTED')) {&#xA;                    truck = 'YBUU'&#xA;                } else if (transitStateKy.equals('S30_ECIN') || transitStateKy.equals('S10_ADVISED')) {&#xA;                    truck = ibCarrierId&#xA;                } else {//A8 - If OBCarrierId is a VESSEL then dont set truck keep value NULL&#xA;                    if ('BARGE'.equals(aobcarrierMode)) {&#xA;                        def bargeCode = obCarrierId.substring(0, 3)&#xA;                        truck = '9' + bargeCode&#xA;                    } else if ('CELL'.equals(aobcarrierMode)) {&#xA;                        truck = 'null';&#xA;                    } else {&#xA;                        truck = obCarrierId;&#xA;                    }&#xA;                }&#xA;            } else if (lkpLocTypeKy.equals('VESSEL') || lkpLocTypeKy.equals('YARD')) {&#xA;                truck = unit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;            }&#xA;            println('Setting For GetTrucker :' + truck)&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return truck&#xA;    }&#xA;&#xA;    private String getVesVoy(String lkpLocTypeKy, String lkpCarrId, String categoryKy, String transitStateKy, String obCarrierId, String actIbCarrierId, String decIbCarrierId, String freightkind, String aibcarrierMode, Object u, Object gvyCmisUtil, String dischPort) {&#xA;        def vesVoy = ''&#xA;        def dIbcarrierMode = u.getFieldValue(&quot;unitDeclaredIbCv.cvCarrierMode&quot;)&#xA;        dIbcarrierMode = dIbcarrierMode != null ? dIbcarrierMode.getKey() : &quot;&quot;&#xA;&#xA;        try {&#xA;            if (lkpLocTypeKy.equals('VESSEL') &amp;&amp; (getVesselClassType(lkpCarrId).equals('CELL'))) {&#xA;                vesVoy = lkpCarrId&#xA;            } else if (lkpLocTypeKy.equals('YARD') || lkpLocTypeKy.equals('TRUCK') ||&#xA;                    (lkpLocTypeKy.equals('VESSEL') &amp;&amp; (getVesselClassType(lkpCarrId).equals('BARGE')))) {&#xA;                if (categoryKy.equals('EXPRT') || categoryKy.equals('THRGH')) {&#xA;                    vesVoy = obCarrierId&#xA;                } else if (categoryKy.equals('IMPRT') &amp;&amp; lkpLocTypeKy.equals('YARD')) {&#xA;                    //A5 - FOR SIT UNITS&#xA;                    if (dIbcarrierMode.equals('VESSEL') &amp;&amp; aibcarrierMode.equals('TRUCK')) {&#xA;                        println(&quot;dIbcarrierMode :&quot; + dIbcarrierMode + &quot;  aibcarrierMode:&quot; + aibcarrierMode)&#xA;                        vesVoy = decIbCarrierId&#xA;                    } else if (aibcarrierMode.equals('TRUCK')) {&#xA;                        vesVoy = '%'&#xA;                    } else {&#xA;                        vesVoy = actIbCarrierId&#xA;                    }&#xA;                } else if (categoryKy.equals('IMPRT') &amp;&amp; (lkpLocTypeKy.equals('TRUCK') || (lkpLocTypeKy.equals('VESSEL')))) {&#xA;                    if (freightkind.equals('MTY') || (aibcarrierMode.equals('TRUCK') &amp;&amp; dIbcarrierMode.equals('TRUCK'))) {&#xA;                        vesVoy = ''&#xA;                    } else {&#xA;                        vesVoy = decIbCarrierId&#xA;                    }&#xA;                } else if (categoryKy.equals('TRSHP') &amp;&amp; transitStateKy.equals('S20_INBOUND')) {&#xA;                    vesVoy = actIbCarrierId != null ? actIbCarrierId : decIbCarrierId&#xA;                } else if (categoryKy.equals('TRSHP') &amp;&amp; transitStateKy.trim().length() &gt; 0) {&#xA;                    vesVoy = obCarrierId&#xA;                }&#xA;            }&#xA;&#xA;            //Check for Client Vessel&#xA;            /*      def vesselLineOperator = gvyCmisUtil.getVesselLineOperator(u)&#xA;                  if(vesselLineOperator != null &amp;&amp; !vesselLineOperator.equals('MAT'))&#xA;                  {&#xA;                    def islandPort = gvyCmisUtil.isNISPort(dischPort)&#xA;                    if (islandPort || lkpLocTypeKy.equals('YARD')){&#xA;                      def intIbVesId = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdVessel.vesId&quot;)&#xA;                      def intIbVygNbr =u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdIbVygNbr&quot;)&#xA;                      vesVoy  = intIbVesId+intIbVygNbr&#xA;                    }&#xA;                    else&#xA;                    {&#xA;                       def obVesId = u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdVessel.vesId&quot;)&#xA;                       def obVygNbr =u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdObVygNbr&quot;)&#xA;                       vesVoy  = obVesId+obVygNbr&#xA;                    }&#xA;                  } */&#xA;&#xA;            //Check for GEN_CARRIER&#xA;            if (vesVoy.equals('GEN_CARRIER') || vesVoy.equals('GEN_VESSEL') || vesVoy.equals('GEN_TRUCK') || 'BARGE'.equals(vesVoy)) {&#xA;                //A2&#xA;                vesVoy = ''&#xA;            }&#xA;            //Check for Setting VesVoy for Only LongHaul Vessels&#xA;            if (!(vesVoy.equals('%') || vesVoy.length() == 0) &amp;&amp; (getVesselClassType(vesVoy).equals('BARGE'))) {&#xA;                vesVoy = ''&#xA;            }&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return vesVoy&#xA;    }&#xA;&#xA;    private String getVesselClassType(String vesselId) {&#xA;        def vesselType = ''&#xA;        try {&#xA;            def vesselClassId = vesselId != null &amp;&amp; vesselId.length() &gt; 3 ? vesselId.substring(0, 3) : null&#xA;            if (vesselClassId != null) {&#xA;                VesselClass vesselClass = new VesselClass()&#xA;                vesselClass = vesselClass.findVesselClassById(vesselClassId)&#xA;                VesselTypeEnum vesselTypeEnum = vesselClass != null ? vesselClass.getVesclassVesselType() : null&#xA;                vesselType = vesselTypeEnum != null ? vesselTypeEnum.getKey() : ''&#xA;            }&#xA;            //println('VESSEL TYPE :'+vesselType)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return vesselType&#xA;    }&#xA;&#xA;    public String positionPercentageValue(Object gvyTxtMsgFmt) {&#xA;        def positionProFldAttr = ''&#xA;        def vesvoy = '%', truckValue = '%', misc1Value = '%', actualVessel = '%', actualVoyage = '%', leg = '%'&#xA;        def vesvoyAttr = gvyTxtMsgFmt.doIt('vesvoy', vesvoy)&#xA;        def truckAttr = gvyTxtMsgFmt.doIt('truck', truckValue)&#xA;        def misc1Attr = gvyTxtMsgFmt.doIt('misc1', misc1Value)&#xA;        def actualVesselAttr = gvyTxtMsgFmt.doIt('actualVessel', actualVessel)&#xA;        def actualVoyageAttr = gvyTxtMsgFmt.doIt('actualVoyage', actualVoyage)&#xA;        def legAttr = gvyTxtMsgFmt.doIt('leg', leg)&#xA;&#xA;        positionProFldAttr = vesvoyAttr + truckAttr + misc1Attr + actualVesselAttr + actualVoyageAttr + legAttr&#xA;&#xA;        return positionProFldAttr&#xA;    }&#xA;&#xA;}&#xA;" />
<digital-asset id="MatUpdateTruckLineAgrmnt" short-description="MatUpdateTruckLineAgrmnt" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.road.business.model.TruckingCompany;&#xA;import com.navis.road.business.model.TruckingCompanyLine;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.argo.business.atoms.BizRoleEnum;&#xA;import com.navis.argo.ArgoRefField;&#xA;import com.navis.security.business.user.BaseUser&#xA;import com.navis.framework.business.atoms.LifeCycleStateEnum;&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.road.RoadField;&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;import com.navis.road.business.atoms.TrkcStatusEnum;&#xA;import org.apache.log4j.Logger&#xA;&#xA;&#xA;public class MatUpdateTruckLineAgrmnt extends GroovyInjectionBase{&#xA;&#xA;&#x9;public String execute(Map inParameters) {&#xA;&#x9;&#x9;try{&#xA;&#xA;&#x9;&#x9;&#x9;ArrayList&lt;String&gt; truck = new ArrayList&lt;String&gt;();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(0,&quot;1SER&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(1,&quot;AIRN&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(2,&quot;ALAM&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(3,&quot;ALCA&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(4,&quot;ALOE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(5,&quot;APT&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(6,&quot;ASAA&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(7,&quot;ASEZ&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(8,&quot;ATRG&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(9,&quot;BAAT&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(10,&quot;BET&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(11,&quot;BHL&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(12,&quot;BIAC&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(13,&quot;CBRE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(14,&quot;CMSI&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(15,&quot;CSWD&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(16,&quot;EDS&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(17,&quot;ETAI&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(18,&quot;FDTD&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(19,&quot;FORD&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(20,&quot;FRIT&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(21,&quot;GEAI&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(22,&quot;GLSB&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(23,&quot;HAIK&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(24,&quot;HAZD&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(25,&quot;HH&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(26,&quot;HLAH&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(27,&quot;HON&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(28,&quot;HYBE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(29,&quot;IMPB&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(30,&quot;JNKN&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(31,&quot;KAMT&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(32,&quot;KKDC&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(33,&quot;KLKA&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(34,&quot;MAAQ&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(35,&quot;MARA&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(36,&quot;MAUT&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(37,&quot;MKAM&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(38,&quot;MKDE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(39,&quot;MLAO&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(40,&quot;MOAH&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(41,&quot;MTAG&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(42,&quot;OAHE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(43,&quot;PAAA&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(44,&quot;PEAI&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(45,&quot;PEXR&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(46,&quot;PMBO&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(47,&quot;POCF&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(48,&quot;PRXA&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(49,&quot;PSTI&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(50,&quot;RCTT&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(51,&quot;RHAD&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(52,&quot;RHOM&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(53,&quot;RTKI&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(54,&quot;S0TJ&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(55,&quot;SANG&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(56,&quot;SIMU&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(57,&quot;THIM&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(58,&quot;TJT&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(59,&quot;TRTK&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(60,&quot;TSAC&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(61,&quot;TTAB&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(62,&quot;TWAD&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(63,&quot;UTAW&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(64,&quot;WACH&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;truck.add(65,&quot;WWMD&quot;);&#xA;&#xA;&#xA;&#x9;&#x9;//LineOperator lineMat = LineOperator.findLineOperatorById(&quot;MAT&quot;);&#xA;&#x9;&#x9;//LineOperator lineApl = LineOperator.findLineOperatorById(&quot;APL&quot;);&#xA;&#x9;&#x9;LineOperator lineMed = LineOperator.findLineOperatorById(&quot;MED&quot;);&#xA;&#x9;&#x9;for (String trucker: truck)&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;TruckingCompany&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_ROLE, BizRoleEnum.HAULIER));&#xA;&#x9;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_LIFE_CYCLE_STATE, LifeCycleStateEnum.ACTIVE));&#xA;&#x9;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_PER_UNIT_GUARANTEE_LIMIT,&quot;1&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_ID, trucker));&#xA;&#x9;&#x9;&#x9;//LOGGER.warn(dq);&#xA;        &#x9;&#x9;def truckList =  HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;        &#x9;&#x9;LOGGER.warn(&quot;Updating ::&quot;+ trucker + &quot;::&quot;+truck.indexOf(trucker) + &quot; For Line HON : TuckerList = &quot;+(truckList != null ? truckList.size() : &quot;0&quot;))&#xA; &#x9;    &#x9;&#x9;for(atruck in truckList) {&#xA;&#x9;&#x9;  &#x9;&#x9;/*TruckingCompanyLine truckingCompanyLineMat = TruckingCompanyLine.findTrukcingCompanyLineForLine(atruck,lineMat);&#xA;          &#x9;&#x9;&#x9;for(atruckLineMat in truckingCompanyLineMat) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;atruckLineMat.setTrkclineStatus(TrkcStatusEnum.RCVONLY)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;TruckingCompanyLine truckingCompanyLineApl = TruckingCompanyLine.findTrukcingCompanyLineForLine(atruck,lineApl);&#xA;          &#x9;&#x9;&#x9;for(atruckLineApl in truckingCompanyLineApl) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;atruckLineApl.setTrkclineStatus(TrkcStatusEnum.RCVONLY)&#xA;&#x9;&#x9;&#x9;&#x9;}*/&#xA;&#x9;&#x9;  &#x9;&#x9;TruckingCompanyLine truckingCompanyLineMed = TruckingCompanyLine.findTrukcingCompanyLineForLine(atruck,lineMed);&#xA;          &#x9;&#x9;&#x9;for(atruckLineMed in truckingCompanyLineMed) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;atruckLineMed.setTrkclineStatus(TrkcStatusEnum.RCVONLY)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;//break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;&#x9;}&#xA;    }&#xA;&#x9;private static final Logger LOGGER = Logger.getLogger(MatUpdateTruckLineAgrmnt.class);&#xA;}" />
<digital-asset id="MatAcntngRpt" short-description="MatAcntngRpt" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.road.business.model.*;&#xA;import java.util.Calendar;&#xA;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.ServicesField;&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;&#xA;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;import java.util.HashMap&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;import com.navis.argo.business.atoms.FreightKindEnum;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.api.EventManager&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.argo.ContextHelper&#xA;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 09/19/2012&#xA;* Description: This groovy is used to generate the Stowplan/Manifest Discrepancies after Stowplan and Manifest process&#xA;*/&#xA;&#xA;public class MatAcntngRpt extends GroovyInjectionBase {&#xA;    def inj = new GroovyInjectionBase();&#xA;    private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;    private final String emailFrom = '1aktosdevteam@matson.com';&#xA;    def timezone = null;&#xA;&#xA;    //public void execute1(String vessel, String vesselGkey)&#xA;    public boolean execute(Map params) {&#xA;        String vessel = &quot;MKA275&quot;;&#xA;        String vesselGkey = &quot;122156660&quot;;&#xA;&#xA;        String type = &quot;DISCHARGE&quot;;&#xA;&#xA;        timezone = ContextHelper.getThreadUserTimezone();&#xA;        println(&quot;timezone ::::::&quot; + timezone);&#xA;&#xA;        if (type == &quot;DISCHARGE&quot;) {&#xA;            try {&#xA;                dischargeReport(vessel, vesselGkey);&#xA;            } catch (Exception e) {&#xA;                println(&quot;exception while running dischargeReport ::&quot; + e);&#xA;            }&#xA;        } else if (type == &quot;LOAD&quot;) {&#xA;            try {&#xA;                loadReport(vessel, vesselGkey);&#xA;            } catch (Exception e) {&#xA;                println(&quot;exception while running loadReport ::&quot; + e);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    public void loadReport(String vessel, String vesselGkey) {&#xA;        String replaceVes = &quot;V-&quot; + vessel + &quot;-&quot;;&#xA;        def gvyEventUtil = inj.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;        HashMap reportDesignsmap = new HashMap();&#xA;&#xA;        ArrayList unitRptList = new ArrayList();&#xA;        println(&quot;Started : MatAcntngRpt.loadReport&quot;);&#xA;        try {&#xA;&#xA;            List acctList = null;&#xA;            def type = &quot;LOAD&quot;;&#xA;            HashMap outputMap = null;&#xA;            List resultAcctList = new ArrayList();&#xA;            ArrayList dischUnits = new ArrayList();&#xA;&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;                    .addDqPredicate(PredicateFactory.ne(UnitField.UFV_VISIT_STATE, UnitVisitStateEnum.ADVISED))&#xA;                    .addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE, UfvTransitStateEnum.S10_ADVISED))&#xA;                    .addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE, UfvTransitStateEnum.S99_RETIRED))&#xA;            //.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY,UnitCategoryEnum.THROUGH))&#xA;                    .addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID, vessel))&#xA;                    .addDqPredicate(PredicateFactory.like(UnitField.UFV_POS_NAME, &quot;V%&quot;))&#xA;                    .addDqOrdering(Ordering.asc(UnitField.UFV_CMDTY));&#xA;            println(&quot;dq====&quot; + dq);&#xA;&#xA;            acctList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            Iterator unitIter = acctList.iterator();&#xA;            while (unitIter.hasNext()) {&#xA;&#xA;                def ufv = unitIter.next()&#xA;                def unit = ufv.ufvUnit&#xA;                def category = unit.getFieldValue(&quot;unitCategory&quot;);&#xA;                category = category != null ? category.getKey() : category;&#xA;                def restow = unit.getFieldValue(&quot;unitActiveUfv.ufvRestowType&quot;)&#xA;                restow = restow != null ? restow.getKey() : restow;&#xA;&#xA;                if (category == &quot;THRGH&quot; &amp;&amp; restow != &quot;RESTOW&quot;) {&#xA;                    println(&quot;category :::: restow &quot; + category + &quot;::&quot; + restow + &quot;::&quot; + unit.unitId);&#xA;                } else {&#xA;                    outputMap = populateAcctListByTypeLoad(ufv, type, vessel)&#xA;                    resultAcctList.add(outputMap)&#xA;                }&#xA;            }&#xA;            println(&quot;resultAcctList.size  &quot; + resultAcctList.size);&#xA;            JRDataSource reportDs = new JRMapCollectionDataSource(resultAcctList);&#xA;            def runReport = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#xA;            //Set report parameters&#xA;            HashMap reportParameters = new HashMap();&#xA;            reportParameters.put(&quot;outboundVesVoy&quot;, vessel);&#xA;            reportParameters.put(&quot;Date&quot;, new Date());&#xA;            // call report design of rehandle containers not loaded back to vessel report.&#xA;            def reportDesignName = &quot;ACCT AUDIT LOAD REPORT&quot;;&#xA;&#xA;            // Emailing report&#xA;            runReport.emailExcelReport(reportDs, reportParameters, reportDesignName, &quot;1aktosdevteam@matson.com&quot;, &quot;Accounting Load Back Total Counts for &quot; + vessel, &quot;ACCT AUDIT LOAD REPORT&quot;);&#xA;&#xA;        } catch (Exception e) {&#xA;            println(&quot;Exception in getAllDischEvents &quot; + e);&#xA;        }&#xA;    }&#xA;&#xA;    public void dischargeReport(String vessel, String vesselGkey) {&#xA;        String replaceVes = &quot;V-&quot; + vessel + &quot;-&quot;;&#xA;        def gvyEventUtil = inj.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;        HashMap reportDesignsmap = new HashMap();&#xA;&#xA;        ArrayList unitRptList = new ArrayList();&#xA;        println(&quot;Started : MatAcntngRpt.dischargeReport&quot;);&#xA;        try {&#xA;&#xA;            List acctList = null;&#xA;            def type = &quot;DISCHARGE&quot;;&#xA;            HashMap outputMap = null;&#xA;            List resultAcctList = new ArrayList();&#xA;            ArrayList dischUnits = new ArrayList();&#xA;&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;                    .addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY, UnitCategoryEnum.THROUGH))&#xA;                    .addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_TYPE, &quot;VESSEL&quot;))&#xA;                    .addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_GKEY, vesselGkey))&#xA;                    .addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE, UfvTransitStateEnum.S10_ADVISED))&#xA;                    .addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE, UfvTransitStateEnum.S99_RETIRED))&#xA;                    .addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE, UfvTransitStateEnum.S20_INBOUND))&#xA;                    .addDqOrdering(Ordering.asc(UnitField.UFV_CMDTY));&#xA;&#xA;            //println(&quot;dq====&quot;+dq);&#xA;&#xA;            acctList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            println(&quot;DomainQuery:::&quot; + dq);&#xA;            log(&quot;&lt;&lt;&lt;&lt;ACCTLIST SIZE IS &gt;&gt;&gt;&gt;&quot; + acctList.size());&#xA;            def checkUnit = &quot;0000000000&quot;;&#xA;&#xA;            Iterator iter = acctList.iterator();&#xA;            while (iter.hasNext()) {&#xA;                def ufv = iter.next()&#xA;                def unit = ufv.ufvUnit&#xA;                def unitId = unit.unitId;&#xA;                if (unitId != checkUnit) {&#xA;                    checkUnit = unitId;&#xA;                    def EquipmentTypeClass = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;).getKey();&#xA;                    def transitState = ufv.ufvTransitState;&#xA;                    def transitStateKey = null;&#xA;                    def equipType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;&#xA;                    if (transitState != null) {&#xA;                        transitStateKey = transitState != null ? transitState.getKey() : ''&#xA;                        def tState = transitStateKey.split(&quot;_&quot;)&#xA;                        transitStateKey = tState[1]&#xA;                    }&#xA;                    if (EquipmentTypeClass.equalsIgnoreCase(&quot;CHASSIS&quot;) || equipType.startsWith(&quot;MG&quot;)) {&#xA;                        log(unit.unitId + &quot;::&quot; + transitStateKey + &quot;::::&quot; + EquipmentTypeClass + &quot;::&quot; + equipType);&#xA;                        null;&#xA;                    } else {&#xA;                        outputMap = populateAcctListByType(ufv, type, vessel)&#xA;                        resultAcctList.add(outputMap)&#xA;                    }&#xA;                }&#xA;            }&#xA;&#xA;            println(&quot;resultAcctList.size  &quot; + resultAcctList.size);&#xA;            JRDataSource reportDs = new JRMapCollectionDataSource(resultAcctList);&#xA;            def runReport = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#xA;            //Set report parameters&#xA;            HashMap reportParameters = new HashMap();&#xA;            reportParameters.put(&quot;outboundVesVoy&quot;, vessel);&#xA;            reportParameters.put(&quot;Date&quot;, new Date());&#xA;            // call report design of rehandle containers not loaded back to vessel report.&#xA;            def reportDesignName = &quot;ACCT AUDIT DISCH REPORT&quot;;&#xA;&#xA;            // Emailing report&#xA;            runReport.emailExcelReport(reportDs, reportParameters, reportDesignName, &quot;1aktosdevteam@matson.com&quot;, &quot;Accounting Discharge Total Counts for &quot; + vessel, &quot;ACCT AUDIT DISCHARGE REPORT&quot;);&#xA;&#xA;            lastCntrDisch(vessel);&#xA;&#xA;        } catch (Exception e) {&#xA;            println(&quot;Exception in getAllDischEvents &quot; + e);&#xA;        }&#xA;    }&#xA;&#xA;    public void lastCntrDisch(String vessel) {&#xA;&#xA;        println(&quot;calling lastCntrDisch for :::&quot; + vessel);&#xA;        def gvyEventUtil = inj.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;        HashMap reportDesignsmap = new HashMap();&#xA;        String subject = vessel + &quot; Last Container Discharge Report&quot;;&#xA;        String p2Subject = &quot; &quot;;&#xA;        String siSubject = &quot; &quot;;&#xA;        try {&#xA;            List events = getAllDischEvents(vessel);&#xA;            ArrayList dischUnits = new ArrayList();&#xA;            Iterator dischItr = events.iterator();&#xA;            while (dischItr.hasNext()) {&#xA;                Event disch = dischItr.next();&#xA;                def creator = disch.evntAppliedBy;&#xA;                //if (creator == &quot;xps:xps&quot;){&#xA;                def unitId = disch.evntAppliedToNaturalKey;&#xA;                def changes = disch.evntFieldChangesString;&#xA;                dischUnits.add(disch);&#xA;                //}&#xA;            }&#xA;            println(&quot;dischUnits.size ::: &quot; + dischUnits.size);&#xA;&#xA;            ArrayList siUnits = new ArrayList();&#xA;            ArrayList p2Units = new ArrayList();&#xA;&#xA;            Iterator itr = dischUnits.iterator();&#xA;            while (itr.hasNext()) {&#xA;                Event disch = itr.next();&#xA;                def changes = disch.evntFieldChangesString;&#xA;                def creator = disch.evntAppliedBy;&#xA;                //println(&quot;changes::::::::::&quot;+changes + &quot;::&quot;+creator);&#xA;                if (!changes.contains(&quot;P2&quot;) &amp;&amp; (creator == &quot;xps:xps&quot;)) {&#xA;                    siUnits.add(disch);&#xA;                }&#xA;                if (changes.contains(&quot;P2&quot;)) {&#xA;                    p2Units.add(disch);&#xA;                }&#xA;            }&#xA;            println(siUnits.size + &quot;::::::::::&quot; + p2Units.size);&#xA;            List siList = generateReport(siUnits, vessel);&#xA;            List p2List = generateReport(p2Units, vessel);&#xA;&#xA;            HashMap parameters = new HashMap();&#xA;            Date startDate = new Date();&#xA;            String strDate = startDate.format('MM/dd/yyyy')&#xA;            parameters.put(&quot;Date&quot;, strDate);&#xA;            println(p2List.size + &quot;::::::::::&quot; + siList.size);&#xA;            if (siList.size &gt; 0) {&#xA;                JRDataSource ds = new JRMapCollectionDataSource(siList);&#xA;                reportDesignsmap.put(&quot;TEST REPORT&quot;, ds);&#xA;            } else {&#xA;                siSubject = &quot;Note : No SI Gate discharges found&quot;;&#xA;            }&#xA;&#xA;            if (p2List.size &gt; 0) {&#xA;                //Create and Mail Report&#xA;                JRDataSource ds1 = new JRMapCollectionDataSource(p2List);&#xA;                reportDesignsmap.put(&quot;TEST REPORT1&quot;, ds1);&#xA;            } else {&#xA;                p2Subject = &quot;Note : No P2 Gate discharges found&quot;;&#xA;            }&#xA;            subject = subject + &quot;\n \n&quot; + p2Subject + &quot;\n \n&quot; + siSubject;&#xA;            def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;            reportRunner.emailReports(reportDesignsmap, parameters, emailTo, vessel + &quot; Last Container Discharge Report&quot;, subject);&#xA;        } catch (Exception e) {&#xA;            println(&quot;Exceptoion while generating &quot; + vessel + &quot; Last Container Discharge Report ::&quot; + e);&#xA;        }&#xA;    }&#xA;&#xA;&#xA;    public List generateReport(List events, String vessel) {&#xA;        def gvyEventUtil = inj.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;        String replaceVes = &quot;V-&quot; + vessel + &quot;-&quot;;&#xA;        ArrayList unitRptList = new ArrayList();&#xA;&#xA;        try {&#xA;            Iterator itr = events.iterator();&#xA;            while (itr.hasNext()) {&#xA;                Event disch = itr.next();&#xA;                def changes = disch.evntFieldChangesString;&#xA;&#xA;                println(&quot;1 :::&quot; + disch.evntAppliedToNaturalKey + &quot;::&quot; + changes + &quot;::&quot; + disch.evntAppliedDate + &quot;::&quot; + disch.evntAppliedBy);&#xA;                changes = changes.replace(replaceVes, &quot;&quot;)&#xA;                def lkpSlotValue = changes.indexOf(&quot;-&quot;) == -1 ? changes : changes.substring(0, changes.indexOf(&quot;-&quot;));&#xA;                println(&quot;lkpSlotValue &quot; + lkpSlotValue);&#xA;                HashMap map = new HashMap();&#xA;                def dischDate = disch.evntAppliedDate;&#xA;&#xA;                String strTimeInDate = gvyEventUtil.formatDate(disch.evntAppliedDate, timezone)&#xA;                String strTimeInTime = gvyEventUtil.formatTime(disch.evntAppliedDate, timezone)&#xA;&#xA;                //println(&quot;strTimeInDate and strTimeInTime ::::::::::::::::::::&quot;+strTimeInDate + &quot;::&quot; + strTimeInTime);&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;                map.put(&quot;UnitNbr&quot;, disch.evntAppliedToNaturalKey);&#xA;                map.put(&quot;PositionSlot&quot;, lkpSlotValue);&#xA;                map.put(&quot;OutBoundCarrierId&quot;, vessel);&#xA;                map.put(&quot;type&quot;, &quot;OVERALL&quot;);&#xA;                map.put(&quot;UnitFlexString01&quot;, strTimeInTime);&#xA;                map.put(&quot;UnitFlexString02&quot;, strTimeInDate);&#xA;&#xA;                unitRptList.add(map);&#xA;&#xA;                break;&#xA;            }&#xA;&#xA;            Iterator cyHon = events.iterator();&#xA;            while (cyHon.hasNext()) {&#xA;                Event disch = cyHon.next();&#xA;                def changes = disch.evntFieldChangesString;&#xA;                String cyHonFlg = getCyHonUnit(disch.evntAppliedToNaturalKey, vessel);&#xA;                if (cyHonFlg == &quot;Y&quot;) {&#xA;                    println(&quot;2 :::&quot; + disch.evntAppliedToNaturalKey + &quot;::&quot; + changes + &quot;::&quot; + disch.evntAppliedDate + &quot;::&quot; + disch.evntAppliedBy);&#xA;                    changes = changes.replace(replaceVes, &quot;&quot;)&#xA;                    def lkpSlotValue = changes.indexOf(&quot;-&quot;) == -1 ? changes : changes.substring(0, changes.indexOf(&quot;-&quot;));&#xA;                    println(&quot;lkpSlotValue &quot; + lkpSlotValue);&#xA;                    HashMap map = new HashMap();&#xA;&#xA;                    String strTimeInDate = gvyEventUtil.formatDate(disch.evntAppliedDate, timezone)&#xA;                    String strTimeInTime = gvyEventUtil.formatTime(disch.evntAppliedDate, timezone)&#xA;&#xA;                    //println(&quot;strTimeInDate and strTimeInTime ::::::::::::::::::::&quot;+strTimeInDate + &quot;::&quot; + strTimeInTime);&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;                    map.put(&quot;UnitNbr&quot;, disch.evntAppliedToNaturalKey);&#xA;                    map.put(&quot;PositionSlot&quot;, lkpSlotValue);&#xA;                    map.put(&quot;OutBoundCarrierId&quot;, vessel);&#xA;                    map.put(&quot;type&quot;, &quot;CY-HON&quot;);&#xA;                    map.put(&quot;UnitFlexString01&quot;, strTimeInTime);&#xA;                    map.put(&quot;UnitFlexString02&quot;, strTimeInDate);&#xA;&#xA;                    unitRptList.add(map);&#xA;&#xA;                    break;&#xA;                }&#xA;            }&#xA;&#xA;            Iterator auto = events.iterator();&#xA;            while (auto.hasNext()) {&#xA;                Event disch = auto.next();&#xA;                def changes = disch.evntFieldChangesString;&#xA;                String autoFlg = getAutoUnit(disch.evntAppliedToNaturalKey, vessel);&#xA;                if (autoFlg == &quot;Y&quot;) {&#xA;                    println(&quot;3 :::&quot; + disch.evntAppliedToNaturalKey + &quot;::&quot; + changes + &quot;::&quot; + disch.evntAppliedDate + &quot;::&quot; + disch.evntAppliedBy);&#xA;                    changes = changes.replace(replaceVes, &quot;&quot;)&#xA;                    def lkpSlotValue = changes.indexOf(&quot;-&quot;) == -1 ? changes : changes.substring(0, changes.indexOf(&quot;-&quot;));&#xA;                    println(&quot;lkpSlotValue &quot; + lkpSlotValue);&#xA;                    HashMap map = new HashMap();&#xA;&#xA;                    String strTimeInDate = gvyEventUtil.formatDate(disch.evntAppliedDate, timezone)&#xA;                    String strTimeInTime = gvyEventUtil.formatTime(disch.evntAppliedDate, timezone)&#xA;&#xA;                    //println(&quot;strTimeInDate and strTimeInTime ::::::::::::::::::::&quot;+strTimeInDate + &quot;::&quot; + strTimeInTime);&#xA;&#xA;                    map.put(&quot;UnitNbr&quot;, disch.evntAppliedToNaturalKey);&#xA;                    map.put(&quot;PositionSlot&quot;, lkpSlotValue);&#xA;                    map.put(&quot;OutBoundCarrierId&quot;, vessel);&#xA;                    map.put(&quot;type&quot;, &quot;AUTO&quot;);&#xA;                    map.put(&quot;UnitFlexString01&quot;, strTimeInTime);&#xA;                    map.put(&quot;UnitFlexString02&quot;, strTimeInDate);&#xA;&#xA;                    unitRptList.add(map);&#xA;&#xA;                    break;&#xA;                }&#xA;            }&#xA;&#xA;            Iterator cy = events.iterator();&#xA;            while (cy.hasNext()) {&#xA;                Event disch = cy.next();&#xA;                def changes = disch.evntFieldChangesString;&#xA;                String cyFlg = getCyUnit(disch.evntAppliedToNaturalKey, vessel);&#xA;                //println(&quot;Auto :::&quot;+auto);&#xA;                if (cyFlg == &quot;Y&quot;) {&#xA;                    println(&quot;4 :::&quot; + disch.evntAppliedToNaturalKey + &quot;::&quot; + changes + &quot;::&quot; + disch.evntAppliedDate + &quot;::&quot; + disch.evntAppliedBy);&#xA;                    changes = changes.replace(replaceVes, &quot;&quot;)&#xA;                    def lkpSlotValue = changes.indexOf(&quot;-&quot;) == -1 ? changes : changes.substring(0, changes.indexOf(&quot;-&quot;));&#xA;                    println(&quot;lkpSlotValue &quot; + lkpSlotValue);&#xA;                    HashMap map = new HashMap();&#xA;&#xA;                    String strTimeInDate = gvyEventUtil.formatDate(disch.evntAppliedDate, timezone)&#xA;                    String strTimeInTime = gvyEventUtil.formatTime(disch.evntAppliedDate, timezone)&#xA;&#xA;                    //println(&quot;strTimeInDate and strTimeInTime ::::::::::::::::::::&quot;+strTimeInDate + &quot;::&quot; + strTimeInTime);&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;                    map.put(&quot;UnitNbr&quot;, disch.evntAppliedToNaturalKey);&#xA;                    map.put(&quot;PositionSlot&quot;, lkpSlotValue);&#xA;                    map.put(&quot;OutBoundCarrierId&quot;, vessel);&#xA;                    map.put(&quot;type&quot;, &quot;CY-OTHER&quot;);&#xA;                    map.put(&quot;UnitFlexString01&quot;, strTimeInTime);&#xA;                    map.put(&quot;UnitFlexString02&quot;, strTimeInDate);&#xA;&#xA;                    unitRptList.add(map);&#xA;&#xA;                    break;&#xA;                }&#xA;            }&#xA;            return unitRptList;&#xA;        } catch (Exception e) {&#xA;            println(&quot;Exception in getAllDischEvents &quot; + e);&#xA;        }&#xA;    }&#xA;&#xA;    private List getAllDischEvents(String vessel) {&#xA;        try {&#xA;            Date startDate = new Date() - 6;&#xA;            Date endDate = startDate + 3;&#xA;            String trimDate = startDate.format('yyyy-MM-dd')&#xA;            startDate = startDate.parse('yyyy-MM-dd', trimDate);&#xA;            ArrayList eventList = new ArrayList();&#xA;&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;Event&quot;)&#xA;                    .addDqPredicate(PredicateFactory.ge(ServicesField.EVNT_APPLIED_DATE, startDate))&#xA;                    .addDqPredicate(PredicateFactory.eq(ServicesField.EVNT_EVENT_TYPE, &quot;2753837&quot;))&#xA;            //.addDqPredicate(PredicateFactory.eq(ServicesField.EVNT_APPLIED_TO_NATURAL_KEY, &quot;SHOW507428X&quot;))&#xA;                    .addDqOrdering(Ordering.desc(ServicesField.EVNT_APPLIED_DATE));&#xA;&#xA;&#xA;            println(dq);&#xA;&#xA;            //dq.setMaxResults(1);&#xA;            List events = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            println(&quot;events.size()&quot; + events.size());&#xA;&#xA;            Iterator itr = events.iterator();&#xA;            while (itr.hasNext()) {&#xA;                Event disch = itr.next();&#xA;                def changes = disch.evntFieldChangesString;&#xA;                if (changes.contains(vessel)) {&#xA;                    eventList.add(disch);&#xA;                }&#xA;            }&#xA;            println(&quot;eventList ::&quot; + eventList.size());&#xA;            return eventList;&#xA;&#xA;        } catch (Exception e) {&#xA;            println(&quot;Error while getting events:::&quot; + e)&#xA;        }&#xA;    }&#xA;&#xA;    public String getAutoUnit(String containerId, String vessel) {&#xA;        try {&#xA;            String auto = &quot;N&quot;;&#xA;&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;            dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID, containerId));&#xA;            dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, vessel));&#xA;            def unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            if (unitList.size() &gt; 0) {&#xA;                Iterator iterUnitList = unitList.iterator()&#xA;                while (iterUnitList.hasNext()) {&#xA;                    def ufv = iterUnitList.next();&#xA;                    def unit = ufv.ufvUnit;&#xA;                    def commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;                    commodity = commodity != null ? commodity : &quot;NO&quot;&#xA;                    //println(&quot;commodity :::&quot;+ commodity);&#xA;                    if (commodity.contains(&quot;AUTO&quot;)) {&#xA;                        auto = &quot;Y&quot;;&#xA;                        break;&#xA;                    }&#xA;&#xA;                }&#xA;            }&#xA;            return auto;&#xA;        } catch (Exception e) {&#xA;            println(&quot;Error &quot; + e);&#xA;        }&#xA;    }&#xA;&#xA;    public String getCyHonUnit(String containerId, String vessel) {&#xA;&#xA;        try {&#xA;            String cyHon = &quot;N&quot;;&#xA;&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;            dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID, containerId));&#xA;            dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, vessel));&#xA;            def unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            if (unitList.size() &gt; 0) {&#xA;                Iterator iterUnitList = unitList.iterator()&#xA;                while (iterUnitList.hasNext()) {&#xA;                    def ufv = iterUnitList.next();&#xA;                    def unit = ufv.ufvUnit;&#xA;                    def commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;                    commodity = commodity != null ? commodity : &quot;NO&quot;&#xA;                    def pod = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;                    //println(&quot;commodity :::&quot;+ commodity);&#xA;                    if (!commodity.contains(&quot;AUTO&quot;) &amp;&amp; pod == ContextHelper.getThreadFacility().getFcyId()) {&#xA;                        cyHon = &quot;Y&quot;;&#xA;                        break;&#xA;                    }&#xA;&#xA;                }&#xA;            }&#xA;            return cyHon;&#xA;        } catch (Exception e) {&#xA;            println(&quot;Error &quot; + e);&#xA;        }&#xA;    }&#xA;&#xA;    public String getCyUnit(String containerId, String vessel) {&#xA;&#xA;        try {&#xA;            String cy = &quot;N&quot;;&#xA;&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;            dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID, containerId));&#xA;            dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, vessel));&#xA;            def unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            if (unitList.size() &gt; 0) {&#xA;                Iterator iterUnitList = unitList.iterator()&#xA;                while (iterUnitList.hasNext()) {&#xA;                    def ufv = iterUnitList.next();&#xA;                    def unit = ufv.ufvUnit;&#xA;                    def commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;                    commodity = commodity != null ? commodity : &quot;NO&quot;&#xA;                    def pod = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;                    if (!commodity.contains(&quot;AUTO&quot;) &amp;&amp; pod != ContextHelper.getThreadFacility().getFcyId()) {&#xA;                        cy = &quot;Y&quot;;&#xA;                        break;&#xA;                    }&#xA;&#xA;                }&#xA;            }&#xA;            return cy;&#xA;        } catch (Exception e) {&#xA;            println(&quot;Error &quot; + e);&#xA;        }&#xA;    }&#xA;&#xA;    public HashMap populateAcctListByTypeLoad(UnitFacilityVisit ufv, String type, String vessel) {&#xA;&#xA;        HashMap resMap = new HashMap();&#xA;        def unit = ufv.ufvUnit&#xA;        UnitEquipment chasEquip = unit.getUnitCarriageUe();&#xA;        def freightkindout = unit.getFieldValue(&quot;unitFreightKind&quot;).getKey();&#xA;        def attachedUnit = unit.getFieldValue(&quot;unitAttachedEquipIds&quot;)&#xA;        //println(&quot;chasEquip   &quot;+chasEquip)&#xA;        if (&quot;FCL&quot;.equals(freightkindout)) {&#xA;            freightkindout = &quot;F&quot;;&#xA;        } else if (&quot;MTY&quot;.equals(freightkindout)) {&#xA;            freightkindout = &quot;E&quot;;&#xA;        }&#xA;&#xA;        resMap.put(&quot;Commodity&quot;, unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;));&#xA;        resMap.put(&quot;EquipmentTypeClass&quot;, unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;).getKey());&#xA;        resMap.put(&quot;EquipmentType&quot;, unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;))&#xA;        resMap.put(&quot;FreightKind&quot;, freightkindout)&#xA;        resMap.put(&quot;UnitNbr&quot;, unit.getFieldValue(&quot;unitId&quot;))&#xA;        if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;            def commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;            commodity = commodity != null &amp;&amp; commodity == &quot;AUTO&quot; ? &quot;AUTO&quot; : &quot; &quot;;&#xA;            resMap.put(&quot;Commodity&quot;, commodity);&#xA;        }&#xA;        if (attachedUnit != null &amp;&amp; chasEquip != null) {&#xA;            resMap.put(&quot;AttachedUnits&quot;, unit.getFieldValue(&quot;unitAttachedEquipIds&quot;))&#xA;        } else if (attachedUnit != null &amp;&amp; chasEquip == null) {&#xA;            resMap.put(&quot;AttachedUnits&quot;, null)&#xA;        }&#xA;&#xA;        if (&quot;LOAD&quot;.equals(type)) {&#xA;            resMap.put(&quot;OutboundCarrierATA&quot;, ufv.getFieldValue(&quot;ufvActualObCv.cvATA&quot;))&#xA;            resMap.put(&quot;OutboundCarrierATD&quot;, ufv.getFieldValue(&quot;ufvActualObCv.cvATD&quot;))&#xA;            resMap.put(&quot;OutboundCarrierId&quot;, unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;))&#xA;            resMap.put(&quot;Destination&quot;, unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;))&#xA;            resMap.put(&quot;UfvFlexString06&quot;, ufv.getUfvFlexString06())&#xA;        } else if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;            resMap.put(&quot;InboundCarrierATA&quot;, unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvATA&quot;))&#xA;            resMap.put(&quot;InboundCarrierATD&quot;, unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvATD&quot;))&#xA;            //resMap.put(&quot;InboundCarrierATA&quot;,vesselATADate)&#xA;            //resMap.put(&quot;InboundCarrierATD&quot;,vesselATDDate)&#xA;            //resMap.put(&quot;OPL&quot;,unit.getFieldValue(&quot;unitRouting.rtgOPL.pointId&quot;))&#xA;            //resMap.put(&quot;InboundCarrierId&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;))&#xA;            resMap.put(&quot;InboundCarrierId&quot;, vesselForDischId)&#xA;            resMap.put(&quot;UfvFlexString06&quot;, unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString06&quot;))&#xA;        }&#xA;        //println(&quot;Result map is &quot;+resMap);&#xA;        return resMap;&#xA;    }&#xA;&#xA;    public HashMap populateAcctListByType(UnitFacilityVisit ufv, String type, String vessel) {&#xA;&#xA;        HashMap resMap = new HashMap();&#xA;        def unit = ufv.ufvUnit&#xA;        UnitEquipment chasEquip = unit.getUnitCarriageUe();&#xA;        def freightkindout = unit.getFieldValue(&quot;unitFreightKind&quot;).getKey();&#xA;        def attachedUnit = unit.getFieldValue(&quot;unitAttachedEquipIds&quot;)&#xA;        if (&quot;FCL&quot;.equals(freightkindout)) {&#xA;            freightkindout = &quot;F&quot;;&#xA;        } else if (&quot;MTY&quot;.equals(freightkindout)) {&#xA;            freightkindout = &quot;E&quot;;&#xA;        }&#xA;&#xA;        resMap.put(&quot;Commodity&quot;, unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;));&#xA;        resMap.put(&quot;EquipmentTypeClass&quot;, unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;).getKey());&#xA;        resMap.put(&quot;EquipmentType&quot;, unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;))&#xA;        resMap.put(&quot;FreightKind&quot;, freightkindout)&#xA;        resMap.put(&quot;UnitNbr&quot;, unit.getFieldValue(&quot;unitId&quot;))&#xA;        if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;            def commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;            commodity = commodity != null &amp;&amp; commodity == &quot;AUTO&quot; ? &quot;AUTO&quot; : &quot; &quot;;&#xA;            resMap.put(&quot;Commodity&quot;, commodity);&#xA;        }&#xA;        if (attachedUnit != null &amp;&amp; chasEquip != null) {&#xA;            resMap.put(&quot;AttachedUnits&quot;, unit.getFieldValue(&quot;unitAttachedEquipIds&quot;))&#xA;        } else if (attachedUnit != null &amp;&amp; chasEquip == null) {&#xA;            resMap.put(&quot;AttachedUnits&quot;, null)&#xA;        }&#xA;&#xA;        if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;            resMap.put(&quot;InboundCarrierATA&quot;, unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvATA&quot;))&#xA;            resMap.put(&quot;InboundCarrierATD&quot;, unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvATD&quot;))&#xA;            resMap.put(&quot;InboundCarrierId&quot;, vessel)&#xA;            resMap.put(&quot;UfvFlexString06&quot;, unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString06&quot;))&#xA;        }&#xA;        return resMap;&#xA;    }&#xA;&#xA;}&#xA;&#xA;" />
<digital-asset id="GvyReleaseEqHolds" short-description="GvyReleaseEqHolds" is-pre-deployed="N" groovy-code="import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.api.IFlagType&#xA;import com.navis.argo.business.atoms.FlagPurposeEnum&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.argo.business.atoms.LogicalEntityEnum;&#xA;import com.navis.argo.business.api.LogicalEntity;&#xA;import com.navis.argo.business.api.Serviceable;&#xA;&#xA;public class GvyReleaseEqHolds&#xA;{&#xA;   def servicesMgr = (ServicesManager)Roastery.getBean(&quot;servicesManager&quot;); &#xA;   //Method Get Active Holds for Unit&#xA;   public String releaseHoldsPermissions(Object  unit) &#xA;   {&#xA;       com.navis.argo.ContextHelper.setThreadExternalUser(&quot;-jms-&quot;);&#xA;     try&#xA;    {&#xA;      def holdFlags = unit.getFieldValue(&quot;unitAppliedHoldOrPermName&quot;)&#xA;      def flagIds = holdFlags != null ? holdFlags.split(&quot;,&quot;) : ''&#xA;        for(holdId in flagIds)&#xA;       {&#xA;           def  iFlageType = servicesMgr.getFlagTypeById(holdId)&#xA;           def logicalEntity =   iFlageType.getAppliesTo() &#xA;           def flagPurpose =  iFlageType.getPurpose().getKey()&#xA;      println(&quot; N4Flags &quot;+flagIds+&quot;  iFlageType::&quot;+iFlageType+&quot;   logicalEntity::&quot;+logicalEntity+&quot;  flagPurpose ::&quot;+flagPurpose)&#xA;           if(flagPurpose.equals('HOLD')  &amp;&amp; logicalEntity.equals(LogicalEntityEnum.EQ)) &#xA;          {&#xA;              println(&quot;holdId:&quot;+holdId+&quot; logicalEntity:&quot;+logicalEntity)&#xA;              //Releasing Equip Holds&#xA;               println(&quot;LogicalEntityEnum ::-1&quot;+LogicalEntityEnum)&#xA;                    def equipmentId = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqIdFull&quot;)&#xA;                    def equipObj  =  Equipment.loadEquipment(equipmentId); &#xA;                    def operator = com.navis.argo.business.model.Operator.findOperator(&quot;MATSON&quot;); &#xA;                    def equipmentState =    com.navis.inventory.business.units.EquipmentState.findEquipmentState(equipObj,operator);&#xA;                    if(holdId.equals('LTV')){&#xA;                     releaseHold(equipmentState,holdId)&#xA;                   }&#xA;          }&#xA;       }//for ends&#xA;     }catch(Exception e){&#xA;         e.printStackTrace()&#xA;     }&#xA;&#xA;   }//Method Ends&#xA; &#xA;    public String releaseHold(Object unit,String holdId) {&#xA;      try&#xA;      {&#xA;        com.navis.argo.ContextHelper.setThreadExternalUser(&quot;-jms-&quot;);&#xA;        servicesMgr.applyPermission(holdId, unit, null, &quot;EQ Hold Released Correction&quot;, true) &#xA;      }catch(Exception e){&#xA;          e.printStackTrace()&#xA;      }&#xA;     &#xA;    }&#xA;&#xA;&#xA; }" />
<digital-asset id="GvyReportEventUtil" short-description="GvyReportEventUtil" is-pre-deployed="N" groovy-code="import com.navis.services.ServicesField;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.portal.Ordering;&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.framework.util.BizFailure;&#xA;&#xA;import java.io.Serializable;&#xA;import java.util.List&#xA;import java.util.Date&#xA;import java.util.Calendar;&#xA;import java.text.DateFormat;&#xA;import java.text.SimpleDateFormat;&#xA;&#xA;public class GvyReportEventUtil extends GroovyInjectionBase&#xA;{&#xA;   public List getEventsByCreatedDate(Date inStartDate, Date inEndDate, EventType[] inEventTypes) {&#xA;&#x9; try{&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(&quot;Event&quot;).addDqPredicate(PredicateFactory.ge(ServicesField.EVNT_CREATED, inStartDate)).addDqOrdering(Ordering.asc(ServicesField.EVNT_CREATED));&#xA;        if (inEndDate != null) {&#xA;            dq.addDqPredicate(PredicateFactory.lt(ServicesField.EVNT_CREATED, inEndDate));&#xA;        }&#xA;        if (inEventTypes != null &amp;&amp; inEventTypes.length &gt; 0) {&#xA;            List eventTypeGkeys = new ArrayList();&#xA;            for (aEvntType in inEventTypes) {&#xA;                EventType eventType = aEvntType;&#xA;                Serializable eventTypeGkey = null;&#xA;                if (eventType == null) {&#xA;                    continue;&#xA;                }&#xA;                eventTypeGkey = eventType.getEvnttypeGkey();&#xA;                if (eventTypeGkey == null) {&#xA;                    DomainQuery gkeydq = QueryUtils.createDomainQuery(&quot;EventType&quot;).addDqPredicate(PredicateFactory.ge(ServicesField.EVNTTYPE_ID, eventType.getId()));&#xA;                    EventType retrievedServiceType = (EventType)HibernateApi.getInstance().getUniqueEntityByDomainQuery(gkeydq);&#xA;                    if (retrievedServiceType != null) {&#xA;                        eventTypeGkey = retrievedServiceType.getEvnttypeGkey();&#xA;                    } else {&#xA;                        throw BizFailure.create((new StringBuilder()).append(&quot;getEventsByCreatedDate: A EventType of the defined array of EventTypes entered to the method is not valid. EventType id is &quot;).append(eventType.getId()).toString());&#xA;                    }&#xA;                }&#xA;                eventTypeGkeys.add(eventTypeGkey);&#xA;            }&#xA;            //Array Serializable Object&#xA;            Serializable[] eventTypeGkeysArray = new Serializable[eventTypeGkeys.size()];&#xA;            eventTypeGkeysArray = (Serializable)(Serializable)eventTypeGkeys.toArray(eventTypeGkeysArray);&#xA;            if (eventTypeGkeysArray.length &gt; 0) {&#xA;                dq.addDqPredicate(PredicateFactory.in(ServicesField.EVNT_EVENT_TYPE, eventTypeGkeysArray));&#xA;            }&#xA;        }&#xA;&#x9;  dq.addDqPredicate(PredicateFactory.in(ServicesField.EVNT_FACILITY, getFacility().getFcyGkey()));&#xA;      return HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;}catch(Exception e){&#xA;&#x9;   e.printStackTrace();&#xA;    }&#xA;  }&#xA;&#xA;&#xA;  public Date formatDateToTimeZone(Date date, String timeZone)&#xA; {&#xA;     Date fmtHstDate = null;  &#xA;     try&#xA;     {&#xA;         DateFormat firstFormat = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss&quot;);&#xA;         TimeZone firstTime = TimeZone.getTimeZone(timeZone);&#xA;          firstFormat.setTimeZone(firstTime);&#xA;          String fmtDateStr = firstFormat.format(date);&#xA;          SimpleDateFormat secondFormat = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss&quot;);&#xA;           fmtHstDate = secondFormat.parse(fmtDateStr);&#xA;      }catch(Exception e){&#xA;         e.printStackTrace();&#xA;      }&#xA;      return fmtHstDate;&#xA;   }&#xA;&#xA;   &#xA;   public long timeDiffInHrs(Date currentDate, Date vesDeptDate)&#xA;   {&#xA;      long hrDiff = 0&#xA;      try&#xA;      {&#xA;          Calendar currCalDt= Calendar.getInstance();&#xA;          currCalDt.setTime(currentDate);&#xA;           long currDt = currCalDt.getTimeInMillis();&#xA;&#x9;&#x9;     &#xA;          Calendar deptVesCalDt = Calendar.getInstance();&#xA;          deptVesCalDt.setTime(vesDeptDate);&#xA;          long deptVesDt = deptVesCalDt.getTimeInMillis();&#xA;&#x9;&#x9;     &#xA;           long hrTimeDiff = currDt - deptVesDt;&#xA;&#x9;&#x9;&#x9; &#xA;           hrDiff  = hrTimeDiff /(60*60*1000);&#xA;           println(&quot;hrTimeDiff ::&quot;+hrTimeDiff+&quot;hrDiff ::&quot;+hrDiff );&#xA;&#xA;     }catch(Exception e){&#xA;           e.printStackTrace();&#xA;     }&#xA;     return hrDiff; &#xA;   }&#xA;  &#xA;&#xA; }" />
<digital-asset id="NOWMessageBuilder" short-description="Builds NOW XML document" is-pre-deployed="N" groovy-code="/*&#xA;&#xA;Groovy code called to build an XML message to be used for now solutions. See Sample below&#xA;&#xA;&lt;tracking&gt;&#xA;  &lt;truck-arrival&gt;&#xA;    &lt;gate-id&gt;SI GATE&lt;/gate-id&gt;&#xA;    &lt;stage-id&gt;SI GATE&lt;/stage-id&gt;&#xA;    &lt;lane-id&gt;2&lt;/lane-id&gt;&#xA;    &lt;truck trucking-co-id='AABV' id='1234' /&gt;&#xA;    &lt;truck-visit tracking-tag-nbr='101' tv-key='5067538' /&gt;&#xA;    &lt;dropoff&gt;&#xA;      &lt;chassis eqid='AMIN012826X' length-mm='6068' height-mm='0' type='C20' /&gt;&#xA;      &lt;position slot='' /&gt;&#xA;    &lt;/dropoff&gt;&#xA;    &lt;timestamp&gt;2008-07-03T00:06:41&lt;/timestamp&gt;&#xA;  &lt;/truck-arrival&gt;&#xA;&lt;/tracking&gt;&#xA;&#xA;Amine Nebri, anebri@navis.com - June 25 2008&#xA;Added OutgateMessage SKB - Aug 12 2008&#xA;&#xA;*/&#xA;&#xA;/*&#xA;* Srno   Doer  Date          Desc&#xA;* A1     GR    04/06/2010    Added Method and Changes to pass ChasType and NO-EIT transactions&#xA;* A2     GR    04/21/2010    Strip Chassis CheckDigit&#xA;* A3     GR    05/25/2010    Handel Null Chassis Feed from Transaction. Set ChasType to STD&#xA;* A4     GR    06/04/10      Truck ID Add LicenceNbr check for PassPass Gate&#xA;* A5     GR    06/08/10      Adding ChaType to outgate Transactions&#xA;* A6     GR    07/07/10      Added Check for Null Chassis value in Container Element&#xA;*/&#xA;&#xA;import groovy.xml.MarkupBuilder&#xA;import com.navis.argo.business.reference.Accessory&#xA;import com.navis.argo.business.reference.Chassis&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.road.business.atoms.TranSubTypeEnum&#xA;import com.navis.argo.business.reference.EquipType&#xA;import com.navis.road.business.model.TruckTransaction&#xA;&#xA;class NOWMessageBuilder { &#xA;    public String formIngateMessage(inOutDao, verify) { &#xA;        def fixNull = {s -&gt; s == null ? &quot;&quot; : s }&#xA;        def writer = new StringWriter() &#xA;        def xml = new MarkupBuilder(writer)&#xA;&#xA;        xml.tracking(verify: verify)&#xA;                {&#xA;                    'truck-arrival'()&#xA;                            {&#xA;                                'gate-id'(inOutDao.gate.gateId)&#xA;                                'stage-id'(inOutDao.gate.gateId)&#xA;                                'lane-id'(inOutDao.tv.tvdtlsEntryLane == null ? '99' : inOutDao.tv.tvdtlsEntryLane.laneId)&#xA;                                truck(id: (inOutDao.tv.tvdtlsTruckId == null ? (inOutDao.tv.tvdtlsTruckLicenseNbr != null ? inOutDao.tv.tvdtlsTruckLicenseNbr : fixNull(inOutDao.tv.tvdtlsTruckId)) : inOutDao.tv.tvdtlsTruckId) , 'trucking-co-id': fixNull(inOutDao.tv.carrierOperator.bzuId))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(isValidEit(inOutDao)){//A1 Do not pass tracking-tag-nbr for NON-EIT &#xA;                                   'truck-visit'('tv-key': inOutDao.tv.cvdCv.cvGkey, 'tracking-tag-nbr': fixNull(inOutDao.tv.tvdtlsBatNbr))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}else{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   'truck-visit'('tv-key': inOutDao.tv.cvdCv.cvGkey)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;    }&#xA;&#xA;                                dropoff()&#xA;                                        {&#xA;                                            def transactions = (Set&lt;TruckTransaction&gt;) inOutDao.tv.tvdtlsTruckTrans&#xA;&#xA;                                            for (transaction in transactions) {&#xA;                                                if (transaction.tranSubType in [TranSubTypeEnum.RE, TranSubTypeEnum.RM, TranSubTypeEnum.RC, TranSubTypeEnum.RI]) {&#xA;                                                    if (transaction.tranCtrNbr != null) {&#xA;                                                        def container_ = Container.findContainer(transaction.tranCtrNbr)&#xA;&#xA;                                                        if (container_)&#xA;                                                            container(eqid: transaction.tranCtrNbr, type: container_.eqEquipType.eqtypId, 'length-mm': container_.eqLengthMm, 'height-mm': container_.eqHeightMm, 'on-chassis-id': transaction.tranChsNbr, slot: fixNull(transaction.tranCtrPosition))&#xA;                                                    }&#xA;                                                    if (transaction.tranChsNbr) {&#xA;                                                        def chassis_ = Chassis.findChassis(transaction.tranChsNbr)&#xA;&#xA;                                                        if (chassis_) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def chassisId = transaction.tranChsNbr.substring(0,transaction.tranChsNbr.length()-1); //A2&#xA;                                                            chassis(eqid: chassisId, type:chassis_.eqEquipType.eqtypId , 'length-mm': chassis_.eqLengthMm, 'height-mm': chassis_.eqHeightMm, 'chastype':getChassisType(transaction))&#xA;                                                            position(slot: fixNull(transaction.tranChsPosition))&#xA;                                                        }&#xA;                                                    }&#xA;                                                }&#xA;                                            }&#xA;                                        }&#xA;&#xA;                                timestamp(java.text.MessageFormat.format(&quot;{0,date,yyyy-MM-dd'T'HH:mm:ss}&quot;, new Date()))&#xA;                            }&#xA;                }&#xA;&#xA;        //com.navis.road.business.util.RoadBizUtil.getMessageCollector().appendMessage(com.navis.framework.util.BizFailure.create(writer.toString()))&#xA;&#xA;        return writer.toString()&#xA;    }&#xA;&#xA;    public String formOutgateMessage(inOutDao) {&#xA;        def fixNull = {s -&gt; s == null ? &quot;&quot; : s }&#xA;        def writer = new StringWriter()&#xA;        def xml = new MarkupBuilder(writer)&#xA;     &#xA;        xml.tracking()&#xA;                {&#xA;                    'truck-departure'()&#xA;                            {&#xA;                                'gate-id'(inOutDao.gate.gateId)&#xA;                                'stage-id'(inOutDao.gate.gateId)&#xA;                                'lane-id'(inOutDao.tv.tvdtlsEntryLane == null ? '99' : inOutDao.tv.tvdtlsEntryLane.laneId)&#xA;                                truck(id: (inOutDao.tv.tvdtlsTruckId == null ? (inOutDao.tv.tvdtlsTruckLicenseNbr != null ? inOutDao.tv.tvdtlsTruckLicenseNbr : fixNull(inOutDao.tv.tvdtlsTruckId)) : inOutDao.tv.tvdtlsTruckId) , 'trucking-co-id': fixNull(inOutDao.tv.carrierOperator.bzuId))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(isValidEit(inOutDao)){ //A1 Do not pass tracking-tag-nbr for NON-EIT &#xA;                                   'truck-visit'('tv-key': inOutDao.tv.cvdCv.cvGkey, 'tracking-tag-nbr': fixNull(inOutDao.tv.tvdtlsBatNbr))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}else{&#xA;                                   'truck-visit'('tv-key': inOutDao.tv.cvdCv.cvGkey)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;                                pickup()&#xA;                                        {&#xA;                                            def transactions = (Set&lt;TruckTransaction&gt;) inOutDao.tv.tvdtlsTruckTrans&#xA;&#xA;                                            for (transaction in transactions) {&#xA;                                                if (transaction.tranSubType in [TranSubTypeEnum.DC, TranSubTypeEnum.DE, TranSubTypeEnum.DI, TranSubTypeEnum.DM]) {&#xA;                                                    if (transaction.tranCtrNbr != null) {&#xA;                                                        def container_ = Container.findContainer(transaction.tranCtrNbr)&#xA;&#xA;                                                        if (container_)&#xA;                                                            container(eqid: transaction.tranCtrNbr, type: container_.eqEquipType.eqtypId, 'length-mm': container_.eqLengthMm, 'height-mm': container_.eqHeightMm, 'on-chassis-id': fixNull(transaction.tranChsNbr), slot: fixNull(transaction.tranCtrPosition))&#xA;&#xA;                                                    }&#xA;                                                    if (transaction.tranChsNbr) {&#xA;                                                        def chassis_ = Chassis.findChassis(transaction.tranChsNbr)&#xA;&#xA;                                                        if (chassis_) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def chassisId = transaction.tranChsNbr.substring(0,transaction.tranChsNbr.length()-1); //A2&#xA;                                                            chassis(eqid: chassisId, type: chassis_.eqEquipType.eqtypId, 'length-mm': chassis_.eqLengthMm, 'height-mm': chassis_.eqHeightMm, 'chastype':getChassisType(transaction))&#xA;                                                            position(slot: fixNull(transaction.tranChsPosition))&#xA;                                                        }&#xA;                                                    }&#xA;                                                }&#xA;                                            }&#xA;                                        }&#xA;                                timestamp(java.text.MessageFormat.format(&quot;{0,date,yyyy-MM-dd'T'HH:mm:ss}&quot;, new Date()))&#xA;                            }&#xA;                }&#xA;&#xA;        //com.navis.road.business.util.RoadBizUtil.getMessageCollector().appendMessage(com.navis.framework.util.BizFailure.create(writer.toString()))&#xA;&#xA;        return writer.toString()&#xA;    }&#xA;&#xA;&#xA;//Test1. Triaxel and Mg Triaxel Setting &#xA;public String getChassisType(Object transaction){&#xA;    &#xA;&#x9;def chasType = null;&#xA;    def acryId = transaction.tranChsAccNbr&#xA;    Chassis chassis = transaction.tranChassis&#xA;&#xA;    if(chassis == null){ //A3&#xA;&#x9;&#x9;return &quot;STD&quot;;&#xA;&#x9;} &#x9;&#xA;    def chasEqType = chassis.eqEquipType&#xA;    //println(&quot;transaction.tranChsNbr=&quot;+transaction.tranChsNbr)&#xA;  &#x9;def isTriaxle = chassis.eqEquipType.getEqtypIsChassisTriaxle()&#xA;    //EquipType equipType = EquipType.findEquipType(transaction.tranChsNbr); &#xA;&#x9;//def isTriaxle =  equipType.getEqtypIsChassisTriaxle()&#xA;&#xA;    if(acryId != null &amp;&amp; isTriaxle){ chasType = &quot;MGX&quot;; }&#xA;&#x9;else if(isTriaxle){ chasType = &quot;TX&quot;; }&#xA;    else if(acryId != null ){ chasType = &quot;MG&quot;; }&#xA;&#x9;else{ chasType = &quot;STD&quot; }&#xA;&#xA;    //println(&quot;chassis=&quot;+chassis+&quot; acryId=&quot;+acryId+&quot; isTriaxle=&quot;+isTriaxle+&quot; chasType&quot;+chasType+&quot; chasEqType=&quot;+chasEqType)&#xA;&#x9;return chasType&#xA;}&#xA;&#xA;public boolean isValidEit(inDao){&#xA;&#xA;&#x9;def eitString = inDao.tv.tvdtlsBatNbr&#xA;&#x9;int eitId = eitString != null ? eitString.toInteger() : 0&#xA;&#x9;if (eitId &lt; 101 || eitId &gt; 200) {&#xA;        return false;&#xA;&#x9;}else{&#xA;&#x9;&#x9;return true;&#xA;    }&#xA;}&#xA;&#xA;}//class Ends&#xA;" />
<digital-asset id="QuayCleanup" short-description="Delete extra Quay entities (JJS)" is-pre-deployed="N" groovy-code="import com.navis.argo.ArgoEntity&#xA;import com.navis.argo.ArgoField&#xA;import com.navis.argo.business.model.Quay&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;&#xA;/*&#xA;* Copyright (c) 2007 Navis LLC. All Rights Reserved.&#xA;* $Id: groovyplugin.xml,v 1.20 2009/03/23 19:56:37 sbauer Exp $&#xA;*/&#xA;class QuayCleanup {&#xA;    public void execute(Map inParameters) {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(ArgoEntity.QUAY);&#xA;        dq.addDqPredicate(PredicateFactory.eq(ArgoField.QUAY_ID, &quot;52&quot;));&#xA;         dq.addDqPredicate(PredicateFactory.eq(ArgoField.PRTL_GKEY, 256424));&#xA;       List quays = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;        for (Quay quay in quays) {&#xA;            try {&#xA;                HibernateApi.getInstance().delete(quay, true);&#xA;            } catch (Exception e) {&#xA;                println(&quot;could not delete quay: &quot; + e)&#xA;            }&#xA;        }&#xA;    }&#xA;}" />
<digital-asset id="NOWProcessor" short-description="NOWProcessor" is-pre-deployed="N" groovy-code="/*&#xA;&#xA;Groovy code called at the end of the truck gatein transaction. It submits an XML document to NOW Solutions Web service using SOAP&#xA;&#xA;Amine Nebri, anebri@navis.com - June 25 2008&#xA;&#xA;A1 7/3/1/09 SKB Switch to BEA client&#xA;A2 03/30/10 GR  NON-EIT Alert mail&#xA;A3 04/06/10 GR  Commented out the Return for NON-EIT&#xA;                This would pass all gate Transaction to NOW&#xA;A3 04/21/10 GR  Added Verify=flase for NON-EIT&#xA;A4 04/28/10 KM  NON-EIT line up values and display time in HST&#xA;A5 05/01/10 GR  Moved noEitAlert to Arrived only units&#xA;A6 06/04/10 GR  Added eitId='0' to allow PassPass Gate Trans to Go through&#xA;                Dont Send Non-Eit Alerts for 0 value&#xA;A7 10/15/10 GR  NON-EIT to SKIP posting if NOW Is Down (tt#9382)&#xA;A8 11/02/10 GR  Error Messages Check for Duplicated Truck Visit&#xA;A9 02/11/11 GR  Added Additional Check for Dup truckvisit&#xA;A10 08/16/11 GR  replaced back to sendEmail&#xA;A11 08/16/11 GR Added Chassis Axis-WS Code&#xA;A12 10/24/11 GR Put back custSendEmail, noEitAlter and url mapping&#xA;A13 11/02/11 GR Added Road Biz Task for N4 to handel the Exceptions correctly&#xA;A14 11/03/11 GR Change for VALID and INVALID DUPLICATE TURCKVISIT&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.framework.util.message.MessageLevel&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.framework.util.internationalization.PropertyKey&#xA;import com.navis.framework.util.internationalization.PropertyKeyFactory&#xA;import com.navis.framework.util.DateUtil;  //A4&#xA;import java.util.TimeZone;   //A4&#xA;import N4Gate.matsongate_n4.*;&#xA;&#xA;public class NOWProcessor extends GroovyInjectionBase {&#xA;    private static proxy = null; &#xA;    private static eitEmailto = &quot;1EITAlertAllGroup@matson.com;sysreports@matson.com&quot;;&#xA;   // private static eitEmailto = &quot;1aktosdevteam@matson.com&quot;;&#xA;    public void execute(inDao, api, arrival, verify=true) {&#xA;&#xA;        def eitString = inDao.tv.tvdtlsBatNbr&#xA;        int eitId = 0;&#xA;&#xA;        // We exit if the Bat Number is not numeric or &lt;100 and &gt;200&#xA;        try {&#xA;            if (eitString == null) {&#xA;                println(&quot;NOWProcessor: ReAssigned Null eitString=0&quot;)&#xA;            }&#xA;&#xA;            eitId = eitString != null ? eitString.toInteger() : 0 //A6&#xA;            if (eitId &lt; 101 || eitId &gt; 200) {&#xA;&#x9;&#x9;&#x9;&#x9;verify=false&#xA;            }&#xA;        }&#xA;        catch (Exception e) {&#xA;            return&#xA;        }&#xA;&#xA;        // Before continuing, make sure there are no errors exist in the main session&#xA;        if (RoadBizUtil.getMessageCollector().getMessageCount(MessageLevel.SEVERE) &gt; 0) {&#xA;            return;&#xA;        }&#xA;&#xA;        def url = api.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;).getNowServer();&#xA;&#xA;        if (url == null) {&#xA;            println(&quot;NOWProcessor: Skipping no now server  !\n\n&quot;)&#xA;        }&#xA;&#xA;        // Build the message by calling NOWMessageBuilder&#xA;        def msg = null;&#xA;        if (arrival) {&#xA;&#x9;&#x9;&#x9;if (eitId != 0 &amp;&amp; eitId &lt; 101 || eitId &gt; 200) {&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;eitId ::&quot; + eitId);&#xA;&#x9;&#x9;&#x9;&#x9;//noEitAlert(inDao) // Commented this method to Stop NO EIT GIVEN AT GATE email TT EP000201681&#xA;            }&#xA;            msg = api.getGroovyClassInstance(&quot;NOWMessageBuilder&quot;).formIngateMessage(inDao, verify)&#xA;        } else {&#xA;            msg = api.getGroovyClassInstance(&quot;NOWMessageBuilder&quot;).formOutgateMessage(inDao)&#xA;        }&#xA;&#xA;        def time = System.currentTimeMillis();&#xA;        // Invoke NOW&#xA;        println(&quot;NOWProcessor: invoking NOW WebService with: &quot; + msg)&#xA;        //def proxy = new groovy.net.soap.SoapClient(&quot;http://192.168.170.175:10060/.wsdl&quot;)&#xA;&#xA;&#xA;&#xA;&#xA;        def result&#xA;&#xA;&#x9;// 07/31/09 Switched to BEA service&#xA;&#x9;/*&#xA;&#x9;N4Gate_ServiceLocator gateSrvLoc = new N4Gate_ServiceLocator();&#xA;&#x9;  gateSrvLoc.setN4GateEndpointAddress(&quot;http://192.168.170.244:10060/.wsdl&quot;);&#xA;&#x9;  N4Gate_PortType n4gateProxy = gateSrvLoc.getN4Gate();&#xA;&#x9;  String temp = n4gateProxy.process_tracking(&quot;TEST MSG&quot;);&#xA;&#x9; */&#xA;        try {&#xA;              if(proxy == null)  {&#xA;                  try {&#xA;                  &#x9;//A11 - def s = new N4Gate_Service_Impl(url);&#xA;                  &#x9;//proxy = s.getN4Gate()&#xA;                    N4Gate_ServiceLocator gateSrvLoc = new N4Gate_ServiceLocator();&#xA;&#x9;                gateSrvLoc.setN4GateEndpointAddress(url);&#xA;&#x9;                proxy = gateSrvLoc.getN4Gate();&#xA;                  } catch (Exception pe) {&#xA;                    //A7 if Now Retry fails Skip exception&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (eitId != 0 &amp;&amp; eitId &lt; 101 || eitId &gt; 200) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Skip Exception Dont Pass To Now&quot;)&#xA;                        return;&#xA;                    }else{&#xA;                       //A11 - def s = new N4Gate_Service_Impl(url);&#xA;                   &#x9;   //proxy = s.getN4Gate()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;   N4Gate_ServiceLocator gateSrvLoc = new N4Gate_ServiceLocator();&#xA; &#x9;                   gateSrvLoc.setN4GateEndpointAddress(url);&#xA;&#x9;                   proxy = gateSrvLoc.getN4Gate();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;                  }//Inner catch Ends&#xA;             }&#xA;            println(&quot;Proxy=&quot;+proxy);&#xA;            try {&#xA;            &#x9;result = proxy.process_tracking(msg);&#xA;            } catch (Exception re) {&#xA;&#x9;&#x9;&#x9;&#x9;re.printStackTrace();&#xA;            &#x9;result = proxy.process_tracking(msg);&#xA;            }&#xA;        }&#xA;        catch (Exception e) {&#xA;            proxy = null;&#xA;            e.printStackTrace();&#xA;            throw new Exception(&quot;NOWProcessor: Could not connect to NOW: &quot; + e.getClass());&#xA;&#xA;        }&#xA;&#xA;        // Test for null result&#xA;&#xA;        time = System.currentTimeMillis() - time;&#xA;&#xA;&#xA;        println(&quot;NOWProcessor:(&quot; + (double) time / 1000.0 + &quot;) NOW result is: &quot; + result)&#xA;&#xA;        if (!result) {&#xA;            throw new Exception(&quot;NOW WebService returned null&quot;)&#xA;        }&#xA;&#xA;        // Examine the result document&#xA;        def resultDoc = new XmlParser().parseText(result)&#xA;&#xA;        def status = resultDoc.'truck-arrival-response'[0].'@status'&#xA;&#xA;        println(&quot;NOWProcessor: status is &quot; + status)&#xA;&#xA;        if (status == &quot;3&quot;) {&#xA;            def error = resultDoc.'truck-arrival-response'[0].messages.message[0].'@text'&#xA;&#xA;            println(&quot;NOWProcessor: error is: &quot; + error)&#xA;            String duptv = &quot;&quot;+error&#xA;            def errMsg = [eitString];&#xA;  &#x9;&#x9;     PropertyKey EIT_NOT_WORKING = PropertyKeyFactory.valueOf(&quot;gate.eit_notworking&quot;);&#xA;&#x9;&#x9;&#x9; PropertyKey DUP_TRUCK_VISIT = PropertyKeyFactory.valueOf(&quot;gate.eit_duplicateTv&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;if(duptv.contains('Duplicate truck_visit')){ &#x9;&#x9;&#x9;//A8,A9,A10&#xA;               RoadBizUtil.appendMessage(MessageLevel.SEVERE, DUP_TRUCK_VISIT, &quot;DUPLICATE TRUCK VISIT&quot;);&#xA;&#x9;&#x9;&#x9;   return;&#xA;            }else if(duptv.contains('duplicate')){&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;--- BOGUS Duplicate Truck Visit ---&quot;)&#xA;&#x9;&#x9;&#x9;}else{&#xA;&#x9;           RoadBizUtil.appendMessage(MessageLevel.SEVERE, EIT_NOT_WORKING, errMsg);&#xA;&#x9;&#x9;&#x9;   return;&#xA;&#x9;&#x9;&#x9;}&#xA;        }&#xA;&#xA;        time = System.currentTimeMillis() - time;&#xA;        time = (double) time / 1000.0;&#xA;&#xA;        println(&quot;NOWProcessor: Completed. Parse Time=&quot; + time + &quot;\n\n&quot;)&#xA;    }&#xA;&#xA;&#xA;&#x9;public void noEitAlert(Object inDao){&#xA;&#x9; try{&#xA;        def trans = inDao.tran&#xA;&#x9;&#x9;if(trans == null){&#xA;&#x9;&#x9;&#x9;return;&#xA;        }&#xA;        def cntrNbr = trans.tranCtrNbr&#xA;        def truckCmpyId = cntrNbr != null  ? trans.tranTrkcId : 'NA'&#xA;        if(cntrNbr == null){&#xA;&#x9;   cntrNbr = trans.tranChsNbr&#xA;        }&#xA;&#xA;        def timezone = trans.getTranComplex().getTimeZone()   //A4&#xA;&#x9;def eventTime = trans.tranCreated  //A4&#xA;        def dateTime = DateUtil.convertDateToLocalTime(eventTime, timezone)  //A4&#xA;&#xA;   &#x9;def truckvisit = trans.tranTruckVisit&#xA;        def truckId = truckvisit.tvdtlsTruckId&#xA;&#x9;def laneId = truckvisit.tvdtlsEntryLane.laneId&#xA;        if(laneId.equals('1') || laneId.equals('2') || laneId.equals('3') ){&#xA;             def emailSender = getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;             def sub = &quot;NO EIT GIVEN AT GATE &quot;+laneId +&quot; FOR &quot;+cntrNbr;   //A4&#xA;&#x9;     def body = 'Gate        : '+laneId+'\nEquipment   : '+cntrNbr+'\nTrucker     : '+truckCmpyId+'\nTrucker Id  : '+truckId+'\nIngate Date : '+dateTime  //A4&#xA;   &#x9;&#x9;     emailSender.custSendEmail(eitEmailto, sub, body);  //A4&#xA;&#x9;    }&#xA;&#x9; }catch(Exception e){&#xA;         e.printStackTrace();&#xA;     }&#xA;    }&#xA;}&#xA;" />
<digital-asset id="StripUnit" short-description="StripUnit" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.atoms.EventEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.argo.ContextHelper;&#xA;&#xA;/*&#xA;**********************************************************************&#xA;* Srno   Date&#x9;             Changer&#x9; Change Description&#xA;* A1&#x9; 05/26/09&#x9;Steven Bauer&#x9; Look unit at complex level.&#xA;* A2     05/29/09&#x9;Steven Bauer&#x9; 406 - No error on stripping empty unit.&#xA;* A3     06/02/09&#x9;Steven Bauer&#x9; 403 - Supress all updates before GetNV&#xA;* A4     08/14/09&#x9;Steven Bauer&#x9; EP000100565, should have been using cmdyId not name.&#xA;**********************************************************************&#xA;*/&#xA;class StripUnit extends GroovyInjectionBase {&#xA;    public String execute(Map inParameters) {&#xA;        &#xA;        com.navis.argo.ContextHelper.setThreadExternalUser(&quot;ACETS&quot;);&#xA;&#x9;def ctrId = inParameters.get(&quot;equipment-id&quot;);&#xA;&#x9;log(&quot;StripUnit &quot;+ctrId);&#xA;try {&#xA;    def recorder = (String) inParameters.get(&quot;recorder&quot;);&#xA;&#xA;&#x9;// Find the active UFV&#xA;&#x9;def fullUfv = null;&#xA;&#x9;try {&#xA;&#x9;         // fullUfv = findActiveUfv(ctrId);&#xA;&#x9;         // A1&#xA;&#x9;         def unitLookup = getGroovyClassInstance(&quot;GvyUnitLookup&quot;);&#xA;                 fullUfv = unitLookup.getUfvActiveInComplex(ctrId);&#xA;&#x9;&#x9; if(fullUfv == null) throw new Exception(&quot;Could not find active unit&quot;);&#xA;&#x9;} catch ( BizViolation ex) {&#xA;&#x9;&#x9;fail((new StringBuilder()).append(&quot;ERR_GVY_STRIP_001. Could not find unit: &quot;).append(ctrId).toString());&#xA;&#x9;}&#xA;&#x9;// check if the commodity id is ok.&#xA;&#x9;def ufvUnit = fullUfv.getUfvUnit();&#xA;&#x9;if ( ufvUnit.isStorageEmpty()) {&#xA;&#x9;        return&#xA;&#x9;&#x9;//fail((new StringBuilder()).append(&quot;ERR_GVY_STRIP_002. Could not STRIP EMPTY unit: &quot;).append(ctrId).toString());&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;// A3&#xA;&#x9;if(isStowplan(ufvUnit)) return;&#xA; &#xA;&#x9;def stripGoods = ufvUnit.getUnitGoods();&#xA;    //Commodity check is not required because LCL cargo might not be having commodity some times hence UNIT_STRIP does not get recorded becuase of the below check.&#xA;&#x9;/* if ( stripGoods != null) {&#xA;&#x9;&#x9;def stripComm = stripGoods.getGdsCommodity();&#xA;&#x9;&#x9;if ( stripComm != null) {&#xA;&#x9;&#x9;&#x9;def commId = stripComm.getCmdyId();&#xA;&#x9;&#x9;&#x9;if ( commId.length() &lt; 3)&#xA;&#x9;&#x9;&#x9;&#x9;fail((new StringBuilder()).append(&quot;ERR_GVY_STRIP_003. Could not STRIP unit: &quot;).append(ctrId).append(&quot; with COMMODITY code: &quot;).append(commId).toString());&#xA;&#xA;&#x9;&#x9;&#x9;if ( !commId.substring(0, 3).equalsIgnoreCase( &quot;AUT&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&amp;&amp; !commId.substring(0, 3).equalsIgnoreCase( &quot;CFS&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&amp;&amp; !commId.substring(0, 3).equalsIgnoreCase( &quot;COB&quot;)) {&#xA;&#x9;&#x9;&#x9;&#x9;fail((new StringBuilder()).append(&quot;ERR_GVY_STRIP_003. Could not STRIP unit: &quot;).append(ctrId).append(&quot; with COMMODITY code: &quot;).append(commId).toString());&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;fail((new StringBuilder()).append(&quot;ERR_GVY_STRIP_003. Could not STRIP unit: &quot;).append(ctrId).append(&quot; withno  COMMODITY code. &quot;).toString());&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;} else {&#xA;&#x9;fail((new StringBuilder()).append(&quot;ERR_GVY_STRIP_003. Could not STRIP unit: &quot;).append(ctrId).append(&quot; withno  COMMODITY code. &quot;).toString());&#x9;&#xA;&#x9;} */&#xA;&#x9;&#xA;&#xA;&#x9;// Strp it, and get back the new full UFV and Unit&#xA;&#x9;def strippedUfv = stripUfvAndRecordEvent( fullUfv, null, &quot;JF&quot;);&#xA;&#x9;def strippedUnit = strippedUfv.getUfvUnit();&#xA;&#x9;// get commodity code&#xA;&#x9;def unitGoods = strippedUnit.getUnitGoods();&#xA;&#x9;def unitComm = unitGoods.getGdsCommodity();&#xA;&#x9;if ( unitComm != null) {&#xA;&#x9;&#x9;def commodityId = unitComm.getCmdyShortName();&#xA;&#x9;&#x9;if ( commodityId.equalsIgnoreCase( &quot;AUTOCON&quot;)) {&#xA;&#x9;&#x9;&#x9;unitComm = Commodity.findOrCreateCommodity( commodityId);&#xA;&#x9;&#x9;&#x9;unitComm.setCmdyShortName( &quot;EMPTY CFS&quot;);&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;unitComm = Commodity.findOrCreateCommodity( &quot;MTYAUT&quot;);&#xA;&#x9;&#x9;&#x9;unitComm.setCmdyShortName( &quot;EMPTY AUTO&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;} else {&#xA;&#x9;&#x9;unitComm = Commodity.findOrCreateCommodity( &quot;MTYAUT&quot;);&#xA;&#x9;&#x9;unitComm.setCmdyShortName( &quot;EMPTY AUTO&quot;);&#xA;&#x9;}&#xA;&#xA;&#x9;unitGoods.setGdsCommodity(unitComm);&#xA;&#xA;&#x9;// Record an event&#xA;&#x9;strippedUnit.recordUnitEvent(EventEnum.UNIT_STRIP, null, &quot;Stripped by &quot; + recorder);&#xA;&#x9;return &quot;done via Groovy, unit is: &quot; + strippedUnit;&#xA;&#xA;} catch ( Exception ex) {&#xA;&#x9;fail((new StringBuilder()).append(ex.toString()).append(&quot;ERR_GVY_STRIP_999. Could not STRIP unit: &quot;).append(ctrId).toString());&#xA;        ex.printStackTrace();&#xA;}&#xA;}&#xA;&#xA;     private boolean isStowplan(unit) {&#xA;        def remark = unit.unitRemark;&#xA;        if(remark == null) return false;&#xA;        return remark.startsWith(&quot;Stowplan Data&quot;);&#xA;    } &#x9;&#xA;}&#xA;&#xA;" />
<digital-asset id="GenerateOnTerminalFeeEvent" short-description="GenerateOnTerminalFeeEvent" is-pre-deployed="Y" groovy-code="import org.apache.log4j.Logger&#xA;&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.query.Junction&#xA;import com.navis.framework.portal.query.Disjunction&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.ArgoExtractEntity&#xA;import com.navis.argo.ArgoExtractField&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.atoms.CarrierModeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.atoms.LogicalEntityEnum&#xA;import com.navis.argo.business.extract.ChargeableUnitEvent&#xA;&#xA;import com.navis.inventory.business.api.UnitStorageManager&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.api.EventManager&#xA;import com.navis.services.business.rules.EventType&#xA;&#xA;/**&#xA; * This is a Pre-Deployable Groovy Plug-in to apply On Terminal fee for storage units in yard more than 10 days.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:psethuraman@zebra.com&quot;&gt;Prakash&lt;/a&gt; Apr 05, 2010, 1:01:08 PM&#xA; */&#xA;public class GenerateOnTerminalFeeEvent extends GroovyApi {&#xA;  public void execute(Map parameters) {&#xA;    logInfo(&quot;GenerateOnTerminalFeeEvent: Start execution of Groovy Plug-in:&quot;);&#xA;    System.out.println(&quot;GenerateOnTerminalFeeEvent: Start execution of Groovy Plug-in&quot;);&#xA;&#xA;    // USER CAN CHANGE THESE FIEDLS BASED ON REQUIREMENTS.&#xA;    String cueEventType = &quot;STORAGE&quot;;&#xA;    String newEventTypeId = &quot;ON TERMINAL OVER 10 DAYS&quot;;  // Expected to have this event in Event Type.&#xA;&#xA;    //  Do not change below this line.&#xA;    String category = UnitCategoryEnum.EXPORT.getKey();&#xA;    EventType eventType = EventType.findEventType(newEventTypeId);&#xA;    if (eventType == null) {&#xA;      throw BizFailure.create(&quot;GenerateOnTerminalFeeEvent: No EventType defined already for \'ON TERMINAL OVER 10 DAYS\'&quot;)&#xA;    }&#xA;&#xA;    UserContext context = ContextHelper.getThreadUserContext();&#xA;    Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;    UnitStorageManager manager = (UnitStorageManager) Roastery.getBean(UnitStorageManager.BEAN_ID);&#xA;    List chargeEvents = getCUEsForOnTermianl(cueEventType, category);&#xA;&#xA;    if(chargeEvents.isEmpty()) {&#xA;      logInfo(&quot;GenerateOnTerminalFeeEvent: No storage records found for Groovy Plug-in&quot;);&#xA;      System.out.println(&quot;GenerateOnTerminalFeeEvent: No storage records found for Groovy Plug-in&quot;);&#xA;    }&#xA;    for (ChargeableUnitEvent chargeEvent: chargeEvents) {&#xA;      try {&#xA;        UnitFacilityVisit ufv = (UnitFacilityVisit) Roastery.getHibernateApi().load(UnitFacilityVisit.class, chargeEvent.getBexuUfvGkey());&#xA;        if (ufv != null &amp;&amp; ufv.getUfvUnit() != null) {&#xA;          System.out.println(&quot;GenerateOnTerminalFeeEvent: Unit Id : &quot; + ufv.getUfvUnit().getUnitId());&#xA;          int owedDays = manager.getStorageDaysOwed(ufv, cueEventType);&#xA;          if (owedDays &gt; ALLOWED_OWED_DAYS) {&#xA;            System.out.println(&quot;GenerateOnTerminalFeeEvent: Days owed : &quot; + owedDays);&#xA;            EventManager em = (EventManager) Roastery.getBean(EventManager.BEAN_ID);&#xA;            Event event = new Event();&#xA;            em.persistEventAndPerformRules(event, timeNow, eventType, null, null, null, ufv.getUfvUnit(), null, null);&#xA;            System.out.println(&quot;GenerateOnTerminalFeeEvent: &quot; + newEventTypeId + &quot; event created for : &quot; + chargeEvent.getBexuEqId());&#xA;            logInfo(&quot;GenerateOnTerminalFeeEvent:&quot; + newEventTypeId + &quot; event created for : &quot; + chargeEvent.getBexuEqId());&#xA;            chargeEvent.setBexuFlexLong05(ON_TERMINAL_EVENT_NEGATIVE_DEFAULT_VALUE);&#xA;            Roastery.getHibernateApi().update(chargeEvent);&#xA;          }&#xA;        }&#xA;      } catch (Exception e) {&#xA;          System.out.println(&quot;GenerateOnTerminalFeeEvent: Event is not generated for : &quot; + chargeEvent.getBexuEqId());;&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;  private List getCUEsForOnTermianl(String inEventType, String category) {&#xA;&#xA;    List locTypesList = new ArrayList();&#xA;    locTypesList.add(CarrierModeEnum.TRUCK.getKey());&#xA;    locTypesList.add(CarrierModeEnum.VESSEL.getKey());&#xA;&#xA;    String[] locTypes = locTypesList.toArray(new String[locTypesList.size()]);&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(ArgoExtractEntity.CHARGEABLE_UNIT_EVENT)&#xA;            .addDqPredicate(PredicateFactory.eq(ArgoExtractField.BEXU_EVENT_TYPE, inEventType))&#xA;            .addDqPredicate(PredicateFactory.eq(ArgoExtractField.BEXU_CATEGORY, category))&#xA;            .addDqPredicate(PredicateFactory.isNull(ArgoExtractField.BEXU_FLEX_LONG05))&#xA;            .addDqPredicate(PredicateFactory.eq(ArgoExtractField.BEXU_IB_LOC_TYPE, CarrierModeEnum.TRAIN))&#xA;            .addDqPredicate(PredicateFactory.in(ArgoExtractField.BEXU_OB_LOC_TYPE, locTypes));&#xA;&#xA;    return Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;  }&#xA;  //User can change max. owed days&#xA;  public static final int ALLOWED_OWED_DAYS = 10;&#xA;  public static final Long ON_TERMINAL_EVENT_NEGATIVE_DEFAULT_VALUE = new Long(-999999999);&#xA;  private static final Logger LOGGER = Logger.getLogger(GenerateOnTerminalFeeEvent.class);&#xA;}&#xA;" />
<digital-asset id="GvyGenerateExportRedeliveryInvoices" short-description="GvyGenerateExportRedeliveryInvoices" is-pre-deployed="Y" groovy-code="import com.navis.argo.ArgoExtractEntity&#xA;import com.navis.argo.ArgoExtractField&#xA;import com.navis.argo.ArgoPropertyKeys&#xA;import com.navis.argo.BillingTransactionDocument&#xA;import com.navis.argo.BillingTransactionsDocument&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.EdiInvoice&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.atoms.BillingExtractEntityEnum&#xA;import com.navis.argo.business.atoms.FreightKindEnum&#xA;import com.navis.argo.business.atoms.GuaranteeTypeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.extract.ChargeableUnitEvent&#xA;import com.navis.argo.business.extract.Guarantee&#xA;import com.navis.argo.business.extract.billing.ConfigurationProperties&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.argo.portal.BillingWsApiConsts&#xA;import com.navis.argo.util.FileUtil&#xA;import com.navis.argo.util.XmlUtil&#xA;import com.navis.argo.webservice.types.v1_0.GenericInvokeResponseWsType&#xA;import com.navis.argo.webservice.types.v1_0.MessageType&#xA;import com.navis.argo.webservice.types.v1_0.QueryResultType&#xA;import com.navis.argo.webservice.types.v1_0.ResponseType&#xA;import com.navis.argo.webservice.types.v1_0.ScopeCoordinateIdsWsType&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.esb.client.ESBClientHelper&#xA;import com.navis.framework.esb.server.FrameworkMessageQueues&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.Ordering&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.util.DateUtil&#xA;import com.navis.inventory.InventoryPropertyKeys&#xA;import com.navis.inventory.business.api.UnitStorageManager&#xA;import com.navis.www.services.argoservice.ArgoServiceLocator&#xA;import com.navis.www.services.argoservice.ArgoServicePort&#xA;import javax.xml.rpc.ServiceException&#xA;import javax.xml.rpc.Stub&#xA;import org.apache.commons.lang.StringUtils&#xA;import org.apache.log4j.Logger&#xA;import org.jdom.Element&#xA;import org.jdom.Text&#xA;&#xA;public class GvyGenerateExportRedeliveryInvoices extends GroovyApi {&#xA;&#xA;  private static final String IS_INVOICE_FINAL = &quot;False&quot;;&#xA;  private static final String FROM_EMAIL_ADDRESS = &quot;test@zebra.com&quot;;&#xA;  private static final int NUMBER_OF_GRACE_DAYS = 14;&#xA;&#xA;  public void execute(Map parameters) {&#xA;&#xA;    logInfo(&quot;Groovy : GvyGenerateExportRedeliveryInvoices Generate invoices for Export re-deliveries&quot;);&#xA;&#xA;    UserContext context = ContextHelper.getThreadUserContext();&#xA;    Date timeNow = DateUtil.getTodaysDate(context.getTimeZone());&#xA;    long timeNowInMillis = timeNow.getTime();&#xA;&#xA;    // For Invoice generation&#xA;    String invoiceTypeID = &quot;EXPORT REDELIVERY&quot;;&#xA;    String currencyId = &quot;USD&quot;;&#xA;    String action = &quot;DRAFT&quot;;&#xA;&#xA;    // For CUE selection&#xA;    String eventType = &quot;STORAGE&quot;;&#xA;    String status = &quot;QUEUED&quot;;&#xA;    String category = UnitCategoryEnum.EXPORT.getKey();&#xA;    String freightKind = FreightKindEnum.FCL.getKey();&#xA;&#xA;    // get the chargeable unit events with eventType = STORAGE, status = QUEUED , category = EXPORT and freightkind = FCL&#xA;    List unitCUEs = getCUEsFor(status, category, eventType, freightKind);&#xA;&#xA;    if (unitCUEs.isEmpty()) {&#xA;      log(&quot;Groovy : GenerateExportRedeliveryInvoices : No chargeable events exists!&quot;)&#xA;      return;&#xA;    }&#xA;&#xA;    for (ChargeableUnitEvent cueToBeInvoiced: unitCUEs) {&#xA;      Date complexInTime;&#xA;      String equipmentId = cueToBeInvoiced.getBexuEqId();&#xA;      Date endTime = cueToBeInvoiced.getBexuEventEndTime();&#xA;&#xA;      // get the equipment/unit id from the cueToBeInvoiced&#xA;      String unitId = cueToBeInvoiced.getBexuEqId();&#xA;      long gkey = cueToBeInvoiced.getBexuGkey()&#xA;      log(&quot;Groovy : GenerateExportRedeliveryInvoices : Found Chargeable Unit Event with gkey &quot; + gkey + &quot; for Equip id &quot; + unitId);&#xA;&#xA;      ChargeableUnitEvent cue = getCUEMatchingCriteria(status, eventType, equipmentId, endTime);&#xA;&#xA;      // Case - 1&#xA;      //======&#xA;      //= If no record found for CUE - (2)&#xA;      //- CUE - (1) of Time out + 14 &gt; = Today ? Generate Export Re-Delivery invoice for CUE - (1)&#xA;      Boolean generateExportReDeliveryInvoice = false;&#xA;      if (cue == null &amp;&amp; cueToBeInvoiced.getBexuUfvTimeOut() != null) {&#xA;        Date dateAfterCueUfvTimeOutAndGraceDays = addDays(cueToBeInvoiced.getBexuUfvTimeOut(), NUMBER_OF_GRACE_DAYS, context.getTimeZone());&#xA;        if (dateAfterCueUfvTimeOutAndGraceDays.getTime() &gt;= timeNowInMillis) {&#xA;          generateExportReDeliveryInvoice = true;&#xA;        }&#xA;      }&#xA;&#xA;      // Case - 2&#xA;      //======&#xA;      //= If record found for CUE - (2)&#xA;      //- (2A) Find the difference between CUE - (2) of In Time - CUE - (1) of Out Time&#xA;      //- If (2A) is &gt; = 14 ? Generate Export Re-Delivery invoice for CUE - (1)&#xA;&#xA;      if (cue != null) {&#xA;        long diffOfNewCueUfvTimeInAndOldCueUfvTimeOut = DateUtil.differenceInDays(cueToBeInvoiced.getBexuUfvTimeOut(),&#xA;                cue.getBexuUfvTimeIn(), context.getTimeZone());   // or DateUtil.differenceInTruncatedDays&#xA;&#xA;        if (diffOfNewCueUfvTimeInAndOldCueUfvTimeOut &gt; 0) {&#xA;          if (diffOfNewCueUfvTimeInAndOldCueUfvTimeOut &gt;= NUMBER_OF_GRACE_DAYS) {&#xA;            generateExportReDeliveryInvoice = true;&#xA;          }&#xA;&#xA;          //Case - 3&#xA;          //======&#xA;          //= If (2A) is &lt; 14 and If CUE - (2) FreightKind = EMTPY ? Generate Export Re-Delivery invoice for CUE - (1).&#xA;          //Update CUE (1) bexuFlexLong5 = -99999998&#xA;&#xA;          if (diffOfNewCueUfvTimeInAndOldCueUfvTimeOut &lt; NUMBER_OF_GRACE_DAYS &amp;&amp; FreightKindEnum.MTY.getKey().equals(cue.getBexuFreightKind())) {&#xA;            generateExportReDeliveryInvoice = true;&#xA;          }&#xA;        }&#xA;      }&#xA;      // to avoid the reprocessing of CUE bexuFlexLong05 is updated with -99999998&#xA;      cueToBeInvoiced.setBexuFlexLong05(new Long(-99999998));&#xA;      HibernateApi.getInstance().save(cueToBeInvoiced);&#xA;&#xA;      if (generateExportReDeliveryInvoice) {&#xA;&#xA;        List guarantees = getGuarantees(cueToBeInvoiced);&#xA;&#xA;        for (Guarantee guarantee: guarantees) {&#xA;          try {&#xA;            logInfo(&quot;Groovy : GenerateExportRedeliveryInvoices for &quot;);&#xA;&#xA;            Element element = buildGetInvoiceByInvTypeIdForUnitElement(unitId, invoiceTypeID, guarantee.getGnteGuaranteeCustomer(), null,&#xA;                    currencyId, timeNow, endTime, cueToBeInvoiced.getBexuGkey(), guarantee.getGnteCustomerReferenceId());&#xA;            appendFlexFieldDetails(element, guarantee);&#xA;            EdiInvoice ediInvoice = getInvoiceByInvTypeIdForUnit(element);&#xA;&#xA;            if (ediInvoice != null) {&#xA;              // get the ToEmailAddress&#xA;              String emailToId = ediInvoice.getInvoiceAddress() != null ? ediInvoice.getInvoiceAddress().getEmailAddress() : null;&#xA;              logInfo(&quot;Groovy : GenerateExportRedliveryInvoices for &quot; + guarantee.getGnteGuaranteeCustomer().getBzuId() + &quot; emailed to &quot; + emailToId);&#xA;&#xA;              // Compose subject message&#xA;              String subject = eventType + &quot; Invoice for UNIT:&quot; + unitId;&#xA;&#xA;              logInfo(subject + &quot; generated sucessfully !&quot;);&#xA;              System.out.println(subject + &quot; generated sucessfully !&quot;);&#xA;&#xA;              try {&#xA;                UnitStorageManager manager = (UnitStorageManager) Roastery.getBean(UnitStorageManager.BEAN_ID);&#xA;                String invoiceReportUrlWithType = manager.getInvoiceReportUrl(ediInvoice.getGkey());&#xA;&#xA;                try {&#xA;                  String fileName = eventType + &quot;InvoiceFor&quot; + unitId;&#xA;                  File reportTempFile = getFile(invoiceReportUrlWithType, fileName);&#xA;&#xA;                  String[] attachment = new String[1];&#xA;                  String attachmentPrefix = &quot;file:&quot;;&#xA;                  if (reportTempFile != null) {&#xA;                    attachment[0] = attachmentPrefix + reportTempFile.getAbsolutePath();&#xA;                  } else {&#xA;                    attachment[0] = &quot;&quot;;&#xA;                  }&#xA;&#xA;                  String msgBody = &quot;Please find &quot; + subject + &quot; attached.&quot;;&#xA;&#xA;                  if (emailToId != null &amp;&amp; !StringUtils.isEmpty(emailToId)) {&#xA;                    try {&#xA;                      ESBClientHelper.sendEmailAttachments(context, FrameworkMessageQueues.EMAIL_QUEUE, emailToId,&#xA;                              FROM_EMAIL_ADDRESS, subject, msgBody, attachment);&#xA;                      logInfo(&quot;Groovy : GenerateExportRedeliveryInvoices &quot; + subject + &quot;' &quot; + emailToId + &quot;' on &quot; + timeNow + &quot;.&quot;);&#xA;                      System.out.println(&quot;Groovy : GenerateExportRedeliveryInvoices &quot; + subject + &quot;' &quot; + emailToId + &quot;' on &quot; + timeNow + &quot;.&quot;);&#xA;                    } catch (Exception e) {&#xA;                      LOGGER.error(e.getMessage());&#xA;                    }&#xA;                  } else {&#xA;                    // Log if no e-mail Id found in for guarantor&#xA;                    logWarn(subject + &quot;\n Details : &quot; + msgBody);&#xA;                    System.out.println(subject + &quot;\n Details : &quot; + msgBody);&#xA;                  }&#xA;                } catch (Exception e) {&#xA;                  logWarn(&quot;Groovy : GenerateExportRedeliveryInvoices: Invoice report preparation failed for Invoice Draft Nbr :&quot; +&#xA;                          ediInvoice.getDraftNumber() + &quot; due to : &quot; + e.toString());&#xA;                  System.out.println(&quot;Groovy : GenerateExportRedeliveryInvoices: Invoice report preparation failed for Invoice Draft Nbr :&quot; +&#xA;                          ediInvoice.getDraftNumber() + &quot; due to : &quot; + e.toString());&#xA;                }&#xA;              } catch (Exception e) {&#xA;                logWarn(&quot;Groovy : GenerateExportRedeliveryInvoices: Invoice report creation failed for Draft Nbr :&quot; + ediInvoice.getDraftNumber() +&#xA;                        &quot; due to : &quot; + e.toString());&#xA;                System.out.println(&quot;Groovy : GenerateExportRedeliveryInvoices: Invoice report creation failed for Draft Nbr :&quot; +&#xA;                        ediInvoice.getDraftNumber() + &quot; due to : &quot; + e.toString());&#xA;              }&#xA;              // Update the status and draft id for the invoiced guaranteed record.&#xA;              guarantee.setGnteInvDraftNbr(ediInvoice.getDraftNumber());&#xA;              guarantee.setGnteInvoiceStatus(INVOICED);&#xA;              Roastery.getHibernateApi().saveOrUpdate(guarantee);&#xA;            }&#xA;          } catch (Exception e) {&#xA;            logWarn(&quot;Groovy : GenerateExportRedeliveryInvoices: Invoice Generation failed for cueToBeInvoiced :&quot; + cueToBeInvoiced.toString() +&#xA;                    &quot; due to : &quot; + e.toString());&#xA;            System.out.println(&quot;Invoice Generation failed for cueToBeInvoiced :&quot; + cueToBeInvoiced.toString() + &quot; due to : &quot; + e.toString());&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;  private static List getCUEsFor(String inStatus, String inCategory, String inEventTypeId, String inFreightKind) {&#xA;&#xA;    if (inEventTypeId == null || inStatus == null) {&#xA;      log(&quot;Groovy : GenerateExportRedliveryInvoices executed without EventType or Status.&quot;);&#xA;      return null;&#xA;    }&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(ArgoExtractEntity.CHARGEABLE_UNIT_EVENT).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.BEXU_EVENT_TYPE, inEventTypeId)).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.BEXU_STATUS, inStatus)).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.BEXU_CATEGORY, inCategory)).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.BEXU_FREIGHT_KIND, inFreightKind)).&#xA;&#xA;            addDqPredicate(PredicateFactory.isNull(ArgoExtractField.BEXU_FLEX_LONG05)).&#xA;            addDqPredicate(PredicateFactory.isNotNull(ArgoExtractField.BEXU_DRAY_STATUS)).&#xA;            addDqPredicate(PredicateFactory.isNotNull(ArgoExtractField.BEXU_UFV_TIME_OUT));&#xA;&#xA;    return Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;  }&#xA;&#xA;//  Get another CUE - (2)&#xA;//i) Get another CUE record&#xA;//- Status = QUEUED&#xA;//- Equipment Id = Match with (1)&#xA;//- Unit - Ufv != (1)&#xA;//- EvenType = STORAGE&#xA;//- Start Time &gt;= CUE (1) End Time&#xA;&#xA;  private static ChargeableUnitEvent getCUEMatchingCriteria(String inStatus, String inEventTypeId, String inEquipmentId, Date inEndTime) {&#xA;    if (inEventTypeId == null || inStatus == null) {&#xA;      log(&quot;Groovy : GenerateExportRedliveryInvoices executed without EventType or Status.&quot;);&#xA;      return null;&#xA;    }&#xA;    ChargeableUnitEvent cue;&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(ArgoExtractEntity.CHARGEABLE_UNIT_EVENT).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.BEXU_EVENT_TYPE, inEventTypeId)).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.BEXU_STATUS, inStatus)).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.BEXU_EQ_ID, inEquipmentId)).&#xA;            addDqPredicate(PredicateFactory.ge(ArgoExtractField.BEXU_EVENT_START_TIME, inEndTime)).&#xA;            addDqOrdering(Ordering.desc(ArgoExtractField.BEXU_UFV_TIME_IN));&#xA;&#xA;    List matchingCUEs = Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;    if (!matchingCUEs.isEmpty()) {&#xA;      cue = (ChargeableUnitEvent) matchingCUEs.get(0);&#xA;    }&#xA;    return cue;&#xA;  }&#xA;&#xA;  private Date addDays(Date inDate, int inNumOfDays, TimeZone inTimeZone) {&#xA;    Calendar calendar = Calendar.getInstance(inTimeZone);&#xA;&#xA;    calendar.setTime(inDate);&#xA;    int dayA = calendar.get(Calendar.DAY_OF_MONTH);&#xA;    calendar.set(Calendar.DAY_OF_MONTH, dayA + inNumOfDays);&#xA;    return calendar.getTime();&#xA;  }&#xA;&#xA;  private List getGuarantees(ChargeableUnitEvent inEvent) {&#xA;    List gntTypeList = new ArrayList&lt;String&gt;();&#xA;    gntTypeList.add(GuaranteeTypeEnum.PRE_PAY.getKey());&#xA;    gntTypeList.add(GuaranteeTypeEnum.OAC.getKey());&#xA;    gntTypeList.add(GuaranteeTypeEnum.CREDIT_PREAUTHORIZE.getKey());&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(ArgoExtractEntity.GUARANTEE).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.GNTE_APPLIED_TO_PRIMARY_KEY, inEvent.getServiceExtractGkey())).&#xA;            addDqPredicate(PredicateFactory.in(ArgoExtractField.GNTE_GUARANTEE_TYPE, gntTypeList)).&#xA;            addDqPredicate(PredicateFactory.isNull(ArgoExtractField.GNTE_VOIDED_EMAIL_SENT_DATE)).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.GNTE_APPLIED_TO_CLASS, BillingExtractEntityEnum.INV));&#xA;    return Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;  }&#xA;&#xA;  private Element buildGetInvoiceByInvTypeIdForUnitElement(String unitId, String invoiceTypeId, ScopedBizUnit inPayee,&#xA;                                                           ScopedBizUnit inContractCustomer, String inCurrencyId, Date inContractEffectiveDate,&#xA;                                                           Date inPaidThruDate, Long cueGkey, String inCustomerRefId) {&#xA;    //build the request xml&#xA;    Element rootElem = new Element(BillingWsApiConsts.BILLING_ROOT, XmlUtil.ARGO_NAMESPACE);&#xA;    Element elem = new Element(BillingWsApiConsts.GENERATE_INVOICE_REQUEST, XmlUtil.ARGO_NAMESPACE);&#xA;    rootElem.addContent(elem);&#xA;    addChildTextElement(BillingWsApiConsts.INVOICE_TYPE_ID, invoiceTypeId, elem);&#xA;    addChildTextElement(BillingWsApiConsts.PAYEE_CUSTOMER_ID, inPayee.getBzuId(), elem);&#xA;    addChildTextElement(BillingWsApiConsts.PAYEE_CUSTOMER_BIZ_ROLE, inPayee.getBzuRole().getKey(), elem);&#xA;    String contractCustId = inContractCustomer != null ? inContractCustomer.getBzuId() : &quot;&quot;;&#xA;    addChildTextElement(BillingWsApiConsts.CONTRACT_CUSTOMER_ID, contractCustId, elem);&#xA;    addChildTextElement(BillingWsApiConsts.CONTRACT_CUSTOMER_BIZ_ROLE, inContractCustomer != null ? inContractCustomer.getBzuRole().getKey() : null,&#xA;            elem);&#xA;    addChildTextElement(BillingWsApiConsts.CURRENCY_ID, inCurrencyId, elem);&#xA;    //  Start ---------- SPECIAL childTextElement to process Guaranteed records for STORAGE and REEFER event&#xA;    //  Add another root element to indicate that it is initiated from groovy and the GUARANTEED records are to be invoiced.&#xA;    //  Otherwise N4 Billing skips the GURANTEED days.  Applicable for STORAGE and REEFER events of Guaranteed records.&#xA;    //  ********** DO NOT INCLUDE THIS ELEMENT WITHOUT KNOWING THE REASON ****************&#xA;    addChildTextElement(BillingWsApiConsts.IS_GUARANTEED_DAY_TOBE_INVOICED, &quot;True&quot;, elem);&#xA;    //  End ---------- SPECIAL childTextElement to process Guaranteed records for STORAGE and REEFER event&#xA;&#xA;    String effectiveDateStr = null;&#xA;    if (inContractEffectiveDate != null) {&#xA;      effectiveDateStr = BillingWsApiConsts.DATE_FORMAT.format(inContractEffectiveDate);&#xA;    }&#xA;    addChildTextElement(BillingWsApiConsts.CONTRACT_EFFECTIVE_DATE, effectiveDateStr, elem);&#xA;    addChildTextElement(BillingWsApiConsts.IS_INVOICE_FINAL, IS_INVOICE_FINAL, elem);&#xA;    addChildTextElement(BillingWsApiConsts.CUSTOMER_REFERENCE_ID, inCustomerRefId, elem);&#xA;    Element paramsElem = new Element(BillingWsApiConsts.INVOICE_PARAMETERS, XmlUtil.ARGO_NAMESPACE);&#xA;    Element paramElem = new Element(BillingWsApiConsts.INVOICE_PARAMETER, XmlUtil.ARGO_NAMESPACE);&#xA;//    addChildTextElement(BillingWsApiConsts.RULE_START_DAY, startDayStr, paramElem);&#xA;    addChildTextElement(BillingWsApiConsts.EQUIPMENT_ID, unitId, paramElem);&#xA;    String paidThruDayStr = null;&#xA;    if (inPaidThruDate != null) {&#xA;      paidThruDayStr = BillingWsApiConsts.DATE_FORMAT.format(inPaidThruDate);&#xA;    }&#xA;    addChildTextElement(BillingWsApiConsts.PAID_THRU_DAY, paidThruDayStr, paramElem);&#xA;    addChildTextElement(BillingWsApiConsts.CUE_GKEY, cueGkey.toString(), paramElem);&#xA;    paramsElem.addContent(paramElem);&#xA;    elem.addContent(paramsElem);&#xA;    return rootElem;&#xA;  }&#xA;&#xA;  private void addChildTextElement(String inElementName, String inElementText, Element inParentElement) {&#xA;    Element childElement = new Element(inElementName, XmlUtil.ARGO_NAMESPACE);&#xA;    Text childText = new Text(inElementText);&#xA;    childElement.addContent(childText);&#xA;    inParentElement.addContent(childElement);&#xA;  }&#xA;&#xA;  public EdiInvoice getInvoiceByInvTypeIdForUnit(Element inElement) throws BizViolation {&#xA;    try {&#xA;      ArgoServicePort port = getWsStub();&#xA;      ScopeCoordinateIdsWsType scopeCoordinates = getScopeCoordenatesForWs();&#xA;      GenericInvokeResponseWsType invokeResponseWsType = port.genericInvoke(scopeCoordinates, XmlUtil.toString(inElement, false));&#xA;      ResponseType response = invokeResponseWsType.getCommonResponse();&#xA;      QueryResultType[] queryResultTypes = response.getQueryResults();&#xA;      if (queryResultTypes == null || queryResultTypes.length != 1) {&#xA;        //todo: generic error&#xA;        if (response.getMessageCollector() != null &amp;&amp; response.getMessageCollector().getMessages(0) != null) {&#xA;          MessageType type = response.getMessageCollector().getMessages(0);&#xA;          String message = type.getMessage();&#xA;          throw BizFailure.create(&quot;Error from Billing Webservice - &quot; + message);&#xA;        } else {&#xA;          throw BizFailure.create(ArgoPropertyKeys.BILLING_WEBSERVICE_SERVICES_URL, null, null);&#xA;        }&#xA;      }&#xA;      String responseString = queryResultTypes[0].getResult();&#xA;&#xA;      BillingTransactionsDocument billingTransactionsDocument = BillingTransactionsDocument.Factory.parse(responseString);&#xA;      BillingTransactionsDocument.BillingTransactions transactions = billingTransactionsDocument.getBillingTransactions();&#xA;      List&lt;BillingTransactionDocument.BillingTransaction&gt; transactionList = transactions.getBillingTransactionList();&#xA;      //todo: error if more than 1 transaction returned&#xA;      BillingTransactionDocument.BillingTransaction billingTransaction = transactionList.get(0);&#xA;      List&lt;EdiInvoice&gt; list = billingTransaction.getInvoiceList();&#xA;      if (list.isEmpty()) {&#xA;        throw BizFailure.create(InventoryPropertyKeys.NO_INVOICE_RETRIEVED, null, null);&#xA;      } else if (list.size() &gt; 1) {&#xA;        throw BizFailure.create(InventoryPropertyKeys.MULTIPLE_INVOICES_RETURNED, null, list.size());&#xA;      }&#xA;      EdiInvoice ediInvoice = list.get(0);&#xA;&#xA;      return ediInvoice;&#xA;    } catch (ServiceException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_ERROR, e, null);&#xA;    } catch (java.rmi.RemoteException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_ERROR, e, null);&#xA;    } catch (IOException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_XML_ERROR, e, null);&#xA;    } catch (org.apache.xmlbeans.XmlException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_XML_ERROR, e, null);&#xA;    }&#xA;  }&#xA;&#xA;  private ArgoServicePort getWsStub() throws ServiceException {&#xA;    ArgoServiceLocator locator = new ArgoServiceLocator();&#xA;    ArgoServicePort port = locator.getArgoServicePort(ConfigurationProperties.getBillingServiceURL());&#xA;    Stub stub = (Stub) port;&#xA;    stub._setProperty(Stub.USERNAME_PROPERTY, ConfigurationProperties.getBillingWebServiceUserId());&#xA;    stub._setProperty(Stub.PASSWORD_PROPERTY, ConfigurationProperties.getBillingWebServicePassWord());&#xA;    return port;&#xA;  }&#xA;&#xA;  private ScopeCoordinateIdsWsType getScopeCoordenatesForWs() {&#xA;    //build the scope coordinates for the web service based on the user context;&#xA;    ScopeCoordinateIdsWsType scopeCoordinates = new ScopeCoordinateIdsWsType();&#xA;    UserContext uContext = ContextHelper.getThreadUserContext();&#xA;    scopeCoordinates.setOperatorId(ContextHelper.getThreadOperator() != null ? ContextHelper.getThreadOperator().getId() : null);&#xA;    scopeCoordinates.setComplexId(ContextHelper.getThreadComplex() != null ? ContextHelper.getThreadComplex().getCpxId() : null);&#xA;    scopeCoordinates.setFacilityId(ContextHelper.getThreadFacility() != null ? ContextHelper.getThreadFacility().getFcyId() : null);&#xA;    scopeCoordinates.setYardId(ContextHelper.getThreadYard() != null ? ContextHelper.getThreadYard().getYrdId() : null);&#xA;    return scopeCoordinates;&#xA;  }&#xA;&#xA;  private File getFile(String inDownloadUrl, String inFileName) {&#xA;    String[] fileAttributes = inDownloadUrl.split(&quot;:::&quot;);&#xA;    String invoiceReportUrl = fileAttributes[0];&#xA;    String mimeType = fileAttributes[1];&#xA;&#xA;    if (invoiceReportUrl != null) {&#xA;&#xA;      URL url = new URL(invoiceReportUrl);&#xA;      URLConnection connection = url.openConnection();&#xA;      connection.connect();&#xA;      InputStream urlInputStream = connection.getInputStream();&#xA;&#xA;      String classPath = FileUtil.getClassPath();&#xA;      File classPathDirectory = new File(classPath);&#xA;      File file = new File(inFileName + mimeType, classPathDirectory);&#xA;      file.deleteOnExit();&#xA;&#xA;      BufferedInputStream buffInStream = new BufferedInputStream(urlInputStream);&#xA;      BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(file));&#xA;      try {&#xA;        copyStream(buffInStream, outputStream);&#xA;      } catch (IOException ioe) {&#xA;        LOGGER.error(&quot;Groovy : GenerateExportRedeliveryInvoices: Downloading Invoice failed due to :&quot; + ioe.toString());&#xA;        System.out.println(&quot;Groovy : GenerateExportRedeliveryInvoices: Downloading Invoice failed due to :&quot; + ioe.toString());&#xA;      } finally {&#xA;        buffInStream.close();&#xA;        outputStream.close();&#xA;      }&#xA;      return file;&#xA;    }&#xA;  }&#xA;&#xA;  private void copyStream(InputStream inInputStream, OutputStream inOutputStream) throws IOException {&#xA;    byte[] buffer = new byte[256];&#xA;    while (true) {&#xA;      int bytesRead = inInputStream.read(buffer);&#xA;      if (bytesRead == -1) {&#xA;        break;&#xA;      }&#xA;      inOutputStream.write(buffer, 0, bytesRead);&#xA;    }&#xA;  }&#xA;&#xA;  void appendFlexFieldDetails(Element inRootElement, Guarantee inGuarantee) {&#xA;&#xA;    Element element = inRootElement.getChild(BillingWsApiConsts.GENERATE_INVOICE_REQUEST, XmlUtil.ARGO_NAMESPACE);&#xA;&#xA;    Element flexElement = new Element(BillingWsApiConsts.INVOICE_FLEX_FIELDS, XmlUtil.ARGO_NAMESPACE);&#xA;    String gnteId = inGuarantee.getGnteGuaranteeId();&#xA;    String gnteType = inGuarantee.getGnteGuaranteeType().getKey();&#xA;    String paymentType = inGuarantee.getGntePaymentType().getKey()&#xA;    addChildTextElement(BillingWsApiConsts.FLEX_STRING09, gnteId + &quot;;&quot; + gnteType + &quot;;&quot; + paymentType, flexElement);&#xA;    element.addContent(flexElement);&#xA;  }&#xA;&#xA;  private static final String INVOICED = &quot;INVOICED&quot;;&#xA;  private static final Logger LOGGER = Logger.getLogger(GvyGenerateExportRedeliveryInvoices.class);&#xA;}&#xA;" />
<digital-asset id="CreateMissingCueStorageReeferEventsForInYardUfv" short-description="CreateMissingCueStorageReeferEventsForInYardUfv" is-pre-deployed="Y" groovy-code="/*&#xA; * Copyright (c) 2011 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.units.UnitEventExtractManager&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import org.apache.log4j.Logger&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;&#xA;/**&#xA; * This is a Pre-Deployable Groovy Plug-in to create missing STORAGE/REEFER event in CUE for In Yard containers.&#xA; * Murali R 07/27/2011&#xA; */&#xA;public class CreateMissingCueStorageReeferEventsForInYardUfv extends GroovyApi {&#xA;&#xA;  public void execute(Map parameters) {&#xA;&#xA;    UserContext context = ContextHelper.getThreadUserContext();&#xA;    Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#xA;    LOGGER.info(&quot;Groovy : CreateMissingCueStorageReeferEventsForInYardUfv - starts! &quot; + timeNow);&#xA;    System.out.println(&quot;Groovy : CreateMissingCueStorageReeferEventsForInYardUfv - starts! &quot; + timeNow);&#xA;&#xA;    //For each In Yard UFV create STORAGE - CUE if it doesn't exist&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT_FACILITY_VISIT)&#xA;            .addDqPredicate(PredicateFactory.eq(UnitField.UFV_CURRENT_POSITION_TYPE, LocTypeEnum.YARD));&#xA;    //dq.setMaxResults(5000);&#xA;    //dq.setRequireTotalCount(false);&#xA;&#xA;&#xA;&#xA;      int recordCount = 0;&#xA;      List ufvGkeys = HibernateApi.getInstance().findPrimaryKeysByDomainQuery(dq);&#xA;      System.out.println(&quot;Groovy CreateMissingCueStorageReeferEventsForInYardUfv -- found Ufv primary keys &quot; + ufvGkeys.size());&#xA;      if (!ufvGkeys.isEmpty()) {&#xA;        logInfo(&quot;About to verify STORAGE /REEFER events if it doesn't exist for first set of UFVs &quot; + ufvGkeys.size());&#xA;        System.out.println(&quot;About to verify STORAGE /REEFER events if it doesn't exist for first set of UFVs &quot; + ufvGkeys.size());&#xA;        for (int i = 0; i &lt; ufvGkeys.size(); i++) {&#xA;          if (recordCount &gt; 500) {&#xA;            HibernateApi.getInstance().flush();&#xA;            LOGGER.info(&quot;Groovy : CreateMissingCueStorageReeferEventsForInYardUfv - committed &quot; + recordCount);&#xA;            System.out.println(&quot;Groovy : CreateMissingCueStorageReeferEventsForInYardUfv  - committed &quot; + recordCount);&#xA;            recordCount = 0;&#xA;          }&#xA;          recordCount++;&#xA;          Serializable ufvGkey = ufvGkeys[i];&#xA;          UnitFacilityVisit ufv = (UnitFacilityVisit) HibernateApi.getInstance().load(UnitFacilityVisit.class, ufvGkey);&#xA;          UnitEventExtractManager.createStorageChargeIfMissing(ufv);&#xA;          if (ufv.getUfvUnit().isReefer()) {&#xA;            UnitEventExtractManager.createReeferChargeIfMissing(ufv);&#xA;          }&#xA;        }&#xA;      }&#xA;      HibernateApi.getInstance().flush();&#xA;      LOGGER.info(&quot;Groovy : CreateMissingCueStorageReeferEventsForInYardUfv - FINAL committed &quot; + recordCount);&#xA;      System.out.println(&quot;Groovy : CreateMissingCueStorageReeferEventsForInYardUfv  - FINAL committed &quot; + recordCount);&#xA;      LOGGER.info(&quot;Groovy : CreateMissingCueStorageReeferEventsForInYardUfv - Ends &quot; + timeNow);&#xA;      System.out.println(&quot;Groovy : CreateMissingCueStorageReeferEventsForInYardUfv - Ends &quot; + timeNow);&#xA;&#xA;  }&#xA;&#xA;  private static Serializable[] getUfvGkeys(DomainQuery inDq) {&#xA;    return HibernateApi.getInstance().findPrimaryKeysByDomainQuery(inDq);&#xA;  }&#xA;&#xA;  protected final HibernateApi _hibernateApi;&#xA;  private static final Logger LOGGER = Logger.getLogger(CreateMissingCueStorageReeferEventsForInYardUfv.class);&#xA;}&#xA;" />
<digital-asset id="CreateWaivedStorageEvents" short-description="CreateWaivedStorageEvents" is-pre-deployed="Y" groovy-code="import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import org.apache.log4j.Logger&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.argo.ArgoExtractEntity&#xA;import com.navis.argo.ArgoExtractField&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.argo.business.atoms.GuaranteeTypeEnum&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.argo.business.extract.Guarantee&#xA;import com.navis.argo.business.extract.ChargeableUnitEvent&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.framework.util.ValueObject&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.framework.portal.Ordering&#xA;import com.navis.argo.business.atoms.GuaranteeOverrideTypeEnum&#xA;import com.navis.framework.metafields.MetafieldIdList&#xA;import com.navis.framework.metafields.MetafieldId&#xA;&#xA;&#xA;/**&#xA; * This is a Pre-Deployable Groovy Plug-in which creates STORAGE_WAIVER events for waived storage events.&#xA; * @author &lt;a href=&quot;mailto:tramakrishnan@navis.com&quot;&gt; tramakrishnan&lt;/a&gt; Dec 02, 2009 Time: 2:36:01 PM&#xA; */&#xA;public class CreateWaivedStorageEvents extends GroovyApi {&#xA;&#xA;  public void execute(Map parameters) {&#xA;&#xA;    LOGGER.info(&quot;Groovy : CreateWaivedStorageEvents - starts to create STORAGE_WAIVER events for waived storage events !&quot;);&#xA;    System.out.println(&quot;Groovy : CreateWaivedStorageEvents - starts to create STORAGE_WAIVER events for waived storage events !&quot;);&#xA;    UserContext context = ContextHelper.getThreadUserContext();&#xA;    Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#xA;    List statusList = new ArrayList&lt;String&gt;();&#xA;    statusList.add(DRAFT);&#xA;    statusList.add(QUEUED);&#xA;    statusList.add(PARTIAL);&#xA;    String[] statuses = statusList.toArray(new String[statusList.size()]);&#xA;&#xA;    String eventTypeId = &quot;STORAGE&quot;;&#xA;    String eventTypeIdToCreate = &quot;STORAGE_WAIVER&quot;;&#xA;    String eventTypeDesc = &quot;Event for STORAGE Waiver&quot;;&#xA;    String invoiceTypeId = &quot;Waived Storage Invoice&quot;;&#xA;    String currencyId = &quot;UZD&quot;;&#xA;    String action = &quot;DRAFT&quot;;&#xA;&#xA;    //For each &quot;STORAGE&quot; CUE with status in [DRAFT, QUEUED, PARTIAL] and (End Date &lt;&gt; NULL)&#xA;    List guarantees = getNonVoidedGntesForFixedPriceWaiversFor(eventTypeId, statuses);&#xA;    if (guarantees.isEmpty()) {&#xA;      logInfo(&quot;No records matched for Groovy Plug-in: CreateWaivedStorageEvents&quot;);&#xA;      System.out.println(&quot;No records matched for Groovy Plug-in: CreateWaivedStorageEvents&quot;);&#xA;    } else {&#xA;      for (Guarantee guarantee: guarantees) {&#xA;        // for each guarantee create &quot;STORAGE_WAIVER&quot; CUE event&#xA;        ChargeableUnitEvent storageGnteEvent = createStorageWaiverEvent(guarantee, eventTypeIdToCreate);&#xA;        String gnteId = guarantee.getGnteGuaranteeId();&#xA;        if (storageGnteEvent != null) {&#xA;          String unitId = storageGnteEvent.getBexuEqId();&#xA;&#xA;          logInfo(&quot;Chargeable unit event '&quot; + eventTypeIdToCreate + &quot;' for Unit : &quot; + unitId + &quot; for Guarantee ID:&quot; + gnteId + &quot; created successfully!&quot;);&#xA;          System.out.println(&quot;Chargeable unit event '&quot; + eventTypeIdToCreate + &quot;' for Unit : &quot; + unitId + &quot; for Guarantee ID:&quot; + gnteId + &quot; created successfully!&quot;);&#xA;        } else {&#xA;          logInfo(&quot;Chargeable unit event '&quot; + eventTypeIdToCreate + &quot;' for Unit : &quot; + guarantee.getGnteAppliedToNaturalKey() + &quot; for Guarantee ID:&quot; + gnteId + &quot; creation failed !&quot;);&#xA;          System.out.println(&quot;Chargeable unit event '&quot; + eventTypeIdToCreate + &quot;' for Unit : &quot; + guarantee.getGnteAppliedToNaturalKey() + &quot; for Guarantee ID:&quot; + gnteId + &quot; creation failed!&quot;);&#xA;        }&#xA;      }&#xA;    }&#xA;&#xA;    LOGGER.info(&quot;Groovy : CreateWaivedStorageEvents - Ends&quot;);&#xA;    System.out.println(&quot;Groovy : CreateWaivedStorageEvents - Ends&quot;);&#xA;  }&#xA;&#xA;&#xA;  /**&#xA;   * Returns a list of non-voided waivers whose chargeable unit event's Satus in [DRAFT, QUEUED, PARTIAL] and EndDate!= NULL and GuaranteeThruDay!=NULL&#xA;   */&#xA;  private static List getNonVoidedGntesForFixedPriceWaiversFor(String inEventTypeId, String[] inStatuses) {&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(ArgoExtractEntity.GUARANTEE).&#xA;            addDqPredicate(PredicateFactory.isNull(ArgoExtractField.GNTE_VOIDED_OR_EXPIRED_DATE)).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.GNTE_GUARANTEE_TYPE, GuaranteeTypeEnum.OAC)).&#xA;            addDqOrdering(Ordering.asc(ArgoExtractField.GNTE_GUARANTEE_START_DAY));&#xA;&#xA;    DomainQuery waiverQuery = QueryUtils.createDomainQuery(ArgoExtractEntity.GUARANTEE).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.GNTE_OVERRIDE_VALUE_TYPE, GuaranteeOverrideTypeEnum.FIXED_PRICE)).&#xA;            addDqPredicate(PredicateFactory.isNull(ArgoExtractField.GNTE_VOIDED_OR_EXPIRED_DATE)).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.GNTE_GUARANTEE_TYPE, GuaranteeTypeEnum.WAIVER));&#xA;&#xA;    DomainQuery subQuery = QueryUtils.createDomainQuery(ArgoExtractEntity.CHARGEABLE_UNIT_EVENT).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.BEXU_EVENT_TYPE, inEventTypeId)).&#xA;            addDqPredicate(PredicateFactory.in(ArgoExtractField.BEXU_STATUS, inStatuses)).&#xA;            addDqPredicate(PredicateFactory.isNotNull(ArgoExtractField.BEXU_EVENT_END_TIME)).&#xA;            addDqPredicate(PredicateFactory.isNotNull(ArgoExtractField.BEXU_GUARANTEE_THRU_DAY));&#xA;&#xA;    if (subQuery != null) {&#xA;      dq.addDqPredicate(PredicateFactory.subQueryIn(subQuery, ArgoExtractField.GNTE_APPLIED_TO_PRIMARY_KEY));&#xA;    }&#xA;&#xA;    if (waiverQuery != null) {&#xA;      dq.addDqPredicate(PredicateFactory.subQueryIn(waiverQuery, ArgoExtractField.GNTE_RELATED_GUARANTEE));&#xA;    }&#xA;&#xA;    return (Roastery.getHibernateApi().findEntitiesByDomainQuery(dq));&#xA;  }&#xA;&#xA;  private static ChargeableUnitEvent createStorageWaiverEvent(Guarantee inGuarantee, String inEventTypeToCreate) {&#xA;    String status = &quot;GUARANTEED&quot;;&#xA;    ScopedBizUnit gnteCustomer = inGuarantee.getGnteGuaranteeCustomer();&#xA;    String payeeId = gnteCustomer != null ? inGuarantee.getGnteGuaranteeCustomer().getBzuId() : null;&#xA;    Date startTime = inGuarantee.getGnteGuaranteeStartDay();&#xA;    Date endTime = inGuarantee.getGnteGuaranteeEndDay();&#xA;    String unitId = inGuarantee.getGnteAppliedToNaturalKey();&#xA;    ChargeableUnitEvent gnteCue = ChargeableUnitEvent.getCUErecordForGuarantee(inGuarantee);&#xA;    // create new Event STORAGE_WAIVER&#xA;    ChargeableUnitEvent cue = ChargeableUnitEvent.create(gnteCue.getBexuUfvGkey(), ContextHelper.getThreadOperator());&#xA;    // copy the previous values to the newly created event&#xA;    ValueObject vao = gnteCue.getValueObject();&#xA;&#xA;    FieldChanges changes = new FieldChanges(vao);&#xA;    changes.removeFieldChange(ArgoExtractField.BEXU_GKEY);&#xA;    MetafieldIdList fields = getFieldsToRemove();&#xA;    removeFieldChanges(changes, fields);&#xA;    cue.applyFieldChanges(changes);&#xA;    //  set facility&#xA;    cue.setBexuFacility(gnteCue.getBexuFacility());&#xA;    Roastery.getHibernateApi().saveOrUpdate(cue);&#xA;    //  update values from Guarantee&#xA;    cue.setBexuEventType(inEventTypeToCreate);&#xA;    cue.setBexuStatus(status);&#xA;    cue.setBexuGuaranteeGkey(inGuarantee.getGnteGkey());&#xA;    cue.setBexuGuaranteeId(inGuarantee.getGnteGuaranteeId());&#xA;    cue.setBexuEqId(unitId);&#xA;    cue.setBexuPayeeCustomerId(payeeId);&#xA;    cue.setBexuGuaranteeParty(payeeId);&#xA;    cue.setBexuQuantity(inGuarantee.getGnteQuantity());&#xA;    cue.setBexuEventStartTime(startTime);&#xA;    Date cueEndTime = gnteCue.getBexuEventEndTime();&#xA;    cue.setBexuEventEndTime(cueEndTime.before(endTime) ? cueEndTime : endTime);&#xA;&#xA;    //  update related guarantee i.e.Waiver details&#xA;    Guarantee waiver = inGuarantee.getGnteRelatedGuarantee();&#xA;    //Is Value Override = TRUE&#xA;    cue.setBexuIsOverrideValue(Boolean.TRUE);&#xA;    //Override Type = Waiver.Waiver Type&#xA;    GuaranteeOverrideTypeEnum waiverType = waiver.getGnteOverrideValueType();&#xA;    cue.setBexuOverrideValueType(waiverType.getKey());&#xA;    //Override Value = Waiver.Guarantee Amount&#xA;    Double waiverAmount = waiver.getGnteGuaranteeAmount();&#xA;    cue.setBexuOverrideValue(waiverAmount);&#xA;&#xA;    Roastery.getHibernateApi().saveOrUpdate(cue);&#xA;    return cue;&#xA;  }&#xA;&#xA;  private static void removeFieldChanges(FieldChanges inSoureChanges, MetafieldIdList inFields) {&#xA;    if (inFields != null) {&#xA;      for (MetafieldId field: inFields) {&#xA;        inSoureChanges.removeFieldChange(field);&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;  private static MetafieldIdList getFieldsToRemove() {&#xA;    MetafieldIdList fields = new MetafieldIdList();&#xA;    fields.add(ArgoExtractField.BEXU_GKEY);&#xA;    fields.add(ArgoExtractField.BEXU_CREATED);&#xA;    fields.add(ArgoExtractField.BEXU_CREATOR);&#xA;    fields.add(ArgoExtractField.BEXU_CHANGED);&#xA;    fields.add(ArgoExtractField.BEXU_CHANGER);&#xA;    return fields;&#xA;  }&#xA;&#xA;  private static final String DRAFT = &quot;DRAFT&quot;;&#xA;  private static final String QUEUED = &quot;QUEUED&quot;;&#xA;  private static final String PARTIAL = &quot;PARTIAL&quot;;&#xA;  private static final Logger LOGGER = Logger.getLogger(CreateWaivedStorageEvents.class);&#xA;}&#xA;" />
<digital-asset id="RecordPaidGuaranteesSample" short-description="RecordPaidGuaranteesSample" is-pre-deployed="Y" groovy-code="/*&#xA;* Copyright (c) 2007 Navis LLC. All Rights Reserved.&#xA;* $Id: $&#xA;*/&#xA;&#xA;import com.navis.external.framework.util.EFieldChanges&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.framework.util.ValueObject&#xA;import com.navis.argo.business.atoms.BillingExtractEntityEnum&#xA;import com.navis.argo.business.services.IServiceExtract&#xA;import com.navis.inventory.InventoryBizMetafield&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.argo.business.extract.ChargeableUnitEvent&#xA;import com.navis.argo.business.extract.ChargeableMarineEvent&#xA;import com.navis.inventory.InventoryPropertyKeys&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.argo.business.extract.Guarantee&#xA;import com.navis.argo.ArgoExtractEntity&#xA;import com.navis.argo.ArgoExtractField&#xA;import com.navis.argo.business.atoms.GuaranteeTypeEnum&#xA;import com.navis.argo.business.atoms.PaymentTypeEnum&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.external.framework.util.EFieldChange&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.argo.business.reference.ContactInfo&#xA;import com.navis.inventory.external.inventory.AbstractRecordGuarantee&#xA;import com.navis.inventory.external.inventory.ERecordGuarantee&#xA;import com.navis.framework.util.DateUtil&#xA;&#xA;/**&#xA; * This is a Pre-Deployable Groovy Plug-in which creates PAID guarantees for Invoice items.&#xA; * NOTE: This groovy should be copied and renamed as &quot;RecordGuarantee&quot; when used in Code Extensions&#xA; * @author &lt;a href=&quot;mailto:tramakrishnan@navis.com&quot;&gt; tramakrishnan&lt;/a&gt; Dec 30, 2009 Time: 2:36:01 PM&#xA; */&#xA;public class RecordPaidGuaranteesSample extends AbstractRecordGuarantee implements ERecordGuarantee {&#xA;&#xA;  public void recordPaidGuarantee(EFieldChanges inChanges) {&#xA;    log(&quot;Groovy: RecordPaidGuaranteeSample started to record paid guarantees!&quot;);&#xA;    System.out.println(&quot;Groovy: RecordPaidGuaranteeSample started to record paid guarantees!&quot;);&#xA;&#xA;    if (inChanges.hasFieldChange(InventoryBizMetafield.INVOICE_ITEMS)) {&#xA;&#xA;      ServicesManager servicesMgr = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;      List itemList = (List) inChanges.findFieldChange(InventoryBizMetafield.INVOICE_ITEMS).getNewValue();&#xA;      for (Object itemObj: itemList) {&#xA;        //need to find the source event&#xA;        ValueObject chargeValueObj = (ValueObject) itemObj;&#xA;        String extractGkey = (String) chargeValueObj.getFieldValue(InventoryBizMetafield.EXTRACT_GKEY);&#xA;        BillingExtractEntityEnum extractEnum = BillingExtractEntityEnum.getEnum((String) chargeValueObj.getFieldValue(&#xA;                InventoryBizMetafield.EXTRACT_CLASS));&#xA;        IServiceExtract serviceExtract;&#xA;        if (BillingExtractEntityEnum.INV.equals(extractEnum)) {&#xA;          serviceExtract = (IServiceExtract) HibernateApi.getInstance().get(ChargeableUnitEvent.class, Long.valueOf(extractGkey));&#xA;        } else if (BillingExtractEntityEnum.MARINE.equals(extractEnum)) {&#xA;          serviceExtract = (IServiceExtract) HibernateApi.getInstance().get(ChargeableMarineEvent.class, Long.valueOf(extractGkey));&#xA;        } else {&#xA;          throw BizViolation.create(InventoryPropertyKeys.ENTITY_NOT_FOUND_BY_GKEY, null, extractEnum.getKey(), extractGkey);&#xA;        }&#xA;        Guarantee guarantee = createGuarantee(serviceExtract, extractEnum, chargeValueObj, inChanges);&#xA;        if (guarantee != null) {&#xA;          log(&quot;Groovy: RecordPaidGuaranteeSample - Guarantee with ID : &quot; + guarantee.getGnteGuaranteeId() + &quot;  for event  ID: &quot; + serviceExtract.getEventType() + &quot; for UNIT: &quot; + serviceExtract.getServiceEntityId()&#xA;                  + &quot; created successfully !&quot;);&#xA;          System.out.println(&quot;Groovy: RecordPaidGuaranteeSample - Guarantee with ID : &quot; + guarantee.getGnteGuaranteeId() + &quot;  for event  ID: &quot; + serviceExtract.getEventType() + &quot; for UNIT: &quot; + serviceExtract.getServiceEntityId()&#xA;                  + &quot; created successfully !&quot;);&#xA;        } else {&#xA;          log(&quot;Groovy: RecordPaidGuaranteeSample - Guarantee creation for event  ID: &quot; + serviceExtract.getEventType() + &quot; for UNIT: &quot; + serviceExtract.getServiceEntityId() + &quot; falied !&quot;);&#xA;          System.out.println(&quot;Groovy: RecordPaidGuaranteeSample - Guarantee creation for event  ID: &quot; + serviceExtract.getEventType() + &quot; for UNIT: &quot; + serviceExtract.getServiceEntityId() + &quot; falied !&quot;);&#xA;        }&#xA;      }&#xA;    } else {&#xA;      log(&quot;Groovy: RecordPaidGuaranteeSample - No invoice items found !&quot;);&#xA;      System.out.println(&quot;Groovy: RecordPaidGuaranteeSample - No invoice items found !&quot;);&#xA;    }&#xA;&#xA;    log(&quot;Groovy: RecordPaidGuaranteeSample end to record paid guarantees!&quot;);&#xA;    System.out.println(&quot;Groovy: RecordPaidGuaranteeSample end to record paid guarantees!&quot;);&#xA;  }&#xA;&#xA;&#xA;  /**&#xA;   * Returns the guarantee which is created for the extract event&#xA;   */&#xA;  private Guarantee createGuarantee(IServiceExtract inIServiceExtract, BillingExtractEntityEnum inEntityEnum, ValueObject inItemValuObject, EFieldChanges inEFieldChanges) {&#xA;    Guarantee gtr = null;&#xA;    FieldChanges changes = prepareGuaranteeFieldChanges(inIServiceExtract, inEntityEnum, inItemValuObject, inEFieldChanges);&#xA;    if (changes != null) {&#xA;      gtr = new Guarantee();&#xA;      String gtId = gtr.getGuaranteeIdFromSequenceProvide();&#xA;      changes.setFieldChange(ArgoExtractField.GNTE_GUARANTEE_ID, gtId);&#xA;      gtr.applyFieldChanges(changes);&#xA;      HibernateApi.getInstance().saveOrUpdate(gtr);&#xA;    }&#xA;    return gtr;&#xA;  }&#xA;&#xA;&#xA;  /**&#xA;   * Prepares FieldChanges for the new guarantee from extract event and and fieldchanges and returns.&#xA;   */&#xA;  private FieldChanges prepareGuaranteeFieldChanges(IServiceExtract inIServiceExtract, BillingExtractEntityEnum inEntityEnum, ValueObject inItemValuObject, EFieldChanges inEFieldChanges) {&#xA;    ValueObject vao = new ValueObject(ArgoExtractEntity.GUARANTEE);&#xA;    //Guarantee.Chargeable Event gkey from the chargeable event&#xA;    vao.setFieldValue(ArgoExtractField.GNTE_APPLIED_TO_PRIMARY_KEY, inIServiceExtract.getServiceExtractGkey());&#xA;    //Guarantee.AppliedToNaturalKey unitId from chargeable event&#xA;    vao.setFieldValue(ArgoExtractField.GNTE_APPLIED_TO_NATURAL_KEY, inIServiceExtract.getServiceEntityId());&#xA;    //Guarantee.AppliedToClass eventAppliedToClass from chargeable event&#xA;    vao.setFieldValue(ArgoExtractField.GNTE_APPLIED_TO_CLASS, inEntityEnum);&#xA;&#xA;    //Guarantee.Customer from the Payee specfied in the Query Charges dialog&#xA;    Long payeeGkey = (Long) getNewFieldValue(inEFieldChanges, InventoryBizMetafield.INVOICE_PAYEE);&#xA;    ScopedBizUnit payee = (ScopedBizUnit) HibernateApi.getInstance().get(ScopedBizUnit.class, payeeGkey);&#xA;    vao.setFieldValue(ArgoExtractField.GNTE_GUARANTEE_CUSTOMER, payee);&#xA;    //Guarantee.Guarantee Type is Paid.&#xA;    vao.setFieldValue(ArgoExtractField.GNTE_GUARANTEE_TYPE, GuaranteeTypeEnum.PAID);&#xA;    //Guaratee.Payment Type from the Payment Type entered in Pay Unit Charges dialog&#xA;    String payTypeStr = (String) getNewFieldValue(inEFieldChanges, InventoryBizMetafield.PAYMENT_TYPE);&#xA;    PaymentTypeEnum paymentType = PaymentTypeEnum.getEnum(payTypeStr);&#xA;    vao.setFieldValue(ArgoExtractField.GNTE_PAYMENT_TYPE, paymentType);&#xA;    //Guarantee.Payment # as entered from Pay Unit Charges dialog&#xA;    Long chequeNbr = (Long) getNewFieldValue(inEFieldChanges, InventoryBizMetafield.CHECK_NUMBER);&#xA;    vao.setFieldValue(ArgoExtractField.GNTE_PAYMENT_NBR, String.valueOf(chequeNbr));&#xA;    //Guarantee.Payment Remarks as entered from Pay Unit Charges dialog&#xA;    String gnteNotes = &quot;Recorded through Groovy: &quot; + this.getClass().getName();&#xA;    vao.setFieldValue(ArgoExtractField.GNTE_NOTES, gnteNotes);&#xA;    //Guarantee.Payment Date as from Pay Unit Charges&#xA;    vao.setFieldValue(ArgoExtractField.GNTE_PAYMENT_DATE, new Date());&#xA;    //Guarantee.N4 User ID from the user ID of the person making the Guarantee&#xA;    String n4UserId = ContextHelper.getThreadUserId();&#xA;    vao.setFieldValue(ArgoExtractField.GNTE_N4_USER_ID, n4UserId);&#xA;    // Guarantee.Quantity is the Quantity from invoice item&#xA;    String quantity = inItemValuObject.getFieldString(InventoryBizMetafield.QUANTITY_BILLED);&#xA;    vao.setFieldValue(ArgoExtractField.GNTE_QUANTITY, new Double(quantity));&#xA;    //Guarantee.Amount is the sum of invoice line item amounts for chargeable event&#xA;    Double amount = (Double) getNewFieldValue(inEFieldChanges, InventoryBizMetafield.PAYMENT_AMOUNT);&#xA;    vao.setFieldValue(ArgoExtractField.GNTE_GUARANTEE_AMOUNT, amount);&#xA;    //Guarantee.First Day from LFD or GTD (storage invoice line items are processed on order to advance GTD as needed)&#xA;    String evntPerformedFromString = inItemValuObject.getFieldString(InventoryBizMetafield.EVENT_PERFORMED_FROM);&#xA;    Date evntPerformedFrom;&#xA;    if (evntPerformedFromString != null &amp;&amp; !evntPerformedFromString.isEmpty()) {&#xA;      try {&#xA;        evntPerformedFrom = DateUtil.xmlDateStringToDate(evntPerformedFromString);&#xA;      } catch (Exception e) {&#xA;        log(&quot;eventPerformedFromDate cannot be parsed due to&quot; + e);&#xA;      }&#xA;    }&#xA;    vao.setFieldValue(ArgoExtractField.GNTE_GUARANTEE_START_DAY, evntPerformedFrom);&#xA;    //Guarantee.Last Day from Proposed PTD or Guarantee First Day from any pre-existing storage Guarantees for the unit&#xA;    String evntPerformedToString = inItemValuObject.getFieldString(InventoryBizMetafield.EVENT_PERFORMED_TO);&#xA;    Date evntPerformedTo;&#xA;    if (evntPerformedToString != null &amp;&amp; !evntPerformedToString.isEmpty()) {&#xA;      try {&#xA;        evntPerformedTo = DateUtil.xmlDateStringToDate(evntPerformedToString);&#xA;      } catch (Exception e) {&#xA;        log(&quot;eventPerformedToDate cannot be parsed due to&quot; + e);&#xA;      }&#xA;    }&#xA;&#xA;    evntPerformedTo = DateUtil.xmlDateStringToDate(evntPerformedToString);&#xA;    vao.setFieldValue(ArgoExtractField.GNTE_GUARANTEE_END_DAY, evntPerformedTo);&#xA;&#xA;    // Guarantee.User Details&#xA;    // Guarantee.External User Profile:&#xA;    // User ID is blank&#xA;    vao.setFieldValue(ArgoExtractField.GNTE_EXTERNAL_USER_ID, &quot;&quot;);&#xA;    ContactInfo contact = payee.getBzuCtct();&#xA;    if (contact != null) {&#xA;      //    Contact Name from Payee.Contact Name&#xA;      vao.setFieldValue(ArgoExtractField.GNTE_EXTERNAL_CONTACT_NAME, contact.getCtctName());&#xA;      //    address line 1 from Payee.Contact address line 1&#xA;      vao.setFieldValue(ArgoExtractField.GNTE_EXTERNAL_ADDRESS1, contact.getCtctAddressLine1());&#xA;      //    address line 2 from Payee.Contact address line 2&#xA;      vao.setFieldValue(ArgoExtractField.GNTE_EXTERNAL_ADDRESS2, contact.getCtctAddressLine2());&#xA;      //    address line 3 from Payee.Contact address line 3&#xA;      vao.setFieldValue(ArgoExtractField.GNTE_EXTERNAL_ADDRESS3, contact.getCtctAddressLine3());&#xA;      //    city from Payee.Contact city&#xA;      vao.setFieldValue(ArgoExtractField.GNTE_EXTERNAL_CITY, contact.getCtctCity());&#xA;      //    state from Payee.Contact state&#xA;      vao.setFieldValue(ArgoExtractField.GNTE_EXTERNAL_STATE, contact.getCtctState());&#xA;      //    country from Payee.Contact country&#xA;      vao.setFieldValue(ArgoExtractField.GNTE_EXTERNAL_COUNTRY, contact.getCtctCountry());&#xA;      //    mailcode from Payee.Contact mailcode&#xA;      vao.setFieldValue(ArgoExtractField.GNTE_EXTERNAL_MAIL_CODE, contact.getCtctMailCode());&#xA;      //    telephone from Payee.Contact telephone&#xA;      vao.setFieldValue(ArgoExtractField.GNTE_EXTERNAL_TELEPHONE, contact.getCtctTel());&#xA;      //    email address from Payee.Contact email address&#xA;      vao.setFieldValue(ArgoExtractField.GNTE_EXTERNAL_EMAIL_ADDRESS, contact.getCtctEmailAddress());&#xA;    }&#xA;    return new FieldChanges(vao);&#xA;  }&#xA;&#xA;&#xA;  /**&#xA;   * Returns the new field value from the field changes if field change is present for the requested metafield, else null is returned&#xA;   */&#xA;  private Object getNewFieldValue(EFieldChanges inFieldChanges, MetafieldId inMetafieldId) {&#xA;    EFieldChange fieldChange = inFieldChanges.findFieldChange(inMetafieldId);&#xA;    if (fieldChange != null) {&#xA;      return fieldChange.getNewValue();&#xA;    }&#xA;    return null;&#xA;  }&#xA;}&#xA;" />
<digital-asset id="GenerateInvoicesForNotInvoicedCUE" short-description="GenerateInvoicesForNotInvoicedCUE" is-pre-deployed="Y" groovy-code="import org.apache.log4j.Logger&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.extract.Guarantee&#xA;import com.navis.argo.business.atoms.BillingExtractEntityEnum&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.argo.ArgoExtractEntity&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoExtractField&#xA;import com.navis.argo.business.extract.ChargeableUnitEvent&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import org.jdom.Element&#xA;import com.navis.argo.portal.BillingWsApiConsts&#xA;import com.navis.argo.util.XmlUtil&#xA;import org.jdom.Text&#xA;import com.navis.argo.EdiInvoice&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.www.services.argoservice.ArgoServicePort&#xA;import javax.xml.rpc.ServiceException&#xA;import com.navis.www.services.argoservice.ArgoServiceLocator&#xA;import javax.xml.rpc.Stub&#xA;import com.navis.argo.business.extract.billing.ConfigurationProperties&#xA;import com.navis.argo.webservice.types.v1_0.ScopeCoordinateIdsWsType&#xA;import com.navis.argo.webservice.types.v1_0.GenericInvokeResponseWsType&#xA;import com.navis.argo.webservice.types.v1_0.ResponseType&#xA;import com.navis.argo.webservice.types.v1_0.QueryResultType&#xA;import com.navis.argo.webservice.types.v1_0.MessageType&#xA;import com.navis.argo.BillingTransactionsDocument&#xA;import com.navis.argo.BillingTransactionDocument&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.inventory.InventoryPropertyKeys&#xA;import com.navis.argo.ArgoPropertyKeys&#xA;import com.navis.inventory.business.api.UnitStorageManager&#xA;import com.navis.argo.util.FileUtil&#xA;import org.apache.commons.lang.StringUtils&#xA;import com.navis.framework.esb.client.ESBClientHelper&#xA;import com.navis.framework.esb.server.FrameworkMessageQueues&#xA;import com.navis.argo.business.reference.ContactInfo&#xA;&#xA;/**&#xA; *  This is a Pre-Deployable Groovy Plug-in which generates Invoices for CUE in QUEUE, PARTIAL status.&#xA; * @author &lt;a href=&quot;mailto:psethuraman@zebra.com&quot;&gt;Prakash&lt;/a&gt; Jun 23, 2010 Time: 3:10:01 PM&#xA; */&#xA;public class GenerateInvoicesForNotInvoicedCUE extends GroovyApi {&#xA;  public void execute(Map parameters) {&#xA;&#xA;    logWarn(&quot;starts to generate invoices for not invoiced CUE&quot;);&#xA;    UserContext context = ContextHelper.getThreadUserContext();&#xA;    Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#xA;    String isInvoiceFinal = &quot;True&quot;;&#xA;    String invoiceTypeId = &quot;INVOICE TYPE&quot;;&#xA;    String currencyId = &quot;USD&quot;;&#xA;    String[] statusses = [&quot;QUEUED&quot;, &quot;PARTIAL&quot;];&#xA;    String emailFromAddress = &quot;navis@zebra.com&quot;;&#xA;&#xA;    List chargeEvents = getCUEs(statusses);&#xA;&#xA;    if (chargeEvents.isEmpty()) {&#xA;      logWarn(&quot;No records matched for Groovy Plug-in&quot;);&#xA;    } else {&#xA;      for (ChargeableUnitEvent chargeEvent: chargeEvents) {&#xA;        String unitId = chargeEvent.getBexuEqId();&#xA;        ScopedBizUnit lineOperator = ScopedBizUnit.findScopedBizUnit(chargeEvent.getBexuLineOperatorId(),&#xA;                com.navis.argo.business.atoms.BizRoleEnum.LINEOP);&#xA;        try {&#xA;&#xA;          Element element = buildGetInvoiceByInvTypeIdForUnitElement(unitId, invoiceTypeId, isInvoiceFinal, lineOperator,&#xA;                  null, currencyId, null);&#xA;&#xA;          appendBillToAddress(element, lineOperator.getBzuCtct());&#xA;          EdiInvoice ediInvoice = getInvoiceByInvTypeIdForUnit(element);&#xA;&#xA;          if (ediInvoice != null) {&#xA;            // Compose subject message as &quot;Invoice for &quot; Unit ID &quot; and Payee ID &quot;chargeEvent.LineOperator Id&quot; created.&quot;&#xA;            String subject = &quot; Invoice for UNIT:&quot; + unitId + &quot; and Payee ID: &quot; + chargeEvent.getBexuLineOperatorId();&#xA;&#xA;            logWarn(subject + &quot; generated sucessfully !&quot;);&#xA;&#xA;            try {&#xA;              UnitStorageManager manager = (UnitStorageManager) Roastery.getBean(UnitStorageManager.BEAN_ID);&#xA;              String invoiceReportUrlWithType = manager.getInvoiceReportUrl(ediInvoice.getGkey());&#xA;&#xA;              try {&#xA;                String fileName = &quot;InvoiceFor&quot; + unitId;&#xA;                File reportTempFile = getFile(invoiceReportUrlWithType, fileName);&#xA;&#xA;                String[] attachment = new String[1];&#xA;                String attachmentPrefix = &quot;file:&quot;;&#xA;                if (reportTempFile != null) {&#xA;                  attachment[0] = attachmentPrefix + reportTempFile.getAbsolutePath();&#xA;                } else {&#xA;                  attachment[0] = &quot;&quot;;&#xA;                }&#xA;&#xA;                String emailToId = lineOperator.getBzuCtct().getCtctEmailAddress();&#xA;                String msgBody = &quot;Please find &quot; + subject + &quot; attached.&quot;;&#xA;&#xA;                if (emailToId != null &amp;&amp; !StringUtils.isEmpty(emailToId)) {&#xA;                  try {&#xA;                    ESBClientHelper.sendEmailAttachments(context, FrameworkMessageQueues.EMAIL_QUEUE, emailToId, emailFromAddress, subject, msgBody, attachment);&#xA;                    logWarn(subject + &quot;' &quot; + emailToId + &quot;' on &quot; + timeNow + &quot;.&quot;);&#xA;                  } catch (Exception e) {&#xA;                    LOGGER.error(e.getMessage());&#xA;                  }&#xA;                } else {&#xA;                  // Log if no e-mail Id found in for guarantor&#xA;                  logWarn(subject + &quot;\n Details : &quot; + msgBody);&#xA;                }&#xA;              } catch (Exception e) {&#xA;                logWarn(&quot;Invoice report preparation failed for Invoice Draft Nbr :&quot; +&#xA;                        ediInvoice.getDraftNumber() + &quot; due to : &quot; + e.toString());&#xA;              }&#xA;            } catch (Exception e) {&#xA;              logWarn(&quot;Invoice report creation failed for Draft Nbr :&quot; + ediInvoice.getDraftNumber() + &quot; due to : &quot; + e.toString());&#xA;            }&#xA;          }&#xA;        } catch (Exception e) {&#xA;          logWarn(&quot;Invoice Generation failed for event :&quot; + chargeEvent.toString() +&#xA;                  &quot; due to : &quot; + e.toString());&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;  private static List getCUEs(String[] inStatusses) {&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(ArgoExtractEntity.CHARGEABLE_UNIT_EVENT).&#xA;            addDqPredicate(PredicateFactory.in(ArgoExtractField.BEXU_STATUS, inStatusses));&#xA;    return (Roastery.getHibernateApi().findEntitiesByDomainQuery(dq));&#xA;  }&#xA;&#xA;  private Element buildGetInvoiceByInvTypeIdForUnitElement(String unitId, String invoiceTypeId, String isInvoiceFinal, ScopedBizUnit inPayee,&#xA;                                                           ScopedBizUnit inContractCustomer, String inCurrencyId, Date inContractEffectiveDate) {&#xA;    //build the request xml&#xA;    Element rootElem = new Element(BillingWsApiConsts.BILLING_ROOT, XmlUtil.ARGO_NAMESPACE);&#xA;    Element elem = new Element(BillingWsApiConsts.GENERATE_INVOICE_REQUEST, XmlUtil.ARGO_NAMESPACE);&#xA;    rootElem.addContent(elem);&#xA;    addChildTextElement(BillingWsApiConsts.INVOICE_TYPE_ID, invoiceTypeId, elem);&#xA;    addChildTextElement(BillingWsApiConsts.PAYEE_CUSTOMER_ID, inPayee.getBzuId(), elem);&#xA;    addChildTextElement(BillingWsApiConsts.PAYEE_CUSTOMER_BIZ_ROLE, inPayee.getBzuRole().getKey(), elem);&#xA;    String contractCustId = inContractCustomer != null ? inContractCustomer.getBzuId() : &quot;&quot;;&#xA;    addChildTextElement(BillingWsApiConsts.CONTRACT_CUSTOMER_ID, contractCustId, elem);&#xA;    addChildTextElement(BillingWsApiConsts.CONTRACT_CUSTOMER_BIZ_ROLE,&#xA;            inContractCustomer != null ? inContractCustomer.getBzuRole().getKey() : null, elem);&#xA;    addChildTextElement(BillingWsApiConsts.CURRENCY_ID, inCurrencyId, elem);&#xA;    String effectiveDateStr = null;&#xA;    if (inContractEffectiveDate != null) {&#xA;      effectiveDateStr = BillingWsApiConsts.DATE_FORMAT.format(inContractEffectiveDate);&#xA;    }&#xA;    addChildTextElement(BillingWsApiConsts.CONTRACT_EFFECTIVE_DATE, effectiveDateStr, elem);&#xA;    addChildTextElement(BillingWsApiConsts.IS_INVOICE_FINAL, isInvoiceFinal, elem);&#xA;    Element paramsElem = new Element(BillingWsApiConsts.INVOICE_PARAMETERS, XmlUtil.ARGO_NAMESPACE);&#xA;    Element paramElem = new Element(BillingWsApiConsts.INVOICE_PARAMETER, XmlUtil.ARGO_NAMESPACE);&#xA;    addChildTextElement(BillingWsApiConsts.EQUIPMENT_ID, unitId, paramElem);&#xA;    paramsElem.addContent(paramElem);&#xA;    elem.addContent(paramsElem);&#xA;    return rootElem;&#xA;  }&#xA;&#xA;  private void addChildTextElement(String inElementName, String inElementText, Element inParentElement) {&#xA;    Element childElement = new Element(inElementName, XmlUtil.ARGO_NAMESPACE);&#xA;    Text childText = new Text(inElementText);&#xA;    childElement.addContent(childText);&#xA;    inParentElement.addContent(childElement);&#xA;  }&#xA;&#xA;  void appendBillToAddress(Element inRootElement, ContactInfo inContact) {&#xA;&#xA;    Element element = inRootElement.getChild(BillingWsApiConsts.GENERATE_INVOICE_REQUEST, XmlUtil.ARGO_NAMESPACE);&#xA;&#xA;    Element billToPartyElement = new Element(BillingWsApiConsts.BILL_TO_PARTY, XmlUtil.ARGO_NAMESPACE);&#xA;    Element addressElement = new Element(BillingWsApiConsts.ADDRESS, XmlUtil.ARGO_NAMESPACE);&#xA;    if (inContact != null) {&#xA;      addChildTextElement(BillingWsApiConsts.CONTACT_NAME, inContact.getCtctName(), addressElement);&#xA;      addChildTextElement(BillingWsApiConsts.ADDRESS_LINE_1, inContact.getCtctAddressLine1(), addressElement);&#xA;      addChildTextElement(BillingWsApiConsts.ADDRESS_LINE_2, inContact.getCtctAddressLine2(), addressElement);&#xA;      addChildTextElement(BillingWsApiConsts.ADDRESS_LINE_3, inContact.getCtctAddressLine3(), addressElement);&#xA;      addChildTextElement(BillingWsApiConsts.CITY, inContact.getCtctCity(), addressElement);&#xA;      addChildTextElement(BillingWsApiConsts.MAIL_CODE, inContact.getCtctMailCode(), addressElement);&#xA;      addChildTextElement(BillingWsApiConsts.STATE, inContact.getCtctState().getStateName(), addressElement);&#xA;      addChildTextElement(BillingWsApiConsts.COUNTRY, inContact.getCtctCountry().getCntryName(), addressElement);&#xA;      //todo: add telephone and fax details since they are not supported in billing invoices right now&#xA;      //    addChildTextElement(BillingWsApiConsts.TELEPHONE, inGuarantee.getGnteExternalTelephone(), addressElement);&#xA;      //    addChildTextElement(BillingWsApiConsts.FAX, inGuarantee.getGnteExternalFax(), addressElement);&#xA;      addChildTextElement(BillingWsApiConsts.EMAIL_ADDRESS, inContact.getCtctEmailAddress(), addressElement);&#xA;    }&#xA;    billToPartyElement.addContent(addressElement);&#xA;    element.addContent(billToPartyElement);&#xA;&#xA;  }&#xA;&#xA;  public EdiInvoice getInvoiceByInvTypeIdForUnit(Element inElement) throws BizViolation {&#xA;    try {&#xA;      ArgoServicePort port = getWsStub();&#xA;      ScopeCoordinateIdsWsType scopeCoordinates = getScopeCoordenatesForWs();&#xA;      GenericInvokeResponseWsType invokeResponseWsType = port.genericInvoke(scopeCoordinates, XmlUtil.toString(inElement, false));&#xA;      ResponseType response = invokeResponseWsType.getCommonResponse();&#xA;      QueryResultType[] queryResultTypes = response.getQueryResults();&#xA;      if (queryResultTypes == null || queryResultTypes.length != 1) {&#xA;        //todo: generic error&#xA;        if (response.getMessageCollector() != null &amp;&amp; response.getMessageCollector().getMessages(0) != null) {&#xA;          MessageType type = response.getMessageCollector().getMessages(0);&#xA;          String message = type.getMessage();&#xA;          throw BizFailure.create(&quot;Error from Billing Webservice - &quot; + message);&#xA;        } else {&#xA;          throw BizFailure.create(ArgoPropertyKeys.BILLING_WEBSERVICE_SERVICES_URL, null, null);&#xA;        }&#xA;      }&#xA;      String responseString = queryResultTypes[0].getResult();&#xA;&#xA;      BillingTransactionsDocument billingTransactionsDocument = BillingTransactionsDocument.Factory.parse(responseString);&#xA;      BillingTransactionsDocument.BillingTransactions transactions = billingTransactionsDocument.getBillingTransactions();&#xA;      List&lt;BillingTransactionDocument.BillingTransaction&gt; transactionList = transactions.getBillingTransactionList();&#xA;      //todo: error if more than 1 transaction returned&#xA;      BillingTransactionDocument.BillingTransaction billingTransaction = transactionList.get(0);&#xA;      List&lt;EdiInvoice&gt; list = billingTransaction.getInvoiceList();&#xA;      if (list.isEmpty()) {&#xA;        throw BizFailure.create(InventoryPropertyKeys.NO_INVOICE_RETRIEVED, null, null);&#xA;      } else if (list.size() &gt; 1) {&#xA;        throw BizFailure.create(InventoryPropertyKeys.MULTIPLE_INVOICES_RETURNED, null, list.size());&#xA;      }&#xA;      EdiInvoice ediInvoice = list.get(0);&#xA;&#xA;      return ediInvoice;&#xA;    } catch (ServiceException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_ERROR, e, null);&#xA;    } catch (java.rmi.RemoteException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_ERROR, e, null);&#xA;    } catch (IOException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_XML_ERROR, e, null);&#xA;    } catch (org.apache.xmlbeans.XmlException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_XML_ERROR, e, null);&#xA;    }&#xA;  }&#xA;&#xA;  private ArgoServicePort getWsStub() throws ServiceException {&#xA;    ArgoServiceLocator locator = new ArgoServiceLocator();&#xA;    ArgoServicePort port = locator.getArgoServicePort(ConfigurationProperties.getBillingServiceURL());&#xA;    Stub stub = (Stub) port;&#xA;    stub._setProperty(Stub.USERNAME_PROPERTY, ConfigurationProperties.getBillingWebServiceUserId());&#xA;    stub._setProperty(Stub.PASSWORD_PROPERTY, ConfigurationProperties.getBillingWebServicePassWord());&#xA;    return port;&#xA;  }&#xA;&#xA;  private ScopeCoordinateIdsWsType getScopeCoordenatesForWs() {&#xA;    //build the scope coordinates for the web service based on the user context;&#xA;    ScopeCoordinateIdsWsType scopeCoordinates = new ScopeCoordinateIdsWsType();&#xA;    UserContext uContext = ContextHelper.getThreadUserContext();&#xA;    scopeCoordinates.setOperatorId(ContextHelper.getThreadOperator() != null ? ContextHelper.getThreadOperator().getId() : null);&#xA;    scopeCoordinates.setComplexId(ContextHelper.getThreadComplex() != null ? ContextHelper.getThreadComplex().getCpxId() : null);&#xA;    scopeCoordinates.setFacilityId(ContextHelper.getThreadFacility() != null ? ContextHelper.getThreadFacility().getFcyId() : null);&#xA;    scopeCoordinates.setYardId(ContextHelper.getThreadYard() != null ? ContextHelper.getThreadYard().getYrdId() : null);&#xA;    return scopeCoordinates;&#xA;  }&#xA;&#xA;  private File getFile(String inDownloadUrl, String inFileName) {&#xA;    String[] fileAttributes = inDownloadUrl.split(&quot;:::&quot;);&#xA;    String invoiceReportUrl = fileAttributes[0];&#xA;    String mimeType = fileAttributes[1];&#xA;&#xA;    if (invoiceReportUrl != null) {&#xA;      URL url = new URL(invoiceReportUrl);&#xA;      URLConnection connection = url.openConnection();&#xA;      connection.connect();&#xA;      InputStream urlInputStream = connection.getInputStream();&#xA;&#xA;      String classPath = FileUtil.getClassPath();&#xA;      File classPathDirectory = new File(classPath);&#xA;      File file = new File(inFileName + mimeType, classPathDirectory);&#xA;      file.deleteOnExit();&#xA;&#xA;      BufferedInputStream buffInStream = new BufferedInputStream(urlInputStream);&#xA;      BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(file));&#xA;      try {&#xA;        copyStream(buffInStream, outputStream);&#xA;      } catch (IOException ioe) {&#xA;        LOGGER.error(&quot;Groovy : GenerateInvoicesForNotInvoicedCUE: Downloading Invoice failed due to :&quot; + ioe.toString());&#xA;      } finally {&#xA;        buffInStream.close();&#xA;        outputStream.close();&#xA;      }&#xA;      return file;&#xA;    }&#xA;  }&#xA;&#xA;  private void copyStream(InputStream inInputStream, OutputStream inOutputStream) throws IOException {&#xA;    byte[] buffer = new byte[256];&#xA;    while (true) {&#xA;      int bytesRead = inInputStream.read(buffer);&#xA;      if (bytesRead == -1) {&#xA;        break;&#xA;      }&#xA;      inOutputStream.write(buffer, 0, bytesRead);&#xA;    }&#xA;  }&#xA;&#xA;  private static final Logger LOGGER = Logger.getLogger(GenerateInvoicesForNotInvoicedCUE.class);&#xA;}&#xA;" />
<digital-asset id="GvyEventUtil" short-description="GvyEventUtil" is-pre-deployed="N" groovy-code="/*&#xA;* srno  doer  date      desc&#xA;* A1    GR    04/07/10  Added suppProc check to process updates to DAS&#xA;* A2    GR    06/16/10  Added NUll to event changed field Map Object&#xA;* A3    GR    08/23/10  Removed PrintStatement&#xA;* A4    GR    09/15/10  Added date formattter method (Gems change)&#xA;* A5    GR    11/04/10  DAS : Suppress DTA,DTD before NVI TT#9776&#xA;* A6    GR    10/29/10  Gems: NV/NLT Release Hold Directly to Gems&#xA;* A7    GR    12/07/10  Added Date Formatting method&#xA;* A8    GR    12/16/10  Suppress Dollar sign units from posting Transaction.&#xA;* A9    GR    12/17/10  Added Equipment to unit conversion&#xA;* A10   GR    05/09/11  Added Method to Convert timezone&#xA;* A11   GR    07/18/11  Remove MQ msg from Acets Filter Method&#xA;* A12   GR    11/18/11  -snx- Filter snxmailbox execution for cargo status report&#xA;              11/29/11  Fix for Newves holds&#xA;* A13   GR    12/23/11  Added newves check&#xA;* A14   LC    10/15/13 Adding getPrevEvent to find most recent event&#xA;*/&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.atoms.ScopeEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.model.Facility&#xA;import com.navis.argo.business.model.N4EntityScoper&#xA;import com.navis.argo.portal.context.ArgoUserContextProvider&#xA;import com.navis.framework.persistence.hibernate.CarinaPersistenceCallback&#xA;import com.navis.framework.persistence.hibernate.PersistenceTemplate&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.context.IUserContextProvider&#xA;import com.navis.framework.portal.context.PortalApplicationContext&#xA;import com.navis.framework.util.message.MessageCollector&#xA;import com.navis.framework.util.scope.ScopeCoordinates&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.services.ServicesField;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import java.util.TimeZone;&#xA;import com.navis.services.business.api.EventManager&#xA;import com.navis.services.business.rules.EventType&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.argo.business.atoms.EventEnum;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.reference.Shipper&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.services.business.event.GroovyEvent&#xA;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.api.UnitFinder;&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import com.navis.argo.ContextHelper&#xA;import java.text.DateFormat;&#xA;import java.text.SimpleDateFormat;&#xA;import java.util.Date;&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.argo.business.api.ServicesManager;&#xA;&#xA;&#xA;// Event Utils using metafieldId and not Reportable Entity names&#xA;&#xA;// gdsConsigneeAsString for Consignee name&#xA;&#xA;public class GvyEventUtil extends GroovyInjectionBase {&#xA;&#xA;    /*&#xA;     * Method get the Previous value of the Field&#xA;    */&#xA;&#xA;    public String getPreviousPropertyAsString(Object event, String metafieldId) {&#xA;        def eventBase = event.getEvent();&#xA;        def change = eventBase.getEvntFieldChanges();&#xA;        if (change == null) return null;&#xA;        Iterator i1 = change.iterator();&#xA;        while (i1.hasNext()) {&#xA;            def efc = (EventFieldChange) i1.next();&#xA;&#xA;            if (metafieldId.equalsIgnoreCase(efc.getEvntfcMetafieldId())) {&#xA;                return efc.getPrevVal();&#xA;            }&#xA;        }&#xA;&#xA;        return null;&#xA;    }&#xA;&#xA;    /*&#xA;     * Method get the Previous value of the Field&#xA;    */&#xA;&#xA;    public Object getPreviousProperty(Object event, String metafieldId) {&#xA;        def eventBase = event.getEvent();&#xA;        def change = eventBase.getEvntFieldChanges();&#xA;        if (change == null) return null;&#xA;        Iterator i1 = change.iterator();&#xA;        while (i1.hasNext()) {&#xA;            def efc = (EventFieldChange) i1.next();&#xA;            //log(&quot;MetaField=&quot;+efc.getEvntfcMetafieldId()+&quot; &quot;+efc.properties);&#xA;            //println(&quot;MetaField=&quot;+efc.getEvntfcMetafieldId()+&quot; &quot;+efc.properties);&#xA;            if (metafieldId.equalsIgnoreCase(efc.getEvntfcMetafieldId())) {&#xA;                return efc.getPrevVal();&#xA;            }&#xA;        }&#xA;&#xA;        return null;&#xA;    }&#xA;&#xA;/*&#xA; * Method return a status flag on fields updated&#xA; */&#xA;&#xA;    public boolean wasFieldChanged(Object event, String metafieldId) {&#xA;        def eventBase = event.getEvent();&#xA;        def change = eventBase.getEvntFieldChanges();&#xA;        if (change == null) return null;&#xA;        Iterator i1 = change.iterator();&#xA;        while (i1.hasNext()) {&#xA;            def efc = (EventFieldChange) i1.next();&#xA;            if (metafieldId.equalsIgnoreCase(efc.getEvntfcMetafieldId())) {&#xA;                return true;&#xA;            }&#xA;        }&#xA;&#xA;        return false;&#xA;    }&#xA;&#xA;    /*&#xA;     * Method Formats the event date based on the timezone&#xA;     */&#xA;&#xA;    public static String formatDate(java.util.Date date, TimeZone zone) {&#xA;&#xA;        java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy&quot;);&#xA;        dateFormat.setTimeZone(zone);&#xA;        if (date != null) {&#xA;            def fmtDate = dateFormat.format(date);&#xA;            return fmtDate&#xA;        }&#xA;        return '';&#xA;    }&#xA;&#xA;    /*&#xA;     * Method Formats the event date based on the timezone&#xA;     */&#xA;&#xA;    public static String formatTime(java.util.Date date, TimeZone zone) {&#xA;        java.text.SimpleDateFormat timeFormat = new java.text.SimpleDateFormat(&quot;HH:mm:ss&quot;);&#xA;        timeFormat.setTimeZone(zone);&#xA;        if (date != null) {&#xA;            def fmtTime = timeFormat.format(date);&#xA;            return fmtTime&#xA;        }&#xA;        return '';&#xA;    }&#xA;&#xA;//Method returns date format&#xA;    public String dateFormat(java.util.Date date, String dtFormat) {&#xA;        if (date == null) {&#xA;            return date&#xA;        }&#xA;        DateFormat dateFormat = new SimpleDateFormat(dtFormat);&#xA;        String dtformat = dateFormat.format(date);&#xA;        return dtformat;&#xA;    }&#xA;&#xA;    /*&#xA;     * Method Formats the event date based on the timezone&#xA;     */&#xA;&#xA;    public static String formatDateTime(java.util.Date date, TimeZone zone) {&#xA;        java.text.SimpleDateFormat timeFormat = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy @ HH:mm&quot;);&#xA;        timeFormat.setTimeZone(zone);&#xA;        if (date != null) {&#xA;            def fmtTime = timeFormat.format(date);&#xA;            return fmtTime&#xA;        }&#xA;        return '';&#xA;    }&#xA;&#xA;//A7&#xA;    public static String formatDateTime(java.util.Date date, TimeZone zone, String formatString) {&#xA;        java.text.SimpleDateFormat timeFormat = new java.text.SimpleDateFormat(formatString);&#xA;        timeFormat.setTimeZone(zone);&#xA;        if (date != null) {&#xA;            def fmtTime = timeFormat.format(date);&#xA;            return fmtTime&#xA;        }&#xA;        return '';&#xA;    }&#xA;&#xA;    /*&#xA;    * Method Converts Date to Julian Date ( Day of Year)&#xA;    */&#xA;&#xA;    public static String convertToJulianDate(String date) {&#xA;        def year = date.substring(0, 4);&#xA;        def month = date.substring(5, 7);&#xA;        def day = date.substring(8, 10);&#xA;        def newGregCal = new GregorianCalendar(Integer.parseInt(year), Integer.parseInt(month) - 1, Integer.parseInt(day))&#xA;        def lngTime = newGregCal.getTimeInMillis()&#xA;        def today = new Date(lngTime)&#xA;        def julianDate = new java.text.SimpleDateFormat(&quot;yyDDD&quot;)&#xA;        def dayOfYear = julianDate.format(today)&#xA;        return dayOfYear;&#xA;    }&#xA;&#xA;    /*&#xA;     * Method Converts Date to Julian Date ( Day of Year)&#xA;     */&#xA;&#xA;    public String convertToJulianDate(java.util.Date date) {&#xA;        String julianDoy = &quot;&quot;;&#xA;        if (date == null) {&#xA;            return julianDoy;&#xA;        }&#xA;        try {&#xA;            Calendar cal = Calendar.getInstance();&#xA;            cal.setTimeInMillis(date.getTime());&#xA;            int doy = cal.get(Calendar.DAY_OF_YEAR);&#xA;            String dayofyear = Integer.toString(doy);&#xA;            dayofyear = dayofyear.length() == 1 ? &quot;00&quot; + dayofyear : (dayofyear.length() == 2 ? &quot;0&quot; + dayofyear : dayofyear);&#xA;            String year = &quot;&quot; + cal.get(Calendar.YEAR);&#xA;            julianDoy = year.substring(2) + dayofyear;&#xA;            //println(&quot;Day of Year ::&quot;+julianDoy);&#xA;        }&#xA;        catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;        return julianDoy;&#xA;    }&#xA;&#xA;    /* Method Returns a map object for Event Fields Changed&#xA;     * Map contains Field name as Key and Field Object as the value&#xA;     * The Field Object has Previous Value and Current Value&#xA;    */&#xA;&#xA;    public Map eventFieldChangedValues(Object event, Object gvyBaseClass) {&#xA;        Map mapFields = new HashMap()&#xA;        def newValue = ''&#xA;        def prevValue = ''&#xA;        try {&#xA;            def gvyEventObj = event.getEvent()&#xA;            Set changes = gvyEventObj.getFieldChanges()&#xA;            Iterator iterator = changes.iterator();&#xA;            while (iterator.hasNext()) {&#xA;                EventFieldChange fieldChange = (EventFieldChange) iterator.next();&#xA;                String fieldName = fieldChange.getMetafieldId()&#xA;                MetafieldId mfId = MetafieldIdFactory.valueOf(fieldName);&#xA;                newValue = ArgoUtils.getPropertyValueAsUiString(mfId, fieldChange.getEvntfcNewVal());&#xA;                newValue = newValue != null ? newValue : null&#xA;                prevValue = ArgoUtils.getPropertyValueAsUiString(mfId, fieldChange.getEvntfcPrevVal());&#xA;                prevValue = prevValue != null ? prevValue : null&#xA;&#xA;                def gvyEventField = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventField&quot;);&#xA;                gvyEventField.setFieldName(fieldName);&#xA;                gvyEventField.setpreviousValue(prevValue);&#xA;                gvyEventField.setCurrentValue(newValue);&#xA;                mapFields.put(fieldName, gvyEventField)&#xA;                //println('fieldName:'+fieldName+'   mfId :'+mfId+'     newValue:'+newValue+'     prevValue:'+prevValue )&#xA;&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return mapFields;&#xA;    }&#xA;&#xA;    /*&#xA;    * Method reads the Updated field values from the object&#xA;    * and stores the values in a string buffer for processing&#xA;    */&#xA;&#xA;    public ArrayList readEventChangedFields(Object mapEvntField) {&#xA;        def processFlag = false;&#xA;        def arrList = new ArrayList();&#xA;        try {&#xA;            Iterator it = mapEvntField.keySet().iterator();&#xA;            while (it.hasNext()) {&#xA;                def aField = it.next();&#xA;                def aEvntFieldObj = mapEvntField.get(aField)&#xA;&#xA;                //Fetch Updated Field Values&#xA;                def fieldname = aEvntFieldObj.getFieldName()&#xA;                def previousValue = aEvntFieldObj.getpreviousValue()&#xA;                previousValue = previousValue != null ? previousValue : ''&#xA;                def currentValue = aEvntFieldObj.getCurrentValue()&#xA;                currentValue = currentValue != null ? currentValue : ''&#xA;&#xA;                /* Append updated Field Name and Prev Value.If previous value does not equal to&#xA;               Current value then append as non build in events register fld in event history iwth no change */&#xA;                if (!previousValue.equals(currentValue)) {&#xA;                    arrList.add(fieldname)&#xA;                }&#xA;                // println('fieldname ::'+fieldname+'  previousValue::'+previousValue+'   currentValue::'+currentValue)&#xA;&#xA;            }//While Ends&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return arrList;&#xA;    }//Method readEventChangedFields Ends&#xA;&#xA;    /* Method Gets the Last Snx Events Notes on the Unit&#xA;     * The event notes  identifies the lasttransaction  process&#xA;     */&#xA;&#xA;    public String getMostRecentSnxEventNotes(Object event) {&#xA;        def eventNotes = ''&#xA;        try {&#xA;            def unit = event.getEntity()&#xA;            EventManager em = (EventManager) Roastery.getBean(&quot;eventManager&quot;);&#xA;            EventType snxEvnt = EventType.resolveIEventType(EventEnum.UNIT_SNX_UPDATE);&#xA;            if (snxEvnt != null) {&#xA;                def snxEventObj = em.getMostRecentEventByType(snxEvnt, unit)&#xA;                eventNotes = snxEventObj != null ? snxEventObj.getEventNote() : ''&#xA;                eventNotes = eventNotes != null ? eventNotes : ''&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;&#xA;        return eventNotes&#xA;    }&#xA;&#xA;/*A14&#xA;* Method Gets the Last EventId on the Unit&#xA;* The event id  identifies the lasttransaction  process&#xA;*/&#xA;&#xA;    public String getPrevEvent(String inEventId, Object unit) {&#xA;&#xA;        String eventTypeId = '';&#xA;        try {&#xA;            EventManager em = (EventManager) Roastery.getBean(&quot;eventManager&quot;);&#xA;            EventType eventType = EventType.findEventType(inEventId);&#xA;            if (eventType != null) {&#xA;                Event eventObj = em.getMostRecentEventByType(eventType, unit);&#xA;                eventTypeId = eventObj != null ? eventObj.getEventTypeId() : '';&#xA;                eventTypeId = eventTypeId != null ? eventTypeId : '';&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;&#xA;        return eventTypeId;&#xA;    }&#xA;&#xA;/*&#xA;* Pass Cmis Feed only for Acets Msg 1] snx:Acets&#xA;*/&#xA;&#xA;    public boolean verfiyCmisFeedProcessing(Object event) {&#xA;        def process = true&#xA;        try {&#xA;            def eventObj = event.getEvent()&#xA;            def doer = eventObj.getEvntAppliedBy();&#xA;            def evntNotes = eventObj.getEventNote();&#xA;            evntNotes = evntNotes != null ? evntNotes : ''&#xA;            def unit = event.getEntity()&#xA;            def suppProcFlag = SuppmentalReportCheck(event)&#xA;            def eventType = event.event.getEventTypeId()&#xA;            println(&quot;Event : &quot; + eventType)&#xA;            //A9&#xA;            if (unit instanceof EquipmentState) {&#xA;                unit = getGroovyClassInstance('GvyCmisDataProcessor').getUnitFromEquipment(unit)&#xA;            }&#xA;            def unitNbr = unit.unitId&#xA;            if (unitNbr.startsWith('$')) {&#xA;                println(&quot;DoNot Create Msg :&quot; + unitNbr) //A12&#xA;                return false&#xA;            } else if (UnitVisitStateEnum.DEPARTED.equals(unit.getFieldValue(&quot;UnitVisitState&quot;)) &amp;&amp; !(&quot;RESPOT&quot;.equalsIgnoreCase(eventType))) {&#xA;                //println(&quot;Unit Master State is Departed : No Cmis Feed&quot;)&#xA;                //Dont pass Cmis Message for Master State Departed unit&#xA;                return false;&#xA;            }&#xA;&#xA;            if (suppProcFlag) {&#xA;                return true;&#xA;            } else if ((doer.equals('snx:ACETS') || doer.startsWith('ACETS:')) &amp;&amp; StifNewVesCmisFeedCheck(event)) {&#xA;                return true;&#xA;            }&#xA;&#xA;            if (evntNotes.contains('Acets HLP/HLR') || ((doer.contains('jms') || doer.contains('-snx-')) &amp;&amp; (eventType.endsWith(&quot;_HOLD&quot;) || eventType.endsWith(&quot;_RELEASE&quot;)))) {&#xA;                //A7&#xA;                return true;&#xA;            } else if (doer.contains('jms') || doer.equals('-edi-') || doer.contains('-snx-')) //A12&#xA;            {&#xA;                // Dont process cmis Feed&#xA;                return false;&#xA;            }&#xA;            process = StifNewVesCmisFeedCheck(event)&#xA;        }&#xA;        catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return process;&#xA;    }&#xA;&#xA;&#xA;    public boolean verfiyReportSnxProcessing(Object event) {&#xA;        def process = true&#xA;        try {&#xA;            def eventObj = event.getEvent()&#xA;            def doer = eventObj.getEvntAppliedBy();&#xA;            def suppProcFlag = SuppmentalReportCheck(event)&#xA;            def evntNotes = eventObj.getEventNote();&#xA;            evntNotes = evntNotes != null ? evntNotes : ''&#xA;            def unit = event.getEntity()&#xA;&#xA;            def unitNbr = event.entity.unitId&#xA;            if (unitNbr.startsWith('$')) {&#xA;                println(&quot;DoNot Create CargoStatus Msg :&quot; + unitNbr)&#xA;                return false&#xA;            } else if (UnitVisitStateEnum.DEPARTED.equals(unit.getFieldValue(&quot;UnitVisitState&quot;))) {&#xA;                return false;&#xA;            }&#xA;            if (doer.contains('-snx-')) { //A7&#xA;                return true;&#xA;            } else if (doer.equals('-jms-') || doer.contains('jms') || doer.contains('-snx-')) //A12&#xA;            {&#xA;                return false;&#xA;            } else if (doer.equals('snx:ACETS') || doer.contains('ACETS') || doer.contains('acets')) {&#xA;                return true;&#xA;            } else if (evntNotes.startsWith('ACETS') || evntNotes.startsWith('Acets')) {&#xA;                return true;&#xA;            } else {&#xA;                return true;&#xA;            }&#xA;&#xA;        }&#xA;        catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return process;&#xA;    }&#xA;&#xA;    //XPS Actions that do not have to process CMIS Feed&#xA;    public boolean nonProcessingXpsAction(Object event, String xpsActionMsg) {&#xA;        def executeXpsEvent = true;&#xA;        try {&#xA;            def gvyEventObj = event.getEvent()&#xA;            def doer = gvyEventObj.getEvntAppliedBy()&#xA;            if (doer != null &amp;&amp; doer.startsWith(&quot;xps&quot;)) {&#xA;                def xpsDoer = doer.split(':');&#xA;                if (xpsDoer != null) {&#xA;                    def xpsActionlength = xpsDoer.length&#xA;                    def xpsAction = xpsDoer[xpsActionlength - 1]&#xA;                    if (xpsAction != null &amp;&amp; xpsAction.equals(xpsActionMsg)) {&#xA;                        executeXpsEvent = false&#xA;                    }&#xA;                }&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return executeXpsEvent&#xA;    }&#xA;&#xA;    /*&#xA;     * Pass Event Cmis Feed only if the newves is executed on the Unit&#xA;     * Pass messages after UNIT_DISCH event even if last snx is Stowplan&#xA;     * If last snx execution is Stif then dont pass Event &amp; ACETS cmis feed&#xA;     */&#xA;&#xA;    public boolean StifNewVesCmisFeedCheck(Object event) {&#xA;        def passFeed = true&#xA;        def snxEvntNotes = getMostRecentSnxEventNotes(event)&#xA;        def dischEvnt = event.getMostRecentEvent(&quot;UNIT_DISCH&quot;);&#xA;        if (snxEvntNotes.startsWith('Stowplan Data') &amp;&amp; dischEvnt != null) {&#xA;            passFeed = true;&#xA;        } else if (snxEvntNotes.startsWith('Stowplan Data')) {&#xA;            passFeed = false;&#xA;        }&#xA;        return passFeed&#xA;    }&#xA;&#xA;    /*&#xA;     * Pass Event Cmis Feed only if the newves is executed on the Unit&#xA;     * If last snx execution is Stif then dont pass Event &amp; ACETS cmis feed&#xA;     */&#xA;&#xA;    public boolean SuppmentalReportCheck(Object event) {&#xA;        def passFeed = false&#xA;        def snxEvntNotes = getMostRecentSnxEventNotes(event)&#xA;        if (snxEvntNotes.startsWith('Supplemental')) {&#xA;            passFeed = true;&#xA;        }&#xA;        return passFeed&#xA;    }&#xA;&#xA;    /*&#xA;      * To Identify if last UNIT_SNX_UPDATE was a Newves Update&#xA;      */&#xA;&#xA;    public boolean newVesCheck(Object event) {&#xA;        def passFeed = false&#xA;        def snxEvntNotes = getMostRecentSnxEventNotes(event)&#xA;        if (snxEvntNotes.contains('NewVes')) {&#xA;            passFeed = true;&#xA;        }&#xA;        return passFeed&#xA;    }&#xA;&#xA;    /*&#xA;   * Method checks last event processing time interval to call thread sleep on current processing thread&#xA;   */&#xA;&#xA;    public boolean holdEventProcessing(Object event, String eventType, int sec) {&#xA;        def secInterval = sec * 1000&#xA;        Event eventObj = event.getEvent()&#xA;        def currEvntTime = eventObj.getEvntAppliedDate()&#xA;        def eventId = eventObj.getEventTypeId()&#xA;        def currEvtTime = currEvntTime != null ? currEvntTime.getTime() : null&#xA;&#xA;        def mstEvent = event.getMostRecentEvent(eventType)&#xA;        def mstEvntObj = mstEvent != null ? mstEvent.getEvent() : null&#xA;        def mstEvntTime = mstEvntObj != null ? mstEvntObj.getEvntAppliedDate() : null&#xA;        if (currEvtTime != null &amp;&amp; mstEvntTime != null) {&#xA;            def mstEvtTime = mstEvntTime.getTime()&#xA;&#xA;            def evntTimeDiff = currEvtTime - mstEvtTime&#xA;            //  println('evntTimeDiff::'+evntTimeDiff+'currEvtTime ::'+currEvtTime+'  mstEvtTime::'+mstEvtTime+'  eventId11  ::'+eventId)&#xA;            if (evntTimeDiff &lt; secInterval &amp;&amp; evntTimeDiff &gt; 0) {&#xA;                // println(&quot;Evnt Time Difference is Positive : &quot;+evntTimeDiff)&#xA;                return true&#xA;            } else if (evntTimeDiff &lt; 0) {&#xA;                // println(&quot;Evnt Time Difference is Negative : &quot;+evntTimeDiff)&#xA;                return true;&#xA;            } else {&#xA;                // println(&quot;Evnt Time Greater : &quot;+evntTimeDiff)&#xA;                return false;&#xA;            }&#xA;        } else {&#xA;            return false;&#xA;        }&#xA;    }&#xA;&#xA;    /*&#xA;  * Passes only Acets Events Back to Cmis Feed&#xA;  */&#xA;&#xA;    public boolean acetsMesssageFilter(Object event) {&#xA;        boolean acetsMsgFlag = false;&#xA;&#xA;        try {&#xA;            def gvyEventObj = event.getEvent()&#xA;            def eventId = gvyEventObj.getEventTypeId()&#xA;            def doer = gvyEventObj.getEvntAppliedBy();&#xA;            def eventNotes = gvyEventObj.getEventNote()&#xA;            eventNotes = eventNotes != null ? eventNotes : ''&#xA;            //A11 - Remove MQ msg from thei Filter sop we can post to Gems&#xA;            //String acetsEvents = &quot;BDA,BDB,LNK,ULK,UPU&quot;;&#xA;            String acetsEvents = &quot;BDA,UPU&quot;;&#xA;            boolean acetsEvnt = acetsEvents.contains(eventId);&#xA;&#xA;            CharSequence acetsMsg = &quot;ACETS&quot;;&#xA;            boolean acetsRecorder = doer.contains(acetsMsg);&#xA;            //boolean evntNotes = eventNotes.contains(acetsMsg);&#xA;&#xA;            if (acetsEvnt &amp;&amp; acetsRecorder) {&#xA;                acetsMsgFlag = true;&#xA;            }&#xA;        }&#xA;        catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;        return acetsMsgFlag;&#xA;    }&#xA;&#xA;    public boolean findActiveUnit(Object unit) {&#xA;        def isActiveUnit = null;&#xA;        try {&#xA;            def ctrId = unit.getUnitId()&#xA;            def unitFinder = (UnitFinder) Roastery.getBean(&quot;unitFinder&quot;);&#xA;            def complex = ContextHelper.getThreadComplex();&#xA;            def inEquipment = Equipment.loadEquipment(ctrId);&#xA;            def inUnit = unitFinder.findActiveUnit(complex, inEquipment)&#xA;            if (inUnit == null) {&#xA;                isActiveUnit = false&#xA;            } else {&#xA;                isActiveUnit = true&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        isActiveUnit&#xA;    }&#xA;&#xA;    //Method formats date to yyyy-MM-dd&#xA;    public static String formatDate(String str_date) {&#xA;        java.text.DateFormat formatter = null; Date date = null; String finalDate = null;&#xA;        try {&#xA;            formatter = new java.text.SimpleDateFormat(&quot;yyyy-MMM-dd&quot;);&#xA;            date = (Date) formatter.parse(str_date);&#xA;            def reqformat = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;            finalDate = reqformat.format(date);&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;        return finalDate;&#xA;    }&#xA;&#xA;    //A7 - Convert Date String from One Format to another&#xA;    public static String formatDate(String str_date, String fromDtFormat, String toDtFormat) {&#xA;        java.text.DateFormat formatter = null; Date date = null; String finalDate = null;&#xA;        try {&#xA;            formatter = new java.text.SimpleDateFormat(fromDtFormat);&#xA;            date = (Date) formatter.parse(str_date);&#xA;            def reqformat = new java.text.SimpleDateFormat(toDtFormat);&#xA;            finalDate = reqformat.format(date);&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;        return finalDate;&#xA;    }&#xA;&#xA;&#xA;    public static String convertTimeZone(String dateStr, String fromTimeZone, String toTimeZone, String dateInFormat) {&#xA;        String convertDateStr = null;&#xA;        try {&#xA;            DateFormat formatter = new SimpleDateFormat(dateInFormat);&#xA;            formatter.setTimeZone(TimeZone.getTimeZone(fromTimeZone));&#xA;            Date date = formatter.parse(dateStr);&#xA;            //println(&quot;From Zone :&quot;+formatter.format(date));&#xA;            formatter.setTimeZone(TimeZone.getTimeZone(toTimeZone));&#xA;            //println(&quot;To Zone :&quot;+formatter.format(date));&#xA;            convertDateStr = formatter.format(date);&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;        return convertDateStr;&#xA;&#xA;    }&#xA;&#xA;    public void recordUnitDischComplete(Unit inUnit, GroovyApi inApi) {&#xA;        recordUnitDischComplete(inUnit, inApi, null);&#xA;    }&#xA;&#xA;    public void recordUnitDischComplete(Unit inUnit, GroovyApi inApi, Facility inFacility) {&#xA;&#xA;        //final UserContext userContext = ContextHelper.getThreadUserContext();&#xA;/*        Facility facility = inFacilityId != null ? Facility.findFacility(inFacilityId) : ContextHelper.getThreadFacility();&#xA;        final UserContext uc = getNewUserContext(facility);&#xA;        final Unit inExistingUnit = inUnit;&#xA;        final Facility oldFacility = ContextHelper.getThreadFacility();&#xA;        inApi.sendEmail(&quot;gbabu@matson.com&quot;,&quot;gbabu@matson.com&quot;,&quot;User context from discharge &quot;,uc.getScopeCoordinate().toString());&#xA;&#xA;        PersistenceTemplate template = new PersistenceTemplate(uc);&#xA;        MessageCollector mc = template.invoke(new CarinaPersistenceCallback() {&#xA;            @Override&#xA;            protected void doInTransaction() {*/&#xA;        try {&#xA;            ServicesManager srvcMgr = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;&#xA;            String inEventId = &quot;UNIT_DISCH_COMPLETE&quot;;&#xA;            EventType eventType = EventType.findEventType(inEventId);&#xA;            srvcMgr.recordEvent(eventType, inEventId, null, null, inUnit);&#xA;            if (inFacility != null) {&#xA;                Event event = (Event) srvcMgr.getMostRecentEvent(eventType, inUnit);&#xA;                if (event!= null){&#xA;                    event.setEvntFacility(inFacility);&#xA;                    event.setEvntYard(inFacility.getActiveYard());&#xA;                }&#xA;            }&#xA;        } catch (Exception e) {&#xA;        }&#xA;    }&#xA;    //});&#xA;&#xA;/*&#xA;* Suppress DTA,DTD Before NVI  //A6&#xA;*/&#xA;&#xA;    public boolean suppressDasMsgBeforeNvi(Object event) {&#xA;        def process = false&#xA;        try {&#xA;            def eventObj = event.getEvent()&#xA;            def doer = eventObj.getEvntAppliedBy();&#xA;            def stgEvntDatTime = eventObj.getEvntAppliedDate()&#xA;            def stgEvntTime = stgEvntDatTime.getTime()&#xA;            def evntNotes = eventObj.getEventNote();&#xA;            evntNotes = evntNotes != null ? evntNotes : ''&#xA;            def unit = event.getEntity()&#xA;            def eventType = event.event.getEventTypeId()&#xA;            def secInterval = 240 * 1000&#xA;&#xA;            def blNbr = unit.getUnitGoods().getGdsBlNbr()&#xA;            println(&quot;blNbr in suppressDasMsgBeforeNvi  &quot; + blNbr)&#xA;&#xA;            if ('-system-'.equals(doer)) {&#xA;                def snxEvent = event.getMostRecentEvent('UNIT_SNX_UPDATE')&#xA;                if (snxEvent == null) {&#xA;                    process = true;&#xA;                }&#xA;                def snxEvntNotes = snxEvent.event.eventNote != null ? snxEvent.event.eventNote : ''&#xA;                if (snxEvntNotes.startsWith('Stowplan') || (blNbr != null &amp;&amp; blNbr.contains('DO NOT EDIT'))) {&#xA;                    process = false;&#xA;                } else if (snxEvntNotes.startsWith('Supplemental')) {&#xA;                    process = true;&#xA;                } else if (snxEvntNotes.startsWith('NewVes')) {&#xA;                    def snxDateTime = snxEvent.event.getEvntAppliedDate();&#xA;                    def snxEvtTime = snxDateTime.getTime()&#xA;                    //println(&quot;stgEvntDatTime=&quot;+stgEvntDatTime+&quot;  snxDateTime=&quot;+snxDateTime+&quot;   stgEvntTime=&quot;+stgEvntTime+&quot;    snxEvtTime=&quot;+snxEvtTime)&#xA;                    def evntTimeDiff = snxEvtTime - stgEvntTime&#xA;                    if (evntTimeDiff &gt; secInterval) {&#xA;                        process = true;&#xA;                    }&#xA;                }//End Else If&#xA;            } else {&#xA;                process = true;&#xA;            }&#xA;        }&#xA;        catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return process;&#xA;    }&#xA;&#xA;    public UserContext getNewUserContext(Facility inFacility) {&#xA;        ScopeCoordinates scopeCoordinates = _scoper.getScopeCoordinates(ScopeEnum.YARD, inFacility.getActiveYard().getYrdGkey());&#xA;        UserContext uc = ContextHelper.getThreadUserContext();&#xA;        UserContext newUserContext = _contextProvider.createUserContext(uc.getUserKey(), uc.getUserId(), scopeCoordinates);&#xA;        //set security session id for the user&#xA;        newUserContext.setSecuritySessionId(uc.getSecuritySessionId());&#xA;        return newUserContext;&#xA;    }&#xA;&#xA;    private N4EntityScoper _scoper = (N4EntityScoper) Roastery.getBeanFactory().getBean(N4EntityScoper.BEAN_ID);&#xA;    private ArgoUserContextProvider _contextProvider = (ArgoUserContextProvider) PortalApplicationContext.getBean(IUserContextProvider.BEAN_ID);&#xA;}&#xA;" />
<digital-asset id="GvyCmisEventUnitDisch" short-description="GvyCmisEventUnitDisch" is-pre-deployed="N" groovy-code="/*&#xA;* A1  GR   02/03/2010  PASSPASS Gate Direct Disch &amp; Outgate Scenario&#xA;                       Make Chassi=Null if a mount occured right before.&#xA;  A2  GR   06/04/2010  Removed MOunt check on PASSPASS Gate Messages&#xA;  A3  GR   10/20/10    Added BareChassis Check &amp; NULL to Blank Chassis values&#xA;  A4  GR   12/09/10    Added Accessory Check &amp; NULL to Blank Chassis values&#xA;  A5  GR   03/08/11    Suppress AVL on DFV for Transhipments&#xA;  A6  GR   10/30/11    TOS2.1 SET location=1 for all DFV&#xA;  A7  GR   10/30/11    TOS2.1 Overwrite UNIT_DISCH_COMPLETE with UNIT_DISCH&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;&#xA;public class GvyCmisEventUnitDisch&#xA;{&#xA;&#xA;&#xA;   public boolean setTranshipValuesforShipToShip(String xmlData, Object event, Object gvyBaseClass)&#xA; {&#xA;&#x9;  println(&quot;TESTINGDFV setTranshipValuesforShipToShip begin&quot;);&#xA;    def xmlGvyString = xmlData&#xA;    def msgPosted = false&#xA;    def unit = event.getEntity()&#xA;  try{&#xA;  def category = unit.getFieldValue(&quot;unitCategory&quot;)&#xA;  category = category != null ? category.getKey() : ''&#xA;   if(!category.equals('TRSHP'))  {&#xA;      return msgPosted&#xA;   }&#xA;&#xA;   def ibVesClass = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;   ibVesClass = ibVesClass != null ? ibVesClass.getKey() : ''&#xA;   def obVesClass = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;   obVesClass = obVesClass != null ? obVesClass.getKey() : ''&#xA;&#xA;   def aibcarrierId=unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;)&#xA;   def dibcarrierId=unit.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;)&#xA;&#xA;   def aobcarrierId=unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;)&#xA;   def intdObCarrierId=unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;)&#xA;   def dobcarrierId=unit.getFieldValue(&quot;unitRouting.rtgDeclaredCv.cvId&quot;)&#xA;&#xA;   def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;&#xA;   //VESVOY&#xA;   def aidObCarrierId = aobcarrierId != null ? aobcarrierId : (intdObCarrierId != null ? intdObCarrierId : dobcarrierId)&#xA;   def adIBCarrierId = aibcarrierId != null ? aibcarrierId : dibcarrierId&#xA;&#xA;// Raghu Iyer : 12/11/2013 Added aobcarrierId.equals('GEN_VESSEL') in OR condition to fix the issue for DFV event posting to GEMS and MNS&#xA;  if(ibVesClass.equals('CELL') &amp;&amp; (obVesClass.equals('CELL') || aobcarrierId.equals('GEN_VESSEL')) &amp;&amp; category.equals('TRSHP')){&#xA;     xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;vesvoy=&quot;,adIBCarrierId)&#xA;     xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;misc1=&quot;,aidObCarrierId)&#xA;&#xA;     gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,&quot;DFV&quot;)&#xA;     println(&quot;TESTINGDFV xmlGvyString 1 &quot;+xmlGvyString);&#xA;     //Thread.sleep(4000);&#xA;     //gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,&quot;AVL&quot;)&#xA;&#xA;     msgPosted = true&#xA;   }&#xA;  }catch(Exception e){&#xA;      e.printStackTrace()&#xA;  }&#xA;  &#x9;  println(&quot;TESTINGDFV setTranshipValuesforShipToShip end&quot;);&#xA;   return msgPosted&#xA; }&#xA;&#xA;&#xA; public String passpassDisch(String xmlData,Object unit, Object gvyBaseClass, Object event)&#xA; {&#xA; println(&quot;TESTINGDFV passpassDisch begin&quot;);&#xA;   def xmlGvyString = xmlData&#xA;   def groupCode = unit.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;)&#xA;   groupCode = groupCode != null ? groupCode : ''&#xA;   def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;&#xA;   def equiClass =unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;   equiClass = equiClass != null ? equiClass.getKey() : ''&#xA;   xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;locationStatus=&quot;,&quot;1&quot;) //A6&#xA;   xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;msgType=&quot;,&quot;UNIT_DISCH&quot;) //A7&#xA;&#xA;   try&#xA;   {&#xA;      if(groupCode.equals('PASSPASS'))&#xA;      {&#xA;        //xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;locationStatus=&quot;,&quot;1&quot;)&#xA;        def loc = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;loc=&quot;)&#xA;         if(loc.equals('null'))&#xA;         {&#xA;             xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;loc=&quot;,&quot;CSX&quot;)                          //Setting the sec to 00 for disch DFV PassPass&#xA;            def time = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;aTime=&quot;)&#xA;            def timeSub = !time.equals('null') ? time.substring(0,6) : '';&#xA;            def timeChngSec = timeSub.length() &gt; 0 ? timeSub+&quot;00&quot; : '';&#xA;            println(&quot;TIME ::&quot;+time+&quot;   TIME-1 ::&quot;+timeSub+&quot;    TIME-2 ::&quot;+timeChngSec);&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;aTime=&quot;,timeChngSec)&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;lastATime=&quot;,timeChngSec)&#xA;         }&#xA;        //A2&#xA;&#x9;&#x9;/*def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;)&#xA;        boolean isCntMounted = gvyEventUtil.holdEventProcessing(event,'UNIT_MOUNT', 2)&#xA;        if(isCntMounted){ */&#xA;        xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;chassisNumber=&quot;,&quot;null&quot;);&#xA;&#x9;&#x9;xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;chassisCd=&quot;,&quot;null&quot;);&#xA;&#x9;&#x9;xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;accessory=&quot;,&quot;null&quot;); //A4&#xA;&#xA;        //}&#xA;&#x9;println(&quot;TESTINGDFV xmlGvyString 2 &quot;+xmlGvyString)&#xA;&#x9;&#x9; prinln(&quot;TESTINGDFV passpassDisch end&quot;);&#xA;        return xmlGvyString&#xA;       }&#xA;    }catch(Exception e){&#xA;       e.printStackTrace()&#xA;    }&#xA;    //A5 - 04/28/2010 Chassis Mounts Only for ALE should go up acets&#xA;    def aibcarrierId=unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;)&#xA;&#xA;&#x9;if(aibcarrierId != null &amp;&amp; !aibcarrierId.startsWith('ALE') &amp;&amp; !'CHASSIS'.equals(equiClass)){ //A3&#xA;// Commented By Solomon - Start&#xA;&#x9;//  xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;chassisNumber=&quot;,&quot;null&quot;);&#xA;    //  xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;chassisCd=&quot;,&quot;null&quot;);&#xA;// Commented By Solomon - End&#xA;  &#x9;  xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;accessory=&quot;,&quot;null&quot;); //A4&#xA;&#x9;  &#x9;  println(&quot;TESTINGDFV in ALE xmlGvyString &quot;+xmlGvyString)&#xA;&#x9;}&#xA;    return xmlGvyString&#xA; }&#xA;&#xA;}" />
<digital-asset id="GvyP2Ingate" short-description="GvyP2Ingate" is-pre-deployed="N" groovy-code="import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import java.util.Iterator;&#xA;import java.util.Collection;&#xA;&#xA;public class GvyP2Ingate {&#xA;&#xA;/** If commodity code is SIT reapply DRAY status&#xA;*/&#xA;public void setDray(Object unit) {&#xA;                if(unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;).equals(&quot;SIT&quot;)) {&#xA;                     unit.setFieldValue(&quot;unitDrayStatus&quot;,com.navis.argo.business.atoms.DrayStatusEnum.OFFSITE);&#xA;                }&#xA;}&#xA;&#xA;public void setPosition(Object unit) {&#xA;  &#x9;     // Update Position to P2A1&#xA;                  GroovyEvent moveEvent = new GroovyEvent( null, unit);&#xA;                  moveEvent.setProperty(&quot;PositionFull&quot;,&quot;Y-SI-P2A-1&quot;);&#xA;                   moveEvent.setProperty(&quot;PositionSlot&quot;,&quot;P2A1&quot;);&#xA;                  moveEvent.postNewEvent( &quot;UNIT_YARD_MOVE&quot;, &quot;Position Update on P2 In Gate&quot;);&#xA;&#xA;}&#xA;&#xA;&#xA;}" />
<digital-asset id="NOWOutgateProcessor" short-description="NOWOutgateProcessor" is-pre-deployed="N" groovy-code="/*&#xA;&#xA;Groovy code called at the end of the truck outgate transaction. It submits an XML document to NOW Solutions Web service using SOAP&#xA;&#xA;Amine Nebri, anebri@navis.com - June 25 2008&#xA;&#xA;*/&#xA;/*&#xA;* Srno   Doer  Date          Desc&#xA;* A1     GR    04/21/2010    Added Method and Changes to pass ChasType and NO-EIT transactions&#xA;* A2     GR    06/04/2010    Added eitString='0' to allow PassPass Gate Trans to Go through&#xA;* A3     GR    11/01/2010    TOS2.1 : CHANGE FOR WS&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;//import com.matson.nowsol.*&#xA;import N4Gate.matsongate_n4.*;&#xA;&#xA;public class NOWOutgateProcessor  extends GroovyInjectionBase&#xA;{&#xA;&#x9;private static proxy = null;&#xA;&#xA;&#x9;public void execute(inDao, api, departure)&#xA;&#x9;{&#xA;&#x9;&#x9;println(&quot;\nNOWProcessor: --Executing Groovy Gate Task---&quot;)&#xA;&#xA;&#x9;&#x9;def eitString = inDao.tv.tvdtlsBatNbr&#xA;&#xA;&#x9;&#x9;// We exit if the Bat Number is not numeric or &lt;100 and &gt;200&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;if (eitString == null)&#xA;&#x9;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;NOWProcessor: Reassigning eit=0!\n\n&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;//return - A1&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;int eitId = eitString != null ? eitString.toInteger() : 0  //A1&#xA;&#xA;&#x9;&#x9;&#x9;if (eitId &lt; 101 || eitId &gt;200)&#xA;&#x9;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;NOWProcessor: Skipping eit &quot;+eitId+&quot;!\n\n&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;//return --A1&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (Exception e)&#xA;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;println(&quot;NOWProcessor: Skipping non numeric id  &quot;+eitString+&quot;!\n\n&quot;+e)&#xA;&#x9;&#x9;&#x9;return &#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;def url = api.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;).getNowServer();&#xA;&#x9;&#x9;if(url == null) {&#xA;&#x9;&#x9;      println(&quot;NOWOutgateProcessor: Skipping no now server  !\n\n&quot;);&#xA;           return;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;// Build the message by calling NOWMessageBuilder&#xA;&#x9;&#x9;def msg = api.getGroovyClassInstance(&quot;NOWMessageBuilder&quot;).formOutgateMessage(inDao)&#xA;&#x9;&#x9;def result&#xA;&#xA;&#x9;&#x9;println(&quot;NOWOutgateProcessor: invoking NOW WebService with: &quot; + msg)&#xA;&#x9;&#x9;def time = System.currentTimeMillis();&#xA;&#x9;&#x9;// Invoke NOW&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;// 07/31/09 Switched to BEA service&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;      if(proxy == null)  {&#xA;&#x9;&#x9;&#x9;  try {&#xA;&#x9;&#x9;&#x9;&#x9;//def s = new N4Gate_Service_Impl(url);&#xA;&#x9;&#x9;&#x9;&#x9;//proxy = s.getN4Gate()&#xA;                  &#xA;&#x9;&#x9;&#x9;&#x9;N4Gate_ServiceLocator gateSrvLoc = new N4Gate_ServiceLocator();&#xA;                gateSrvLoc.setN4GateEndpointAddress(url);&#xA;                proxy = gateSrvLoc.getN4Gate();  &#xA;&#xA;&#x9;&#x9;&#x9;  } catch (Exception pe) {&#xA;&#x9;&#x9;&#x9;&#x9;//def s = new N4Gate_Service_Impl(url);&#xA;&#x9;&#x9;&#x9;&#x9;//proxy = s.getN4Gate()&#xA;&#x9;&#x9;&#x9;&#x9;N4Gate_ServiceLocator gateSrvLoc = new N4Gate_ServiceLocator();&#xA;                gateSrvLoc.setN4GateEndpointAddress(url);&#xA;                proxy = gateSrvLoc.getN4Gate();  &#xA;&#xA;&#x9;&#x9;&#x9;  }&#xA;&#x9;&#x9;     }&#xA;&#x9;&#x9;    api.log(&quot;Proxy=&quot;+proxy);&#xA;&#xA;&#x9;&#x9;    try {&#xA;&#x9;&#x9;&#x9;result = proxy.process_tracking(msg);&#xA;&#x9;&#x9;    } catch (Exception re) {&#xA;&#x9;&#x9;&#x9;result = proxy.process_tracking(msg);&#xA;&#x9;&#x9;    }&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (Exception e) {&#xA;&#x9;&#x9;    proxy = null;&#xA;&#x9;&#x9;    e.printStackTrace();&#xA;&#x9;&#x9;    throw new Exception(&quot;NOWOutgateProcessor: Could not connect to NOW: &quot; + e.getClass());&#xA;&#x9;&#x9;            &#xA;                 }&#xA;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;// Test for null result&#xA;&#xA;&#x9;&#x9;time = System.currentTimeMillis() - time;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA; &#x9;&#x9;println(&quot;NOWOutgateProcessor:(&quot;+(double)time/1000.0+&quot;) NOW result is: &quot; + result)&#xA;&#xA;&#x9;&#x9;if (!result)&#xA;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;throw new Exception(&quot;NOW WebService returned null&quot;)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;// Examine the result document&#xA;&#x9;&#x9;def resultDoc = new XmlParser().parseText(result)&#xA;&#xA;&#x9;&#x9;def status = resultDoc.'truck-departure-response'[0].'@status'&#xA;&#xA;&#x9;&#x9;println(&quot;NOWProcessor: status is &quot; + status)&#xA;&#xA;&#x9;&#x9;if (status == &quot;3&quot;) &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;def error = resultDoc.'truck-departure-response'[0].messages.message[0].'@text'&#xA;&#xA;&#x9;&#x9;&#x9;println(&quot;NOWOutgateProcessor: error is: &quot; + error)&#xA;&#x9;&#x9;&#x9;throw new Exception(error)&#xA;&#x9;&#x9;}&#xA;                                       &#xA; &#x9;&#x9;time = System.currentTimeMillis() - time;&#xA;&#x9;&#x9;time = (double)time/1000.0;&#xA;&#x9;&#x9;println(&quot;NOWOutgateProcessor: success! Parse Time=&quot;+time+&quot;\n\n&quot;)&#xA;&#x9;}&#xA;}" />
<digital-asset id="CustomCreateAndPrintDocument" short-description="CustomCreateAndPrintDocument" is-pre-deployed="N" groovy-code="/*&#xA;&#xA;Groovy code called from the gate form to print or not print the document based on the logic below.&#xA;The logic fails the transaction with an error message if ufvFlexString02 is not Y and user entered a chassis accessory number&#xA;&#xA;Amine Nebri, anebri@navis.com - July 4 2008&#xA;&#xA;Setup:  BAT # is a required field at the Trk Visit IN stage.&#xA;&#xA;If the BAT # entered is between 101 ? 200, print the Doc Type ID = EIT.&#xA;If the BAT # entered is between 701 ? 799, do not print anything (this is an in-house UTR, no ticket needed).&#xA;If the BAT # entered is any other value, print the Doc Type ID = NO EIT.&#xA;&#xA;4/28/09: CB: Added conditionals for the create and print. Default is to do both.&#xA;                      However, for SI GATE, the tx's will do the create and the tv will do the print.&#xA;&#xA;11/06/14: Peter Seiler Change PrintDocument and CreateDocument calls to use 2.6 API.&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.road.business.adaptor.document.CreateDocument&#xA;import com.navis.road.business.adaptor.document.PrintDocument&#xA;import com.navis.road.business.api.GroovyRoadApi&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import com.navis.road.portal.GateConfigurationParameterConstants&#xA;&#xA;public class CustomCreateAndPrintDocument extends GroovyInjectionBase&#xA;{&#xA;    public void execute(TransactionAndVisitHolder inDao, GroovyRoadApi api) {&#xA;        execute(inDao, api, true, true)&#xA;    }&#xA;&#xA;    public void execute(TransactionAndVisitHolder inDao, GroovyRoadApi api, boolean isCreate, boolean isPrint)&#xA;    {&#xA;&#xA;        def batString = inDao.tv.tvdtlsBatNbr&#xA;&#xA;&#xA;        if (batString == null) {&#xA;            api.log(&quot;CustomCreateAndPrintDocument null&quot;);&#xA;            return&#xA;        }&#xA;&#xA;        api.log(&quot;CustomCreateAndPrintDocument for bat ${batString}&quot;);&#xA;&#xA;        def batNumber = -99&#xA;&#xA;        try&#xA;        {&#xA;            // We convert the string into an integer&#xA;            batNumber = batString.toInteger()&#xA;        }&#xA;        catch (Exception e)&#xA;        {&#xA;            // We exit if the Bat Number is not numeric&#xA;            //throw new Exception(&quot;BAT # must be numeric&quot;)&#xA;            return&#xA;        }&#xA;&#xA;        // No need to print anything in this case. This is an in house UTR&#xA;        if ( batNumber &gt;= 701 &amp;&amp; batNumber &lt;= 799)&#xA;            return&#xA;&#xA;        def docTypeId = &quot;NO EIT&quot;&#xA;&#xA;        if (batNumber &gt;= 101 &amp;&amp; batNumber &lt;= 200)&#xA;            docTypeId = &quot;EIT&quot;&#xA;&#xA;        // Set the doc type id and the pop-up value and number of copies&#xA;        inDao.put(&quot;docTypeId&quot;, docTypeId)&#xA;&#xA;        // Create the document&#xA;        if (isCreate)&#xA;        {&#xA;            new CreateDocument().execute(inDao)&#xA;        }&#xA;&#xA;        // Print the document&#xA;        if (isPrint)&#xA;        {&#xA;            inDao.put(&quot;displayPrintPopup&quot;, 'true')&#xA;            inDao.put(&quot;printNoOfCopies&quot;, '1')&#xA;            new PrintDocument().execute(inDao)&#xA;        }&#xA;    }&#xA;}" />
<digital-asset id="GvyApplyHold" short-description="GvyApplyHold" is-pre-deployed="N" groovy-code="import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;&#xA;// Doesn't work&#xA;public class GvyApplyHold {&#xA;&#xA;public void applyEquipmentHold(Object equipment, String eventName,String note) {&#xA;         println(&quot;Apply Hold &quot;+eventName);&#xA;         GroovyEvent event = new GroovyEvent( null, equipment);&#xA;         event.postNewEvent( eventName, note);&#xA;&#xA;}&#xA;&#xA;}" />
<digital-asset id="UpdateCUEWhenEventIsRecordedSample" short-description="UpdateCUEWhenEventIsRecordedSample" is-pre-deployed="Y" groovy-code="import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.argo.business.extract.ChargeableUnitEvent&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.argo.ArgoExtractEntity&#xA;import com.navis.argo.ArgoExtractField&#xA;import com.navis.services.business.event.GroovyEvent&#xA;&#xA;/**&#xA; * Created by IntelliJ IDEA.&#xA; * User: mraghavachari&#xA; * Date: Feb 28, 2010&#xA; * Time: 9:46:05 PM&#xA; * This groovy plug-in is initiated when recording an event. While recording the current event type, it updates the&#xA; * ChargeableUnitEvent of another event's column for the same curent recording event's UnitFacilityVisit.&#xA; * It expects an input of the target Event Type ID as string value.&#xA; */&#xA;&#xA;public class UpdateCUEWhenEventIsRecordedSample extends GroovyApi {&#xA;&#xA;  public void execute(Object event, String inEventTypeId) {&#xA;&#xA;    logInfo(&quot;Start execution of Groovy Plug-in: UpdateCUEWhenEventIsRecordedSample&quot;);&#xA;    def unit =  event.getEntity();&#xA;    def evnt =  event.getEvent();&#xA;    Date evntAppliedDate = evnt.getEvntAppliedDate();&#xA;    // Get UnitFacilityVisit using Event applied date time&#xA;    UnitFacilityVisit ufv = unit.getUfvForEventTime(evntAppliedDate);&#xA;    // Get ChargeableUnitEvent record&#xA;    List cueList = findByEventTypeIdAndUfv(ufv, inEventTypeId);&#xA;&#xA;    if (!cueList.isEmpty()) {&#xA;      if (cueList.size() &gt; 1) {&#xA;&#xA;        logWarn(&quot;Groovy : UpdateCUEWhenEventIsRecordedSample: Expected only one CUE event of &quot; + inEventTypeId +&#xA;             &quot; for Equipment Id : &quot; + ufv.getPrimaryEqId());&#xA;      } else {&#xA;        ChargeableUnitEvent cue =  cueList.get(0);&#xA;        if (cue != null) {&#xA;          cue.setBexuFlexDate05(evntAppliedDate);&#xA;        }&#xA;      }&#xA;    }&#xA;    logInfo(&quot;End execution of Groovy Plug-in: UpdateCUEWhenEventIsRecordedSample&quot;);&#xA;&#xA;  }&#xA;&#xA;&#xA;  /**&#xA;  * Get CUE List for Event Type ID and Ufv Gkey not equal to CALCELLED status.&#xA;   */&#xA;  private List findByEventTypeIdAndUfv(UnitFacilityVisit inUfv, String inEventTypeId) {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(ArgoExtractEntity.CHARGEABLE_UNIT_EVENT)&#xA;                .addDqPredicate(PredicateFactory.eq(ArgoExtractField.BEXU_EVENT_TYPE, inEventTypeId))&#xA;                .addDqPredicate(PredicateFactory.ne(ArgoExtractField.BEXU_STATUS, CANCELLED))&#xA;                .addDqPredicate(PredicateFactory.eq(ArgoExtractField.BEXU_UFV_GKEY, inUfv.getPrimaryKey()));&#xA;        return Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;    }&#xA;  private static final String CANCELLED = &quot;CANCELLED&quot;;&#xA;}&#xA;" />
<digital-asset id="ModifyVoidGuaranteesToSendCreditCardReversal" short-description="ModifyVoidGuaranteesToSendCreditCardReversal" is-pre-deployed="Y" groovy-code="&#xA;import org.apache.log4j.Logger&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.extract.Guarantee&#xA;import com.navis.argo.business.atoms.BillingExtractEntityEnum&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.framework.esb.client.ESBClientHelper&#xA;import com.navis.framework.esb.server.FrameworkMessageQueues&#xA;import org.apache.commons.lang.StringUtils&#xA;import com.navis.payment.PaymentServiceRequest&#xA;import com.navis.payment.IPaymentServiceManager&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.util.message.MessageCollectorFactory&#xA;import com.navis.framework.util.message.MessageCollector&#xA;import com.navis.payment.IPaymentService&#xA;&#xA;import com.navis.payment.PaymentBizMetafield&#xA;&#xA;import com.navis.framework.util.BizViolation&#xA;import java.text.DateFormat&#xA;import java.text.SimpleDateFormat&#xA;import java.util.Map&#xA;import java.util.List&#xA;import java.util.Date&#xA;import java.util.HashMap&#xA;import com.navis.argo.business.extract.ChargeableUnitEvent&#xA;import com.navis.payment.PaymentServiceResponse&#xA;import com.navis.framework.util.MetafieldUserMessageImp&#xA;import com.navis.framework.util.TransactionParms&#xA;import com.navis.argo.ArgoPropertyKeys&#xA;&#xA;/**&#xA; *  This is a Pre-Deployable Groovy Plug-in which Modify Void Guarantees To Send Credit Card Reversal&#xA; *&#xA; * @author &lt;a href=&quot;mailto:kjeyapandian@navis.com&quot;&gt;Kathiresan Jeyapandian&lt;/a&gt; Nov 30, 2009 Time: 11:48:01 PM&#xA; */&#xA;public class ModifyVoidGuaranteesToSendCreditCardReversal extends GroovyApi {&#xA;&#xA;  public void execute(Map parameters) {&#xA;&#xA;    logInfo(&quot;Start execution of Groovy Plug-in: ModifyVoidGuaranteesToSendCreditCardReversal&quot;);&#xA;    System.out.println(&quot;Start execution of Groovy Plug-in: ModifyVoidGuaranteesToSendCreditCardReversal&quot;);&#xA;&#xA;    // Get the list of credit pre-authorized guarantees voided or expired&#xA;    List guarantees = Guarantee.getCreditPreAuthorizedGurantees(BillingExtractEntityEnum.INV, true);&#xA;&#xA;    UserContext userContext = ContextHelper.getThreadUserContext();&#xA;&#xA;    if(guarantees.size() == 0) {&#xA;      logInfo(&quot;No records matched for Groovy Plug-in ModifyVoidGuaranteesToSendCreditCardReversal to notify Voided Guarantee&quot;);&#xA;      System.out.println(&quot;No records matched for Groovy Plug-in ModifyVoidGuaranteesToSendCreditCardReversal to notify Voided Guarantee&quot;);&#xA;    }&#xA;&#xA;    for (Object guaranteeObj: guarantees) {&#xA;&#xA;     Guarantee guarantee = (Guarantee) guaranteeObj;&#xA;&#xA;      logInfo(&quot;Guarantees made by Credit Card Pre-Authorization -  &quot; + guarantee);&#xA;      System.out.println(&quot;Guarantees made by Credit Card Pre-Authorization -  &quot; + guarantee);&#xA;&#xA;      // collect data for email content&#xA;      String guaranteeId = guarantee.getGnteGuaranteeId();&#xA;      String unitId = guarantee.getGnteAppliedToNaturalKey();&#xA;      String eventId = guarantee.getGnteAppliedToEventId();&#xA;      Date gnteCreated = guarantee.getGnteCreated();&#xA;      String custReferenceId = guarantee.getGnteCustomerReferenceId();&#xA;      Double amount = guarantee.getGnteGuaranteeAmount();&#xA;      String notes = guarantee.getGnteNotes();&#xA;      String emailToId = guarantee.getGnteExternalEmailAddress();&#xA;      String authNbr = guarantee.getGnteAuthorizationNbr();&#xA;&#xA;      Date voidOrExpiredDate = guarantee.getGnteVoidedOrExpiredDate();&#xA;      Date emailSentDate = guarantee.getGnteVoidedEmailSentDate();&#xA;&#xA;      if(voidOrExpiredDate != null &amp;&amp; emailSentDate != null) {&#xA;&#xA;        MessageCollector errorMsgs = MessageCollectorFactory.createMessageCollector();&#xA;        IPaymentService paymentService = PPS_MGR.getService(userContext, errorMsgs);&#xA;&#xA;        if(paymentService==null){&#xA;           LOGGER.error(&quot;Unable to get Payment Service for User: &quot; + userContext.getUserId());&#xA;           //throw BizViolation.create(PaymentServicePropertyKeys.PPS__SERVICE_NOT_AVAILABLE, null);&#xA;        }&#xA;&#xA;        //Set&lt;MetafieldId&gt; fieldsForAuthPayment = paymentService.getMetafieldsForTransaction(PaymentServiceTransactionTypeEnum.PMT_VOID);&#xA;&#xA;        // Create payment fields map&#xA;        Map paymentFields = new HashMap();&#xA;        paymentFields.put(PaymentBizMetafield.PPS_CUSTOMER_REF_NUM, custReferenceId);&#xA;        paymentFields.put(PaymentBizMetafield.PPS_AMOUNT, amount);&#xA;&#xA;        ChargeableUnitEvent cue = ChargeableUnitEvent.getCUErecordForGuarantee(guarantee);&#xA;        String invoiceId = cue.getBexuLastDraftInvNbr();&#xA;&#xA;        String timeStamp = SDF.format(new Date(System.currentTimeMillis()));&#xA;        paymentFields.put(PaymentBizMetafield.PPS_INVOICE_ID, invoiceId);&#xA;        paymentFields.put(PaymentBizMetafield.PPS_CCH_NAME, guarantee.getGnteExternalContactName());&#xA;        paymentFields.put(PaymentBizMetafield.PPS_CCH_ADDR1, guarantee.getGnteExternalAddress1());&#xA;        paymentFields.put(PaymentBizMetafield.PPS_CCH_ADDR2, guarantee.getGnteExternalAddress2());&#xA;        paymentFields.put(PaymentBizMetafield.PPS_CCH_CITY, guarantee.getGnteExternalCity());&#xA;        paymentFields.put(PaymentBizMetafield.PPS_CCH_POSTAL_CODE, guarantee.getGnteExternalMailCode());&#xA;        paymentFields.put(PaymentBizMetafield.PPS_CCH_REGION, guarantee.getGnteExternalStateName());   &#xA;        paymentFields.put(PaymentBizMetafield.PPS_CCH_COUNTRY_CODE, guarantee.getGnteExternalCountry().getCntryCode());&#xA;        paymentFields.put(PaymentBizMetafield.PPS_CCH_PHONE, guarantee.getGnteExternalTelephone());&#xA;        paymentFields.put(PaymentBizMetafield.PPS_CCH_EMAIL, guarantee.getGnteExternalEmailAddress());&#xA;        paymentFields.put(PaymentBizMetafield.PPS_CC_ACCOUNT_NUM, cue.getBexuRestowAccount());&#xA;        paymentFields.put(PaymentBizMetafield.PPS_CC_EXP_DATE, guarantee.getGnteVoidedOrExpiredDate());&#xA;        paymentFields.put(PaymentBizMetafield.PPS_CC_VERIFICATION_NUM, authNbr);&#xA;&#xA;        PaymentServiceRequest authReq = new PaymentServiceRequest(userContext);&#xA;        authReq.setPmtFields(paymentFields);&#xA;&#xA;        PaymentServiceResponse response = paymentService.voidPayment(authReq);&#xA;&#xA;        if (!response.isSuccess()) {&#xA;            prasePaymentServiceError(response);&#xA;        } else {&#xA;             sendNotificationForGuaranteeVoidedOrExpired(guaranteeId, unitId, eventId, gnteCreated, custReferenceId, amount,&#xA;                     notes, emailToId, userContext, voidOrExpiredDate);&#xA;        }&#xA;&#xA;      }&#xA;&#xA;    }&#xA;&#xA;    logInfo(&quot;End execution of Groovy Plug-in: ModifyVoidGuaranteesToSendCreditCardReversal&quot;);&#xA;    System.out.println(&quot;End execution of Groovy Plug-in: ModifyVoidGuaranteesToSendCreditCardReversal&quot;);&#xA;    &#xA;  }&#xA;&#xA;  private void sendNotificationForGuaranteeVoidedOrExpired(String inGuaranteeId, String inUnitId,  String inEventId, Date inGnteCreated,&#xA;                                                       String inCustReferenceId, Double inAmount,&#xA;                                                       String inNotes, String inEmailToId,&#xA;                                                       UserContext inContext, Date inVoidedExpiredDate) {&#xA;&#xA;    String subject = &quot;Guarantee ID &quot; + inGuaranteeId + &quot;' for container #&quot; + inUnitId + &quot; voided at &quot; + inVoidedExpiredDate;&#xA;&#xA;    // Create email message body&#xA;    String msgBody = &quot;\n Please note that the following guarantee voided at &quot;+ inVoidedExpiredDate + &quot;.&quot; +&#xA;&#xA;            &quot;\n\n Guarantee ID :  &quot; + inGuaranteeId +&#xA;            &quot;\n Guarantee Amount :  &quot; + inAmount +&#xA;            &quot;\n Guarantee Created Date  : &quot; + inGnteCreated + &quot;.&quot; +&#xA;            &quot;\n Confirmation #  : &quot; + inGuaranteeId +&#xA;            &quot;\n Reference # : &quot; + inCustReferenceId +&#xA;            &quot;\n Remarks &quot; + inNotes +&#xA;            &quot;\n Unit ID &quot; + inUnitId +&#xA;            &quot;\n Event ID &quot; + inEventId +&#xA;&#xA;            &quot;\n\n Guarantee Voided email sent to. &quot;+ inEmailToId + &quot; for Guarantee &quot; + inGuaranteeId;&#xA;&#xA;    logInfo(&quot;Message Body is - &quot; + msgBody);&#xA;    System.out.println(&quot;Message Body is - &quot; + msgBody);&#xA;&#xA;    if (inEmailToId != null &amp;&amp; !StringUtils.isEmpty(inEmailToId)) {&#xA;      try {&#xA;        ESBClientHelper.sendEmailAttachments(inContext, FrameworkMessageQueues.EMAIL_QUEUE, inEmailToId, &quot;kjeyapandian@zebra.com&quot;, subject, msgBody,&#xA;                null);&#xA;        logInfo(&quot;Guarantee Expired email sent to '&quot; + inEmailToId + &quot;' for 'Guarantee: &quot; + inGuaranteeId + &quot;' on &quot; + inVoidedExpiredDate + &quot;.&quot;);&#xA;        System.out.println(&quot;Guarantee Expired email sent to '&quot; + inEmailToId + &quot;' for 'Guarantee: &quot; + inGuaranteeId + &quot;' on &quot; + inVoidedExpiredDate + &quot;.&quot;);&#xA;      } catch (Exception inEx) {&#xA;        LOGGER.error(&quot;Exception Occurred in sendNotificationForGuaranteeVoidedOrExpired() due to &quot;+ inEx);&#xA;        System.out.println(&quot;Exception Occurred in sendNotificationForGuaranteeVoidedOrExpired() due to &quot; + inEx);&#xA;      }&#xA;    }&#xA;&#xA;  }&#xA;&#xA;  private static void prasePaymentServiceError(PaymentServiceResponse inResponse) throws BizViolation {&#xA;    if (inResponse.hasProcessorStatusMsgs()) {&#xA;        Map errorMap = inResponse.getProcessorStatusMsgs();&#xA;        if (errorMap != null &amp;&amp; !errorMap.isEmpty()) {&#xA;            Set msgCodes = errorMap.keySet();&#xA;            for (Iterator it = msgCodes.iterator(); it.hasNext();) {&#xA;                String code = (String) it.next();&#xA;                String msg = (String) errorMap.get(code);&#xA;                def list = [code, msg];&#xA;                TransactionParms.getBoundParms().getMessageCollector()&#xA;                        .appendMessage(new MetafieldUserMessageImp(ArgoPropertyKeys.CREDIT_CARD_PROCESS_IS_FAILED, null,&#xA;                                list));&#xA;            }&#xA;            throw BizViolation&#xA;                    .create(ArgoPropertyKeys.ERROR_WHILE_RECORDING_GUARANTEE, null, null, null);&#xA;        }&#xA;    }&#xA;  }&#xA;&#xA;  private static final Logger LOGGER = Logger.getLogger(ModifyVoidGuaranteesToSendCreditCardReversal.class);&#xA;  private static final DateFormat SDF = new SimpleDateFormat(&quot;yyyyMMdd'T'HHmmss&quot;);&#xA;  private static final IPaymentServiceManager PPS_MGR = (IPaymentServiceManager) Roastery.getBean(IPaymentServiceManager.BEAN_ID);&#xA;&#xA;}&#xA;" />
<digital-asset id="GenerateImportDemurrageInvoices" short-description="GenerateImportDemurrageInvoices" is-pre-deployed="Y" groovy-code="import com.navis.argo.ArgoExtractEntity&#xA;import com.navis.argo.ArgoExtractField&#xA;import com.navis.argo.ArgoPropertyKeys&#xA;import com.navis.argo.BillingTransactionDocument&#xA;import com.navis.argo.BillingTransactionsDocument&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.EdiInvoice&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.atoms.BillingExtractEntityEnum&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.argo.business.atoms.GuaranteeTypeEnum&#xA;import com.navis.argo.business.extract.ChargeableUnitEvent&#xA;import com.navis.argo.business.extract.Guarantee&#xA;import com.navis.argo.business.extract.billing.ConfigurationProperties&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.argo.portal.BillingWsApiConsts&#xA;import com.navis.argo.util.FileUtil&#xA;import com.navis.argo.util.XmlUtil&#xA;import com.navis.argo.webservice.types.v1_0.GenericInvokeResponseWsType&#xA;import com.navis.argo.webservice.types.v1_0.MessageType&#xA;import com.navis.argo.webservice.types.v1_0.QueryResultType&#xA;import com.navis.argo.webservice.types.v1_0.ResponseType&#xA;import com.navis.argo.webservice.types.v1_0.ScopeCoordinateIdsWsType&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.esb.client.ESBClientHelper&#xA;import com.navis.framework.esb.server.FrameworkMessageQueues&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.inventory.InventoryPropertyKeys&#xA;import com.navis.inventory.business.api.UnitStorageManager&#xA;import com.navis.www.services.argoservice.ArgoServiceLocator&#xA;import com.navis.www.services.argoservice.ArgoServicePort&#xA;import javax.xml.rpc.ServiceException&#xA;import javax.xml.rpc.Stub&#xA;import org.apache.commons.lang.StringUtils&#xA;import org.apache.log4j.Logger&#xA;import org.jdom.Element&#xA;import org.jdom.Text&#xA;&#xA;/**&#xA; *  This is a Pre-Deployable Groovy Plug-in which generates Invoices for STORAGE events.&#xA; *  Container delivered and Guaranteed STORAGE events are invoiced individually for each GUARANTEED record.&#xA; *  The PAID - Gurantee record will be exlcuded&#xA; *  The container is delivered but it doen't have guarantee record CUE - STATUS will be marked as CANCELLED. It is assumed that container is deliverd&#xA; *  in the free period time.&#xA; * @author &lt;a href=&quot;mailto:tramakrishnan@navis.com&quot;&gt; tramakrishnan&lt;/a&gt; Oct 14, 2009 Time: 5:48:01 PM (Major modification done by Murali Raghavachari)&#xA; *&#xA; * *****************************************************************************************************&#xA; * Refer BILRM-47 1.2.2 Groovy Plug-in to Generate Import Demurrage Invoices&#xA; * *****************************************************************************************************&#xA; */&#xA;public class GenerateImportDemurrageInvoices extends GroovyApi {&#xA;&#xA;  public void execute(Map parameters) {&#xA;&#xA;    /**&#xA;     *   **** Please review and modify the following variables ****&#xA;     * 1) Comment out all the System.out.println lines before moving to production.&#xA;     * 2) Update the  invoiceTypeId as per your setup&#xA;     * 3) Do you want to finalize the invoice?   Update isInvoiceFinal as &quot;False&quot; or &quot;True&quot;.&#xA;     * 4) Modify the currency id&#xA;     * 5) Modify From Email Id (Eg: rthandavarayan@zebra.com)&#xA;     */&#xA;&#xA;&#xA;    LOGGER.info(&quot;Groovy : GenerateImportDemurrageInvoices starts to send email notification for STORAGE events with generated invoices attached !&quot;);&#xA;    System.out.println(&quot;Groovy : GenerateImportDemurrageInvoices starts to send email notification for STORAGE events with generated invoices attached !&quot;);&#xA;    UserContext context = ContextHelper.getThreadUserContext();&#xA;    Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#xA;    /**&#xA;     * User modifyable values&#xA;     */&#xA;    String invoiceTypeId = &quot;IMPORT DEMMURAGE INVOICE&quot;;&#xA;    String currencyId = &quot;USD&quot;;&#xA;    String fromEmailId = &quot;rthandavarayan@zebra.com&quot;;&#xA;    String isInvoiceFinal = &quot;False&quot;;&#xA;&#xA;    // ------------ Do not change anything below  -------------------&#xA;    String action = &quot;DRAFT&quot;;&#xA;    String eventTypeId = &quot;STORAGE&quot;;&#xA;    List statusList = new ArrayList&lt;String&gt;();&#xA;    statusList.add(QUEUED);&#xA;    statusList.add(PARTIAL);&#xA;    String[] statuses = statusList.toArray(new String[statusList.size()]);&#xA;    IS_INVOICE_FINAL = isInvoiceFinal;&#xA;&#xA;    // Run a separte logic here to set CUE status as &quot;CANCELLED&quot; if the container is already delivered (End Date &lt;&gt; NULL) and it doesn't have&#xA;    // any guarantee record. It is assumed that container is deliverd in the free period time.&#xA;    // TODO: Yet to be coded.  &#xA;&#xA;    //For each &quot;STORAGE&quot; CUE with status in [DRAFT, QUEUED, PARTIAL] and (End Date &lt;&gt; NULL)&#xA;    List cues = getCueRecordHavingNonPaidGuarantees(eventTypeId, statuses);&#xA;&#xA;    if (cues.isEmpty()) {&#xA;      logInfo(&quot;No records matched for Groovy Plug-in: GenerateImportDemurrageInvoices&quot;);&#xA;      System.out.println(&quot;No records matched for Groovy Plug-in: GenerateImportDemurrageInvoices&quot;);&#xA;    } else {&#xA;      for (ChargeableUnitEvent cue: cues) {&#xA;        // Get Guarantees&#xA;        // Each CUE STORAGE record may have more than one Guaranteed record. Get the list of Guarantees for each CUE gkey.&#xA;        List guarantees = getNonVoidedGuaranteesForCUE(cue);&#xA;        String unitId = cue.getBexuEqId();&#xA;        // Get the line operator from CUE to be used as Contract Customer. Refer: ARGO-26415.&#xA;        String lineId = cue.getBexuLineOperatorId();&#xA;        ScopedBizUnit lineOperator = ScopedBizUnit.findScopedBizUnit(lineId, BizRoleEnum.LINEOP);&#xA;        // for each guarantee record generate an invoice.&#xA;        for (Guarantee guarantee: guarantees) {&#xA;          String gnteId = guarantee.getGnteGuaranteeId();&#xA;          Date startDate = guarantee.getGnteGuaranteeStartDay();&#xA;          Date paidThruDate = guarantee.getGnteGuaranteeEndDay();&#xA;          try {&#xA;            Element element = buildGetInvoiceByInvTypeIdForUnitElement(unitId, invoiceTypeId, action, guarantee.getGnteGuaranteeCustomer(), lineOperator,&#xA;                    currencyId, timeNow, gnteId, paidThruDate, startDate, guarantee.getGnteCustomerReferenceId());&#xA;            appendBillToAddress(element, guarantee);&#xA;            EdiInvoice ediInvoice = getInvoiceByInvTypeIdForUnit(element);&#xA;&#xA;            if (ediInvoice != null) {&#xA;              // Compose subject message as &quot;Import Demurrage Invoice for &quot; Guarantee.CUE.Unit ID &quot; and Guarantee &quot;Guarantee.Guarantee ID&quot;created.&quot;&#xA;              String subject = &quot; STOAGE Invoice Draft Id &quot; + ediInvoice.getDraftNumber() + &quot; for UNIT: &quot; + unitId + &quot; and Guarantee Id: &quot; +&#xA;                      gnteId + &quot; is attached.&quot;;&#xA;&#xA;              logInfo(&quot;Generated sucessfully: - &quot; + subject);&#xA;              System.out.println(&quot;Generated sucessfully: - &quot; + subject);&#xA;&#xA;              try {&#xA;                UnitStorageManager manager = (UnitStorageManager) Roastery.getBean(UnitStorageManager.BEAN_ID);&#xA;                String invoiceReportUrlWithType = manager.getInvoiceReportUrl(ediInvoice.getGkey());&#xA;&#xA;                try {&#xA;                  String fileName = &quot;StorgeInvoiceFor_&quot; + unitId + &quot;_&quot; + guarantee.getGnteGuaranteeId();&#xA;                  File reportTempFile = getFile(invoiceReportUrlWithType, fileName);&#xA;&#xA;                  String[] attachment = new String[1];&#xA;                  String attachmentPrefix = &quot;file:&quot;;&#xA;                  if (reportTempFile != null) {&#xA;                    attachment[0] = attachmentPrefix + reportTempFile.getAbsolutePath();&#xA;                  } else {&#xA;                    attachment[0] = &quot;&quot;;&#xA;                  }&#xA;&#xA;                  String emailToId = ediInvoice.getInvoiceAddress() != null ? ediInvoice.getInvoiceAddress().getEmailAddress() : null;&#xA;&#xA;                  String msgBody = &quot;Please find &quot; + subject;&#xA;&#xA;                  if (emailToId != null &amp;&amp; !StringUtils.isEmpty(emailToId)) {&#xA;                    try {&#xA;                      ESBClientHelper.sendEmailAttachments(context, FrameworkMessageQueues.EMAIL_QUEUE, emailToId, fromEmailId,&#xA;                              subject, msgBody, attachment);&#xA;&#xA;                      // Update the status and draft id for the invoiced guaranteed record.&#xA;                      guarantee.setGnteInvDraftNbr(ediInvoice.getDraftNumber());&#xA;                      guarantee.setGnteInvoiceStatus(INVOICED);&#xA;                      Roastery.getHibernateApi().saveOrUpdate(guarantee);&#xA;&#xA;                      logInfo(&quot;Groovy : GenerateImportDemurrageInvoices &quot; + subject + &quot;' &quot; + emailToId + &quot;' on &quot; + timeNow + &quot;.&quot;);&#xA;                      System.out.println(&quot;Groovy : GenerateImportDemurrageInvoices &quot; + subject + &quot;' &quot; + emailToId + &quot;' on &quot; + timeNow + &quot;.&quot;);&#xA;                    } catch (Exception e) {&#xA;                      LOGGER.error(e.getMessage());&#xA;                    }&#xA;                  } else {&#xA;                    // Log if no e-mail Id found in for guarantor&#xA;                    logWarn(subject + &quot;\n Details : &quot; + msgBody);&#xA;                    System.out.println(subject + &quot;\n Details : &quot; + msgBody);&#xA;                  }&#xA;                  // Add log entry: &quot;STORAGE event for &quot; CUE.Unit ID &quot; invoiced&quot;.&quot;&#xA;                  logInfo(&quot;Groovy : GenerateImportDemurrageInvoices: &quot; + eventTypeId + &quot; event for &quot; + unitId + &quot; invoiced&quot;);&#xA;                  System.out.println(&quot;Groovy : GenerateImportDemurrageInvoices: &quot; + eventTypeId + &quot; event for &quot; + unitId + &quot; invoiced&quot;);&#xA;&#xA;                } catch (Exception e) {&#xA;                  logWarn(&quot;Groovy : GenerateImportDemurrageInvoices: Invoice report preparation failed for Invoice Draft Nbr :&quot; +&#xA;                          ediInvoice.getDraftNumber() + &quot; due to : &quot; + e.toString());&#xA;                  System.out.println(&quot;Groovy : GenerateImportDemurrageInvoices: Invoice report preparation failed for Invoice Draft Nbr :&quot; +&#xA;                          ediInvoice.getDraftNumber() + &quot; due to : &quot; + e.toString());&#xA;                }&#xA;&#xA;              } catch (Exception e) {&#xA;                logWarn(&quot;Groovy : GenerateImportDemurrageInvoices: Invoice report creation failed for Draft Nbr :&quot; + ediInvoice.getDraftNumber() +&#xA;                        &quot; due to : &quot; + e.toString());&#xA;                System.out.println(&quot;Groovy : GenerateImportDemurrageInvoices: Invoice report creation failed for Draft Nbr :&quot; +&#xA;                        ediInvoice.getDraftNumber() + &quot; due to : &quot; + e.toString());&#xA;              }&#xA;&#xA;            }&#xA;          } catch (Exception e) {&#xA;            logWarn(&quot;Groovy : GenerateImportDemurrageInvoices: Invoice Generation failed for event :&quot; + eventTypeId + &quot; due to : &quot;&#xA;                    + e.toString());&#xA;            System.out.println(&quot;Groovy : GenerateImportDemurrageInvoices: Invoice Generation failed for event :&quot; + eventTypeId +&#xA;                    &quot; due to : &quot; + e.toString());&#xA;          }&#xA;        }&#xA;        // Having invoiced all the guarantees associated to STORAGE - CUE, update the CUE status as INVOICED&quot;.&#xA;        cue.setBexuStatus(INVOICED);&#xA;        Roastery.getHibernateApi().saveOrUpdate(cue);&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;  private static List getCueRecordHavingNonPaidGuarantees(String inEventTypeId, String[] inStatuses) {&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(ArgoExtractEntity.CHARGEABLE_UNIT_EVENT).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.BEXU_EVENT_TYPE, inEventTypeId)).&#xA;            addDqPredicate(PredicateFactory.in(ArgoExtractField.BEXU_STATUS, inStatuses)).&#xA;            addDqPredicate(PredicateFactory.isNotNull(ArgoExtractField.BEXU_EVENT_END_TIME));&#xA;&#xA;    DomainQuery gteSubQuery = QueryUtils.createDomainQuery(ArgoExtractEntity.GUARANTEE).addDqField(ArgoExtractField.GNTE_APPLIED_TO_PRIMARY_KEY).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.GNTE_APPLIED_TO_CLASS, BillingExtractEntityEnum.INV.getKey())).&#xA;            addDqPredicate(PredicateFactory.ne(ArgoExtractField.GNTE_GUARANTEE_TYPE, GuaranteeTypeEnum.PAID.getKey())).&#xA;            addDqPredicate(PredicateFactory.isNull(ArgoExtractField.GNTE_INVOICE_STATUS)).&#xA;            addDqPredicate(PredicateFactory.isNull(ArgoExtractField.GNTE_VOIDED_OR_EXPIRED_DATE));&#xA;&#xA;&#xA;    if (gteSubQuery != null) {&#xA;      dq.addDqPredicate(PredicateFactory.subQueryIn(gteSubQuery, ArgoExtractField.BEXU_GKEY));&#xA;    }&#xA;&#xA;    return (Roastery.getHibernateApi().findEntitiesByDomainQuery(dq));&#xA;  }&#xA;&#xA;  private static List getNonVoidedGuaranteesForCUE(ChargeableUnitEvent inCue) {&#xA;&#xA;    // Select all the non voided Guarantees excluding PAID types&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(ArgoExtractEntity.GUARANTEE).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.GNTE_APPLIED_TO_CLASS, BillingExtractEntityEnum.INV.getKey())).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.GNTE_APPLIED_TO_PRIMARY_KEY, inCue.getPrimaryKey())).&#xA;            addDqPredicate(PredicateFactory.ne(ArgoExtractField.GNTE_GUARANTEE_TYPE, GuaranteeTypeEnum.PAID.getKey())).&#xA;            addDqPredicate(PredicateFactory.isNull(ArgoExtractField.GNTE_VOIDED_OR_EXPIRED_DATE));&#xA;&#xA;    return (Roastery.getHibernateApi().findEntitiesByDomainQuery(dq));&#xA;  }&#xA;&#xA;  private Element buildGetInvoiceByInvTypeIdForUnitElement(String inUnitId, String invoiceTypeId, String inAction, ScopedBizUnit inPayee,&#xA;                                                           ScopedBizUnit inContractCustomer, String inCurrencyId, Date inContractEffectiveDate,&#xA;                                                           String inGnteId, Date inPaidThruDate, Date inStartDate, String inCustomerRefId) {&#xA;    //build the request xml&#xA;    Element rootElem = new Element(BillingWsApiConsts.BILLING_ROOT, XmlUtil.ARGO_NAMESPACE);&#xA;    Element elem = new Element(BillingWsApiConsts.GENERATE_INVOICE_REQUEST, XmlUtil.ARGO_NAMESPACE);&#xA;    rootElem.addContent(elem);&#xA;    addChildTextElement(BillingWsApiConsts.ACTION, inAction, elem);&#xA;    addChildTextElement(BillingWsApiConsts.INVOICE_TYPE_ID, invoiceTypeId, elem);&#xA;    addChildTextElement(BillingWsApiConsts.PAYEE_CUSTOMER_ID, inPayee.getBzuId(), elem);&#xA;    addChildTextElement(BillingWsApiConsts.PAYEE_CUSTOMER_BIZ_ROLE, inPayee.getBzuRole().getKey(), elem);&#xA;    String contractCustId = inContractCustomer != null ? inContractCustomer.getBzuId() : &quot;&quot;;&#xA;    addChildTextElement(BillingWsApiConsts.CONTRACT_CUSTOMER_ID, contractCustId, elem);&#xA;    addChildTextElement(BillingWsApiConsts.CONTRACT_CUSTOMER_BIZ_ROLE, inContractCustomer != null ? inContractCustomer.getBzuRole().getKey() : null, elem);&#xA;    addChildTextElement(BillingWsApiConsts.CURRENCY_ID, inCurrencyId, elem);&#xA;    //  Start ---------- SPECIAL childTextElement to process Guaranteed records for STORAGE and REEFER event&#xA;    //  Add another root element to indicate that it is initiated from groovy and the GUARANTEED records are to be invoiced.&#xA;    //  Otherwise N4 Billing skips the GURANTEED days.  Applicable for STORAGE and REEFER events of Guaranteed records.&#xA;    //  ********** DO NOT INCLUDE THIS ELEMENT WITHOUT KNOWING THE REASON ****************&#xA;    addChildTextElement(BillingWsApiConsts.IS_GUARANTEED_DAY_TOBE_INVOICED, &quot;True&quot;, elem);&#xA;    //  End ---------- SPECIAL childTextElement to process Guaranteed records for STORAGE and REEFER event&#xA;&#xA;    String effectiveDateStr = null;&#xA;    if (inContractEffectiveDate != null) {&#xA;      // in String XML_DATE_TIME_ZONE_FORMAT = &quot;yyyy-MM-dd'T'HH:mm:ss Z&quot;&#xA;      effectiveDateStr = BillingWsApiConsts.XML_DATE_TIME_ZONE_FORMAT.format(inContractEffectiveDate);&#xA;    }&#xA;    addChildTextElement(BillingWsApiConsts.CONTRACT_EFFECTIVE_DATE, effectiveDateStr, elem);&#xA;    addChildTextElement(BillingWsApiConsts.IS_INVOICE_FINAL, IS_INVOICE_FINAL, elem);&#xA;    addChildTextElement(BillingWsApiConsts.CUSTOMER_REFERENCE_ID, inCustomerRefId, elem);&#xA;    Element paramsElem = new Element(BillingWsApiConsts.INVOICE_PARAMETERS, XmlUtil.ARGO_NAMESPACE);&#xA;    Element paramElem = new Element(BillingWsApiConsts.INVOICE_PARAMETER, XmlUtil.ARGO_NAMESPACE);&#xA;&#xA;    // invoice parameters&#xA;    String paidThruDayStr = null;&#xA;    if (inPaidThruDate != null) {&#xA;      // in String XML_DATE_TIME_ZONE_FORMAT = &quot;yyyy-MM-dd'T'HH:mm:ss Z&quot;&#xA;      paidThruDayStr = BillingWsApiConsts.XML_DATE_TIME_ZONE_FORMAT.format(inPaidThruDate);&#xA;&#xA;    }&#xA;    addChildTextElement(BillingWsApiConsts.PAID_THRU_DAY, paidThruDayStr, paramElem);&#xA;    String startDayStr = null;&#xA;    if (inStartDate != null) {&#xA;      // in String XML_DATE_TIME_ZONE_FORMAT = &quot;yyyy-MM-dd'T'HH:mm:ss Z&quot;&#xA;      startDayStr = BillingWsApiConsts.XML_DATE_TIME_ZONE_FORMAT.format(inStartDate);&#xA;&#xA;    }&#xA;    addChildTextElement(BillingWsApiConsts.RULE_START_DAY, startDayStr, paramElem);&#xA;    addChildTextElement(BillingWsApiConsts.EQUIPMENT_ID, inUnitId, paramElem);&#xA;    paramsElem.addContent(paramElem);&#xA;    elem.addContent(paramsElem);&#xA;    return rootElem;&#xA;  }&#xA;&#xA;  private void addChildTextElement(String inElementName, String inElementText, Element inParentElement) {&#xA;    Element childElement = new Element(inElementName, XmlUtil.ARGO_NAMESPACE);&#xA;    Text childText = new Text(inElementText);&#xA;    childElement.addContent(childText);&#xA;    inParentElement.addContent(childElement);&#xA;  }&#xA;&#xA;  void appendBillToAddress(Element inRootElement, Guarantee inGuarantee) {&#xA;    Element element = inRootElement.getChild(BillingWsApiConsts.GENERATE_INVOICE_REQUEST, XmlUtil.ARGO_NAMESPACE);&#xA;&#xA;    Element billToPartyElement = new Element(BillingWsApiConsts.BILL_TO_PARTY, XmlUtil.ARGO_NAMESPACE);&#xA;    Element addressElement = new Element(BillingWsApiConsts.ADDRESS, XmlUtil.ARGO_NAMESPACE);&#xA;&#xA;    addChildTextElement(BillingWsApiConsts.CONTACT_NAME, inGuarantee.getGnteExternalContactName(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.ADDRESS_LINE_1, inGuarantee.getGnteExternalAddress1(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.ADDRESS_LINE_2, inGuarantee.getGnteExternalAddress2(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.ADDRESS_LINE_3, inGuarantee.getGnteExternalAddress3(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.CITY, inGuarantee.getGnteExternalCity(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.MAIL_CODE, inGuarantee.getGnteExternalMailCode(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.STATE, inGuarantee.getGnteExternalState() != null ? inGuarantee.getGnteExternalState().getStateCode() : null, addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.COUNTRY, inGuarantee.getGnteExternalCountry() != null ? inGuarantee.getGnteExternalCountry().getCntryCode() : null, addressElement);&#xA;    //todo: add telephone and fax details since they are not supported in billing invoices right now&#xA;    //    addChildTextElement(BillingWsApiConsts.TELEPHONE, inGuarantee.getGnteExternalTelephone(), addressElement);&#xA;    //    addChildTextElement(BillingWsApiConsts.FAX, inGuarantee.getGnteExternalFax(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.EMAIL_ADDRESS, inGuarantee.getGnteExternalEmailAddress(), addressElement);&#xA;    billToPartyElement.addContent(addressElement);&#xA;    element.addContent(billToPartyElement);&#xA;  }&#xA;&#xA;  public EdiInvoice getInvoiceByInvTypeIdForUnit(Element inElement) throws BizViolation {&#xA;&#xA;    try {&#xA;      ArgoServicePort port = getWsStub();&#xA;      ScopeCoordinateIdsWsType scopeCoordinates = getScopeCoordenatesForWs();&#xA;      GenericInvokeResponseWsType invokeResponseWsType = port.genericInvoke(scopeCoordinates, XmlUtil.toString(inElement, false));&#xA;      ResponseType response = invokeResponseWsType.getCommonResponse();&#xA;      QueryResultType[] queryResultTypes = response.getQueryResults();&#xA;      if (queryResultTypes == null || queryResultTypes.length != 1) {&#xA;        //todo: generic error&#xA;        if (response.getMessageCollector() != null &amp;&amp; response.getMessageCollector().getMessages(0) != null) {&#xA;          MessageType type = response.getMessageCollector().getMessages(0);&#xA;          String message = type.getMessage();&#xA;          throw BizFailure.create(&quot;Error from Billing Webservice - &quot; + message);&#xA;        } else {&#xA;          throw BizFailure.create(ArgoPropertyKeys.BILLING_WEBSERVICE_SERVICES_URL, null, null);&#xA;        }&#xA;      }&#xA;      String responseString = queryResultTypes[0].getResult();&#xA;&#xA;      BillingTransactionsDocument billingTransactionsDocument = BillingTransactionsDocument.Factory.parse(responseString);&#xA;      BillingTransactionsDocument.BillingTransactions transactions = billingTransactionsDocument.getBillingTransactions();&#xA;      List&lt;BillingTransactionDocument.BillingTransaction&gt; transactionList = transactions.getBillingTransactionList();&#xA;      //todo: error if more than 1 transaction returned&#xA;      BillingTransactionDocument.BillingTransaction billingTransaction = transactionList.get(0);&#xA;      List&lt;EdiInvoice&gt; list = billingTransaction.getInvoiceList();&#xA;      if (list.isEmpty()) {&#xA;        throw BizFailure.create(InventoryPropertyKeys.NO_INVOICE_RETRIEVED, null, null);&#xA;      } else if (list.size() &gt; 1) {&#xA;        throw BizFailure.create(InventoryPropertyKeys.MULTIPLE_INVOICES_RETURNED, null, list.size());&#xA;      }&#xA;      EdiInvoice ediInvoice = list.get(0);&#xA;&#xA;      return ediInvoice;&#xA;    } catch (ServiceException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_ERROR, e, null);&#xA;    } catch (java.rmi.RemoteException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_ERROR, e, null);&#xA;    } catch (IOException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_XML_ERROR, e, null);&#xA;    } catch (org.apache.xmlbeans.XmlException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_XML_ERROR, e, null);&#xA;    }&#xA;  }&#xA;&#xA;  private ArgoServicePort getWsStub() throws ServiceException {&#xA;    ArgoServiceLocator locator = new ArgoServiceLocator();&#xA;    ArgoServicePort port = locator.getArgoServicePort(ConfigurationProperties.getBillingServiceURL());&#xA;    Stub stub = (Stub) port;&#xA;    stub._setProperty(Stub.USERNAME_PROPERTY, ConfigurationProperties.getBillingWebServiceUserId());&#xA;    stub._setProperty(Stub.PASSWORD_PROPERTY, ConfigurationProperties.getBillingWebServicePassWord());&#xA;    return port;&#xA;  }&#xA;&#xA;  private ScopeCoordinateIdsWsType getScopeCoordenatesForWs() {&#xA;    //build the scope coordinates for the web service based on the user context;&#xA;    ScopeCoordinateIdsWsType scopeCoordinates = new ScopeCoordinateIdsWsType();&#xA;    UserContext uContext = ContextHelper.getThreadUserContext();&#xA;    scopeCoordinates.setOperatorId(ContextHelper.getThreadOperator() != null ? ContextHelper.getThreadOperator().getId() : null);&#xA;    scopeCoordinates.setComplexId(ContextHelper.getThreadComplex() != null ? ContextHelper.getThreadComplex().getCpxId() : null);&#xA;    scopeCoordinates.setFacilityId(ContextHelper.getThreadFacility() != null ? ContextHelper.getThreadFacility().getFcyId() : null);&#xA;    scopeCoordinates.setYardId(ContextHelper.getThreadYard() != null ? ContextHelper.getThreadYard().getYrdId() : null);&#xA;    return scopeCoordinates;&#xA;  }&#xA;&#xA;  private File getFile(String inDownloadUrl, String inFileName) {&#xA;    String[] fileAttributes = inDownloadUrl.split(&quot;:::&quot;);&#xA;    String invoiceReportUrl = fileAttributes[0];&#xA;    String mimeType = fileAttributes[1];&#xA;&#xA;    if (invoiceReportUrl != null) {&#xA;&#xA;      URL url = new URL(invoiceReportUrl);&#xA;      URLConnection connection = url.openConnection();&#xA;      connection.connect();&#xA;      InputStream urlInputStream = connection.getInputStream();&#xA;&#xA;      String classPath = FileUtil.getClassPath();&#xA;      File classPathDirectory = new File(classPath);&#xA;      File file = new File(inFileName + mimeType, classPathDirectory);&#xA;      file.deleteOnExit();&#xA;&#xA;      BufferedInputStream buffInStream = new BufferedInputStream(urlInputStream);&#xA;      BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(file));&#xA;      try {&#xA;        copyStream(buffInStream, outputStream);&#xA;      } catch (IOException ioe) {&#xA;        LOGGER.error(&quot;Groovy : GenerateImportDemurrageInvoices: Downloading Invoice failed due to :&quot; + ioe.toString());&#xA;        System.out.println(&quot;Groovy : GenerateImportDemurrageInvoices: Downloading Invoice failed due to :&quot; + ioe.toString());&#xA;      } finally {&#xA;        buffInStream.close();&#xA;        outputStream.close();&#xA;      }&#xA;      return file;&#xA;    }&#xA;  }&#xA;&#xA;  private void copyStream(InputStream inInputStream, OutputStream inOutputStream) throws IOException {&#xA;    byte[] buffer = new byte[256];&#xA;    while (true) {&#xA;      int bytesRead = inInputStream.read(buffer);&#xA;      if (bytesRead == -1) {&#xA;        break;&#xA;      }&#xA;      inOutputStream.write(buffer, 0, bytesRead);&#xA;    }&#xA;  }&#xA;&#xA;  private static final String QUEUED = &quot;QUEUED&quot;;&#xA;  private static final String PARTIAL = &quot;PARTIAL&quot;;&#xA;  private static final String INVOICED = &quot;INVOICED&quot;;&#xA;  private static String IS_INVOICE_FINAL;&#xA;  private static final Logger LOGGER = Logger.getLogger(GenerateImportDemurrageInvoices.class);&#xA;}&#xA;" />
<digital-asset id="GenerateWaivedStorageInvoices" short-description="GenerateWaivedStorageInvoices" is-pre-deployed="Y" groovy-code="import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import org.apache.log4j.Logger&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.argo.ArgoExtractEntity&#xA;import com.navis.argo.ArgoExtractField&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.argo.business.atoms.GuaranteeTypeEnum&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.argo.business.extract.Guarantee&#xA;import com.navis.argo.business.extract.ChargeableUnitEvent&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.framework.util.ValueObject&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.framework.portal.Ordering&#xA;import com.navis.argo.business.atoms.GuaranteeOverrideTypeEnum&#xA;import org.jdom.Element&#xA;import com.navis.argo.EdiInvoice&#xA;import com.navis.inventory.business.api.UnitStorageManager&#xA;import com.navis.framework.esb.client.ESBClientHelper&#xA;import com.navis.framework.esb.server.FrameworkMessageQueues&#xA;import com.navis.argo.portal.BillingWsApiConsts&#xA;import com.navis.argo.util.XmlUtil&#xA;import org.jdom.Text&#xA;import org.apache.commons.lang.StringUtils&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.www.services.argoservice.ArgoServicePort&#xA;import com.navis.argo.webservice.types.v1_0.ScopeCoordinateIdsWsType&#xA;import com.navis.argo.webservice.types.v1_0.GenericInvokeResponseWsType&#xA;import com.navis.argo.webservice.types.v1_0.ResponseType&#xA;import com.navis.argo.webservice.types.v1_0.QueryResultType&#xA;import com.navis.argo.webservice.types.v1_0.MessageType&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.argo.ArgoPropertyKeys&#xA;import com.navis.argo.BillingTransactionsDocument&#xA;import com.navis.argo.BillingTransactionDocument&#xA;import javax.xml.rpc.ServiceException&#xA;import com.navis.www.services.argoservice.ArgoServiceLocator&#xA;import javax.xml.rpc.Stub&#xA;import com.navis.inventory.InventoryPropertyKeys&#xA;import com.navis.argo.business.extract.billing.ConfigurationProperties&#xA;import com.navis.argo.util.FileUtil&#xA;&#xA;&#xA;/**&#xA; * This is a Pre-Deployable Groovy Plug-in which generates Invoices for STORAGE_WAIVER events.&#xA; * @author &lt;a href=&quot;mailto:tramakrishnan@navis.com&quot;&gt; tramakrishnan&lt;/a&gt; Dec 02, 2009 Time: 2:36:01 PM&#xA; */&#xA;public class GenerateWaivedStorageInvoices extends GroovyApi {&#xA;&#xA;  public void execute(Map parameters) {&#xA;&#xA;    LOGGER.info(&quot;Groovy : GenerateWaivedStorageInvoices starts to send email notification for STORAGE_WAIVER events with generated invoices attached !&quot;);&#xA;    System.out.println(&quot;Groovy : GenerateWaivedStorageInvoices starts to send email notification for STORAGE_WAIVER events with generated invoices attached !&quot;);&#xA;    UserContext context = ContextHelper.getThreadUserContext();&#xA;    Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#xA;    List statusList = new ArrayList&lt;String&gt;();&#xA;    statusList.add(DRAFT);&#xA;    statusList.add(QUEUED);&#xA;    statusList.add(PARTIAL);&#xA;    String[] statuses = statusList.toArray(new String[statusList.size()]);&#xA;&#xA;    String eventTypeId = &quot;STORAGE&quot;;&#xA;    String eventTypeIdToCreate = &quot;STORAGE_WAIVER&quot;;&#xA;    String eventTypeDesc = &quot;Event for STORAGE Waiver&quot;;&#xA;    String invoiceTypeId = &quot;Waived Storage Invoice&quot;;&#xA;    String currencyId = &quot;UZD&quot;;&#xA;    String action = &quot;DRAFT&quot;;&#xA;&#xA;    //For each &quot;STORAGE&quot; CUE with status in [DRAFT, QUEUED, PARTIAL] and (End Date &lt;&gt; NULL)&#xA;    List guarantees = getNonVoidedGntesForFixedPriceWaiversFor(eventTypeId, statuses);&#xA;    if (guarantees.isEmpty()) {&#xA;      logInfo(&quot;No records matched for Groovy Plug-in: GenerateWaivedStorageInvoices&quot;);&#xA;      System.out.println(&quot;No records matched for Groovy Plug-in: GenerateWaivedStorageInvoices&quot;);&#xA;    } else {&#xA;      for (Guarantee guarantee: guarantees) {&#xA;        // for each guarantee create &quot;STORAGE_WAIVER&quot; CUE event&#xA;        ChargeableUnitEvent storageGnteEvent = createStorageWaiverEvent(guarantee, eventTypeIdToCreate);&#xA;        String unitId = storageGnteEvent.getBexuEqId();&#xA;        String gnteId = guarantee.getGnteGuaranteeId();&#xA;        Date paidThruDate = storageGnteEvent.getBexuEventEndTime();&#xA;&#xA;        try {&#xA;          Element element = buildGetInvoiceByInvTypeIdForUnitElement(unitId, invoiceTypeId, action, guarantee.getGnteGuaranteeCustomer(), null,&#xA;                  currencyId, timeNow, gnteId, paidThruDate, guarantee.getGnteCustomerReferenceId());&#xA;          appendBillToAddress(element, guarantee);&#xA;          appendFlexFieldDetails(element, guarantee);&#xA;          EdiInvoice ediInvoice = getInvoiceByInvTypeIdForUnit(element);&#xA;&#xA;          if (ediInvoice != null) {&#xA;            // Compose subject message as &quot;Import Demurrage Invoice for &quot; Guarantee.CUE.Unit ID &quot; and Guarantee &quot;Guarantee.Guarantee ID&quot;created.&quot;&#xA;            String subject = eventTypeIdToCreate + &quot; Invoice for UNIT:&quot; + unitId + &quot; and Guarantee:&quot; + gnteId + &quot;.&quot;;&#xA;&#xA;            logInfo(subject + &quot; generated sucessfully !&quot;);&#xA;            System.out.println(subject + &quot; generated sucessfully !&quot;);&#xA;&#xA;            try {&#xA;              UnitStorageManager manager = (UnitStorageManager) Roastery.getBean(UnitStorageManager.BEAN_ID);&#xA;              String invoiceReportUrlWithType = manager.getInvoiceReportUrl(ediInvoice.getGkey());&#xA;&#xA;              try {&#xA;                String fileName = eventTypeIdToCreate + &quot;InvoiceFor&quot; + unitId;&#xA;                File reportTempFile = getFile(invoiceReportUrlWithType, fileName);&#xA;&#xA;                String[] attachment = new String[1];&#xA;                String attachmentPrefix = &quot;file:&quot;;&#xA;                if (reportTempFile != null) {&#xA;                  attachment[0] = attachmentPrefix + reportTempFile.getAbsolutePath();&#xA;                } else {&#xA;                  attachment[0] = &quot;&quot;;&#xA;                }&#xA;&#xA;                String emailToId = ediInvoice.getInvoiceAddress() != null ? ediInvoice.getInvoiceAddress().getEmailAddress() : null;&#xA;                String msgBody = &quot;Please find &quot; + subject + &quot; attached.&quot;;&#xA;&#xA;                if (emailToId != null &amp;&amp; !StringUtils.isEmpty(emailToId)) {&#xA;                  try {&#xA;                    ESBClientHelper.sendEmailAttachments(context, FrameworkMessageQueues.EMAIL_QUEUE, emailToId, &quot;rthandavarayan@zebra.com&quot;, subject, msgBody, attachment);&#xA;                    logInfo(&quot;Groovy : GenerateWaivedStorageInvoices &quot; + subject + &quot;' &quot; + emailToId + &quot;' on &quot; + timeNow + &quot;.&quot;);&#xA;                    System.out.println(&quot;Groovy : GenerateWaivedStorageInvoices &quot; + subject + &quot;' &quot; + emailToId + &quot;' on &quot; + timeNow + &quot;.&quot;);&#xA;                  } catch (Exception e) {&#xA;                    LOGGER.error(e.getMessage());&#xA;                  }&#xA;                } else {&#xA;                  // Log if no e-mail Id found in for guarantor&#xA;                  logWarn(subject + &quot;\n Details : &quot; + msgBody);&#xA;                  System.out.println(subject + &quot;\n Details : &quot; + msgBody);&#xA;                }&#xA;&#xA;                // Cancel the actual event &quot;STORAGE&quot;&#xA;                ChargeableUnitEvent actualStorageEvent = ChargeableUnitEvent.getCUErecordForGuarantee(guarantee);&#xA;                actualStorageEvent.setBexuStatus(&quot;CANCELLED&quot;);&#xA;                Roastery.getHibernateApi().saveOrUpdate(actualStorageEvent);&#xA;&#xA;                // Add log entry: &quot;STORAGE event for &quot; CUE.Unit ID &quot; invoiced and cancelled&quot;.&quot;&#xA;                logInfo(&quot;Groovy : GenerateWaivedStorageInvoices: &quot; + eventTypeId + &quot; event for &quot; + unitId + &quot; invoiced and cancelled&quot;);&#xA;                System.out.println(&quot;Groovy : GenerateWaivedStorageInvoices: &quot; + eventTypeId + &quot; event for &quot; + unitId + &quot; invoiced and cancelled&quot;);&#xA;&#xA;              } catch (Exception e) {&#xA;                logWarn(&quot;Groovy : GenerateWaivedStorageInvoices: Invoice report preparation failed for Invoice Draft Nbr :&quot; + ediInvoice.getDraftNumber() + &quot; due to : &quot; + e.toString());&#xA;                System.out.println(&quot;Groovy : GenerateWaivedStorageInvoices: Invoice report preparation failed for Invoice Draft Nbr :&quot; + ediInvoice.getDraftNumber() + &quot; due to : &quot; + e.toString());&#xA;              }&#xA;&#xA;            } catch (Exception e) {&#xA;              logWarn(&quot;Groovy : GenerateWaivedStorageInvoices: Invoice report creation failed for Draft Nbr :&quot; + ediInvoice.getDraftNumber() + &quot; due to : &quot; + e.toString());&#xA;              System.out.println(&quot;Groovy : GenerateWaivedStorageInvoices: Invoice report creation failed for Draft Nbr :&quot; + ediInvoice.getDraftNumber() + &quot; due to : &quot; + e.toString());&#xA;            }&#xA;&#xA;          }&#xA;          // Update the status and draft id for the invoiced guaranteed record.&#xA;          guarantee.setGnteInvDraftNbr(ediInvoice.getDraftNumber());&#xA;          guarantee.setGnteInvoiceStatus(INVOICED);&#xA;          Roastery.getHibernateApi().saveOrUpdate(guarantee);&#xA;        } catch (Exception e) {&#xA;          logWarn(&quot;Groovy : GenerateWaivedStorageInvoices: Invoice Generation failed for event :&quot; + storageGnteEvent.toString() + &quot; due to : &quot; + e.toString());&#xA;          System.out.println(&quot;Groovy : GenerateWaivedStorageInvoices: Invoice Generation failed for event :&quot; + storageGnteEvent.toString() + &quot; due to : &quot; + e.toString());&#xA;        }&#xA;      }&#xA;    }&#xA;&#xA;  }&#xA;&#xA;&#xA;  /**&#xA;   * Returns a list of non-voided waivers whose chargeable unit event's Satus in [DRAFT, QUEUED, PARTIAL] and EndDate!= NULL and GuaranteeThruDay!=NULL&#xA;   */&#xA;  private static List getNonVoidedGntesForFixedPriceWaiversFor(String inEventTypeId, String[] inStatuses) {&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(ArgoExtractEntity.GUARANTEE).&#xA;            addDqPredicate(PredicateFactory.isNull(ArgoExtractField.GNTE_VOIDED_OR_EXPIRED_DATE)).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.GNTE_GUARANTEE_TYPE, GuaranteeTypeEnum.OAC)).&#xA;            addDqOrdering(Ordering.asc(ArgoExtractField.GNTE_GUARANTEE_START_DAY));&#xA;&#xA;    DomainQuery waiverQuery = QueryUtils.createDomainQuery(ArgoExtractEntity.GUARANTEE).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.GNTE_OVERRIDE_VALUE_TYPE, GuaranteeOverrideTypeEnum.FIXED_PRICE)).&#xA;            addDqPredicate(PredicateFactory.isNull(ArgoExtractField.GNTE_VOIDED_OR_EXPIRED_DATE)).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.GNTE_GUARANTEE_TYPE, GuaranteeTypeEnum.WAIVER));&#xA;&#xA;    DomainQuery subQuery = QueryUtils.createDomainQuery(ArgoExtractEntity.CHARGEABLE_UNIT_EVENT).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.BEXU_EVENT_TYPE, inEventTypeId)).&#xA;            addDqPredicate(PredicateFactory.in(ArgoExtractField.BEXU_STATUS, inStatuses)).&#xA;            addDqPredicate(PredicateFactory.isNotNull(ArgoExtractField.BEXU_EVENT_END_TIME)).&#xA;            addDqPredicate(PredicateFactory.isNotNull(ArgoExtractField.BEXU_GUARANTEE_THRU_DAY));&#xA;&#xA;    if (subQuery != null) {&#xA;      dq.addDqPredicate(PredicateFactory.subQueryIn(subQuery, ArgoExtractField.GNTE_APPLIED_TO_PRIMARY_KEY));&#xA;    }&#xA;&#xA;    if (waiverQuery != null) {&#xA;      dq.addDqPredicate(PredicateFactory.subQueryIn(waiverQuery, ArgoExtractField.GNTE_RELATED_GUARANTEE));&#xA;    }&#xA;&#xA;    return (Roastery.getHibernateApi().findEntitiesByDomainQuery(dq));&#xA;  }&#xA;&#xA;  private static ChargeableUnitEvent createStorageWaiverEvent(Guarantee inGuarantee, String inEventTypeToCreate) {&#xA;    String status = &quot;GUARANTEED&quot;;&#xA;    ScopedBizUnit gnteCustomer = inGuarantee.getGnteGuaranteeCustomer();&#xA;    String payeeId = gnteCustomer != null ? inGuarantee.getGnteGuaranteeCustomer().getBzuId() : null;&#xA;    Date startTime = inGuarantee.getGnteGuaranteeStartDay();&#xA;    Date endTime = inGuarantee.getGnteGuaranteeEndDay();&#xA;    String unitId = inGuarantee.getGnteAppliedToNaturalKey();&#xA;    ChargeableUnitEvent gnteCue = ChargeableUnitEvent.getCUErecordForGuarantee(inGuarantee);&#xA;    // create new Event STORAGE_WAIVER&#xA;    ChargeableUnitEvent cue = ChargeableUnitEvent.create(gnteCue.getBexuUfvGkey(), ContextHelper.getThreadOperator());&#xA;    // copy the previous values to the newly created event&#xA;    ValueObject vao = gnteCue.getValueObject();&#xA;    FieldChanges changes = new FieldChanges(vao);&#xA;    changes.removeFieldChange(ArgoExtractField.BEXU_GKEY);&#xA;    cue.applyFieldChanges(changes);&#xA;    Roastery.getHibernateApi().saveOrUpdate(cue);&#xA;    //  update values from Guarantee&#xA;    cue.setBexuEventType(inEventTypeToCreate);&#xA;    cue.setBexuStatus(status);&#xA;    cue.setBexuGuaranteeGkey(inGuarantee.getGnteGkey());&#xA;    cue.setBexuGuaranteeId(inGuarantee.getGnteGuaranteeId());&#xA;    cue.setBexuEqId(unitId);&#xA;    cue.setBexuPayeeCustomerId(payeeId);&#xA;    cue.setBexuGuaranteeParty(payeeId);&#xA;    cue.setBexuQuantity(inGuarantee.getGnteQuantity());&#xA;    cue.setBexuEventStartTime(startTime);&#xA;    Date cueEndTime = gnteCue.getBexuEventEndTime();&#xA;    cue.setBexuEventEndTime(cueEndTime.before(endTime) ? cueEndTime : endTime);&#xA;&#xA;    //  update related guarantee i.e.Waiver details&#xA;    Guarantee waiver = inGuarantee.getGnteRelatedGuarantee();&#xA;    //Is Value Override = TRUE&#xA;    cue.setBexuIsOverrideValue(Boolean.TRUE);&#xA;    //Override Type = Waiver.Waiver Type&#xA;    GuaranteeOverrideTypeEnum waiverType = waiver.getGnteOverrideValueType();&#xA;    cue.setBexuOverrideValueType(waiverType.getKey());&#xA;    //Override Value = Waiver.Guarantee Amount&#xA;    Double waiverAmount = waiver.getGnteGuaranteeAmount();&#xA;    cue.setBexuOverrideValue(waiverAmount);&#xA;&#xA;    Roastery.getHibernateApi().saveOrUpdate(cue);&#xA;    return cue;&#xA;  }&#xA;&#xA;&#xA;  private Element buildGetInvoiceByInvTypeIdForUnitElement(String inUnitId, String invoiceTypeId, String inAction, ScopedBizUnit inPayee,&#xA;                                                           ScopedBizUnit inContractCustomer, String inCurrencyId, Date inContractEffectiveDate,&#xA;                                                           String inGnteId, Date inPaidThruDate, String inGnteCustomerRefId) {&#xA;    //build the request xml&#xA;    Element rootElem = new Element(BillingWsApiConsts.BILLING_ROOT, XmlUtil.ARGO_NAMESPACE);&#xA;    Element elem = new Element(BillingWsApiConsts.GENERATE_INVOICE_REQUEST, XmlUtil.ARGO_NAMESPACE);&#xA;    rootElem.addContent(elem);&#xA;    addChildTextElement(BillingWsApiConsts.ACTION, inAction, elem);&#xA;    addChildTextElement(BillingWsApiConsts.INVOICE_TYPE_ID, invoiceTypeId, elem);&#xA;    addChildTextElement(BillingWsApiConsts.PAYEE_CUSTOMER_ID, inPayee.getBzuId(), elem);&#xA;    addChildTextElement(BillingWsApiConsts.PAYEE_CUSTOMER_BIZ_ROLE, inPayee.getBzuRole().getKey(), elem);&#xA;    String contractCustId = inContractCustomer != null ? inContractCustomer.getBzuId() : &quot;&quot;;&#xA;    addChildTextElement(BillingWsApiConsts.CONTRACT_CUSTOMER_ID, contractCustId, elem);&#xA;    addChildTextElement(BillingWsApiConsts.CONTRACT_CUSTOMER_BIZ_ROLE, inContractCustomer != null ? inContractCustomer.getBzuRole().getKey() : null, elem);&#xA;    addChildTextElement(BillingWsApiConsts.CURRENCY_ID, inCurrencyId, elem);&#xA;    addChildTextElement(BillingWsApiConsts.CUSTOMER_REFERENCE_ID, inGnteCustomerRefId, elem);&#xA;    String effectiveDateStr = null;&#xA;    if (inContractEffectiveDate != null) {&#xA;      effectiveDateStr = BillingWsApiConsts.DATE_FORMAT.format(inContractEffectiveDate);&#xA;    }&#xA;    addChildTextElement(BillingWsApiConsts.CONTRACT_EFFECTIVE_DATE, effectiveDateStr, elem);&#xA;    addChildTextElement(BillingWsApiConsts.IS_INVOICE_FINAL, &quot;False&quot;, elem);&#xA;    Element paramsElem = new Element(BillingWsApiConsts.INVOICE_PARAMETERS, XmlUtil.ARGO_NAMESPACE);&#xA;    Element paramElem = new Element(BillingWsApiConsts.INVOICE_PARAMETER, XmlUtil.ARGO_NAMESPACE);&#xA;&#xA;    // invoice parameters&#xA;    addChildTextElement(BillingWsApiConsts.GUARANTEE_ID, inGnteId, paramElem);&#xA;&#xA;    String paidThruDayStr = null;&#xA;    if (inPaidThruDate != null) {&#xA;      paidThruDayStr = BillingWsApiConsts.DATE_FORMAT.format(inPaidThruDate);&#xA;&#xA;    }&#xA;    addChildTextElement(BillingWsApiConsts.PAID_THRU_DAY, paidThruDayStr, paramElem);&#xA;    addChildTextElement(BillingWsApiConsts.EQUIPMENT_ID, inUnitId, paramElem);&#xA;    paramsElem.addContent(paramElem);&#xA;    elem.addContent(paramsElem);&#xA;    return rootElem;&#xA;  }&#xA;&#xA;  private void addChildTextElement(String inElementName, String inElementText, Element inParentElement) {&#xA;    Element childElement = new Element(inElementName, XmlUtil.ARGO_NAMESPACE);&#xA;    Text childText = new Text(inElementText);&#xA;    childElement.addContent(childText);&#xA;    inParentElement.addContent(childElement);&#xA;  }&#xA;&#xA;  void appendBillToAddress(Element inRootElement, Guarantee inGuarantee) {&#xA;    Element element = inRootElement.getChild(BillingWsApiConsts.GENERATE_INVOICE_REQUEST, XmlUtil.ARGO_NAMESPACE);&#xA;&#xA;    Element billToPartyElement = new Element(BillingWsApiConsts.BILL_TO_PARTY, XmlUtil.ARGO_NAMESPACE);&#xA;    Element addressElement = new Element(BillingWsApiConsts.ADDRESS, XmlUtil.ARGO_NAMESPACE);&#xA;&#xA;    addChildTextElement(BillingWsApiConsts.CONTACT_NAME, inGuarantee.getGnteExternalContactName(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.ADDRESS_LINE_1, inGuarantee.getGnteExternalAddress1(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.ADDRESS_LINE_2, inGuarantee.getGnteExternalAddress2(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.ADDRESS_LINE_3, inGuarantee.getGnteExternalAddress3(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.CITY, inGuarantee.getGnteExternalCity(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.MAIL_CODE, inGuarantee.getGnteExternalMailCode(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.STATE, inGuarantee.getGnteExternalState() != null ? inGuarantee.getGnteExternalState().getStateCode() : null, addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.COUNTRY, inGuarantee.getGnteExternalCountry() != null ? inGuarantee.getGnteExternalCountry().getCntryCode() : null, addressElement);&#xA;    //todo: add telephone and fax details since they are not supported in billing invoices right now&#xA;    //    addChildTextElement(BillingWsApiConsts.TELEPHONE, inGuarantee.getGnteExternalTelephone(), addressElement);&#xA;    //    addChildTextElement(BillingWsApiConsts.FAX, inGuarantee.getGnteExternalFax(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.EMAIL_ADDRESS, inGuarantee.getGnteExternalEmailAddress(), addressElement);&#xA;    billToPartyElement.addContent(addressElement);&#xA;    element.addContent(billToPartyElement);&#xA;  }&#xA;&#xA;&#xA;  public EdiInvoice getInvoiceByInvTypeIdForUnit(Element inElement) throws BizViolation {&#xA;&#xA;    try {&#xA;      ArgoServicePort port = getWsStub();&#xA;      ScopeCoordinateIdsWsType scopeCoordinates = getScopeCoordenatesForWs();&#xA;      GenericInvokeResponseWsType invokeResponseWsType = port.genericInvoke(scopeCoordinates, XmlUtil.toString(inElement, false));&#xA;      ResponseType response = invokeResponseWsType.getCommonResponse();&#xA;      QueryResultType[] queryResultTypes = response.getQueryResults();&#xA;      if (queryResultTypes == null || queryResultTypes.length != 1) {&#xA;        //todo: generic error&#xA;        if (response.getMessageCollector() != null &amp;&amp; response.getMessageCollector().getMessages(0) != null) {&#xA;          MessageType type = response.getMessageCollector().getMessages(0);&#xA;          String message = type.getMessage();&#xA;          throw BizFailure.create(&quot;Error from Billing Webservice - &quot; + message);&#xA;        } else {&#xA;          throw BizFailure.create(ArgoPropertyKeys.BILLING_WEBSERVICE_SERVICES_URL, null, null);&#xA;        }&#xA;      }&#xA;      String responseString = queryResultTypes[0].getResult();&#xA;&#xA;      BillingTransactionsDocument billingTransactionsDocument = BillingTransactionsDocument.Factory.parse(responseString);&#xA;      BillingTransactionsDocument.BillingTransactions transactions = billingTransactionsDocument.getBillingTransactions();&#xA;      List&lt;BillingTransactionDocument.BillingTransaction&gt; transactionList = transactions.getBillingTransactionList();&#xA;      //todo: error if more than 1 transaction returned&#xA;      BillingTransactionDocument.BillingTransaction billingTransaction = transactionList.get(0);&#xA;      List&lt;EdiInvoice&gt; list = billingTransaction.getInvoiceList();&#xA;      if (list.isEmpty()) {&#xA;        throw BizFailure.create(InventoryPropertyKeys.NO_INVOICE_RETRIEVED, null, null);&#xA;      } else if (list.size() &gt; 1) {&#xA;        throw BizFailure.create(InventoryPropertyKeys.MULTIPLE_INVOICES_RETURNED, null, list.size());&#xA;      }&#xA;      EdiInvoice ediInvoice = list.get(0);&#xA;&#xA;      return ediInvoice;&#xA;    } catch (ServiceException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_ERROR, e, null);&#xA;    } catch (java.rmi.RemoteException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_ERROR, e, null);&#xA;    } catch (IOException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_XML_ERROR, e, null);&#xA;    } catch (org.apache.xmlbeans.XmlException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_XML_ERROR, e, null);&#xA;    }&#xA;  }&#xA;&#xA;  private ArgoServicePort getWsStub() throws ServiceException {&#xA;    ArgoServiceLocator locator = new ArgoServiceLocator();&#xA;    ArgoServicePort port = locator.getArgoServicePort(ConfigurationProperties.getBillingServiceURL());&#xA;    Stub stub = (Stub) port;&#xA;    stub._setProperty(Stub.USERNAME_PROPERTY, ConfigurationProperties.getBillingWebServiceUserId());&#xA;    stub._setProperty(Stub.PASSWORD_PROPERTY, ConfigurationProperties.getBillingWebServicePassWord());&#xA;    return port;&#xA;  }&#xA;&#xA;  private ScopeCoordinateIdsWsType getScopeCoordenatesForWs() {&#xA;    //build the scope coordinates for the web service based on the user context;&#xA;    ScopeCoordinateIdsWsType scopeCoordinates = new ScopeCoordinateIdsWsType();&#xA;    UserContext uContext = ContextHelper.getThreadUserContext();&#xA;    scopeCoordinates.setOperatorId(ContextHelper.getThreadOperator() != null ? ContextHelper.getThreadOperator().getId() : null);&#xA;    scopeCoordinates.setComplexId(ContextHelper.getThreadComplex() != null ? ContextHelper.getThreadComplex().getCpxId() : null);&#xA;    scopeCoordinates.setFacilityId(ContextHelper.getThreadFacility() != null ? ContextHelper.getThreadFacility().getFcyId() : null);&#xA;    scopeCoordinates.setYardId(ContextHelper.getThreadYard() != null ? ContextHelper.getThreadYard().getYrdId() : null);&#xA;    return scopeCoordinates;&#xA;  }&#xA;&#xA;  private File getFile(String inDownloadUrl, String inFileName) {&#xA;    String[] fileAttributes = inDownloadUrl.split(&quot;:::&quot;);&#xA;    String invoiceReportUrl = fileAttributes[0];&#xA;    String mimeType = fileAttributes[1];&#xA;&#xA;    if (invoiceReportUrl != null) {&#xA;&#xA;      URL url = new URL(invoiceReportUrl);&#xA;      URLConnection connection = url.openConnection();&#xA;      connection.connect();&#xA;      InputStream urlInputStream = connection.getInputStream();&#xA;&#xA;      String classPath = FileUtil.getClassPath();&#xA;      File classPathDirectory = new File(classPath);&#xA;      File file = new File(inFileName + mimeType, classPathDirectory);&#xA;      file.deleteOnExit();&#xA;&#xA;      BufferedInputStream buffInStream = new BufferedInputStream(urlInputStream);&#xA;      BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(file));&#xA;      try {&#xA;        copyStream(buffInStream, outputStream);&#xA;      } catch (IOException ioe) {&#xA;        LOGGER.error(&quot;Groovy : GenerateImportDemurrageInvoices: Downloading Invoice failed due to :&quot; + ioe.toString());&#xA;        System.out.println(&quot;Groovy : GenerateImportDemurrageInvoices: Downloading Invoice failed due to :&quot; + ioe.toString());&#xA;      } finally {&#xA;        buffInStream.close();&#xA;        outputStream.close();&#xA;      }&#xA;      return file;&#xA;    }&#xA;  }&#xA;&#xA;  private void copyStream(InputStream inInputStream, OutputStream inOutputStream) throws IOException {&#xA;    byte[] buffer = new byte[256];&#xA;    while (true) {&#xA;      int bytesRead = inInputStream.read(buffer);&#xA;      if (bytesRead == -1) {&#xA;        break;&#xA;      }&#xA;      inOutputStream.write(buffer, 0, bytesRead);&#xA;    }&#xA;  }&#xA;  &#xA;  void appendFlexFieldDetails(Element inRootElement, Guarantee inGuarantee) {&#xA;&#xA;    Element element = inRootElement.getChild(BillingWsApiConsts.GENERATE_INVOICE_REQUEST, XmlUtil.ARGO_NAMESPACE);&#xA;&#xA;    Element flexElement = new Element(BillingWsApiConsts.INVOICE_FLEX_FIELDS, XmlUtil.ARGO_NAMESPACE);&#xA;    String gnteId =   inGuarantee.getGnteGuaranteeId();&#xA;    String gnteType = inGuarantee.getGnteGuaranteeType().getKey();&#xA;    String paymentType = inGuarantee.getGntePaymentType().getKey()&#xA;    addChildTextElement(BillingWsApiConsts.FLEX_STRING09, gnteId + &quot;;&quot; +  gnteType + &quot;;&quot; + paymentType, flexElement);&#xA;    element.addContent(flexElement);&#xA;  }&#xA;   private static final String INVOICED = &quot;INVOICED&quot;;&#xA;&#xA;  private static final String DRAFT = &quot;DRAFT&quot;;&#xA;  private static final String QUEUED = &quot;QUEUED&quot;;&#xA;  private static final String PARTIAL = &quot;PARTIAL&quot;;&#xA;  private static final Logger LOGGER = Logger.getLogger(GenerateWaivedStorageInvoices.class);&#xA;}&#xA;" />
<digital-asset id="ExtendedReeferMonitorTimesGrv" short-description="ExtendedReeferMonitorTimesGrv" is-pre-deployed="Y" groovy-code="import com.navis.argo.ArgoPropertyKeys&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.framework.util.BizWarning&#xA;import com.navis.framework.util.DateUtil&#xA;import com.navis.framework.util.LogUtils&#xA;import com.navis.framework.util.message.MessageCollectorUtils&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.ReeferRqmnts&#xA;import com.navis.inventory.business.units.Unit&#xA;import org.apache.commons.lang.StringUtils&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; * This is a Pre-Deployed Groovy Plug-in which updates the units with extended times specified in this groovy.&#xA; * @author &lt;a href=&quot;mail to:rkasindula@navis.com&quot;&gt; Ramanjaneyulu&lt;/a&gt; Dec 12, 2012&#xA; */&#xA;public class ExtendedReeferMonitorTimesGrv extends GroovyApi {&#xA;&#xA;  private UnitFinder _unitFinder = (UnitFinder) Roastery.getBean(UnitFinder.BEAN_ID);&#xA;  private TimeZone _tz = ContextHelper.getThreadUserTimezone();&#xA;  //Please add or edit below default extended times.Use &quot;HH:MM&quot; format to add new times&#xA;  private List&lt;String&gt; _extendedTimes = new ArrayList&lt;String&gt;();&#xA;&#xA;  {&#xA;    _extendedTimes.add(&quot;01:00&quot;);&#xA;    _extendedTimes.add(&quot;05:00&quot;);&#xA;    _extendedTimes.add(&quot;09:00&quot;);&#xA;    _extendedTimes.add(&quot;13:00&quot;);&#xA;    _extendedTimes.add(&quot;17:00&quot;);&#xA;    _extendedTimes.add(&quot;21:00&quot;);&#xA;  }&#xA;&#xA;  public void execute(Map parameters) {&#xA;&#xA;    LogUtils.setLogLevel(ExtendedReeferMonitorTimesGrv.class, Level.INFO);&#xA;    //validate extended Times&#xA;    validateExtendedTimes(_extendedTimes);&#xA;    //return if there are any fatal errors&#xA;    if (MessageCollectorUtils.getMessageCollector().hasError()) {&#xA;      return;&#xA;    }&#xA;&#xA;    //gets the date object for extended times&#xA;    Date[] extendDates = getExtendedDateForTimes(_extendedTimes);&#xA;&#xA;    /* Find Reefer units in yard which need extended monitor times&#xA;     * Note:  If enhanced selection criteria is desired (for example&#xA;     * all reefers in yard with a certain commodity code) then the result&#xA;     * from unitFinder would need further filtering before propagating&#xA;     * new set of applicable monitor times.&#xA;     */&#xA;    Serializable[] unitGkeys = _unitFinder.findRfrUnitsInYardNeedingExtMonitors();&#xA;    for (Serializable unitGkey : unitGkeys) {&#xA;&#xA;      Unit unit = Unit.hydrate(unitGkey);&#xA;      //if groovy extended times are below 5 then update as is to unit&#xA;      if (extendDates.length &lt; 5) {&#xA;        setReeferMonitorTimes(unit, Arrays.asList(extendDates));&#xA;      } else {&#xA;        //gets unit's reefer last recording time&#xA;        Date lastMonitorTime = unit.getUnitLastReeferRecordDate();&#xA;        //if last temp recording time  is null,  then get Reefer connected time.&#xA;        if (lastMonitorTime == null) {&#xA;          lastMonitorTime = unit.getUnitPowerRqstTime();&#xA;        }&#xA;        //if both last temp recording time and reefer connected time are null then lastMonitorTime = current time&#xA;        if (lastMonitorTime == null) {&#xA;          lastMonitorTime = Calendar.getInstance(_tz).getTime();&#xA;        }&#xA;        //determine matching four times from extended dates for the last record time&#xA;        List&lt;Date&gt; monitorDatesToUpdate = calculateMonitorDatesForLastRecordTime(lastMonitorTime, Arrays.asList(extendDates));&#xA;        //sets matching 4 monitor times to unit&#xA;        setReeferMonitorTimes(unit, monitorDatesToUpdate);&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;  private List&lt;Date&gt; calculateMonitorDatesForLastRecordTime(Date inLastRecordTime, List&lt;Date&gt; inExtMonitorDates) {&#xA;&#xA;    List&lt;Date&gt; monitorDates = new ArrayList&lt;Date&gt;(4);&#xA;&#xA;    // If inLastRecordTime is not today then return 4 extended monitor times&#xA;    Calendar cal = Calendar.getInstance(_tz);&#xA;    cal.setTime(inLastRecordTime);&#xA;    if (!DateUtil.isSameDay(inLastRecordTime, Calendar.getInstance(_tz).getTime(), _tz)) {&#xA;      return inExtMonitorDates.subList(0, 4);&#xA;    }&#xA;&#xA;    //If inLastRecordTime is on today then calculate the matching index from extended dates&#xA;    int monitoredIndex = getMonitoredIndex(inLastRecordTime, inExtMonitorDates);&#xA;    int monitorDatesSize = inExtMonitorDates.size();&#xA;&#xA;    //IfMonitoredIndex == inExtMonitorDates.size() or inExtMonitorDates.size()-1 it is meant that there are no monitor&#xA;    // times left out so create first monitor times for tomorrow&#xA;    if (monitoredIndex == monitorDatesSize) {&#xA;      return inExtMonitorDates.subList(0, 4);&#xA;    }&#xA;&#xA;    int j = 0;&#xA;    for (int i = monitoredIndex; i &lt; monitorDatesSize &amp;&amp; i &lt;= monitoredIndex + 4; i++) {&#xA;      monitorDates.add(inExtMonitorDates.get(i));&#xA;      j++;&#xA;    }&#xA;&#xA;&#xA;    for (int k = 0; k + j &lt; 4; k++) {&#xA;      monitorDates.add(inExtMonitorDates.get(k));&#xA;    }&#xA;&#xA;    return monitorDates;&#xA;  }&#xA;&#xA;  private int getMonitoredIndex(Date inLastRecordTime, List&lt;Date&gt; inExtMonitorDates) {&#xA;&#xA;    int extMonitorTimesSize = inExtMonitorDates.size();&#xA;    long lastRecordTimeSecs = inLastRecordTime.getTime();&#xA;    for (int i = 0; i &lt; extMonitorTimesSize; i++) {&#xA;      long extMonitorTimeInSecs = inExtMonitorDates.get(i).getTime();&#xA;      if (lastRecordTimeSecs &lt; extMonitorTimeInSecs) {&#xA;        return i;&#xA;      }&#xA;    }&#xA;    return extMonitorTimesSize;&#xA;  }&#xA;&#xA;  private void setReeferMonitorTimes(Unit inUnit, List&lt;Date&gt; inMonitorDates) {&#xA;    if (inUnit.getUnitGoods() == null) {&#xA;      MessageCollectorUtils.getMessageCollector().appendMessage(BizWarning&#xA;              .create(ArgoPropertyKeys.INFO, null,&#xA;              &quot;Propagate can't be done. Either unit goods for  Unit[&quot; + inUnit.getUnitId() + &quot;] is null&quot;));&#xA;      LOGGER.warn(&quot;Propagate can't be done. Either unit goods  for Unit[&quot; + inUnit.getUnitId() + &quot;] is null&quot;);&#xA;      return;&#xA;    }&#xA;    inMonitorDates.sort();&#xA;    GoodsBase unitGoods = inUnit.getUnitGoods();&#xA;    ReeferRqmnts reeferRqmnts = unitGoods.ensureGdsReeferRqmnts();&#xA;    updateReeferMonitorTimes(reeferRqmnts, inMonitorDates);&#xA;    LOGGER.info(&quot;Unit[&quot; + inUnit.getUnitId() + &quot;] is updated with extended monitor times[&quot; + inMonitorDates + &quot;] &quot; +&#xA;            &quot;from ExtendedReeferMonitorTimesGrv Groovy&quot;);&#xA;&#xA;  }&#xA;&#xA;  private void updateReeferMonitorTimes(ReeferRqmnts inReeferRqmnts, List&lt;Date&gt; inDates) {&#xA;    Iterator&lt;Date&gt; iterator = inDates.iterator();&#xA;    if (iterator.hasNext()) {&#xA;      inReeferRqmnts.setRfreqTimeMonitor1(iterator.next());&#xA;    } else {&#xA;      inReeferRqmnts.setRfreqTimeMonitor1(null);&#xA;    }&#xA;&#xA;    if (iterator.hasNext()) {&#xA;      inReeferRqmnts.setRfreqTimeMonitor2(iterator.next());&#xA;    } else {&#xA;      inReeferRqmnts.setRfreqTimeMonitor2(null);&#xA;    }&#xA;&#xA;    if (iterator.hasNext()) {&#xA;      inReeferRqmnts.setRfreqTimeMonitor3(iterator.next());&#xA;    } else {&#xA;      inReeferRqmnts.setRfreqTimeMonitor3(null);&#xA;    }&#xA;    if (iterator.hasNext()) {&#xA;      inReeferRqmnts.setRfreqTimeMonitor4(iterator.next());&#xA;    } else {&#xA;      inReeferRqmnts.setRfreqTimeMonitor4(null);&#xA;    }&#xA;  }&#xA;&#xA;&#xA;  private Date[] getExtendedDateForTimes(List&lt;String&gt; inExtTimes) {&#xA;&#xA;    final int extTimesLength = inExtTimes.size();&#xA;&#xA;    Date[] extDates = new Date[extTimesLength];&#xA;    TimeZone tz = ContextHelper.getThreadUserTimezone();&#xA;&#xA;    for (int i = 0; i &lt; extTimesLength; i++) {&#xA;      //exTimes are already validated so no parsing required again&#xA;      String[] exTimeStr = StringUtils.split(inExtTimes.get(i), &quot;:&quot;);&#xA;      extDates[i] = getCurrentDateWithHoursAndTime(tz, Integer.parseInt(exTimeStr[0]), Integer.parseInt(exTimeStr[1]));&#xA;    }&#xA;&#xA;    return extDates;&#xA;  }&#xA;&#xA;  //this method validates if given extended times are &quot;HH:MM&quot; format&#xA;  private void validateExtendedTimes(List&lt;String&gt; inExtendTimes) {&#xA;&#xA;    if (inExtendTimes == null || inExtendTimes.isEmpty() || inExtendTimes.get(0) == null) {&#xA;      MessageCollectorUtils.getMessageCollector().appendMessage(BizFailure&#xA;              .create(ArgoPropertyKeys.INFO, null, &quot;Propagate can't be done since there are no valid extended Times given in groovy&quot;));&#xA;      LOGGER.error(&quot;Propagate can't be done since there are no valid extended Times given in groovy&quot;);&#xA;    }&#xA;&#xA;    for (String extTime : inExtendTimes) {&#xA;      StringTokenizer st = new StringTokenizer(extTime, &quot;:&quot;);&#xA;      int tokenCount = st.countTokens();&#xA;      if (tokenCount != 2) {&#xA;        MessageCollectorUtils.getMessageCollector().appendMessage(BizFailure&#xA;                .create(ArgoPropertyKeys.INFO, null,&#xA;                &quot;Propagate can't be done. Time entered [&quot; + extTime + &quot;] is invalid.Please enter HH:MM format&quot;));&#xA;        LOGGER.error(&quot;Propagate can't be done. Time entered [&quot; + extTime + &quot;] is invalid.Please enter HH:MM format&quot;);&#xA;        break;&#xA;      }&#xA;      String hoursSt = st.nextToken();&#xA;      int hours = Integer.parseInt(hoursSt);&#xA;      if (hours &lt; 0 || hours &gt; 23) {&#xA;        MessageCollectorUtils.getMessageCollector().appendMessage(BizFailure&#xA;                .create(ArgoPropertyKeys.INFO, null,&#xA;                &quot;Propagate can't be done. Time entered [&quot; + extTime + &quot;] is invalid.Maximum allowed hours are 23&quot;));&#xA;        LOGGER.error(&quot;Propagate can't be done. Time entered [&quot; + extTime + &quot;] is invalid.Maximum allowed hours are 23&quot;);&#xA;        break;&#xA;      }&#xA;&#xA;      String minutesSt = st.nextToken();&#xA;      int minutes = Integer.parseInt(minutesSt);&#xA;      if (minutes &lt; 0 || minutes &gt; 59) {&#xA;        MessageCollectorUtils.getMessageCollector().appendMessage(BizFailure&#xA;                .create(ArgoPropertyKeys.INFO, null,&#xA;                &quot;Propagate can't be done. Time entered [&quot; + extTime + &quot;] is invalid.Maximum allowed Minutes are 59&quot;));&#xA;        LOGGER.error(&quot;Propagate can't be done. Time entered [&quot; + extTime + &quot;] is invalid.Maximum allowed Minutes are 59&quot;);&#xA;        break;&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;  private Date getCurrentDateWithHoursAndTime(TimeZone inTz, int inHours, int inMinutes) {&#xA;&#xA;    //get current date Calendar&#xA;    Calendar currentDateCal = Calendar.getInstance(inTz);&#xA;&#xA;    //set hours and minutes from time widget to current cal&#xA;    currentDateCal.set(Calendar.HOUR, inHours);&#xA;    currentDateCal.set(Calendar.MINUTE, inMinutes);&#xA;    currentDateCal.set(Calendar.AM_PM, Calendar.AM);&#xA;&#xA;    return currentDateCal.getTime();&#xA;  }&#xA;&#xA;  //sets the Extended times&#xA;  //This setter is required for Junit cases. Please don't delete this.&#xA;  public void setExtendedTimes(List&lt;String&gt; inExtendTimes) {&#xA;    _extendedTimes = inExtendTimes;&#xA;  }&#xA;&#xA;  private static final Logger LOGGER = Logger.getLogger(ExtendedReeferMonitorTimesGrv.class);&#xA;}&#xA;" />
<digital-asset id="GvyRecordBillableEventForCESTrucker" short-description="GvyRecordBillableEventForCESTrucker" is-pre-deployed="Y" groovy-code="import org.apache.log4j.Logger;&#xA;import org.apache.log4j.Level&#xA;&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.services.business.rules.EventType&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.argo.business.api.Serviceable&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.argo.business.atoms.EventEnum&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.argo.business.atoms.DrayStatusEnum&#xA;import com.navis.services.business.api.EventManager&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.argo.TruckingCompany&#xA;&#xA;/**&#xA; * BILL-920 This is a Pre-Deployable Groovy Plug-in which records an event if the Gate transaction's trucking company&#xA; * is an ExamSiteCarrier.&#xA; * ARGO-25669 modified this groovy to cover the below scenarios,&#xA; *&#xA; * CASE1: This is executed during gate transaction. If the tran type = DeliverExport, if unit is assigned with a trucking company and&#xA; *  the truckingcompany of unit is a CES designated one - then record the billable event if the event does not already exist for that unit&#xA; *&#xA; * CASE2: While recording the event UNIT_TRUCKER_ASSIGNED, if the unit category is EXPORT, if it is assigned to a trucking company which&#xA; *  is a CES designated trucking company - then record the billable event if the event does not already exist for that unit&#xA; *&#xA; * CASE3: While recording the event UNIT_REROUTE, if the unit category is EXPORT and if the unit's dray status is Dray out and back -&#xA; *  then record the billable event if the event does not already exist for that unit&#xA; *&#xA; * @author &lt;a href=&quot;mailto:mkamalakannan@zebra.com&quot;&gt; mkamalakannan&lt;/a&gt; Apr 14, 2010 Time: 10:36:01 AM&#xA; */&#xA;public class GvyRecordBillableEventForCESTrucker {&#xA;&#xA;  // This is a customizable eventId. The customer can modify the billableEventId.&#xA;  String billableEventId = &quot;EXPORT_EXAM_REQUIRED&quot;;&#xA;&#xA;  public void execute(Object inDao) {&#xA;    Level previousLevel = LOGGER.getLevel();&#xA;    LOGGER.setLevel(Level.INFO);&#xA;    LOGGER.info(&quot;Start Groovy Execution: GvyRecordBillableEventForCESTrucker&quot;);&#xA;&#xA;    // CASE1: This is executed during gate transaction. If the tran type = DeliverExport, if unit is assigned with a trucking company and&#xA;    //  the truckingcompany of unit is a CES designated one - then record the billable event if it does not already exist for that unit&#xA;    if (inDao.getTran() != null &amp;&amp; com.navis.road.business.atoms.TranSubTypeEnum.DE.equals(inDao.getTran().getTranSubType())) {&#xA;      Unit unit = inDao.getTran().getTranUnit();&#xA;      TruckingCompany trkCo = inDao.getTran().getTranTruckingCompany();&#xA;&#xA;      if (unit != null &amp;&amp; UnitCategoryEnum.EXPORT.equals(unit.getUnitCategory()) &amp;&amp; trkCo != null &amp;&amp; trkCo.equals(unit.getUnitRtgTruckingCompany())) {&#xA;        // event is recorded only if there is no history of it&#xA;        Boolean eventRecorded = isEventAlreadyRecorded(unit, billableEventId);&#xA;&#xA;        if (eventRecorded != null &amp;&amp; !eventRecorded &amp;&amp; inDao.getTran().getTranTruckingCompany().getTrkcIsExamSiteCarrier()) {&#xA;          postEvent(billableEventId, unit, unit.getUnitId());&#xA;        }&#xA;      }&#xA;    }&#xA;    LOGGER.info(&quot;End Groovy Execution: GvyRecordBillableEventForCESTrucker&quot;);&#xA;    LOGGER.setLevel(previousLevel);&#xA;  }&#xA;&#xA;  public void execute(GroovyEvent inEvent, Object inApi) {&#xA;    println(&quot;Start Groovy Execution: GvyRecordBillableEventForCESTrucker&quot;);&#xA;    Level previousLevel = LOGGER.getLevel();&#xA;    LOGGER.setLevel(Level.INFO);&#xA;    LOGGER.info(&quot;Start Groovy Execution: GvyRecordBillableEventForCESTrucker &quot;);&#xA;&#xA;    Unit unit = inEvent.getEntity();&#xA;    if(!UnitCategoryEnum.EXPORT.equals(unit.getUnitCategory())) {&#xA;      LOGGER.info(&quot;End Groovy Execution: GvyRecordBillableEventForCESTrucker&quot;);&#xA;      LOGGER.setLevel(previousLevel);&#xA;      return;&#xA;    }&#xA;&#xA;    String eventTypeId = inEvent.getEvent().getEvntEventType().getEvnttypeId();&#xA;    // event is recorded only if there is no history of it&#xA;    Boolean eventRecorded = isEventAlreadyRecorded(unit, billableEventId);&#xA;    if(eventRecorded) {&#xA;      LOGGER.info(&quot;GvyRecordBillableEventForCESTrucker: Event &quot;+ billableEventId + &quot; already recorded for the unit &quot; + unit.getUnitId());&#xA;      LOGGER.info(&quot;End Groovy Execution: GvyRecordBillableEventForCESTrucker&quot;);&#xA;      LOGGER.setLevel(previousLevel);&#xA;      return;&#xA;    }&#xA;&#xA;    if(EventEnum.UNIT_TRUCKER_ASSIGNED.equals(EventEnum.getEnum(eventTypeId))) {&#xA;      // CASE2: While recording the event UNIT_TRUCKER_ASSIGNED, if the unit category is EXPORT, if it is assigned to a trucking company which&#xA;      //  is a CES designated trucking company - then record the billable event if it does not already exist for that unit&#xA;&#xA;      if (unit != null) {&#xA;        TruckingCompany trkCo = null;&#xA;        ScopedBizUnit trkCoSbu = unit.getUnitRtgTruckingCompany();&#xA;        if (trkCoSbu != null &amp;&amp; BizRoleEnum.HAULIER.equals(trkCoSbu.getBzuRole())) {&#xA;            trkCo = (TruckingCompany) HibernateApi.getInstance().&#xA;                                                                downcast(trkCoSbu, com.navis.road.business.model.TruckingCompany.class);&#xA;        }&#xA;        if(trkCo != null &amp;&amp; trkCo.getTrkcIsExamSiteCarrier()) {&#xA;           postEvent(billableEventId, unit, unit.getUnitId());&#xA;        }&#xA;      }&#xA;    } else if(EventEnum.UNIT_REROUTE.equals(EventEnum.getEnum(eventTypeId))) {&#xA;       // CASE3: While recording the event UNIT_REROUTE, if the unit category is EXPORT and if the unit's dray status is Dray out and back -&#xA;       //  then record the billable event if it does not already exist for that unit&#xA;       if(unit != null &amp;&amp; DrayStatusEnum.OFFSITE.equals(unit.getUnitDrayStatus())) {  // check for dray out and back&#xA;           postEvent(billableEventId, unit, unit.getUnitId());&#xA;       }&#xA;    }&#xA;&#xA;    LOGGER.info(&quot;End Groovy Execution: GvyRecordBillableEventForCESTrucker&quot;);&#xA;    LOGGER.setLevel(previousLevel);&#xA;  }&#xA;&#xA;  private void postEvent(String inEventId, Serviceable inServiceable, String inUnitId) {&#xA;    ServicesManager sm = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;    EventType eventType = EventType.findEventType(inEventId);&#xA;    if (eventType == null) {&#xA;      LOGGER.error(&quot;GvyRecordBillableEventForCESTrucker postNewEvent: Unknown EventType in script: &quot; + inEventId);&#xA;      return;&#xA;    }&#xA;    try {&#xA;      sm.recordEvent(eventType, null, null, null, inServiceable);&#xA;      LOGGER.info(&quot;GvyRecordBillableEventForCESTrucker : Event &quot; + billableEventId + &quot; recorded for Unit &quot;+ inUnitId);&#xA;    } catch (BizViolation bv) {&#xA;      LOGGER.error(&quot;GvyRecordBillableEventForCESTrucker postEvent: failed with = &quot; + bv.getLocalizedMessage());&#xA;    }&#xA;  }&#xA;&#xA;  private boolean isEventAlreadyRecorded(Unit inUnit, String inEventId) {&#xA;    EventType eventType = EventType.findEventType(inEventId);&#xA;    if (eventType == null) {&#xA;      LOGGER.error(&quot;GvyRecordBillableEventForCESTrucker: Unknown Event type &quot; + inEventId);&#xA;      return null;&#xA;    }&#xA;    //Used hasEventTypeBeenApplied method which uses faster method to query for an event&#xA;    EventManager em = (EventManager) Roastery.getBean(EventManager.BEAN_ID);&#xA;    return em.hasEventTypeBeenApplied(eventType, inUnit);&#xA;  }&#xA;&#xA;  private static final Logger LOGGER = Logger.getLogger(GvyRecordBillableEventForCESTrucker.class);&#xA;}&#xA;" />
<digital-asset id="GenerateImportShipSideExamInvoices" short-description="GenerateImportShipSideExamInvoices" is-pre-deployed="Y" groovy-code="import com.navis.argo.ArgoExtractEntity&#xA;import com.navis.argo.ArgoExtractField&#xA;import com.navis.argo.ArgoPropertyKeys&#xA;import com.navis.argo.BillingTransactionDocument&#xA;import com.navis.argo.BillingTransactionDocument.BillingTransaction&#xA;import com.navis.argo.BillingTransactionsDocument&#xA;import com.navis.argo.BillingTransactionsDocument.BillingTransactions&#xA;import com.navis.argo.BillingTransactionsDocument.Factory&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.EdiInvoice&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.atoms.BillingExtractEntityEnum&#xA;import com.navis.argo.business.extract.ChargeableUnitEvent&#xA;import com.navis.argo.business.extract.Guarantee&#xA;import com.navis.argo.business.extract.billing.ConfigurationProperties&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.argo.portal.BillingWsApiConsts&#xA;import com.navis.argo.util.FileUtil&#xA;import com.navis.argo.util.XmlUtil&#xA;import com.navis.argo.webservice.types.v1_0.GenericInvokeResponseWsType&#xA;import com.navis.argo.webservice.types.v1_0.MessageType&#xA;import com.navis.argo.webservice.types.v1_0.QueryResultType&#xA;import com.navis.argo.webservice.types.v1_0.ResponseType&#xA;import com.navis.argo.webservice.types.v1_0.ScopeCoordinateIdsWsType&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.esb.client.ESBClientHelper&#xA;import com.navis.framework.esb.server.FrameworkMessageQueues&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.inventory.InventoryPropertyKeys&#xA;import com.navis.inventory.business.api.UnitStorageManager&#xA;import com.navis.www.services.argoservice.ArgoServiceLocator&#xA;import com.navis.www.services.argoservice.ArgoServicePort&#xA;import java.rmi.RemoteException&#xA;import javax.xml.rpc.ServiceException&#xA;import javax.xml.rpc.Stub&#xA;import org.apache.commons.lang.StringUtils&#xA;import org.apache.xmlbeans.XmlException&#xA;import org.jdom.Document&#xA;import org.jdom.Element&#xA;import org.jdom.Text&#xA;import com.navis.argo.business.atoms.GuaranteeTypeEnum&#xA;&#xA;public class GenerateImportShipSideExamInvoices extends GroovyApi {&#xA;&#xA;  public void execute(Map parameters) {&#xA;&#xA;    logInfo(&quot;Groovy : GenerateShipsideInvoices starts to send email notification for SHIPSIDE EXAM Inspection events with generated invoices attached !&quot;);&#xA;    System.out.println(&quot;Groovy : GenerateShipsideInvoices starts to send email notification for SHIPSIDE EXAM events with generated invoices attached !&quot;);&#xA;&#xA;    UserContext context = ContextHelper.getThreadUserContext();&#xA;    Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#xA;    String eventType = &quot;SHIPSIDE EXAM&quot;;&#xA;    String unitId = &quot;&quot;;&#xA;    String status = GUARANTEED;&#xA;    String ufvFlexDateFeildId1 = ArgoExtractField.BEXU_FLEX_DATE01.getFieldId();&#xA;    String ufvFlexDateFeildId2 = ArgoExtractField.BEXU_FLEX_DATE02.getFieldId();&#xA;    String invoiceTypeID = &quot;SHIPSIDE EXAM&quot;;&#xA;    String fcyId = &quot;&quot;;&#xA;    String effectiveDateType = &quot;Use Tariff Effective on performed date&quot;;&#xA;    Date effDate = null;&#xA;    String payeeCustomerId = null;&#xA;    String contractCustomerId = null;&#xA;    String currencyId = &quot;USD&quot;;&#xA;    boolean detailedTracing = false;&#xA;    String guaranteeId = null;&#xA;&#xA;&#xA;    // get the chargeable unit events with eventType = SHIPSIDE EXAM and status = GUARANTEED&#xA;    List unitEvents = getCUEsFor(eventType, status);&#xA;&#xA;    System.out.println(&quot;Groovy : Found Vacis List&quot;  );&#xA;&#xA;    if (unitEvents.isEmpty()) {&#xA;      println(&quot;Groovy : MaherGenerateShipsideInvoices : No chargeable events exists!&quot;)&#xA;      return;&#xA;    }&#xA;&#xA;    for (ChargeableUnitEvent event: unitEvents) {&#xA;      // get the equipment/unit id from the event&#xA;      unitId = event.getBexuEqId();&#xA;&#xA;      Guarantee guarantee = getGuarantee(event);&#xA;      if (guarantee != null) {&#xA;        try {&#xA;          Element element = buildGetInvoiceByInvTypeIdForUnitElement(invoiceTypeID, guarantee.getGnteGuaranteeCustomer(), null,&#xA;                  currencyId, null, guarantee, event);&#xA;          appendBillToAddress(element, guarantee);&#xA;          appendFlexFieldDetails(element, guarantee);&#xA;          EdiInvoice ediInvoice = getInvoiceByInvTypeIdForUnit(element);&#xA;          if (ediInvoice != null) {&#xA;            // Compose subject message&#xA;            String subject = eventType + &quot; Invoice for UNIT:&quot; + unitId;&#xA;&#xA;            logInfo(subject + &quot; generated sucessfully !&quot;);&#xA;            System.out.println(subject + &quot; generated sucessfully !&quot;);&#xA;&#xA;            try {&#xA;              UnitStorageManager manager = (UnitStorageManager) Roastery.getBean(UnitStorageManager.BEAN_ID);&#xA;              String invoiceReportUrlWithType = manager.getInvoiceReportUrl(ediInvoice.getGkey());&#xA;&#xA;              try {&#xA;                String fileName = eventType + &quot;InvoiceFor&quot; + unitId;&#xA;                File reportTempFile = getFile(invoiceReportUrlWithType, fileName);&#xA;&#xA;                String[] attachment = new String[1];&#xA;                String attachmentPrefix = &quot;file:&quot;;&#xA;                if (reportTempFile != null) {&#xA;                  attachment[0] = attachmentPrefix + reportTempFile.getAbsolutePath();&#xA;                } else {&#xA;                  attachment[0] = &quot;&quot;;&#xA;                }&#xA;                System.out.println(&quot;Groovy : Before getting email Address&quot;);&#xA;                String emailToId = ediInvoice.getInvoiceAddress() != null ? ediInvoice.getInvoiceAddress().getEmailAddress() : null;&#xA;                String msgBody = &quot;Please find &quot; + subject + &quot; attached.&quot;;&#xA;&#xA;                if (emailToId != null &amp;&amp; !StringUtils.isEmpty(emailToId)) {&#xA;                  try {&#xA;                    ESBClientHelper.sendEmailAttachments(context, FrameworkMessageQueues.EMAIL_QUEUE, emailToId, &quot;rthandavarayan@zebra.com&quot;, subject, msgBody, attachment);&#xA;                    logInfo(&quot;Groovy : GenerateSHIPSIDEInvoices &quot; + subject + &quot;' &quot; + emailToId + &quot;' on &quot; + timeNow + &quot;.&quot;);&#xA;                    System.out.println(&quot;Groovy : GenerateSHIPSIDEInvoices &quot; + subject + &quot;' &quot; + emailToId + &quot;' on &quot; + timeNow + &quot;.&quot;);&#xA;                  } catch (Exception e) {&#xA;                    LOGGER.error(e.getMessage());&#xA;                  }&#xA;                } else {&#xA;                  // Log if no e-mail Id found in for guarantor&#xA;                  logWarn(subject + &quot;\n Details : &quot; + msgBody);&#xA;                  System.out.println(subject + &quot;\n Details : &quot; + msgBody);&#xA;                }&#xA;              } catch (Exception e) {&#xA;                logWarn(&quot;Groovy : GenerateSHIPSIDEInvoices: Invoice report preparation failed for Invoice Draft Nbr :&quot; + ediInvoice.getDraftNumber() + &quot; due to : &quot; + e.toString());&#xA;                System.out.println(&quot;Groovy : GenerateSHIPSIDEInvoices: Invoice report preparation failed for Invoice Draft Nbr :&quot; + ediInvoice.getDraftNumber() + &quot; due to : &quot; + e.toString());&#xA;              }&#xA;&#xA;            } catch (Exception e) {&#xA;              logWarn(&quot;Groovy : GenerateSHIPSIDEInvoices: Invoice report creation failed for Draft Nbr :&quot; + ediInvoice.getDraftNumber() + &quot; due to : &quot; + e.toString());&#xA;              System.out.println(&quot;Groovy : GenerateSHIPSIDEInvoices: Invoice report creation failed for Draft Nbr :&quot; + ediInvoice.getDraftNumber() + &quot; due to : &quot; + e.toString());&#xA;            }&#xA;&#xA;          }&#xA;          // Update the status and draft id for the invoiced guaranteed record.&#xA;          guarantee.setGnteInvDraftNbr(ediInvoice.getDraftNumber());&#xA;          guarantee.setGnteInvoiceStatus(INVOICED);&#xA;          Roastery.getHibernateApi().saveOrUpdate(guarantee);&#xA;        } catch (Exception e) {&#xA;          logWarn(&quot;Groovy : GenerateSHIPSIDEInvoices: Invoice Generation failed for event :&quot; + event.toString() + &quot; due to : &quot; + e.toString());&#xA;          System.out.println(&quot;Groovy : GenerateSHIPSIDEInvoices: Invoice Generation failed for event :&quot; + event.toString() + &quot; due to : &quot; + e.toString());&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;  private File getFile(String inDownloadUrl, String inFileName) {&#xA;    String[] fileAttributes = inDownloadUrl.split(&quot;:::&quot;);&#xA;    String invoiceReportUrl = fileAttributes[0];&#xA;    String mimeType = fileAttributes[1];&#xA;&#xA;    if (invoiceReportUrl != null) {&#xA;&#xA;      URL url = new URL(invoiceReportUrl);&#xA;      URLConnection connection = url.openConnection();&#xA;      connection.connect();&#xA;      InputStream urlInputStream = connection.getInputStream();&#xA;&#xA;      String classPath = FileUtil.getClassPath();&#xA;      File classPathDirectory = new File(classPath);&#xA;      File file = new File(inFileName + mimeType, classPathDirectory);&#xA;      file.deleteOnExit();&#xA;&#xA;      BufferedInputStream buffInStream = new BufferedInputStream(urlInputStream);&#xA;      BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(file));&#xA;&#xA;      copyStream(buffInStream, outputStream);&#xA;&#xA;      buffInStream.close();&#xA;      outputStream.close();&#xA;&#xA;      return file;&#xA;    }&#xA;  }&#xA;&#xA;  private void copyStream(InputStream inInputStream, OutputStream inOutputStream) throws IOException {&#xA;    byte[] buffer = new byte[256];&#xA;    while (true) {&#xA;      int bytesRead = inInputStream.read(buffer);&#xA;      if (bytesRead == -1) {&#xA;        break;&#xA;      }&#xA;      inOutputStream.write(buffer, 0, bytesRead);&#xA;    }&#xA;  }&#xA;&#xA;  private static List getCUEsFor(String inEventTypeId, String inStatus) {&#xA;&#xA;&#xA;    if (inEventTypeId == null || inStatus == null) {&#xA;      log(&quot;Groovy : GenerateSHIPSIDEInvoices executed without EventType or Status.&quot;);&#xA;      return null;&#xA;    }&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(ArgoExtractEntity.CHARGEABLE_UNIT_EVENT).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.BEXU_EVENT_TYPE, inEventTypeId)).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.BEXU_STATUS, inStatus));&#xA;&#xA;&#xA;    return Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;&#xA;&#xA;  }&#xA;&#xA;  private Guarantee getGuarantee(ChargeableUnitEvent inEvent) {&#xA;       List gntTypeList = new ArrayList&lt;String&gt;();&#xA;       gntTypeList.add(GuaranteeTypeEnum.PRE_PAY.getKey());&#xA;       gntTypeList.add(GuaranteeTypeEnum.OAC.getKey());&#xA;       gntTypeList.add(GuaranteeTypeEnum.CREDIT_PREAUTHORIZE.getKey());&#xA;       String[] statuses = gntTypeList.toArray(new String[gntTypeList.size()]);&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(ArgoExtractEntity.GUARANTEE).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.GNTE_APPLIED_TO_PRIMARY_KEY, inEvent.getServiceExtractGkey())).&#xA;            addDqPredicate(PredicateFactory.in(ArgoExtractField.GNTE_GUARANTEE_TYPE, gntTypeList)).&#xA;            addDqPredicate(PredicateFactory.isNull(ArgoExtractField.GNTE_VOIDED_EMAIL_SENT_DATE)).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.GNTE_APPLIED_TO_CLASS, BillingExtractEntityEnum.INV));&#xA;    return (Guarantee) Roastery.getHibernateApi().getUniqueEntityByDomainQuery(dq);&#xA;  }&#xA;&#xA;&#xA;  private Element buildGetInvoiceByInvTypeIdForUnitElement(String invoiceTypeId, ScopedBizUnit inPayee,&#xA;                                                           ScopedBizUnit inContractCustomer, String inCurrencyId, Date inContractEffectiveDate,&#xA;                                                           Guarantee inGuarantee, ChargeableUnitEvent inEvent) {&#xA;    //build the request xml&#xA;    Element rootElem = new Element(BillingWsApiConsts.BILLING_ROOT, XmlUtil.ARGO_NAMESPACE);&#xA;    Element elem = new Element(BillingWsApiConsts.GENERATE_INVOICE_REQUEST, XmlUtil.ARGO_NAMESPACE);&#xA;    rootElem.addContent(elem);&#xA;    addChildTextElement(BillingWsApiConsts.INVOICE_TYPE_ID, invoiceTypeId, elem);&#xA;    addChildTextElement(BillingWsApiConsts.PAYEE_CUSTOMER_ID, inPayee.getBzuId(), elem);&#xA;    addChildTextElement(BillingWsApiConsts.PAYEE_CUSTOMER_BIZ_ROLE, inPayee.getBzuRole().getKey(), elem);&#xA;    String contractCustId = inContractCustomer != null ? inContractCustomer.getBzuId() : &quot;&quot;;&#xA;    addChildTextElement(BillingWsApiConsts.CONTRACT_CUSTOMER_ID, contractCustId, elem);&#xA;    addChildTextElement(BillingWsApiConsts.CONTRACT_CUSTOMER_BIZ_ROLE, inContractCustomer != null ? inContractCustomer.getBzuRole().getKey() : null, elem);&#xA;    addChildTextElement(BillingWsApiConsts.CURRENCY_ID, inCurrencyId, elem);&#xA;    String effectiveDateStr = null;&#xA;    if (inContractEffectiveDate != null) {&#xA;      effectiveDateStr = BillingWsApiConsts.DATE_FORMAT.format(inContractEffectiveDate);&#xA;    }&#xA;    addChildTextElement(BillingWsApiConsts.CONTRACT_EFFECTIVE_DATE, effectiveDateStr, elem);&#xA;    addChildTextElement(BillingWsApiConsts.IS_INVOICE_FINAL, &quot;False&quot;, elem);&#xA;    Element paramsElem = new Element(BillingWsApiConsts.INVOICE_PARAMETERS, XmlUtil.ARGO_NAMESPACE);&#xA;    Element paramElem = new Element(BillingWsApiConsts.INVOICE_PARAMETER, XmlUtil.ARGO_NAMESPACE);&#xA;    addChildTextElement(BillingWsApiConsts.EQUIPMENT_ID, inEvent.getBexuEqId(), paramElem);&#xA;    addChildTextElement(BillingWsApiConsts.GUARANTEE_ID, inGuarantee.getGnteGuaranteeId(), paramElem);&#xA;    addChildTextElement(BillingWsApiConsts.CUSTOMER_REFERENCE_ID, inGuarantee.getGnteCustomerReferenceId(), elem);&#xA;    paramsElem.addContent(paramElem);&#xA;    elem.addContent(paramsElem);&#xA;    return rootElem;&#xA;  }&#xA;&#xA;&#xA;  public EdiInvoice getInvoiceByInvTypeIdForUnit(Element inElement) throws BizViolation {&#xA;    try {&#xA;      ArgoServicePort port = getWsStub();&#xA;      ScopeCoordinateIdsWsType scopeCoordinates = getScopeCoordenatesForWs();&#xA;      GenericInvokeResponseWsType invokeResponseWsType = port.genericInvoke(scopeCoordinates, XmlUtil.toString(inElement, false));&#xA;      ResponseType response = invokeResponseWsType.getCommonResponse();&#xA;      QueryResultType[] queryResultTypes = response.getQueryResults();&#xA;      if (queryResultTypes == null || queryResultTypes.length != 1) {&#xA;        //todo: generic error&#xA;        if (response.getMessageCollector() != null &amp;&amp; response.getMessageCollector().getMessages(0) != null) {&#xA;          MessageType type = response.getMessageCollector().getMessages(0);&#xA;          String message = type.getMessage();&#xA;          throw BizFailure.create(&quot;Error from Billing Webservice - &quot; + message);&#xA;        } else {&#xA;          throw BizFailure.create(ArgoPropertyKeys.BILLING_WEBSERVICE_SERVICES_URL, null, null);&#xA;        }&#xA;      }&#xA;      String responseString = queryResultTypes[0].getResult();&#xA;&#xA;      BillingTransactionsDocument billingTransactionsDocument = BillingTransactionsDocument.Factory.parse(responseString);&#xA;      BillingTransactionsDocument.BillingTransactions transactions = billingTransactionsDocument.getBillingTransactions();&#xA;      List&lt;BillingTransactionDocument.BillingTransaction&gt; transactionList = transactions.getBillingTransactionList();&#xA;      //todo: error if more than 1 transaction returned&#xA;      BillingTransactionDocument.BillingTransaction billingTransaction = transactionList.get(0);&#xA;      List&lt;EdiInvoice&gt; list = billingTransaction.getInvoiceList();&#xA;      if (list.isEmpty()) {&#xA;        throw BizFailure.create(InventoryPropertyKeys.NO_INVOICE_RETRIEVED, null, null);&#xA;      } else if (list.size() &gt; 1) {&#xA;        throw BizFailure.create(InventoryPropertyKeys.MULTIPLE_INVOICES_RETURNED, null, list.size());&#xA;      }&#xA;      EdiInvoice ediInvoice = list.get(0);&#xA;&#xA;      return ediInvoice;&#xA;    } catch (ServiceException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_ERROR, e, null);&#xA;    } catch (java.rmi.RemoteException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_ERROR, e, null);&#xA;    } catch (IOException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_XML_ERROR, e, null);&#xA;    } catch (org.apache.xmlbeans.XmlException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_XML_ERROR, e, null);&#xA;    }&#xA;  }&#xA;&#xA;  public String getInvoiceReportUrl(Long inInvoiceGkey) {&#xA;    try {&#xA;      ArgoServicePort port = getWsStub();&#xA;      Element requestElem = new Element(&quot;reporting&quot;);&#xA;      Element getInvoiceElem = new Element(&quot;get-invoice-report&quot;);&#xA;      Element invoiceGkeyElem = new Element(&quot;invoice-gkey&quot;);&#xA;      invoiceGkeyElem.addContent(inInvoiceGkey.toString());&#xA;      getInvoiceElem.addContent(invoiceGkeyElem);&#xA;      requestElem.addContent(getInvoiceElem);&#xA;&#xA;      //invoke webservice&#xA;      ScopeCoordinateIdsWsType scopeCoordinates = getScopeCoordenatesForWs();&#xA;      GenericInvokeResponseWsType invokeResponseWsType = port.genericInvoke(scopeCoordinates, XmlUtil.toString(requestElem, false));&#xA;      ResponseType response = invokeResponseWsType.getCommonResponse();&#xA;      QueryResultType[] queryResultTypes = response.getQueryResults();&#xA;&#xA;      if (queryResultTypes == null || queryResultTypes.length != 1) {&#xA;        //todo: generic error&#xA;        if (response.getMessageCollector() != null &amp;&amp; response.getMessageCollector().getMessages(0) != null) {&#xA;          MessageType type = response.getMessageCollector().getMessages(0);&#xA;          String message = type.getMessage();&#xA;          throw BizFailure.create(&quot;Error from Billing Webservice - &quot; + message);&#xA;        } else {&#xA;          throw BizFailure.create(ArgoPropertyKeys.BILLING_WEBSERVICE_SERVICES_URL, null, null);&#xA;        }&#xA;      }&#xA;      String responseString = queryResultTypes[0].getResult();&#xA;      Document responseDoc = XmlUtil.parse(responseString);&#xA;      Element responseRoot = responseDoc.getRootElement();&#xA;      Element targetUrlChild = responseRoot.getChild(&quot;file-url&quot;);&#xA;      String targetUrlStr = targetUrlChild.getText().trim();&#xA;      return targetUrlStr;&#xA;    } catch (ServiceException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_ERROR, e, null);&#xA;    } catch (java.rmi.RemoteException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_ERROR, e, null);&#xA;    }&#xA;  }&#xA;&#xA;  private ArgoServicePort getWsStub() throws ServiceException {&#xA;    ArgoServiceLocator locator = new ArgoServiceLocator();&#xA;    ArgoServicePort port = locator.getArgoServicePort(ConfigurationProperties.getBillingServiceURL());&#xA;    Stub stub = (Stub) port;&#xA;    stub._setProperty(Stub.USERNAME_PROPERTY, ConfigurationProperties.getBillingWebServiceUserId());&#xA;    stub._setProperty(Stub.PASSWORD_PROPERTY, ConfigurationProperties.getBillingWebServicePassWord());&#xA;    return port;&#xA;  }&#xA;&#xA;  private void addChildTextElement(String inElementName, String inElementText, Element inParentElement) {&#xA;    Element childElement = new Element(inElementName, XmlUtil.ARGO_NAMESPACE);&#xA;    Text childText = new Text(inElementText);&#xA;    childElement.addContent(childText);&#xA;    inParentElement.addContent(childElement);&#xA;  }&#xA;&#xA;  private ScopeCoordinateIdsWsType getScopeCoordenatesForWs() {&#xA;    //build the scope coordinates for the web service based on the user context;&#xA;    ScopeCoordinateIdsWsType scopeCoordinates = new ScopeCoordinateIdsWsType();&#xA;    UserContext uContext = ContextHelper.getThreadUserContext();&#xA;    scopeCoordinates.setOperatorId(ContextHelper.getThreadOperator() != null ? ContextHelper.getThreadOperator().getId() : null);&#xA;    scopeCoordinates.setComplexId(ContextHelper.getThreadComplex() != null ? ContextHelper.getThreadComplex().getCpxId() : null);&#xA;    scopeCoordinates.setFacilityId(ContextHelper.getThreadFacility() != null ? ContextHelper.getThreadFacility().getFcyId() : null);&#xA;    scopeCoordinates.setYardId(ContextHelper.getThreadYard() != null ? ContextHelper.getThreadYard().getYrdId() : null);&#xA;    return scopeCoordinates;&#xA;  }&#xA;&#xA;&#xA;  void appendBillToAddress(Element inRootElement, Guarantee inGuarantee) {&#xA;    Element element = inRootElement.getChild(BillingWsApiConsts.GENERATE_INVOICE_REQUEST, XmlUtil.ARGO_NAMESPACE);&#xA;&#xA;    Element billToPartyElement = new Element(BillingWsApiConsts.BILL_TO_PARTY, XmlUtil.ARGO_NAMESPACE);&#xA;    Element addressElement = new Element(BillingWsApiConsts.ADDRESS, XmlUtil.ARGO_NAMESPACE);&#xA;&#xA;    addChildTextElement(BillingWsApiConsts.CONTACT_NAME, inGuarantee.getGnteExternalContactName(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.ADDRESS_LINE_1, inGuarantee.getGnteExternalAddress1(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.ADDRESS_LINE_2, inGuarantee.getGnteExternalAddress2(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.ADDRESS_LINE_3, inGuarantee.getGnteExternalAddress3(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.CITY, inGuarantee.getGnteExternalCity(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.MAIL_CODE, inGuarantee.getGnteExternalMailCode(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.STATE, inGuarantee.getGnteExternalState() != null ? inGuarantee.getGnteExternalState().getStateCode() : null, addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.COUNTRY, inGuarantee.getGnteExternalCountry() != null ? inGuarantee.getGnteExternalCountry().getCntryCode() : null, addressElement);&#xA;    //todo: add telephone and fax details since they are not supported in billing invoices right now&#xA;//    addChildTextElement(BillingWsApiConsts.TELEPHONE, inGuarantee.getGnteExternalTelephone(), addressElement);&#xA;//    addChildTextElement(BillingWsApiConsts.FAX, inGuarantee.getGnteExternalFax(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.EMAIL_ADDRESS, inGuarantee.getGnteExternalEmailAddress(), addressElement);&#xA;    billToPartyElement.addContent(addressElement);&#xA;    element.addContent(billToPartyElement);&#xA;  }&#xA;  void appendFlexFieldDetails(Element inRootElement, Guarantee inGuarantee) {&#xA;&#xA;    Element element = inRootElement.getChild(BillingWsApiConsts.GENERATE_INVOICE_REQUEST, XmlUtil.ARGO_NAMESPACE);&#xA;&#xA;    Element flexElement = new Element(BillingWsApiConsts.INVOICE_FLEX_FIELDS, XmlUtil.ARGO_NAMESPACE);&#xA;    String gnteId =   inGuarantee.getGnteGuaranteeId();&#xA;    String gnteType = inGuarantee.getGnteGuaranteeType().getKey();&#xA;    String paymentType = inGuarantee.getGntePaymentType().getKey()&#xA;    addChildTextElement(BillingWsApiConsts.FLEX_STRING09, gnteId + &quot;;&quot; +  gnteType + &quot;;&quot; + paymentType, flexElement);&#xA;    element.addContent(flexElement);&#xA;  }&#xA;&#xA;  private static final String GUARANTEED = &quot;GUARANTEED&quot;;&#xA;  private static final String INVOICED = &quot;INVOICED&quot;;&#xA;&#xA;}&#xA;" />
<digital-asset id="ManageGuaranteesMadeWithCreditCardPreAuthorizations" short-description="ManageGuaranteesMadeWithCreditCardPreAuthorizations" is-pre-deployed="Y" groovy-code="import org.apache.log4j.Logger&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.extract.Guarantee&#xA;import com.navis.argo.business.atoms.BillingExtractEntityEnum&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.framework.esb.client.ESBClientHelper&#xA;import com.navis.framework.esb.server.FrameworkMessageQueues&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.inventory.business.units.GuaranteeManager&#xA;import org.apache.commons.lang.StringUtils&#xA;import java.util.Map&#xA;import java.util.Date&#xA;import java.util.List&#xA;import java.util.Calendar&#xA;&#xA;/**&#xA; *  This is a Pre-Deployable Groovy Plug-in for Managing Guarantees Made With Credit Card Pre-Authorization.&#xA; * @author &lt;a href=&quot;mailto:kjeyapandian@navis.com&quot;&gt;Kathiresan Jeyapandian&lt;/a&gt; Nov 05, 2009 Time: 4:48:01 PM&#xA; */&#xA;public class ManageGuaranteesMadeWithCreditCardPreAuthorizations  extends GroovyApi {&#xA;&#xA;&#xA;  public void execute(Map parameters) {&#xA;&#xA;    logInfo(&quot;Start execution of Groovy Plug-in: ManageGuaranteesMadeWithCreditCardPreAuthorizations&quot;);&#xA;    System.out.println(&quot;Start execution of Groovy Plug-in: ManageGuaranteesMadeWithCreditCardPreAuthorizations&quot;);&#xA;&#xA;    UserContext context = ContextHelper.getThreadUserContext();&#xA;    Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#xA;    // Get the list of credit pre-authorized guarantees not voided or expired&#xA;    List guarantees = Guarantee.getCreditPreAuthorizedGurantees(BillingExtractEntityEnum.INV, false);&#xA;&#xA;    for (Object guaranteeObj: guarantees) {&#xA;&#xA;      Guarantee guarantee = (Guarantee) guaranteeObj;&#xA;&#xA;      logInfo(&quot;Guarantees made by Credit Card Pre-Authorization -  &quot; + guarantee);&#xA;      System.out.println(&quot;Guarantees made by Credit Card Pre-Authorization -  &quot; + guarantee);&#xA;&#xA;      // collect data for email content&#xA;      String guaranteeId = guarantee.getGnteGuaranteeId();&#xA;      String unitId = guarantee.getGnteAppliedToNaturalKey();&#xA;      String eventId = guarantee.getGnteAppliedToEventId();&#xA;      Date gnteCreated = guarantee.getGnteCreated();&#xA;      ScopedBizUnit guarantor = guarantee.getGnteGuaranteeCustomer();&#xA;      String guarantorId = guarantor != null ? guarantor.getBzuId() : null;&#xA;      String authorizedBy = guarantee.getGnteN4UserId();&#xA;      Date waiverExpirationDate = guarantee.getGnteWaiverExpirationDate();&#xA;      Date endDay = guarantee.getGnteGuaranteeEndDay();&#xA;      String custReferenceId = guarantee.getGnteCustomerReferenceId();&#xA;      Double amount = guarantee.getGnteGuaranteeAmount();&#xA;      String notes = guarantee.getGnteNotes();&#xA;      String emailToId = guarantee.getGnteExternalEmailAddress();&#xA;      String authNbr = guarantee.getGnteAuthorizationNbr();&#xA;&#xA;      Date currentDate = ArgoUtils.timeNow();&#xA;&#xA;      // yet to expiration date&#xA;      Calendar cal1 = Calendar.getInstance();&#xA;      cal1.setTime(gnteCreated);&#xA;      cal1.add(Calendar.DATE, notifyGuaranteeYetToExpire); // Adding 6 days to start day date&#xA;      Date yetToExpirationDate = cal1.getTime();&#xA;&#xA;      // expired date&#xA;      Calendar cal2 = Calendar.getInstance();&#xA;      cal2.setTime(gnteCreated);&#xA;      cal2.add(Calendar.DATE, notifyExpiredGuaranteeDays); // Adding 7 days to start day date&#xA;      Date expiredDate = cal2.getTime();&#xA;&#xA;      logInfo(&quot;Guarantee created date &quot; + gnteCreated);&#xA;      System.out.println(&quot;Guarantee created date  &quot; + gnteCreated);&#xA;&#xA;      logInfo(&quot;Notification Guarantee yet to expire date &quot; + yetToExpirationDate);&#xA;      System.out.println(&quot;Notification Guarantee yet to expire date  &quot; + yetToExpirationDate);&#xA;&#xA;      logInfo(&quot;Notification Guarantee expired date &quot; + expiredDate);&#xA;      System.out.println(&quot;Notification Guarantee expired date  &quot; + expiredDate);&#xA;&#xA;&#xA;      if(currentDate.equals(expiredDate) || currentDate.after(expiredDate)) {&#xA;        // Guarantee Expired --&gt; current time &gt;= Guarantee.Date/Time of Guarantee + 7 days&#xA;        logInfo(&quot;Send Notification For Guarantee Expired - &quot; + guarantee);&#xA;        System.out.println(&quot;Send Notification For Guarantee Expired - &quot; + guarantee);&#xA;&#xA;        guarantee.setGnteVoidedOrExpiredDate(timeNow);&#xA;        try {&#xA;          // Void the associated Guarantee&#xA;          GuaranteeManager.voidGuarantee(guarantee);&#xA;        } catch (Exception e) {&#xA;          LOGGER.error(&quot;Exeception Occured while voiding the guarantee : &quot;+guaranteeId);&#xA;          System.out.println(&quot;Exeception Occured while voiding the guarantee : &quot;+guaranteeId);&#xA;        }&#xA;&#xA;        sendNotificationForGuaranteeExpired(guaranteeId, unitId, eventId, gnteCreated, guarantorId, endDay, custReferenceId,&#xA;          amount, notes, emailToId, authNbr, context, timeNow, expiredDate, authorizedBy);&#xA;&#xA;      } else if(currentDate.equals(yetToExpirationDate) || currentDate.after(yetToExpirationDate)) {&#xA;          // Guarantee yet to expire --&gt; current time &gt;= Guarantee.Date/Time of Guarantee + 6 days&#xA;          logInfo(&quot;Send Notification For Guarantee Yet To Expire - &quot; + guarantee);&#xA;          System.out.println(&quot;Send Notification For Guarantee Yet To Expire - &quot; + guarantee);&#xA;&#xA;          sendNotificationForGuaranteeYetToExpire(guaranteeId, unitId, eventId, gnteCreated, guarantorId, endDay, custReferenceId,&#xA;          amount, notes, emailToId, authNbr, currentDate, context, timeNow, yetToExpirationDate, authorizedBy);&#xA;&#xA;      }&#xA;&#xA;    }&#xA;&#xA;    logInfo(&quot;End execution of Groovy Plug-in: ManageGuaranteesMadeWithCreditCardPreAuthorizations&quot;);&#xA;    System.out.println(&quot;End execution of Groovy Plug-in: ManageGuaranteesMadeWithCreditCardPreAuthorizations&quot;);&#xA;  }&#xA;&#xA;  private void sendNotificationForGuaranteeYetToExpire(String inGuaranteeId, String inUnitId,  String inEventId, Date inGnteCreated,&#xA;                                                       String inGuarantorId, Date inEndDay, String inCustReferenceId, Double inAmount,&#xA;                                                       String inNotes, String inEmailToId, String inAuthNbr, &#xA;                                                       Date inExpirationDate, UserContext inContext, Date inTimeNow, Date inYetToExpireDate,&#xA;                                                       String inAuthorizedBy) {&#xA;&#xA;&#xA;    Date tommorrowsDate = getTommorrowsDate();&#xA;&#xA;    String subject = &quot;Guarantee Confirmation #'&quot; + inGuaranteeId + &quot;' for container #&quot; + inUnitId + &quot; WILL EXPIRE on &quot; + tommorrowsDate;&#xA;&#xA;    // Create email message body&#xA;    String msgBody = &quot;\n Please note that the subject credit card guarantee will expire on  &quot; + tommorrowsDate + &quot;.&quot;+&#xA;            &quot;\n If the container is not picked up prior to close of business tomorrow, pre-approval will be voided and &quot;+&#xA;            &quot;\n you will need to re-process your payment.&quot; +&#xA;            &quot;\n\n Container :  &quot; + inUnitId +&#xA;            &quot;\n Payment For :  &quot; + inEventId +&#xA;            &quot;\n Guarantee Created Date  : &quot; + inGnteCreated + &quot;.&quot; +&#xA;            &quot;\n Confirmation #  : &quot; + inGuaranteeId +&#xA;            &quot;\n\n Guarantor : &quot; + inGuarantorId +&#xA;            &quot;\n Authorized By : &quot; + inAuthorizedBy +&#xA;            &quot;\n Authorized Amount : &quot; + inAmount +&#xA;            &quot;\n Authorized Until Date : &quot; + inYetToExpireDate +&#xA;            &quot;\n\n Order ID #  : &quot; + inAuthNbr + &#xA;            &quot;\n Reference # : &quot; + inCustReferenceId +&#xA;            &quot;\n Remarks : &quot; + inNotes +&#xA;&#xA;            &quot;\n\n Note: Based on Mastercard and Visa rules, your pre-approval will void tomorrow (7 days rule).&quot;+&#xA;            &quot;\n Voided pre-approval may take between 7 to 12 days to be posted against your available credit line. &quot;+&#xA;            &quot;\n If you have any questions regarding this information, please contact the Demurrage Department at (908)436-4844. \n&quot;;&#xA;&#xA;    logInfo(&quot;Message Body is - &quot; + msgBody);&#xA;    System.out.println(&quot;Message Body is - &quot; + msgBody);&#xA;    &#xA;    if (inEmailToId != null &amp;&amp; !StringUtils.isEmpty(inEmailToId)) {&#xA;      try {&#xA;        ESBClientHelper.sendEmailAttachments(inContext, FrameworkMessageQueues.EMAIL_QUEUE, inEmailToId, &quot;kjeyapandian@zebra.com&quot;, subject, msgBody,&#xA;                null);&#xA;        logInfo(&quot;Guarantee Yet To Expire email sent to '&quot; + inEmailToId + &quot;' for 'Guarantee: &quot; + inGuaranteeId + &quot;' on &quot; + inTimeNow + &quot;.&quot;);&#xA;        System.out.println(&quot;Guarantee Yet To Expire email sent to '&quot; + inEmailToId + &quot;' for 'Guarantee: &quot; + inGuaranteeId + &quot;' on &quot; + inTimeNow + &quot;.&quot;);&#xA;      } catch (Exception inEx) {&#xA;        LOGGER.error(&quot;Exception Occurred in sendNotificationForGuaranteeYetToExpire() due to &quot;+ inEx);&#xA;        System.out.println(&quot;Exception Occurred in sendNotificationForGuaranteeYetToExpire() due to &quot; + inEx);&#xA;      }&#xA;    }&#xA;&#xA;  }&#xA;&#xA;  private void sendNotificationForGuaranteeExpired(String inGuaranteeId, String inUnitId,  String inEventId, Date inGnteCreated,&#xA;                                                       String inGuarantorId, Date inEndDay, String inCustReferenceId, Double inAmount,&#xA;                                                       String inNotes, String inEmailToId, String inAuthNbr, &#xA;                                                       UserContext inContext, Date inTimeNow, Date inExpiredDate, String inAuthorizedBy) {&#xA;&#xA;    String subject = &quot;Guarantee Confirmation #'&quot; + inGuaranteeId + &quot;' for container #&quot; + inUnitId + &quot; HAS EXPIRED as of &quot; + inTimeNow;&#xA;&#xA;    // Create email message body&#xA;    String msgBody = &quot;\n Please note that the subject credit card guarantee has expired.&quot;+&#xA;            &quot;\n Pre-approval has been voided and you will need to re-process your payment.&quot; +&#xA;&#xA;            &quot;\n\n Container :  &quot; + inUnitId +&#xA;            &quot;\n Payment For :  &quot; + inEventId +&#xA;            &quot;\n Guarantee Created Date  : &quot; + inGnteCreated + &quot;.&quot; +&#xA;            &quot;\n Confirmation #  : &quot; + inGuaranteeId +&#xA;            &quot;\n\n Guarantor : &quot; + inGuarantorId +&#xA;            &quot;\n Authorized By : &quot; + inAuthorizedBy +&#xA;            &quot;\n Authorized Amount : &quot; + inAmount +&#xA;            &quot;\n Authorized Until Date : &quot; + inExpiredDate + &quot;.&quot; +&#xA;            &quot;\n Order ID #  : &quot; + inAuthNbr +&#xA;            &quot;\n Reference # : &quot; + inCustReferenceId +&#xA;            &quot;\n Remarks &quot; + inNotes +&#xA;&#xA;            &quot;\n\n Note: Based on Mastercard and Visa rules, your pre-approval has been voided (7 days rule).&quot;+&#xA;            &quot;\n Voided pre-approval may take between 7 to 12 days to be posted against your available credit line. &quot;+&#xA;            &quot;\n If you have any questions regarding this information, please contact the Demurrage Department at (908)436-4844.&quot;;&#xA;&#xA;&#xA;    logInfo(&quot;Message Body is - &quot; + msgBody);&#xA;    System.out.println(&quot;Message Body is - &quot; + msgBody);    &#xA;&#xA;    if (inEmailToId != null &amp;&amp; !StringUtils.isEmpty(inEmailToId)) {&#xA;      try {&#xA;        ESBClientHelper.sendEmailAttachments(inContext, FrameworkMessageQueues.EMAIL_QUEUE, inEmailToId, &quot;kjeyapandian@zebra.com&quot;, subject, msgBody,&#xA;                null);&#xA;        logInfo(&quot;Guarantee Expired email sent to '&quot; + inEmailToId + &quot;' for 'Guarantee: &quot; + inGuaranteeId + &quot;' on &quot; + inTimeNow + &quot;.&quot;);&#xA;        System.out.println(&quot;Guarantee Expired email sent to '&quot; + inEmailToId + &quot;' for 'Guarantee: &quot; + inGuaranteeId + &quot;' on &quot; + inTimeNow + &quot;.&quot;);        &#xA;      } catch (Exception inEx) {&#xA;        LOGGER.error(&quot;Exception Occurred in sendNotificationForGuaranteeExpired() due to &quot;+ inEx);&#xA;        System.out.println(&quot;Exception Occurred in sendNotificationForGuaranteeExpired() due to &quot; + inEx);&#xA;      }&#xA;    }&#xA;&#xA;  }&#xA;&#xA;  private Date getTommorrowsDate(){&#xA;    Date currentDate = ArgoUtils.timeNow();&#xA;    Calendar cal1 = Calendar.getInstance();&#xA;    cal1.setTime(currentDate);&#xA;    cal1.add(Calendar.DATE, +1); // Adding 1 day to current date to get Tommorrow's date&#xA;    Date tommorrowsDate = cal1.getTime();&#xA;    return tommorrowsDate;&#xA;  }&#xA;&#xA;  private static final Logger LOGGER = Logger.getLogger(ManageGuaranteesMadeWithCreditCardPreAuthorizations.class);&#xA;  private static int notifyGuaranteeYetToExpire = 6;&#xA;  private static int notifyExpiredGuaranteeDays = 7;&#xA;&#xA;}&#xA;" />
<digital-asset id="SendEmailForVoidedGuarantees" short-description="SendEmailForVoidedGuarantees" is-pre-deployed="Y" groovy-code="import com.navis.argo.ContextHelper&#xA;import com.navis.argo.ArgoExtractField&#xA;import com.navis.argo.ArgoExtractEntity&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.atoms.GuaranteeTypeEnum&#xA;import com.navis.argo.business.extract.Guarantee&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.esb.client.ESBClientHelper&#xA;import com.navis.framework.esb.server.FrameworkMessageQueues&#xA;import com.navis.framework.portal.UserContext&#xA;import org.apache.commons.lang.StringUtils&#xA;import org.apache.log4j.Logger&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.security.business.user.BaseUser&#xA;&#xA;/**&#xA; * This is a Pre-Deployable Groovy Plug-in to send mail for voided Guarantees/Waiver.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:psethuraman@navis.com&quot;&gt;Prakash&lt;/a&gt; Apr 20, 2010, 1:01:08 PM&#xA; */&#xA;public class SendEmailForVoidedGuarantees extends GroovyApi {&#xA;  public void execute(Map parameters) {&#xA;    logInfo(&quot;Start execution of Groovy Plug-in: SendEmailForVoidedGuarantees&quot;);&#xA;    System.out.println(&quot;Start execution of Groovy Plug-in: SendEmailForVoidedGuarantees&quot;);&#xA;&#xA;    UserContext context = ContextHelper.getThreadUserContext();&#xA;    Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;    List voidedGuarantees = voidedGuarantees();&#xA;&#xA;    if (voidedGuarantees.isEmpty()) {&#xA;      logInfo(&quot;No Guarantee records matched for Groovy Plug-in: SendEmailForVoidedGuarantees&quot;);&#xA;      System.out.println(&quot;No Guarantee records matched for Groovy Plug-in: SendEmailForVoidedGuarantees&quot;);&#xA;    } else {&#xA;&#xA;      for (Object object: voidedGuarantees) {&#xA;        Guarantee guarantee = (Guarantee) object;&#xA;&#xA;        // Set voided/expired email sent date to timeNow&#xA;        guarantee.setGnteVoidedEmailSentDate(timeNow);&#xA;&#xA;        // collect data for email content&#xA;        String guaranteeId = guarantee.getGnteGuaranteeId();&#xA;        String unitId = guarantee.getGnteAppliedToNaturalKey();&#xA;        String eventId = guarantee.getGnteAppliedToEventId();&#xA;        Date gnteCreated = guarantee.getGnteCreated();&#xA;        ScopedBizUnit guarantor = guarantee.getGnteGuaranteeCustomer();&#xA;        String guarantorId = guarantor != null ? guarantor.getBzuId() : null;&#xA;        Date startDay = guarantee.getGnteGuaranteeStartDay();&#xA;        Date endDay = guarantee.getGnteGuaranteeEndDay();&#xA;        String custReferenceId = guarantee.getGnteCustomerReferenceId();&#xA;        Double amount = guarantee.getGnteGuaranteeAmount();&#xA;        String notes = guarantee.getGnteNotes();&#xA;&#xA;        // For voided guarantee - if GnteN4user id is not null then fetch the email id from Security - user&#xA;        // if there is no n4user for GnteN4user id then get the email id from guarantee itself (external users)&#xA;        String emailToId = null;&#xA;        if (guarantee.getGnteN4UserId() != null) {&#xA;          BaseUser user = BaseUser.findBaseUser(guarantee.getGnteN4UserId());&#xA;          if (user != null) {&#xA;            if (user.getBuserEMail() != null) {&#xA;              emailToId = user.getBuserEMail();&#xA;            } else {&#xA;              logInfo(&quot;SendEmailForVoidedGuarantees: No email Id for the SN4 user &quot; + guarantee.getGnteN4UserId());&#xA;              System.out.println(&quot;SendEmailForVoidedGuarantees: No email Id for the SN4 user &quot; + guarantee.getGnteN4UserId());&#xA;            }&#xA;          } else {&#xA;            logInfo(&quot;SendEmailForVoidedGuarantees: &quot; + guarantee.getGnteN4UserId() + &quot; is not an SN4 user.&quot;);&#xA;            System.out.println(&quot;SendEmailForVoidedGuarantees: &quot; + guarantee.getGnteN4UserId() + &quot; is not an SN4 user.&quot;);&#xA;&#xA;            emailToId = guarantee.getGnteExternalEmailAddress();&#xA;          }&#xA;        } else {&#xA;          emailToId = guarantee.getGnteExternalEmailAddress();&#xA;        }&#xA;&#xA;        String[] noAttachment = &quot;&quot;;&#xA;        String guaranteeType = GUARANTEE;&#xA;        if (GuaranteeTypeEnum.WAIVER.equals(guarantee.getGnteGuaranteeType())) {&#xA;          guaranteeType = WAIVER;&#xA;        }&#xA;        // Subject: Guarantee/Waiver Confirmation# 00000 for container # ABCD1234567 HAS EXPIRED as of (today�s date).&#xA;        String subject = guaranteeType +&quot; Confirmation # (ID) &quot; + guaranteeId + &quot; for container # '&quot; + unitId + &quot;' HAS EXPIRED as of &quot; + timeNow + &quot;.&quot;;&#xA;&#xA;        // Create email message body&#xA;        String msgBody = &quot;\n Please note that the subject &quot;+ guaranteeType + &quot; has expired and will need to be reprocessed.\n &quot; +&#xA;                &quot;\n Container                           : &quot; + unitId +&#xA;                &quot;\n &quot; + guaranteeType + &quot; for                 : &quot; + eventId +&#xA;                &quot;\n&quot; + guaranteeType + &quot; Created Date         : &quot; + gnteCreated +&#xA;                &quot;\n Confirmation # (ID)                 : &quot; + guaranteeId +&#xA;                &quot;\n Guarantor                           : &quot; + guarantorId +&#xA;                &quot;\n Authorized By                       : &quot; + guarantorId +&#xA;                &quot;\n &quot; + guaranteeType + &quot; Amount              : &quot; + amount +&#xA;                &quot;\n Reference #(ID)                     : &quot; + custReferenceId +&#xA;                &quot;\n Remarks                             : &quot; + notes + &quot;\n &quot;;&#xA;&#xA;        if (emailToId != null &amp;&amp; !StringUtils.isEmpty(emailToId)) {&#xA;          try {&#xA;            ESBClientHelper.sendEmailAttachments(context, FrameworkMessageQueues.EMAIL_QUEUE, emailToId, &quot;do-not-reply@maher.com&quot;, subject, msgBody,&#xA;                    noAttachment);&#xA;            logInfo(&quot;SendEmailForVoidedGuarantees: Guarantee Voided email sent to 'Guarantee SN4 User Id's email address '&quot; + emailToId + &quot;' for '&quot; + guaranteeId + &quot;' on &quot; + timeNow + &quot;'.&quot;);&#xA;            System.out.println(&quot;SendEmailForVoidedGuarantees: Guarantee Voided email sent to 'Guarantee SN4 User Id's email address '&quot; + emailToId + &quot;' for '&quot; + guaranteeId + &quot;' on &quot; + timeNow + &quot;'.&quot;);&#xA;          } catch (Exception e) {&#xA;            LOGGER.error(e.getMessage());&#xA;            System.out.println(e.getMessage());&#xA;          }&#xA;        } else {&#xA;          // Log if no e-mail Id found in for guarantor&#xA;          logWarn(subject + &quot;\n Details : &quot; + msgBody);&#xA;          System.out.println(subject + &quot;\n Details : &quot; + msgBody);&#xA;        }&#xA;      }&#xA;    }&#xA;    logInfo(&quot;End execution of Groovy Plug-in: SendEmailForVoidedGuarantees&quot;);&#xA;    System.out.println(&quot;End execution of Groovy Plug-in: SendEmailForVoidedGuarantees&quot;);&#xA;  }&#xA;&#xA;    private List voidedGuarantees() {&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(ArgoExtractEntity.GUARANTEE)&#xA;            .addDqPredicate(PredicateFactory.isNotNull(ArgoExtractField.GNTE_VOIDED_OR_EXPIRED_DATE))&#xA;            .addDqPredicate(PredicateFactory.isNull(ArgoExtractField.GNTE_VOIDED_EMAIL_SENT_DATE));&#xA;&#xA;    return Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);;&#xA;&#xA;  }&#xA;  private final String GUARANTEE = &quot;GUARANTEE&quot;;&#xA;  private final String WAIVER = &quot;WAIVER&quot;;&#xA;  private static final Logger LOGGER = Logger.getLogger(SendEmailForVoidedGuarantees.class);&#xA;}&#xA;" />
<digital-asset id="CustomCalculateStorageDays" short-description="CustomCalculateStorageDays" is-pre-deployed="Y" groovy-code="/*&#xA; * Copyright (c) 2010 Zebra Technologies Corp. All Rights Reserved.&#xA; * $Id: $&#xA; */&#xA;&#xA;import com.navis.inventory.external.inventory.AbstractStorageRule&#xA;import com.navis.external.framework.util.EFieldChanges&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.units.Unit&#xA;&#xA;/**&#xA; * 2010-11-24 psethuraman ARGO-27225: custom storage days calculation&#xA; **/&#xA;public class CustomCalculateStorageDays extends AbstractStorageRule {&#xA;&#xA;  public Date calculateStorageStartDate(EFieldChanges inChanges) {&#xA;    Unit unit = (Unit)((FieldChanges) inChanges).getFieldChange(InventoryField.UFV_UNIT).getNewValue();&#xA;    String flexString = unit.getUnitFlexString01();&#xA;    log(&quot;executing groovy to set custom start day with unit flex string as &quot; + flexString);&#xA;    return new Date();&#xA;  }&#xA;&#xA;  public Date calculateStorageEndDate(EFieldChanges inChanges) {&#xA;    Unit unit = (Unit)((FieldChanges) inChanges).getFieldChange(InventoryField.UFV_UNIT).getNewValue();&#xA;    String flexString = unit.getUnitFlexString05();&#xA;    log(&quot;executing groovy to set custom end day with unit Flex string as &quot; + flexString);&#xA;    return new Date()+1;&#xA;  }&#xA;}&#xA;" />
<digital-asset id="PostNewEventUsingCarrierVisitAta" short-description="PostNewEventUsingCarrierVisitAta" is-pre-deployed="Y" groovy-code="import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import com.navis.services.business.event.Event;&#xA;&#xA;&#xA;public class PostNewEventUsingCarrierVisitAta extends GroovyApi {&#xA;&#xA;  public void execute(Object event) {&#xA;&#xA;    Boolean isOverTime = false;&#xA;    Unit unit =  event.getEntity();&#xA;&#xA;    // Get the inbound Carrier Visit actual arrival time.&#xA;&#xA;    CarrierVisit cv = unit.getUnitDeclaredIbCv();&#xA;    Date cvAtaDate = cv.getCvATA();&#xA;&#xA;    if (cvAtaDate != null) {&#xA;&#xA;      Calendar cvAtaCalendarDate = Calendar.getInstance();&#xA;      cvAtaCalendarDate.setTime(cvAtaDate);&#xA;&#xA;      //get the arrival Hour from carrier visit&#xA;      int hours = cvAtaCalendarDate.getTime().getHours();&#xA;&#xA;      //Returns (0 = Sunday, 1 = Monday, 2 = Tuesday, 3 = Wednesday, 4 = Thursday, 5 = Friday, 6 = Saturday)&#xA;      int dayOfWeek = cvAtaCalendarDate.getTime().getDay();&#xA;&#xA;      //Check for the day - Whether the vessel arrived on SAT or SUN&#xA;      if ((dayOfWeek == 0) || (dayOfWeek == 6)) {&#xA;        isOverTime = true;&#xA;      }&#xA;&#xA;      //Check for the day - Whether the vessel arrived on FRI after 5:00 PM or on MON before 8:00 AM.&#xA;&#xA;      if ((dayOfWeek == 5)) {&#xA;        if (hours &gt;= 17) {&#xA;          isOverTime = true;&#xA;        }&#xA;      }&#xA;&#xA;      if ((dayOfWeek == 1)) {&#xA;        if (hours &lt;= 8) {&#xA;          isOverTime = true;&#xA;        }&#xA;      }&#xA;      // if the boolean overTime is true - set by the above methods then record OVERTIME event.&#xA;      if (isOverTime) {&#xA;        event.postNewEvent(&quot;UNIT_DISCH_BILLING&quot;);&#xA;      }&#xA;&#xA;    }&#xA;  }&#xA;}&#xA;" />
<digital-asset id="UpdateCUEsCancelledForDeliveredAndNoGuarantee" short-description="UpdateCUEsCancelledForDeliveredAndNoGuarantee" is-pre-deployed="Y" groovy-code="import org.apache.log4j.Logger&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.atoms.BillingExtractEntityEnum&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.argo.ArgoExtractEntity&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoExtractField&#xA;import com.navis.argo.business.extract.ChargeableUnitEvent&#xA;import com.navis.framework.portal.query.Junction&#xA;import com.navis.framework.portal.query.Disjunction&#xA;&#xA;/**&#xA; *  This is a Pre-Deployable Groovy Plug-in which cancels the CUEs where STORAGE/REEFER CUE is in QUEUED status,&#xA; *                  has no Guarantees and the unit is delivered.&#xA; * @author &lt;a href=&quot;mailto:psethuraman@zebra.com&quot;&gt;Prakash&lt;/a&gt; Apr 14, 2010 Time: 3:10:01 PM&#xA; */&#xA;public class UpdateCUEsCancelledForDeliveredAndNoGuarantee extends GroovyApi {&#xA;  public void execute(Map parameters) {&#xA;    logInfo(&quot;Start execution of Groovy Plug-in: UpdateCUEsCancelledForDeliveredAndNoGuarantee&quot;);&#xA;    System.out.println(&quot;Start execution of Groovy Plug-in: UpdateCUEsCancelledForDeliveredAndNoGuarantee&quot;);&#xA;&#xA;    // USER CAN CHANGE THESE FIEDLS BASED ON REQUIREMENTS.&#xA;    List eventTypeList = new ArrayList();&#xA;    eventTypeList.add(&quot;STORAGE&quot;);&#xA;    eventTypeList.add(&quot;REEFER&quot;);&#xA;    String[] eventTypes = eventTypeList.toArray(new String[eventTypeList.size()]);&#xA;&#xA;    UserContext context = ContextHelper.getThreadUserContext();&#xA;    Date timeNow = new Date(ArgoUtils.timeNow().dateString);&#xA;&#xA;    List chargeEvents = getStorateReeferQueuedCUEs(eventTypes, QUEUED, timeNow);&#xA;&#xA;    if(chargeEvents.isEmpty()) {&#xA;      logInfo(&quot;UpdateCUEsCancelledForDeliveredAndNoGuarantee: No storage/Reefer records found for Groovy Plug-in&quot;);&#xA;      System.out.println(&quot;UpdateCUEsCancelledForDeliveredAndNoGuarantee: No storage/Reefer records found for Groovy Plug-in&quot;);&#xA;    }&#xA;    for (ChargeableUnitEvent chargeEvent: chargeEvents) {&#xA;      try {&#xA;        if (!hasValidGuarantee(chargeEvent)) {&#xA;          chargeEvent.setBexuStatus(CANCELLED);&#xA;          Roastery.getHibernateApi().update(chargeEvent);&#xA;          System.out.println(&quot;UpdateCUEsCancelledForDeliveredAndNoGuarantee: Queued CUE (&quot;+chargeEvent.getBexuGkey()+&#xA;                  &quot;) for unit &quot;+chargeEvent.getBexuEqId()+&quot; is Cancelled&quot;);&#xA;        }&#xA;      } catch (Exception e) {&#xA;          System.out.println(&quot;UpdateCUEsCancelledForDeliveredAndNoGuarantee: Exception occured while trying to cancel the CUE (&quot;&#xA;                  +chargeEvent.getBexuGkey()+&quot;) for unit : &quot;+chargeEvent.getBexuEqId());&#xA;      }&#xA;    }&#xA;    logInfo(&quot;End execution of Groovy Plug-in: UpdateCUEsCancelledForDeliveredAndNoGuarantee&quot;);&#xA;    System.out.println(&quot;End execution of Groovy Plug-in: UpdateCUEsCancelledForDeliveredAndNoGuarantee&quot;);&#xA;  }&#xA;&#xA;  private List getStorateReeferQueuedCUEs(String[] inEventTypes, String inStatus, Date inTimeNow) {&#xA;&#xA;    Junction timeNotNullOrBeforeToday =  new Disjunction()&#xA;            .add(PredicateFactory.isNotNull(ArgoExtractField.BEXU_EVENT_END_TIME))&#xA;            .add(PredicateFactory.lt(ArgoExtractField.BEXU_EVENT_END_TIME, inTimeNow));&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(ArgoExtractEntity.CHARGEABLE_UNIT_EVENT)&#xA;            .addDqPredicate(PredicateFactory.in(ArgoExtractField.BEXU_EVENT_TYPE, inEventTypes))&#xA;            .addDqPredicate(PredicateFactory.eq(ArgoExtractField.BEXU_STATUS, inStatus))&#xA;            .addDqPredicate(PredicateFactory.isNotNull(ArgoExtractField.BEXU_RULE_END_DAY))&#xA;            .addDqPredicate(timeNotNullOrBeforeToday);&#xA;&#xA;    return Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;  }&#xA;&#xA;  private boolean hasValidGuarantee(ChargeableUnitEvent inChargeEvent) {&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(ArgoExtractEntity.GUARANTEE)&#xA;            .addDqPredicate(PredicateFactory.eq(ArgoExtractField.GNTE_APPLIED_TO_PRIMARY_KEY, inChargeEvent.getBexuGkey()))&#xA;            .addDqPredicate(PredicateFactory.eq(ArgoExtractField.GNTE_APPLIED_TO_CLASS, BillingExtractEntityEnum.INV))&#xA;            .addDqPredicate(PredicateFactory.isNull(ArgoExtractField.GNTE_VOIDED_OR_EXPIRED_DATE))&#xA;            .addDqPredicate(PredicateFactory.lt(ArgoExtractField.GNTE_GUARANTEE_START_DAY, inChargeEvent.getBexuRuleEndDay()));&#xA;&#xA;    List guarantees = Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);;&#xA;    if (guarantees.isEmpty()) {&#xA;      logInfo(&quot;UpdateCUEsCancelledForDeliveredAndNoGuarantee: No valid Guarantees found for CUE : &quot;+inChargeEvent.getBexuGkey());&#xA;      System.out.println(&quot;UpdateCUEsCancelledForDeliveredAndNoGuarantee: No valid Guarantees found for CUE : &quot;+inChargeEvent.getBexuGkey());&#xA;      return false;&#xA;    }&#xA;    System.out.println(&quot;UpdateCUEsCancelledForDeliveredAndNoGuarantee: valid guarantee found for CUE : &quot;+inChargeEvent.getBexuGkey());&#xA;    logInfo(&quot;UpdateCUEsCancelledForDeliveredAndNoGuarantee: valid guarantee found for CUE : &quot;+inChargeEvent.getBexuGkey());&#xA;    return true;&#xA;  }&#xA;&#xA;&#xA;  public static final String QUEUED = &quot;QUEUED&quot;;&#xA;  public static final String CANCELLED = &quot;CANCELLED&quot;;&#xA;  private static final Logger LOGGER = Logger.getLogger(UpdateCUEsCancelledForDeliveredAndNoGuarantee.class);&#xA;}&#xA;" />
<digital-asset id="GuaranteeValidation" short-description="GuaranteeValidation" is-pre-deployed="Y" groovy-code="import com.navis.argo.ArgoExtractField&#xA;import com.navis.argo.ArgoPropertyKeys&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.atoms.CreditStatusEnum&#xA;import com.navis.argo.business.atoms.GuaranteeOverrideTypeEnum&#xA;import com.navis.argo.business.atoms.GuaranteeTypeEnum&#xA;import com.navis.argo.business.atoms.PaymentTypeEnum&#xA;import com.navis.argo.business.extract.ChargeableUnitEvent&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.argo.util.XmlUtil&#xA;import com.navis.external.framework.ECallingContext&#xA;import com.navis.external.framework.entity.AbstractEntityLifecycleInterceptor&#xA;import com.navis.external.framework.entity.EEntityView&#xA;import com.navis.external.framework.util.EFieldChanges&#xA;import com.navis.external.framework.util.EFieldChangesView&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.portal.context.PortalApplicationContext&#xA;import com.navis.framework.presentation.internationalization.IMessageTranslatorProvider&#xA;import com.navis.framework.presentation.internationalization.MessageTranslator&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.util.internationalization.PropertyKey&#xA;import javax.xml.parsers.DocumentBuilder&#xA;import javax.xml.parsers.DocumentBuilderFactory&#xA;import org.w3c.dom.Document&#xA;import org.w3c.dom.Element&#xA;&#xA;/**&#xA; * This class contains custom code of Guarantee validation&#xA; *&#xA; * Note: This code is written for Maher's requirement. Please copy the code and modify as per specific customer requirement.&#xA; */&#xA;&#xA;public class GuaranteeValidation extends AbstractEntityLifecycleInterceptor {&#xA;&#xA;  @Override&#xA;  public void onCreate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges,&#xA;                       EFieldChanges inMoreFieldChanges) {&#xA;    ECallingContext context = this.getCallingContext();&#xA;    if (context != null) {&#xA;      GNTE_ACTION = (String) context.getAttribute(&quot;ACTION&quot;);&#xA;      processGuarantee(inEntity);&#xA;    }&#xA;  }&#xA;&#xA;  public void onUpdate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges) {&#xA;    ECallingContext context = this.getCallingContext();&#xA;    if (context != null) {&#xA;      if (context != null) {&#xA;        GNTE_ACTION = (String) context.getAttribute(&quot;ACTION&quot;);&#xA;        processGuarantee(inEntity);&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;  private void processGuarantee(EEntityView inEntity) {&#xA;    GuaranteeTypeEnum gnteType = inEntity.getField(ArgoExtractField.GNTE_GUARANTEE_TYPE);&#xA;    if (GuaranteeTypeEnum.OAC.equals(gnteType)) {&#xA;      guaranteeCustomerSpecific(inEntity);&#xA;    } else if (GuaranteeTypeEnum.WAIVER.equals(gnteType)) {&#xA;      waiverCustomerSpecific(inEntity);&#xA;    }&#xA;  }&#xA;&#xA;  private void guaranteeCustomerSpecific(EEntityView inEntity) throws BizViolation {&#xA;&#xA;    // 2010-05-18 psethuraman ARGO-24974: To check whether allowed to create guarantee for Customer Credit status, gnte payment type and gnte type.&#xA;    validToCreateGuarantee(inEntity);&#xA;    // First validate that the billable event (extract record) is in valid status.&#xA;    validateExtractRecordStatus(inEntity);&#xA;&#xA;    String id = inEntity.getField(ArgoExtractField.GNTE_GUARANTEE_ID);&#xA;    BizViolation bv = null;&#xA;    // if not waiver validate the amount should be &gt; 0&#xA;    if (!GuaranteeTypeEnum.WAIVER.equals(inEntity.getField(ArgoExtractField.GNTE_GUARANTEE_TYPE))) {&#xA;      Double amount = inEntity.getField(ArgoExtractField.GNTE_GUARANTEE_AMOUNT);&#xA;      if (amount != null &amp;&amp; !(amount &gt; 0.0)) {&#xA;        bv = BizViolation.create(ArgoPropertyKeys.BILLING_GUARANTEE_AMOUNT_SHOULD_NOT_BE_ZERO, bv, id);&#xA;        registerError(bv.getLocalizedMessage().toString() + inEntity);&#xA;      }&#xA;    }&#xA;&#xA;    String eventType = getGnteAppliedToEventId(inEntity);&#xA;    boolean isStorageOrReefer = STORAGE.equals(eventType) || REEFER.equals(eventType);&#xA;    // validate that end date should not be before start date for STORAGE and REEFER events&#xA;    if (isStorageOrReefer) {&#xA;      Date startDay = inEntity.getField(ArgoExtractField.GNTE_GUARANTEE_START_DAY);&#xA;      Date endDay = inEntity.getField(ArgoExtractField.GNTE_GUARANTEE_END_DAY);&#xA;      if (endDay.before(startDay)) {&#xA;        bv = BizViolation.create(ArgoPropertyKeys.BILLING_GUARANTEE_END_DATE_IS_BEFORE_START_DATE, bv, endDay, startDay, id);&#xA;        registerError(bv.getLocalizedMessage().toString() + inEntity);&#xA;      }&#xA;    }&#xA;&#xA;  }&#xA;&#xA;  private void waiverCustomerSpecific(EEntityView inEntity) throws BizViolation {&#xA;&#xA;    // First validate that the billable event (extract record) is in valid status.&#xA;    validateExtractRecordStatus(inEntity);&#xA;&#xA;    String id = inEntity.getField(ArgoExtractField.GNTE_GUARANTEE_ID);&#xA;    BizViolation bv = null;&#xA;&#xA;    String eventType = getGnteAppliedToEventId(inEntity);&#xA;    boolean isStorageOrReefer = STORAGE.equals(eventType) || REEFER.equals(eventType);&#xA;    // validate that end date should not be before start date for STORAGE and REEFER events&#xA;    if (isStorageOrReefer) {&#xA;      Date startDay = inEntity.getField(ArgoExtractField.GNTE_GUARANTEE_START_DAY);&#xA;      Date endDay = inEntity.getField(ArgoExtractField.GNTE_GUARANTEE_END_DAY);&#xA;      if (endDay.before(startDay)) {&#xA;        bv = BizViolation.create(ArgoPropertyKeys.BILLING_GUARANTEE_END_DATE_IS_BEFORE_START_DATE, bv, endDay, startDay, id);&#xA;        registerError(bv.getLocalizedMessage().toString() + inEntity);&#xA;      }&#xA;    }&#xA;&#xA;    GuaranteeTypeEnum guaranteeType = inEntity.getField(ArgoExtractField.GNTE_GUARANTEE_TYPE);&#xA;    GuaranteeOverrideTypeEnum gnteOverrideType = inEntity.getField(ArgoExtractField.GNTE_OVERRIDE_VALUE_TYPE);&#xA;    // Fixed rate waiver must have expiration date&#xA;    if (GuaranteeTypeEnum.WAIVER.equals(guaranteeType) &amp;&amp; GuaranteeOverrideTypeEnum.FIXED_PRICE.equals(gnteOverrideType)) {&#xA;      if (inEntity.getField(ArgoExtractField.GNTE_WAIVER_EXPIRATION_DATE) == null) {&#xA;        registerError(&quot;Fixed rate Waivers must have Guarantee waiver expiration date.&quot; + inEntity);&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;&#xA;  private void validateExtractRecordStatus(EEntityView inEntity) throws BizViolation {&#xA;    /**&#xA;     * Validate Extract record status.&#xA;     *&#xA;     * @param inGuarantee&#xA;     * @param inCreateOrUpdateOrVoid&#xA;     * @throws BizViolation&#xA;     */&#xA;    Boolean isStatusValid = Boolean.TRUE;&#xA;    Long gnteGkey = inEntity.getField(ArgoExtractField.GNTE_GKEY);&#xA;    Long cueGkey = inEntity.getField(ArgoExtractField.GNTE_APPLIED_TO_PRIMARY_KEY);&#xA;    ChargeableUnitEvent cue = (ChargeableUnitEvent) Roastery.getHibernateApi().load(ChargeableUnitEvent.class, cueGkey);&#xA;&#xA;    /**&#xA;     *  GUARANTEED or PRE_AUTHORIZE&#xA;     *  1. CUE event type STORAGE or REEFER:  The CUE status should be in QUEUED / PARTIAL status. Because customer would have paid for first few&#xA;     *     days after LFD. The remaining period is allowed to be guaranteed.&#xA;     *  2. GUARANTEE  CREATE - CUE status should be in QUEUED status&#xA;     *  3. GUARANTEE  UPDATE - CUE status should be in GUARANTEED status&#xA;     *  3. GUARANTEE  VOID - CUE status should be in GUARANTEED status&#xA;     * --------------------------------------------------------------------------------&#xA;     *  WAIVED for FREE OF CHARGE&#xA;     *  1. WAIVER  CREATE - CUE status should be in QUEUED status&#xA;     *  2. WAIVER  UPDATE - CUE status should be in CANCELLED status&#xA;     *  3. WAIVER  VOID - CUE status should be in CANCELLED status&#xA;     * --------------------------------------------------------------------------------&#xA;     *  WAIVED for FIXED PRICE etc., ( not FREE OF CHARGE). Guarantee record will be recorded for WAIVED record of non FREE_OF_CHARGE&#xA;     *  1. WAIVER  CREATE - CUE status should be in QUEUED status&#xA;     *  2. WAIVER  UPDATE - CUE status should be in QUEUED status&#xA;     *  3. WAIVER  VOID - CUE status should be in QUEUED status&#xA;     */&#xA;    if (cue != null) {&#xA;      if (cue.getBexuEventType().equals(STORAGE) || cue.getBexuEventType().equals(REEFER)) {&#xA;        if (cue.getBexuStatus().equals(QUEUED) || cue.getBexuStatus().equals(PARTIAL)) {&#xA;          isStatusValid = Boolean.TRUE;   //ARGO-21264&#xA;        } else {&#xA;          isStatusValid = Boolean.FALSE;&#xA;        }&#xA;      } else if ((GuaranteeTypeEnum.OAC.equals(inEntity.getField(ArgoExtractField.GNTE_GUARANTEE_TYPE))) ||&#xA;              (GuaranteeTypeEnum.CREDIT_PREAUTHORIZE.equals(inEntity.getField(ArgoExtractField.GNTE_GUARANTEE_TYPE)))) {&#xA;&#xA;        if (GNTE_ACTION.equals(CREATE)) {&#xA;          if (!cue.getBexuStatus().equals(QUEUED)) {&#xA;            isStatusValid = Boolean.FALSE;&#xA;          }&#xA;        } else if (GNTE_ACTION.equals(UPDATE)) {&#xA;          if (!cue.getBexuStatus().equals(GUARANTEED)) {&#xA;            isStatusValid = Boolean.FALSE;&#xA;          }&#xA;        } else if (GNTE_ACTION.equals(VOID)) {&#xA;          if (!cue.getBexuStatus().equals(GUARANTEED)) {&#xA;            isStatusValid = Boolean.FALSE;&#xA;          }&#xA;        }&#xA;      } else if ((GuaranteeTypeEnum.WAIVER.equals(inEntity.getField(ArgoExtractField.GNTE_GUARANTEE_TYPE))) &amp;&amp;&#xA;              ((GuaranteeOverrideTypeEnum.FREE_NOCHARGE).equals(inEntity.getField(ArgoExtractField.GNTE_GUARANTEE_TYPE)))) {&#xA;        if (GNTE_ACTION.equals(CREATE)) {&#xA;          if (!cue.getBexuStatus().equals(QUEUED)) {&#xA;            isStatusValid = Boolean.FALSE;&#xA;          }&#xA;        } else if (GNTE_ACTION.equals(UPDATE)) {&#xA;          if (!cue.getBexuStatus().equals(CANCELLED)) {&#xA;            isStatusValid = Boolean.FALSE;&#xA;          }&#xA;        } else if (GNTE_ACTION.equals(VOID)) {&#xA;          if (!cue.getBexuStatus().equals(CANCELLED)) {&#xA;            isStatusValid = Boolean.FALSE;&#xA;          }&#xA;        }&#xA;      } else if ((GuaranteeTypeEnum.WAIVER.equals(inEntity.getField(ArgoExtractField.GNTE_GUARANTEE_TYPE))) &amp;&amp;&#xA;              (!(GuaranteeOverrideTypeEnum.FREE_NOCHARGE).equals(inEntity.getField(ArgoExtractField.GNTE_OVERRIDE_VALUE_TYPE)))) {&#xA;        //Waived for FIXED price or Discounted rate. Equivalent (matching) Guarantee record will be created that will set the CUE status&#xA;        if (GNTE_ACTION.equals(CREATE)) {&#xA;          if (!cue.getBexuStatus().equals(QUEUED)) {&#xA;            isStatusValid = Boolean.FALSE;&#xA;          }&#xA;        } else if (GNTE_ACTION.equals(UPDATE)) {&#xA;          if (!cue.getBexuStatus().equals(QUEUED)) {&#xA;            isStatusValid = Boolean.FALSE;&#xA;          }&#xA;        } else if (GNTE_ACTION.equals(VOID)) {&#xA;          if (!cue.getBexuStatus().equals(QUEUED)) {&#xA;            isStatusValid = Boolean.FALSE;&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;    if (!isStatusValid) {&#xA;      BizViolation bv = BizViolation.create(ArgoPropertyKeys.ERROR_INVALID_CHARGEABLE_UNIT_EVENT_RECORD_STATUS, null, cue.toString(),&#xA;              cue.getBexuStatus());&#xA;      registerError(bv.getLocalizedMessage().toString() + inEntity);&#xA;    }&#xA;  }&#xA;&#xA;  private String getGnteAppliedToEventId(EEntityView inEntity) {&#xA;    String eventId = null;&#xA;    Long extractGkey = inEntity.getField(ArgoExtractField.GNTE_APPLIED_TO_PRIMARY_KEY);&#xA;    ChargeableUnitEvent cue = (ChargeableUnitEvent) Roastery.getHibernateApi().load(ChargeableUnitEvent.class, extractGkey);&#xA;    if (cue != null) {&#xA;      eventId = cue.getBexuEventType();&#xA;    }&#xA;    return eventId;&#xA;  }&#xA;&#xA;  /**&#xA;   * Parse the below specified XML, checks whether authorised to create Guarantee.&#xA;   * Throws error, if not allowed.&#xA;   */&#xA;  // 2010-05-18 psethuraman ARGO-24974: To check whether allowed to create guarantee for Customer Credit status, gnte payment type and gnte type.&#xA;  private void validToCreateGuarantee(EEntityView inEntity) throws BizViolation {&#xA;&#xA;    XML_STRING = XmlUtil.XML_HEADER + GNTE_VALIDATTION_START_TAG + OAC_XML + CASH_XML + CHECK_XML + GNTE_VALIDATTION_END_TAG;&#xA;&#xA;    ScopedBizUnit customer = inEntity.getField(ArgoExtractField.GNTE_GUARANTEE_CUSTOMER);&#xA;    PaymentTypeEnum paymentType = inEntity.getField(ArgoExtractField.GNTE_PAYMENT_TYPE);&#xA;    GuaranteeTypeEnum guaranteeType = inEntity.getField(ArgoExtractField.GNTE_GUARANTEE_TYPE);&#xA;&#xA;    Element xmlRootElm;&#xA;    try {&#xA;      DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();&#xA;      DocumentBuilder builder = factory.newDocumentBuilder();&#xA;      InputStream is = new ByteArrayInputStream(XML_STRING.getBytes(&quot;UTF-8&quot;));&#xA;      Document doc = builder.parse(is);&#xA;      xmlRootElm = doc.getDocumentElement();&#xA;    } catch (Exception e) {&#xA;      throw BizFailure.create(&quot;Unable to parse XML&quot; + e);&#xA;    }&#xA;&#xA;    BizViolation bv = null;&#xA;&#xA;    if (customer != null) {&#xA;      CreditStatusEnum creditStatus = customer.getBzuCreditStatus();&#xA;      if (creditStatus != null) {&#xA;&#xA;        /**&#xA;         * xpath format : //cust-credit-status[@value='OAC']//gnte-payment-type[@value='CHECK']//gnte-type[@value='OAC']&#xA;         * */&#xA;        String xPath = &quot;//&quot; + CUS_CREDIT_STATUS_TAG + &quot;[@value='&quot; + creditStatus.getKey() + &quot;']//&quot; + GNTE_PAYMENT_TYPE_TAG +&#xA;                &quot;[@value='&quot; + paymentType.getKey() + &quot;']//&quot; + GNTE_TYPE_TAG + &quot;[@value='&quot; + guaranteeType.getKey() + &quot;']&quot;;&#xA;&#xA;        Element element = XmlUtil.getXmlElement(xmlRootElm, xPath);&#xA;        if (element != null &amp;&amp; NO.equalsIgnoreCase(element.getAttribute(IS_ALLOWED_ATTR))) {&#xA;          bv = BizViolation.create(ArgoPropertyKeys.BILLING_INVALID_CREDIT_PAYMENT_GUARANTEE_TYPE, bv,&#xA;                  getMessage(guaranteeType.getDescriptionPropertyKey()), getMessage(creditStatus.getDescriptionPropertyKey()),&#xA;                  getMessage(paymentType.getDescriptionPropertyKey()));&#xA;          registerError(bv.getLocalizedMessage());&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;  // get the localised error message&#xA;  private String getMessage(PropertyKey inPropertyKey) {&#xA;    IMessageTranslatorProvider translatorProvider =&#xA;      (IMessageTranslatorProvider) PortalApplicationContext.getBean(IMessageTranslatorProvider.BEAN_ID);&#xA;    MessageTranslator translator = translatorProvider.getMessageTranslator(ContextHelper.getThreadUserContext().getUserLocale());&#xA;    return translator.getMessage(inPropertyKey);&#xA;  }&#xA;&#xA;  // CUSTOMER SPECIFIC GUARANTEE VALIDATION, USER CAN CHANGE THE BELOW XML VALUE OF (OAC_XML, CASH_XML AND CHECK_XML) BASED ON THEIR REQUIREMENTS&#xA;  /* XML FORMAT&#xA;   *  &lt;guarantee-validation-map&gt;&#xA;   *    &lt;cust-credit-status value=&quot;OAC&quot;&gt;&#xA;   *      &lt;gnte-payment-type value=&quot;CREDIT&quot;&gt;&#xA;   *        &lt;gnte-type value=&quot;OAC&quot; is-allowed=&quot;NO&quot;/&gt;&#xA;   *        &lt;gnte-type value=&quot;CREDIT_PREAUTHORIZE&quot; is-allowed=&quot;YES&quot;/&gt;&#xA;   *        &lt;gnte-type value=&quot;PRE_PAY&quot; is-allowed=&quot;NO&quot;/&gt;&#xA;   *        &lt;gnte-type value=&quot;PAID&quot; is-allowed=&quot;YES&quot;/&gt;&#xA;   *      &lt;/gnte-payment-type&gt;&#xA;   *      ..,&#xA;   *    &lt;/cust-credit-status&gt;&#xA;   *    ..,&#xA;   *  &lt;/guarantee-validation-map&gt;&#xA;   */&#xA;&#xA;  // CUSTOMER SPECIFIC GUARANTEE VALIDATION, USER CAN CHANGE VALUE FOR &quot;is-allowed&quot; ATTRIBUTE WITH (yes/no), BASED ON THEIR REQUIREMENTS&#xA;  private static final String OAC_XML = &quot;&lt;cust-credit-status value=\&quot;OAC\&quot;&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;        &lt;gnte-payment-type value=\&quot;CREDIT\&quot;&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;OAC\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;CREDIT_PREAUTHORIZE\&quot; is-allowed=\&quot;YES\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PRE_PAY\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PAID\&quot; is-allowed=\&quot;YES\&quot;/&gt;\n&quot; +&#xA;          &quot;        &lt;/gnte-payment-type&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;        &lt;gnte-payment-type value=\&quot;CHECK\&quot;&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;OAC\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;CREDIT_PREAUTHORIZE\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PRE_PAY\&quot; is-allowed=\&quot;YES\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PAID\&quot; is-allowed=\&quot;YES\&quot;/&gt;\n&quot; +&#xA;          &quot;        &lt;/gnte-payment-type&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;        &lt;gnte-payment-type value=\&quot;MONEY_ORDER\&quot;&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;OAC\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;CREDIT_PREAUTHORIZE\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PRE_PAY\&quot; is-allowed=\&quot;YES\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PAID\&quot; is-allowed=\&quot;YES\&quot;/&gt;\n&quot; +&#xA;          &quot;        &lt;/gnte-payment-type&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;        &lt;gnte-payment-type value=\&quot;CASH\&quot;&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;OAC\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;CREDIT_PREAUTHORIZE\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PRE_PAY\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PAID\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;        &lt;/gnte-payment-type&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;        &lt;gnte-payment-type value=\&quot;ON_ACCOUNT\&quot;&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;OAC\&quot; is-allowed=\&quot;YES\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;CREDIT_PREAUTHORIZE\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PRE_PAY\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PAID\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;        &lt;/gnte-payment-type&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;        &lt;gnte-payment-type value=\&quot;WIRE_TRANSFER\&quot;&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;OAC\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;CREDIT_PREAUTHORIZE\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PRE_PAY\&quot; is-allowed=\&quot;YES\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PAID\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;        &lt;/gnte-payment-type&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;        &lt;gnte-payment-type value=\&quot;FREE\&quot;&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;OAC\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;CREDIT_PREAUTHORIZE\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PRE_PAY\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PAID\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;        &lt;/gnte-payment-type&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;    &lt;/cust-credit-status&gt;&quot;;&#xA;&#xA;  // CUSTOMER SPECIFIC GUARANTEE VALIDATION, USER CAN CHANGE VALUE FOR &quot;is-allowed&quot; ATTRIBUTE WITH (yes/no), BASED ON THEIR REQUIREMENTS&#xA;  private static final String CASH_XML = &quot;&lt;cust-credit-status value=\&quot;CASH\&quot;&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;        &lt;gnte-payment-type value=\&quot;CREDIT\&quot;&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;OAC\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;CREDIT_PREAUTHORIZE\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PRE_PAY\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PAID\&quot; is-allowed=\&quot;YES\&quot;/&gt;\n&quot; +&#xA;          &quot;        &lt;/gnte-payment-type&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;        &lt;gnte-payment-type value=\&quot;CHECK\&quot;&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;OAC\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;CREDIT_PREAUTHORIZE\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PRE_PAY\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PAID\&quot; is-allowed=\&quot;YES\&quot;/&gt;\n&quot; +&#xA;          &quot;        &lt;/gnte-payment-type&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;        &lt;gnte-payment-type value=\&quot;MONEY_ORDER\&quot;&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;OAC\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;CREDIT_PREAUTHORIZE\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PRE_PAY\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PAID\&quot; is-allowed=\&quot;YES\&quot;/&gt;\n&quot; +&#xA;          &quot;        &lt;/gnte-payment-type&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;        &lt;gnte-payment-type value=\&quot;CASH\&quot;&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;OAC\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;CREDIT_PREAUTHORIZE\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PRE_PAY\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PAID\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;        &lt;/gnte-payment-type&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;        &lt;gnte-payment-type value=\&quot;ON_ACCOUNT\&quot;&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;OAC\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;CREDIT_PREAUTHORIZE\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PRE_PAY\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PAID\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;        &lt;/gnte-payment-type&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;        &lt;gnte-payment-type value=\&quot;WIRE_TRANSFER\&quot;&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;OAC\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;CREDIT_PREAUTHORIZE\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PRE_PAY\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PAID\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;        &lt;/gnte-payment-type&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;        &lt;gnte-payment-type value=\&quot;FREE\&quot;&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;OAC\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;CREDIT_PREAUTHORIZE\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PRE_PAY\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PAID\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;        &lt;/gnte-payment-type&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;    &lt;/cust-credit-status&gt;&quot;;&#xA;&#xA;  // CUSTOMER SPECIFIC GUARANTEE VALIDATION, USER CAN CHANGE VALUE FOR &quot;is-allowed&quot; ATTRIBUTE WITH (yes/no), BASED ON THEIR REQUIREMENTS&#xA;  private static final String CHECK_XML = &quot;&lt;cust-credit-status value=\&quot;CHECK\&quot;&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;        &lt;gnte-payment-type value=\&quot;CREDIT\&quot;&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;OAC\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;CREDIT_PREAUTHORIZE\&quot; is-allowed=\&quot;YES\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PRE_PAY\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PAID\&quot; is-allowed=\&quot;YES\&quot;/&gt;\n&quot; +&#xA;          &quot;        &lt;/gnte-payment-type&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;        &lt;gnte-payment-type value=\&quot;CHECK\&quot;&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;OAC\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;CREDIT_PREAUTHORIZE\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PRE_PAY\&quot; is-allowed=\&quot;YES\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PAID\&quot; is-allowed=\&quot;YES\&quot;/&gt;\n&quot; +&#xA;          &quot;        &lt;/gnte-payment-type&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;        &lt;gnte-payment-type value=\&quot;MONEY_ORDER\&quot;&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;OAC\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;CREDIT_PREAUTHORIZE\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PRE_PAY\&quot; is-allowed=\&quot;YES\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PAID\&quot; is-allowed=\&quot;YES\&quot;/&gt;\n&quot; +&#xA;          &quot;        &lt;/gnte-payment-type&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;        &lt;gnte-payment-type value=\&quot;CASH\&quot;&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;OAC\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;CREDIT_PREAUTHORIZE\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PRE_PAY\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PAID\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;        &lt;/gnte-payment-type&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;        &lt;gnte-payment-type value=\&quot;ON_ACCOUNT\&quot;&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;OAC\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;CREDIT_PREAUTHORIZE\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PRE_PAY\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PAID\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;        &lt;/gnte-payment-type&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;        &lt;gnte-payment-type value=\&quot;WIRE_TRANSFER\&quot;&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;OAC\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;CREDIT_PREAUTHORIZE\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PRE_PAY\&quot; is-allowed=\&quot;YES\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PAID\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;        &lt;/gnte-payment-type&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;        &lt;gnte-payment-type value=\&quot;FREE\&quot;&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;OAC\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;CREDIT_PREAUTHORIZE\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PRE_PAY\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;            &lt;gnte-type value=\&quot;PAID\&quot; is-allowed=\&quot;NO\&quot;/&gt;\n&quot; +&#xA;          &quot;        &lt;/gnte-payment-type&gt;\n&quot; +&#xA;          &quot;\n&quot; +&#xA;          &quot;    &lt;/cust-credit-status&gt;&quot;;&#xA;&#xA;  //DO NOT CHANGE&#xA;  private static final String GNTE_VALIDATTION_START_TAG = &quot;&lt;guarantee-validation-map&gt;&quot;;&#xA;  private static final String GNTE_VALIDATTION_END_TAG = &quot;&lt;/guarantee-validation-map&gt;&quot;;&#xA;  private static final String CUS_CREDIT_STATUS_TAG = &quot;cust-credit-status&quot;;&#xA;  private static final String GNTE_PAYMENT_TYPE_TAG = &quot;gnte-payment-type&quot;;&#xA;  private static final String GNTE_TYPE_TAG = &quot;gnte-type&quot;;&#xA;  private static final String VALUE_ATTR = &quot;value&quot;;&#xA;  private static final String IS_ALLOWED_ATTR = &quot;is-allowed&quot;;&#xA;  private static String XML_STRING = &quot;&quot;;&#xA;  private static final String YES = &quot;YES&quot;;&#xA;  private static final String NO = &quot;NO&quot;;&#xA;&#xA;  public static final String STORAGE = &quot;STORAGE&quot;;&#xA;  public static final String REEFER = &quot;REEFER&quot;;&#xA;  public static final String ACTION = &quot;action&quot;;&#xA;  public static final String CREATE = &quot;CREATE&quot;;&#xA;  public static final String UPDATE = &quot;UPDATE&quot;;&#xA;  public static final String VOID = &quot;VOID&quot;;&#xA;  public static final String GUARANTEED = &quot;GUARANTEED&quot;;&#xA;  public static final String CANCELLED = &quot;CANCELLED&quot;;&#xA;  public static final String QUEUED = &quot;QUEUED&quot;;&#xA;  public static final String PARTIAL = &quot;PARTIAL&quot;;&#xA;  private static String GNTE_ACTION;&#xA;}&#xA;" />
<digital-asset id="AutoVoidingExpiredWaivers" short-description="AutoVoidingExpiredWaivers" is-pre-deployed="Y" groovy-code="import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.atoms.BillingExtractEntityEnum&#xA;import com.navis.argo.business.extract.Guarantee&#xA;import com.navis.framework.esb.client.ESBClientHelper&#xA;import com.navis.framework.esb.server.FrameworkMessageQueues&#xA;import com.navis.framework.portal.UserContext&#xA;import org.apache.commons.lang.StringUtils&#xA;import org.apache.log4j.Logger&#xA;import com.navis.argo.business.extract.ChargeableUnitEvent&#xA;import com.navis.inventory.business.units.GuaranteeManager&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.security.business.user.BaseUser&#xA;&#xA;/**&#xA; * This is a Pre-Deployable Groovy Plug-in for Auto-voiding Expired Waivers exclude FREE_NOCHARGE.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:tramakrishnan@navis.com&quot;&gt; tramakrishnan&lt;/a&gt; Jul 22, 2009, 1:01:08 PM&#xA; */&#xA;public class AutoVoidingExpiredWaivers extends GroovyApi {&#xA;  public void execute(Map parameters) {&#xA;    logInfo(&quot;Start execution of Groovy Plug-in: AutoVoidingExpiredWaivers&quot;);&#xA;    System.out.println(&quot;Start execution of Groovy Plug-in: AutoVoidingExpiredWaivers&quot;);&#xA;&#xA;    UserContext context = ContextHelper.getThreadUserContext();&#xA;    Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;    List waivers = Guarantee.getListOfExpiredFixedWaiverAndNotGuaranteed(timeNow, BillingExtractEntityEnum.INV);&#xA;&#xA;    if (waivers.isEmpty()) {&#xA;      logInfo(&quot;No records matched for Groovy Plug-in: AutoVoidingExpiredWaivers&quot;);&#xA;      System.out.println(&quot;No records matched for Groovy Plug-in: AutoVoidingExpiredWaivers&quot;);&#xA;    } else {&#xA;&#xA;      for (Object object: waivers) {&#xA;        Guarantee waiver = (Guarantee) object;&#xA;&#xA;        // Set voided/expired date to timeNow&#xA;        waiver.setGnteVoidedOrExpiredDate(timeNow);&#xA;        //2010-04-20 psethuraman ARGO-25283 update email sent date. &#xA;        waiver.setGnteVoidedEmailSentDate(timeNow);  &#xA;        ChargeableUnitEvent cue = ChargeableUnitEvent.getCUErecordForGuarantee(waiver);&#xA;        if (cue != null) {&#xA;          // 1.  Set CUE.Is Override Amount = FALSE&#xA;          cue.setBexuIsOverrideValue(Boolean.FALSE);&#xA;          // 2. Set CUE.Override Type = NULL&#xA;          cue.setBexuOverrideValueType(null);&#xA;          // 3. Set CUE.Override Value = NULL&#xA;          cue.setBexuOverrideValue(null);&#xA;        }&#xA;&#xA;        // If (there is a Guarantee associated with the Waiver) and (Guarantee.Date/Time Voided = NULL) set Guarantee.Date/Time Voided = Now&#xA;        Guarantee associatedGnte = waiver.getGnteRelatedGuarantee();&#xA;        if (associatedGnte != null &amp;&amp; associatedGnte.getGnteVoidedOrExpiredDate() == null) {&#xA;          String associatedGnteId = associatedGnte.getGnteGuaranteeId();&#xA;          logInfo(&quot;Voiding the related guarantee : &quot; + associatedGnteId);&#xA;          System.out.println(&quot;Voiding the related guarantee : &quot; + associatedGnteId);&#xA;&#xA;          associatedGnte.setGnteVoidedOrExpiredDate(timeNow);&#xA;          try {&#xA;            // Void the associated Guarantee&#xA;            GuaranteeManager.voidGuarantee(associatedGnte);&#xA;          } catch (Exception e) {&#xA;            LOGGER.error(&quot;Exeception Occured while voiding the related guarantee : &quot; + associatedGnteId);&#xA;            System.out.println(&quot;Exeception Occured while voiding the related guarantee : &quot; + associatedGnteId);&#xA;          }&#xA;        }&#xA;&#xA;        // collect data for email content&#xA;        String waiverId = waiver.getGnteGuaranteeId();&#xA;        String unitId = waiver.getGnteAppliedToNaturalKey();&#xA;        String eventId = waiver.getGnteAppliedToEventId();&#xA;        Date gnteCreated = waiver.getGnteCreated();&#xA;        ScopedBizUnit guarantor = waiver.getGnteGuaranteeCustomer();&#xA;        String guarantorId = guarantor != null ? guarantor.getBzuId() : null;&#xA;        Date waiverExpirationDate = waiver.getGnteWaiverExpirationDate();&#xA;        Date startDay = waiver.getGnteGuaranteeStartDay();&#xA;        Date endDay = waiver.getGnteGuaranteeEndDay();&#xA;        String custReferenceId = waiver.getGnteCustomerReferenceId();&#xA;        Double amount = waiver.getGnteGuaranteeAmount();&#xA;        String notes = waiver.getGnteNotes();&#xA;&#xA;        // For voided guarantee - if GnteN4user id is not null then fetch the email id from Security - user&#xA;        // if there is no n4user for GnteN4user id then get the email id from guarantee itself (external users)&#xA;        String emailToId = null;&#xA;        if (waiver.getGnteN4UserId() != null) {&#xA;          BaseUser user = BaseUser.findBaseUser(waiver.getGnteN4UserId());&#xA;          if (user != null) {&#xA;            if (user.getBuserEMail() != null) {&#xA;              emailToId = user.getBuserEMail();&#xA;            } else {&#xA;              logInfo(&quot;SendEmailForVoidedGuarantees: No email Id for the SN4 user &quot; + waiver.getGnteN4UserId());&#xA;              System.out.println(&quot;SendEmailForVoidedGuarantees: No email Id for the SN4 user &quot; + waiver.getGnteN4UserId());&#xA;            }&#xA;          } else {&#xA;            logInfo(&quot;SendEmailForVoidedGuarantees: &quot; + waiver.getGnteN4UserId() + &quot; is not an SN4 user.&quot;);&#xA;            System.out.println(&quot;SendEmailForVoidedGuarantees: &quot; + waiver.getGnteN4UserId() + &quot; is not an SN4 user.&quot;);&#xA;&#xA;            emailToId = waiver.getGnteExternalEmailAddress();&#xA;          }&#xA;        } else {&#xA;          emailToId = waiver.getGnteExternalEmailAddress();&#xA;        }&#xA;&#xA;        String[] noAttachment = &quot;&quot;;&#xA;&#xA;        // Subject: Waiver Confirmation# 00000 for container # ABCD1234567 HAS EXPIRED as of (today�s date).&#xA;        String subject = &quot;Waiver Confirmation # (ID) &quot; + waiverId + &quot; for container # '&quot; + unitId + &quot;' HAS EXPIRED as of &quot; + timeNow + &quot;.&quot;;&#xA;&#xA;        // Create email message body&#xA;        String msgBody = &quot;\n Please note that the subject waiver has expired and will need to be reprocessed.\n &quot; +&#xA;                &quot;\n Container               : &quot; + unitId +&#xA;                &quot;\n Waiver for              : &quot; + eventId +&#xA;                &quot;\n Waiver Created Date     : &quot; + gnteCreated +&#xA;                &quot;\n Confirmation # (ID)     : &quot; + waiverId +&#xA;                &quot;\n Guarantor               : &quot; + guarantorId +&#xA;                &quot;\n Authorized By           : &quot; + guarantorId +&#xA;                &quot;\n Waiver Amount           : &quot; + amount +&#xA;                &quot;\n Waiver Expiration Date  : &quot; + waiverExpirationDate +&#xA;                &quot;\n Reference #(ID)         : &quot; + custReferenceId +&#xA;                &quot;\n Remarks                 : &quot; + notes + &quot;\n &quot;;&#xA;&#xA;        if (emailToId != null &amp;&amp; !StringUtils.isEmpty(emailToId)) {&#xA;          try {&#xA;            ESBClientHelper.sendEmailAttachments(context, FrameworkMessageQueues.EMAIL_QUEUE, emailToId, &quot;rthandavarayan@zebra.com&quot;, subject, msgBody,&#xA;                    noAttachment);&#xA;            logInfo(&quot;Waiver Voided email sent to 'Waiver SN4 User Id's email address '&quot; + emailToId + &quot;' for '&quot; + waiverId + &quot;' on &quot; + timeNow + &quot;'.&quot;);&#xA;            System.out.println(&quot;Waiver Voided email sent to 'Waiver SN4 User Id's email address '&quot; + emailToId + &quot;' for '&quot; + waiverId + &quot;' on &quot; + timeNow + &quot;'.&quot;);&#xA;          } catch (Exception e) {&#xA;            LOGGER.error(e.getMessage());&#xA;            System.out.println(e.getMessage());&#xA;          }&#xA;        } else {&#xA;          // Log if no e-mail Id found in for guarantor&#xA;          logWarn(subject + &quot;\n Details : &quot; + msgBody);&#xA;          System.out.println(subject + &quot;\n Details : &quot; + msgBody);&#xA;        }&#xA;      }&#xA;    }&#xA;    logInfo(&quot;End execution of Groovy Plug-in: AutoVoidingExpiredWaivers&quot;);&#xA;    System.out.println(&quot;End execution of Groovy Plug-in: AutoVoidingExpiredWaivers&quot;);&#xA;  }&#xA;&#xA;  private static final Logger LOGGER = Logger.getLogger(AutoVoidingExpiredWaivers.class);&#xA;}&#xA;" />
<digital-asset id="SendWebServiceRequestToCreateBatchInvoiceRecords" short-description="SendWebServiceRequestToCreateBatchInvoiceRecords" is-pre-deployed="Y" groovy-code="import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.framework.util.DateUtil&#xA;import com.navis.vessel.business.WebServiceRequestToBilling&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;import com.navis.vessel.business.schedule.VesselVisitLine&#xA;import java.text.SimpleDateFormat&#xA;import org.jdom.Element&#xA;import org.jdom.Text&#xA;&#xA;/**&#xA; * Created by IntelliJ IDEA.&#xA; * User: murali raghavachari&#xA; * Date: Dec 5, 2008&#xA; * Time: 12:06:33 PM&#xA; *&#xA; */&#xA;class SendWebServiceRequestToCreateBatchInvoiceRecords {&#xA;  public void execute(event) {&#xA;    println(&quot;Start: SendWebServiceRequestToCreateBatchInvoiceRecords&quot;);&#xA;    TimeZone timeZone = ContextHelper.getThreadUserTimezone();&#xA;    Calendar calendar = Calendar.getInstance(timeZone);&#xA;    //********************************************************************************&#xA;    // Please replace the following values as per your N4 Billing setup and requireemnt&#xA;    //********************************************************************************&#xA;    String invoiceClass = &quot;Vessel&quot;;   //  Replace with appropriate class name as defined in N4 Billing for Customer Invoice Type&#xA;    String InvoiceTypeId = &quot;&quot;; // Replace with approprieate Invoice Type id. If Invoice Type is sepecified then there is no need of Invoice Class&#xA;    String currencyId = &quot;USD&quot;;&#xA;    String remark = null;  // Enter remark if any&#xA;    String batchDescription = null; // Default descr if not specified &quot;Vessel visit &quot; + visitId + &quot; created from SPARCS N4 WebService request&quot;&#xA;    Date contractEffectiveDate = calendar.getTime();&#xA;    SimpleDateFormat DATE_TIME_FORMAT = new SimpleDateFormat(DateUtil.DATE_TIME_FORMAT);&#xA;    String contractEffectiveDateStr = DATE_TIME_FORMAT.format(contractEffectiveDate);&#xA;    VesselVisitDetails vvDetail = (VesselVisitDetails) event.entity&#xA;    String visitId = vvDetail.getCvdCv().getCvId();&#xA;    Set vvdLines = vvDetail.getVvdVvlineSet();&#xA;    Iterator itr = vvdLines.iterator();&#xA;    while (itr.hasNext()) {&#xA;      // now format the XML for each vessel operating line&#xA;      VesselVisitLine vvdLine = (VesselVisitLine) itr.next();&#xA;      ScopedBizUnit vvLineBizUnit = vvdLine.getVvlineBizu();&#xA;      String LineId = vvLineBizUnit.getBzuId();&#xA;      String contractCustomerId = LineId;   // assigned the vessel operating line as contract customer&#xA;      String payeeCustomerId = LineId;       // assigned the vessel operating line as payee customer&#xA;      String payeeCustomerBizRole = &quot;LINEOP&quot;;&#xA;      String customerCustomerBizRole = &quot;LINEOP&quot;;&#xA;      // The parameter list chosen by the N4 Billing is unique to each Customer site.&#xA;      // The element name should match with the ChargeableMarineEvent reportable entity external tag name.&#xA;      // This XML is embaded into the root XML in WebServiceRequestToBilling.SendWebServiceRequestToCreateBatchInvoiceRecords method.&#xA;      Element parmGroupElem = new Element(&quot;batchInvoiceParameter&quot;);&#xA;      parmGroupElem.addContent(new Element(&quot;IbId&quot;).addContent(new Text(visitId)));&#xA;      parmGroupElem.addContent(new Element(&quot;LineOperatorId&quot;).addContent(new Text(LineId)));&#xA;      WebServiceRequestToBilling webRequestBilling = new WebServiceRequestToBilling();&#xA;      String response = webRequestBilling.sendWebServiceRequestToCreateBatchInvoiceRecords(vvDetail, vvLineBizUnit, invoiceClass,&#xA;              contractCustomerId, customerCustomerBizRole, payeeCustomerId, payeeCustomerBizRole, currencyId, remark, contractEffectiveDateStr,&#xA;              batchDescription, parmGroupElem);&#xA;      println(&quot;Response : &quot; + response);&#xA;    }&#xA;    println(&quot;End: SendWebServiceRequestToCreateBatchInvoiceRecords&quot;);&#xA;  }&#xA;}&#xA;" />
<digital-asset id="GenerateVACISInspectionInvoices" short-description="GenerateVACISInspectionInvoices" is-pre-deployed="Y" groovy-code="import com.navis.argo.ArgoExtractEntity&#xA;import com.navis.argo.ArgoExtractField&#xA;import com.navis.argo.ArgoPropertyKeys&#xA;import com.navis.argo.BillingTransactionDocument&#xA;import com.navis.argo.BillingTransactionDocument.BillingTransaction&#xA;import com.navis.argo.BillingTransactionsDocument&#xA;import com.navis.argo.BillingTransactionsDocument.BillingTransactions&#xA;import com.navis.argo.BillingTransactionsDocument.Factory&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.EdiInvoice&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.atoms.BillingExtractEntityEnum&#xA;import com.navis.argo.business.extract.ChargeableUnitEvent&#xA;import com.navis.argo.business.extract.Guarantee&#xA;import com.navis.argo.business.extract.billing.ConfigurationProperties&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.argo.portal.BillingWsApiConsts&#xA;import com.navis.argo.util.FileUtil&#xA;import com.navis.argo.util.XmlUtil&#xA;import com.navis.argo.webservice.types.v1_0.GenericInvokeResponseWsType&#xA;import com.navis.argo.webservice.types.v1_0.MessageType&#xA;import com.navis.argo.webservice.types.v1_0.QueryResultType&#xA;import com.navis.argo.webservice.types.v1_0.ResponseType&#xA;import com.navis.argo.webservice.types.v1_0.ScopeCoordinateIdsWsType&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.esb.client.ESBClientHelper&#xA;import com.navis.framework.esb.server.FrameworkMessageQueues&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.inventory.InventoryPropertyKeys&#xA;import com.navis.inventory.business.api.UnitStorageManager&#xA;import com.navis.www.services.argoservice.ArgoServiceLocator&#xA;import com.navis.www.services.argoservice.ArgoServicePort&#xA;import java.rmi.RemoteException&#xA;import javax.xml.rpc.ServiceException&#xA;import javax.xml.rpc.Stub&#xA;import org.apache.commons.lang.StringUtils&#xA;import org.apache.xmlbeans.XmlException&#xA;import org.jdom.Document&#xA;import org.jdom.Element&#xA;import org.jdom.Text&#xA;import com.navis.argo.business.atoms.GuaranteeTypeEnum&#xA;&#xA;public class GenerateVACISInspectionInvoices extends GroovyApi {&#xA;&#xA;  public void execute(Map parameters) {&#xA;&#xA;    logInfo(&quot;Groovy : GenerateVACISInspectionInvoices starts to send email notification for VACIS Inspection events with generated invoices attached !&quot;);&#xA;    System.out.println(&quot;Groovy : GenerateVACISInspectionInvoices starts to send email notification for VACIS Inspection events with generated invoices attached !&quot;);&#xA;&#xA;    UserContext context = ContextHelper.getThreadUserContext();&#xA;    Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#xA;    /**&#xA;     * User modifyable values&#xA;     */&#xA;    String eventType = &quot;VACIS INSPECTION&quot;;&#xA;    String fromEmailId = &quot;rthandavarayan@zebra.com&quot;;&#xA;    String invoiceTypeID = &quot;VACIS EXAM&quot;;&#xA;    String currencyId = &quot;USD&quot;;&#xA;    boolean detailedTracing = false;&#xA;    String effectiveDateType = &quot;Use Tariff Effective on performed date&quot;;&#xA;    String unitId = &quot;&quot;;&#xA;    String status = GUARANTEED;&#xA;    String ufvFlexDateFeildId1 = ArgoExtractField.BEXU_FLEX_DATE01.getFieldId();&#xA;    String ufvFlexDateFeildId2 = ArgoExtractField.BEXU_FLEX_DATE02.getFieldId();&#xA;&#xA;    // ------------ Do not change anything below  -------------------&#xA;    String fcyId = &quot;&quot;;&#xA;    Date effDate = null;&#xA;    String payeeCustomerId = null;&#xA;    String contractCustomerId = null;&#xA;    String guaranteeId = null;&#xA;&#xA;&#xA;    // get the chargeable unit events with eventType = VACIS_INSPECTION and status = GUARANTEED&#xA;    List unitEvents = getCUEsFor(eventType, status);&#xA;&#xA;    if (unitEvents.isEmpty()) {&#xA;      println(&quot;Groovy : GenerateVACISInspectionInvoices : No chargeable events exists!&quot;)&#xA;      return;&#xA;    }&#xA;&#xA;    for (ChargeableUnitEvent event: unitEvents) {&#xA;      // get the equipment/unit id from the event&#xA;      unitId = event.getBexuEqId();&#xA;&#xA;      Guarantee guarantee = getGuarantee(event);&#xA;      if (guarantee != null) {&#xA;        try {&#xA;&#xA;          Element element = buildGetInvoiceByInvTypeIdForUnitElement(invoiceTypeID, guarantee.getGnteGuaranteeCustomer(), null,&#xA;                  currencyId, null, guarantee, event);&#xA;          appendBillToAddress(element, guarantee);&#xA;          appendFlexFieldDetails(element, guarantee);&#xA;          EdiInvoice ediInvoice = getInvoiceByInvTypeIdForUnit(element);&#xA;          if (ediInvoice != null) {&#xA;            // Compose subject message&#xA;            String subject = eventType + &quot; Invoice for UNIT:&quot; + unitId;&#xA;&#xA;            logInfo(subject + &quot; generated sucessfully !&quot;);&#xA;            System.out.println(subject + &quot; generated sucessfully !&quot;);&#xA;&#xA;            try {&#xA;              UnitStorageManager manager = (UnitStorageManager) Roastery.getBean(UnitStorageManager.BEAN_ID);&#xA;              String invoiceReportUrlWithType = manager.getInvoiceReportUrl(ediInvoice.getGkey());&#xA;&#xA;              try {&#xA;                String fileName = eventType + &quot;InvoiceFor&quot; + unitId;&#xA;                File reportTempFile = getFile(invoiceReportUrlWithType, fileName);&#xA;&#xA;                String[] attachment = new String[1];&#xA;                String attachmentPrefix = &quot;file:&quot;;&#xA;                if (reportTempFile != null) {&#xA;                  attachment[0] = attachmentPrefix + reportTempFile.getAbsolutePath();&#xA;                } else {&#xA;                  attachment[0] = &quot;&quot;;&#xA;                }&#xA;&#xA;                String emailToId = ediInvoice.getInvoiceAddress() != null ? ediInvoice.getInvoiceAddress().getEmailAddress() : null;&#xA;                String msgBody = &quot;Please find &quot; + subject + &quot; attached.&quot;;&#xA;&#xA;                if (emailToId != null &amp;&amp; !StringUtils.isEmpty(emailToId)) {&#xA;                  try {&#xA;                    ESBClientHelper.sendEmailAttachments(context, FrameworkMessageQueues.EMAIL_QUEUE, emailToId, &quot;rthandavarayan@zebra.com&quot;, subject, msgBody, attachment);&#xA;                    logInfo(&quot;Groovy : GenerateVACISInspectionInvoices &quot; + subject + &quot;' &quot; + emailToId + &quot;' on &quot; + timeNow + &quot;.&quot;);&#xA;                    System.out.println(&quot;Groovy : GenerateVACISInspectionInvoices &quot; + subject + &quot;' &quot; + emailToId + &quot;' on &quot; + timeNow + &quot;.&quot;);&#xA;                  } catch (Exception e) {&#xA;                    LOGGER.error(e.getMessage());&#xA;                  }&#xA;                } else {&#xA;                  // Log if no e-mail Id found in for guarantor&#xA;                  logWarn(subject + &quot;\n Details : &quot; + msgBody);&#xA;                  System.out.println(subject + &quot;\n Details : &quot; + msgBody);&#xA;                }&#xA;              } catch (Exception e) {&#xA;                logWarn(&quot;Groovy : GenerateVACISInspectionInvoices: Invoice report preparation failed for Invoice Draft Nbr :&quot; + ediInvoice.getDraftNumber() + &quot; due to : &quot; + e.toString());&#xA;                System.out.println(&quot;Groovy : GenerateVACISInspectionInvoices: Invoice report preparation failed for Invoice Draft Nbr :&quot; + ediInvoice.getDraftNumber() + &quot; due to : &quot; + e.toString());&#xA;              }&#xA;&#xA;            } catch (Exception e) {&#xA;              logWarn(&quot;Groovy : GenerateVACISInspectionInvoices: Invoice report creation failed for Draft Nbr :&quot; + ediInvoice.getDraftNumber() + &quot; due to : &quot; + e.toString());&#xA;              System.out.println(&quot;Groovy : GenerateVACISInspectionInvoices: Invoice report creation failed for Draft Nbr :&quot; + ediInvoice.getDraftNumber() + &quot; due to : &quot; + e.toString());&#xA;            }&#xA;&#xA;          }&#xA;          // Update the status and draft id for the invoiced guaranteed record.&#xA;          guarantee.setGnteInvDraftNbr(ediInvoice.getDraftNumber());&#xA;          guarantee.setGnteInvoiceStatus(INVOICED);&#xA;          Roastery.getHibernateApi().saveOrUpdate(guarantee);&#xA;        } catch (Exception e) {&#xA;          logWarn(&quot;Groovy : GenerateVACISInspectionInvoices: Invoice Generation failed for event :&quot; + event.toString() + &quot; due to : &quot; + e.toString());&#xA;          System.out.println(&quot;Groovy : GenerateVACISInspectionInvoices: Invoice Generation failed for event :&quot; + event.toString() + &quot; due to : &quot; + e.toString());&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;  private File getFile(String inDownloadUrl, String inFileName) {&#xA;    String[] fileAttributes = inDownloadUrl.split(&quot;:::&quot;);&#xA;    String invoiceReportUrl = fileAttributes[0];&#xA;    String mimeType = fileAttributes[1];&#xA;&#xA;    if (invoiceReportUrl != null) {&#xA;&#xA;      URL url = new URL(invoiceReportUrl);&#xA;      URLConnection connection = url.openConnection();&#xA;      connection.connect();&#xA;      InputStream urlInputStream = connection.getInputStream();&#xA;&#xA;      String classPath = FileUtil.getClassPath();&#xA;      File classPathDirectory = new File(classPath);&#xA;      File file = new File(inFileName + mimeType, classPathDirectory);&#xA;      file.deleteOnExit();&#xA;&#xA;      BufferedInputStream buffInStream = new BufferedInputStream(urlInputStream);&#xA;      BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(file));&#xA;&#xA;      copyStream(buffInStream, outputStream);&#xA;&#xA;      buffInStream.close();&#xA;      outputStream.close();&#xA;&#xA;      return file;&#xA;    }&#xA;  }&#xA;&#xA;  private void copyStream(InputStream inInputStream, OutputStream inOutputStream) throws IOException {&#xA;    byte[] buffer = new byte[256];&#xA;    while (true) {&#xA;      int bytesRead = inInputStream.read(buffer);&#xA;      if (bytesRead == -1) {&#xA;        break;&#xA;      }&#xA;      inOutputStream.write(buffer, 0, bytesRead);&#xA;    }&#xA;  }&#xA;&#xA;  private static List getCUEsFor(String inEventTypeId, String inStatus) {&#xA;&#xA;    if (inEventTypeId == null || inStatus == null) {&#xA;      log(&quot;Groovy : GenerateVACISInspectionInvoices executed without EventType or Status.&quot;);&#xA;      return null;&#xA;    }&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(ArgoExtractEntity.CHARGEABLE_UNIT_EVENT).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.BEXU_EVENT_TYPE, inEventTypeId)).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.BEXU_STATUS, inStatus));&#xA;&#xA;&#xA;    return Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;&#xA;&#xA;  }&#xA;&#xA;  private Guarantee getGuarantee(ChargeableUnitEvent inEvent) {&#xA;&#xA;       List gntTypeList = new ArrayList&lt;String&gt;();&#xA;       gntTypeList.add(GuaranteeTypeEnum.PRE_PAY.getKey());&#xA;       gntTypeList.add(GuaranteeTypeEnum.OAC.getKey());&#xA;       gntTypeList.add(GuaranteeTypeEnum.CREDIT_PREAUTHORIZE.getKey());&#xA;       String[] statuses = gntTypeList.toArray(new String[gntTypeList.size()]);&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(ArgoExtractEntity.GUARANTEE).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.GNTE_APPLIED_TO_PRIMARY_KEY, inEvent.getServiceExtractGkey())).&#xA;            addDqPredicate(PredicateFactory.in(ArgoExtractField.GNTE_GUARANTEE_TYPE, gntTypeList)).&#xA;            addDqPredicate(PredicateFactory.isNull(ArgoExtractField.GNTE_VOIDED_EMAIL_SENT_DATE)).&#xA;            addDqPredicate(PredicateFactory.eq(ArgoExtractField.GNTE_APPLIED_TO_CLASS, BillingExtractEntityEnum.INV));&#xA;    return (Guarantee) Roastery.getHibernateApi().getUniqueEntityByDomainQuery(dq);&#xA;  }&#xA;&#xA;&#xA;  private Element buildGetInvoiceByInvTypeIdForUnitElement(String invoiceTypeId, ScopedBizUnit inPayee,&#xA;                                                           ScopedBizUnit inContractCustomer, String inCurrencyId, Date inContractEffectiveDate,&#xA;                                                           Guarantee inGuarantee, ChargeableUnitEvent inEvent) {&#xA;    //build the request xml&#xA;    Element rootElem = new Element(BillingWsApiConsts.BILLING_ROOT, XmlUtil.ARGO_NAMESPACE);&#xA;    Element elem = new Element(BillingWsApiConsts.GENERATE_INVOICE_REQUEST, XmlUtil.ARGO_NAMESPACE);&#xA;    rootElem.addContent(elem);&#xA;    addChildTextElement(BillingWsApiConsts.INVOICE_TYPE_ID, invoiceTypeId, elem);&#xA;    addChildTextElement(BillingWsApiConsts.PAYEE_CUSTOMER_ID, inPayee.getBzuId(), elem);&#xA;    addChildTextElement(BillingWsApiConsts.PAYEE_CUSTOMER_BIZ_ROLE, inPayee.getBzuRole().getKey(), elem);&#xA;    String contractCustId = inContractCustomer != null ? inContractCustomer.getBzuId() : &quot;&quot;;&#xA;    addChildTextElement(BillingWsApiConsts.CONTRACT_CUSTOMER_ID, contractCustId, elem);&#xA;    addChildTextElement(BillingWsApiConsts.CONTRACT_CUSTOMER_BIZ_ROLE, inContractCustomer != null ? inContractCustomer.getBzuRole().getKey() : null, elem);&#xA;    addChildTextElement(BillingWsApiConsts.CURRENCY_ID, inCurrencyId, elem);&#xA;    String effectiveDateStr = null;&#xA;    if (inContractEffectiveDate != null) {&#xA;      effectiveDateStr = BillingWsApiConsts.DATE_FORMAT.format(inContractEffectiveDate);&#xA;    }&#xA;    addChildTextElement(BillingWsApiConsts.CONTRACT_EFFECTIVE_DATE, effectiveDateStr, elem);&#xA;    addChildTextElement(BillingWsApiConsts.IS_INVOICE_FINAL, &quot;False&quot;, elem);&#xA;    Element paramsElem = new Element(BillingWsApiConsts.INVOICE_PARAMETERS, XmlUtil.ARGO_NAMESPACE);&#xA;    Element paramElem = new Element(BillingWsApiConsts.INVOICE_PARAMETER, XmlUtil.ARGO_NAMESPACE);&#xA;    addChildTextElement(BillingWsApiConsts.EQUIPMENT_ID, inEvent.getBexuEqId(), paramElem);&#xA;    addChildTextElement(BillingWsApiConsts.GUARANTEE_ID, inGuarantee.getGnteGuaranteeId(), paramElem);&#xA;    addChildTextElement(BillingWsApiConsts.CUSTOMER_REFERENCE_ID, inGuarantee.getGnteCustomerReferenceId(), elem);&#xA;    paramsElem.addContent(paramElem);&#xA;    elem.addContent(paramsElem);&#xA;    return rootElem;&#xA;  }&#xA;&#xA;&#xA;  public EdiInvoice getInvoiceByInvTypeIdForUnit(Element inElement) throws BizViolation {&#xA;    try {&#xA;      ArgoServicePort port = getWsStub();&#xA;      ScopeCoordinateIdsWsType scopeCoordinates = getScopeCoordenatesForWs();&#xA;      GenericInvokeResponseWsType invokeResponseWsType = port.genericInvoke(scopeCoordinates, XmlUtil.toString(inElement, false));&#xA;      ResponseType response = invokeResponseWsType.getCommonResponse();&#xA;      QueryResultType[] queryResultTypes = response.getQueryResults();&#xA;      if (queryResultTypes == null || queryResultTypes.length != 1) {&#xA;        //todo: generic error&#xA;        if (response.getMessageCollector() != null &amp;&amp; response.getMessageCollector().getMessages(0) != null) {&#xA;          MessageType type = response.getMessageCollector().getMessages(0);&#xA;          String message = type.getMessage();&#xA;          throw BizFailure.create(&quot;Error from Billing Webservice - &quot; + message);&#xA;        } else {&#xA;          throw BizFailure.create(ArgoPropertyKeys.BILLING_WEBSERVICE_SERVICES_URL, null, null);&#xA;        }&#xA;      }&#xA;      String responseString = queryResultTypes[0].getResult();&#xA;&#xA;      BillingTransactionsDocument billingTransactionsDocument = BillingTransactionsDocument.Factory.parse(responseString);&#xA;      BillingTransactionsDocument.BillingTransactions transactions = billingTransactionsDocument.getBillingTransactions();&#xA;      List&lt;BillingTransactionDocument.BillingTransaction&gt; transactionList = transactions.getBillingTransactionList();&#xA;      //todo: error if more than 1 transaction returned&#xA;      BillingTransactionDocument.BillingTransaction billingTransaction = transactionList.get(0);&#xA;      List&lt;EdiInvoice&gt; list = billingTransaction.getInvoiceList();&#xA;      if (list.isEmpty()) {&#xA;        throw BizFailure.create(InventoryPropertyKeys.NO_INVOICE_RETRIEVED, null, null);&#xA;      } else if (list.size() &gt; 1) {&#xA;        throw BizFailure.create(InventoryPropertyKeys.MULTIPLE_INVOICES_RETURNED, null, list.size());&#xA;      }&#xA;      EdiInvoice ediInvoice = list.get(0);&#xA;&#xA;      return ediInvoice;&#xA;    } catch (ServiceException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_ERROR, e, null);&#xA;    } catch (java.rmi.RemoteException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_ERROR, e, null);&#xA;    } catch (IOException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_XML_ERROR, e, null);&#xA;    } catch (org.apache.xmlbeans.XmlException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_XML_ERROR, e, null);&#xA;    }&#xA;  }&#xA;&#xA;  public String getInvoiceReportUrl(Long inInvoiceGkey) {&#xA;    try {&#xA;      ArgoServicePort port = getWsStub();&#xA;      Element requestElem = new Element(&quot;reporting&quot;);&#xA;      Element getInvoiceElem = new Element(&quot;get-invoice-report&quot;);&#xA;      Element invoiceGkeyElem = new Element(&quot;invoice-gkey&quot;);&#xA;      invoiceGkeyElem.addContent(inInvoiceGkey.toString());&#xA;      getInvoiceElem.addContent(invoiceGkeyElem);&#xA;      requestElem.addContent(getInvoiceElem);&#xA;&#xA;      //invoke webservice&#xA;      ScopeCoordinateIdsWsType scopeCoordinates = getScopeCoordenatesForWs();&#xA;      GenericInvokeResponseWsType invokeResponseWsType = port.genericInvoke(scopeCoordinates, XmlUtil.toString(requestElem, false));&#xA;      ResponseType response = invokeResponseWsType.getCommonResponse();&#xA;      QueryResultType[] queryResultTypes = response.getQueryResults();&#xA;&#xA;      if (queryResultTypes == null || queryResultTypes.length != 1) {&#xA;        //todo: generic error&#xA;        if (response.getMessageCollector() != null &amp;&amp; response.getMessageCollector().getMessages(0) != null) {&#xA;          MessageType type = response.getMessageCollector().getMessages(0);&#xA;          String message = type.getMessage();&#xA;          throw BizFailure.create(&quot;Error from Billing Webservice - &quot; + message);&#xA;        } else {&#xA;          throw BizFailure.create(ArgoPropertyKeys.BILLING_WEBSERVICE_SERVICES_URL, null, null);&#xA;        }&#xA;      }&#xA;      String responseString = queryResultTypes[0].getResult();&#xA;      Document responseDoc = XmlUtil.parse(responseString);&#xA;      Element responseRoot = responseDoc.getRootElement();&#xA;      Element targetUrlChild = responseRoot.getChild(&quot;file-url&quot;);&#xA;      String targetUrlStr = targetUrlChild.getText().trim();&#xA;      return targetUrlStr;&#xA;    } catch (ServiceException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_ERROR, e, null);&#xA;    } catch (java.rmi.RemoteException e) {&#xA;      throw BizFailure.create(InventoryPropertyKeys.BILLING_WEBSERVICE_ERROR, e, null);&#xA;    }&#xA;  }&#xA;&#xA;  private ArgoServicePort getWsStub() throws ServiceException {&#xA;    ArgoServiceLocator locator = new ArgoServiceLocator();&#xA;    ArgoServicePort port = locator.getArgoServicePort(ConfigurationProperties.getBillingServiceURL());&#xA;    Stub stub = (Stub) port;&#xA;    stub._setProperty(Stub.USERNAME_PROPERTY, ConfigurationProperties.getBillingWebServiceUserId());&#xA;    stub._setProperty(Stub.PASSWORD_PROPERTY, ConfigurationProperties.getBillingWebServicePassWord());&#xA;    return port;&#xA;  }&#xA;&#xA;  private void addChildTextElement(String inElementName, String inElementText, Element inParentElement) {&#xA;    Element childElement = new Element(inElementName, XmlUtil.ARGO_NAMESPACE);&#xA;    Text childText = new Text(inElementText);&#xA;    childElement.addContent(childText);&#xA;    inParentElement.addContent(childElement);&#xA;  }&#xA;&#xA;  private ScopeCoordinateIdsWsType getScopeCoordenatesForWs() {&#xA;    //build the scope coordinates for the web service based on the user context;&#xA;    ScopeCoordinateIdsWsType scopeCoordinates = new ScopeCoordinateIdsWsType();&#xA;    UserContext uContext = ContextHelper.getThreadUserContext();&#xA;    scopeCoordinates.setOperatorId(ContextHelper.getThreadOperator() != null ? ContextHelper.getThreadOperator().getId() : null);&#xA;    scopeCoordinates.setComplexId(ContextHelper.getThreadComplex() != null ? ContextHelper.getThreadComplex().getCpxId() : null);&#xA;    scopeCoordinates.setFacilityId(ContextHelper.getThreadFacility() != null ? ContextHelper.getThreadFacility().getFcyId() : null);&#xA;    scopeCoordinates.setYardId(ContextHelper.getThreadYard() != null ? ContextHelper.getThreadYard().getYrdId() : null);&#xA;    return scopeCoordinates;&#xA;  }&#xA;&#xA;&#xA;  void appendBillToAddress(Element inRootElement, Guarantee inGuarantee) {&#xA;    Element element = inRootElement.getChild(BillingWsApiConsts.GENERATE_INVOICE_REQUEST, XmlUtil.ARGO_NAMESPACE);&#xA;&#xA;    Element billToPartyElement = new Element(BillingWsApiConsts.BILL_TO_PARTY, XmlUtil.ARGO_NAMESPACE);&#xA;    Element addressElement = new Element(BillingWsApiConsts.ADDRESS, XmlUtil.ARGO_NAMESPACE);&#xA;&#xA;    addChildTextElement(BillingWsApiConsts.CONTACT_NAME, inGuarantee.getGnteExternalContactName(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.ADDRESS_LINE_1, inGuarantee.getGnteExternalAddress1(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.ADDRESS_LINE_2, inGuarantee.getGnteExternalAddress2(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.ADDRESS_LINE_3, inGuarantee.getGnteExternalAddress3(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.CITY, inGuarantee.getGnteExternalCity(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.MAIL_CODE, inGuarantee.getGnteExternalMailCode(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.STATE, inGuarantee.getGnteExternalState() != null ? inGuarantee.getGnteExternalState().getStateCode() : null, addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.COUNTRY, inGuarantee.getGnteExternalCountry() != null ? inGuarantee.getGnteExternalCountry().getCntryCode() : null, addressElement);&#xA;    //todo: add telephone and fax details since they are not supported in billing invoices right now&#xA;//    addChildTextElement(BillingWsApiConsts.TELEPHONE, inGuarantee.getGnteExternalTelephone(), addressElement);&#xA;//    addChildTextElement(BillingWsApiConsts.FAX, inGuarantee.getGnteExternalFax(), addressElement);&#xA;    addChildTextElement(BillingWsApiConsts.EMAIL_ADDRESS, inGuarantee.getGnteExternalEmailAddress(), addressElement);&#xA;    billToPartyElement.addContent(addressElement);&#xA;    element.addContent(billToPartyElement);&#xA;  }&#xA;&#xA;  void appendFlexFieldDetails(Element inRootElement, Guarantee inGuarantee) {&#xA;&#xA;    Element element = inRootElement.getChild(BillingWsApiConsts.GENERATE_INVOICE_REQUEST, XmlUtil.ARGO_NAMESPACE);&#xA;&#xA;    Element flexElement = new Element(BillingWsApiConsts.INVOICE_FLEX_FIELDS, XmlUtil.ARGO_NAMESPACE);&#xA;    String gnteId =   inGuarantee.getGnteGuaranteeId();&#xA;    String gnteType = inGuarantee.getGnteGuaranteeType().getKey();&#xA;    String paymentType = inGuarantee.getGntePaymentType().getKey()&#xA;    addChildTextElement(BillingWsApiConsts.FLEX_STRING09, gnteId + &quot;;&quot; +  gnteType + &quot;;&quot; + paymentType, flexElement);&#xA;    element.addContent(flexElement);&#xA;  }&#xA;  private static final String GUARANTEED = &quot;GUARANTEED&quot;;&#xA;  private static final String INVOICED = &quot;INVOICED&quot;;&#xA;  &#xA;}&#xA;" />
<digital-asset id="GvyCmisDataProcessor" short-description="GvyCmisDataProcessor" is-pre-deployed="N" groovy-code="/*&#xA;* A1  GR   12/19/2010  TT#10125 Current time setto VST atdDate and atdTime&#xA;* A2  GR   07/21/2011  Set YB barge Leg correctly for VST action&#xA;* A3  GR   08/15/2011  Pulling out SingletonService class call&#xA;* A4  LC   03/26/2013  Add doCmisDataRefresh method to separate event&#xA;* A5  LC   06/18/2013  Modify call to processCmisEventFeedManipulationForRefresh in doCmisDataRefresh&#xA;*/&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import com.navis.framework.util.DateUtil;&#xA;&#xA;&#xA;public class GvyCmisDataProcessor {&#xA;&#xA;public String doIt(Object event)&#xA;{&#xA;  println(&quot;In Class GvyCmisDataProcessor.doIt()&quot;)&#xA;  def gvyBaseClass = ''&#xA;  def groovyfinalXml  = ''&#xA;  try&#xA;  {&#xA;     //Calling Msg Formater class&#xA;     gvyBaseClass = new GroovyInjectionBase();&#xA;     def gvyTxtMsgFmt = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisTxtMsgFormatter&quot;);&#xA;&#xA;     //Get OBJECT&#xA;    Object unitObj = event.getEntity()&#xA;    def isUnitObj = false&#xA;&#xA;    //Gets EVENT ID&#xA;    def eventTypeAttr = ''&#xA;    Event gvyEventObj = event.getEvent()&#xA;    String eventType =  gvyEventObj.getEventTypeId()&#xA;    def doer = gvyEventObj.getEvntAppliedBy()&#xA;    def acetsMsg = getAcetsMsgType(doer)&#xA;&#xA;if(acetsMsg != null){&#xA;&#x9;&#x9;if(acetsMsg==&quot;UNIT_TRANSLOAD_TO_FULL&quot;){&#xA;&#x9;&#x9;acetsMsg =&quot;UNIT_STUFF&quot;;&#xA;&#x9;&#x9;}&#xA;        eventTypeAttr = gvyTxtMsgFmt.doIt('msgType',acetsMsg)&#xA;    }else{&#xA;&#x9;&#x9;if(eventType==&quot;UNIT_TRANSLOAD_TO_FULL&quot;){&#xA;&#x9;&#x9;eventType =&quot;UNIT_STUFF&quot;;&#xA;&#x9;&#x9;}&#xA;        eventTypeAttr = gvyTxtMsgFmt.doIt('msgType',eventType)&#xA;    }&#xA;    println('EventType ::'+eventType+' ACETS DOER ::'+acetsMsg)&#xA;&#xA;    //Check For Unit Object to handle Reporting Tag Event Call&#xA;    if(unitObj instanceof Unit) {&#xA;       isUnitObj = true&#xA;    }&#xA;&#xA;    //Getting UNIT_OBJ from EQUIP_OBJ&#xA;    if(unitObj instanceof EquipmentState){&#xA;       unitObj = getUnitFromEquipment(unitObj)&#xA;    }&#xA;&#xA;    // EQUIP CLASS&#xA;    def equiClass =unitObj.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;    def equiClassKey = equiClass != null ? equiClass.getKey() : ''&#xA;&#xA;    //ACTION SPECIFIC CLASS CALLS&#xA;    def unitDetails = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUnitDetail&quot;);&#xA;    def unitDetailsAttr = unitDetails.doIt(equiClassKey,gvyTxtMsgFmt,unitObj, event);&#xA;&#xA;&#xA;    def unitEquip = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEquiDetail&quot;);&#xA;    def equipDetailAttr = unitEquip.doIt(gvyTxtMsgFmt,unitObj, event, isUnitObj, gvyBaseClass,eventType);&#xA;&#xA;    def unitPhyStatus = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisPhysicalStatusDetail&quot;);&#xA;    def phyStatusAttr =unitPhyStatus.doIt(eventType,gvyTxtMsgFmt,unitObj);&#xA;&#xA;    def unitShipmentDetails = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisShipmentDetail&quot;);&#xA;    def shipmentDetailsAttr =unitShipmentDetails.doIt(gvyTxtMsgFmt,unitObj,eventType,gvyBaseClass,event, isUnitObj );&#xA;&#xA;    def unitRtgProcess = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisRtgProcessDetail&quot;);&#xA;    def rtgProcessAttr =unitRtgProcess.doIt(eventType,gvyTxtMsgFmt,unitObj,gvyBaseClass);&#xA;&#xA;    def unitRouting = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisRoutingDetail&quot;);&#xA;    def routingAttr =unitRouting.doIt(gvyTxtMsgFmt,unitObj,eventType);&#xA;&#xA;    def unitposition = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisPositionDetail&quot;);&#xA;    def positionAttr =unitposition.doIt(eventType,gvyTxtMsgFmt,unitObj,eventType,event);&#xA;&#xA;   def unitpositionProc = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisPositionProcessDetail&quot;);&#xA;   def positionProcAttr =unitpositionProc.doIt(unitObj,gvyTxtMsgFmt,eventType,event);&#xA;&#xA;   def flexFields = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisFlexFieldDetail&quot;);&#xA;   def unitFlexFieldsAttr =flexFields.doIt(gvyTxtMsgFmt,unitObj, event, eventType, isUnitObj, gvyBaseClass);&#xA;&#xA;   def actionDetail = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisActionDetail&quot;);&#xA;   def actionDetailAttr =actionDetail.doIt(gvyTxtMsgFmt, gvyEventObj, gvyBaseClass,unitObj);&#xA;&#xA;   def commentNotes = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisCommentNotesField&quot;);&#xA;   def commentNotesAttr = commentNotes.doIt(gvyEventObj,eventType,gvyTxtMsgFmt,unitObj);&#xA;&#xA;   def unitChassisObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisChassisAttributes&quot;);&#xA;   def unitChassisAttr = unitChassisObj.getChassisAttributes(gvyTxtMsgFmt,unitObj,equiClassKey,eventType);&#xA;&#xA;   def unitGateObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisGateData&quot;);&#xA;   def unitGateAttr = unitGateObj.gateAttributes(unitObj, gvyTxtMsgFmt, gvyBaseClass,eventType );&#xA;&#xA;&#xA;def msgString = eventTypeAttr+' '+unitDetailsAttr+' '+equipDetailAttr+' '+phyStatusAttr+' '+shipmentDetailsAttr+' '+rtgProcessAttr+' '+routingAttr+' '+positionAttr+' '+positionProcAttr+' '+unitFlexFieldsAttr+' '+actionDetailAttr+' '+commentNotesAttr+' '+unitChassisAttr+' '+unitGateAttr&#xA;&#xA;   //Creates Groovy Xml&#xA;   def groovyXml = gvyTxtMsgFmt.createGroovyXml(msgString)&#xA;    //def groovyfinalXml =  getEventSpecificValues(eventType,groovyXml, gvyBaseClass,event,unitObj, isUnitObj, equiClassKey)&#xA;&#xA;    def eventFeedObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventFeedManipulation&quot;);&#xA;    groovyfinalXml = eventFeedObj.processCmisEventFeedManipulation(eventType,groovyXml, gvyBaseClass,event,unitObj, isUnitObj, equiClassKey)&#xA;&#xA;   println(&quot;GVY XML : &quot;+groovyfinalXml)&#xA;&#xA;  }catch(Exception e){&#xA;    e.printStackTrace()&#xA;    //def gvyExceptionObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisExceptionProcess&quot;);&#xA;    //gvyExceptionObj.processException(e)&#xA;  }&#xA;&#xA;   return groovyfinalXml&#xA;&#xA; }&#xA;&#xA;//A4&#xA;public String doCmisDataRefresh(Object event)&#xA;{&#xA;&#x9;println(&quot;In Class GvyCmisDataProcessor.doCmisDataRefresh()&quot;)&#xA;&#x9;def gvyBaseClass = ''&#xA;&#x9;def groovyfinalXml  = ''&#xA;&#x9;try&#xA;&#x9;{&#xA;&#x9;&#x9;//Calling Msg Formater class&#xA;&#x9;&#x9;gvyBaseClass = new GroovyInjectionBase();&#xA;&#x9;&#x9;def gvyTxtMsgFmt = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisTxtMsgFormatter&quot;);&#xA;&#xA;&#x9;&#x9;//Get OBJECT&#xA;&#x9;&#x9;Object unitObj = event.getEntity()&#xA;&#x9;&#x9;def isUnitObj = false&#xA;&#xA;&#x9;&#x9;//Gets EVENT ID&#xA;&#x9;&#x9;def eventTypeAttr = ''&#xA;&#x9;&#x9;Event gvyEventObj = event.getEvent()&#xA;&#x9;&#x9;String eventType =  gvyEventObj.getEventTypeId()&#xA;&#x9;&#x9;def doer = gvyEventObj.getEvntAppliedBy()&#xA;&#x9;&#x9;def acetsMsg = getAcetsMsgType(doer)&#xA;&#x9;&#x9;if(acetsMsg != null){&#xA;&#x9;&#x9;&#x9;eventTypeAttr = gvyTxtMsgFmt.doIt('msgType',acetsMsg)&#xA;&#x9;&#x9;}else{&#xA;&#x9;&#x9;&#x9;eventTypeAttr = gvyTxtMsgFmt.doIt('msgType',eventType)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;println('EventType ::'+eventType+' ACETS DOER ::'+acetsMsg)&#xA;&#xA;&#x9;&#x9;//Check For Unit Object to handle Reporting Tag Event Call&#xA;&#x9;&#x9;if(unitObj instanceof Unit) {&#xA;&#x9;&#x9;&#x9;isUnitObj = true&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;//Getting UNIT_OBJ from EQUIP_OBJ&#xA;&#x9;&#x9;if(unitObj instanceof EquipmentState){&#xA;&#x9;&#x9;&#x9;unitObj = getUnitFromEquipment(unitObj)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;// EQUIP CLASS&#xA;&#x9;&#x9;def equiClass =unitObj.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;&#x9;&#x9;def equiClassKey = equiClass != null ? equiClass.getKey() : ''&#xA;&#xA;&#x9;&#x9;//ACTION SPECIFIC CLASS CALLS&#xA;&#x9;&#x9;def unitDetails = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUnitDetail&quot;);&#xA;&#x9;&#x9;def unitDetailsAttr = unitDetails.doIt(equiClassKey,gvyTxtMsgFmt,unitObj, event);&#xA;&#xA;&#x9;&#x9;def unitEquip = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEquiDetail&quot;);&#xA;&#x9;&#x9;def equipDetailAttr = unitEquip.doIt(gvyTxtMsgFmt,unitObj, event, isUnitObj, gvyBaseClass,eventType);&#xA;&#xA;&#x9;&#x9;def unitPhyStatus = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisPhysicalStatusDetail&quot;);&#xA;&#x9;&#x9;def phyStatusAttr =unitPhyStatus.doIt(eventType,gvyTxtMsgFmt,unitObj);&#xA;&#xA;&#x9;&#x9;def unitShipmentDetails = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisShipmentDetail&quot;);&#xA;&#x9;&#x9;def shipmentDetailsAttr =unitShipmentDetails.doIt(gvyTxtMsgFmt,unitObj,eventType,gvyBaseClass,event, isUnitObj );&#xA;&#xA;&#x9;&#x9;def unitRtgProcess = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisRtgProcessDetail&quot;);&#xA;&#x9;&#x9;def rtgProcessAttr =unitRtgProcess.doIt(eventType,gvyTxtMsgFmt,unitObj,gvyBaseClass);&#xA;&#xA;&#x9;&#x9;def unitRouting = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisRoutingDetail&quot;);&#xA;&#x9;&#x9;def routingAttr =unitRouting.doIt(gvyTxtMsgFmt,unitObj,eventType);&#xA;&#xA;&#x9;&#x9;def unitposition = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisPositionDetail&quot;);&#xA;&#x9;&#x9;def positionAttr =unitposition.doIt(eventType,gvyTxtMsgFmt,unitObj,eventType,event);&#xA;&#xA;&#x9;&#x9;def unitpositionProc = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisPositionProcessDetail&quot;);&#xA;&#x9;&#x9;def positionProcAttr =unitpositionProc.doCmisDataRefresh(unitObj,gvyTxtMsgFmt,eventType,event);&#xA;&#xA;&#x9;&#x9;def flexFields = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisFlexFieldDetail&quot;);&#xA;&#x9;&#x9;def unitFlexFieldsAttr =flexFields.doIt(gvyTxtMsgFmt,unitObj, event, eventType, isUnitObj, gvyBaseClass);&#xA;&#xA;&#x9;&#x9;def actionDetail = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisActionDetail&quot;);&#xA;&#x9;&#x9;def actionDetailAttr =actionDetail.doIt(gvyTxtMsgFmt, gvyEventObj, gvyBaseClass,unitObj);&#xA;&#xA;&#x9;&#x9;def commentNotes = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisCommentNotesField&quot;);&#xA;&#x9;&#x9;def commentNotesAttr = commentNotes.doIt(gvyEventObj,eventType,gvyTxtMsgFmt,unitObj);&#xA;&#xA;&#x9;&#x9;def unitChassisObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisChassisAttributes&quot;);&#xA;&#x9;&#x9;def unitChassisAttr = unitChassisObj.getChassisAttributes(gvyTxtMsgFmt,unitObj,equiClassKey,eventType);&#xA;&#xA;&#x9;&#x9;def unitGateObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisGateData&quot;);&#xA;&#x9;&#x9;def unitGateAttr = unitGateObj.gateAttributes(unitObj, gvyTxtMsgFmt, gvyBaseClass,eventType );&#xA;&#xA;&#xA;&#x9;&#x9;def msgString = eventTypeAttr+' '+unitDetailsAttr+' '+equipDetailAttr+' '+phyStatusAttr+' '+shipmentDetailsAttr+' '+rtgProcessAttr+' '+routingAttr+' '+positionAttr+' '+positionProcAttr+' '+unitFlexFieldsAttr+' '+actionDetailAttr+' '+commentNotesAttr+' '+unitChassisAttr+' '+unitGateAttr&#xA;&#xA;&#x9;&#x9;//Creates Groovy Xml&#xA;&#x9;&#x9;def groovyXml = gvyTxtMsgFmt.createGroovyXml(msgString)&#xA;&#x9;&#x9;//def groovyfinalXml =  getEventSpecificValues(eventType,groovyXml, gvyBaseClass,event,unitObj, isUnitObj, equiClassKey)&#xA;&#xA;&#x9;&#x9;def eventFeedObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventFeedManipulation&quot;);&#xA;&#x9;&#x9;groovyfinalXml = eventFeedObj.processCmisEventFeedManipulationForRefresh(eventType,groovyXml, gvyBaseClass,event,unitObj, isUnitObj, equiClassKey)&#xA;&#xA;&#x9;&#x9;// println(&quot;GVY XML : &quot;+groovyfinalXml)&#xA;&#xA;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;gvyBaseClass.log(&quot;Exception in GvyCmisDataProcessor.doCmisDataRefresh()&quot; + e);&#xA;&#x9;}&#xA;&#xA;&#x9;return groovyfinalXml&#xA;&#xA;}&#xA;&#xA; public Object getUnitFromEquipment(Object EquipObj)&#xA; {&#xA;    def unit = ''&#xA;    try&#xA;   {&#xA;      def equiId = EquipObj.getFieldValue(&quot;eqsEquipment.eqIdFull&quot;)&#xA;      def injBase = new GroovyInjectionBase();&#xA;      def complex = ContextHelper.getThreadComplex();&#xA;      def unitFinder = injBase.getUnitFinder();&#xA;      def eq = Equipment.loadEquipment( equiId);&#xA;      unit = unitFinder.findAttachedUnit(complex, eq);&#xA;&#xA;   }catch(Exception e){&#xA;      e.printStackTrace()&#xA;   }&#xA;&#xA;    return unit&#xA;  }&#xA;&#xA;&#xA;&#xA;public String doTheVessel(Object event, String action)&#xA;{&#xA;  println(&quot;In Class GvyCmisDataProcessor.doTheVessel()&quot;)&#xA;&#xA;  //Calling Msg Formater class&#xA;   def groovyXml = ''&#xA;  try&#xA;  {&#xA;     def gvyBaseClass = new GroovyInjectionBase()&#xA;     def gvyTxtMsgFmt = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisTxtMsgFormatter&quot;);&#xA;     def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;     def gvyVesselLookup = gvyBaseClass.getGroovyClassInstance(&quot;GvyVesselLookup&quot;);&#xA;&#xA;   //Get OBJECT&#xA;   def visit = event.getEntity();&#xA;   def zone =  visit.getCvdCv().getCvComplex() .getTimeZone();&#xA;&#xA;   //Gets EVENT ID&#xA;   Event gvyEventObj = event.getEvent();&#xA;   String eventType =  gvyEventObj.getEventTypeId();&#xA;&#xA;   //EVENT TYPE&#xA;   def eventTypeAttr = gvyTxtMsgFmt.doIt(&quot;msgType&quot;,eventType);&#xA;&#xA;   def unitClassAttr = gvyTxtMsgFmt.doIt(&quot;unitClass&quot;,&quot;VESSELVISIT&quot;);&#xA;&#xA;   def visitId = visit.getFieldValue(&quot;cvdCv.cvId&quot;);&#xA;   def vistAttr = gvyTxtMsgFmt.doIt(&quot;visit&quot;,visitId);&#xA;&#xA;   def facility = visit.getFieldValue(&quot;cvdCv.cvFacility.fcyId&quot;)&#xA;   def facilityAttr = gvyTxtMsgFmt.doIt(&quot;facility&quot;,facility);&#xA;&#xA;   def nextFacility = visit.getFieldValue(&quot;cvdCv.cvNextFacility.fcyId&quot;)&#xA;   def nextFacilityAttr = gvyTxtMsgFmt.doIt(&quot;nextFacility&quot;,nextFacility);&#xA;&#xA;&#xA;   def line = event.getPropertyAsString(&quot;VesselLineOperator&quot;)&#xA;   def lineAttr = gvyTxtMsgFmt.doIt(&quot;line&quot;,line);&#xA;&#xA;   def vessel = event.getPropertyAsString(&quot;VesselId&quot;)&#xA;   def vesselAttr = gvyTxtMsgFmt.doIt(&quot;vesselVes&quot;,vessel);&#xA;&#xA;   def ibVoyage = visit.getFieldValue(&quot;vvdIbVygNbr&quot;)&#xA;   def ibVoyageAttr = gvyTxtMsgFmt.doIt(&quot;ibVoyage&quot;,ibVoyage);&#xA;&#xA;   def obVoyage = visit.getFieldValue(&quot;vvdObVygNbr&quot;)&#xA;   def obVoyageAttr = gvyTxtMsgFmt.doIt(&quot;obVoyage&quot;,obVoyage);&#xA;&#xA;   def phase = visit.getFieldValue(&quot;cvdCv.cvVisitPhase&quot;).key;&#xA;   if(phase != null &amp;&amp; phase.length() &gt; 2) {&#xA;      phase = phase.substring(2);&#xA;   }&#xA;   def phaseAttr = gvyTxtMsgFmt.doIt(&quot;phase&quot;,phase);&#xA;&#xA;   def etaDate = visit.getFieldValue(&quot;cvdETA&quot;)&#xA;   def etaDateAttr = gvyTxtMsgFmt.doIt(&quot;etaDate&quot;,gvyEventUtil.formatDate(etaDate,zone));&#xA;   def etaTimeAttr = gvyTxtMsgFmt.doIt(&quot;etaTime&quot;,gvyEventUtil.formatTime(etaDate,zone));&#xA;&#xA;   def etdDate = visit.getFieldValue(&quot;cvdETD&quot;);&#xA;   def etdDateAttr = gvyTxtMsgFmt.doIt(&quot;etdDate&quot;,gvyEventUtil.formatDate(etdDate,zone));&#xA;   def etdTimeAttr = gvyTxtMsgFmt.doIt(&quot;etdTime&quot;,gvyEventUtil.formatTime(etdDate,zone));&#xA;&#xA;   def ataDate = visit.getFieldValue(&quot;cvdCv.cvATA&quot;)&#xA;   def ataDateAttr = gvyTxtMsgFmt.doIt(&quot;ataDate&quot;,gvyEventUtil.formatDate(ataDate,zone));&#xA;   def ataTimeAttr = gvyTxtMsgFmt.doIt(&quot;ataTime&quot;,gvyEventUtil.formatTime(ataDate,zone));&#xA;&#xA;   def atdDate = visit.getFieldValue(&quot;cvdCv.cvATD&quot;)&#xA;   def aDate  = event.getEvent().getEvntAppliedDate(); //a1&#xA;&#xA;   def atdDateAttr = gvyTxtMsgFmt.doIt(&quot;atdDate&quot;,gvyEventUtil.formatDate(aDate,zone)); //a1&#xA;   def atdTimeAttr = gvyTxtMsgFmt.doIt(&quot;atdTime&quot;,gvyEventUtil.formatTime(aDate,zone)); //a1&#xA;&#xA;   // Action VST or EDT&#xA;   def actionAttr = gvyTxtMsgFmt.doIt(&quot;action&quot;, action);&#xA;&#xA;&#xA;    def aDateAttr = gvyTxtMsgFmt.doIt(&quot;aDate&quot;,gvyEventUtil.formatDate(aDate,zone));&#xA;    def aTimeAttr = gvyTxtMsgFmt.doIt(&quot;aTime&quot;,gvyEventUtil.formatTime(aDate,zone));&#xA;&#xA;    //DOER&#xA;    def doer = event.getEvent().getEvntAppliedBy()&#xA;    def doerAttr = gvyTxtMsgFmt.doIt('doer',doer)&#xA;&#xA;   def legAttr = gvyTxtMsgFmt.doIt(&quot;leg&quot;,getLeg(vessel,visit,gvyVesselLookup));&#xA;&#xA;   def msgString = eventTypeAttr+' '+unitClassAttr+' '+vistAttr+' '+facilityAttr+' '+nextFacilityAttr+' '+lineAttr+' '+vesselAttr+' '+ibVoyageAttr+' '+obVoyageAttr+' '+phaseAttr+' '+etaDateAttr+' '+etaTimeAttr+' '+etdDateAttr+' '+etdTimeAttr+' '+ataDateAttr+' '+ataTimeAttr+' '+atdDateAttr+' '+atdTimeAttr+' '+actionAttr+' '+aDateAttr+' '+aTimeAttr+' '+doerAttr+' '+legAttr;&#xA;&#xA;   //Creates Groovy Xml&#xA;   groovyXml = gvyTxtMsgFmt.createGroovyXml(msgString);&#xA;&#xA;  //def groovyfinalXml =  getEventSpecificValues(eventType,groovyXml, gvyBaseClass,event,unitObj, isUnitObj, equiClassKey)&#xA;&#xA;   println(&quot;GVY XML : &quot;+groovyXml)&#xA;&#xA;   }catch(Exception e){&#xA;           e.printStackTrace()&#xA;   }&#xA;&#xA;   return groovyXml;&#xA;&#xA; }&#xA;&#xA;public String getLeg(Object vessel, Object visit, Object gvyVesselLookup) { //A2&#xA;   def service = visit.cvdItinerary.itinId;&#xA;   println(&quot;Service : &quot;+service);   &#xA;   // Dummy value for the service leg calculation, need to revisit.&#xA;   if(&quot;ALASKA-STD&quot;.equals(service) || &quot;ANK-KDK-TAC-STD&quot;.equals(service)) { //D031803  &#xA;&#x9;&#x9;return &quot;S&quot;;&#xA;   } else if(&quot;DUT-KQA-DUT-STD&quot;.equals(service) ) {&#xA;&#x9;&#x9;def fcyId = visit.getFieldValue(&quot;cvdCv.cvFacility.fcyId&quot;)&#xA;        def nextFacility = visit.getFieldValue(&quot;cvdCv.cvNextFacility.fcyId&quot;)&#xA;     &#x9;def nextFcyId = nextFacility != null ? nextFacility : null;&#x9;&#xA;&#x9;&#x9;println(&quot;Facility : &quot;+fcyId);&#xA;&#x9;&#x9;println(&quot;Next Fcy Id : &quot;+nextFcyId);&#xA;&#x9;&#x9;if(&quot;DUT&quot;.equals(fcyId) &amp;&amp; nextFcyId!= null &amp;&amp; &quot;KQA&quot;.equals(nextFcyId)) {&#xA;&#x9;&#x9;&#x9;return &quot;N&quot;;&#xA;&#x9;&#x9;} else if(&quot;KQA&quot;.equals(fcyId) &amp;&amp; nextFcyId!= null &amp;&amp; &quot;DUT&quot;.equals(nextFcyId)) {&#xA;&#x9;&#x9;&#x9;return &quot;S&quot;;&#xA;&#x9;&#x9;} else if(&quot;DUT&quot;.equals(fcyId) &amp;&amp; nextFcyId==null) {&#xA;&#x9;&#x9;&#x9;return &quot;S&quot;;&#xA;&#x9;&#x9;} &#xA;   }&#xA;   return &quot;S&quot;;//D031803&#xA;&#xA; }&#xA;&#xA; public String getAcetsMsgType(String doer)&#xA; {&#xA;      String msgType = null;&#xA;     try&#xA;    {&#xA;       String[] doerArr = doer.split(&quot;:&quot;);&#xA;       if(doerArr != null &amp;&amp; doerArr.length ==3 &amp;&amp; doerArr[0].startsWith(&quot;snx&quot;)){&#xA;            if(doerArr[1].equals(&quot;ACETS&quot;)){&#xA;  &#x9;  msgType = doerArr[2];&#xA;            }&#xA;       }&#xA;    }catch(Exception e){&#xA;         e.printStackTrace();&#xA;   }&#xA;   return msgType;&#xA; }&#xA;&#xA; //A5&#xA; public String doItNewVess(Object event, Object unit)&#xA; {&#xA;   println(&quot;In Class GvyCmisDataProcessor.doIt()&quot;)&#xA;   def gvyBaseClass = ''&#xA;   def groovyfinalXml  = ''&#xA;   try&#xA;   {&#xA;      //Calling Msg Formater class&#xA;      gvyBaseClass = new GroovyInjectionBase();&#xA;      def gvyTxtMsgFmt = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisTxtMsgFormatter&quot;);&#xA;&#xA;      //Get OBJECT&#xA;     Object unitObj = unit;&#xA;     def isUnitObj = false&#xA;&#xA;     //Gets EVENT ID&#xA;     def eventTypeAttr = ''&#xA;     Event gvyEventObj = event.getEvent()&#xA;     String eventType =  gvyEventObj.getEventTypeId()&#xA;     def doer = gvyEventObj.getEvntAppliedBy()&#xA;     def acetsMsg = getAcetsMsgType(doer)&#xA;     if(acetsMsg != null){&#xA;         eventTypeAttr = gvyTxtMsgFmt.doIt('msgType',acetsMsg)&#xA;     }else{&#xA;         eventTypeAttr = gvyTxtMsgFmt.doIt('msgType',eventType)&#xA;     }&#xA;     println('EventType ::'+eventType+' ACETS DOER ::'+acetsMsg)&#xA;&#xA;     //Check For Unit Object to handle Reporting Tag Event Call&#xA;     if(unitObj instanceof Unit) {&#xA;        isUnitObj = true&#xA;     }&#xA;&#xA;     //Getting UNIT_OBJ from EQUIP_OBJ&#xA;     if(unitObj instanceof EquipmentState){&#xA;        unitObj = getUnitFromEquipment(unitObj)&#xA;     }&#xA;&#xA;     // EQUIP CLASS&#xA;     def equiClass =unitObj.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;     def equiClassKey = equiClass != null ? equiClass.getKey() : ''&#xA;&#xA;     //ACTION SPECIFIC CLASS CALLS&#xA;     def unitDetails = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUnitDetail&quot;);&#xA;     def unitDetailsAttr = unitDetails.doIt(equiClassKey,gvyTxtMsgFmt,unitObj, event);&#xA;&#xA;     def unitEquip = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEquiDetail&quot;);&#xA;     def equipDetailAttr = unitEquip.doIt(gvyTxtMsgFmt,unitObj, event, isUnitObj, gvyBaseClass,eventType);&#xA;&#xA;     def unitPhyStatus = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisPhysicalStatusDetail&quot;);&#xA;     def phyStatusAttr =unitPhyStatus.doIt(eventType,gvyTxtMsgFmt,unitObj);&#xA;&#xA;     def unitShipmentDetails = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisShipmentDetailNewVes&quot;);&#xA;     def shipmentDetailsAttr =unitShipmentDetails.doIt(gvyTxtMsgFmt,unitObj,eventType,gvyBaseClass,event, isUnitObj );&#xA;&#xA;     def unitRtgProcess = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisRtgProcessDetail&quot;);&#xA;     def rtgProcessAttr =unitRtgProcess.doIt(eventType,gvyTxtMsgFmt,unitObj,gvyBaseClass);&#xA;&#xA;     def unitRouting = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisRoutingDetail&quot;);&#xA;     def routingAttr =unitRouting.doIt(gvyTxtMsgFmt,unitObj,eventType);&#xA;&#xA;     def unitposition = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisPositionDetailNewVess&quot;);&#xA;     def positionAttr =unitposition.doIt(eventType,gvyTxtMsgFmt,unitObj,eventType,event);&#xA;&#xA;    def unitpositionProc = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisPositionProcessDetailNewVes&quot;);&#xA;    def positionProcAttr =unitpositionProc.doIt(unitObj,gvyTxtMsgFmt,eventType,event);&#xA;&#xA;    def flexFields = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisFlexFieldDetail&quot;);&#xA;    def unitFlexFieldsAttr =flexFields.doIt(gvyTxtMsgFmt,unitObj, event, eventType, isUnitObj, gvyBaseClass);&#xA;&#xA;    def actionDetail = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisActionDetailForNewVes&quot;);&#xA;    def actionDetailAttr =actionDetail.doIt(gvyTxtMsgFmt, gvyEventObj, gvyBaseClass,unitObj);&#xA;&#xA;    def commentNotes = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisCommentNotesField&quot;);&#xA;    def commentNotesAttr = commentNotes.doIt(gvyEventObj,eventType,gvyTxtMsgFmt,unitObj);&#xA;&#xA;    def unitChassisObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisChassisAttributes&quot;);&#xA;    def unitChassisAttr = unitChassisObj.getChassisAttributes(gvyTxtMsgFmt,unitObj,equiClassKey,eventType);&#xA;&#xA;    def unitGateObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisGateData&quot;);&#xA;    def unitGateAttr = unitGateObj.gateAttributes(unitObj, gvyTxtMsgFmt, gvyBaseClass,eventType );&#xA;&#xA;&#xA; def msgString = eventTypeAttr+' '+unitDetailsAttr+' '+equipDetailAttr+' '+phyStatusAttr+' '+shipmentDetailsAttr+' '+rtgProcessAttr+' '+routingAttr+' '+positionAttr+' '+positionProcAttr+' '+unitFlexFieldsAttr+' '+actionDetailAttr+' '+commentNotesAttr+' '+unitChassisAttr+' '+unitGateAttr&#xA;&#xA;    //Creates Groovy Xml&#xA;    def groovyXml = gvyTxtMsgFmt.createGroovyXml(msgString)&#xA;     //def groovyfinalXml =  getEventSpecificValues(eventType,groovyXml, gvyBaseClass,event,unitObj, isUnitObj, equiClassKey)&#xA;&#xA;     def eventFeedObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventFeedManipulation&quot;);&#xA;     groovyfinalXml = eventFeedObj.processCmisEventFeedManipulation(eventType,groovyXml, gvyBaseClass,event,unitObj, isUnitObj, equiClassKey)&#xA;&#xA;    // println(&quot;GVY XML : &quot;+groovyfinalXml)&#xA;&#xA;   }catch(Exception e){&#xA;     e.printStackTrace()&#xA;     //def gvyExceptionObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisExceptionProcess&quot;);&#xA;     //gvyExceptionObj.processException(e)&#xA;   }&#xA;&#xA;    return groovyfinalXml&#xA;&#xA;  }&#xA;&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyCmisRectifyTest" short-description="GvyCmisRectifyTest" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.api.UnitManager;&#xA;import com.navis.inventory.business.api.RectifyParms;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.business.api.UnitFinder;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;&#xA;public class GvyCmisRectifyTest extends GroovyInjectionBase&#xA;{&#xA;   def deptUnit = null&#xA;   def inUnit = null&#xA;   //def injBase = new GroovyInjectionBase();&#xA;&#xA;   public UnitVisitStateEnum getUnitVistMasterState(String unitId)&#xA;   {&#xA;      UnitVisitStateEnum visitStateEnum = null;&#xA;    try&#xA;    {&#xA;      def facility = injBase.getFacility();&#xA;      def unitFinder = injBase.getUnitFinder();&#xA;    def eq = Equipment.loadEquipment(unitId);&#xA;    def complex = unit.getFieldValue(&quot;unitComplex.cpxGkey&quot;)&#xA;    def deptUnit = null&#xA;    com.navis.framework.portal.query.DomainQuery dq = com.navis.framework.portal.QueryUtils.createDomainQuery(&quot;Unit&quot;).addDqPredicate(com.navis.framework.portal.query.PredicateFactory.eq(com.navis.inventory.business.api.UnitField.UNIT_COMPLEX, complex)).addDqPredicate(com.navis.framework.portal.query.PredicateFactory.eq(com.navis.inventory.business.api.UnitField.UNIT_VISIT_STATE, com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE)).addDqPredicate(com.navis.framework.portal.query.PredicateFactory.eq(com.navis.inventory.business.api.UnitField.UNIT_PRIMARY_EQ, eq.getPrimaryKey())).addDqOrdering(com.navis.framework.portal.Ordering.desc(com.navis.inventory.business.api.UnitField.UNIT_CREATE_TIME));&#xA;    List unitList =  com.navis.framework.persistence.HibernateApi.getInstance().findEntitiesByDomainQuery(dq)&#xA;    if (unitList.size() &gt; 0) {&#xA;      deptUnit = (com.navis.inventory.business.units.Unit)unitList.get(0);&#xA;    }&#xA;&#xA;   visitStateEnum = deptUnit.getFieldValue(&quot;ufvVisitState&quot;)&#xA;  }catch(Exception e){&#xA;&#x9;   e.printStackTrace()&#xA;  }&#x9;   &#xA;    return visitStateEnum &#xA;  }&#xA;&#xA;  public UnitFinder getUnitFinder()&#xA;  {&#xA;   // Object bean = Roastery.getBean(&quot;unitManager&quot;);&#xA;   // (UnitManager)bean;&#xA;   def uf = (UnitFinder)Roastery.getBean(&quot;unitFinder&quot;);&#xA;   return uf&#xA;  }&#xA;&#xA;  public Set findVisitStateActiveUnit(String unitId)&#xA;  {&#xA;    Set unitUfvSet = null  &#xA;    try{&#xA;     def unitFinder = getUnitFinder()&#xA;     def complex = ContextHelper.getThreadComplex();&#xA;     def inEquipment = Equipment.loadEquipment(unitId);&#xA;     inUnit = unitFinder.findActiveUnit(complex,inEquipment)&#xA;     unitUfvSet = inUnit.getUnitUfvSet(); &#xA;    }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    }   &#xA;      return unitUfvSet&#xA;  }&#xA;&#xA;  public UnitFacilityVisit findActiveUnit(String unitId)&#xA;  {&#xA;   &#xA;    def ufv = null&#xA;    try&#xA;    {&#xA;      println(&quot;Before UnitFinder&quot;)&#xA;      Set unitUfvSet = findVisitStateActiveUnit(unitId)&#xA;      for(aUfv in unitUfvSet)&#xA;     {&#xA;            println(&quot;INSIDE THE FOR LOOP :: &quot;+aUfv.getUfvVisitState())&#xA;            if(UnitVisitStateEnum.ACTIVE.equals(aUfv.getUfvVisitState()))&#xA;            {&#xA;               println(&quot;INSIDE THE IF LOOP&quot;)&#xA;               def unit1 = aUfv.getUfvUnit();&#xA;               println(&quot;getUfvUnit UNIT ::&quot;+unit1)&#xA;               return aUfv&#xA;             }  &#xA;       }&#xA;         println(&quot;After UnitFinder&quot;)&#xA;&#xA;     }catch(Exception e){&#xA;       e.printStackTrace()&#xA;     }&#xA;      return ufv &#xA;  }&#xA;&#xA;  public void TestRectifyParams(String unitId)&#xA;  {&#xA;     try&#xA;    {&#xA;       println(&quot;Before RECTIFY PARAMS&quot;)&#xA;        //UnitFacilityVisit ufv = deptUnit.getUfvForFacilityLiveOnly(facility);&#xA;      // UnitFacilityVisit ufv = findActiveUnit(unitId)&#xA;       Set ufvSet = findVisitStateActiveUnit(unitId)&#xA;       for(aUfv in ufvSet){&#xA;        println(&quot;FOR LOOP RECTFIY_PARAM&quot;)&#xA;        if (!UnitVisitStateEnum.DEPARTED.equals(aUfv.getUfvVisitState())) {&#xA;           println(&quot;IF LOOP RECTFIY_PARAM&quot;)&#xA;           RectifyParms rparms = new RectifyParms();&#xA;           rparms.setUfvTransitState(UfvTransitStateEnum.S70_DEPARTED);&#xA;           rparms.setUnitVisitState(UnitVisitStateEnum.DEPARTED)&#xA;           aUfv.rectify(rparms);&#xA;           println(&quot;AFTER RECTIFY PARAMS&quot;)&#xA;         }&#xA;       }&#xA;     }catch(Exception e){&#xA;       e.printStackTrace()&#xA;    }&#xA;&#xA;  }//Method Ends&#xA;&#xA;   public String execute(Map inParameters) &#xA;  {&#xA;     try&#xA;     {&#xA;         def ctrId = (String) inParameters.get(&quot;equipment-id&quot;);&#xA;&#xA;            def ufv = findActiveUfv(ctrId);&#xA;            if(ufv != null){&#xA;            def unit = ufv.getUfvUnit();&#xA;                println(&quot;getUfvUnit UNIT ::&quot;+unit)&#xA;             }else{&#xA;                 println(&quot;Active getUfvUnit UNIT ::&quot;)   &#xA;             }&#xA;          }catch(Exception e){&#xA;            e.printStackTrace()&#xA;     }&#xA;   }&#xA;&#xA;   public void retireUfvs(String unitId){&#xA;    try&#xA;   {  &#xA;       println(&quot;VISIT STATE CHECK -1&quot;)&#xA;       Set ufvSet = findVisitStateActiveUnit(unitId)&#xA;        for(aUfv in ufvSet){&#xA;           if (!UnitVisitStateEnum.DEPARTED.equals(aUfv.getUfvVisitState())) {&#xA;               println(&quot;VISIT STATE CHECK -2&quot;)&#xA;              // ufv.makeRetired();&#xA;             def unit1 = (Unit)aUfv&#xA;             unit1.setUnitVisitState(UnitVisitStateEnum.DEPARTED);&#xA;             unit1.setUnitTimeLastStateChange(ArgoUtils.timeNow());&#xA;           }&#xA;       }&#xA;     println(&quot;VISIT STATE CHECK -3&quot;)       &#xA;     }catch(Exception e){&#xA;           e.printStackTrace()&#xA;     }&#xA;   }//Method Ends&#xA;&#xA;}" />
<digital-asset id="GvyUnitCargoStatus" short-description="Cargo Status Process" is-pre-deployed="N" groovy-code="/*&#xA;*****************************************************************************&#xA;* Srno    Date               Changer&#x9;         Change Description&#xA;* A1      02/03/09        Glenn Raposo              Added Check to compare value change&#xA;* A2      02/09/2009    Glenn Raposo             i)condition not to updt GoodsConsigneeName twice&#xA;                                                                       ii)Repalce Dray Status Code with Desc   &#xA;* A3      02/11/2009    Glenn Raposo             Repalced the Destination with Discharge Port&#xA;* A4      04/23/2009    Steven Bauer&#x9;&#x9; Added location&#xA;* A5      04/28/2009&#x9;Steven Bauer&#x9;&#x9; Added event time&#xA;*A6       05/01/2009    Steven Bauer             Escape quite in updt fields.&#xA;*A7       11/27/2009    Glenn Raposo         Added MetaId mapping to fetch NonBuiltIn Evnt previous value &#xA;*A8       12/08/2009    GR                   Commented out Multiple Xml Escape char Checks&#xA;*A9       01/12/2009    GR                   Added RelToParty to Consignee Value  &#xA;*****************************************************************************&#xA;*/&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.services.business.event.EventFieldChange&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;import com.navis.framework.util.DateUtil;&#xA;import com.navis.argo.business.atoms.EquipClassEnum;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;&#xA;public class GvyUnitCargoStatus {&#xA;&#xA; def prevUnitHolds = &quot;&quot;&#xA; def activeUnitHldList = &quot;&quot;&#xA; def gvyCmisCrsUtil = null;&#xA; def gvyBase = null;&#xA;&#xA;public String sendXml(String N4MsgType,Object event)&#xA;{&#xA;   try{&#xA;    def unit = event.getEntity();&#xA;    if ( ! EquipClassEnum.CONTAINER.equals( unit.getPrimaryEq().getEqClass())){&#xA;        return &quot;Not a container. No Cargo Status email sent out.&quot;;&#xA;    }&#xA;   else if(UnitVisitStateEnum.DEPARTED.equals(unit.getFieldValue(&quot;UnitVisitState&quot;))){&#xA;        return &quot;Master visit State Departed. No Cargo Status email sent out.&quot;;&#xA;    }&#xA;&#xA;     gvyBase = new GroovyInjectionBase()&#xA;     def gvyMsgFmt = gvyBase.getGroovyClassInstance(&quot;GvyMsgFormatter&quot;);&#xA;     gvyCmisCrsUtil = gvyBase.getGroovyClassInstance(&quot;GvyCmisCargoStatusUtil&quot;);&#xA;&#x9; def gvyEventUtil = gvyBase.getGroovyClassInstance(&quot;GvyEventUtil&quot;)  &#xA;     def _msgType =  'CARGO_STATUS';&#xA;     def api = new GroovyApi();&#xA;  &#xA;      //Event ID and Recorder&#xA;      def editedBy = event.getEvent().getFieldValue(&quot;evntAppliedBy&quot;) ;&#xA;      &#xA;      def eventNote = event.getEvent().getFieldValue(&quot;evntNote&quot;) ;&#xA;      if(eventNote == null){&#xA;       eventNote = &quot;&quot;;&#xA;      }else{&#xA;         eventNote = gvyCmisCrsUtil.replaceQuotesUtil(eventNote)&#xA;      }&#xA;      def eventTypeId = event.getEvent().getEventTypeId() &#xA;&#xA;      //Sets Previous and Current Hold Values &#xA;      getUnitHoldsValues(eventTypeId,unit,gvyBase,gvyCmisCrsUtil)&#xA;&#xA;      //Fields Change that Generate Cargo status Report  &#xA;&#xA;     def unitTags = ['POD', 'FreightKind', 'CommodityDescription','Destination',&#xA;    &#x9;      'GoodsConsigneeName', 'UnitHoldsAndPermissions', 'DrayStatus',&#xA;  &#x9;      'SpecialStow', 'RoutingGroup', 'GoodsBlNbr', 'UnitRemark', 'UnitNbr','UnitFlexString02'];&#xA;     &#xA;     def xmlMsg = new StringBuffer();&#xA;&#xA;     def tempMsg = event.getPropertyXml( &quot;GroovyMsg&quot;, unitTags);&#xA;&#xA;     //Appending Xml Closing tag below&#xA;     xmlMsg.append( tempMsg.substring( 0, tempMsg.length()-2));&#xA;&#xA;      //println(&quot;First cut :&quot;+xmlMsg)&#xA;     //Do not send CS Report If UnitRemark changed on Supplemental File&#xA;     def gvyEventObj = event.getEvent()&#xA;     def doer = gvyEventObj.getEvntAppliedBy()&#xA;     def isBuiltInEvnt = event.getEvent().getEvntEventType().getEvnttypeIsBuiltInEvent()&#xA;&#xA;     //To Check if the Field changed&#xA;     boolean fieldChange = false&#xA;     //&#xA;     HashMap metaIdMap = getMetaIdList(isBuiltInEvnt)&#xA;&#x9;&#x9; &#xA;&#xA;&#x9; for( eachAttr in unitTags)&#xA;    {&#xA;       //1] Check if any Field in the Field Set Changed  2] Check if the Previous and Update value is different  &#xA;       def metaId = metaIdMap.get(eachAttr)&#xA;&#x9;   metaId = metaId != null ? metaId : &quot;&quot;  &#xA;&#x9;&#x9;&#xA;&#x9;   boolean isFieldChanged = isBuiltInEvnt ? event.wasFieldChanged(eachAttr) : gvyEventUtil.wasFieldChanged(event,metaId)&#xA;&#xA;       def prevFldValue = gvyEventUtil.getPreviousPropertyAsString(event,metaId);&#xA;       prevFldValue = prevFldValue != null ? prevFldValue : &quot;&quot;&#xA;&#xA;&#x9;   if(isFieldChanged &amp;&amp; eachAttr.equals(&quot;GoodsConsigneeName&quot;) &amp;&amp; metaId.equals(&quot;gdsConsigneeBzu&quot;)){&#xA;&#x9;&#x9;  def prevValue = getMetaIdString(gvyEventUtil,event,gvyBase,metaId)&#xA;          def shipper = prevValue != null ? Shipper.findShipper(prevValue) : null&#xA;   &#x9;      prevFldValue = shipper != null ? shipper.bzuName : &quot;&quot;&#xA;       }&#xA;       else if(isFieldChanged &amp;&amp; eachAttr.equals(&quot;CommodityDescription&quot;)) {&#xA;          prevFldValue = lookupCommodity(prevFldValue);&#xA;       }&#xA;&#x9;   else if(isFieldChanged &amp;&amp; eachAttr.equals(&quot;RoutingGroup&quot;)){&#xA;          prevFldValue = getMetaIdString(gvyEventUtil,event,gvyBase,metaId) &#xA;          prevFldValue = prevFldValue != null ? prevFldValue : &quot;&quot;&#xA;       }&#xA;&#x9;   else if(isFieldChanged &amp;&amp; eachAttr.equals(&quot;SpecialStow&quot;)){&#xA;          prevFldValue = getMetaIdString(gvyEventUtil,event,gvyBase,metaId) &#xA;          prevFldValue = prevFldValue != null ? prevFldValue : &quot;&quot;&#xA;       }&#xA;&#xA;       def currFldValue = event.getProperty(eachAttr);&#xA;       currFldValue = currFldValue != null ? currFldValue : &quot;&quot;&#xA;&#xA;       &#xA;&#xA;       //println(&quot;ExternalTag:&quot;+eachAttr+&quot;  metaId:&quot;+metaId+&quot;  FieldChanged:&quot;+isFieldChanged+&quot;  CurrentValue:&quot;+currFldValue+&quot;   PreviousValue:&quot;+prevFldValue)   &#xA;&#xA;      if (isFieldChanged &amp;&amp; !currFldValue.equals(prevFldValue))&#xA;     {&#xA;        //println(&quot;eachAttr Changed : &quot;+eachAttr)  &#xA;        def preValue = event.getPreviousPropertyAsString(eachAttr)&#xA;        if(eachAttr.equals(&quot;CommodityDescription&quot;)) {&#xA;             preValue = prevFldValue;&#xA;        }&#xA;        else if(eachAttr.equals(&quot;GoodsConsigneeName&quot;) || metaId.equals(&quot;gdsConsigneeBzu&quot;)){ &#xA;             preValue = metaId.equals(&quot;gdsConsigneeBzu&quot;) ? prevFldValue : getPrevValue( event, metaId) &#xA;        }else if (eachAttr.equals(&quot;DrayStatus&quot;)){&#xA;             preValue = getDrayDesc(preValue) &#xA;        }else if (metaId.equals(&quot;gdsDestination&quot;) || eachAttr.equals(&quot;POD&quot;)){&#xA;            preValue = metaId.equals(&quot;gdsDestination&quot;) ? prevFldValue : getPrevDischargePort(gvyBase,event)  &#xA;        }else if(eachAttr.equals(&quot;RoutingGroup&quot;)){&#xA;&#x9;&#x9;&#x9;preValue = prevFldValue&#x9;&#xA;&#x9;&#x9;}else if(eachAttr.equals(&quot;SpecialStow&quot;)){&#xA;&#x9;&#x9;&#x9;preValue = prevFldValue&#x9;&#xA;&#x9;&#x9;}&#xA;&#xA;        if ( preValue == null || preValue.size() == 0){&#xA;               preValue = &quot;&quot;;&#xA;        }&#xA;        //A8 - preValue = gvyCmisCrsUtil.replaceQuotesUtil(preValue);&#xA;        if(!eachAttr.equals(&quot;UnitHoldsAndPermissions&quot;)) {&#xA;           xmlMsg.append(gvyCmisCrsUtil.formatField(' updt_'+eachAttr, preValue))&#xA;        }&#xA;        fieldChange = true&#xA;     }&#xA;   }&#xA;&#xA;    // IF No Field's were updated then Do not proceed further&#xA;    if(!fieldChange){  //Condition Check for Holds and Release Event&#xA;        fieldChange = eventTypeId.endsWith(&quot;_HOLD&quot;) || eventTypeId.endsWith(&quot;_RELEASE&quot;) ? true : false&#xA;     }&#xA;    if(!fieldChange){&#xA;       return &quot;NO FIELDS UPDATE - DO NOT GENERATE CS REPORT&quot;&#xA;    }&#xA;&#x9;&#xA;    def category = unit.getFieldValue(&quot;unitCategory&quot;);&#xA;    api.log( &quot;unitCategory = &quot; + category);&#xA;    def vesvoy = &quot;&quot;;&#xA;    if ( UnitCategoryEnum.IMPORT.equals( category) || UnitCategoryEnum.TRANSSHIP.equals( category))&#xA;    &#x9;vesvoy = unit.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;);&#xA;    else if ( UnitCategoryEnum.EXPORT.equals(category) || UnitCategoryEnum.THROUGH.equals(category) )&#xA;    &#x9;vesvoy = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;);&#xA;&#xA;     def cnee = &quot;&quot;&#xA;       // explicitly appending the Holds previous value each time as Reporting tag not working&#xA;     def updt_UnitHoldsAndPermissions = &quot; updt_UnitHoldsAndPermissions=\&quot;&quot;+prevUnitHolds.trim()+&quot;\&quot;&quot;&#xA;     //Check for user in No Email Group&#xA;     def userRole = gvyCmisCrsUtil.getCsrUserRole(doer)&#xA;     userRole = userRole == null ? 'Email' : userRole&#xA;     def userRoleAttr = &quot;userRole=\&quot;&quot;+userRole+&quot;\&quot;&quot; &#xA;     &#xA;     // get local time&#xA;     def inTime = event.getEvent().getEventTime();&#xA;     def timezone = unit.getUnitComplex().getTimeZone();&#xA;     def eventTime = DateUtil.convertDateToLocalTime(inTime, timezone);&#xA;   &#xA;     //Replacing Escape Characters&#xA;     //A8 - def repXmlMsg = gvyCmisCrsUtil.replaceQuotes(&quot;&quot;+xmlMsg) &#xA;     def repXmlMsg = &quot;&quot;+xmlMsg &#xA;&#xA;    //Overriding Dray Status &amp; Unit Holds from event.getPropertyXml()&#xA;    def curDrayStatus = gvyCmisCrsUtil.getFieldValues(repXmlMsg,&quot;DrayStatus=&quot;)&#xA;    def curDrayStat = getDrayDesc(curDrayStatus)&#xA;    &#xA;    def location = null;&#xA;    try {&#xA;        location = getLocationStatus(unit);&#xA;    } catch (Exception e) {}&#xA;    &#xA;    if(location != null) location = &quot; location='&quot;+location+&quot;' &quot;;&#xA;    else location = &quot;&quot;;&#xA;    &#xA;    &#xA;    def fmtXmlMsg = gvyCmisCrsUtil.eventSpecificFieldValue(repXmlMsg,&quot;DrayStatus=&quot;,curDrayStat)&#xA;        fmtXmlMsg = gvyCmisCrsUtil.eventSpecificFieldValue(fmtXmlMsg,&quot;UnitHoldsAndPermissions=&quot;,activeUnitHldList)&#xA;&#xA;    def finalmsg = fmtXmlMsg + cnee +updt_UnitHoldsAndPermissions+' '+userRoleAttr+location+&quot;  Vesvoy='&quot; + vesvoy + &quot;' editedBy='&quot; +&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;editedBy + &quot;' msgType='&quot; + N4MsgType + &quot;' eventTime='&quot; + eventTime + &quot;' eventNote='&quot;+eventNote+&quot;'/&gt;&quot;;&#xA;    //println(&quot;finalmsg :&quot;+finalmsg)&#xA;&#x9;finalmsg = isBuiltInEvnt ? appendRelToPartyToConsigneeValue(finalmsg) : finalmsg&#xA;    return finalmsg&#xA;  }catch(Exception e){&#xA;     e.printStackTrace()&#xA;  }&#xA; } //Method Ends&#xA;&#xA; &#xA;public String sendXml(String N4MsgType,Object event,String previousPod)&#xA;{&#xA;   try&#xA;   {&#xA;    def outxml = sendXml(N4MsgType,event)&#xA;&#x9;if(outxml != null &amp;&amp; outxml.indexOf(&quot;updt_POD=&quot;) == -1){&#xA;&#x9;def xmlMsg = new StringBuffer()&#xA;&#x9;xmlMsg.append(outxml.substring( 0, outxml.length()-2))&#xA;    xmlMsg.append(&quot; updt_POD='&quot;+previousPod+&quot;'&quot;)&#xA;    xmlMsg.append(&quot; /&gt;&quot;)&#xA;    outxml =  xmlMsg.toString()&#xA;&#x9;}&#xA;    outxml = appendRelToPartyToConsigneeValue(outxml)&#xA;    return outxml&#xA;  }catch(Exception e){&#xA;     e.printStackTrace()&#xA;  }&#xA;&#xA; } //Method Ends&#xA;&#xA;&#xA; //A8&#xA; public String appendRelToPartyToConsigneeValue(String xmlData)&#xA;{&#xA;  String xmlGvyData = xmlData&#xA;  try{&#xA;     //1.If UnitFlexString02 is part of the xml and updt_UnitFlexString02 is not part of the xml&#xA;&#x9; if(xmlGvyData.contains(&quot;UnitFlexString02=&quot;) &amp;&amp; !xmlGvyData.contains(&quot;updt_UnitFlexString02=&quot;)){&#xA;        &#xA;&#x9;&#x9;def relToParty = gvyCmisCrsUtil.getFieldValues(xmlGvyData, &quot;UnitFlexString02=&quot;)&#xA;        def goodsCneeName = gvyCmisCrsUtil.getFieldValues(xmlGvyData, &quot;GoodsConsigneeName=&quot;)&#xA;&#x9;&#x9;println(&quot;relToParty=&quot;+relToParty+&quot;  goodsCneeName=&quot;+goodsCneeName)&#xA;        if(relToParty != null &amp;&amp; relToParty.trim().length() &gt; 0){&#xA;           goodsCneeName = goodsCneeName+&quot;%&quot;+relToParty&#xA;        }&#xA;&#x9;&#x9;if(xmlGvyData.contains(&quot;updt_GoodsConsigneeName=&quot;)){&#xA;           def updtGoodsCneeName = gvyCmisCrsUtil.getFieldValues(xmlGvyData, &quot;updt_GoodsConsigneeName=&quot;)&#xA;           updtGoodsCneeName = (relToParty != null &amp;&amp; relToParty.trim().length() &gt; 0) ? updtGoodsCneeName+&quot;%&quot;+relToParty : updtGoodsCneeName&#xA;&#x9;&#x9;   xmlGvyData = gvyCmisCrsUtil.eventSpecificFieldValue(xmlGvyData,&quot;updt_GoodsConsigneeName=&quot;,updtGoodsCneeName) &#xA;&#x9;&#x9;}&#xA; &#x9;   xmlGvyData = gvyCmisCrsUtil.eventSpecificFieldValue(xmlGvyData,&quot;GoodsConsigneeName=&quot;,goodsCneeName) &#xA;     }&#xA;     else if(xmlGvyData.contains(&quot;UnitFlexString02=&quot;) &amp;&amp; xmlGvyData.contains(&quot;updt_UnitFlexString02=&quot;)){&#xA;       def relToParty = gvyCmisCrsUtil.getFieldValues(xmlGvyData, &quot;UnitFlexString02=&quot;)&#xA;       def updtRelToParty = gvyCmisCrsUtil.getFieldValues(xmlGvyData, &quot;updt_UnitFlexString02=&quot;)&#xA;       def goodsCneeName = gvyCmisCrsUtil.getFieldValues(xmlGvyData, &quot;GoodsConsigneeName=&quot;)&#xA;       def updtGoodsCneeName = &quot;&quot;&#xA;         //Check if xml has UpdtGoodsConsignee&#xA;         if(xmlGvyData.contains(&quot;updt_GoodsConsigneeName=&quot;)){ &#xA;           updtGoodsCneeName = gvyCmisCrsUtil.getFieldValues(xmlGvyData, &quot;updt_GoodsConsigneeName=&quot;)&#xA;&#x9;     }else{// IF there is no Updt Goods Entry add one to support this function&#xA;           updtGoodsCneeName = goodsCneeName &#xA;           def xmlMsg = new StringBuffer()&#xA;&#x9;       xmlMsg.append(xmlGvyData.substring( 0, xmlGvyData.length()-2))&#xA;           xmlMsg.append(&quot; updt_GoodsConsigneeName=\&quot;&quot;+goodsCneeName+&quot;\&quot;&quot;)&#xA;           xmlMsg.append(&quot; /&gt;&quot;)&#xA;           xmlGvyData = xmlMsg.toString();&#xA;&#x9;     }&#xA;&#x9;     //Check if RelToParty or Update is Blank &#x9;   &#xA;         if(relToParty != null &amp;&amp; relToParty.trim().length() &gt; 0){&#xA;           goodsCneeName = goodsCneeName+&quot;%&quot;+relToParty&#xA;         }&#xA;         if(updtRelToParty != null &amp;&amp; updtRelToParty.trim().length() &gt; 0){&#xA;           updtGoodsCneeName = updtGoodsCneeName+&quot;%&quot;+updtRelToParty   &#xA;         }&#xA;       xmlGvyData = gvyCmisCrsUtil.eventSpecificFieldValue(xmlGvyData,&quot;GoodsConsigneeName=&quot;,goodsCneeName)&#xA;       xmlGvyData = gvyCmisCrsUtil.eventSpecificFieldValue(xmlGvyData,&quot;updt_GoodsConsigneeName=&quot;,updtGoodsCneeName) &#xA;    }&#xA;&#xA; }catch(Exception e){&#xA;    e.printStackTrace();&#xA; }&#xA;&#xA;  return xmlGvyData&#xA;}  &#xA;&#xA;&#xA; //Commodity Lookup &#xA; public String lookupCommodity(String id) {&#xA;   DomainQuery dq = QueryUtils.createDomainQuery(&quot;Commodity&quot;).addDqPredicate(PredicateFactory.eq(com.navis.argo.ArgoRefField.CMDY_GKEY, id));&#xA;   Commodity c = (Commodity)HibernateApi.getInstance().getUniqueEntityByDomainQuery(dq);&#xA;  if(c == null)  {&#xA;     return &quot;&quot;;&#xA;  }&#xA;  return c.getCmdyShortName();&#xA;}&#xA;&#xA;//Previous Event value Lookup&#xA;public String getPrevValue( Object event, String tagName) &#xA;{&#xA;    String ret = &quot;&quot;;&#xA;    try&#xA;   {&#xA;      Set set = event.getEvent().getEvntFieldChanges();&#xA;      Iterator iter = set.iterator();&#xA;      EventFieldChange efc;&#xA;      while ( iter.hasNext()) {&#xA;          efc = (EventFieldChange)iter.next();&#xA;          if ( tagName.equalsIgnoreCase(efc.getMetafieldId())) {&#xA;             return efc.getPrevVal();&#xA;&#x9;&#x9;&#x9; //println(&quot;getPrevValue :&quot;+efc.getPrevVal())&#xA;           }&#xA;      }&#xA;    }catch(Exception e){&#xA;      e.printStackTrace()&#xA;    }&#xA;    &#xA;    return ret;&#xA; }&#xA;&#xA; //Method to get nonBuiltIn event consignee String&#xA; public String getMetaIdString(Object gvyEventUtil,Object event,Object gvyBaseClass,String metFldId){&#xA;    def previousValue = null&#xA;&#x9;try&#xA;&#x9;{&#xA;     Map mapEvntFld = gvyEventUtil.eventFieldChangedValues(event, gvyBaseClass)&#xA;     def aEvntFieldObj = mapEvntFld.get(metFldId) &#xA;&#x9; if(aEvntFieldObj == null){&#xA;        return previousValue&#xA;&#x9; }&#x9; &#xA;     def fieldname = aEvntFieldObj.getFieldName()&#xA;     previousValue = aEvntFieldObj.getpreviousValue()&#xA;     previousValue = previousValue != null ? previousValue : null&#xA;&#x9;}catch(Exception e){&#xA;&#x9;  e.printStackTrace();&#xA;&#x9;}&#xA;    //println(&quot;getMetaIdString ::&quot;+previousValue)&#xA;&#x9;return previousValue&#xA; }&#xA;&#xA;//Method Get Dray Desc for Unit&#xA; public String getDrayDesc(String drayId) &#xA; {&#xA;    String drayDesc = &quot;&quot;;&#xA;    try&#xA;   {&#xA;        if(drayId == null || drayId.length() == 0){&#xA;            return &quot;&quot;;&#xA;        }&#xA;&#xA;       Map drayMap = new HashMap();&#xA;       drayMap.put(&quot;FORWARD&quot;,&quot;FORWARD TO LOADING POINT&quot;); &#xA;       drayMap.put(&quot;RETURN&quot;,&quot;RETURN TO SHIPPER&quot;); &#xA;       drayMap.put(&quot;DRAYIN&quot;,&quot;DRAY IN&quot;);&#xA;       drayMap.put(&quot;OFFSITE&quot;,&quot;DRAY OUT AND BACK&quot;); &#xA;       drayMap.put(&quot;TRANSFER&quot;,&quot;TRANSFER TO OTHER FACILITY&quot;); &#xA;&#xA;       drayDesc = (String)drayMap.get(drayId);&#xA;    }catch(Exception e){&#xA;     e.printStackTrace();&#xA;    }&#xA;    return drayDesc;&#xA;  }//Method Dray Ends&#xA;&#xA;  //Method : Fetches Previouse Discharge Port value&#xA;  public String getPrevDischargePort(Object gvyBaseClass,Object event)&#xA; {&#xA;   def preValue = ''&#xA;   try&#xA;   {&#xA;  def gvyDomQueryObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisDomainQueryUtil&quot;)&#xA;  def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;)&#xA;  def prevDischPort =  gvyEventUtil.getPreviousPropertyAsString(event, &quot;rtgPOD1&quot;);&#xA;   preValue = gvyDomQueryObj.lookupRtgPOD(prevDischPort)           &#xA;   }catch(Exception e){&#xA;      e.printStackTrace()&#xA;   }&#xA;  return preValue&#xA; }&#xA;&#xA; //Method : Sets Previous and Current Hold Value&#xA; public String getUnitHoldsValues(String eventTypeId,Object unit,Object gvyBaseClass,Object gvyCmisCrsUtil)&#xA; {&#xA;   try&#xA;   {&#xA;    def eventId = eventTypeId.endsWith(&quot;_HOLD&quot;) || eventTypeId.endsWith(&quot;_RELEASE&quot;) ? eventTypeId.substring(0,eventTypeId.indexOf(&quot;_&quot;)) : &quot;&quot;   &#xA;    def holdslist = [&quot;BND&quot;,&quot;CUS&quot;,&quot;CC&quot;,&quot;HP&quot;,&quot;ON&quot;,&quot;INB&quot;,&quot;AG&quot;,&quot;XT&quot;]&#xA;&#xA;    activeUnitHldList = gvyCmisCrsUtil.getUnitActiveHolds(unit) &#xA;&#xA;    for(Id in holdslist){&#xA;      if(eventTypeId.endsWith(&quot;_HOLD&quot;) &amp;&amp; eventId.equals(Id)){&#xA;         prevUnitHolds = activeUnitHldList.replace(eventId,&quot;&quot;)&#xA;         prevUnitHolds = prevUnitHolds.replace(&quot;,,&quot;,&quot;,&quot;) &#xA;         prevUnitHolds = prevUnitHolds.endsWith(&quot;,&quot;) ?  prevUnitHolds.substring(0,prevUnitHolds.length()-1) : prevUnitHolds&#xA;         break;&#xA;      }else if(eventTypeId.endsWith(&quot;_RELEASE&quot;) &amp;&amp; eventId.equals(Id)){&#xA;         prevUnitHolds = activeUnitHldList+&quot;,&quot;+eventId&#xA;         break; &#xA;      } else{&#xA;        prevUnitHolds = activeUnitHldList&#xA;        }&#xA;     }//For Ends&#xA;  &#xA;   }catch(Exception e){&#xA;      e.printStackTrace()&#x9;&#x9;  &#xA;   }&#xA;   return prevUnitHolds.trim()&#xA; }&#xA;&#xA;&#xA;private String getLocationStatus(Object u) {&#xA; def gvyBaseClass = new GroovyInjectionBase();&#xA; def lkpLocType=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;);&#xA; def lkpLocTypeKey = lkpLocType != null ? lkpLocType.getKey() : '';&#xA; def lkpCarrierId=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocId&quot;);&#xA; def _transitState=u.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;);&#xA; def transitStateKey = _transitState != null ? _transitState.getKey() : '';&#xA; def _category=u.getFieldValue(&quot;unitCategory&quot;);&#xA; def categoryKey = _category != null ? _category.getKey() : '';&#xA; def dischPort = u.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA; def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA; def gvyPosition = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisPositionDetail&quot;);&#xA; def locationStatus = gvyPosition.getLocationStatus(lkpLocTypeKey,lkpCarrierId,transitStateKey,gvyCmisUtil,categoryKey,dischPort); &#xA; &#xA; return locationStatus&#xA;} &#xA;&#xA;&#xA;public Map getMetaIdList(boolean isBuiltInEvent){&#xA;   Map fieldMap = new HashMap();&#xA;   fieldMap.put(&quot;POD&quot;,&quot;gdsDestination&quot;)&#xA;   fieldMap.put(&quot;FreightKind&quot;,&quot;unitFreightKind&quot;);&#xA;   fieldMap.put(&quot;CommodityDescription&quot;,&quot;gdsCommodity&quot;); &#xA;   fieldMap.put(&quot;Destination&quot;,&quot;gdsDestination&quot;);&#xA;   fieldMap.put(&quot;GoodsConsigneeName&quot;,&quot;gdsConsigneeBzu&quot;);&#xA;   fieldMap.put(&quot;DrayStatus&quot;,&quot;unitDrayStatus&quot;); &#xA;   fieldMap.put(&quot;SpecialStow&quot;,&quot;unitSpecialStow&quot;);&#xA;   fieldMap.put(&quot;RoutingGroup&quot;,&quot;rtgGroup&quot;);&#xA;   fieldMap.put(&quot;GoodsBlNbr&quot;,&quot;gdsBlNbr&quot;);&#xA;   fieldMap.put(&quot;UnitRemark&quot;,&quot;unitRemark&quot;)&#xA;   fieldMap.put(&quot;UnitFlexString02&quot;,&quot;unitFlexString02&quot;) &#xA;&#xA;   if(isBuiltInEvent){&#xA;      fieldMap.put(&quot;POD&quot;,&quot;rtgPOD1&quot;)&#xA;      fieldMap.put(&quot;GoodsConsigneeName&quot;,&quot;gdsConsigneeAsString&quot;); &#xA;   }&#xA;&#xA;   return fieldMap&#xA;}&#xA;&#xA;}" />
<digital-asset id="MtyFructoseStripUnit" short-description="MTY FRUCTOSE Process" is-pre-deployed="N" groovy-code="/*&#xA;* Srno  Doer  Date       comment&#xA;* A1    GR    09/12/11   Update booking method for TOS2.1&#xA;*/&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.atoms.EventEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.atoms.FreightKindEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.orders.business.eqorders.EquipmentOrderManagerPea&#xA;import com.navis.orders.business.api.EquipmentOrderManager&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.services.business.event.GroovyEvent&#xA;&#xA;public class MtyFructoseStripUnit {&#xA;    public String mtyFrucroseProc(Object inEvent,Object unit) {&#xA;&#xA;                     com.navis.argo.ContextHelper.setThreadExternalUser(inEvent.event.evntAppliedBy+&quot;:FRUCTOSE_MTY&quot;);&#xA;&#x9;def ctrId = unit.getFieldValue(&quot;unitId&quot;);&#xA;&#x9;def bl_nbr = unit.getFieldValue(&quot;unitFlexString09&quot;);&#xA;&#x9;def dobCvId = unit.getFieldValue(&quot;unitFlexString10&quot;);&#xA;&#x9;def unitNotes = &quot;&quot;; //unit.getFieldValue(&quot;unitRemark&quot;);&#xA;&#x9;unit.setFieldValue(&quot;unitFlexString09&quot;, &quot;&quot;);&#xA;&#x9;unit.setFieldValue(&quot;unitFlexString10&quot;, &quot;&quot;);&#xA;&#x9;def f09 = unit.getFieldValue(&quot;unitFlexString09&quot;);&#xA;&#x9;def f10 = unit.getFieldValue(&quot;unitFlexString10&quot;);&#xA;try {&#xA;    //def recorder = (String) inParameters.get(&quot;recorder&quot;);&#xA;&#xA;// find booking&#xA;&#x9;def injBase = new GroovyInjectionBase();&#xA;&#x9;//injBase.log( &quot;unitID= &quot; + ctrId + &quot; bl_nbr= &quot; + bl_nbr + &quot; dobCvId= &quot; + dobCvId);&#xA;&#x9;def facility = injBase.getFacility();&#xA;&#x9;def cv = CarrierVisit.findVesselVisit( facility, dobCvId);&#xA;&#x9;if ( cv == null) {&#xA;&#x9;&#x9;return &quot;ERR_MTY_F_001. Could not find the carrier visit: &quot; + dobCvId;&#xA;&#x9;}&#xA;&#xA;&#x9;def bizScope = ScopedBizUnit.findScopedBizUnit( &quot;MAT&quot;, BizRoleEnum.LINEOP);&#xA;&#x9;if ( bizScope == null) {&#xA;&#x9;&#x9;&#x9;return &quot;ERR_MTY_F_002. Could not find the business unit: MAT&quot;;&#xA;&#x9;}&#xA;&#xA;&#x9;def booking = Booking.findBookingByUniquenessCriteria( bl_nbr, bizScope, cv);&#xA;&#x9;if ( booking == null) {&#xA;&#x9;&#x9;&#x9;return &quot;ERR_MTY_F_003. Could not find booking: &quot; + bl_nbr;&#xA;&#x9;}&#xA;&#xA;&#x9;//get Freight Kind from booking&#xA;&#x9;def freightKindBkg = booking.getFieldValue(&quot;eqoEqStatus&quot;);&#xA;&#x9;injBase.log( &quot;Booking freight kind = &quot; + freightKindBkg);&#xA;&#xA;&#xA;&#x9;// check if the commodity id is ok.&#xA;&#x9;if ( unit.isStorageEmpty())&#xA;&#x9;&#x9;return (new StringBuilder()).append(&quot;ERR_GVY_MTY_F_004. Could not STRIP EMPTY unit: &quot;).append(ctrId).toString();&#xA;&#xA;&#x9;// find the facilityVisit&#xA;&#x9;def fullUfv = unit.getUfvForFacilityNewest(facility);&#xA;&#x9;if ( fullUfv == null) {&#xA;&#x9;&#x9;return &quot;ERR_MTY_F_005. Could not find facility visit for unit:&quot; + ctrId;&#xA;&#x9;}&#xA;&#xA;&#x9;// Strip it, and get back the new full UFV and Unit&#xA;&#x9;def strippedUfv = null;&#xA;&#x9;try {&#xA;&#x9;&#x9;strippedUfv = injBase.stripUfvAndRecordEvent( fullUfv, null, &quot;Gvy MTY Fructose proc&quot;);&#xA;&#x9;} catch ( Exception stripEx) {&#xA;&#x9;&#x9;return &quot;ERR_GVY_MTY_F_006. Could not STRIP unit: &quot; + ctrId;&#xA;&#x9;}&#xA;&#x9;def strippedUnit = strippedUfv.getUfvUnit();&#xA;&#xA;&#x9;if ( strippedUnit == null)&#xA;&#x9;&#x9;return &quot;ERR_GVY_MTY_F_007. Could not get UFV unit after STRIP unit: &quot; + ctrId;&#xA;&#xA;//set FrightKind&#xA; &#x9;if ( !freightKindBkg.equals( FreightKindEnum.MTY)) {&#xA;&#x9;&#x9;strippedUnit.setUnitFreightKind(FreightKindEnum.FCL);&#xA;&#x9;}&#xA;&#x9;// set CATEGORY&#xA;&#x9;strippedUnit.setUnitCategory(UnitCategoryEnum.EXPORT);&#xA;&#xA;  EquipmentOrderManager manager = (EquipmentOrderManager)Roastery.getBean(&quot;equipmentOrderManager&quot;);&#xA;  manager.assignExportBookingToUnit(booking, null, strippedUnit); //Update Method for TOS2.1 -- A1&#xA;&#x9;//def eqoMgr = new EquipmentOrderManagerPea();&#xA;&#x9;//eqoMgr.assignExportBookingToUnit( booking, strippedUnit);&#xA;&#xA;&#x9;// set BOOKING NUM and Carrier info&#xA;&#x9;strippedUnit.setFieldValue(&quot;unitGoods.gdsBlNbr&quot;, bl_nbr);&#xA;&#x9;// set back to MTY&#xA;&#x9;strippedUnit.setUnitFreightKind(FreightKindEnum.MTY);&#xA;&#xA;//def api = new GroovyApi();&#xA;def orderItemVal;&#xA;&#xA;def ue = strippedUnit.getUnitPrimaryUe();&#xA;if (ue.getUeDepartureOrderItem() != null) {&#xA;&#x9;orderItemVal = &quot;OrderItem is not null&quot;;&#xA;   ue.getUeDepartureOrderItem().getEqboiOrder().setEqboNbr(bl_nbr);&#xA;} else {&#xA;&#x9;orderItemVal = &quot;OrderItem is null&quot;;&#xA;}&#xA;&#xA;&#x9;//strippedUnit.recordUnitEvent(EventEnum.UNIT_STRIP, null, &quot;Stripped by MtyFructoseStripUnit&quot;);&#xA;&#xA;&#xA;&#x9;GroovyEvent event = new GroovyEvent( null, strippedUnit);&#xA;&#x9;event.postNewEvent( &quot;FRUCTOSE_LOAD&quot;, unitNotes);&#xA;&#xA;&#xA;def routing = strippedUnit.getUnitRouting();&#xA;routing = booking.getRoutingInfo();&#xA;&#xA;&#xA;if ( routing == null)&#xA;&#x9;routing = new Routing();&#xA;def rdcv = booking.getEqoVesselVisit();&#xA;routing.setRtgDeclaredCv( rdcv);&#xA;&#xA;&#x9;def  pod1 = booking.getEqoPod1();&#xA;&#x9;routing.setRtgPOD1( pod1);&#xA;&#xA;&#x9;def pol = booking.getEqoPol();&#xA;&#x9;routing.setRtgPOL( pol);&#xA;&#xA;&#xA;&#xA;&#x9;&#x9;strippedUnit.updateUnitRouting(routing);&#xA;&#x9;&#x9;strippedUnit.getUnitGoods().setGoodsDestination( booking.getEqoDestination());&#xA;&#x9;&#x9;strippedUnit.getUnitGoods().updateShipper( booking.getShipperAsString());&#xA;&#x9;&#x9;strippedUnit.getUnitGoods().updateConsignee( booking.getConsigneeAsString());&#xA;&#x9;&#x9;strippedUnit.setUnitRemark( &quot;Booking number: &quot; + bl_nbr + &quot; vessel visit: &quot; + dobCvId);&#xA;&#x9;// Record an event&#xA;&#x9;return &quot;done via Groovy, booking=&quot; + f09 + &quot; cv=&quot; + f10;&#xA;&#xA;} catch ( Exception ex) {&#xA;&#x9;return ((new StringBuilder()).append(&quot;ERR_GVY_MTY_F_999. Could not fire MTY FRUCTOSE event on unit: &quot;).append(ctrId).append(&quot;\nSN4 Exception: &quot;).append(ex.toString()).toString());&#xA;}&#xA;}&#xA;}&#xA;&#xA;" />
<digital-asset id="GvyCmisUnitDetail" short-description="GvyCmisUnitDetail" is-pre-deployed="N" groovy-code="/*&#xA;*  Srno  Changer Date        Desc&#xA;*  A1    GR      03/17/2010  Removed Two Fields&#xA;*  A2    GR      04/07/2010  Added Facility Fields to the Out messages&#xA;*  A3    GR      12/09/10    Append CntrNbr and checkDigit attributes to bare chassis and Acry equipment as NULL&#xA;*  A4    GR      07/11/11    Added Check for OWN as Chassis Value&#xA;*  A5    GR      11/07/11    Added FLEX02 for OGA YBBARGE&#xA;*  A6    GR      12/02/11    Gems: flex02 valid valid on PDU and OGA else %&#xA;*  A7    GR      12/02/11    Gems: added YB trucker&#xA;*  A9    GR      12/05/11  renamed attribute flex02 to ybBarge&#xA;*  A10    GR     12/05/11  renamed attribute flex02 to ybBarge&#xA;*/&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;&#xA;&#xA;&#xA;public class GvyCmisUnitDetail {&#xA;&#xA;    public String doIt(String equiClass, Object gvyTxtMsgFmt, Object unit, Object event)&#xA;    {&#xA;&#xA;        println(&quot;In Class GvyCmisUnitDetail.doIt()&quot;)&#xA;        def unitFieldAttr = ''&#xA;        def ctrNoAttr = ''&#xA;        def checkDigitAttr = ''&#xA;&#xA;        def unitClassAttr = gvyTxtMsgFmt.doIt('unitClass', equiClass)&#xA;        try&#xA;        {&#xA;            //CTRNO &amp; CHECK DIGIT&#xA;            def ctrNo = 'null'&#xA;            def checkDigit = 'null'&#xA;            def unitIdVal=unit.getFieldValue(&quot;unitId&quot;)&#xA;            unitIdVal = unitIdVal != null ? unitIdVal : &quot;&quot;&#xA;            print('PRIMARY UNIT ID  :::::'+unitIdVal+&quot;  equiClass :::::&quot;+equiClass)&#xA;            if(equiClass.equals('CONTAINER') &amp;&amp; unitIdVal.startsWith('MATU')){&#xA;                ctrNo = unitIdVal.substring(4,unitIdVal.length()-1)&#xA;                checkDigit = unitIdVal.substring(unitIdVal.length()-1)&#xA;            }&#xA;            else{&#xA;                ctrNo =unitIdVal.substring(0,unitIdVal.length()-1)&#xA;                checkDigit = unitIdVal.substring(unitIdVal.length()-1)&#xA;            }&#xA;            //Do not pass ctrNo and ctrCheckDigit for Primary unit chassis and accessory&#xA;            if(equiClass.equals('CONTAINER')){ //A3&#xA;                ctrNoAttr = gvyTxtMsgFmt.doIt('ctrNo',ctrNo)&#xA;                checkDigitAttr = gvyTxtMsgFmt.doIt('checkDigit',checkDigit)&#xA;            }else if(equiClass.equals('CHASSIS') ||  equiClass.equals('ACCESSORY')){&#xA;                ctrNoAttr = gvyTxtMsgFmt.doIt('ctrNo','null')&#xA;                checkDigitAttr = gvyTxtMsgFmt.doIt('checkDigit','null')&#xA;            }&#xA;&#xA;            //CHASSIS NUMBER&#xA;            def chassisNum,chassisNumCd = &quot;null&quot;; //A15 -  If Value is OWN Stick Null&#xA;            def carriage = unit.getFieldValue(&quot;unitCarriageUe.ueEquipment.eqIdFull&quot;)&#xA;            if(!&quot;OWN&quot;.equalsIgnoreCase(carriage)){&#xA;                def chassisId = carriage != null ? carriage.substring(0,carriage.length()-1) : carriage&#xA;                chassisNum = equiClass.equals('CHASSIS') ? ctrNo : chassisId&#xA;                //CHASSIS CHECK DIGIT&#xA;                def chassisCd = carriage != null ? carriage.substring(carriage.length()-1) : ''&#xA;                chassisNumCd = equiClass.equals('CHASSIS') ? checkDigit : chassisCd&#xA;            }&#xA;&#xA;            def chassisNumAttr = gvyTxtMsgFmt.doIt('chassisNumber',chassisNum)&#xA;            def chassisCdAttr = gvyTxtMsgFmt.doIt('chassisCd',chassisNumCd)&#xA;&#xA;            //ACCESSORY &amp; ACCESSORY WEIGHT&#xA;            def accessory = ''&#xA;            def acryTareWeight = ''&#xA;            if(equiClass.equals('CONTAINER'))&#xA;            {&#xA;                accessory = unit.getUnitAcryEquipIds()&#xA;                def acryObj = unit.getUnitCtrAccessory()&#xA;                acryTareWeight = acryObj != null ? acryObj.getEqTareWeightKg() : null&#xA;                acryTareWeight = acryTareWeight != null ? Math.round(acryTareWeight * 2.20462262 ) : ''&#xA;            }&#xA;            else if (equiClass.equals('CHASSIS'))&#xA;            {&#xA;                accessory = unit.getUnitChsAcryId()&#xA;                def acryObj = unit.getUnitChsAccessory()&#xA;                acryTareWeight = acryObj != null ? acryObj.getEqTareWeightKg() : null&#xA;                acryTareWeight = acryTareWeight != null ? Math.round(acryTareWeight * 2.20462262 ) : ''&#xA;            }&#xA;            else if(equiClass.equals('ACCESSORY'))&#xA;            {&#xA;                accessory = unitIdVal&#xA;                acryTareWeight = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqTareWeightKg&quot;)&#xA;                acryTareWeight = acryTareWeight != null ? Math.round(acryTareWeight * 2.20462262 ) : ''&#xA;            }&#xA;&#xA;            if (accessory != null) {&#xA;&#xA;                try {&#xA;&#xA;                    if (!accessory.toString().isEmpty()) {&#xA;                        GroovyInjectionBase gvyBaseClass = new GroovyInjectionBase();&#xA;                        def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;                        accessory=gvyCmisUtil.removeAccessoryCheckdigit(accessory);&#xA;&#xA;                    }&#xA;                } catch (Exception e) {&#xA;                    println(&quot;Error occured while removing check digit from accessory:&quot; + e.getMessage());&#xA;                }&#xA;            }&#xA;&#xA;            //Accessory &amp; AcessoryWeight&#xA;            def accessoryAttr = gvyTxtMsgFmt.doIt('accessory',accessory)&#xA;            def mgWeightAttr = gvyTxtMsgFmt.doIt('mgWeight',acryTareWeight)&#xA;&#xA;            //CATEGORY&#xA;            def category=unit.getFieldValue(&quot;unitCategory&quot;)&#xA;            category = category != null ? category.getKey() : ''&#xA;            def categoryAttr = gvyTxtMsgFmt.doIt('category',category)&#xA;&#xA;            //Event Fields Changed Previous Value&#xA;            //def fieldsChanged = ''&#xA;            //def fieldsChangedAttr = gvyTxtMsgFmt.doIt('fieldsChanged',fieldsChanged)&#xA;&#xA;            //Event Fields Changed&#xA;            //def fieldsPrevoiusValue = ''&#xA;            //def fieldsPrevoiusValueAttr = gvyTxtMsgFmt.doIt('fieldsPrevoiusValue',fieldsPrevoiusValue)&#xA;&#xA;            //Facility&#xA;            //def inFacility = ContextHelper.getThreadFacility()&#xA;            //def fcyId = inFacility.fcyId&#xA;            //def facilityAttr = gvyTxtMsgFmt.doIt('facility',inFacility.fcyId)&#xA;            //Facility psethuraman - making generic code changes for all facilities&#xA;            def inFacility = ContextHelper.getThreadFacility()&#xA;            def fcyId =inFacility!=null? inFacility.fcyId :null;&#xA;&#xA;            if(fcyId==null){&#xA;                Unit unitFacility = unit as Unit;&#xA;                fcyId=unitFacility.getLocFacility()!=null?unitFacility.getLocFacility().getFcyId():null;&#xA;            }&#xA;&#xA;            Event gvyEventObj = event.getEvent();&#xA;            def eventFcyId = fcyId&#xA;            if (gvyEventObj != null) {&#xA;                eventFcyId = gvyEventObj.getEvntFacility() != null ? gvyEventObj.getEvntFacility().fcyId : fcyId&#xA;            }&#xA;&#xA;            def facilityAttr = gvyTxtMsgFmt.doIt('facility',eventFcyId)&#xA;&#xA;            //ADDED FOR YBBARGE VALUE ONLY ON OGA&#xA;            def ybBarge= '%';&#xA;            def ybBargeAttr = gvyTxtMsgFmt.doIt('ybBarge',ybBarge)&#xA;&#xA;            //ADDED FOR YBBARGE VALUE ONLY ON OGA&#xA;            def flex02= '%';&#xA;            def flex02Attr = gvyTxtMsgFmt.doIt('flex02',flex02)&#xA;&#xA;            //ADDED FOR YBTRUCKER&#xA;            def ybTrucker= unit.getFieldValue(&quot;unitFlexString14&quot;);&#xA;            def ybTruckerAttr = gvyTxtMsgFmt.doIt('ybTrucker',ybTrucker)&#xA;&#xA;            unitFieldAttr = unitClassAttr+ctrNoAttr+checkDigitAttr+chassisNumAttr+chassisCdAttr+categoryAttr+accessoryAttr+mgWeightAttr+facilityAttr+ybBargeAttr+ybTruckerAttr+flex02Attr&#xA;            // println('unitFieldAttr : '+unitFieldAttr)&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return unitFieldAttr;&#xA;&#xA;    }&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyBookingLineOpProc" short-description="GvyBookingLineOpProc" is-pre-deployed="N" groovy-code="/*&#xA;* Class to Handle Line operator update on Exisintg Booking In N4&#xA;* 08/16/11 2.1 Updated Email Method&#xA;*/&#xA;import com.navis.argo.ContextHelper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.argo.business.atoms.BizRoleEnum;&#xA;import com.navis.argo.business.model.CarrierVisit;&#xA;import com.navis.orders.business.eqorders.Booking;&#xA;import com.navis.argo.business.atoms.LocTypeEnum;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.argo.business.reference.RoutingPoint;&#xA;import com.navis.inventory.business.api.UnitFinder;&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.inventory.business.units.Unit;&#xA;&#xA;public class GvyBookingLineOpProc extends GroovyInjectionBase&#xA;{&#xA;  private String emailTo = '1aktosdevteam@matson.com';&#xA;  public String execute(Map inParameters) {&#xA;    try&#xA;    {&#xA;     ContextHelper.setThreadExternalUser(&quot;snx:ACETS&quot;);&#xA;     def bookingNum = (String) inParameters.get(&quot;bookingNum&quot;);&#xA;     def lineOperator = (String) inParameters.get(&quot;lineOperator&quot;);&#xA;     def obCarrierId = (String) inParameters.get(&quot;obCarrierId&quot;);&#xA;    &#xA;&#x9; def carrierMode = LocTypeEnum.getEnum(&quot;VESSEL&quot;);&#xA;&#x9; def bizScope = ScopedBizUnit.findScopedBizUnit( &quot;MAT&quot;, BizRoleEnum.LINEOP);&#xA;&#xA;     def obCarrierVisit = CarrierVisit.findCarrierVisit(ContextHelper.getThreadFacility(), carrierMode, obCarrierId);&#xA;&#x9; //def booking = Booking.findBookingByUniquenessCriteria( bookingNum, bizScope, obCarrierVisit);&#xA;&#x9; //println(&quot;bookingNum =========&quot;+bookingNum);&#xA;&#x9; List bkglist = Booking.findBookingsByNbr(bookingNum);&#xA;&#x9; if(bkglist == null || bkglist.size() == 0){&#xA;&#x9;&#x9; println(&quot;GvyBookingLineOpProc - No Booking Found&quot;);&#xA;&#x9;&#x9; return;&#xA;     } &#xA;     &#xA;&#x9; Iterator bkgIt = bkglist.iterator();  &#xA;&#x9; for(aBkg in bkgIt){&#xA;&#x9;&#x9; def vesselVisit = aBkg.getFieldValue(&quot;eqoVesselVisit.cvId&quot;) != null ? aBkg.getFieldValue(&quot;eqoVesselVisit.cvId&quot;) : null ;&#xA;&#x9;&#x9; def bkgLineOpt = aBkg.getFieldValue(&quot;eqoLine.bzuId&quot;) != null ? aBkg.getFieldValue(&quot;eqoLine.bzuId&quot;) : null;   &#xA;&#x9;&#x9; println(&quot;vesselVisit =&quot;+vesselVisit+&quot;   lineOperator=&quot;+bkgLineOpt)&#xA;         //Vessel matches and lineOperator dosent match   &#xA;         if(vesselVisit.equals(obCarrierId) &amp;&amp; !lineOperator.equals(bkgLineOpt)){&#xA;&#x9;&#x9;&#x9; println(&quot;Process Booking--------------1=&quot;+aBkg+&quot; obCarrierId=&quot;+obCarrierId+&quot;lineOperator =&quot;+lineOperator)&#xA;             processBooking(aBkg,bkgLineOpt,lineOperator,obCarrierId);&#xA;  &#x9;     }//Outer IF Ends  &#xA;    }//For Ends&#x9;&#x9;  &#xA;  }&#xA;  catch (Exception e)&#xA;  {&#xA;   e.printStackTrace();&#xA;  }&#xA; }//Method Execute Ends&#xA;&#xA;&#xA; public void processBooking(Object booking,String bkgLineOpt,String lineOperator,String obCarrierId){ &#xA;   try&#xA;   {&#xA;&#x9; ArrayList arrlist = new ArrayList();&#xA;     UnitFinder unitFinder = (UnitFinder)Roastery.getBean(&quot;unitFinder&quot;);&#xA;     Collection units = unitFinder.findUnitsAdvisedOrReceivedForOrder(booking);&#xA;&#x9; def bookingNbr = booking.getFieldValue(&quot;eqboNbr&quot;);  &#xA;     if (units != null &amp;&amp; units.size() &gt; 0) {&#xA;        //Email Cannot Delete Booking As active units are linked on it&#xA;        Iterator it = units.iterator();&#xA;        for(aUnit in it) {&#xA;          def unit = aUnit&#xA;          arrlist.add(unit.unitId);&#xA;        }&#xA;&#x9;&#x9; getGroovyClassInstance(&quot;EmailSender&quot;).custSendEmail(emailTo,&quot;Export Booking Issue :&quot;+bookingNbr, &quot;DI TEAM -\r\n\r\n 1. Unassign units &quot;+arrlist+&quot; of Booking &quot;+bookingNbr+&quot; with lineOperator : &quot;+bkgLineOpt+&quot;\r\n\r\n 2. Reassign units &quot;+arrlist+&quot; to Booking &quot;+bookingNbr+&quot; with lineOperator : &quot;+lineOperator+&quot;\r\n\r\n 3. Please Delete Booking &quot;+bookingNbr+&quot; with lineOperator : &quot;+bkgLineOpt+&quot; as FACTS has sent TOS a LineOperator update on this booking&quot;)&#xA;      }else{&#xA;         ArgoUtils.carefulDelete(booking);&#xA;&#x9;     getGroovyClassInstance(&quot;EmailSender&quot;).custSendEmail(emailTo,&quot;Deleted Booking &quot;+bookingNbr+&quot; with LineOperator &quot;+bkgLineOpt,&quot;DI TEAM -\r\n\r\n 1. Deleted Booking &quot;+bookingNbr+&quot; with LineOperator : &quot;+bkgLineOpt+&quot;\r\n\r\n 2. Created Booking &quot;+bookingNbr+&quot; with LineOperator : &quot;+lineOperator+&quot; for Carrier : &quot;+obCarrierId+&quot;\r\n\r\n 3. As FACTS sent TOS a LineOperator update with &quot;+lineOperator+&quot; on this booking&quot;)&#xA;      } &#x9;&#x9;    &#xA;    }catch(Exception e){&#xA;&#x9;  e.printStackTrace();&#xA;    }&#xA; }//ProcessBooking&#xA;&#xA;}" />
<digital-asset id="TbdUnitValidationGroovyImplSample" short-description="TbdUnitValidationGroovyImplSample" is-pre-deployed="Y" groovy-code="/*&#xA; * Copyright (c) 2014 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.api.IEventType&#xA;import com.navis.argo.business.atoms.EventEnum&#xA;import com.navis.argo.business.atoms.WiMoveKindEnum&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.inventory.business.units.TbdUnitDeliveryValidator&#xA;/**&#xA; * This is a sample Groovy Plug-in which illustrates how one could intercept and validate a TBD for Delivery/Dispatch&#xA; * add to or replace the built-in product validations.&#xA; * NOTE: This groovy should be copied and renamed as &quot;TbdUnitValidationGroovyImpl&quot; when used in Groovy Plugin&#xA; * @author &lt;a href=&quot;mailto:adeel.azhar@navis.com&quot;&gt;Adeel Azhar&lt;/a&gt;&#xA; */&#xA;&#xA;public class TbdUnitValidationGroovyImplSample extends GroovyApi {&#xA;  public void execute(Map args) throws BizViolation {&#xA;&#xA;    log(&quot;TbdUnitValidationGroovyImpl: BEGIN: &quot; + new Date())&#xA;&#xA;    def info = &quot;SAMPLE&quot;&#xA;&#xA;    // getting validator&#xA;    TbdUnitDeliveryValidator validator = (TbdUnitDeliveryValidator) args.get(&quot;VALIDATOR&quot;)&#xA;    //first run default validation provided out of the box.&#xA;    validator.validateAll(WiMoveKindEnum.YardMove);&#xA;&#xA;    // Customer can now then further validate the TBD to for equipment type validation.&#xA;    // Or check for holds/permission associated with any particualr event type.&#xA;&#xA;    try {&#xA;      log(&quot;Started: Calling APIs other than default&quot;);&#xA;&#xA;      //Consider Equipment Type Subsitution when validing UFV against TBD for merge.&#xA;&#x9;  validator.validateEquipmentType();&#xA;&#xA;      //Verify if container is allowed for UNIT_DELIVER&#xA;      IEventType eventType = EventEnum.UNIT_DELIVER;&#xA;      validator.validateCtrHoldPermission(eventType);&#xA;    }&#xA;    catch (BizViolation inBizViolation) {&#xA;      log(&quot;TbdUnitValidationGroovyImpl: END (Validation Failed $info): Error= &quot; + inBizViolation.getLocalizedMessage() + new Date())&#xA;      throw inBizViolation;&#xA;    }&#xA;    log(&quot;TbdUnitValidationGroovyImpl: END (Validation Successful $info) : &quot; + new Date())&#xA;  }&#xA;}&#xA;" />
<digital-asset id="GvyCmisPhysicalStatusDetail" short-description="GvyCmisPhysicalStatusDetail" is-pre-deployed="N" groovy-code="/*&#xA;* Srno  Doer  Date       comment&#xA;* A1    KM    03/24/11   Review for Stow, set stowflag from Y to %.  This was causing units to have a stopper in GEMS.  &#xA;&#xA;*/&#xA;&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.api.IFlagType&#xA;import com.navis.argo.business.atoms.FlagPurposeEnum&#xA;&#xA;public class GvyCmisPhysicalStatusDetail {&#xA;&#xA; public String doIt(String strMsgType, Object gvyTxtMsgFmt, Object unitObj)    &#xA; { &#xA;     println(&quot;In Class GvyCmisPhysicalStatusDetail.doIt()&quot;)&#xA;     def u = unitObj&#xA;     def phyStatusFields = ''&#xA;     try&#xA;    {&#xA;       def groupCode = u.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;);&#xA;       def lkpSlot=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;       lkpSlot = lkpSlot != null ? lkpSlot : ''   &#xA;&#xA;       // LOCATION ROW&#xA;      def _lineOperator=u.getFieldValue(&quot;unitLineOperator.bzuId&quot;)&#xA;      def locationRowAttr =  gvyTxtMsgFmt.doIt('locationRow',_lineOperator)&#xA;&#xA;      //CW Weight&#xA;      def weightKg=u.getFieldValue(&quot;unitGoodsAndCtrWtKg&quot;)&#xA;      def weightLB = weightKg != null ? Math.round(weightKg * 2.20462262) : ''&#xA;      def cwWeightAttr =  gvyTxtMsgFmt.doIt('cWeight',weightLB)&#x9;&#xA;&#xA;      //SEAL&#xA;     def _seal1=u.getFieldValue(&quot;unitSealNbr1&quot;)&#xA;     def sealAttr = gvyTxtMsgFmt.doIt('seal',_seal1)&#xA; &#xA;     //STOW RESTRICTION CODE&#xA;     def stowId= u.getFieldValue(&quot;unitSpecialStow.stwId&quot;) &#xA;     def stowRestCode = stowId != null ? getStowCode(stowId) : ''&#xA;     def stowRestCodeAttr = gvyTxtMsgFmt.doIt('stowRestCode',stowRestCode)&#xA;&#xA;     //STOW FLAG&#xA;     def stowFlag = ''&#xA;     if(strMsgType.equals('REVIEW_FOR_STOW')){&#xA;         stowFlag = '%'          //A1 changed from Y to %&#xA;     }else if (strMsgType.equals('UNIT_IN_GATE')){&#xA;         stowFlag = ''         &#xA;     }else{&#xA;         stowFlag = '%'&#xA;     }&#xA;     def stowFlagAttr = gvyTxtMsgFmt.doIt('stowFlag',stowFlag) &#xA; &#xA;     //ODF&#xA;    def odf = u.getFieldValue(&quot;unitIsOog&quot;);  &#xA;    odf = odf == true ? 'Y' : ''&#xA;    def odfAttr = gvyTxtMsgFmt.doIt('odf',odf)&#xA;   &#xA;    phyStatusFields = locationRowAttr+cwWeightAttr+sealAttr+stowRestCodeAttr+stowFlagAttr+odfAttr&#xA;    //println('Phyysical Status Fields : '+phyStatusFields)&#xA;&#xA;   }catch(Exception e){&#xA;     e.printStackTrace()&#xA;   }&#xA;  return phyStatusFields&#xA;&#xA;}&#xA;&#xA;    //Method Retrieves StowCode - CMIS Relation value&#xA;    public String getStowCode(String stowId)&#xA;   {&#xA;     def map = new HashMap()&#xA;     map.put(&quot;INSP&quot;, &quot;3&quot;)&#xA;     map.put(&quot;SHOP&quot;, &quot;W&quot;)&#xA;     map.put(&quot;CL&quot;, &quot;C&quot;)&#xA;    &#xA;    def stowCode = map.get(stowId) != null ? map.get(stowId) : stowId;&#xA;    return stowCode;&#xA;   }&#xA;&#xA;&#xA;}//Class Ends" />
<digital-asset id="OutGateCheck" short-description="Fails the transaction with an error message if ufvFlexString02 is not Y and user entered a chassis accessory number" is-pre-deployed="N" groovy-code="/*&#xA;&#xA;Groovy code called from the outgate form to prevent from outgating MG with chassis.&#xA;&#xA;&#xA;Amine Nebri, anebri@navis.com - June 25 2008&#xA;Steven Bauer - Nov 11 2008 &#xA;Changed from using the flex field to Container status rules.&#xA;&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.framework.util.BizFailure&#xA;&#xA;public class OutGateCheck extends GroovyInjectionBase&#xA;{&#xA;&#x9;public void execute(inDao, api)&#xA;&#x9;{&#xA;log(&quot;Out gate check!!!&quot;);&#xA;&#x9;&#x9;// We retrieve the transaction object&#xA;&#x9;&#x9;def tran = inDao.getTran()&#xA;&#xA;&#x9;&#x9;if (tran == null) return&#xA;&#xA;&#x9;&#x9;// We exit here if no chassis accessory number was entered&#xA;&#x9;&#x9;if (tran.getTranChsAccNbr() == null) return&#xA;&#xA;&#x9;&#x9;// We retrieve everything we need to get to ufvFlexString01&#xA;&#x9;&#x9;def unit = tran.getTranUnit()&#xA;&#xA;&#x9;&#x9;// We now retrieve the unit facility visit&#xA;&#x9;&#x9;def ufv = tran.getTranUfv()&#xA;&#xA;&#x9;&#x9;if (ufv == null) return&#xA;&#xA;&#xA;&#x9;&#x9;/* Change from Joce (11/17/2008)&#xA;   &#x9;&#x9;&#x9;Using Container status not chassisType&#xA;&#x9;&#x9;*/&#xA;&#x9;&#x9;// Always allowed if it has an MG.&#xA;&#x9;&#x9;def holdsList = unit.getFieldValue(&quot;unitAppliedHoldOrPermName&quot;);&#xA;&#x9;&#x9;if(holdsList != null &amp;&amp; holdsList.indexOf(&quot;MGOK&quot;) != -1) return;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;// Can not outgate an MG with a non-reefer&#xA;&#x9;&#x9;def ue = unit.unitPrimaryUe;&#xA;&#x9;&#x9;if(ue != null) {&#xA;&#x9;&#x9;&#x9;def eq = ue.ueEquipment;&#xA;&#x9;&#x9;&#x9;if(eq!= null &amp;&amp; !eq.eqIsTemperatureControlled) {&#xA;&#x9;&#x9;            RoadBizUtil.getMessageCollector().appendMessage(BizFailure.create(&quot;MG cannot be outgated with a dry container&quot;));&#xA;&#x9;&#x9;        }&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;// Can not outgate MG for XMAS trees&#xA;&#x9;&#x9;def commodityName =  unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;&#x9;if(commodityName != null &amp;&amp; (commodityName.contains(&quot;XMASTREE&quot;) ||  commodityName.contains(&quot;XMAS40&quot;) )) {&#xA;&#x9;&#x9;      RoadBizUtil.getMessageCollector().appendMessage(BizFailure.create(&quot;MG cannot be outgated with a XMas Tree container&quot;))&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;// Can not outgate MG for MTYs&#xA;&#x9;&#x9;if(unit.unitFreightKind!= null &amp;&amp; unit.unitFreightKind.name.equals(&quot;MTY&quot;)) {&#xA;&#x9;&#x9; &#x9;RoadBizUtil.getMessageCollector().appendMessage(BizFailure.create(&quot;MG cannot be outgated with a empty container&quot;))&#xA;&#x9;&#x9;}&#xA;&#xA; &#x9;}&#xA;&#xA;}" />
<digital-asset id="GvyWOIngate" short-description="GvyWOIngate" is-pre-deployed="N" groovy-code="import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import java.util.Iterator;&#xA;import java.util.Collection;&#xA;&#xA;public class GvyWOIngate {&#xA;&#xA;/** If commodity code is SIT reapply DRAY status&#xA;*/&#xA;public void setDray(Object unit) {&#xA;                println(&quot;WO Gate set dray&quot;);&#xA;                if(unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;).equals(&quot;SIT&quot;)) {&#xA;                     unit.setFieldValue(&quot;unitDrayStatus&quot;,com.navis.argo.business.atoms.DrayStatusEnum.OFFSITE);&#xA;                }&#xA;}&#xA;&#xA;public void setPosition(Object unit) {&#xA;  &#x9;     // Update Position to WOA1&#xA;                     println(&quot;WO Gate set positiony&quot;);&#xA;                  GroovyEvent moveEvent = new GroovyEvent( null, unit);&#xA;                  moveEvent.setProperty(&quot;PositionFull&quot;,&quot;Y-SI-WOA-1&quot;);&#xA;                   moveEvent.setProperty(&quot;PositionSlot&quot;,&quot;WOA1&quot;);&#xA;                  moveEvent.postNewEvent( &quot;UNIT_YARD_MOVE&quot;, &quot;Position Update on West Oahu In Gate&quot;);&#xA;&#xA;}&#xA;&#xA;public void transferToSI(Object unit) {&#xA;                       println(&quot;WO Gate transfer to SI&quot;);&#xA;&#x9; GroovyEvent event = new GroovyEvent( null, unit);&#xA;                   event.postNewEvent( &quot;TRANSFER_TO_SI&quot;, &quot;Transfer on West Oahu In Gate&quot;);&#xA;&#xA;}&#xA;&#xA;}" />
<digital-asset id="GvyCancelTrouble" short-description="GvyCancelTrouble" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.road.RoadField;&#xA;&#xA;&#xA;/*&#xA;* Get a list of all the Trouble Gate transactions and close them&#xA;*/&#xA;class GvyCancelTrouble {&#xA;   public String execute(Map inParameters) {&#xA;        return; &#xA;        def gvyBaseClass = new GroovyInjectionBase()&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(&quot;TruckTransaction&quot;);&#xA;&#x9;&#x9;&#xA;        dq.addDqPredicate(PredicateFactory.eq(RoadField.TRAN_STATUS,&quot;TROUBLE&quot; ));     &#xA;        def list = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;        def iter = list.iterator();&#xA;        &#xA;        gvyBaseClass.log(&quot;Cancel &quot;+list.size()+&quot; transactions&quot;);&#xA;        while(iter.hasNext()) {&#xA;           def tran = iter.next();&#xA;           try {&#xA;           &#x9;tran.cancelTransaction();&#xA;           } catch (Exception e) {&#xA;                     e.printStackTrace();&#xA;           }&#xA;        }&#xA;&#xA;    }&#xA;}" />
<digital-asset id="JMSTopicSender" short-description="JMSTopicSender" is-pre-deployed="N" groovy-code="import java.util.Hashtable;&#xA;import javax.jms.JMSException;&#xA;import javax.naming.Context;&#xA;import javax.naming.InitialContext;&#xA;import javax.jms.*;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import org.apache.activemq.ActiveMQConnectionFactory;&#xA;&#xA;public class JMSTopicSender extends GroovyInjectionBase  {&#xA;&#xA;&#x9;private static String topicName = &quot;jms.topic.tdp.n4&quot;;&#xA;&#x9;private static String url;&#xA;&#xA; &#x9;public JMSTopicSender()  {&#xA;&#x9;&#x9;if(url == null){&#xA;&#x9;&#x9;&#x9;url = getGroovyClassInstance(&quot;GvyRefDataLookup&quot;).getN4TopicAddress();&#xA;        }&#xA;&#x9;}&#xA;&#xA;&#x9;public JMSTopicSender( String _topicName)  {&#xA;&#x9;&#x9;if(url == null){&#xA;&#x9;&#x9;&#x9;url = getGroovyClassInstance(&quot;GvyRefDataLookup&quot;).getN4TopicAddress();&#xA;        }&#xA;        topicName = _topicName&#xA;&#x9;}&#xA;&#xA;&#x9;public  void send(String msg) throws JMSException, Exception&#xA;&#x9;{&#xA;&#x9;    String  cfName                    = &quot;jms/WLQueueConnectionFactory&quot;;&#xA;&#xA;&#x9;    TopicSession               session    = null;&#xA;&#x9;    TopicConnection             connection = null;&#xA;&#x9;&#x9;ActiveMQConnectionFactory       cf         = null;&#xA;&#x9;    MessageProducer        mp         = null;&#xA;&#x9;    Destination            destination = null;&#xA;&#x9;&#x9;println( &quot;Calling JMSTopicSender.send using ActiveMQConnectionFactory&quot;);&#xA;&#x9;    try {&#xA;&#xA;&#x9;    &#x9;//Hashtable env = new Hashtable();&#xA;&#x9;    &#x9;//env.put(Context.INITIAL_CONTEXT_FACTORY,&#xA;&#x9;    &#x9; //    &quot;weblogic.jndi.WLInitialContextFactory&quot;);&#xA;&#x9;    &#x9;//env.put(Context.PROVIDER_URL, url);&#xA;&#x9;    &#x9;//Context initialContext = new InitialContext(env);&#xA;&#x9;    &#x9;//println( &quot;Getting Connection Factory&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;//cf= (TopicConnectionFactory)initialContext.lookup( cfName );&#xA; &#x9;&#x9;&#x9;cf = new ActiveMQConnectionFactory(url);&#xA;&#xA;&#x9;&#x9;&#x9;//println( &quot;Getting Queue&quot;);&#xA;&#x9;&#x9;&#x9;//destination =(Destination)initialContext.lookup(topicName);&#xA;&#xA;&#x9;&#x9;&#x9;//println( &quot;Getting Connection for Queue&quot;);&#xA;&#x9;&#x9;&#x9;connection = cf.createTopicConnection();&#xA;&#xA;&#x9;&#x9;&#x9;//println( &quot;staring the connection&quot;);&#xA;&#x9;&#x9;&#x9;connection.start();&#xA;&#xA;&#x9;&#x9;&#x9;//println( &quot;creating session&quot;);&#xA;&#x9;&#x9;&#x9;session = connection.createTopicSession(false, 1);&#xA;&#x9;&#x9;&#x9;destination = session.createTopic(topicName);&#xA;&#xA;&#x9;&#x9;&#x9;//println( &quot;creating messageProducer&quot;);&#xA;&#x9;&#x9;&#x9;mp = session.createProducer(destination);&#xA;&#xA;&#x9;&#x9;&#x9;//println( &quot;creating TextMessage&quot;);&#xA;&#x9;&#x9;&#x9;TextMessage outMessage = session.createTextMessage( msg);&#xA;&#xA;&#x9;&#x9;&#x9;println( &quot;sending Message to topic: &quot; + topicName);&#xA;&#x9;&#x9;&#x9;mp.send(outMessage);&#xA;&#xA;&#x9;&#x9;&#x9;mp.close();&#xA;&#x9;&#x9;&#x9;session.close();&#xA;&#x9;&#x9;&#x9;connection.close();&#xA;&#x9;    }&#xA;&#x9;    catch (Exception je)&#xA;&#x9;    {&#xA;&#x9;    &#x9;je.printStackTrace();&#xA;&#x9;    }&#xA;&#x9;}&#xA;&#xA;}" />
<digital-asset id="GvyCmisMessagesForAcets" short-description="GvyCmisMessagesForAcets" is-pre-deployed="N" groovy-code="/*&#xA;*  Srno  Changer Date        Desc&#xA;*  A1    GR      11/23/10    Set Actual Ves,Voy,leg for RHN action&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; 1.Calling method parameters updated 2.Post call Updated   &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; 3. Depends on Class GvyCmisUtil Update A9&#xA;*/&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.services.business.event.EventFieldChange&#xA;&#xA;&#xA;public class GvyCmisMessagesForAcets&#xA;{&#xA;&#xA;   //UNIT_POSITION_CORRECTION&#xA;   public void unitPositionCorrection(String xmlGvyData, Object unit, Object gvyBaseClass,Object event, Object gvyEventUtil) //A1 &#xA;  {&#xA;     def xmlGvyString = xmlGvyData&#xA;     try&#xA;    {&#xA;      def gvycmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;); &#xA;      def transitState=unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;      transitState = transitState != null ? transitState.getKey() : ''&#xA;      def lkpLocType=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;      def locType = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;       &#xA;      def vesselLineOperator = gvycmisUtil.vesselServiceOperator(unit)&#xA;       if( locType.equals('VESSEL') &amp;&amp; vesselLineOperator.equals('MAT')  &amp;&amp;&#xA;            (transitState.equals('S60_LOADED') || transitState.equals('S20_INBOUND')))&#xA;       {&#xA;         //xmlGvyString = xmlGvyString.replace(&quot;lastAction='null'&quot;,&quot;lastAction='RHN'&quot;);&#xA;         //xmlGvyString = xmlGvyString.replace(&quot;action='null'&quot;,&quot;action='RHN'&quot;) &#xA;         //println(&quot;xmlGvyString ::&quot;+xmlGvyString)&#xA;         //gvyBaseClass.sendXml(xmlGvyString)&#xA;&#x9;&#x9;gvycmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,&quot;RHN&quot;, unit, event, gvyEventUtil)&#xA;       }&#xA;     }catch(Exception e){&#xA;       e.printStackTrace();&#xA;     }&#xA;    &#xA;  }&#xA;   &#xA;   public void unitStorageUpdate(String xmlData, Object gvyBaseClass)&#xA;  {&#xA;     try&#xA;    {&#xA;      def xmlGvyString = xmlData&#xA;      def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;) &#xA;      xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;lastAction=&quot;,&quot;FREE&quot;) &#xA;      xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;action=&quot;,&quot;FREE&quot;) &#xA;      gvyBaseClass.sendXml(xmlGvyString)&#xA;    }catch(Exception e){&#xA;       e.printStackTrace()&#xA;    }&#xA;&#xA;}&#xA;   &#xA;}" />
<digital-asset id="GvyCmisEquiDetail" short-description="GvyCmisEquiDetail" is-pre-deployed="N" groovy-code="/*&#xA;*  Change   Changer  Date       Desc&#xA;*  A1       GR       07/07/09   AMB Temp Req To cmis&#xA;*  A2       GR       11/24/09   Flip Mty Client Cntr Operator from MAT to client&#xA;*  A3       GR       03/17/2010 Added equipTypeCode field for DAS as we dont set for CMIS&#xA;*  A4       GR       08/30/10   Add HazOpenCloseFlag and compute trade value&#xA;*  A5       GR       10/30/11   TOS2.1 : Change UNIT_DISCH_COMPLETE&#xA;*  A6       GR       02/17/12   TOS2.1 : Updt Field unitFlexString07 to UfvFlexString07&#xA;*  A7       LC       12/05/12   Include typeCode value for CMIS_DATA_REFRESH event&#xA;*/&#xA;&#xA;public class GvyCmisEquiDetail {&#xA;&#xA;    public String doIt(Object gvyTxtMsgFmt, Object unitObj, Object event, Object isUnitObj, Object gvyBaseClass, String eventType) {&#xA;        def u = unitObj&#xA;        def equiFieldAttr = ''&#xA;        try {&#xA;            println(&quot;In Class GvyCmisEquiDetail.doIt()&quot;)&#xA;            def _equiType = u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;)&#xA;            def eqHgt = u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypNominalHeight&quot;)&#xA;            def equiHeight = eqHgt != null ? eqHgt.getKey() : ''&#xA;            def _equiMaterial = u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqMaterial&quot;)&#xA;            _equiMaterial = _equiMaterial != null ? _equiMaterial.getKey() : ''&#xA;&#xA;            //TYPE CODE &amp; HGT&#xA;            def typeCode = '%'&#xA;            def equiHgtfmt = '%'&#xA;            if ((isUnitObj.equals(Boolean.TRUE) &amp;&amp; event.wasFieldChanged('EquipmentType')) || eventType.equals('UNIT_IN_GATE')&#xA;                    || eventType.equals('CMIS_DATA_REFRESH') ||eventType.equals('UNIT_REROUTE')||eventType.equals('UNIT_ROLL')) {&#xA;                // TypeCode&#xA;                typeCode = TypeCodeProcessing(_equiType, equiHeight, _equiMaterial)&#xA;                //HGT - Processing&#xA;                def equiHgt = getEquiHeight(equiHeight)&#xA;                if (equiHgt.trim().length() &gt; 0) {&#xA;                    equiHgtfmt = equiHgt.trim().length() &gt; 2 ? &quot;0&quot; + equiHgt + &quot;00&quot; : &quot;0&quot; + equiHgt.substring(0, 1) + &quot;0&quot; + equiHgt.substring(1) + &quot;00&quot;;&#xA;                }&#xA;            }&#xA;            def typeCodeAttr = gvyTxtMsgFmt.doIt('typeCode', typeCode)&#xA;            def hgtAttr = gvyTxtMsgFmt.doIt('hgt', equiHgtfmt)&#xA;            def equiTypeCodeAttr = gvyTxtMsgFmt.doIt('equipTypeCode', _equiType)&#xA;&#xA;            //TARE WEIGHT&#xA;            def equiTareKg = u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqTareWeightKg&quot;)&#xA;            def equiTareLB = equiTareKg != null ? Math.round(equiTareKg * 2.20462262) : ''&#xA;            println('Unit_equiTareKg :' + equiTareKg + '    Unit_equiTareLB ::' + equiTareLB)&#xA;            def tareWeightAttr = gvyTxtMsgFmt.doIt('tareWeight', equiTareLB)&#xA;&#xA;            //STRENGTH CODE&#xA;            def equiStrengthCode = u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqStrengthCode&quot;)&#xA;            def strengthAttr = gvyTxtMsgFmt.doIt('strength', equiStrengthCode)&#xA;&#xA;            //OWNER&#xA;            def _equiOwner = u.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOwner.bzuId&quot;)&#xA;            def ownerAttr = gvyTxtMsgFmt.doIt('owner', _equiOwner)&#xA;&#xA;            //DMG_CODE&#xA;            def damageCode = u.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsDamageSeverity&quot;)&#xA;            damageCode = damageCode != null ? damageCode.getKey() : damageCode&#xA;            def dmgCodeFmt = damageCode.equals('MAJOR') ? 'H' : (damageCode.equals('MINOR') ? 'L' : '')&#xA;            def damageCodeAttr = gvyTxtMsgFmt.doIt('damageCode', dmgCodeFmt)&#xA;&#xA;            //SRV&#xA;            def equiOperator = '';&#xA;            def eventId = event.getEvent().getEventTypeId();&#xA;            println(&quot;Event Triggered : &quot;+eventId);&#xA;            if (eventId.equals('UNIT_LOAD')) {&#xA;                equiOperator = getSrvUnitLoad(u)&#xA;            } else {&#xA;                equiOperator = getSrv(unitObj, gvyBaseClass)&#xA;            }&#xA;            def srvAttr = gvyTxtMsgFmt.doIt('srv', equiOperator)&#xA;&#xA;            //HAZFLAG OPEN/CLOSE - A4&#xA;            def gvyCmisTrade = gvyBaseClass.getGroovyClassInstance('GvyCmisTrade')&#xA;            def hazOpenCloseFlag = gvyCmisTrade.processTrade(unitObj, equiOperator)&#xA;            def hazOpenCloseFlagAttr = gvyTxtMsgFmt.doIt('hazOpenCloseFlag', hazOpenCloseFlag)&#xA;&#xA;            //TEMP &amp; TEMPERATURE MEASUREMENT UNIT&#xA;            def tempConvUnit = null&#xA;            def tempMeasurementUnit = null&#xA;            def tempReq = u.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempRequiredC&quot;);&#xA;            def tempMin = u.getFieldValue(&quot;ufvUnit.unitGoods.gdsReeferRqmnts.rfreqTempLimitMinC&quot;);&#xA;            def tempSetting = u.getFieldValue(&quot;unitActiveUfv.ufvFlexString07&quot;); //A07&#xA;            tempSetting = tempSetting != null ? tempSetting : ''&#xA;            if (tempReq == null) {&#xA;                tempReq = tempMin&#xA;            }&#xA;            if (tempReq == null &amp;&amp; tempSetting.equals('AMB')) {&#xA;                tempConvUnit = 'AMB'&#xA;                tempMeasurementUnit = ''&#xA;            } else {&#xA;                if (equiOperator.equals('MAT')) {&#xA;                    tempConvUnit = tempReq != null ? Math.round((tempReq * 9 / 5) + 32) : tempReq&#xA;                    tempMeasurementUnit = tempConvUnit != null ? 'F' : ''&#xA;                } else {&#xA;                    tempConvUnit = tempReq != null ? Math.round(tempReq) : tempReq&#xA;                    tempMeasurementUnit = tempConvUnit != null ? 'C' : ''&#xA;                }&#xA;            }&#xA;            def tempAttr = gvyTxtMsgFmt.doIt('temp', tempConvUnit)&#xA;            def tempMeasureUnitAttr = gvyTxtMsgFmt.doIt('tempMeasurementUnit', tempMeasurementUnit)&#xA;&#xA;            /**&#xA;             * temp2, tempMeasurementUnit2, tempSetting fields for ALASKA&#xA;             */&#xA;            def tempConvUnit2 = null;&#xA;            def tempMeasurementUnit2 = null&#xA;            def tempReq2 = u.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempRequiredC&quot;);&#xA;            def tempSetting2 = u.getFieldValue(&quot;unitActiveUfv.ufvFlexString07&quot;); //A07&#xA;            tempSetting2 = tempSetting2 != null ? tempSetting2 : ''&#xA;&#xA;            if (tempReq2 == null &amp;&amp; tempSetting2.equals('AMB')) {&#xA;                tempConvUnit2 = 'AMB'&#xA;                tempMeasurementUnit2 = ''&#xA;            } else {&#xA;                if (equiOperator.equals('MAT')) {&#xA;                    tempConvUnit2 = tempReq2 != null ? Math.round((tempReq2 * 9 / 5) + 32) : tempReq2&#xA;                    tempMeasurementUnit2 = tempConvUnit2 != null ? 'F' : ''&#xA;                } else {&#xA;                    tempConvUnit2 = tempReq2 != null ? Math.round(tempReq2) : tempReq2&#xA;                    tempMeasurementUnit2 = tempConvUnit2 != null ? 'C' : ''&#xA;                }&#xA;            }&#xA;&#xA;            def tempAttr2 = gvyTxtMsgFmt.doIt('temp2', tempConvUnit2);&#xA;            def tempMeasureUnitAttr2 = gvyTxtMsgFmt.doIt('tempMeasurementUnit2', tempMeasurementUnit2);&#xA;            def tempSettingAttr = gvyTxtMsgFmt.doIt('tempSetting', tempSetting);&#xA;&#xA;&#xA;            equiFieldAttr = tareWeightAttr + typeCodeAttr + hgtAttr + strengthAttr + ownerAttr + damageCodeAttr + srvAttr + tempAttr + tempMeasureUnitAttr + tempAttr2 + equiTypeCodeAttr + hazOpenCloseFlagAttr + tempSettingAttr&#xA;&#xA;            //println(&quot;Equipment : &quot;+equiFieldAttr)&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return equiFieldAttr&#xA;    }&#xA;&#xA;//Equipment Material,Height Code mapping&#xA;    public String TypeCodeProcessing(String equiType, String equiHeight, String equiMaterial) {&#xA;        def equiMat = equiMaterial.equals('STEEL') ? 'ST' : (equiMaterial.equals('ALUMINUM') ? 'AL' : 'XX')&#xA;        def equiTypeFmt = equiType.substring(0, 3)&#xA;        if (equiType.length() &gt; 4) {&#xA;            equiMat = equiType.substring(4);&#xA;        }&#xA;        def equiHgt = getEquiHeight(equiHeight)&#xA;        def typeCode = equiTypeFmt + ' ' + equiHgt + equiMat&#xA;        return typeCode;&#xA;    }&#xA;&#xA;    private String getEquiHeight(String equiHeight) {&#xA;        def hgt = ''&#xA;        if (equiHeight.startsWith('NOM')) {&#xA;            hgt = equiHeight.length() &gt; 5 ? equiHeight.substring(3) : equiHeight.substring(3)&#xA;            return hgt&#xA;        }&#xA;        return hgt&#xA;    }&#xA;&#xA;    public String getSrv(Object unit, Object gvyBaseClass) {&#xA;        def srv = ''&#xA;        def vesselLineOptr = ''&#xA;        try {&#xA;            def unitLineOperator = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOperator.bzuId&quot;)&#xA;            unitLineOperator = unitLineOperator != null ? unitLineOperator : ''&#xA;&#xA;            vesselLineOptr = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqoVesselVisit.cvCvd.vvdBizu.bzuId&quot;)&#xA;            vesselLineOptr = vesselLineOptr != null ? vesselLineOptr : ''&#xA;&#xA;            def intObCarrierMode = unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvCarrierMode&quot;)&#xA;            intObCarrierMode = intObCarrierMode != null ? intObCarrierMode.getKey() : ''&#xA;&#xA;            def dObCarreirmode = unit.getFieldValue(&quot;unitRouting.rtgDeclaredCv.cvCarrierMode&quot;)&#xA;            dObCarreirmode = dObCarreirmode != null ? dObCarreirmode.getKey() : ''&#xA;&#xA;            //Get Equi SRV&#xA;            def unitEquipment = unit.getUnitPrimaryUe()&#xA;            def ueEquipmentState = unitEquipment.getUeEquipmentState()&#xA;            def equipFlex01 = ueEquipmentState != null ? ueEquipmentState.getEqsFlexString01() : ''&#xA;&#xA;            def ObDeclaredVesClassType = unit.getFieldValue(&quot;unitRouting.rtgDeclaredCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;            ObDeclaredVesClassType = ObDeclaredVesClassType != null ? ObDeclaredVesClassType.getKey() : &quot;&quot;&#xA;&#xA;            def intObCarVesType = unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;)&#xA;            intObCarVesType = intObCarVesType != null ? intObCarVesType.getKey() : &quot;&quot;&#xA;&#xA;            def bookingNumber = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;);&#xA;&#xA;            //Equipment Deliver Order Object&#xA;            def gvyEdoObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEquipmentDeliveryOrder&quot;);&#xA;            def edo = bookingNumber != null ? gvyEdoObj.findEquipmentDeliveryOrder(bookingNumber) : null&#xA;&#xA;            def isVessel = (intObCarrierMode.equals('VESSEL') || dObCarreirmode.equals('VESSEL')) ? true : false&#xA;            def isBarge = (ObDeclaredVesClassType.equals('BARGE') || intObCarVesType.equals('BARGE')) ? true : false&#xA;            def isLongHaul = (ObDeclaredVesClassType.equals('CELL') || intObCarVesType.equals('CELL')) ? true : false&#xA;            def isVesLineOperatorMat = vesselLineOptr.equals('MAT') ? true : false&#xA;&#xA;            println(&quot;EqFlex01 :&quot; + equipFlex01 + &quot; isVessel:&quot; + isVessel + &quot;  isBarge:&quot; + isBarge + &quot;  isLongHaul:&quot; + isLongHaul + &quot;   isVesLineOperatorMat:&quot; + isVesLineOperatorMat)&#xA;&#xA;&#xA;println(&quot;After EqFlex01 null :&quot; + equipFlex01 );&#xA;            if (equipFlex01!=null &amp;&amp; !equipFlex01.isEmpty() &amp;&amp; equipFlex01.length()&gt;2 &amp;&amp;equipFlex01.equals('MAT')) {&#xA;                srv = 'MAT'&#xA;            } else if (edo != null) {&#xA;                srv = gvyEdoObj.getEDOLineOperator(edo)&#xA;            } else if (equipFlex01!=null &amp;&amp; !equipFlex01.isEmpty() &amp;&amp; equipFlex01.length()&gt;2 &amp;&amp; equipFlex01.startsWith(&quot;CLI&quot;) &amp;&amp; isVessel &amp;&amp; isBarge) {&#xA;                srv = 'MAT'&#xA;            } else if (equipFlex01!=null &amp;&amp; !equipFlex01.isEmpty() &amp;&amp; equipFlex01.length()&gt;2 &amp;&amp; equipFlex01.startsWith(&quot;CLI&quot;) &amp;&amp; isVessel &amp;&amp; isLongHaul &amp;&amp; isVesLineOperatorMat) {&#xA;                srv = 'MAT'&#xA;            } else if (equipFlex01!=null &amp;&amp; !equipFlex01.isEmpty() &amp;&amp; equipFlex01.length()&gt;2 &amp;&amp; equipFlex01.startsWith(&quot;CLI&quot;) &amp;&amp; bookingNumber &amp;&amp; isVesLineOperatorMat) {&#xA;                srv = 'MAT'&#xA;            } else if (equipFlex01!=null &amp;&amp; !equipFlex01.isEmpty() &amp;&amp; equipFlex01.length()&gt;2 &amp;&amp; equipFlex01.startsWith(&quot;CLI&quot;) &amp;&amp; isVessel &amp;&amp; isLongHaul &amp;&amp; !isVesLineOperatorMat) {&#xA;                srv = unitLineOperator&#xA;            } else if (equipFlex01!=null &amp;&amp; !equipFlex01.isEmpty() &amp;&amp; equipFlex01.length()&gt;2 &amp;&amp; equipFlex01.startsWith(&quot;CLI&quot;) &amp;&amp; !isVessel) {&#xA;                srv = unitLineOperator&#xA;            } else {&#xA;                srv = unitLineOperator&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return srv&#xA;    }&#xA;&#xA;    public String getSrvUnitLoad(Object unit) {&#xA;&#xA;        def unitEquipment = unit.getUnitPrimaryUe()&#xA;        def ueEquipmentState = unitEquipment.getUeEquipmentState()&#xA;&#xA;        def unitLineOperator = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOperator.bzuId&quot;)&#xA;        println (&quot;Operator Id : &quot;+unitLineOperator);&#xA;        unitLineOperator = unitLineOperator != null ? unitLineOperator : ''&#xA;&#xA;        def vesLineOptr = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqoVesselVisit.cvCvd.vvdBizu.bzuId&quot;)&#xA;        if (vesLineOptr==null)&#xA;        {&#xA;            vesLineOptr = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.carrierOperatorId&quot;);&#xA;        }&#xA;        println(&quot;Testing getSrvUnitLoad vesLineOptr :&quot;+vesLineOptr);&#xA;&#xA;        vesLineOptr = vesLineOptr != null ? vesLineOptr : (unitLineOperator.equals('MAT') ? 'MAT' : '')&#xA;        println (&quot;vesLineOptr Id : &quot;+vesLineOptr);&#xA;        vesLineOptr = !vesLineOptr.equals('MAT') ? 'CLI' : 'MAT'&#xA;        ueEquipmentState.setEqsFlexString01(vesLineOptr)&#xA;        return vesLineOptr;&#xA;    }&#xA;&#xA;//Method Sets the Eq Cnt Srv if Blank&#xA;    public void setEqCntrSvr(Object event) {&#xA;        def unit = event.getEntity()&#xA;        def eventId = event.getEvent().getEventTypeId()&#xA;        try {&#xA;            //Get Equi SRV&#xA;            def unitEquipment = unit.getUnitPrimaryUe()&#xA;            def ueEquipmentState = unitEquipment.getUeEquipmentState()&#xA;            def equipFlex01 = ueEquipmentState != null ? ueEquipmentState.getEqsFlexString01() : null&#xA;            println(&quot;Eq Srv Company : &quot;+equipFlex01);&#xA;            if (equipFlex01 != null &amp;&amp; !(eventId.equals('UNIT_DISCH_COMPLETE') || eventId.equals('UNIT_IN_GATE') ||&#xA;                    eventId.equals('UNIT_ROLL'))) {&#xA;                return;&#xA;            }&#xA;&#xA;            def unitLineOperator = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOperator.bzuId&quot;)&#xA;            unitLineOperator = unitLineOperator != null ? unitLineOperator : ''&#xA;&#xA;            def equiSrv = ''; def vesLineOptr = '';&#xA;            if (eventId.equals('UNIT_DISCH_COMPLETE')) {&#xA;                //Actual Vessle Line Optr&#xA;                vesLineOptr = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdBizu.bzuId&quot;)&#xA;            } else if (eventId.equals('UNIT_IN_GATE') || eventId.equals('UNIT_ROLL')) {&#xA;                //Ingate Bkg Line Operator&#xA;                vesLineOptr = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqoVesselVisit.cvCvd.vvdBizu.bzuId&quot;)&#xA;            }&#xA;&#xA;            //verify and set EqSrv Cntr&#xA;            vesLineOptr = vesLineOptr != null ? vesLineOptr : (unitLineOperator.equals('MAT') ? 'MAT' : '')&#xA;            vesLineOptr = !vesLineOptr.equals('MAT') ? 'CLI' : 'MAT'&#xA;            ueEquipmentState.setEqsFlexString01(vesLineOptr)&#xA;&#xA;            println(&quot;eventId ::&quot; + eventId + &quot; Eq SRV :&quot; + equipFlex01 + &quot; vesLineOptr :&quot; + vesLineOptr + &quot;    unitLineOperator::&quot; + unitLineOperator)&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStacktrace()&#xA;        }&#xA;    }&#xA;&#xA;    //Method Flips Mty Client Cntr EquiOperator from MAT to Cli Operator&#xA;    public void flipMtyCliCntrOperator(Object unit) {&#xA;        try {&#xA;            //Get Equi SRV&#xA;            def unitEquipment = unit.getUnitPrimaryUe()&#xA;            def ueEquipmentState = unitEquipment.getUeEquipmentState()&#xA;            def equipFlex01 = ueEquipmentState != null ? ueEquipmentState.getEqsFlexString01() : &quot;&quot;&#xA;            if (equipFlex01 == null || equipFlex01.length() == 0 || !equipFlex01.startsWith(&quot;CLI&quot;)) {&#xA;                return;&#xA;            }&#xA;&#xA;            def freightKind = unit.unitFreightKind.name;&#xA;            def equiOwner = unit.unitPrimaryUe.ueEquipmentState.eqsEqOwner.bzuId&#xA;            def lineOperator = unit.unitPrimaryUe.ueEquipmentState.eqsEqOperator.bzuId&#xA;&#xA;            println(&quot;freightKind ::&quot; + freightKind + &quot; equiOwner:&quot; + equiOwner + &quot;  lineOperator:&quot; + lineOperator)&#xA;            if (&quot;MTY&quot;.equals(freightKind) &amp;&amp; &quot;MAT&quot;.equals(lineOperator)) {&#xA;                lineOperator = equiOwner != null ? equiOwner.substring(0, equiOwner.length() - 1) : lineOperator&#xA;                def bzuid = lineOperator != null ? com.navis.argo.business.reference.LineOperator.findLineOperatorById(lineOperator) : null&#xA;                if (bzuid != null)&#xA;                    unit.setUnitLineOperator(bzuid)&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;&#xA;}//Class Ends" />
<digital-asset id="MdaReleaseProc" short-description="MDA Release Proc" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.atoms.EventEnum&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.argo.business.atoms.DrayStatusEnum&#xA;&#xA;public class MdaReleaseProc {&#xA;    public String process(Object equip) {&#xA;&#xA;&#x9;def equiId = equip.getFieldValue(&quot;eqsEquipment.eqIdFull&quot;) // Object Equipment.EqId&#xA;&#xA;&#x9;//println(&quot;equiId = &quot;+equiId)&#xA;&#xA;&#x9;def injBase = new GroovyInjectionBase();&#xA;&#xA;&#x9;def complex = ContextHelper.getThreadComplex();&#xA;&#xA;&#x9;def unitFinder = injBase.getUnitFinder();&#xA;&#xA;&#x9;def eq = Equipment.loadEquipment( equiId);&#xA;&#xA;&#x9;def unit = unitFinder.findAttachedUnit(complex, eq);&#xA;&#xA;&#x9;if ( unit != null) {&#xA;&#x9;&#x9;def unitId = unit.getFieldValue(&quot;unitId&quot;);&#xA;&#x9;&#x9;//println( &quot;UnitId = &quot; + unitId);&#xA;&#x9;&#x9;unit.setFieldValue( &quot;unitDrayStatus&quot;, null);&#xA;&#x9;} else {&#xA;&#x9;&#x9;println( &quot;Unit is null.&quot;);&#xA;&#x9;}&#xA;&#xA;&#xA;}&#xA;}" />
<digital-asset id="GvyUnitLookup" short-description="GvyUnitLookup" is-pre-deployed="N" groovy-code="import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import java.util.Iterator;&#xA;import java.util.Collection;&#xA;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.business.api.UnitFinder; &#xA;&#xA;&#xA;/*&#xA;**********************************************************************&#xA;* Srno   Date&#x9;        Changer&#x9; &#x9; Change Description&#xA;* A0     05/22/09&#x9;Steven Bauer&#x9; Added getUfvActiveInComplex&#xA;* A1     06/08/09&#x9;Steven Bauer&#x9; Added setTimeIn&#xA;* A2     11/01/11                GR&#x9;&#x9;Removed Prints&#xA;**********************************************************************&#xA;*/&#xA;public class GvyUnitLookup {&#xA;&#xA;/** Assumes there is only one advised ufv per unit */&#xA;public Object lookupFacility(Object id) {&#xA;  &#xA;   try {&#xA;      DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;      dq.addDqPredicate(PredicateFactory.eq(InventoryField.UFV_UNIT,id ));    &#xA;      def list = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;   if(list != null) {&#xA;      Iterator iter = list.iterator();&#xA;      while(iter.hasNext()) {&#xA;          def visit = iter.next();&#xA;          if(visit.getFieldValue(&quot;ufvTransitState&quot;).equals(com.navis.inventory.business.atoms.UfvTransitStateEnum.S10_ADVISED)) {&#xA;      return visit;&#xA;}&#xA;   }}&#xA;   return null;&#xA;   } catch (Exception e) {&#xA;      println(&quot;Exception in GvyUnitLookup &quot;+e.getMessage());&#xA;      e.printStackTrace();&#xA;   }&#xA;&#xA;   return null;&#xA;  }&#xA;&#xA;public Object lookupActiveUnit(Object id) {&#xA;&#xA;   try {&#xA;      DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;);&#xA;&#x9;&#x9;&#xA;      dq.addDqPredicate(PredicateFactory.eq(InventoryField.UNIT_ID,id ));     &#xA;      def list = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;      if(list != null) {&#xA;         Iterator iter = list.iterator();&#xA;         while(iter.hasNext()) {&#xA;             def unit = iter.next();&#xA;             if(unit.getFieldValue(&quot;unitVisitState&quot;).equals(&#xA;                 com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE)) {&#xA;                 return unit;&#xA;             }&#xA;        }&#xA;   }&#xA;  &#xA;   return null;&#xA;   } catch (Exception e) {&#xA;      println(&quot;Exception in GvyUnitLookup &quot;+e.getMessage());&#xA;      e.printStackTrace();&#xA;   }&#xA;&#xA;   return null;&#xA;  }&#xA;&#xA;   public void copyFeild(String key,Object oldUnit,Object newUnit) {&#xA;      def value = oldUnit.getFieldValue(key);&#xA;      println(&quot;Key=&quot;+key+&quot; value=&quot;+value);&#xA;      if(value != null)  newUnit.setFieldValue(key,value);&#xA;      println(&quot;Key=&quot;+key+&quot; value=&quot;+value+&quot; new val=&quot;+newUnit.getFieldValue(key));&#xA;   }&#xA;&#xA;   public void copyCVFeild(String key,Object oldUnit,Object newUnit) {&#xA;      def value = oldUnit.getFieldValue(key+&quot;.cvId&quot;);&#xA;      println(&quot;Key=&quot;+key+&quot; value=&quot;+value);&#xA;      if(value != null)  newUnit.setFieldValue(key,value);&#xA;   }&#xA;&#xA;  public void copyUnitValues(Object oldUnit,Object newUnit) {&#xA;    copyFeild(&quot;unitFreightKind&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitSealNbr1&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitSealNbr2&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitSealNbr3&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitSealNbr4&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitCategory&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitDrayStatus&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitLineOperator&quot;,oldUnit,newUnit);&#xA;&#xA;    copyFeild(&quot;unitDeclaredIbCv&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitIntendedObCv&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitActiveUfv.ufvActualIbCv&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitActiveUfv.ufvActualObCv&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitActiveUfv.ufvIntendedObCv&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitActiveUfv.ufvArrivePosition&quot;,oldUnit,newUnit);&#xA;&#xA;    copyFeild(&quot;unitActiveUfv.ufvLastFreeDay&quot;,oldUnit,newUnit);&#xA; &#xA;    copyFeild(&quot;unitGoods.gdsConsigneeBzu&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitGoods.gdsShipperBzu&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitGoods.gdsBlNbr&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitGoods.gdsHazards&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitGoods.gdsOrigin&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitGoods.gdsDestination&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitGoods.gdsCommodity&quot;,oldUnit,newUnit);&#xA;&#xA;    copyFeild(&quot;unitGoods.gdsHazards&quot;,oldUnit,newUnit);&#xA;   &#xA;    copyFeild(&quot;unitGoods.gdsReeferRqmnts.rfreqTempRequiredC&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitGoods.gdsReeferRqmnts.rfreqTempLimitMaxC&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitGoods.gdsReeferRqmnts.rfreqTempLimitMinC&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitGoods.gdsReeferRqmnts.rfreqTempShowFarenheit&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitGoods.gdsReeferRqmnts.rfreqVentRequired&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitGoods.gdsReeferRqmnts.rfreqVentUnit&quot;,oldUnit,newUnit);&#xA;&#xA;    copyFeild(&quot;rtgGroup&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;rtgPOL&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;rtgPOD1&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;rtgPOD2&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;rtgOPL&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;rtgTruckingCompany&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;rtgCarrierService&quot;,oldUnit,newUnit);&#xA;&#xA;    copyFeild(&quot;unitFlexString01&quot;,oldUnit,newUnit);  // Consignee PO #&#xA;    copyFeild(&quot;unitFlexString02&quot;,oldUnit,newUnit);  // Release To&#xA;    copyFeild(&quot;unitFlexString03&quot;,oldUnit,newUnit);  // CSR ID&#xA;    copyFeild(&quot;unitFlexString04&quot;,oldUnit,newUnit);  // Advanced VVD&#xA;    copyFeild(&quot;unitFlexString05&quot;,oldUnit,newUnit);  // Det Code&#xA;    copyFeild(&quot;unitFlexString06&quot;,oldUnit,newUnit);  // Stif Shpr  &#xA;    copyFeild(&quot;unitFlexString08&quot;,oldUnit,newUnit);  // Priority Stow&#xA;   &#xA;    copyFeild(&quot;unitSpecialStow&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitSpecialStow2&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitSpecialStow3&quot;,oldUnit,newUnit);&#xA;    copyFeild(&quot;unitRemark&quot;,oldUnit,newUnit);&#xA;&#xA;    // Holds&#xA;   try {&#xA;    ServicesManager sm = (ServicesManager)Roastery.getBean(&quot;servicesManager&quot;);&#xA;    sm.copyActiveFlags (oldUnit, newUnit);&#xA;   } catch (Exception e) {&#xA;     e.printStackTrace();&#xA;   }&#xA;&#xA;  /* Not working&#xA;   Collection collect =  com.navis.services.business.rules.Flag.findAllFlagsForEntity(oldUnit);&#xA;   println(&quot;Flags=&quot;+collect);&#xA;   Iterator iter = collect.iterator();&#xA;    println(&quot;Flags=&quot;+collect);&#xA;&#xA;   while(iter.hasMore()) {&#xA;      Object o = iter.next();&#xA;      println(&quot;Hold=&quot;+o);&#xA;      com.navis.services.business.rules.Flag.createFlag(o.getFlagFlagType(), newUnit, null, o.getFlagNote() );&#xA;    }&#xA;   */&#xA; &#xA;   &#xA;  &#xA;   }&#xA;&#xA;public String setOwner() {&#xA;   try {&#xA;      DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;);&#xA;      def list = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;      if(list != null) {&#xA;         Iterator iter = list.iterator();&#xA;         &#xA;         while(iter.hasNext()) {&#xA;             def unit = iter.next();&#xA;             def ownerCode =unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOwner.bzuId&quot;);&#xA;             if(ownerCode == null) ownerCode = &quot;&quot;;&#xA;             if(ownerCode.equals('MATU') || ownerCode.equals('ANLC') || ownerCode.equals('ANZU') || ownerCode.equals('APLU') ||&#xA;&#x9;     &#x9;     ownerCode.equals('CCLU') || ownerCode.equals('CSXU') || ownerCode.equals('DOLU') || ownerCode.equals('FSCU') ||  &#xA;&#x9;     &#x9;     ownerCode.equals('HLCU') || ownerCode.equals('MAEU') || ownerCode.equals('MSGU') || ownerCode.equals('MSLU') ||&#xA;&#x9;     &#x9;     ownerCode.equals('NYKU') || ownerCode.equals('POLU') ||  ownerCode.equals('PONU') || ownerCode.equals('SHOW') ||&#xA;&#x9;     &#x9;     ownerCode.equals('ZCSU') || ownerCode.equals('HSDU') || ownerCode.equals('FHSU') || ownerCode.equals('CPSU') )&#xA;&#x9;      {&#xA;&#x9;          unit.setUnitFlexString13(ownerCode);&#xA;&#x9;          println(&quot;unit=&quot;+unit+&quot; &quot;+ownerCode);&#xA;&#x9;      }&#xA;&#x9;     &#xA;&#x9;      else{&#xA;&#x9;        unit.setUnitFlexString13('LEAS');&#xA;&#x9;        println(&quot;unit=&quot;+unit+&quot; &quot;+ownerCode);&#xA;&#x9;     }&#xA;&#xA;             &#xA;        }&#xA;   }&#xA;   return &quot;Done&quot;;&#xA;   } catch (Exception e) {&#xA;      println(&quot;Exception in GvyUnitLookup &quot;+e.getMessage());&#xA;      e.printStackTrace();&#xA;   }&#xA;&#xA;   return null;&#xA;  }&#xA;&#xA;/** &#xA;   *  Find the current unit by the foriegn key&#xA;   */&#xA;  public Object  findCurrentUnit(String id) {&#xA;   try {&#xA;      DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;);&#xA;&#x9;&#x9;&#xA;      dq.addDqPredicate(PredicateFactory.eq(InventoryField.UNIT_FOREIGN_HOST_KEY,id ));     &#xA;      def list = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;      if(list != null) {&#xA;         Iterator iter = list.iterator();&#xA;         while(iter.hasNext()) {&#xA;            def unit = iter.next();&#xA;            return unit;&#xA;        }&#xA;   }&#xA;  &#xA;   return null;&#xA;   } catch (Exception e) {&#xA;      println(&quot;Exception in GvyUnitLookup &quot;+e.getMessage());&#xA;      e.printStackTrace();&#xA;   }&#xA;   return null;&#xA;   }&#xA;   &#xA;   /*&#xA;    *  Find active ufv by Complex&#xA;    */ &#xA;   public Object getUfvActiveInComplex(String unitId)&#xA;     {&#xA;      def ufvActiveInComplex = null; &#xA;      try&#xA;      {&#xA;       def ufvSet = findVisitStateActiveUnit(unitId)&#xA;       //Check for Multiple ufv in Active state: Depart the Active unit First&#xA;       for(aUfvActive in ufvSet){&#xA;        if (UnitVisitStateEnum.ACTIVE.equals(aUfvActive.getUfvVisitState())) {&#xA;             ufvActiveInComplex = aUfvActive&#xA;        }&#xA;       }&#xA;      }catch(Exception e){&#xA;         e.printStackTrace()&#xA;      }&#xA;       return ufvActiveInComplex&#xA;     }&#xA;   &#xA;&#xA;     // Method returns a Set of Complex Level Master State Active Units &#xA;     public Set findVisitStateActiveUnit(String unitId)&#xA;     {&#xA;       Set unitUfvSet = null   &#xA;       try{&#xA;       &#xA;       def injBase = new GroovyInjectionBase() &#xA;       def unitFinder = injBase.getUnitFinder()&#xA;       def complex = ContextHelper.getThreadComplex();&#xA;   &#xA;       def inEquipment = Equipment.loadEquipment(unitId);&#xA;       def inUnit = unitFinder.findActiveUnit(complex,inEquipment)&#xA;       unitUfvSet = inUnit != null ? inUnit.getUnitUfvSet() : null; &#xA;       }catch(Exception e){&#xA;          e.printStackTrace()&#xA;       }   &#xA;       return unitUfvSet&#xA;     }&#xA;   &#xA;     public void setTimeIn(unit) {&#xA;        def oldUnit = findCurrentUnit(unit.unitId);&#xA;        if(oldUnit != null &amp;&amp; oldUnit.unitActiveUfv != null) {&#xA;           unit.unitActiveUfv.ufvTimeIn = oldUnit.unitActiveUfv.ufvTimeIn;&#xA;        }&#xA;     }&#xA;}&#xA;" />
<digital-asset id="GvyCmisCommentNotesField" short-description="GvyCmisCommentNotesField" is-pre-deployed="N" groovy-code="/*&#xA;* SrNo  Doer  Date    Change&#xA;* A1    GR  06/28/10  Arranged Hold Order Sequence&#xA;* A2    GR   12/13/11  Update HOLD FOR LNK&#xA;*&#xA;*/&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.api.IFlagType&#xA;import com.navis.argo.business.atoms.FlagPurposeEnum&#xA;&#xA;&#xA;public class GvyCmisCommentNotesField {&#xA;&#xA; public String doIt(Object gvyEventObj, String eventType, Object gvyTxtMsgFmt, Object unitObj)&#xA; {&#xA;    println(&quot;In Class GvyCmisCommentNotesField.doIt()&quot;)&#xA;    def u = unitObj&#xA;    def CommentCargoStatusFields = ''&#xA;    try&#xA;   {&#xA;       def groupCode = u.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;);&#xA;&#xA;      def lkpSlot=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;      lkpSlot = lkpSlot != null ? lkpSlot : ''&#xA;&#xA;      def _pmdDt =u.getFieldValue(&quot;unitActiveUfv.ufvFlexDate01&quot;)&#xA;      def strpmd = _pmdDt != null ? (''+_pmdDt) : ''&#xA;      def pmd =  strpmd.length() &gt; 10 ? strpmd.substring(8,10) : strpmd&#xA;&#xA;      def equiType=u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;)&#xA;      equiType = equiType != null ? equiType : ''&#xA;&#xA;      def _drayStatus=u.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;      def drayStatus = _drayStatus!= null ? _drayStatus.getKey() : _drayStatus&#xA;&#xA;      def reviewForStow =u.getFieldValue(&quot;unitActiveUfv.ufvFlexString01&quot;)&#xA;&#xA;&#xA;     //Cargo Status&#xA;     def cargoNotes=u.getFieldValue(&quot;unitRemark&quot;)&#xA;     cargoNotes = cargoNotes != null ? cargoNotes : ''&#xA;   cargoNotes = processCargoNotesOnEvent(gvyEventObj,eventType,cargoNotes,groupCode,lkpSlot,pmd,equiType,reviewForStow,drayStatus)&#xA;&#xA;   String cargoNotesOverFlow = '';&#xA;    if(cargoNotes.length() &gt; 65){&#xA;       int cargoNotesIndex = cargoNotes.substring(0,65).lastIndexOf(&quot; &quot;);&#xA;       cargoNotesOverFlow = cargoNotes.substring(cargoNotesIndex+1,cargoNotes.length());&#xA;       cargoNotes = cargoNotes.substring(0,cargoNotesIndex);&#xA;    }&#xA;   def cargoNotesAttr = gvyTxtMsgFmt.doIt('cargoNotes',cargoNotes.trim())&#xA;&#xA;  //CRSSTATUS&#xA;  def crsStatus = null&#xA;  //Being Set as a HOLD&#xA;  /* if(eventType.equals(&quot;TAG_STRIP_ASSIGN&quot;) ||&#xA;              (groupCode != null &amp;&amp; groupCode.equals('TS') )) {&#xA;          crsStatus = groupCode +' '+ getUnitActiveHolds(unitObj)&#xA;   }else{&#xA;          crsStatus = getUnitActiveHolds(unitObj)&#xA;   }*/&#xA;   crsStatus = getUnitActiveHolds(unitObj)&#xA;&#xA;   def holdsApp = ''&#xA;   if(crsStatus.length() &gt; 10){&#xA;       int commaIndex = crsStatus.substring(0,11).lastIndexOf(' ');&#xA;&#x9;   if (commaIndex &lt; 0) {&#xA;&#x9;&#x9;&#x9;commaIndex = crsStatus.substring(0,11).lastIndexOf('_');&#xA;       }&#xA;       holdsApp = crsStatus.substring(commaIndex+1,crsStatus.length());&#xA;       crsStatus = crsStatus.substring(0,commaIndex);&#xA;    }&#xA;    def crsStatusAttr = gvyTxtMsgFmt.doIt('crStatus',crsStatus)&#xA;&#xA;    //Comments&#xA;    def commentValue = holdsApp.trim()+'_'+cargoNotesOverFlow.trim()&#xA;    def comments = processCommentOnEvent(commentValue,unitObj,eventType,groupCode, lkpSlot,drayStatus)&#xA;    comments = comments != null ? comments.trim() : ''&#xA;    def commentAttr =  gvyTxtMsgFmt.doIt('comments', comments)&#xA;&#xA;    //Save unitRemark (cargoNotes + comments)&#xA;    saveUnitRemarks(unitObj,cargoNotes,comments,holdsApp)&#xA;&#xA;    CommentCargoStatusFields = commentAttr+crsStatusAttr+cargoNotesAttr&#xA;&#xA;   }catch(Exception e){&#xA;       e.printStackTrace()&#xA;   }&#xA;&#xA;    return CommentCargoStatusFields&#xA;&#xA;   }//doIt Ends&#xA;&#xA;   public String processCommentOnEvent(String commentData, Object unit, String eventType, String groupCd, String lkpSlot,String drayStatus)&#xA;   {&#xA;       println(&quot;processCommentOnEvent method&quot;)&#xA;       def comment = commentData != null ? commentData : ''&#xA;&#xA;       def groupCode = groupCd != null ? groupCd : ''&#xA;       def rfsNotes =  unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString01&quot;)&#xA;       def commentFlag = comment.endsWith(&quot;_&quot;)&#xA;&#xA;&#xA;       //Checking on Group&#xA;        if(groupCode.equals('XFER-P2') &amp;&amp; drayStatus.equals('OFFSITE') )&#xA;       {&#xA;        comment = commentFlag ? comment+'XFR BTW P53-P2' : comment+' XFR BTW P53-P2'&#xA;&#xA;       }else if(groupCode.equals('XFER-WO') &amp;&amp; drayStatus.equals('OFFSITE'))&#xA;       {&#xA;        comment = commentFlag ? comment+'XFR BTW P53-WO' : comment+' XFR BTW P53-WO'&#xA;       }&#xA;        else if(groupCode.equals('XFER-SI') &amp;&amp; drayStatus.equals('OFFSITE'))&#xA;       {&#xA;         //Check if Unit in P2 or WO and then Update Comments&#xA;          if(lkpSlot.startsWith('WOA')){&#xA;              comment = commentFlag ? comment+'XFR BTW P53-WO' : comment+' XFR BTW P53-WO'&#xA;          }&#xA;          else if(lkpSlot.startsWith('P2')){&#xA;            comment = commentFlag ?comment+'XFR BTW P53-P2' : comment+' XFR BTW P53-P2'&#xA;          }&#xA;       }&#xA;&#xA;       //Formatting the comment&#xA;       comment = formatCommentSize(comment);&#xA;       def appendFlag = comment.startsWith(&quot;_&quot;) || comment.endsWith(&quot;_&quot;);&#xA;       comment = appendFlag ? comment.replace(&quot;_&quot;, &quot;&quot;) : comment&#xA;&#xA;       return comment&#xA;    }&#xA;    private  String formatCommentSize(String _comment)&#xA;    {&#xA;       def commentValue = null;&#xA;       def comment = _comment;&#xA;       def  commentLen = comment.length();&#xA;       if(commentLen &gt; 65 &amp;&amp; comment.indexOf(&quot;_&quot;)!= -1)&#xA;       {&#xA;           def index = comment.indexOf(&quot;_&quot;);&#xA;           def stripCharLen = commentLen - 65;&#xA;           commentValue = comment.substring(0, index+1)+comment.substring((index+1)+stripCharLen);&#xA;       }&#xA;       else if(commentLen &gt; 65 &amp;&amp; comment.indexOf(&quot;_&quot;)== -1){&#xA;            def stripCharLen = commentLen - 65;&#xA;            commentValue = comment.substring(stripCharLen);&#xA;       }&#xA;       else{&#xA;            commentValue = comment;&#xA;       }&#xA;      return commentValue;&#xA;     }&#xA;&#xA;   private String processCargoNotesOnEvent(Object gvyEventObj,String eventType,String cargoNotesInfo,String group, String lkpSlot, String pmd,String equiType,String reviewForStow,String drayStatus)&#xA;   {&#xA;     def groupCode = group != null ? group : ''&#xA;     def cargoNotes = cargoNotesInfo != null ? cargoNotesInfo : ''&#xA;     def eventnotes = gvyEventObj != null ? gvyEventObj.getEvntNote() : ''&#xA;&#xA;      //Striping Event based Cargo Notes Information&#xA;      cargoNotes = stripCargoNotes(eventType,cargoNotes,groupCode,pmd)&#xA;&#xA;      //Appending Information&#xA;     if((groupCode.equals('XFER-WO') ||&#xA;             (groupCode.equals('XFER-SI') &amp;&amp; lkpSlot.startsWith('WOA')) ) &amp;&amp; drayStatus.equals('OFFSITE'))&#xA;     {&#xA;       if(!cargoNotes.startsWith(&quot;WEST OAHU&quot;)){&#xA;          cargoNotes = cargoNotes != null ? 'WEST OAHU-'+cargoNotes : 'WEST OAHU'&#xA;&#x9;   }&#xA;     }&#xA;&#xA;     if (eventType.equals('TRANSFER_CANCEL'))&#xA;     {&#xA;        cargoNotes = cargoNotes != null ? 'PDISP CANCEL '+cargoNotes : 'PDISP CANCEL '&#xA;     }&#xA;     else if((pmd != null &amp;&amp; pmd.length() &gt; 0) &amp;&amp; reviewForStow != null)&#xA;     {&#xA;        if(equiType.startsWith('R')){&#xA;           cargoNotes = cargoNotes != null ? cargoNotes+' UPG-'+pmd+' '+reviewForStow : 'UPG-'+pmd+' '+reviewForStow&#xA;&#x9;    }&#xA;&#x9;    else if(!equiType.startsWith('R')){&#xA;&#x9;       cargoNotes = cargoNotes != null ?cargoNotes+' PMD-'+pmd+' '+reviewForStow : 'PMD-'+pmd+' '+reviewForStow&#xA;&#x9;    }&#xA;     }&#xA;     else if((pmd != null &amp;&amp; pmd.length() &gt; 0) &amp;&amp; equiType.startsWith('R'))&#xA;     {&#xA;        cargoNotes = cargoNotes != null ? cargoNotes+' UPG-'+pmd : 'UPG-'+pmd&#xA;     }&#xA;     else if((pmd != null &amp;&amp; pmd.length() &gt; 0) &amp;&amp; !equiType.startsWith('R'))&#xA;     {&#xA;         cargoNotes = cargoNotes != null ?cargoNotes+' PMD-'+pmd : 'PMD-'+pmd&#xA;     }&#xA;     else if(reviewForStow != null)&#xA;     {&#xA;         cargoNotes = cargoNotes != null ?cargoNotes+' '+reviewForStow : reviewForStow&#xA;     }&#xA;/*     else if(eventType.equals('SHOP_HOLD'))&#xA;     {&#xA;       cargoNotes = cargoNotes != null ? (eventnotes!= null ? 'TO F&amp;M-'+eventnotes+'.'+cargoNotes : 'TO F&amp;M '+cargoNotes) : (eventnotes!= null ? 'TO F&amp;M-'+eventnotes+'.' : 'TO F&amp;M ')&#xA;     }&#xA;     else if(eventType.equals('CL_HOLD'))&#xA;     {&#xA;         cargoNotes = cargoNotes != null ? (eventnotes!= null ? eventnotes+' '+cargoNotes : cargoNotes) : (eventnotes!= null ? eventnotes : '')&#xA;     } */&#xA;&#xA;     return cargoNotes.trim()&#xA;   }&#xA;&#xA;   //Method Strips event specific information&#xA;   private String stripCargoNotes(String eventType,String cargoNotes, String groupCode, String pmd)&#xA;   {&#xA;      println(&quot;First stripCargoNotes Method&quot;)&#xA;      def stripCargoNotes = cargoNotes != null ? cargoNotes : ''&#xA;&#xA;      if(groupCode.equals('XFER-WO') || groupCode.equals('XFER-SI') || groupCode.equals('XFER-P2') ||  eventType.equals('TRANSFER_CANCEL')){&#xA;        stripCargoNotes = stripCargoNotes.replace(&quot;WEST OAHU-&quot;, &quot;&quot;)&#xA;        stripCargoNotes = stripCargoNotes.replace(&quot;WEST OAHU&quot;, &quot;&quot;)&#xA;        stripCargoNotes = stripCargoNotes.replace(&quot;XFR BTW P53-P2&quot;,&quot;&quot;);&#xA;        stripCargoNotes = stripCargoNotes.replace(&quot;XFR BTW P53-WO&quot;,&quot;&quot;);&#xA;     }&#xA;/*     if(eventType.equals('SHOP_RELEASE'))&#xA;     {&#xA;       stripCargoNotes = stripCargoNotes.replace(&quot;TO F&amp;M &quot;, &quot;&quot;)&#xA;       if(stripCargoNotes.indexOf(&quot;TO F&amp;M-&quot;) != -1)&#xA;       {&#xA;            stripCargoNotes = stripCargoNotes.substring(stripCargoNotes.indexOf(&quot;.&quot;)+1)&#xA;       }&#xA;     } */&#xA;     else if(eventType.equals('PREMOUNT_REQUEST_CANCEL'))&#xA;     {&#xA;         if(stripCargoNotes.indexOf(&quot;UPG-&quot;) != -1)&#xA;         stripCargoNotes = stripCargoNotes.substring(0,stripCargoNotes.indexOf(&quot;UPG-&quot;))&#xA;&#xA;         if(stripCargoNotes.indexOf(&quot;PMD-&quot;) != -1)&#xA;         stripCargoNotes = stripCargoNotes.substring(0,stripCargoNotes.indexOf(&quot;PMD-&quot;))&#xA;     }&#xA;     else if (groupCode.equals('XFER-P2') || groupCode.equals('XFER-WO') || groupCode.equals('XFER-SI'))&#xA;     {&#xA;         stripCargoNotes = stripCargoNotes.replace(&quot;PDISP CANCEL&quot;, &quot;&quot;)&#xA;     }&#xA;     return stripCargoNotes.trim()&#xA;   }&#xA;&#xA;&#xA;   private void saveUnitRemarks(Object unit,String cargoNotes,String comments, String holdsApp)&#xA;   {&#xA;     //CARGO NOTES&#xA;     def cargoNotesValue = cargoNotes != null ? cargoNotes : ''&#xA;     def holdsOverFlow = holdsApp != null ? holdsApp : ''&#xA;&#xA;     //COMMENT&#xA;     def commentOverFlow = comments != null ? comments : ''&#xA;     println('holdsOverFlow :::'+holdsOverFlow.length()+&quot;      COMMENTS OVERFLOW :::::&quot;+commentOverFlow.length())&#xA;     def commentIndex = commentOverFlow.indexOf(&quot;_&quot;)&#xA;     if(commentIndex != -1)&#xA;     {&#xA;        commentOverFlow = commentOverFlow.substring(commentIndex+1)&#xA;     }&#xA;&#xA;     if((holdsOverFlow.length() &gt; 0) &amp;&amp; (holdsOverFlow.length() == commentOverFlow.length()))&#xA;     {&#xA;          commentOverFlow = ''&#xA;     }&#xA;&#xA;     def unitRemark = cargoNotesValue.trim()+(commentOverFlow.trim().length() &gt; 0 ? ' '+commentOverFlow : commentOverFlow.trim())&#xA;     println(&quot;unitRemark :::&quot;+unitRemark)&#xA;     //unit.setUnitRemark(unitRemark)&#xA;   }&#xA;&#xA;   //Method Get Active Holds for Unit&#xA;   public String getUnitActiveHolds(Object unitbase)&#xA;   {&#xA;     def map = new HashMap()&#xA;     map.put('DRAY CANNOT LTV','')&#xA;     map.put('HOLD FOR LNK','HLD')&#xA;     map.put('CG_INSP','CG')&#xA;     map.put('OUTGATE','RD')&#xA;&#xA;     def strBuffer = new StringBuffer()&#xA;     ServicesManager sm = (ServicesManager)Roastery.getBean(&quot;servicesManager&quot;);&#xA;     def flagIds = sm.getActiveFlagIds(unitbase);&#xA;      if (flagIds != null) {&#xA;        for(holdId in flagIds)&#xA;       {&#xA;         def  iFlageType = sm.getFlagTypeById(holdId)&#xA;         def flagPurpose =  iFlageType.getPurpose().getKey()&#xA;         if(flagPurpose.equals('HOLD')) {&#xA;             def appHoldId = map.get(holdId) != null ? map.get(holdId) : holdId&#xA;             strBuffer.append(appHoldId+' ')&#xA;             }&#xA;           }&#xA;        }&#xA;      def fmtHoldId = strBuffer != null ? (''+strBuffer).trim() : strBuffer&#xA;            fmtHoldId = orderHoldsOnPriority(fmtHoldId)&#xA;      println('FMT HOLDS ::::'+fmtHoldId)&#xA;      return fmtHoldId&#xA;   }&#xA;&#xA;  //A1- Method Orders the Holds&#xA;  public static String orderHoldsOnPriority(String holdsArr)&#xA; {&#xA;   Map holdsMap = new LinkedHashMap();&#xA;   holdsMap.put(&quot;13&quot;,&quot;XT&quot;);&#xA;   holdsMap.put(&quot;12&quot;,&quot;TI&quot;); holdsMap.put(&quot;11&quot;,&quot;PER&quot;); holdsMap.put(&quot;10&quot;,&quot;ON&quot;);&#xA;   holdsMap.put(&quot;9&quot;,&quot;CG&quot;); holdsMap.put(&quot;8&quot;,&quot;CC&quot;); holdsMap.put(&quot;7&quot;,&quot;HP&quot;);&#xA;   holdsMap.put(&quot;6&quot;,&quot;AGN&quot;); holdsMap.put(&quot;5&quot;,&quot;AG&quot;);  holdsMap.put(&quot;4&quot;,&quot;RM&quot;);&#xA;   holdsMap.put(&quot;3&quot;,&quot;GX&quot;); holdsMap.put(&quot;2&quot;,&quot;INB&quot;); holdsMap.put(&quot;1&quot;,&quot;CUS&quot;);&#xA;&#xA;   Iterator it = holdsMap.keySet().iterator();&#xA;   String holdsLst = holdsArr;&#xA;   println(&quot; holdsList-Actual :&quot;+holdsLst);&#xA;    while (it.hasNext())&#xA;    {&#xA;       String holdkey = (String) it.next();&#xA;       String ahold = (String)holdsMap.get(holdkey);&#xA;       int holdIndex = holdsLst.indexOf(ahold);&#xA;       if(holdIndex != -1)&#xA;       {&#xA;&#x9;&#x9;  if(&quot;AG&quot;.equals(ahold) &amp;&amp; holdsLst.contains('AGN')){&#xA;             continue;&#xA;          }&#xA;          holdsLst = holdsLst.replace(ahold, &quot;&quot;);&#xA;          holdsLst = ahold+&quot; &quot;+holdsLst.trim();&#xA;       }&#xA;    }//while ends&#xA;       holdsLst = holdsLst.replace(&quot;    &quot;, &quot; &quot;);&#xA;       holdsLst = holdsLst.replace(&quot;   &quot;, &quot; &quot;);&#xA;       holdsLst = holdsLst.replace(&quot;  &quot;, &quot; &quot;);&#xA;      println(&quot; holdsList-Ordered :::::&quot;+holdsLst.trim());&#xA;      return holdsLst;&#xA;   }&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyCmisEventUnitReceive" short-description="GvyCmisEventUnitReceive" is-pre-deployed="N" groovy-code="/*&#xA;* A1   GR   02/03/2010  Generated ADD for New CNTR in the System&#xA;* A2   GR   09/23/2010  TT#007772 IF HAZ IS UNKNOWN dont post HZU action&#xA;* A3   GR   09/29/2010  SN4Q : DTA before ADD action (Removed code : Incorrect)&#xA;* A4   GR   10/04/10    Gems : Set VNumber to Null on IGT transaction&#xA;* A5   GR   10/06/10    Gems : Add VVD Info for Empty Ingate booking  &#xA;* A5   GR   10/15/10    Gems : leg value cal for Expt Full Load &#xA;* A6   GR   02/11/11    Handel Actual ves,voy for SIT out -&gt; RE Ingate condition &#xA;* A7   GR   03/08/11    Set Obcarrier for SIT_UNASSIGN comming back as Export &#xA;* A8   GR   04/28/11    TT#007772 HAZ dropped inversion file 1.4 TT#007772 &#xA;* A9   GR   05/18/11    set YardLocation for WO,P2,PassPass Gate Ingate and Outgate cntr&#xA;                        for GateTypeCode Report&#xA;* A101 KR   11/02/16    Adapter for processUnitRecieveFull&#xA;*                       processUnitRecieveFull to use supplied values for vessel, voyage, booking (pol, pod)&#xA;*&#xA;*/&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.reference.Equipment;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import org.apache.log4j.Logger&#xA;&#xA;public class GvyCmisEventUnitReceive&#xA;{&#xA;     def gvyCmisUtil = null&#xA;    private static final Logger LOGGER = Logger.getLogger(GvyCmisEventUnitReceive.class);&#xA;&#xA;    public String processUnitRecieve(String xmlGvyData, Object unit,Object gvyBaseClass)&#xA;    {&#xA;        def xmlGvyString = xmlGvyData&#xA;       try&#xA;      {&#xA;        &#xA;         gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);  &#xA;       &#xA;         def freightkind=unit.getFieldValue(&quot;unitFreightKind&quot;)&#xA;         freightkind = freightkind != null ? freightkind.getKey() : ''&#xA;         def vesselCd =  unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdVessel.vesId&quot;);                       &#xA;         def vesVoyageNbr =  unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdObVygNbr&quot;)&#xA;         def aibcarrierId=unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.carrierOperatorId&quot;)&#xA;         System.out.println(&quot;TESTING vesselCd::&quot;+vesselCd+&quot;    vesVoyageNbr::&quot;+vesVoyageNbr);&#xA;         def expGateBkgNbr = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;); //A5&#xA;          &#xA;         //Location Status&#xA;         xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;locationStatus=&quot;,'1')&#xA; &#x9;     xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;vNumber=&quot;,'null') //A4&#xA;     &#xA;         if(freightkind.equals('FCL') || (freightkind.equals('MTY') &amp;&amp; expGateBkgNbr != null &amp;&amp; vesselCd != null)){ //A5&#xA;            xmlGvyString = processUnitRecieveFull(xmlGvyString,gvyCmisUtil,vesselCd,vesVoyageNbr,unit)              &#xA;         } else if(freightkind.equals('MTY')){&#xA;            xmlGvyString = processUnitRecieveEmpty(xmlGvyString,gvyCmisUtil)&#xA;         } &#xA;         &#xA;          def lanegateId = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;laneGateId=&quot;)  &#xA;          def msgType = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;msgType=&quot;) &#xA;          if(lanegateId.equals('WO GATE'))&#xA;         {&#xA;             xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;locationTier=&quot;,'T3')&#xA;             xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;truck=&quot;,aibcarrierId)&#xA;             xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;loc=&quot;,&quot;WOA 1&quot;)&#xA;          }&#xA;         else if(lanegateId.equals('PIER2'))&#xA;         {&#xA;             xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;locationTier=&quot;,'T2')&#xA;             xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;truck=&quot;,aibcarrierId)  &#xA;             xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;loc=&quot;,&quot;29Z&quot;)&#xA;&#xA;          }else if (msgType.equals('UNIT_IN_GATE')){&#xA;              xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;truck=&quot;,aibcarrierId)  &#xA;          }&#xA;&#xA;      }catch(Exception e){&#xA;            e.printStackTrace();&#x9;&#xA;      }&#xA;      &#xA;      return xmlGvyString&#xA;    }&#xA;&#xA;   public String processUnitRecieveEmpty(String xmlGvyData,Object gvyCmisUtil)&#xA;   {&#xA;       LOGGER.info(&quot;Empty unit method called::::&quot;);&#xA;      try&#xA;      {&#xA;         def xmlGvyString = xmlGvyData &#xA;           xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;actualVessel=&quot;,&quot;null&quot;)&#xA;           xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;actualVoyage=&quot;,&quot;null&quot;)&#x9;&#xA;           xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;leg=&quot;,&quot;null&quot;)&#xA;       &#xA;        return xmlGvyString&#xA;&#xA;     }catch(Exception e){&#xA;         e.printStackTrace()&#xA;     }&#xA;&#xA;   }&#xA;&#xA;    //A8&#xA;    public String setWOAFlag(Object event, Object unit,Object api)&#xA;   {&#xA;      try&#xA;      {&#xA;         //Set YardLocation - So can filter out of Type code report  &#xA;         def carrierVisitGkey = null;&#xA;&#x9;&#x9;if(event.event.eventTypeId.equals(&quot;UNIT_IN_GATE&quot;)){&#xA;&#x9;&#x9; carrierVisitGkey = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvdGkey&quot;)&#xA;&#x9;&#x9;}else if(event.event.eventTypeId.equals(&quot;UNIT_DELIVER&quot;)){&#xA;&#x9;&#x9; carrierVisitGkey = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvdGkey&quot;)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;def gvyCmisGateData = api.getGroovyClassInstance(&quot;GvyCmisGateData&quot;);  &#xA;&#x9;&#x9;def laneGateId = gvyCmisGateData.getGateId(carrierVisitGkey)&#xA;&#x9;&#x9;println(&quot;carrierVisitGkey =&quot;+carrierVisitGkey+&quot;  laneGateId=&quot;+laneGateId)&#xA;&#x9;&#x9;if(&quot;WO GATE&quot;.equals(laneGateId)){&#xA;&#x9;&#x9;  unit.setFieldValue(&quot;unitActiveUfv.ufvFlexString03&quot;,&quot;WOA&quot;)&#xA;&#x9;&#x9;}else if(&quot;PIER2&quot;.equals(laneGateId)){&#xA;&#x9;&#x9;  unit.setFieldValue(&quot;unitActiveUfv.ufvFlexString03&quot;,&quot;PIER2&quot;)&#xA;&#x9;&#x9;}else if(&quot;PASSPASS&quot;.equals(laneGateId)){&#xA;&#x9;&#x9;  unit.setFieldValue(&quot;unitActiveUfv.ufvFlexString03&quot;,&quot;PASSPASS&quot;)&#xA;&#x9;&#x9;}&#xA;&#xA;     }catch(Exception e){&#xA;         e.printStackTrace()&#xA;     }&#xA;&#xA;   }&#xA;&#xA;    public String processUnitRecieveFull(String xmlGvyData, Object gvyCmisUtil, String vesselCd, Object vesVoyageNbr, Object unit, Boolean inUseSuppliedCvId) {&#xA;        processUnitRecieveFull(xmlGvyData, gvyCmisUtil, vesselCd, vesVoyageNbr, unit, null, Boolean.FALSE);&#xA;    }&#xA;    public String processUnitRecieveFull(String xmlGvyData,Object gvyCmisUtil,String vesselCd, Object vesVoyageNbr,Object unit){&#xA;        processUnitRecieveFull( xmlGvyData, gvyCmisUtil, vesselCd,  vesVoyageNbr, unit, Boolean.FALSE);&#xA;    }&#xA;&#xA;    public String processUnitRecieveFull(String inXmlGvyData, Object inGvyCmisUtil, String inVesselCd, Object inVoyageNbr, Object inUnit, Booking inBooking, Boolean inUseSuppliedCvId)&#xA;   {&#xA;       if (inUseSuppliedCvId)&#xA;           LOGGER.info(&quot;Using the value of VVD from the input file\t&quot; + inVesselCd + inVoyageNbr);&#xA;       def xmlGvyString = inXmlGvyData&#xA;      try&#xA;     {&#xA;       def actualVessel = 'null'&#xA;       def actualVoyage = 'null'&#xA;       def leg = 'null'&#xA;      //ACTUAL VESSEL,ACTUAL VOYAGE,LEG&#xA;         def ObCarrier = inVesselCd + inVoyageNbr;&#xA;         if (!inUseSuppliedCvId)&#xA;             ObCarrier = inUnit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;);&#xA;         ObCarrier = ObCarrier != null ? ObCarrier : &quot;&quot;&#xA;     //POL &amp; POD&#xA;         def loadPort = inUnit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;)&#xA;         def dischargePort = inUnit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;         if (inUseSuppliedCvId &amp;&amp; inBooking != null) {&#xA;             /*&#xA;             Compute load and discharge port from booking object&#xA;              */&#xA;             LOGGER.info(&quot;The Method Call requires using pol and pod from booking\t&quot; + inBooking);&#xA;             loadPort = inBooking.getEqoPol().getPointId();&#xA;             dischargePort = inBooking.getEqoPod1().getPointId();&#xA;         }&#xA;         def vesselType = inGvyCmisUtil.getVesselClassForVesCode(inVesselCd)&#xA;&#xA;         def dibcarrierId = inUnit.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;)&#xA;         def cmdyId = inUnit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#xA;         def _category = inUnit.getFieldValue(&quot;unitCategory&quot;)&#xA;     def categoryKey = _category != null ? _category.getKey() : ''&#xA;&#xA;         def dIbcarrierMode = inUnit.getFieldValue(&quot;unitDeclaredIbCv.cvCarrierMode&quot;)&#xA;     dIbcarrierMode = dIbcarrierMode != null ? dIbcarrierMode.getKey() : &quot;&quot;&#xA;&#xA;         def declaredIBVesType = inGvyCmisUtil.getVesselClassType(dibcarrierId)&#xA;     declaredIBVesType = declaredIBVesType != null ? declaredIBVesType : ''&#xA;         def declaredIBInVoyNbrForKQA = inUnit.getFieldValue(&quot;unitDeclaredIbCv.cvCvd.vvdIbVygNbr&quot;)&#xA;     boolean postMsg = false&#xA;     println(&quot;categoryKey ::&quot;+categoryKey+&quot;   decaredIBVesType::&quot;+declaredIBVesType+&quot;  cmdyId::&quot;+cmdyId+&quot;   dibcarrierId::&quot;+dibcarrierId) &#xA;     System.out.println(&quot;categoryKey ::&quot;+categoryKey+&quot;   decaredIBVesType::&quot;+declaredIBVesType+&quot;  cmdyId::&quot;+cmdyId+&quot;   dibcarrierId::&quot;+dibcarrierId+&quot;   loadPort::&quot;+loadPort) &#xA;     if(categoryKey.equals('IMPRT') || &quot;KQA&quot;.equalsIgnoreCase(loadPort))&#xA;    {&#xA;        // println(&quot;categoryKey ::&quot;+categoryKey+&quot;   decaredIBVesType::&quot;+declaredIBVesType+&quot;  cmdyId::&quot;+cmdyId+&quot;   dibcarrierId::&quot;+dibcarrierId)&#xA;&#xA;         if(declaredIBVesType.equals('CELL')){&#xA;            actualVessel = dibcarrierId.length() == 6 ? dibcarrierId.substring(0,3) : 'null'&#xA;            actualVoyage = dibcarrierId.length() == 6 ? dibcarrierId.substring(3) : 'null'&#xA;            leg = '%'&#xA;             xmlGvyString = inGvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;vesvoy=&quot;, dibcarrierId)&#xA;         }&#xA;         else if(declaredIBVesType.equals('BARGE')){&#xA;             if (!&quot;KQA&quot;.equalsIgnoreCase(loadPort))   {&#xA;                      leg = dibcarrierId.length() &gt; 6 ? dibcarrierId.substring(6) : 'null'&#xA;                actualVessel = dibcarrierId.length() &gt; 5 ? dibcarrierId.substring(0,3) : 'null'&#xA;                actualVoyage = dibcarrierId.length() &gt; 5 ? dibcarrierId.substring(3,6) : 'null'&#xA;             }  else {&#xA;&#x9;                leg = loadPort+'_'+dischargePort;&#xA;                 def declaredOBVesType = null;&#xA;&#xA;                 if (ObCarrier != null) {&#xA;                     declaredOBVesType = inGvyCmisUtil.getVesselClassType(ObCarrier);&#xA;                 }&#xA;                 declaredOBVesType = declaredOBVesType != null ? declaredOBVesType : '';&#xA;&#xA;                if ( &quot;BARGE&quot;.equals(declaredOBVesType)) {&#xA;                    actualVessel = dibcarrierId.length() &gt; 5 ? dibcarrierId.substring(0,3) : 'null'&#xA;                    actualVoyage = declaredIBInVoyNbrForKQA != null ? declaredIBInVoyNbrForKQA :dibcarrierId.length() &gt; 5 ? dibcarrierId.substring(3,6) : 'null'&#xA;                } else {&#xA;                    ObCarrier = inUnit.getFieldValue(&quot;unitRouting.rtgDeclaredCv.cvId&quot;);&#xA;                    actualVessel = ObCarrier.length() &gt; 5 ? ObCarrier.substring(0, 3) : 'null'&#xA;                    actualVoyage = ObCarrier.length() &gt; 5 ? ObCarrier.substring(3, 6) : 'null'&#xA;                }&#xA;            }&#xA;             xmlGvyString = inGvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;misc1=&quot;, dibcarrierId)&#xA;         }else if(dIbcarrierMode.equals('TRUCK')) {&#xA;             //TRUCK T60&#xA;             def intdObCarrierId = inUnit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;)&#xA;            intdObCarrierId = intdObCarrierId != null ? intdObCarrierId : &quot;&quot;&#xA;            actualVessel = intdObCarrierId.length() &gt; 6 ? intdObCarrierId.substring(0,3) : 'null'&#xA;            actualVoyage = intdObCarrierId.length() &gt; 6 ? intdObCarrierId.substring(3,6) : 'null'&#xA;            leg = intdObCarrierId.length() &gt; 6 ? intdObCarrierId.substring(6) : 'null' &#xA;        }&#xA;        postMsg = true&#xA;     }&#xA;     else if(categoryKey.equals('EXPRT')){&#xA;        System.out.println(&quot;TESTING EXPORT FLOW&quot;);&#xA;        if(ObCarrier.equals('GEN_VESSEL') || ObCarrier.equals('GEN_CARRIER')){&#xA;          actualVessel = &quot;null&quot;&#xA;          actualVoyage = &quot;null&quot;&#xA;          leg = &quot;null&quot;&#xA;        }else if (cmdyId != null &amp;&amp; 'SAT'.equals(cmdyId)){ //A6 - Starts&#xA;            def dobcarrierId = inUnit.getFieldValue(&quot;unitRouting.rtgDeclaredCv.cvId&quot;)&#xA;&#x9;&#x9;  println(&quot;dobcarrierId : &quot;+dobcarrierId);&#xA;          actualVessel = dobcarrierId.substring(0,3);&#xA;          actualVoyage = dobcarrierId.substring(3);&#xA; &#x9;      leg = loadPort+'_'+dischargePort&#xA;            xmlGvyString = inGvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;vesvoy=&quot;, dobcarrierId)&#xA;            inGvyCmisUtil = inGvyCmisUtil != null ? inGvyCmisUtil : gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;          if(!ObCarrier.equals(dobcarrierId)){ //A7 &#xA;              inGvyCmisUtil.setObCarrier(inUnit, dobcarrierId)&#xA;              inUnit.setUnitRemark(null);&#xA;          }&#xA;       }//A6 - Ends&#xA;&#x9;&#x9;else{&#xA;          System.out.println(&quot; TESTING ELSE CONDITION&quot;);&#xA;            actualVessel = inVesselCd&#xA;            actualVoyage = inVoyageNbr&#xA;          leg = loadPort+'_'+dischargePort&#x9;   //A6&#xA;            xmlGvyString = inGvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;vesvoy=&quot;, ObCarrier)&#xA;        }&#xA;        postMsg = true&#xA;     }&#xA;&#xA;         /**&#xA;          * The program has to use the booking values, for UNIT_ROLL&#xA;          * and this should not be overridden (set postMsg = Boolean.FALSE)&#xA;          */&#xA;         if (inUseSuppliedCvId) {&#xA;             postMsg = Boolean.FALSE;&#xA;             LOGGER.info(&quot;Setting values for XML elements as &quot; + &quot;actualVessel=&quot; + inVesselCd + &quot;\tactualVoyage=&quot; + inVoyageNbr + &quot;\tleg=&quot; + loadPort + &quot;_&quot; + dischargePort);&#xA;             xmlGvyString = inGvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;actualVessel=&quot;, inVesselCd);&#xA;             xmlGvyString = inGvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;actualVoyage=&quot;, inVoyageNbr);&#xA;             xmlGvyString = inGvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;leg=&quot;, loadPort + '_' + dischargePort);&#xA;             xmlGvyString = inGvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;dischargePort=&quot;, dischargePort);&#xA;&#xA;         }&#xA;         /**&#xA;          * Logic for program to use booking values for vessel, voyage, leg ends&#xA;          */&#xA;      if(postMsg){&#xA;        if(actualVessel!=null &amp;&amp; actualVessel.length()&gt;3){&#xA;        actualVessel=actualVessel.substring(0,3);&#xA;        }&#xA;          LOGGER.info(&quot;Setting values for XML elements as &quot; + &quot;actualVessel=&quot; + actualVessel + &quot;\tactualVoyage=&quot; + actualVoyage + &quot;\tleg=&quot; + leg);&#xA;          xmlGvyString = inGvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;actualVessel=&quot;, actualVessel)&#xA;          xmlGvyString = inGvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;actualVoyage=&quot;, actualVoyage)&#xA;          xmlGvyString = inGvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;leg=&quot;, leg)&#xA;      }&#xA;    }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    }&#xA;     return xmlGvyString&#xA;   }&#xA;&#xA;   public String unitRecieveChassis(String xmlGvyData)&#xA;   {&#xA;     def xmlGvyString = xmlGvyData&#xA;     xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;chassisNumber=&quot;,'%')&#xA;     return xmlGvyString&#xA;   }&#xA;&#xA;   public void postMsgHazOvd(String xmlData,Object unit,Object gvyBaseClass)&#xA;   {&#xA;      def xmlGvyString = xmlData&#xA;      def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);  &#xA;      def isHazardous=unit.getFieldValue(&quot;unitGoods.gdsIsHazardous&quot;)&#xA;      def outOfGauge  = unit.getFieldValue(&quot;unitIsOog&quot;);    &#xA;      if(isHazardous)&#xA;     { &#xA;         def hazImdg = gvyCmisUtil.getFieldValues(xmlGvyString,&quot;hazImdg=&quot;)&#xA;         if(!'HAZ'.equals(hazImdg)){ //A8&#xA;          def xmlGvyHazStr = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;msgType=&quot;,&quot;UNIT_HAZARDS_INSERT&quot;)&#xA;          gvyCmisUtil.postMsgForAction(xmlGvyHazStr,gvyBaseClass,&quot;HZU&quot;)&#xA;          gvyCmisUtil.postMsgForAction(xmlGvyHazStr,gvyBaseClass,&quot;EDT&quot;)&#xA;&#x9;&#x9; }&#xA;      }&#xA;      if(outOfGauge)&#xA;     {&#xA;          def xmlGvyOvuStr = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;msgType=&quot;,&quot;UNIT_OVERDIMENSIONS_UPDATE&quot;)&#xA;          gvyCmisUtil.postMsgForAction(xmlGvyOvuStr,gvyBaseClass,&quot;OVU&quot;)&#xA;          gvyCmisUtil.postMsgForAction(xmlGvyOvuStr,gvyBaseClass,&quot;EDT&quot;)&#xA;      }&#xA;   }  &#xA;  &#xA;   //A1&#xA;   public void postMsgAdd(String xmlData,Object unit,Object gvyBaseClass)&#xA;   {&#xA;      def xmlGvyString = xmlData&#xA;      def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);  &#xA;&#x9;  def equiId = unit.unitId&#xA;&#x9;  def injBase =&#x9;new GroovyInjectionBase();&#xA;&#x9;  def complex = ContextHelper.getThreadComplex();&#xA;&#x9;  def unitFinder = injBase.getUnitFinder();&#xA;  &#x9;  def eq = Equipment.loadEquipment(equiId);&#xA;&#xA;&#x9;  Collection collection = unitFinder.findAllUnitsUsingEq(complex, eq);&#x9;&#xA;      //println(&quot;equiId=&quot;+equiId+&quot;collection=&quot;+(collection == null ? 0: collection.size()))&#xA;&#xA;      if(collection != null &amp;&amp; collection.size() == 1){&#xA;         gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,&quot;ADD&quot;)&#xA;&#x9;  }&#xA;   }  &#xA;&#xA;    //if the POD = NIS port, and the O/B Intended = GEN_TRUCK, set the O/B Intended = BARGE.&#xA;    public void setOBCarrierToBarge(Object unit)&#xA;   {&#xA;     try&#xA;     {&#xA;       def visit = &quot;&quot;&#xA;       def complex = com.navis.argo.ContextHelper.getThreadComplex();&#xA;       def intdObCarrierId = unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;) &#xA;       intdObCarrierId = intdObCarrierId != null ? intdObCarrierId : &quot;&quot;&#xA;    &#xA;       def curDischPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;       curDischPort = curDischPort != null ? curDischPort : &quot;&quot;&#xA;       //Get gvyCmisUtil from Global Variable &#xA;       if(gvyCmisUtil.isNISPort(curDischPort) &amp;&amp; intdObCarrierId.equals(&quot;GEN_TRUCK&quot;)){&#xA;        //SET IT TO BARGE&#xA;        visit = com.navis.argo.business.model.CarrierVisit.findOrCreateVesselVisit(com.navis.argo.ContextHelper.getThreadFacility(), &quot;BARGE&quot;)&#xA;        unit.getUfvForFacilityNewest(com.navis.argo.ContextHelper.getThreadFacility()).setUfvIntendedObCv(visit)&#xA;        unit.getUfvForFacilityNewest(com.navis.argo.ContextHelper.getThreadFacility()).setUfvActualObCv(visit)&#xA;       }&#xA;      //println(&quot;curDischPort ::&quot;+curDischPort+&quot;  intdObCarrierId:: &quot;+intdObCarrierId+&quot;   Set the OB Carrrier to BARGE&quot;)&#xA;   }catch(Exception e){&#xA;        e.printStackTrace()&#xA;   }&#xA;&#xA; }//Method Ends&#xA;}" />
<digital-asset id="GvyInjAbdb" short-description="ACETS BDB Process" is-pre-deployed="N" groovy-code="/*&#xA;**********************************************************************&#xA;* Srno   Date&#x9;        Changer&#x9; &#x9; Change Description&#xA;* A0     12/03/08&#x9;Steven Bauer&#x9; Updated Visit update detail&#xA;* A1     12/29/08       Glenn Raposo&#x9; Unit Field Tracker code Added&#xA;* A2     12/30/08       Steven Bauer&#x9; Added Primary Carrier change&#xA;* A3     02/09/08       Glenn Raposo     Update Code for ClassCastException &amp; Added Try Catch&#xA;* A4     04/09/09       Glenn Raposo     Adde check to set the BDB Dest to POD if they dont match&#xA;* A5     04/21/09       Glenn Raposo     POD condition correction for IMPORT and Not Import Units&#xA;* A6     04/28/09&#x9;Steven Bauer&#x9; Replaced manual sit_assign with the event.&#xA;* A7     04/30/09       Glenn Raposo     Null pointer Check to Set Barge value&#xA;* A8     05/12/09&#x9;Steven Bauer     Added POD lookup from Dest.&#xA;*&#x9;&#x9;&#x9;&#x9;&#x9; Added tranship and through to inport logic.&#xA;* A9     05/12/09&#x9;Steven Bauer&#x9; Change from Inbound to Outbound carrier on exort&#xA;* A10    05/21/09&#x9;Steven Bauer&#x9; Find the unit in the complex and not facility.&#xA;*          &#x9;&#x9;&#x9;&#x9; Append comment instead of overlaying&#xA;*          &#x9;&#x9;&#x9;&#x9; Remove the tState != Inbound for the update Disch port for IMPORT, THROUGH or TRANSHIP&#xA;*&#x9;&#x9;&#x9;&#x9;&#x9; Remove the tState != Inbound for the update Disch port for EXPORT&#xA;*          &#x9;&#x9;&#x9;&#x9; Remove the updateIbCv for imports&#xA;* A11    06/01/09       Steven Bauer     Allow update of O/B carrier for inbound exports.&#xA;* A12    06/02/09&#x9;Steven Bauer&#x9; 403 - Supress all updates before GetNV&#xA;* A13    07/02/09&#x9;Steven Bauer&#x9; Create Shipper/Consignee if they don't exist&#xA;* A14    12/18/2009  Glenn Raposo    Roll over Bkg for Inbound Expt with BDBVesvoy as barge&#xA;* A15    06/08/2010  Glenn Raposo    Added fix for A14 Bkg roll over for Inbound Expt&#xA;* A16    09/08/2011  Glenn Raposo&#x9; Added DrayStatus check for applying SIT&#xA;* A17    10/12/2011  Glenn Raposo&#x9; updated Assign Booking Method for TOS2.1&#xA;**********************************************************************&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.argo.business.reference.Shipper&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.orders.business.eqorders.EquipmentOrderManagerPea&#xA;import com.navis.services.business.event.GroovyEvent&#xA;&#xA;class GvyInjAbdb extends GroovyInjectionBase {&#xA;&#xA;    def ctrId = null;&#xA;&#xA;    public String execute(Map inParameters) {&#xA;&#xA;        try {&#xA;            def gvyVesselLookup = getGroovyClassInstance(&quot;GvyVesselLookup&quot;);&#xA;            ctrId = (String) inParameters.get(&quot;equipment-id&quot;);&#xA;&#xA;            def recorder = (String) inParameters.get(&quot;recorder&quot;);&#xA;            def vesvoyBdb = (String) inParameters.get(&quot;vesvoy&quot;);&#xA;            def dbdBookingNum = (String) inParameters.get(&quot;bookingNum&quot;);&#xA;            def sit = (String) inParameters.get(&quot;sit&quot;);&#xA;            def consigneeIdBdb = (String) inParameters.get(&quot;consigneeId&quot;);&#xA;            def consigneeNameBdb = (String) inParameters.get(&quot;consigneeName&quot;);&#xA;            def shipperNameBdb = (String) inParameters.get(&quot;shipperName&quot;);&#xA;            def shipperIdBdb = (String) inParameters.get(&quot;shipperId&quot;);&#xA;            def destPortBdb = (String) inParameters.get(&quot;destPort&quot;);&#xA;            def inBoundBdb = (String) inParameters.get(&quot;inBound&quot;);&#xA;            def agFlag = (String) inParameters.get(&quot;ag&quot;);&#xA;            def discPortBdb = (String) inParameters.get(&quot;dischargePort&quot;);&#xA;            def primCarrierBdb = (String) inParameters.get(&quot;primCarrier&quot;);&#xA;&#xA;            com.navis.argo.ContextHelper.setThreadExternalUser(&quot;ACETS&quot;);&#xA;&#xA;            def note = &quot;\n\nPlease fix either the booking or unit and review the routing after correction&quot;;&#xA;&#xA;            final String emailFrom = '1aktosdevteam@matson.com'&#xA;            final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;            def emailBody = &quot;&quot;;&#xA;&#xA;            def inj = new GroovyInjectionBase();&#xA;            def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;);&#xA;            com.navis.argo.ContextHelper.setThreadExternalUser(&quot;ACETS&quot;);&#xA;&#xA;            // Find the UFV&#xA;            println(&quot;Starting BDB Injection process.&quot;);&#xA;            def ufv;&#xA;            def unit;&#xA;            //A1- tracker&#xA;            def tracker;&#xA;            GroovyApi gvyApi;&#xA;            def dischargePortN4;&#xA;&#xA;            gvyApi = new GroovyApi();&#xA;            def podLookup = gvyApi.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;);&#xA;            try {&#xA;                try {&#xA;                    ufv = findActiveUfv(ctrId);&#xA;                    unit = ufv.getUfvUnit();&#xA;                } catch (Throwable e) {&#xA;                }&#xA;&#xA;                if (ufv == null) {&#xA;                    unit = gvyApi.getGroovyClassInstance(&quot;GvyUnitLookup&quot;).findCurrentUnit(ctrId);&#xA;                    if (unit == null) throw new Exception(&quot;Could not find unit by forien key &quot; + ctrId);&#xA;                    //if(unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;) !=  LocTypeEnum.TRUCK ) throw e;&#xA;                    ufv = unit.unitActiveUfv;&#xA;&#xA;                }&#xA;&#xA;                //A1- Tracker Change&#xA;                def gvyUnitFldTracker = gvyApi.getGroovyClassInstance(&quot;GvyUnitFieldTracker&quot;);&#xA;                tracker = gvyUnitFldTracker.createFieldChangeTracker(unit)&#xA;            } catch (Exception ex) {&#xA;                ex.printStackTrace()&#xA;                emailSender.custSendEmail(emailFrom, emailTo, &quot; BDB error for Booking &quot; + dbdBookingNum + &quot; and Unit &quot; + ctrId, &quot;Could not find unit: &quot; + ctrId + note);&#xA;                fail((new StringBuilder()).append(ex.toString()).append(&quot; ERR_GVY_DBD_001. Could not find unit: &quot;).append(ctrId).toString());&#xA;            }&#xA;&#xA;            //A12&#xA;            if (isStowplan(unit)) return;&#xA;&#xA;            StringBuffer header = new StringBuffer();&#xA;            header.append(&quot;\nBooking Number       : &quot; + dbdBookingNum);&#xA;            header.append(&quot;\nContainer Number     : &quot; + ctrId);&#xA;            header.append(&quot;\n\n&quot;);&#xA;&#xA;            emailBody = header.toString();&#xA;&#xA;            if (UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory()) &amp;&amp;&#xA;                    isLongHaul(vesvoyBdb) &amp;&amp;&#xA;                    UnitVisitStateEnum.DEPARTED.equals(ufv.getUfvVisitState())) {&#xA;                emailSender.custSendEmail(emailFrom, emailTo, &quot; BDB error for Booking &quot; + dbdBookingNum + &quot; and Unit &quot; + ctrId, emailBody + &quot;VesVoy: &quot; + vesvoyBdb + &quot; sailed. Could not apply BDB.&quot; + note);&#xA;                fail(&quot;ERR_GVY_DBD_002. VesVoy: &quot; + vesvoyBdb + &quot; sailed. Could not apply DBD.&quot;);&#xA;            }&#xA;&#xA;            def uoi = unit.getUnitPrimaryUe().getUeDepartureOrderItem();&#xA;            def n4BlNum = unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;);&#xA;            dischargePortN4 = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;&#xA;&#xA;            println(&quot;n4BlNum = &quot; + n4BlNum + &quot; dbdBookingNum = &quot; + dbdBookingNum);&#xA;            boolean flagForAcetsBkg = n4BlNum != null ? n4BlNum.startsWith(dbdBookingNum) : false&#xA;&#xA;            if (n4BlNum != null &amp;&amp; n4BlNum != dbdBookingNum) {&#xA;                if (!flagForAcetsBkg) {&#xA;                    emailSender.custSendEmail(emailFrom, emailTo, &quot; BDB error for Booking &quot; + dbdBookingNum + &quot; and Unit &quot; + ctrId, emailBody + &quot;Unit: &quot; + ctrId + &quot; Booking Num dismatch: N4 num=&quot; + n4BlNum + &quot;  BDB num=&quot; + dbdBookingNum + note);&#xA;                    fail(&quot;ERR_GVY_DBD_003. Unit: &quot; + ctrId + &quot; Booking Num dismatch: N4 num=&quot; + n4BlNum + &quot;  BDB num=&quot; + dbdBookingNum);&#xA;                }&#xA;            }&#xA;&#xA;            if (!UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory()) &amp;&amp; !UnitCategoryEnum.EXPORT.equals(unit.getUnitCategory()) &amp;&amp; !UnitCategoryEnum.THROUGH.equals(unit.getUnitCategory()) &amp;&amp; !UnitCategoryEnum.TRANSSHIP.equals(unit.getUnitCategory())) {&#xA;                emailSender.custSendEmail(emailFrom, emailTo, &quot; BDB error for Booking &quot; + dbdBookingNum + &quot; and Unit &quot; + ctrId, emailBody + &quot;Unit: &quot; + ctrId + &quot; category is not IMPORT, EXPORT, THROUGH or TRANSHIP. Ignored.&quot; + note);&#xA;                fail(&quot;ERR_GVY_DBD_004. Unit: &quot; + ctrId + &quot; category is not IMPORT, EXPORT, THROUGH or TRANSHIP. Ignored.&quot;);&#xA;            }&#xA;&#xA;            def cmdyId = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;            boolean isUnitSIT = &quot;SIT&quot;.equals(cmdyId) || &quot;SAT&quot;.equals(cmdyId) ? true : false&#xA;&#xA;            def IBVesvoy = unit.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;);&#xA;            if (UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory()) &amp;&amp;&#xA;                    IBVesvoy != vesvoyBdb &amp;&amp; !isLongHaul(vesvoyBdb) &amp;&amp; !isUnitSIT) {&#xA;                emailSender.custSendEmail(emailFrom, emailTo, &quot; BDB error for Booking &quot; + dbdBookingNum + &quot; and Unit &quot; + ctrId, emailBody + &quot;IB vesvoy in N4: &quot; + IBVesvoy + &quot; mismatch BDB vesvoy: &quot; + vesvoyBdb + note);&#xA;                fail(&quot;ERR_GVY_DBD_005. IB vesvoy in N4: &quot; + IBVesvoy + &quot; mismatch BDB vesvoy: &quot; + vesvoyBdb);&#xA;            }&#xA;&#xA;&#xA;            UfvTransitStateEnum transitState = ufv.getUfvTransitState();&#xA;            UnitVisitStateEnum visitState = unit.getUnitVisitState();&#xA;            if (UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory()) &amp;&amp;&#xA;                    !UfvTransitStateEnum.S30_ECIN.equals(transitState) &amp;&amp;&#xA;                    !UfvTransitStateEnum.S40_YARD.equals(transitState) &amp;&amp;&#xA;                    !UnitVisitStateEnum.ADVISED.equals(visitState) &amp;&amp;&#xA;                    !UfvTransitStateEnum.S20_INBOUND.equals(transitState)) {&#xA;                emailSender.custSendEmail(emailFrom, emailTo, &quot; BDB error for Booking &quot; + dbdBookingNum + &quot; and Unit &quot; + ctrId, emailBody + &quot;Bad location status for unit: &quot; + ctrId + note);&#xA;                fail(&quot;ERR_GVY_DBD_006. Bad location status for unit: &quot; + ctrId);&#xA;            }&#xA;&#xA;            //A3 - Update Code for ClassCastException&#xA;            if (&quot;Y&quot;.equals(sit) &amp;&amp; !isUnitSIT) {&#xA;                println(&quot;send email.&quot;);&#xA;            }&#xA;&#xA;            def event = new GroovyEvent(null, unit);&#xA;            def comments = &quot;&quot;;&#xA;            // start if IMPORT, THROUGH or TRANSHIP&#xA;            if (UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory()) || UnitCategoryEnum.THROUGH.equals(unit.getUnitCategory()) || UnitCategoryEnum.TRANSSHIP.equals(unit.getUnitCategory())) {&#xA;                def consigneeN4 = unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;);&#xA;                def consigneeN4Id = unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuId&quot;);&#xA;                println(&quot;cneeNameN4 = &quot; + consigneeN4 + &quot; cneeIdN4 = &quot; + consigneeN4Id);&#xA;                if (consigneeN4 != null &amp;&amp; (consigneeN4.contains(&quot;unapproved&quot;) || consigneeN4.contains(&quot;invalid assign&quot;)) &amp;&amp;&#xA;                        n4BlNum == null) {&#xA;                    // assign booking to unit BL Number&#xA;                    unit.setFieldValue(&quot;unitGoods.gdsBlNbr&quot;, dbdBookingNum);&#xA;                }&#xA;&#xA;                def misc2 = unit.getFieldValue(&quot;unitFlexString11&quot;);&#xA;                def shipper = Shipper.findOrCreateShipper(shipperIdBdb, shipperNameBdb);&#xA;&#xA;                println(&quot;misc2 = &quot; + misc2);&#xA;                if ((misc2 == null || !misc2.contains(&quot;C&quot;)) &amp;&amp; consigneeN4Id != consigneeIdBdb) {&#xA;                    def cnee;&#xA;                    if (shipperIdBdb == consigneeIdBdb) {&#xA;                        cnee = shipper;&#xA;                    } else {&#xA;                        cnee = Shipper.findOrCreateShipper(consigneeIdBdb, consigneeNameBdb);&#xA;                    }&#xA;&#xA;                    if (cnee == null) {&#xA;                        println(&quot;Consignee &quot; + consigneeNameBdb + &quot; not configured in N4.&quot;);&#xA;                    } else {&#xA;                        unit.getUnitGoods().updateConsignee(cnee);&#xA;                        println(&quot;update consignee with BDB.&quot;);&#xA;                        comments += &quot;RECON X &quot; + consigneeN4;&#xA;                    }&#xA;                }&#xA;&#xA;                def destPortN4 = unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;);&#xA;                println(&quot;destPortN4 = &quot; + destPortN4);&#xA;                if ((misc2 == null || !misc2.contains(&quot;P&quot;)) &amp;&amp; destPortN4 != destPortBdb) {&#xA;                    unit.setFieldValue(&quot;unitGoods.gdsDestination&quot;, destPortBdb);&#xA;                    comments = comments + &quot; &quot; + destPortN4 + &quot; to &quot; + destPortBdb;&#xA;                    //A5 - Unit Import, not Inbound and if BdbDestination is not equal to N4Pod then set bdbDest to POD&#xA;                    def pod = podLookup.lookupPod(destPortBdb);&#xA;                    discPortBdb = pod;&#xA;                    if (pod != dischargePortN4) {&#xA;                        println(&quot;Setting the POD to BDB DestPort&quot; + &quot;dischargePortN4 = &quot; + dischargePortN4 + &quot; destPortBdb :&quot; + pod);&#xA;                        def podRgtPoint = RoutingPoint.findRoutingPoint(pod);&#xA;                        if (podRgtPoint == null) {&#xA;                            emailSender.custSendEmail(emailFrom, emailTo, &quot; BDB error for Booking &quot; + dbdBookingNum + &quot; and Unit &quot; + ctrId, emailBody + &quot;POD Port not a Routing Point. POD lookup NULL: &quot; + destPortBdb + note);&#xA;                            fail(&quot;ERR_GVY_BDB_007.5. POD Port not a Routing Point. POD lookup NULL: &quot; + destPortBdb);&#xA;                        }&#xA;                        unit.getUnitRouting().setRtgPOD1(podRgtPoint);&#xA;                    }&#xA;                } else {&#xA;                    discPortBdb = destPortN4;&#xA;                }&#xA;                unit.getUnitGoods().updateShipper(shipper);&#xA;                def servicesMgr = (ServicesManager) Roastery.getBean(&quot;servicesManager&quot;);&#xA;&#xA;                if ((misc2 == null || !misc2.contains(&quot;B&quot;)) &amp;&amp; inBoundBdb == &quot;Y&quot;) {&#xA;                    servicesMgr.applyHold(&quot;INB&quot;, unit, null, null, &quot;BDB Hold&quot;);&#xA;                    servicesMgr.applyHold(&quot;CUS&quot;, unit, null, null, &quot;BDB Hold&quot;);&#xA;                    comments = comments + &quot; INB and CUS hold applied.&quot;;&#xA;                }&#xA;&#xA;                def eqType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;                println(&quot;eqType = &quot; + eqType);&#xA;                if (agFlag != null &amp;&amp; (misc2 == null || !misc2.contains(&quot;A&quot;)) &amp;&amp; agFlag == &quot;Y&quot; &amp;&amp; eqType[0] != &quot;R&quot;) {&#xA;                    servicesMgr.applyHold(&quot;AG&quot;, unit, null, null, &quot;BDB Hold&quot;);&#xA;                    comments += &quot; add AG hold.&quot;;&#xA;                    misc2 += &quot;L&quot;;&#xA;                    unit.setFieldValue(&quot;unitFlexString11&quot;, misc2);&#xA;                }&#xA;&#xA;&#xA;                if (agFlag != null &amp;&amp; (misc2 == null || !misc2.contains(&quot;A&quot;)) &amp;&amp; agFlag == &quot;N&quot;) { //&amp;&amp; onAgHold()) {&#xA;                    servicesMgr.applyGuardedPermission(&quot;AG&quot;, unit, null, null, &quot;BDB Hold&quot;);&#xA;                }&#xA;            } else { // if not IMPORT&#xA;                def isLongHaul = isLongHaul(vesvoyBdb)&#xA;                println(&quot;in NOT IMPORT section. isLongHaul :&quot; + isLongHaul);&#xA;                //A14 - If Inbound Export and BDBVesvoy is Barge and Roll over Booking Values&#xA;                if (!isLongHaul) {&#xA;                    def isBkgRoll = rollBkgForExport(unit)&#xA;                    //Commented out as it does nothing - if(isBkgRoll){  event.postNewEvent(&quot;UNIT_ROLL&quot;, &quot;Inbound Export With Vesvoy as barge&quot;);}&#xA;                } else {&#xA;                    // SKB Updated to get an existing visit and not create a new one.&#xA;                    if (!UfvTransitStateEnum.S70_DEPARTED.equals(transitState)) {&#xA;                        def visit = gvyVesselLookup.getCarrierVisit(vesvoyBdb);&#xA;                        if (visit != null) {&#xA;                            def ufvLocal = unit.unitActiveUfv;&#xA;                            if (ufvLocal == null) {&#xA;                                def ulookup = gvyBaseClass.getGroovyClassInstance(&quot;GvyUnitLookup&quot;);&#xA;                                ufvLocal = ulookup.lookupFacility(unit.primaryKey);&#xA;                            }&#xA;                            ufvLocal.updateObCv(visit);&#xA;                        } else {&#xA;                            emailSender.custSendEmail(emailFrom, emailTo, &quot; BDB error for Booking &quot; + dbdBookingNum + &quot; and Unit &quot; + ctrId, emailBody + &quot;OB vesvoy not in N4: &quot; + vesvoyBdb + note);&#xA;                            fail(&quot;ERR_GVY_DBD_007. OB vesvoy not in N4: &quot; + vesvoyBdb);&#xA;                        }&#xA;                    }//Outer if Ends&#xA;                    //A5 - Unit Not Import,Not Inbound and if PODBdb and N4Pod dont match then set POD to Bdb POD&#xA;                    println(&quot;dischargePortN4 = &quot; + dischargePortN4);&#xA;                    if (discPortBdb != dischargePortN4) {&#xA;                        def podRtgBdb = RoutingPoint.findRoutingPoint(discPortBdb)&#xA;                        if (podRtgBdb == null) {&#xA;                            emailSender.custSendEmail(emailFrom, emailTo, &quot; BDB error for Booking &quot; + dbdBookingNum + &quot; and Unit &quot; + ctrId, emailBody + &quot;Destination Port not a Routing Point. POD lookup NULL: &quot; + discPortBdb + note);&#xA;                            fail(&quot;ERR_GVY_BDB_007.6. Destination Port not a Routing Point. POD lookup NULL: &quot; + discPortBdb);&#xA;                        }&#xA;                        unit.getUnitRouting().setRtgPOD1(podRtgBdb);&#xA;                    }&#xA;&#xA;                    unit.setFieldValue(&quot;unitGoods.gdsDestination&quot;, destPortBdb);&#xA;                    def shipper = Shipper.findOrCreateShipper(shipperIdBdb, shipperNameBdb);&#xA;                    unit.getUnitGoods().updateShipper(shipper);&#xA;                    def conee;&#xA;                    if (shipperIdBdb == consigneeIdBdb) {&#xA;                        conee = shipper;&#xA;                    } else {&#xA;                        conee = Shipper.findOrCreateShipper(consigneeIdBdb, consigneeNameBdb);&#xA;                    }&#xA;                    unit.getUnitGoods().updateConsignee(conee);&#xA;                }//innner Else ends to roll over Bkg&#xA;            } // end of if IMPORT and EDXPORT LOGIC&#xA;&#xA;            println(&quot;end of import and non-import.&quot;);&#xA;&#xA;            //A3 -Set OB Carrier to Barge&#xA;            // A10, use the looked up value not the passed value&#xA;            setOBCarrierOnPODChng(ctrId, dischargePortN4, discPortBdb);&#xA;&#xA;            // Fixed code to set the bzuId&#xA;            def lineOperatorN4 = unit.getUnitLineOperator();&#xA;            if (lineOperatorN4 != null) lineOperatorN4 = lineOperatorN4.bzuId;&#xA;            else lineOperatorN4.equals(&quot;&quot;);&#xA;            if (primCarrierBdb != null &amp;&amp; !primCarrierBdb.equals(&quot;&quot;) &amp;&amp; !lineOperatorN4.equals(primCarrierBdb)) {&#xA;                def bzuid = com.navis.argo.business.reference.LineOperator.findLineOperatorById(primCarrierBdb);&#xA;                if (bzuid != null) {&#xA;                    unit.setUnitLineOperator(bzuid);&#xA;                } else {&#xA;                    emailSender.custSendEmail(emailFrom, emailTo, &quot; BDB error for Booking &quot; + dbdBookingNum + &quot; and Unit &quot; + ctrId, emailBody + &quot;Line Operator is not in N4: &quot; + primCarrierBdb + note);&#xA;                    fail(&quot;ERR_GVY_DBD_008. Line Operator is not in N4: &quot; + primCarrierBdb);&#xA;                }&#xA;            }&#xA;&#xA;            println(&quot;isUnitSit = &quot; + sit);&#xA;&#xA;            def misc2 = unit.getFieldValue(&quot;unitFlexString11&quot;);&#xA;            misc2 = misc2 != null ? misc2 : &quot;&quot;&#xA;            //A3 - Update Code for ClassCastException&#xA;            if (&quot;Y&quot;.equals(sit) &amp;&amp; !isUnitSIT &amp;&amp; !misc2.contains(&quot;S&quot;)) { //A16 Added DrayStatus check&#xA;                event.postNewEvent(&quot;SIT_ASSIGN&quot;, &quot;BDB SIT_ASSIGN&quot;);&#xA;            }&#xA;&#xA;            println(&quot;comments = &quot; + comments);&#xA;            if (!comments.equals(&quot;&quot;)) {&#xA;                if (unit.getFieldValue(&quot;unitRemark&quot;) != null) comments = unit.getFieldValue(&quot;unitRemark&quot;) + comments;&#xA;                if (comments.length() &gt; 255) {&#xA;                    comments = comments.substring(0, 255);&#xA;                }&#xA;                unit.setFieldValue(&quot;unitRemark&quot;, comments);&#xA;            }&#xA;&#xA;            //A1 - Tracker Change&#xA;            def changes = tracker.getChanges(unit);&#xA;            if (changes != null &amp;&amp; changes.getFieldChangeCount() != 0) {&#xA;                unit.recordUnitEvent(com.navis.argo.business.atoms.EventEnum.UNIT_PROPERTY_UPDATE, changes, &quot;Field Update BDB&quot;);&#xA;            }&#xA;&#xA;            event.postNewEvent(&quot;BDB&quot;, &quot;ACETS: &quot; + recorder);&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;            throw e;&#xA;        }&#xA;    }&#xA;&#xA;    private boolean isLongHaul(String vesvoy) {&#xA;        //def gvyBaseClass = new GroovyInjectionBase()&#xA;        def gvyUtil = getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;        def vType = gvyUtil.getVesselClassType(vesvoy);&#xA;        return vType == &quot;CELL&quot; ? true : false;&#xA;    }&#xA;&#xA;    /*&#xA;    1] Set OBCarreir as GEN_VESSEL if POD is chnaged to NIS&#xA;    2] Set OBCarreir as GEN_TRUCK if POD is chnaged to HON&#xA;    3] Set only if POD changed and unit is not Departed&#xA;  */&#xA;&#xA;    public void setOBCarrierOnPODChng(String unitId, String dischargePortN4, String dischPortBdb) {&#xA;        try {&#xA;            // Get Unit Object&#xA;            def unitFinder = getUnitFinder()&#xA;            def complex = ContextHelper.getThreadComplex();&#xA;            def inEquipment = Equipment.loadEquipment(unitId);&#xA;            def unit = unitFinder.findActiveUnit(complex, inEquipment)&#xA;            //A7&#xA;            if (unit == null) {&#xA;                return&#xA;            }&#xA;&#xA;            def gvyCmisUtil = getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;&#xA;            def prevDischPort = dischargePortN4 != null ? dischargePortN4 : &quot;&quot;&#xA;&#xA;            //Set BDB DischPort as DischargePort&#xA;            def curDischPort = dischPortBdb != null ? dischPortBdb : &quot;&quot;&#xA;&#xA;            println(&quot;BDB curDischPort ::&quot; + curDischPort + &quot;   prevDischPort ::&quot; + prevDischPort)&#xA;&#xA;            def intdObCarrierId = unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;)&#xA;            intdObCarrierId = intdObCarrierId != null ? intdObCarrierId : &quot;&quot;&#xA;&#xA;            boolean ObcarrierFlag = intdObCarrierId.equals(&quot;GEN_TRUCK&quot;) || intdObCarrierId.equals(&quot;GEN_VESSEL&quot;) || intdObCarrierId.equals(&quot;GEN_CARRIER&quot;) ? true : false&#xA;&#xA;            boolean ObcarrierFlagHon = intdObCarrierId.equals(&quot;BARGE&quot;) || intdObCarrierId.equals(&quot;GEN_VESSEL&quot;) || intdObCarrierId.equals(&quot;GEN_CARRIER&quot;) ? true : false&#xA;&#xA;            //Set OB Carrier visit&#xA;            def visit = &quot;&quot;&#xA;            if (/*gvyCmisUtil.isNISPort(curDischPort) &amp;&amp; !gvyCmisUtil.isNISPort(prevDischPort) &amp;&amp;*/ ObcarrierFlag) {&#xA;                //todo ask amit&#xA;                //SET TO BARGE&#xA;                visit = com.navis.argo.business.model.CarrierVisit.findOrCreateVesselVisit(com.navis.argo.ContextHelper.getThreadFacility(), &quot;BARGE&quot;)&#xA;                unit.getUfvForFacilityNewest(com.navis.argo.ContextHelper.getThreadFacility()).setUfvIntendedObCv(visit)&#xA;                unit.getUfvForFacilityNewest(com.navis.argo.ContextHelper.getThreadFacility()).setUfvActualObCv(visit)&#xA;            } else if (curDischPort.equals(ContextHelper.getThreadFacility().getFcyId()) &amp;&amp;&#xA;                    !prevDischPort.equals(ContextHelper.getThreadFacility().getFcyId()) &amp;&amp; ObcarrierFlagHon) {&#xA;                visit = com.navis.argo.business.model.CarrierVisit.getGenericTruckVisit(complex);&#xA;                unit.getUfvForFacilityNewest(com.navis.argo.ContextHelper.getThreadFacility()).updateObCv(visit);&#xA;            }&#xA;            println(&quot;OBcarrier set to &quot; + unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv&quot;))&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;            fail(&quot;BDB Error setting OBCarrier On POD Change&quot; + unitId);&#xA;        }&#xA;&#xA;    }//Method Ends&#xA;&#xA;    private boolean isStowplan(unit) {&#xA;        def remark = unit.unitRemark;&#xA;        if (remark == null) return false;&#xA;        return remark.startsWith(&quot;Stowplan Data&quot;);&#xA;    }&#xA;&#xA;    public boolean rollBkgForExport(Object unit) {&#xA;        try {&#xA;            def facility = getFacility();&#xA;            def bl_nbr = unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;)&#xA;            if (bl_nbr == null || &quot;&quot;.equals(bl_nbr)) {&#xA;                return false;&#xA;            }&#xA;&#xA;            def unitLineOperator = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqoLine.bzuId&quot;)&#xA;            unitLineOperator = unitLineOperator != null ? unitLineOperator : null&#xA;            if (unitLineOperator == null || &quot;&quot;.equals(unitLineOperator)) {&#xA;                return false;&#xA;            }&#xA;            def bizScope = ScopedBizUnit.findScopedBizUnit(unitLineOperator, BizRoleEnum.LINEOP);&#xA;&#xA;            def bkgVesvoy = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqoVesselVisit.cvId&quot;)&#xA;            def cv = CarrierVisit.findVesselVisit(facility, bkgVesvoy);&#xA;            if (cv == null) {&#xA;                fail(&quot;ERR_GVY_LNK_010. Could not find Export Bkg carrier visit: &quot; + bkgVesvoy);&#xA;            }&#xA;            def booking = Booking.findBookingByUniquenessCriteria(bl_nbr, bizScope, cv);&#xA;            if (booking == null) {&#xA;                fail(&quot;ERR_GVY_LNK_011. Could not Inbound Export Bkg for carrier visit: &quot; + bkgVesvoy);&#xA;                return false;&#xA;            }&#xA;            //A15&#xA;            def eqoMgr = new EquipmentOrderManagerPea();&#xA;            //eqoMgr.assignExportBookingToUnit( booking, unit);&#xA;            eqoMgr.assignExportBookingToUnit(booking, null, unit); //Update Method for TOS2.1 -- A16&#xA;&#xA;            println(&quot;bl_nbr=&quot; + bl_nbr + &quot; unitLineOperator=&quot; + unitLineOperator + &quot; bkgVesvoy=&quot; + bkgVesvoy)&#xA;            return true;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;            fail(&quot;BDB Error Rolling BKG over to Unit&quot; + unit.unitId);&#xA;        }&#xA;&#xA;    }&#xA;&#xA;public void setOBCarrierOnPODChngForAK(String unitId, String dischargePortN4, String dischPortBdb, def vesvoy) {&#xA;        try {&#xA;            // Get Unit Object&#xA;            def unitFinder = getUnitFinder()&#xA;            def complex = ContextHelper.getThreadComplex();&#xA;            def fcyId = ContextHelper.getThreadFacility().getFcyId()&#xA;            def inEquipment = Equipment.loadEquipment(unitId);&#xA;            def unit = unitFinder.findActiveUnit(complex, inEquipment)&#xA;            //A7&#xA;            if (unit == null) {&#xA;                return&#xA;            }&#xA;&#xA;            def gvyCmisUtil = getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;&#xA;            def prevDischPort = dischargePortN4 != null ? dischargePortN4 : &quot;&quot;&#xA;&#xA;            //Set BDB DischPort as DischargePort&#xA;            def curDischPort = dischPortBdb != null ? dischPortBdb : &quot;&quot;&#xA;&#xA;            println(&quot;BDB curDischPort ::&quot; + curDischPort + &quot;   prevDischPort ::&quot; + prevDischPort)&#xA;&#xA;            def intdObCarrierId = unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;)&#xA;            intdObCarrierId = intdObCarrierId != null ? intdObCarrierId : &quot;&quot;&#xA;&#xA;            boolean ObcarrierFlag = intdObCarrierId.equals(&quot;GEN_TRUCK&quot;) || intdObCarrierId.equals(&quot;GEN_VESSEL&quot;) || intdObCarrierId.equals(&quot;GEN_CARRIER&quot;) ? true : false&#xA;&#xA;            boolean ObcarrierFlagAK = /*intdObCarrierId.equals(&quot;BARGE&quot;) || */ intdObCarrierId.equals(&quot;GEN_VESSEL&quot;) || intdObCarrierId.equals(&quot;GEN_CARRIER&quot;) ? true : false&#xA;&#xA;            //Set OB Carrier visit&#xA;            def visit = &quot;&quot;&#xA;            if (gvyCmisUtil.isAlaskanNISPort(curDischPort) &amp;&amp; !gvyCmisUtil.isAlaskanNISPort(prevDischPort) &amp;&amp; ObcarrierFlag) {&#xA;                //todo ask amit&#xA; if(fcyId== 'ANK' || fcyId== 'KDK' ){&#xA;visit = com.navis.argo.business.model.CarrierVisit.findOrCreateVesselVisit(com.navis.argo.ContextHelper.getThreadFacility(), &quot;GEN_VESSEL&quot;)&#xA;}else{&#xA;                //SET TO BARGE&#xA;                visit = com.navis.argo.business.model.CarrierVisit.findOrCreateVesselVisit(com.navis.argo.ContextHelper.getThreadFacility(), &quot;BARGE&quot;)&#xA;             }  &#xA;                unit.getUfvForFacilityNewest(com.navis.argo.ContextHelper.getThreadFacility()).setUfvIntendedObCv(visit)&#xA;                unit.getUfvForFacilityNewest(com.navis.argo.ContextHelper.getThreadFacility()).setUfvActualObCv(visit)&#xA;            } else if (curDischPort.equals(ContextHelper.getThreadFacility().getFcyId()) &amp;&amp;&#xA;                    !prevDischPort.equals(ContextHelper.getThreadFacility().getFcyId()) &amp;&amp; ObcarrierFlagAK) {&#xA;                visit = com.navis.argo.business.model.CarrierVisit.getGenericTruckVisit(complex);&#xA;                unit.getUfvForFacilityNewest(com.navis.argo.ContextHelper.getThreadFacility()).updateObCv(visit);&#xA;            }else if(ObcarrierFlag &amp;&amp; (prevDischPort.equals(ContextHelper.getThreadFacility().getFcyId()) &amp;&amp; curDischPort != prevDischPort)){&#xA;// then set the o/b as vesvoy&#xA; def cv  = com.navis.argo.business.model.CarrierVisit.findVesselVisit(com.navis.argo.ContextHelper.getThreadFacility(), vesvoy)&#xA;                unit.getUfvForFacilityNewest(com.navis.argo.ContextHelper.getThreadFacility()).setUfvIntendedObCv(cv)&#xA;                unit.getUfvForFacilityNewest(com.navis.argo.ContextHelper.getThreadFacility()).setUfvActualObCv(cv)&#xA;&#xA;}&#xA;            println(&quot;OBcarrier set to &quot; + unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv&quot;))&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;            fail(&quot;BDB Error setting OBCarrier On POD Change&quot; + unitId+e);&#xA;        }&#xA;&#xA;    }//Method Ends&#xA;&#xA;&#xA;}" />
<digital-asset id="GvyCmisEventUnitDeliver" short-description="GvyCmisEventUnitDeliver" is-pre-deployed="N" groovy-code="package com.matson.tos.groovies&#xA;/*&#xA; * SrNo Doer Date      Change&#xA; * A1   GR   06/21/10  Handeled Null for OB TruckId&#xA; * A2   GR   09/09/10  Gems SIT Change : MDA Check on Group Code. Removed check on hold&#xA; * A3   GR   02/14/11  Node2 issue : Added Outgate action to message to post from General notice&#xA; * A4   GR   04/12/11  Added Vesseltype before setting vesvoy for OGT Msg&#xA; * A5   GR   04/06/11  Change loadport to facility Id to compute leg correctly.&#xA; * A6   GR   06/21/11  Set BKG values on MTY Outgate POD,DEST,VESVOY&#xA; * A7   GR   07/12/11  Set Vesvoy for Cmis&#xA; * A8   GR   11/08/11  Add YB BARGE to flex02&#xA; * A9   GR   12/05/11  renamed attribute flex02 to ybBarge&#xA; * A10   GR   12/23/11 change for SIT-YB&#xA; * A11   GR   03/20/12 Added Change for YB-SIT Outgate&#xA; */&#xA; import com.navis.argo.ContextHelper&#xA; import com.navis.argo.business.reference.RoutingPoint&#xA; &#xA; public class GvyCmisEventUnitDeliver{&#xA; &#xA;   //Event UNIT_DELIVER Condition&#xA;   /*&#xA;   For outgate events, set the CMIS action as follows:&#xA;   1] Regular HON outgate ? OGC&#xA;   2] Transfer to P2/SI/WO ? OGT (group = XFER*; dray status = dray out and back)&#xA;   3] SIT ? OGC (commodity = SIT; dray status = dray out and back)&#xA;   4] YB ? OGA (group =  YB; dray status = transfer to other facility)&#xA;   5] MDA ? OGF (MDA hold on equipment) // Only MDA HOLD Left&#xA;   6] Mty with booking number ? OGS&#xA;   7] Outgate chassis only - OGP&#xA;   */&#xA; &#xA;   def ACTION = &quot;action='null'&quot;&#xA;   def LAST_ACTION = &quot;lastAction='null'&quot;&#xA;   def cmisActionList = ''&#xA;   boolean planDispChng = false&#xA;   def planDisp = null;&#xA;   def gvyCmisUtil = null;&#xA;   def facilityId = null;&#xA;   def freightkindKey = null;&#xA;   def bookingNumber = null;&#xA;   def group = null;&#xA;   def commodity = null;&#xA;   def equiClass = null;&#xA; &#xA;   public String processUnitDeliver(String xmlGvyData,Object event, Object gvyBaseClass)&#xA;   {&#xA;&#x9;  def  xmlGvyString = xmlGvyData&#xA;&#x9;  def unit = event.getEntity()&#xA; &#xA;&#x9;  try&#xA;&#x9;  {&#xA;&#x9;&#x9; def holdsList = unit.getFieldValue(&quot;unitAppliedHoldOrPermName&quot;)&#xA;&#x9;&#x9; holdsList = holdsList != null ? holdsList : ''&#xA;&#x9;&#x9; def carrierVisitGkey = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvdGkey&quot;)&#xA;&#x9;&#x9; carrierVisitGkey = carrierVisitGkey != null ? carrierVisitGkey : ''&#xA; &#xA;&#x9;&#x9; def drayStatus=unit.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;&#x9;&#x9; drayStatus = drayStatus!= null ? drayStatus.getKey() : ''&#xA; &#xA;&#x9;&#x9; group=unit.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;)&#xA;&#x9;&#x9; group = group != null ? group : ''&#xA; &#xA;&#x9;&#x9; commodity=unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;)&#xA;&#x9;&#x9; commodity = commodity != null ? commodity : ''&#xA; &#xA;&#x9;&#x9;def lkpSlot=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;&#x9;&#x9; lkpSlot = lkpSlot != null ? lkpSlot : ''&#xA; &#xA;&#x9;&#x9; cmisActionList = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisListAction&quot;);&#xA;&#x9;&#x9; gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;&#x9;&#x9; def gvyGateObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisGateData&quot;);&#xA;&#x9;&#x9; def gateIdDesc = gvyGateObj.getGateId(carrierVisitGkey)&#xA;&#x9;&#x9; gateIdDesc = gateIdDesc != null ? gateIdDesc : ''&#xA;&#x9;&#x9; def gateLane = gateIdDesc; //PASSPASS, WO GATE, P2&#xA; &#xA;&#x9;&#x9; def gvyRtgObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisRtgProcessDetail&quot;);&#xA;&#x9;&#x9; planDisp = gvyRtgObj.getPlanDisp(drayStatus,group, lkpSlot)&#xA; &#xA;&#x9;&#x9; //Mapping Cmis Action for OUT_GATE Event&#xA;&#x9;&#x9; xmlGvyString = getUnitDeliver(xmlGvyString,unit,gvyCmisUtil,holdsList,gateLane,gvyBaseClass)&#xA;&#x9;&#x9; //Out Gate Mapping Ends&#xA; &#xA;&#x9;}catch(Exception e){&#xA;&#x9;  e.printStackTrace()&#xA;&#x9;}&#xA; &#xA;&#x9;return xmlGvyString&#xA;   } //ProcessActionMapping Ends&#xA; &#xA; &#xA;&#x9;//UNIT_DELIVER&#xA;&#x9;private String getUnitDeliver(String xmlGvyData,Object unit,Object gvyCmisUtil,String holdsList,String gateLane, Object gvyBaseClass)&#xA;&#x9;{&#xA;&#x9;  def xmlGvyString = xmlGvyData&#xA; &#xA;&#x9;  def drayStatus=unit.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;&#x9;  drayStatus = drayStatus!= null ? drayStatus.getKey() : ''&#xA; &#xA;&#x9;  def _freightkind=unit.getFieldValue(&quot;unitFreightKind&quot;)&#xA;&#x9;  freightkindKey = _freightkind != null ? _freightkind.getKey() : ''&#xA; &#xA;&#x9;  facilityId = unit.getFieldValue(&quot;unitActiveUfv.ufvFacility.fcyId&quot;)&#xA;&#x9;  facilityId = facilityId != null ? facilityId : ''&#xA; &#xA;&#x9; System.out.println(&quot;TESTING facilityId::::&quot;+facilityId);&#xA; &#xA;&#x9;  bookingNumber = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;);&#xA;&#x9;  def obTruckId =unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.carrierOperatorId&quot;)&#xA;&#x9;  obTruckId = obTruckId != null ? obTruckId : ''&#xA; &#xA;&#x9;  equiClass =unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;&#x9;  equiClass = equiClass != null ? equiClass.getKey() : ''&#xA; &#xA;&#x9;   //Assigning the outgate trucker Id&#xA;&#x9;   xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;truck=&quot;,obTruckId);&#xA; &#xA;&#x9;   //Accessory MG check&#xA;&#x9;   boolean mgFlag = acryMgCheck(unit, equiClass)&#xA;&#x9;   if(mgFlag){&#xA;&#x9;&#x9;  xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;locationRun=&quot;,'MG')&#xA;&#x9;&#x9;}&#xA; &#xA;&#x9;   //Gate Lane Field manipulation&#xA;&#x9;  if(gateLane.equals(&quot;PASSPASS&quot;))&#xA;&#x9;  {&#xA;&#x9;&#x9; xmlGvyString = setPassPassGateFields(xmlGvyString,gvyCmisUtil)&#xA;&#x9;   }&#xA;&#x9;  else if(gateLane.equals(&quot;PIER2&quot;))&#xA;&#x9;  {&#xA;&#x9;&#x9;  xmlGvyString = setP2GateFields(unit,xmlGvyString,gvyCmisUtil)&#xA;&#x9;   }&#xA;&#x9;   else if (gateLane.equals(&quot;WO GATE&quot;)){&#xA;&#x9;&#x9; xmlGvyString = setWOGateFields(unit,xmlGvyString,gvyCmisUtil)&#xA;&#x9;   }&#xA; &#xA;&#x9;   //CHASSIS&#xA;&#x9;   if(equiClass.equals('CHASSIS'))&#xA;&#x9;   {&#xA;&#x9;&#x9;  xmlGvyString = setOutgateAction(xmlGvyString,&quot;OGP&quot;)&#xA;&#x9;&#x9;  xmlGvyString = setOgpOutgate(xmlGvyString,gvyCmisUtil)&#xA;&#x9;   }&#xA;&#x9;   //MDA_HOLD&#xA;&#x9;   def holdPresent = holdsList!= null ? holdsList.indexOf(&quot;MDA&quot;) : -1&#xA; &#xA;&#x9;   //A2&#xA;&#x9;   if(unit.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;) in ['MDA'])&#xA;&#x9;   {&#xA;&#x9;&#x9; xmlGvyString = setOutgateAction(xmlGvyString,&quot;OGF&quot;);&#xA;&#x9;&#x9; xmlGvyString = setOgcOgsOgfOutgate(xmlGvyString,gvyCmisUtil,unit)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//TRANSFER EVENT&#xA;&#x9;&#x9;if(group.equals('XFER-P2') || group.equals('XFER-WO') || group.equals('XFER-SI'))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;  xmlGvyString = setOutgateAction(xmlGvyString,&quot;OGT&quot;)&#xA;&#x9;&#x9;  xmlGvyString = setOgtOutGate(xmlGvyString,gvyCmisUtil)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//A10 -SIT&#xA;&#x9;&#x9;if(commodity.equals('SIT') &amp;&amp; drayStatus.equals('OFFSITE'))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;  xmlGvyString = setOgcOgsOgfOutgate(xmlGvyString,gvyCmisUtil,unit)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//YB&#xA;&#x9;&#x9;if(group.equals('YB') &amp;&amp; drayStatus.equals('TRANSFER'))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;  xmlGvyString = setOutgateAction(xmlGvyString,&quot;OGA&quot;)&#xA;&#x9;&#x9;  xmlGvyString = setOgaOutgate(xmlGvyString,gvyCmisUtil,unit,obTruckId)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//EMPTY&#xA;&#x9;&#x9;if(freightkindKey.equals('MTY') &amp;&amp; bookingNumber != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;   xmlGvyString = setOutgateAction(xmlGvyString,&quot;OGS&quot;)&#xA;&#x9;&#x9;  xmlGvyString = setOgcOgsOgfOutgate(xmlGvyString,gvyCmisUtil,unit)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if(facilityId.equals(ContextHelper.getThreadFacility().getFcyId())  || &quot;KQA&quot;.equalsIgnoreCase(facilityId))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;  xmlGvyString = setOutgateAction(xmlGvyString,&quot;OGC&quot;)&#xA;&#x9;&#x9;  xmlGvyString = setOgcOgsOgfOutgate(xmlGvyString,gvyCmisUtil,unit)&#xA;&#x9;&#x9;  if(commodity.equals('SIT') &amp;&amp; group.equals('YB')){ //A10&#xA;&#x9;&#x9;&#x9;  xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;locationStatus=&quot;,&quot;3&quot;)&#xA;&#x9;&#x9;  }&#xA;&#x9;&#x9;}&#xA; &#xA; &#xA;&#x9; return xmlGvyString&#xA;&#x9;}//Method unitDeliver Ends&#xA; &#xA;   //A3 Starts- Add Outgate Action to Message&#xA;   public String setOutgateAction(String xml,String aAction){&#xA;&#x9;  def outXml = xml;&#xA;&#x9;  gvyCmisUtil = gvyCmisUtil != null ? gvyCmisUtil : gvyCmisUtil.gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;&#x9;  def tempvalue = gvyCmisUtil.getFieldValues(xml, &quot;action=&quot;);&#xA;&#x9;  if(tempvalue != null &amp;&amp; !tempvalue.startsWith('OG')){&#xA;&#x9;&#x9;&#x9;outXml = gvyCmisUtil.eventSpecificFieldValue(outXml,&quot;action=&quot;,aAction);&#xA;&#x9;&#x9; outXml = gvyCmisUtil.eventSpecificFieldValue(outXml,&quot;lastAction=&quot;,aAction);&#xA;&#x9;  }&#xA;&#x9; return outXml;&#xA;   }//A3 Ends&#xA; &#xA;&#x9;//Method Validates if the Accessory is an MG&#xA;   public boolean acryMgCheck(Object unit, String equiClass)&#xA;   {&#xA;&#x9; def unitChasAcryType  = ''&#xA;&#x9; def unitCtrEqptype = ''&#xA;&#x9; if(equiClass.equals('CONTAINER'))&#xA;&#x9; {&#xA;&#x9;  //Check if unit has MG mounted on It&#xA;&#x9;  unitCtrEqptype = unit.getUnitAcryEqtypeId() // For Container&#xA;&#x9;  unitCtrEqptype = unitCtrEqptype != null ? unitCtrEqptype : ''&#xA;&#x9; }&#xA;&#x9; else if(equiClass.equals('CONTAINER'))&#xA;&#x9; {&#xA;&#x9;  //Acry for unit Chassis&#xA;&#x9;  def unitChasAcryObj = unit.getUnitChsAccessory();&#xA;&#x9;&#x9;if(unitChasAcryObj != null)&#xA;&#x9;   {&#xA;&#x9;&#x9;  unitChasAcryType = unitChasAcryObj.getEqEquipType() != null ? unitChasAcryObj.getEqEquipType().getEqtypId() : null&#xA;&#x9;&#x9;  unitChasAcryType = unitChasAcryType != null ? unitChasAcryType : ''&#xA;&#x9;&#x9;}&#xA;&#x9; }&#xA;&#x9; if(unitCtrEqptype.startsWith('MG') || unitChasAcryType.startsWith('MG')){&#xA;&#x9;   return true;&#xA;&#x9;  }&#xA;&#x9; return false;&#xA;   }&#xA; &#xA;   //Method for OGC/OGS/OGF&#xA;   public String setOgcOgsOgfOutgate(String xmlGvyData,Object gvyCmisUtil, Object unit)&#xA;   {&#xA;&#x9; def xmlGvyString = xmlGvyData&#xA;&#x9; freightkindKey = freightkindKey != null ? freightkindKey : unit.getFieldValue(&quot;unitFreightKind&quot;).getKey();&#xA;&#x9; def bookingNbr = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;)&#xA; &#xA;&#x9; try&#xA;&#x9; {&#xA;&#x9;   //Set Plan Disp and Location status&#xA;&#x9;   if(!planDispChng)&#xA;&#x9;  {&#xA;&#x9;&#x9;if('YB'.equals(group) &amp;&amp; 'SIT'.equals(commodity)){//A11&#xA;&#x9;&#x9;}else if(planDisp != null &amp;&amp; planDisp.length() &gt; 0){&#xA;&#x9;&#x9;   xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;locationStatus=&quot;,planDisp)&#xA;&#x9;&#x9;   xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;planDisp=&quot;,&quot;null&quot;)&#xA;&#x9;&#x9; }&#xA;&#x9;&#x9; else{&#xA;&#x9;&#x9;   xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;locationStatus=&quot;,&quot;3&quot;)&#xA;&#x9;&#x9; }&#xA;&#x9;  }&#xA;&#x9;  //A06 - Condition to Handel Actual VesVoy at MTY OUTGATE&#xA;&#x9;  if(freightkindKey.equals('MTY') &amp;&amp; bookingNbr != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;   def pod1 = null;  def dest = null;  def vesId = null;&#xA;&#x9;&#x9;   if(bookingNbr != null){&#xA;&#x9;&#x9;&#x9; pod1 = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqoPod1.pointId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;dest = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqoDestination&quot;);&#xA;&#x9;&#x9;&#x9;   vesId = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqoVesselVisit.cvId&quot;);&#xA;&#x9;&#x9;&#x9; println(&quot;pod1=&quot;+pod1+&quot;   dest=&quot;+dest+&quot;   vesId=&quot;+vesId)&#xA;&#x9;&#x9;   }&#xA; &#xA;&#x9;&#x9;   if(bookingNbr != null &amp;&amp; pod1 != null &amp;&amp; dest != null &amp;&amp; vesId != null){&#xA;&#x9;&#x9;&#x9; setBkgValueOnMtyOgt(unit,pod1,vesId,dest);&#xA;&#x9;&#x9;&#x9; xmlGvyString = gvyCmisUtil.setVesvoyFields(unit,xmlGvyString,vesId,&quot;CELL&quot;);&#xA;&#x9;&#x9;&#x9; xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dischargePort=&quot;,pod1);&#xA;&#x9;&#x9;&#x9; xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dPort=&quot;,dest);&#xA;&#x9;&#x9;&#x9; xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;vesvoy=&quot;,vesId); //A7&#xA;&#x9;&#x9;   }&#xA;&#x9;&#x9;}     &#x9; &#xA;&#x9;  return setChassisIdToPmd(unit,equiClass,xmlGvyString);&#xA;&#x9;&#xA;&#x9; }catch(Exception e){&#xA;&#x9;   e.printStackTrace()&#xA;&#x9; }&#xA;&#x9; return xmlGvyString;&#xA;   }&#xA;   &#xA;   &#xA;   public String setChassisIdToPmd( Object inUnit,String inEquiClass,String inXmlGvyString){&#xA;&#x9;   &#xA;&#x9;   System.out.println(&quot;Calling getChassisIdFromUnit : &quot;+inUnit +&quot;inEquiClass&quot;+inEquiClass);&#xA;&#x9;  &#xA;&#x9;    if(inEquiClass==null || inEquiClass==&quot;&quot; || inUnit==null ){&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;System.out.println(&quot;found invalid input : &quot;+inUnit +&quot;inEquiClass&quot;+inEquiClass);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;   &#xA;&#x9;&#x9;   return inXmlGvyString;&#xA;&#x9;   }&#xA;&#x9;   &#xA;&#x9;   def carriage = inEquiClass.equals('CONTAINER') ? inUnit.getUnitCurrentlyAttachedChassisId() : inUnit.getFieldValue(&quot;unitId&quot;);&#xA;&#x9;      &#xA;&#x9;   System.out.println(&quot;carriage :&quot;+carriage); &#xA;&#x9;   &#x9; &#xA;&#x9;   if((carriage!=null &amp;&amp; carriage!=&quot;&quot;) &amp;&amp; !&quot;OWN&quot;.equalsIgnoreCase(carriage)){&#xA;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;   def chassisId =  carriage.substring(0,carriage.length()-1)&#xA;&#x9;&#x9;   &#xA;&#x9;&#x9;   System.out.println(&quot;chassisId :&quot;+chassisId);&#xA;&#x9;&#x9;   &#xA;&#x9;&#x9;   if(chassisId!=null &amp;&amp; chassisId!=&quot;&quot; ){&#xA;&#x9;&#x9;&#x9;   System.out.println(&quot;setting chassisId :&quot;+chassisId);&#xA;&#x9;&#x9;&#x9;   inXmlGvyString = gvyCmisUtil.eventSpecificFieldValue(inXmlGvyString,&quot;pmd=&quot;,chassisId);&#xA;&#x9;&#x9;   }&#xA;&#x9;&#x9;   System.out.println(&quot;returning :&quot;+chassisId);&#xA;&#x9;&#x9;   return inXmlGvyString;&#xA;&#x9;&#x9;   &#xA;&#x9;   }&#x9;&#xA;&#x9;   System.out.println(&quot;set null pmd :&quot;);&#xA;&#x9;   return inXmlGvyString = gvyCmisUtil.eventSpecificFieldValue(inXmlGvyString,&quot;pmd=&quot;,&quot;null&quot;);   &#xA;&#x9;&#xA;   }&#xA; &#xA; &#xA;   //Method for OGA&#xA;   public String setOgaOutgate(String xmlGvyData,Object gvyCmisUtil, Object unit,String obTruckId)&#xA;   {&#xA;&#x9; def xmlGvyString = xmlGvyData&#xA;&#x9; def intdObCarrierId = unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;)&#xA;&#x9; //xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dischargePort=&quot;,'HON')&#xA;&#x9; xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;misc1=&quot;,obTruckId)&#xA;&#x9; xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;truck=&quot;,'YBUU')&#xA;&#x9; xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;ybBarge=&quot;,intdObCarrierId) //A8&#xA;&#x9; xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;flex02=&quot;,intdObCarrierId) //A8&#xA;&#x9; def vesvoy = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;vesvoy=&quot;)&#xA;&#x9; if(planDisp != null &amp;&amp; planDisp.length() &gt; 0){ //A11&#xA;&#x9;&#x9;xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;locationStatus=&quot;,planDisp)&#xA;&#x9;&#x9;xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;planDisp=&quot;,&quot;null&quot;)&#xA;&#x9;  }&#xA;&#x9; if(vesvoy.length() == 0){&#xA;&#x9;&#x9;xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;actualVessel=&quot;,&quot;&quot;)&#xA;&#x9;&#x9;xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;actualVoyage=&quot;,&quot;&quot;)&#xA;&#x9;&#x9;xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;leg=&quot;,&quot;&quot;)&#xA;&#x9; }else if(vesvoy.length() &gt; 5){&#xA;&#x9;&#x9;xmlGvyString = gvyCmisUtil.setVesvoyFields(unit,xmlGvyString,vesvoy,&quot;CELL&quot;);&#xA;&#x9; }&#xA; &#xA;&#x9; return xmlGvyString&#xA;   }&#xA; &#xA;   //Method for OGP&#xA;   public String setOgpOutgate(String xmlGvyData,Object gvyCmisUtil)&#xA;   {&#xA;&#x9; def xmlGvyString = xmlGvyData&#xA;&#x9; xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;locationStatus=&quot;,'3')&#xA;&#x9; return xmlGvyString&#xA;&#x9;}&#xA; &#xA;&#x9;//Method for OGT&#xA;&#x9;public String setOgtOutGate(String xmlGvyData,Object gvyCmisUtil)&#xA;&#x9;{&#xA;&#x9;  def xmlGvyString = xmlGvyData&#xA;&#x9;  xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;planDisp=&quot;,&quot;null&quot;)&#xA;&#x9;  xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;locationStatus=&quot;,'3')&#xA;&#x9;  return xmlGvyString&#xA;&#x9; }&#xA; &#xA;&#x9; //Method Manipulates Fields for P2 gate&#xA;&#x9; public String setP2GateFields(Object unit,String xmlGvyData,Object gvyCmisUtil)&#xA;&#x9;{&#xA;&#x9;  def xmlGvyString = xmlGvyData&#xA;&#x9;  try&#xA;&#x9; {&#xA;&#x9;   def category=unit.getFieldValue(&quot;unitCategory&quot;)&#xA;&#x9;   category = category != null ? category.getKey() : ''&#xA; &#xA;&#x9;   xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;locationTier=&quot;,&quot;T2&quot;)&#xA;&#x9;&#x9; if(category.equals('IMPRT')){&#xA;&#x9;&#x9;   def dibcarrierId=unit.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;)&#xA;&#x9;&#x9;   dibcarrierId = dibcarrierId != null ? dibcarrierId : null&#xA;&#x9;&#x9;   def vesType = gvyCmisUtil.getVesselClassType(dibcarrierId) //A4&#xA;&#x9;&#x9;   if(vesType.equals('CELL')){ xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;vesvoy=&quot;,dibcarrierId)}&#xA;&#x9;&#x9; }else if(category.equals('EXPRT')){&#xA;&#x9;&#x9;   def dobcarrierId=unit.getFieldValue(&quot;unitRouting.rtgDeclaredCv.cvId&quot;)&#xA;&#x9;&#x9;   dobcarrierId = dobcarrierId != null ? dobcarrierId : null&#xA;&#x9;&#x9;   def vesType = gvyCmisUtil.getVesselClassType(dobcarrierId)&#xA;&#x9;&#x9;   if(vesType.equals('CELL')){ xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;vesvoy=&quot;,dobcarrierId) }&#xA;&#x9;&#x9; }&#xA;&#x9; }catch(Exception e){&#xA;&#x9;   e.printStackTrace()&#xA;&#x9;  }&#xA;&#x9;  return xmlGvyString&#xA;&#x9;}&#xA; &#xA;&#x9;//Method Manipulates Fields for WO gate&#xA;&#x9; public String setWOGateFields(Object unit,String xmlGvyData,Object gvyCmisUtil)&#xA;&#x9;{&#xA;&#x9;  def xmlGvyString = xmlGvyData&#xA;&#x9;  try&#xA;&#x9;  {&#xA;&#x9;&#x9;def category=unit.getFieldValue(&quot;unitCategory&quot;)&#xA;&#x9;&#x9;category = category != null ? category.getKey() : ''&#xA; &#xA;&#x9;&#x9;xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;locationTier=&quot;,&quot;T3&quot;)&#xA;&#x9;&#x9;xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;loc=&quot;,&quot;WOA 1&quot;)&#xA;&#x9;&#x9;if(category.equals('IMPRT')){&#xA;&#x9;&#x9;   def dibcarrierId=unit.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;)&#xA;&#x9;&#x9;   dibcarrierId = dibcarrierId != null ? dibcarrierId : null&#xA;&#x9;&#x9;   def vesType = gvyCmisUtil.getVesselClassType(dibcarrierId)//A4&#xA;&#x9;&#x9;   if(vesType.equals('CELL')){ xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;vesvoy=&quot;,dibcarrierId)}&#xA;&#x9;&#x9; }else if(category.equals('EXPRT')){&#xA;&#x9;&#x9;   def dobcarrierId=unit.getFieldValue(&quot;unitRouting.rtgDeclaredCv.cvId&quot;)&#xA;&#x9;&#x9;   dobcarrierId = dobcarrierId != null ? dobcarrierId : null&#xA;&#x9;&#x9;   def vesType = gvyCmisUtil.getVesselClassType(dobcarrierId)&#xA;&#x9;&#x9;   if(vesType.equals('CELL')){ xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;vesvoy=&quot;,dobcarrierId)}&#xA;&#x9;&#x9; }&#xA;&#x9;  }catch(Exception e){&#xA;&#x9;&#x9; e.printStackTrace()&#xA;&#x9;  }&#xA;&#x9;  return xmlGvyString&#xA;&#x9;}&#xA; &#xA;&#x9;//Method Manipulates Fields for PassPass gate&#xA;&#x9;public String setPassPassGateFields(String xmlGvyData,Object gvyCmisUtil)&#xA;   {&#xA;&#x9;  def xmlGvyString = xmlGvyData&#xA;&#x9;  xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;loc=&quot;,&quot;null&quot;)&#xA;&#x9;  xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;cell=&quot;,&quot;null&quot;)&#xA;&#x9;  xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;pmd=&quot;,&quot;null&quot;)&#xA;&#x9;  xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;truck=&quot;,&quot;null&quot;)&#xA; &#xA;&#x9; //Set Plan Disp and Location status&#xA;&#x9; if(planDisp != null &amp;&amp; planDisp.length() &gt; 0)&#xA;&#x9; {&#xA;&#x9;   planDispChng = true&#xA;&#x9;   xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;locationStatus=&quot;,planDisp)&#xA;&#x9;   xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;planDisp=&quot;,&quot;null&quot;)&#xA;&#x9; }&#xA;&#x9; else&#xA;&#x9; {&#xA;&#x9;&#x9;xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;locationStatus=&quot;,&quot;A&quot;)&#xA;&#x9;  }&#xA; &#xA;&#x9; return xmlGvyString&#xA;&#x9;}//Pass Pass method ends&#xA; &#xA;&#x9;  /*&#xA;&#x9;   * A6 - Method Sets POD,Destination and vesvoy onto the N4 unit&#xA;&#x9;   * For Empty Outgates with the Booking Information&#xA;&#x9;  */&#xA;&#x9; public void setBkgValueOnMtyOgt(Object unit, Object pod1, String vesId, String dest){&#xA;&#x9;&#x9;if(pod1 != null &amp;&amp; dest !=null &amp;&amp; vesId!= null){&#xA;&#x9;&#x9;def routing = unit.getUnitRouting();&#xA;&#x9;&#x9;routing.setRtgPOD1(RoutingPoint.findRoutingPoint(pod1));&#xA;&#x9;&#x9;unit.setFieldValue(&quot;unitFlexString10&quot;, vesId);&#xA;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsDestination&quot;,dest);&#xA;&#x9;   }&#xA;&#x9; }&#xA; &#xA;  }//Class Ends" />
<digital-asset id="GvyCmisEventFeedManipulation" short-description="GvyCmisEventFeedManipulation" is-pre-deployed="N" groovy-code="/*&#xA;* SrNo Doer  Date       Change&#xA;* A1   GR    05/24/10   Client vesvoy not to include ves Id if already exisit&#xA;* A2   GR    07/21/10   Added Clisnt Vesvoy HON Check&#xA;* A3   GR    08/22/10   SN4Q change : Added parameter gvyCmisUtil &amp; gvyBaseClass to getRetCustomerAssign&#xA;* A4   GR    08/22/10   SN4Q change : Added CLS action for MDA &amp; Return to Customer UnAssign&#xA;* A5   GR    11/04/10   SN4Q : set truck=Null for WO and P2&#xA;* A6   LC    12/05/12   Added setting Client actual vessel/voyage&#xA;* A7   LC    06/18/13   Created separate method for the CMIS_DATA_REFRESH&#xA;* A8   KR    08/28/13&#x9;Added: Pass trucker to the WO TRANSFER EVENT instead of null.&#xA;* A9   KR    07/09/15  Alaska Ports&#xA;*/&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;&#xA;public class GvyCmisEventFeedManipulation {&#xA;&#xA;    public String processCmisEventFeedManipulation(String eventType, String xmlGvyString, Object gvyBaseClass, Object event, Object unit, Object isUnitObj, String equiClass) {&#xA;        def xmlGvyData = xmlGvyString&#xA;        try {&#xA;            Object eventSpecObj = null;&#xA;            def groupCode = unit.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;);&#xA;            groupCode = groupCode != null ? groupCode : ''&#xA;            def _commodityId = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;)&#xA;            def commodityId = _commodityId != null ? _commodityId : ''&#xA;            def designatedTrucker = unit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;            def _drayStatus = unit.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;            def drayStatus = _drayStatus != null ? _drayStatus.getKey() : _drayStatus&#xA;&#xA;            def dischPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;            dischPort = dischPort != null ? dischPort : ''&#xA;&#xA;            //Added To Set the Dport to HON for Inbound units&#xA;            def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;            def lkpLocType = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;            lkpLocType = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;            def lkpCarrierId = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocId&quot;)&#xA;&#xA;            def transitState = unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;            transitState = transitState != null ? transitState.getKey() : ''&#xA;&#xA;            def category = unit.getFieldValue(&quot;unitCategory&quot;)&#xA;            category = category != null ? category.getKey() : ''&#xA;&#xA;            def locationStatus = ''&#xA;            if (!eventType.equals('UNIT_REROUTE')&amp;&amp; lkpLocType.equals('VESSEL')) {&#xA;                locationStatus = getLocationStatusOnCell(gvyCmisUtil, lkpCarrierId, category, transitState)&#xA;                println(&quot;locationStatus ::::Feed Manipulation:&quot; + locationStatus)&#xA;                if ('4'.equals(locationStatus)) {&#xA;                    xmlGvyData = gvyCmisUtil.eventSpecificFieldValue(xmlGvyData, &quot;dischargePort=&quot;, ContextHelper.getThreadFacility().getFcyId())&#xA;                }&#xA;            }//If Ends&#xA;&#xA;            //Setting the Client Vesvoy&#xA;            def vesselLineOperator = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdBizu.bzuId&quot;);&#xA;            if (vesselLineOperator != null &amp;&amp; !vesselLineOperator.equals('MAT')) {&#xA;                def vesvoy = getClientVesVoy(gvyCmisUtil, dischPort, unit)&#xA;                xmlGvyData = gvyCmisUtil.eventSpecificFieldValue(xmlGvyData, &quot;vesvoy=&quot;, vesvoy)&#xA;            }&#xA;&#xA;            //def locationStatus = gvyCmisUtil.getFieldValues(xmlGvyData, &quot;locationStatus=&quot;)&#xA;&#xA;            //Need to Work on - override the vesvoy for Long Haul to NIS with service [LHH,OHK]&#xA;            /* def service = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.cvdService.srvcId&quot;);&#xA;            service = service != null ? service : ''&#xA;            if(service.equals('LHH')){&#xA;                   if(lkpLocType.equals())&#xA;                xmlGvyData = gvyCmisUtil.eventSpecificFieldValue(xmlGvyData,&quot;vesvoy=&quot;,lkpCarrierId)&#xA;             }*/&#xA;            //Commented out as Fileds being set in generic Rules&#xA;/*       if(groupCode != null &amp;&amp; groupCode.equals('TS')){&#xA;        eventSpecObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;        xmlGvyData = eventSpecObj.getAfterTagStripAssign(xmlGvyData)&#xA;      }*/&#xA;            /*else if((groupCode.equals('XFER-P2') || groupCode.equals('XFER-WO') //A5&#xA;                || groupCode.equals('XFER-SI')) &amp;&amp; drayStatus.equals('OFFSITE') ){&#xA;               eventSpecObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;               xmlGvyData = eventSpecObj.getTransferEventChanges(xmlGvyData, designatedTrucker) //&#xA;            }&#xA;            else if(groupCode.equals('COMSVC')){&#xA;               eventSpecObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUnitPropertyUpdate&quot;);&#xA;               xmlGvyData = eventSpecObj.AssignTrucker(xmlGvyData,gvyCmisUtil,unit )&#xA;            }&#xA;            else  if(groupCode.equals('TTNU') || groupCode.equals('MDA') || eventType.equals('RETURN_TO_CUSTOMER_ASSIGN')){&#xA;               eventSpecObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;               xmlGvyData = eventSpecObj.getRetCustomerAssign(xmlGvyData,unit,gvyCmisUtil,gvyBaseClass) //A3&#xA;            }&#xA;            else if (groupCode.equals('YB') || eventType.equals('YB_UNASSIGN')) {&#xA;               eventSpecObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;               xmlGvyData = eventSpecObj.getYBEvent(xmlGvyData,designatedTrucker,eventType)&#xA;            }*/&#xA;            //SIT EVENT&#xA;            else if (commodityId.equals('SIT') &amp;&amp; drayStatus.equals('OFFSITE')) {&#xA;                println('INSIDE THE SIT ASSIGN CONDITION')&#xA;                eventSpecObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventSIT&quot;);&#xA;                def appendObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;                xmlGvyData = eventSpecObj.processSitAssign(xmlGvyData, event, unit, commodityId, drayStatus)&#xA;            }&#xA;            /*else if(eventType.equals('TRANSFER_CANCEL')){&#xA;               eventSpecObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;               xmlGvyData = eventSpecObj.getTransferCancelEvent(xmlGvyData, designatedTrucker, commodityId)&#xA;            }*/ else if (eventType.equals('COMMUNITY_SERVICE_UNASSIGN')) {&#xA;                eventSpecObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;                xmlGvyData = eventSpecObj.getCommunityServiceUnAssign(xmlGvyData)&#xA;            } else if (eventType.equals('SIT_UNASSIGN')) {&#xA;                def eventSitObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventSIT&quot;);&#xA;                eventSpecObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;                xmlGvyData = eventSitObj.processSitUnAssign(xmlGvyData, eventSpecObj)&#xA;            } else if (eventType.equals('MDA_UNASSIGN') || eventType.equals('RETURN_TO_CUSTOMER_UNASSIGN')) { //A4&#xA;                if (lkpLocType.equals(&quot;TRUCK&quot;) &amp;&amp; UfvTransitStateEnum.S70_DEPARTED.equals(unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;))) {&#xA;                    xmlGvyData = gvyCmisUtil.eventSpecificFieldValue(xmlGvyData, &quot;action=&quot;, &quot;CLS&quot;)&#xA;                    xmlGvyData = gvyCmisUtil.eventSpecificFieldValue(xmlGvyData, &quot;lastAction=&quot;, &quot;CLS&quot;)&#xA;                    xmlGvyData = gvyCmisUtil.eventSpecificFieldValue(xmlGvyData, &quot;locationStatus=&quot;, &quot;3&quot;)&#xA;                    //IF ON TRUCK and DEPT then CLS ELSE PDD&#xA;                }&#xA;            }&#xA;&#xA;            //EQUIP HOLD/RELEASE FIELD MANIPULATION&#xA;            def equipHold = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEquipmentHoldEvents&quot;)&#xA;            xmlGvyData = equipHold.setEquipmentHoldFields(xmlGvyData, event, unit)&#xA;&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return xmlGvyData&#xA;    }&#xA;&#xA;    public String getLocationStatusOnCell(Object gvyCmisUtil, String lkpCarrierId, String category, String transitState) {&#xA;        def locationStatus = ''&#xA;        try {&#xA;            if (gvyCmisUtil != null &amp;&amp; gvyCmisUtil.getVesselClassType(lkpCarrierId).equals('CELL')) {&#xA;                if (category.equals('THRGH')) {&#xA;                    locationStatus = '2'&#xA;                } else if (transitState.equals('S60_LOADED') || transitState.equals('S70_DEPARTED')) {&#xA;                    locationStatus = '2'&#xA;                } else if (transitState.equals('S20_INBOUND')) {&#xA;                    locationStatus = '4'&#xA;                }&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return locationStatus&#xA;    }//Method Ends&#xA;&#xA;    public StringgetClientVesVoy(Object gvyCmisUtil, String dischPort, Object unit) {&#xA;        def vesvoy = '%'; def intIbVesId = ''; def intIbVygNbr = '';&#xA;        try {&#xA;            /*def islandPort = gvyCmisUtil.isNISPort(dischPort)&#xA;            if (islandPort || 'HON'.equals(dischPort)){&#xA;               intIbVesId = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdVessel.vesId&quot;)&#xA;               intIbVygNbr = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdIbVygNbr&quot;)&#xA;            }else{*/&#xA;            intIbVesId = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdVessel.vesId&quot;)&#xA;            intIbVygNbr = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdObVygNbr&quot;)&#xA;            /*}*/&#xA;            vesvoy = intIbVygNbr.contains(intIbVesId) ? intIbVygNbr : intIbVesId + intIbVygNbr&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return vesvoy&#xA;    }//Method Ends&#xA;&#xA;    /*&#xA;        A7 - Added for CMIS_DATA_REFRESH&#xA;    */&#xA;&#xA;    public String processCmisEventFeedManipulationForRefresh(String eventType, String xmlGvyString, Object gvyBaseClass, Object event, Object unit, Object isUnitObj, String equiClass) {&#xA;        def xmlGvyData = xmlGvyString&#xA;        try {&#xA;            Object eventSpecObj = null;&#xA;            def groupCode = unit.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;);&#xA;            groupCode = groupCode != null ? groupCode : ''&#xA;            def _commodityId = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;)&#xA;            def commodityId = _commodityId != null ? _commodityId : ''&#xA;            def designatedTrucker = unit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;            def _drayStatus = unit.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;            def drayStatus = _drayStatus != null ? _drayStatus.getKey() : _drayStatus&#xA;&#xA;            def dischPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;            dischPort = dischPort != null ? dischPort : ''&#xA;&#xA;            //Added To Set the Dport to HON for Inbound units&#xA;            def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;            def lkpLocType = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;            lkpLocType = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;            def lkpCarrierId = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocId&quot;)&#xA;&#xA;            def transitState = unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;            transitState = transitState != null ? transitState.getKey() : ''&#xA;&#xA;            def category = unit.getFieldValue(&quot;unitCategory&quot;)&#xA;            category = category != null ? category.getKey() : ''&#xA;&#xA;            def locationStatus = ''&#xA;            if (lkpLocType.equals('VESSEL')) {&#xA;                locationStatus = getLocationStatusOnCell(gvyCmisUtil, lkpCarrierId, category, transitState)&#xA;                println(&quot;locationStatus ::::Feed Manipulation:&quot; + locationStatus)&#xA;                if ('4'.equals(locationStatus)) {&#xA;                    xmlGvyData = gvyCmisUtil.eventSpecificFieldValue(xmlGvyData, &quot;dischargePort=&quot;, ContextHelper.getThreadFacility().getFcyId())&#xA;                }&#xA;            }//If Ends&#xA;&#xA;            //Setting the Client Vesvoy, actualVessel, actualVoyage - A6&#xA;            def vesselLineOperator = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdBizu.bzuId&quot;);&#xA;            if (vesselLineOperator != null &amp;&amp; !vesselLineOperator.equals('MAT')) {&#xA;                def vesvoy = getClientVesVoy(gvyCmisUtil, dischPort, unit)&#xA;                xmlGvyData = gvyCmisUtil.eventSpecificFieldValue(xmlGvyData, &quot;vesvoy=&quot;, vesvoy)&#xA;                def actualVessel = vesvoy.length() &gt; 5 ? vesvoy.substring(0, 3) : 'null';&#xA;                def actualVoyage = vesvoy.length() &gt; 5 ? vesvoy.substring(3) : 'null';&#xA;                xmlGvyData = gvyCmisUtil.eventSpecificFieldValue(xmlGvyData, &quot;actualVessel=&quot;, actualVessel);&#xA;                xmlGvyData = gvyCmisUtil.eventSpecificFieldValue(xmlGvyData, &quot;actualVoyage=&quot;, actualVoyage);&#xA;&#xA;            }&#xA;&#xA;            /*else if((groupCode.equals('XFER-P2') || groupCode.equals('XFER-WO') //A5&#xA;                    || groupCode.equals('XFER-SI')) &amp;&amp; drayStatus.equals('OFFSITE') ){&#xA;                eventSpecObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;                xmlGvyData = eventSpecObj.getTransferEventChanges(xmlGvyData)&#xA;            }&#xA;            else if(groupCode.equals('COMSVC')){&#xA;                eventSpecObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUnitPropertyUpdate&quot;);&#xA;                xmlGvyData = eventSpecObj.AssignTrucker(xmlGvyData,gvyCmisUtil,unit )&#xA;            }&#xA;            else  if(groupCode.equals('TTNU') || groupCode.equals('MDA') || eventType.equals('RETURN_TO_CUSTOMER_ASSIGN')){&#xA;                eventSpecObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;                xmlGvyData = eventSpecObj.getRetCustomerAssign(xmlGvyData,unit,gvyCmisUtil,gvyBaseClass) //A3&#xA;            }&#xA;            else if (groupCode.equals('YB') || eventType.equals('YB_UNASSIGN')) {&#xA;                eventSpecObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;                xmlGvyData = eventSpecObj.getYBEvent(xmlGvyData,designatedTrucker,eventType)&#xA;            }*/&#xA;            //SIT EVENT&#xA;            else if (commodityId.equals('SIT') &amp;&amp; drayStatus.equals('OFFSITE')) {&#xA;                println('INSIDE THE SIT ASSIGN CONDITION')&#xA;                eventSpecObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventSIT&quot;);&#xA;                def appendObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;                xmlGvyData = eventSpecObj.processSitAssign(xmlGvyData, event, unit, commodityId, drayStatus)&#xA;            } else if (eventType.equals('TRANSFER_CANCEL')) {&#xA;                eventSpecObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;                xmlGvyData = eventSpecObj.getTransferCancelEvent(xmlGvyData, designatedTrucker, commodityId)&#xA;            } else if (eventType.equals('COMMUNITY_SERVICE_UNASSIGN')) {&#xA;                eventSpecObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;                xmlGvyData = eventSpecObj.getCommunityServiceUnAssign(xmlGvyData)&#xA;            } else if (eventType.equals('SIT_UNASSIGN')) {&#xA;                def eventSitObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventSIT&quot;);&#xA;                eventSpecObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;                xmlGvyData = eventSitObj.processSitUnAssign(xmlGvyData, eventSpecObj)&#xA;            } else if (eventType.equals('MDA_UNASSIGN') || eventType.equals('RETURN_TO_CUSTOMER_UNASSIGN')) { //A4&#xA;                if (lkpLocType.equals(&quot;TRUCK&quot;) &amp;&amp; UfvTransitStateEnum.S70_DEPARTED.equals(unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;))) {&#xA;                    xmlGvyData = gvyCmisUtil.eventSpecificFieldValue(xmlGvyData, &quot;action=&quot;, &quot;CLS&quot;)&#xA;                    xmlGvyData = gvyCmisUtil.eventSpecificFieldValue(xmlGvyData, &quot;lastAction=&quot;, &quot;CLS&quot;)&#xA;                    xmlGvyData = gvyCmisUtil.eventSpecificFieldValue(xmlGvyData, &quot;locationStatus=&quot;, &quot;3&quot;)&#xA;                    //IF ON TRUCK and DEPT then CLS ELSE PDD&#xA;                }&#xA;            }&#xA;&#xA;            //EQUIP HOLD/RELEASE FIELD MANIPULATION&#xA;            def equipHold = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEquipmentHoldEvents&quot;)&#xA;            xmlGvyData = equipHold.setEquipmentHoldFields(xmlGvyData, event, unit)&#xA;&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return xmlGvyData&#xA;    }&#xA;}" />
<digital-asset id="JMSQueueSender" short-description="JMSQueueSender" is-pre-deployed="N" groovy-code="/*&#xA;* Srno  date      doer  change&#xA;* A1    02/02/12  GR    setMnsQueue for NIZ action posting&#xA;*/&#xA;import java.util.Hashtable;&#xA;import javax.jms.JMSException;&#xA;import javax.naming.Context;&#xA;import javax.naming.InitialContext;&#xA;import javax.jms.*;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import org.apache.activemq.ActiveMQConnectionFactory;&#xA;&#xA;&#xA;public class JMSQueueSender extends GroovyInjectionBase{&#xA;&#xA;&#x9;private String queueName = &quot;ak.n4.gems.eq.events&quot;;&#xA;&#x9;private static String url;&#xA;&#xA;        public JMSQueueSender()  {&#xA;&#x9;    if(url == null){&#xA;&#x9;       url = getGroovyClassInstance(&quot;GvyRefDataLookup&quot;).getN4TopicAddress();&#xA;        }&#xA;&#x9;}&#xA;&#xA;&#x9;public JMSQueueSender( String _queueName)  {&#xA;&#x9;  if(url == null){&#xA;&#x9;     url = getGroovyClassInstance(&quot;GvyRefDataLookup&quot;).getN4TopicAddress();&#xA;      }&#xA;      queueName = _queueName&#xA;&#x9;}&#xA;&#xA;    public void setMnsQueue(String _mnsQueueName){&#xA;&#x9;&#x9;queueName = _mnsQueueName&#xA;    }&#xA;&#xA;&#x9;public  void send(String msg) throws JMSException, Exception&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;    //String  cfName                  = &quot;jms/WLQueueConnectionFactory&quot;;&#xA;&#x9;&#x9;    String  cfName                  = &quot;activemq/QueueConnectionFactory&quot;;&#xA;&#xA;&#xA;&#x9;&#x9;    Session                session    = null;&#xA;&#x9;&#x9;    Connection             connection = null;&#xA;&#x9;&#x9;    ActiveMQConnectionFactory       cf         = null;&#xA;&#x9;&#x9;    MessageProducer        mp         = null;&#xA;&#x9;&#x9;    Destination            destination = null;&#xA;&#x9;&#x9;&#x9;println( &quot;Calling JMSQueueSender.send using ActiveMQConnectionFactory&quot;);&#xA;&#x9;&#x9;    try {&#xA;&#xA;&#x9;&#x9;    &#x9;//Hashtable env = new Hashtable();&#xA;&#x9;&#x9;    &#x9;//env.put(Context.INITIAL_CONTEXT_FACTORY,&#xA;&#x9;&#x9;    &#x9; //    &quot;weblogic.jndi.WLInitialContextFactory&quot;);&#xA;&#x9;&#x9;    &#x9;//env.put(Context.PROVIDER_URL, &quot;tcp://10.8.4.26:61616&quot;);&#xA;&#x9;&#x9;    &#x9;//Context initialContext = new InitialContext(env);&#xA;&#x9;&#x9;    &#x9;//logger.debug( &quot;Getting Connection Factory&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//cf= (ConnectionFactory)initialContext.lookup( cfName );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//logger.debug( &quot;Getting Queue&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;//destination =(Destination)initialContext.lookup(queueName);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Inside JmsQueueSender :;&quot;+url);&#xA;&#x9; &#x9;&#x9;&#x9;cf = new ActiveMQConnectionFactory(url);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//logger.debug( &quot;Getting Connection for Queue&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;connection = cf.createConnection();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//logger.debug( &quot;staring the connection&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;connection.start();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//logger.debug( &quot;creating session&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;session = connection.createSession(false, 1);&#xA;&#x9;&#x9;&#x9;&#x9;destination = session.createQueue(queueName);&#xA;&#x9;&#x9;&#x9;&#x9;//logger.debug( &quot;creating messageProducer&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;mp = session.createProducer(destination);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//logger.debug( &quot;creating TextMessage&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;TextMessage outMessage = session.createTextMessage( msg);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;println( &quot;sending Message to queue: &quot; + queueName);&#xA;&#x9;&#x9;&#x9;&#x9;mp.send(outMessage);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;mp.close();&#xA;&#x9;&#x9;&#x9;&#x9;session.close();&#xA;&#x9;&#x9;&#x9;&#x9;connection.close();&#xA;&#x9;&#x9;    }&#xA;&#x9;&#x9;    catch (Exception je)&#xA;&#x9;&#x9;    {&#xA;&#x9;&#x9;    &#x9;je.printStackTrace();&#xA;&#x9;&#x9;    }&#xA;&#x9;&#x9; }//Method Ends&#xA;&#xA;} //JMSQueueSender - Class Ends" />
<digital-asset id="GvyCmisEventHazards" short-description="GvyCmisEventHazards" is-pre-deployed="N" groovy-code="import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.services.business.event.EventFieldChange&#xA;import com.navis.inventory.business.imdg.ImdgClass&#xA;import com.navis.inventory.business.imdg.HazardItem;&#xA;import com.navis.inventory.business.imdg.Hazards;&#xA;&#xA;&#xA;public class GvyCmisEventHazards&#xA;{&#xA; &#xA; public synchronized String createHazMessage(Object event, Object gvyBaseClass, String xmlGvyData)&#xA; {&#xA;  def hazImdg = ''&#xA;  def hazUnNum = ''&#xA;  def prev  = ''&#xA;  def gvyEventObj = event.getEvent()&#xA;  def unit = event.getEntity()&#xA;  def eventType =  gvyEventObj.getEventTypeId() &#xA;  def xmlGvyString = xmlGvyData&#xA;&#xA;  try&#xA;  {&#x9;  &#xA;&#xA;   Set changes =  gvyEventObj.getFieldChanges()&#xA;   Iterator iterator = changes.iterator();&#xA;   while(iterator.hasNext()) &#xA;   {&#xA;     //println('Inside While loop :')&#xA;     EventFieldChange fieldChange = (EventFieldChange)iterator.next();&#xA;     String fieldName = fieldChange.getMetafieldId()&#xA;     MetafieldId mfId =  MetafieldIdFactory.valueOf(fieldName);&#xA;     if(eventType.equals('UNIT_HAZARDS_INSERT')){&#xA;        prev = ArgoUtils.getPropertyValueAsUiString(mfId, fieldChange.getEvntfcNewVal());&#xA;    }else{&#xA;         prev = ArgoUtils.getPropertyValueAsUiString(mfId, fieldChange.getEvntfcPrevVal()); &#xA;    } &#xA;     //println('mfId :'+mfId+'   prev:'+prev)&#xA;     if (prev != null){&#xA;       if(fieldName.equals(&quot;hzrdiImdgClass&quot;)){ &#xA;          String [] imdg  = prev.split(&quot; &quot;) &#xA;          hazImdg = imdg != null ? imdg[0] : ''       &#xA;          hazImdg = hazImdg.equals('Unknown') ? 'HAZ' : hazImdg&#xA;       }&#xA;       else if(fieldName.equals(&quot;hzrdiUNnum&quot;)){&#xA;          hazUnNum = prev        &#xA;       }&#xA;     }&#xA;   }&#xA;   &#xA;   def utilObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);  &#xA;   xmlGvyString = utilObj.eventSpecificFieldValue(xmlGvyString,&quot;hazImdg=&quot;,hazImdg)&#xA;   xmlGvyString = utilObj.eventSpecificFieldValue(xmlGvyString,&quot;hazUnNum=&quot;,hazUnNum)     &#xA;&#x9;   &#xA;   //Haz Item Nbr Type&#xA;   def hzrdItemNbrType = getHzrdItemNbrType(unit, hazImdg, hazUnNum)&#xA;   xmlGvyString = utilObj.eventSpecificFieldValue(xmlGvyString,&quot;flex01=&quot;,hzrdItemNbrType)&#xA;&#xA;   //MSG FOR ACETS&#xA;   def xmlGvyAcetsMsg = xmlGvyString&#xA;   if(eventType.equals('UNIT_HAZARDS_INSERT')){&#xA;      xmlGvyAcetsMsg = xmlGvyAcetsMsg.replace(&quot;lastAction='null'&quot;,&quot;lastAction='HZU'&quot;);&#xA;      xmlGvyAcetsMsg = xmlGvyAcetsMsg.replace(&quot;action='null'&quot;,&quot;action='HZU'&quot;) &#xA;   }&#xA;   else{&#xA;      xmlGvyAcetsMsg = xmlGvyAcetsMsg.replace(&quot;lastAction='null'&quot;,&quot;lastAction='HZD'&quot;);&#xA;      xmlGvyAcetsMsg = xmlGvyAcetsMsg.replace(&quot;action='null'&quot;,&quot;action='HZD'&quot;)    &#xA;   }&#xA;&#xA;  if(xmlGvyAcetsMsg != null &amp;&amp; xmlGvyAcetsMsg.length() &gt; 0)&#xA;  {  gvyBaseClass.sendXml(xmlGvyAcetsMsg)  }&#xA;  if(xmlGvyString != null &amp;&amp; xmlGvyString.length() &gt; 0)&#xA;  {  gvyBaseClass.sendXml(xmlGvyString)  }&#xA;&#xA;  }catch(Exception e){&#xA;      e.printStackTrace() &#xA;  }&#xA;&#xA;  return xmlGvyString&#xA;}&#xA;&#xA;   public synchronized String updateHazardousMsg(Object event, Object gvyBaseClass, String xmlGvyData)&#xA;  {&#xA;      def gvyEventObj = event.getEvent()&#xA;      def eventNotes = gvyEventObj.getEventNote()&#xA;      def updtImdg = ''&#xA;      def updtUNnum = '' &#xA;      def xmlGvyString = xmlGvyData&#xA;       def unit = event.getEntity()&#xA;&#xA;     try&#xA;    {&#xA;        if(eventNotes != null){&#xA;          def startIndex = eventNotes.indexOf(&quot;[&quot;) != -1 ? eventNotes.indexOf(&quot;[&quot;) : 0&#xA;          def endIndex = eventNotes.indexOf(&quot;]&quot;) != -1 ? eventNotes.indexOf(&quot;]&quot;) : 0&#xA;          updtImdg = eventNotes.substring(startIndex+1,endIndex)&#xA;        }&#xA;&#xA;        if(eventNotes != null){&#xA;            String[] eventString = eventNotes.split(&quot; &quot;);&#xA;            int length = eventString.length;&#xA;             updtUNnum = eventString[length -1];&#xA;         }&#xA;&#xA;       def utilObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);  &#xA;       xmlGvyString = utilObj.eventSpecificFieldValue(xmlGvyString,&quot;hazImdg=&quot;,updtImdg)&#xA;       xmlGvyString = utilObj.eventSpecificFieldValue(xmlGvyString,&quot;hazUnNum=&quot;,updtUNnum)&#xA;&#x9;&#x9;   &#xA;      //Haz Item Nbr Type&#xA;       def hzrdItemNbrType = getHzrdItemNbrType(unit, updtImdg, updtUNnum)&#xA;       xmlGvyString = utilObj.eventSpecificFieldValue(xmlGvyString,&quot;flex01=&quot;,hzrdItemNbrType)&#xA;&#xA;       //MSG FOR ACETS&#xA;       def xmlGvyAcetsMsg = xmlGvyString&#xA;       xmlGvyAcetsMsg = xmlGvyAcetsMsg.replace(&quot;lastAction='null'&quot;,&quot;lastAction='HZU'&quot;);&#xA;       xmlGvyAcetsMsg = xmlGvyAcetsMsg.replace(&quot;action='null'&quot;,&quot;action='HZU'&quot;) &#xA;&#xA;       gvyBaseClass.sendXml(xmlGvyAcetsMsg)&#xA;       gvyBaseClass.sendXml(xmlGvyString) &#xA;&#xA;       return  xmlGvyString&#xA;&#xA;     }catch(Exception e){&#xA;        e.printStackTrace()&#xA;     }&#xA;&#xA;  }&#xA;&#xA; public String getHzrdItemNbrType(Object unit, String imdg, String unNaNbr)&#xA;{&#xA;  def hzrdItemNbrType = '%'&#xA;  try&#xA;  {&#xA;    def hazardsList = unit.getUnitGoods() != null ? unit.getUnitGoods().getGdsHazards() : null&#xA;    if(hazardsList != null){&#xA;     def hazardItem = hazardsList.findHazardItem(ImdgClass.getEnum(imdg),unNaNbr)&#xA;     hzrdItemNbrType = hazardItem != null ? hazardItem.hzrdiNbrType.key : '%'&#xA;    }&#xA;   }catch(Exception e){&#xA;     e.printStackTrace();&#xA;   }&#xA;   return hzrdItemNbrType&#xA; }//Method Ends&#xA;&#xA;}&#xA;" />
<digital-asset id="GvyCmisPositionDetailNewVess" short-description="GvyCmisPositionDetailNewVess" is-pre-deployed="N" groovy-code="/*&#xA;* Srno Doer Date       Change&#xA;* A1   GR   08/26/10   LOC formatting (SN4Q change)&#xA;*                      Adding Yard Position Formatting Method&#xA;* A2   GR   10/21/10   Format LOC only FOR HON Pass AS-IS value for NIS Ports&#xA;*/&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.model.Yard&#xA;import com.navis.xpscache.yardmodel.api.*;&#xA;import com.navis.xpscache.yardmodel.impl.*;&#xA;&#xA;public class GvyCmisPositionDetailNewVess {&#xA;&#xA;public String doIt(String msgType, Object gvyTxtMsgFmt, Object unitObj,String eventType,Object event)&#xA;{&#xA;  println(&quot;In Class GvyCmisPositionDetail.doIt()&quot;)&#xA;  def poistionFieldAttr = ''&#xA;  try&#xA;  {&#xA;    def gvyBaseClass = new GroovyInjectionBase()&#xA;    def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;    def obcarrierChng = gvyEventUtil.wasFieldChanged(event, &quot;ufvIntendedObCv&quot;)&#xA;    obcarrierChng = obcarrierChng != null ? obcarrierChng : ''&#xA;&#xA;    //Verify Event Notes for unitRefersh&#xA;    def gvyEventObj = event.getEvent()&#xA;    def eventNotes = gvyEventObj.getEventNote()&#xA;    eventNotes = eventNotes != null ? eventNotes : &quot;&quot;&#xA;&#xA;    //Verifying if the event Changes the position Field&#xA;    def gvyFldUpdtObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventFieldUpdateFilter&quot;);&#xA;    boolean evntUpdatesFlg = gvyFldUpdtObj.evntFilterOnPositionFldChng(eventType)&#xA;    if( !eventNotes.contains(&quot;Unit Correction&quot;) &amp;&amp; evntUpdatesFlg )&#xA;    {&#xA;         poistionFieldAttr = positionPercentageValue(gvyTxtMsgFmt)&#xA;         return poistionFieldAttr&#xA;     }&#xA;&#xA;     //Calling Msg Formater class&#xA;&#xA;    def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;&#xA;    def u = unitObj&#xA;    def lkpSlot=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;    lkpSlot = lkpSlot!= null ? lkpSlot : ''&#xA;    def lkpSlotValue = lkpSlot.indexOf(&quot;.&quot;)== -1 ? lkpSlot : lkpSlot.substring(0,lkpSlot.indexOf(&quot;.&quot;));&#xA;&#xA;    def lkpLocType=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;    def lkpLocTypeKey = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;&#xA;&#xA;    def _transitState=u.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;    def transitStateKey = _transitState != null ? _transitState.getKey() : ''&#xA;&#xA;    def _drayStatus=u.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;    def drayStatusKey = _drayStatus!= null ? _drayStatus.getKey() : _drayStatus&#xA;&#xA;    def lkpCarrierId=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocId&quot;)&#xA;&#xA;    def _category=u.getFieldValue(&quot;unitCategory&quot;)&#xA;    def categoryKey = _category != null ? _category.getKey() : ''&#xA;&#xA;    def dischPort = u.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;&#xA;    //LOC&#xA;    //def _loc = lkpLocTypeKey.equals('YARD') ? lkpSlotValue : ''&#xA;    def loc  =  getLoc(gvyCmisUtil,lkpCarrierId,lkpLocTypeKey,lkpSlotValue,transitStateKey)&#xA;    loc = '%';&#xA;    def locAttr = gvyTxtMsgFmt.doIt('loc',loc)&#xA;&#xA;    //CELL&#xA;    //def _cell = lkpLocTypeKey.equals('VESSEL') ? lkpSlotValue : ''&#xA;&#x9;def _cell = '%';&#xA;    def cellAttr = gvyTxtMsgFmt.doIt('cell',_cell)&#xA;&#xA;    //LOCATION TIER -&#xA;    def locationTier = getLocationTier(lkpLocTypeKey, lkpSlotValue)&#xA;    locationTier = '%';&#xA;    def locationTierAttr = gvyTxtMsgFmt.doIt('locationTier',locationTier)&#xA;&#xA;    //A1 LOCATION STATUS&#xA;    def locationType = getLocationStatus(lkpLocTypeKey,lkpCarrierId,transitStateKey,gvyCmisUtil,categoryKey,dischPort)&#xA;    locationType = '%';&#xA;    def locationStatusAttr = gvyTxtMsgFmt.doIt('locationStatus',locationType)&#xA;&#xA;    //LOCATION STALL CONFIG&#xA;    def locationStallConfig= u.getFieldValue(&quot;unitFlexString08&quot;) != null ? 'PS' : ''&#xA;    //def locationStallConfigAttr =  gvyTxtMsgFmt.doIt('locationStallConfig',locationStallConfig)&#xA;&#xA;    poistionFieldAttr = locAttr+cellAttr+locationTierAttr+locationStatusAttr&#xA;&#xA;  }catch(Exception e){&#xA;     e.printStackTrace()&#xA;  }&#xA;&#xA;  return poistionFieldAttr&#xA;&#xA; }&#xA;&#xA; private String getLocationTier(String lkpLocTypeKy, String lkpSlotVal)&#xA; {&#xA;     def locationTier = ''&#xA;     try&#xA;     {&#xA;         if(lkpLocTypeKy.equals('YARD'))&#xA;        {&#xA;           if(lkpSlotVal.startsWith('P2A') || lkpSlotVal.startsWith('P29') || lkpSlotVal.startsWith('29Z'))&#xA;          {&#xA;             locationTier = 'T2'&#xA;           }else if(lkpSlotVal.startsWith('WOA')){&#xA;              locationTier = 'T3'&#xA;           }else{&#xA;             locationTier = ''&#xA;          }&#xA;        }&#xA;     }catch(Exception e){&#xA;       e.printStackTrace()&#xA;     }&#xA;   return locationTier&#xA; }&#xA;&#xA;public String getLocationStatus(String lkpLocTypeKy,String lkpCarrId,String transitStateky,Object gvyUtil,String categoryKey,String dischPort)&#xA; {&#xA;   def locationStatus = ''&#xA;   try&#xA;   {&#xA;       if(lkpLocTypeKy.equals('TRUCK') &amp;&amp; transitStateky.equals('S30_ECIN') ){&#xA;            locationStatus='1'&#xA;       }&#xA;       else if(lkpLocTypeKy.equals('TRUCK')){&#xA;             locationStatus='3'&#xA;       }&#xA;       else if(lkpLocTypeKy.equals('YARD')){&#xA;              locationStatus='1'&#xA;       }&#xA;       else if(lkpLocTypeKy.equals('VESSEL'))&#xA;      {&#xA;         if(gvyUtil != null &amp;&amp; gvyUtil.getVesselClassType(lkpCarrId).equals('BARGE')){&#xA;               locationStatus='7'&#xA;          }&#xA;         else if(gvyUtil != null &amp;&amp; gvyUtil.getVesselClassType(lkpCarrId).equals('CELL'))&#xA;         {&#xA;            if(categoryKey.equals('THRGH')){&#xA;                  locationStatus='2'&#xA;            }else if(transitStateky.equals('S60_LOADED') || transitStateky.equals('S70_DEPARTED')){&#xA;                 locationStatus='2'&#xA;            }else if(transitStateky.equals('S20_INBOUND')){&#xA;                 locationStatus='4'&#xA;            }&#xA;         }/*else if (gvyUtil.isNISPort(dischPort)){&#xA;                locationStatus='7'&#xA;         }*/&#xA;&#xA;      }&#xA;&#xA;    }catch(Exception e){&#xA;       e.printStackTrace()&#xA;    }&#xA;    return locationStatus&#xA; }&#xA;&#xA;  public String getLoc(Object gvyUtil,String lkpCarrId, String lkpLocTypeKy,String lkpSlotValue,String transitStateky)&#xA; {&#xA;       def loc = ''&#xA;       if(lkpLocTypeKy.equals('YARD')){&#xA;              loc= lkpSlotValue&#xA;              loc = formatYardPosition(loc) //A1&#xA;       }&#xA;      else if(lkpLocTypeKy.equals('VESSEL'))&#xA;      {&#xA;           if(gvyUtil != null &amp;&amp; gvyUtil.getVesselClassType(lkpCarrId).equals('BARGE'))&#xA;          {&#xA;                loc= 'NIS'&#xA;          }&#xA;      }&#xA;      return loc&#xA;  }&#xA;&#xA;  public String positionPercentageValue(Object gvyTxtMsgFmt){&#xA;&#xA;    def  poistionFieldAttr = ''&#xA;    def loc = '%'&#xA;    def  cell='%'&#xA;    def  locationTier= '%'&#xA;    def locationType =  '%'&#xA;    //LOC&#xA;    def locAttr = gvyTxtMsgFmt.doIt('loc',loc)&#xA;&#xA;    //CELL&#xA;    def cellAttr = gvyTxtMsgFmt.doIt('cell',cell)&#xA;&#xA;    //LOCATION TIER&#xA;   def locationTierAttr = gvyTxtMsgFmt.doIt('locationTier',locationTier)&#xA;&#xA;    //A1 LOCATION STATUS&#xA;    def locationStatusAttr = gvyTxtMsgFmt.doIt('locationStatus',locationType)&#xA;&#xA;    poistionFieldAttr = locAttr+cellAttr+locationTierAttr+locationStatusAttr&#xA;&#xA;    return poistionFieldAttr&#xA;  }&#xA;&#xA;//Format yard position based onyard file&#xA; public String formatYardPosition(String inYardSlot){&#xA;  def binName = inYardSlot;&#xA;  try{&#xA;   int lastDot = inYardSlot.lastIndexOf('.');&#xA;&#xA;   def inFacility = com.navis.argo.ContextHelper.getThreadFacility()&#xA;   //10/20/10 - IF Facility HON Format as per N4yard file Else IF NIS Pass AS-IS&#xA;   if(inFacility != null &amp;&amp; !ContextHelper.getThreadFacility().getFcyId().equals(inFacility.getFcyId())){&#xA;&#x9;   println(&quot;Dont Compute Location as not a &quot;+ContextHelper.getThreadFacility().getFcyId()+&quot; Transaction&quot;)&#xA;&#x9;   return binName;&#xA;   }&#xA;   Yard inYard =  Yard.findYard(&quot;SI&quot;, inFacility)&#xA;   IXpsYardModel yardModel = inYard.getYardModel();&#xA;   if (lastDot &gt; 0) {&#xA;     binName = inYardSlot.substring(0, lastDot);&#xA;   }&#xA;   IXpsYardBin bin = yardModel.getBin(binName);&#xA;   if(bin == null){&#xA;       return binName&#xA;   }&#xA;   IXpsYardBlock yardBlock = bin.getBlock();&#xA;   if(yardBlock != null &amp;&amp; yardBlock.isWheeled()){&#xA;&#x9;   if(binName.length() &gt;=4){&#xA;&#x9;&#x9;   binName = binName.substring(0,3)+' '+binName.substring(3);&#xA;&#x9;   }&#xA;   }else{&#xA;     //println(&quot;yardBlock.getBlockType()------------------------- &quot;+yardBlock.getBlockType())&#xA;&#x9; if(binName.length() &gt; 3 &amp;&amp; yardBlock != null &amp;&amp;&#xA;&#x9;&#x9; (yardBlock.getBlockType()== 13 || yardBlock.getBlockType()== 12 || yardBlock.getBlockType()== 1)){&#xA;        binName = binName.substring(0,2)+' '+binName.substring(2);&#xA;&#x9; }&#xA;   }&#xA; }catch(Exception e){&#xA;    e.printStackTrace()&#xA; }&#xA; return binName&#xA;}&#xA;&#xA; }//Class Ends" />
<digital-asset id="MatReportCmcYard" short-description="MatReportCmcYard" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.road.business.model.*;&#xA;import java.util.Calendar;&#xA;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 04/19/2013&#xA;* Description: This groovy is used to generate the CMC yard report&#xA;*/&#xA;&#xA;public class MatReportCmcYard extends GroovyInjectionBase&#xA;&#x9;{&#xA;&#x9;    private final String  emailFrom = '1aktosdevteam@matson.com';&#xA;&#x9;&#x9;//private final String emailTo = &quot;riyer@matson.com&quot;; &#xA;&#x9;&#x9;private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;def inj = null;&#xA;&#xA;&#x9;public boolean execute(Map params)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;List unitList = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList reportUnitList =  new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitList = getUnits()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;unitList.size()&quot;+unitList.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator unitIterator = unitList.iterator(); &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while(unitIterator.hasNext()) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = unitIterator.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap unitsDataMap = populateUnitData(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(unitsDataMap != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportUnitList.add(unitsDataMap);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList -------------------- :&quot;+ (reportUnitList != null ? reportUnitList.size() : &quot;EMPTY&quot;))   &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//Set Report Parameter&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (reportUnitList.size() &gt; 0) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource ds = new JRMapCollectionDataSource(reportUnitList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap reportDesignsmap = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;CMC YARD REPORT&quot;,ds);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReports(reportDesignsmap,parameters, emailTo, &quot;CMC Yard Report&quot; ,&quot;Attached report for CMC Yard&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList ------- Success&quot;) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList ------- No data to print&quot;) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;public double celsiusToFahrenheit(Double celsius)&#xA;    { &#xA;        double fahr = (celsius * 9/5) + 32;&#xA;        double result = new BigDecimal(&quot;&quot;+fahr).setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue();&#xA;        return result;&#xA;    }&#xA;&#xA;//1.Maps unit Data to report file attribute&#xA;public HashMap populateUnitData(Object unit)&#xA;    {&#xA;        HashMap map = null;&#xA;        try&#xA;        {&#xA;&#x9;&#x9;String equipType =  unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;); &#xA;&#x9;&#x9;String unitId =  unit.unitId; &#xA;&#x9;&#x9;if ((unitId.startsWith(&quot;\$&quot;)) || (equipType.startsWith(&quot;C&quot;)))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;return map;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else{&#xA;&#x9;&#x9;Double tempRequiredC=null;&#xA;&#x9;&#x9;if (unit.getUnitGoods().getGdsReeferRqmnts() != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;tempRequiredC = unit.getUnitGoods().getGdsReeferRqmnts().getRfreqTempRequiredC();&#xA;&#x9;&#x9;&#x9;tempRequiredC = celsiusToFahrenheit(tempRequiredC);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;catch (e)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;null;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;def category = unit.getFieldValue(&quot;unitCategory&quot;);&#xA;&#x9;&#x9;category = category != null ? category.getKey() : '';&#xA;&#x9;&#x9;def transitState = unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;);&#xA;&#x9;&#x9;transitState = transitState != null ? transitState.getKey() : '';&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;transitState = transitState == &quot;S20_INBOUND&quot; ? &quot;InBound&quot; : &quot;Yard&quot;;&#xA;&#xA;&#x9;&#x9;def haz = unit.getFieldValue(&quot;unitGoods.gdsIsHazardous&quot;) ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#x9;&#x9;//println(&quot;Haz ::::::::::::::::::::::::::&quot;+haz);&#xA;&#xA;&#x9;&#x9;map = new HashMap();&#xA;&#xA;        map.put(&quot;UnitNbr&quot;, unit.getFieldValue(&quot;unitId&quot;));  &#xA;        map.put(&quot;Destination&quot;, unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;));&#xA;        map.put(&quot;InboundCarrierId&quot;, unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;));&#xA;        map.put(&quot;OutboundCarrierId&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;));&#xA;&#x9;&#x9;map.put(&quot;Category&quot;,category);&#xA;&#x9;&#x9;map.put(&quot;PositionSlot&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;));&#xA;&#x9;&#x9;map.put(&quot;DateOfLastHandling&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvTimeOfLastMove&quot;));&#xA;&#x9;&#x9;map.put(&quot;GoodsConsigneeName&quot;,unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;));&#xA;&#x9;&#x9;map.put(&quot;UnitRemark&quot;,unit.getFieldValue(&quot;unitRemark&quot;));&#xA;&#x9;&#x9;map.put(&quot;UnitHoldsAndPermissions&quot;,unit.getFieldValue(&quot;unitAppliedHoldOrPermName&quot;));&#xA;&#x9;&#x9;map.put(&quot;TempRequiredInF&quot;,tempRequiredC);&#xA;&#x9;&#x9;map.put(&quot;TransitState&quot;,transitState);&#xA;&#x9;&#x9;map.put(&quot;GrossWeight&quot;,unit.getFieldValue(&quot;unitGoodsAndCtrWtKgLong&quot;));&#xA;&#x9;&#x9;map.put(&quot;UnitFlexString01&quot;,unit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;));&#xA;&#x9;&#x9;map.put(&quot;UnitFlexString02&quot;,haz);&#xA;&#xA;&#x9;&#x9;}&#xA;        }catch(Exception e){&#xA;&#x9;&#x9;println(&quot;Error in the report&quot;)&#xA;          e.printStackTrace();&#xA;            }&#xA;        return map;&#xA;    }&#xA;&#xA;public List getUnits() {&#xA;&#xA;&#x9;&#x9;try {&#xA;&#xA;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#x9;&#xA;&#x9;&#x9;&#x9;//dq.addDqPredicate(PredicateFactory.in(UnitField.UFV_TRANSIT_STATE,&quot;S40_YARD&quot;,&quot;S20_INBOUND&quot;))    &#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.in(UnitField.UFV_TRANSIT_STATE,&quot;S40_YARD&quot;))&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.ne(UnitField.UFV_CATEGORY,&quot;STRGE&quot;))            &#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.in(UnitField.UFV_GDS_DESTINATION,&quot;HON&quot;,&quot;HIL&quot;,&quot;KAH&quot;,&quot;KHI&quot;,&quot;NAW&quot;,&quot;LNI&quot;,&quot;MOL&quot;,&quot;MIX&quot;))&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.in(UnitField.UFV_FREIGHT_KIND,&quot;FCL&quot;));&#xA;&#x9;&#x9;&#x9;//dq.addDqPredicate(PredicateFactory.in(UnitField.UFV_UNIT_ID,&quot;$ARM-HIL&quot;)); &#xA;&#xA;&#x9;&#x9;&#x9;println(&quot;DomainQuery :::: &quot;+ dq);&#xA;&#x9;&#x9;&#x9;def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println(&quot;After unitList&quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;if(unit.getFieldValue(&quot;unitVisitState&quot;).equals(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;units.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;  }&#xA;&#x9;&#x9;&#x9;  println(&quot;unitsSize&quot; + units.size);&#xA;&#x9;&#x9;&#x9;return units;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;}&#xA;}" />
<digital-asset id="MatReportReefers" short-description="MatReportReefers" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.road.business.model.*;&#xA;import java.util.Calendar;&#xA;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 12/28/2012&#xA;* Description: This groovy is used to generate the Reefer report after Stowplan and Manifest process&#xA;*/&#xA;&#xA;public class MatReportReefers extends GroovyInjectionBase&#xA;&#x9;{&#xA;&#xA;&#x9;    private final String  emailFrom = '1aktosdevteam@matson.com'&#xA;&#x9;    //private final String emailTo = &quot;riyer@matson.com&quot;;&#xA;&#x9;&#x9;private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#xA;&#x9;&#x9;private String outBoundCarrierId = null&#xA;&#x9;&#x9;def inj = null;&#xA;&#x9;&#x9;String VesVoy = null;&#xA;&#xA;&#xA;// Retrieves DS Field-Based on freightkindKey,commodityId&#xA;   public String getDs(String freightkindKey,String cmdtyId)&#xA;   {&#xA;      def ds = ''&#xA;      if(cmdtyId.equals('AUTOCON')){&#xA;         ds = 'CON'&#xA;      }else if(cmdtyId.equals('AUTO')){&#xA;         ds = 'AUT'&#xA;      }else if (freightkindKey.equals('FCL') || cmdtyId.equals('AUTOCY')){&#xA;         ds = 'CY'&#xA;      }else{&#xA;         ds = '%'&#xA;      }&#xA;      return ds&#xA;    }&#xA;&#xA;&#x9;public double celsiusToFahrenheit(Double celsius)&#xA;    {&#xA;        double fahr = (celsius * 9/5) + 32;&#xA;        double result = new BigDecimal(&quot;&quot;+fahr).setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue();&#xA;        return result;&#xA;    }&#xA;&#xA;   // Retrieves DIR Field-Based on category &amp; transitState&#xA;&#x9;public  String getDir(String category,String transitState,String freightkindKey, String expGateBkgNbr,String lkpLocType,String gdsBlNbr)&#xA;&#x9;{&#xA;    def dir = ''&#xA;    if(category.equals('EXPRT') &amp;&amp; !freightkindKey.equals('MTY') ){&#xA;      dir='OUT'&#xA;    } else if (category.equals('EXPRT') &amp;&amp; expGateBkgNbr != null){&#xA;      dir='OUT'&#xA;    }else if (category.equals('IMPRT') &amp;&amp; lkpLocType.equals('VESSEL') &amp;&amp; freightkindKey.equals('MTY') &amp;&amp; gdsBlNbr == null){&#xA;      dir = 'MTY'&#xA;    }else if (category.equals('IMPRT')){&#xA;      dir='IN'&#xA;    }else if (category.equals('TRSHP') &amp;&amp; transitState.equals('S20_INBOUND')){&#xA;      dir = 'IN'&#xA;    }else if (category.equals('TRSHP') &amp;&amp; transitState.trim().length() &gt; 0){&#xA;      dir = 'OUT'&#xA;    }else if (category.equals('THRGH') &amp;&amp; !freightkindKey.equals('MTY')){&#xA;      dir = 'OUT'&#xA;    }else{&#xA;      dir = 'MTY'&#xA;    }&#xA;    return dir;&#xA;  }&#xA;&#xA;&#x9;public String getSrv(Object unit)&#xA;&#x9;{&#xA;&#x9;def srv = ''&#xA;&#x9;def vesselLineOptr = ''&#xA;&#x9;try&#xA;&#x9;{&#xA;&#x9;inj = new GroovyInjectionBase();&#xA;    def unitLineOperator=unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOperator.bzuId&quot;)&#xA;    unitLineOperator = unitLineOperator != null ? unitLineOperator : ''&#xA;&#xA;    vesselLineOptr = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqoVesselVisit.cvCvd.vvdBizu.bzuId&quot;)&#xA;    vesselLineOptr = vesselLineOptr != null ? vesselLineOptr : ''&#xA;&#xA;    def intObCarrierMode=unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvCarrierMode&quot;)&#xA;    intObCarrierMode = intObCarrierMode != null ? intObCarrierMode.getKey() : ''&#xA;&#xA;    def dObCarreirmode = unit.getFieldValue(&quot;unitRouting.rtgDeclaredCv.cvCarrierMode&quot;)&#xA;    dObCarreirmode = dObCarreirmode != null ? dObCarreirmode.getKey() : ''&#xA;&#xA;    //Get Equi SRV&#xA;    def unitEquipment = unit.getUnitPrimaryUe()&#xA;    def ueEquipmentState = unitEquipment.getUeEquipmentState()&#xA;    def equipFlex01 = ueEquipmentState != null ? ueEquipmentState.getEqsFlexString01() : ''&#xA;&#xA;    def ObDeclaredVesClassType = unit.getFieldValue(&quot;unitRouting.rtgDeclaredCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;    ObDeclaredVesClassType = ObDeclaredVesClassType != null ? ObDeclaredVesClassType.getKey() : &quot;&quot;&#xA;&#xA;    def intObCarVesType = unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;)&#xA;    intObCarVesType = intObCarVesType != null ? intObCarVesType.getKey() : &quot;&quot;&#xA;&#xA;    def bookingNumber = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;);&#xA;&#xA;    //Equipment Deliver Order Object&#xA;&#xA;&#x9;def gvyEdoObj = inj.getGroovyClassInstance(&quot;GvyCmisEquipmentDeliveryOrder&quot;);&#xA;    def edo = bookingNumber != null ? gvyEdoObj.findEquipmentDeliveryOrder(bookingNumber) : null&#xA;&#xA;    def isVessel =  (intObCarrierMode.equals('VESSEL') || dObCarreirmode.equals('VESSEL')) ? true : false&#xA;    def isBarge = (ObDeclaredVesClassType.equals('BARGE') || intObCarVesType.equals('BARGE')) ? true : false&#xA;    def isLongHaul = (ObDeclaredVesClassType.equals('CELL') || intObCarVesType.equals('CELL')) ? true : false&#xA;&#x9;def isVesLineOperatorMat = vesselLineOptr.equals('MAT') ? true : false&#xA;&#xA;&#x9;//println(&quot;EqFlex01 :&quot;+equipFlex01+&quot; isVessel:&quot;+isVessel+&quot;  isBarge:&quot;+isBarge+&quot;  isLongHaul:&quot;+isLongHaul+&quot;   isVesLineOperatorMat:&quot;+isVesLineOperatorMat)&#xA;&#xA;    if(equipFlex01.equals('MAT')){&#xA;      srv = 'MAT'&#xA;    }else if(edo != null){&#xA;      srv = gvyEdoObj.getEDOLineOperator(edo)&#xA;    }else if(equipFlex01.equals('CLIENT') &amp;&amp; isVessel &amp;&amp; isBarge){&#xA;      srv = 'MAT'&#xA;    }else if (equipFlex01.equals('CLIENT') &amp;&amp; isVessel &amp;&amp; isLongHaul &amp;&amp; isVesLineOperatorMat){&#xA;       srv = 'MAT'&#xA;    }else if(equipFlex01.equals('CLIENT') &amp;&amp; bookingNumber &amp;&amp; isVesLineOperatorMat){&#xA;      srv =  'MAT'&#xA;    }else if(equipFlex01.equals('CLIENT') &amp;&amp; isVessel &amp;&amp; isLongHaul &amp;&amp; !isVesLineOperatorMat){&#xA;      srv =  unitLineOperator&#xA;    }else if(equipFlex01.equals('CLIENT') &amp;&amp; !isVessel){&#xA;       srv =  unitLineOperator&#xA;    }else{&#xA;       srv =  unitLineOperator&#xA;    }&#xA;&#xA;  }catch(Exception e){&#xA;      e.printStackTrace()&#xA;  }&#xA;   return srv&#xA;}&#xA;&#xA;&#xA;  public String processTrade(Object unit, Object srv){&#xA;   def trade=''&#xA;   def loadPort = unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;)&#xA;   def dischargePort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;   def destination = unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;)&#xA;   try{&#xA;   if('MAT'.equals(srv) || 'CRX'.equals(srv)){&#xA;&#xA;&#x9;  if('GUM'.equals(dischargePort)){&#xA;        trade = ports.get(destination)&#xA;      }else {&#xA;        trade =  ports.get(dischargePort)&#xA;      }&#xA;&#xA;&#x9;  if(trade == null){&#xA;&#x9;&#x9;  trade = 'H'&#xA;&#x9;  }&#xA;      def loadPortTrade = ports.get(loadPort)&#xA;&#x9;  if('M'.equals(loadPortTrade)){&#xA;         trade = loadPortTrade&#xA;      }&#xA;   }else{&#xA;&#x9;   trade = 'C'&#xA;   }&#xA;   }catch(Exception e){&#xA;&#x9;   e.printStackTrace();&#xA;   }&#xA;   return trade;&#xA;}&#xA;&#xA;public static Map ports = new HashMap();&#xA;static {&#xA;&#xA;ports.put('AUC','C')&#xA;ports.put('BRI','C')&#xA;ports.put('MEL','C')&#xA;ports.put('NUK','C')&#xA;ports.put('PAP','C')&#xA;ports.put('SFO','C')&#xA;ports.put('SUV','C')&#xA;ports.put('SYD','C')&#xA;ports.put('SYD','C')&#xA;ports.put('WEL','C')&#xA;ports.put('WLG','C')&#xA;ports.put('HAK','F')&#xA;ports.put('KAO','F')&#xA;ports.put('KEEL','F')&#xA;ports.put('KOB','F')&#xA;ports.put('portsH','F')&#xA;ports.put('MOJ','F')&#xA;ports.put('NAH','F')&#xA;ports.put('NGB','F')&#xA;ports.put('NGO','F')&#xA;ports.put('OSA','F')&#xA;ports.put('PUS','F')&#xA;ports.put('SHA','F')&#xA;ports.put('TSI','F')&#xA;ports.put('XMN','F')&#xA;ports.put('YOK','F')&#xA;ports.put('YTN','F')&#xA;ports.put('API','G')&#xA;ports.put('APW','G')&#xA;ports.put('GUM','G')&#xA;ports.put('KMI','G')&#xA;ports.put('PAG','G')&#xA;ports.put('PNP','G')&#xA;ports.put('PPT','G')&#xA;ports.put('PUX','G')&#xA;ports.put('RTA','G')&#xA;ports.put('SPN','G')&#xA;ports.put('TIN','G')&#xA;ports.put('TMGU','G')&#xA;ports.put('UUK','G')&#xA;ports.put('YAP','G')&#xA;ports.put('HIL','H')&#xA;ports.put('HNC','H')&#xA;ports.put('HON','H')&#xA;ports.put('HUHI','H')&#xA;ports.put('KAH','H')&#xA;ports.put('KAHI','H')&#xA;ports.put('KHI','H')&#xA;ports.put('KKHI','H')&#xA;ports.put('LAX','H')&#xA;ports.put('LNI','H')&#xA;ports.put('MIX','H')&#xA;ports.put('MOL','H')&#xA;ports.put('NAW','H')&#xA;ports.put('NAX','H')&#xA;ports.put('OAC','H')&#xA;ports.put('OAK','H')&#xA;ports.put('PCHI','H')&#xA;ports.put('PDX','H')&#xA;ports.put('PRL','H')&#xA;ports.put('RCH','H')&#xA;ports.put('SEA','H')&#xA;ports.put('UEHI','H')&#xA;ports.put('EBY','M')&#xA;ports.put('JIS','M')&#xA;ports.put('KWJ','M')&#xA;ports.put('MAJ','M')&#xA;ports.put('WAK','M')&#xA;}&#xA;&#xA;&#x9;public boolean execute(Map params)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;inj = new GroovyInjectionBase();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList reportUnitList =  new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;List unitList = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;unitList.size()&quot;+unitList.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitList = getUnits()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator unitIterator = unitList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while(unitIterator.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = unitIterator.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap unitsDataMap = populateUnitData(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(unitsDataMap != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportUnitList.add(unitsDataMap);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList -------------------- :&quot;+ (reportUnitList != null ? reportUnitList.size() : &quot;EMPTY&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//Set Report Parameter&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (reportUnitList.size() &gt; 0) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource ds = new JRMapCollectionDataSource(reportUnitList);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap reportDesignsmap = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;REEFER REPORT&quot;,ds);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReports(reportDesignsmap,parameters, emailTo, vesVoy+&quot; Reefer Report&quot; ,&quot;Reefer Report Attached&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList ------- Success&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo, vesVoy+&quot; Reefer Report&quot;,&quot;No reefer units reported&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList ------- No data to print&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public boolean generateReeferReport(List unitList, String vesVoy)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;inj = new GroovyInjectionBase();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList reportUnitList =  new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;unitList.size()&quot;+unitList.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator unitIterator = unitList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while(unitIterator.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = unitIterator.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap unitsDataMap = populateUnitData(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(unitsDataMap != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportUnitList.add(unitsDataMap);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList -------------------- :&quot;+ (reportUnitList != null ? reportUnitList.size() : &quot;EMPTY&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//Set Report Parameter&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (reportUnitList.size() &gt; 0) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource ds = new JRMapCollectionDataSource(reportUnitList);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap reportDesignsmap = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;REEFER REPORT&quot;,ds);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReports(reportDesignsmap,parameters, emailTo, vesVoy+&quot; Reefer Report&quot; ,&quot;Reefer Report Attached&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList ------- Success&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo, vesVoy+&quot; Reefer Report&quot;,&quot;No reefer units reported&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList ------- No data to print&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#xA;//1.Maps unit Data to report file attribute&#xA;public HashMap populateUnitData(Object unit)&#xA;    {&#xA;        HashMap map = null;&#xA;        try&#xA;        {&#xA;&#xA;&#xA;String equipType =  unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;&#xA;if (equipType.startsWith(&quot;R&quot;))&#xA;{&#xA;&#xA;&#x9;Double tempRequiredC=null;&#xA;&#x9;&#x9;if (unit.getUnitGoods().getGdsReeferRqmnts() != null)&#xA;&#x9;{&#xA;&#x9;&#x9;println(&quot;unit.getUnitGoods().getGdsReeferRqmnts():&quot;+unit.getUnitGoods().getGdsReeferRqmnts())&#xA;&#x9;&#x9;tempRequiredC = unit.getUnitGoods().getGdsReeferRqmnts().getRfreqTempRequiredC();&#xA;&#x9;}&#xA;&#xA;&#xA;def transitState = unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;transitState = transitState != null ? transitState.getKey() : ''&#xA;def tState = transitState.split(&quot;_&quot;)&#xA;transitState = tState[1]&#xA;&#xA;Date ADate = unit.unitCreateTime;&#xA;Date currDate = new Date();&#xA;&#xA;DateFormat formatter = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);&#xA;formatter.setTimeZone(TimeZone.getTimeZone(&quot;HST&quot;));&#xA;&#xA;String date = formatter.format(ADate).substring(0,10);&#xA;String time = formatter.format(ADate).substring(11,19);&#xA;&#xA;String currHour = formatter.format(currDate).substring(11,19);&#xA;&#xA;String cmdtyId = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;String freightkind = unit.unitFreightKind.getKey();&#xA;def ds = getDs(freightkind,cmdtyId);&#xA;&#xA;def _freightkind=unit.getFieldValue(&quot;unitFreightKind&quot;)&#xA;def freightkindKey = _freightkind != null ? _freightkind.getKey() : ''&#xA;&#xA;def _category=unit.getFieldValue(&quot;unitCategory&quot;)&#xA;def categoryKey = _category != null ? _category.getKey() : ''&#xA;&#xA;def _transitState=unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;def transitStatekey = _transitState != null ? _transitState.getKey() : ''&#xA;&#xA;def lkpSlot=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;lkpSlot = lkpSlot != null ? lkpSlot : ''&#xA;&#xA;def expGateBkgNbr = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;)&#xA;&#xA;def lkpLocType=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;lkpLocType = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;&#xA;def gdsBlNbr = unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;)&#xA;&#xA;def dir =  getDir(categoryKey,transitStatekey,freightkindKey,expGateBkgNbr,lkpLocType,gdsBlNbr)&#xA;&#xA;def Srv = getSrv(unit)&#xA;&#x9;def trade = processTrade(unit,Srv)&#xA;&#xA;&#x9;&#x9;map = new HashMap();&#xA;&#xA;        map.put(&quot;UnitNbr&quot;, unit.getFieldValue(&quot;unitId&quot;));&#xA;&#x9;&#x9;map.put(&quot;TempRequiredInF&quot;, tempRequiredC); // TempRequiredInF&#xA;&#x9;&#x9;map.put(&quot;LineOperator&quot;,unit.getFieldValue(&quot;unitLineOperator.bzuId&quot;));//LineOperator&#xA;&#x9;&#x9;map.put(&quot;UfvFlexString01&quot;, dir); // DIR&#xA;&#x9;&#x9;map.put(&quot;TransitState&quot;, transitState); // Transit State&#xA;&#x9;&#x9;map.put(&quot;PositionSlot&quot;, unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;));//Position Slot&#xA;&#x9;&#x9;map.put(&quot;POD&quot;,unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;));&#xA;&#x9;&#x9;map.put(&quot;InboundCarrierId&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;));//Inbound Vessel&#xA;&#x9;&#x9;map.put(&quot;GoodsConsigneeName&quot;,unit.getFieldValue(&quot;unitGoods.gdsConsigneeAsString&quot;))//Consignee&#xA;&#x9;&#x9;map.put(&quot;UnitRemark&quot;,unit.getFieldValue(&quot;unitRemark&quot;))//Unit Remarks&#xA;&#x9;&#x9;map.put(&quot;UfvFlexString02&quot;,ds) // DS&#xA;&#x9;&#x9;map.put(&quot;UfvFlexString03&quot;,unit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;))//Trucking Co&#xA;&#x9;&#x9;map.put(&quot;UfvFlexString04&quot;,trade)//Trade&#xA;&#x9;&#x9;map.put(&quot;EquipmentType&quot;,equipType)//EquipmentType&#xA;&#x9;&#x9;map.put(&quot;EquipmentOwner&quot;,unit.unitPrimaryUe.ueEquipmentState.eqsEqOwner.bzuId)//EquipmentOwner&#xA;&#x9;&#x9;map.put(&quot;UfvFlexString05&quot;,unit.getFieldValue(&quot;unitRouting.rtgReturnToLocation&quot;))//RET Port&#xA;&#x9;&#x9;map.put(&quot;OutboundCarrierId&quot;, unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;)); //Outbound Vessel&#xA;        map.put(&quot;GoodsShipperName&quot;,unit.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuName&quot;))//Shipper Name&#xA;&#x9;&#x9;map.put(&quot;UfvFlexString06&quot;,&quot;ADD&quot;)//ACTION&#xA;&#x9;&#x9;map.put(&quot;UfvFlexString07&quot;,date)//&#xA;&#x9;&#x9;map.put(&quot;UfvFlexString08&quot;,time)//&#xA;&#x9;&#x9;map.put(&quot;UfvFlexString09&quot;,currHour)//&#xA;&#xA;}&#xA;&#xA;        }catch(Exception e){&#xA;&#x9;&#x9;println(&quot;Error iin the report&quot;)&#xA;          e.printStackTrace();&#xA;            }&#xA;        return map;&#xA;    }&#xA;&#xA;&#xA;&#x9;public List getReportUnits(String vesVoy)&#xA;&#x9;&#x9;   {&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;println(&quot;Inside getReportUnits&quot;);&#xA;&#x9;&#x9;&#x9;def id = vesVoy;//&quot;HUG294&quot; // This will be removed when it call automatically after Manifest/Stow process&#xA;&#x9;&#x9;&#x9;//def id = &quot;HUG294&quot; // This will be removed when it call automatically after Manifest/Stow process&#xA;&#x9;&#x9;&#x9;VesVoy = id;&#xA;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;  dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID,id)).addDqPredicate(PredicateFactory.eq(UnitField.UFV_POD_ID,&quot;HON&quot;));&#xA;&#x9;&#x9;&#x9;  println(dq);&#xA;&#x9;&#x9;&#x9;  def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;  println(&quot;After unitList&quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;  if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;&#x9; Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9; while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; if(unit.getFieldValue(&quot;unitVisitState&quot;).equals(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; units.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;  }&#xA;&#x9;&#x9;&#x9;  println(&quot;unitsSize&quot; + units.size);&#xA;&#x9;&#x9;&#x9;return units;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;   }&#xA;&#xA;public List getUnits()&#xA;&#x9;&#x9;   {&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9; println(&quot;Inside getUnits&quot;);&#xA;&#x9;&#x9;&#x9;def id = &quot;HZB323&quot;//&quot;HUG294&quot; // This will be removed when it call automatically after Manifest/Stow process&#xA;&#x9;&#x9;&#x9;VesVoy = id;&#xA;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;  dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, id)).addDqPredicate(PredicateFactory.eq(UnitField.UFV_POD_ID,&quot;HON&quot;));&#xA;&#x9;&#x9;&#x9;  println(dq);&#xA;&#x9;&#x9;&#x9;  def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;  println(&quot;After unitList&quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;  if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;&#x9; Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9; while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; if(unit.getFieldValue(&quot;unitVisitState&quot;).equals(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; units.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;  }&#xA;&#x9;&#x9;&#x9;  println(&quot;unitsSize&quot; + units.size);&#xA;&#x9;&#x9;&#x9;return units;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;   }&#xA;&#xA;&#x9;&#x9;}" />
<digital-asset id="MATProcessUnitUpdatesFromStowPlan" short-description="MATProcessUnitUpdatesFromStowPlan" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.atoms.DataSourceEnum&#xA;import com.navis.argo.business.atoms.FreightKindEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.model.Facility&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.inventory.business.api.RectifyParms&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import org.apache.log4j.Logger&#xA;&#xA;/*&#xA;&#xA;AUTHOR: Siva Raja&#xA;Date Written: 06/04/2012&#xA;Description: Updates Unit details based on Stow plan posting through EDI.&#xA;This groovy is triggered from UNIT_PROPERTY_UPDATE general notices.&#xA;&#xA; */&#xA;&#xA;public class MATProcessUnitUpdatesFromStowPlan extends GroovyApi {&#xA;&#xA;  UserContext context = ContextHelper.getThreadUserContext();&#xA;  Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#xA;  private static final String maeOperator = &quot;MAE&quot;;&#xA;  private static final String mskOperator = &quot;MSK&quot;;&#xA;  private static final String anlEquipOwner = &quot;ANL&quot;;&#xA;  private static final String anlcEquipOwner = &quot;ANLC&quot;;&#xA;  private static final String appendString = &quot;U&quot;;&#xA;  private static final String client = &quot;CLIENT&quot;;&#xA;  private static final String honFacility = &quot;HON&quot;;&#xA;  private static final String optFacility = &quot;OPT&quot;;&#xA;  private static final String ediEvent = &quot;TESTGROOVY&quot;;&#xA;  private static final String unitEvent = &quot;UNIT_ACTIVATE&quot;;&#xA;&#xA;  List&lt;String&gt; MARSHALL_ISLAND_DEST = new ArrayList&lt;String&gt;();&#xA;  {&#xA;    MARSHALL_ISLAND_DEST.add(&quot;EBY&quot;);&#xA;    MARSHALL_ISLAND_DEST.add(&quot;JIS&quot;);&#xA;    MARSHALL_ISLAND_DEST.add(&quot;KWJ&quot;);&#xA;    MARSHALL_ISLAND_DEST.add(&quot;MAJ&quot;);&#xA;    MARSHALL_ISLAND_DEST.add(&quot;WAK&quot;);&#xA;  }&#xA;  List&lt;String&gt; GUAM_PORTS = new ArrayList&lt;String&gt;();&#xA;  {&#xA;    GUAM_PORTS.add(&quot;API&quot;);&#xA;    GUAM_PORTS.add(&quot;GUM&quot;);&#xA;    GUAM_PORTS.add(&quot;KMI&quot;);&#xA;    GUAM_PORTS.add(&quot;PAG&quot;);&#xA;    GUAM_PORTS.add(&quot;PNP&quot;);&#xA;    GUAM_PORTS.add(&quot;PPT&quot;);&#xA;    GUAM_PORTS.add(&quot;PUX&quot;);&#xA;    GUAM_PORTS.add(&quot;RTA&quot;);&#xA;    GUAM_PORTS.add(&quot;SPN&quot;);&#xA;    GUAM_PORTS.add(&quot;TIN&quot;);&#xA;    GUAM_PORTS.add(&quot;TMGU&quot;);&#xA;    GUAM_PORTS.add(&quot;UUK&quot;);&#xA;    GUAM_PORTS.add(&quot;YAP&quot;);&#xA;  }&#xA;&#xA;  List&lt;String&gt; NIS_PORTS = new ArrayList&lt;String&gt;();&#xA;  {&#xA;    NIS_PORTS.add(&quot;HIL&quot;);&#xA;  }&#xA;&#xA;  public void execute(GroovyEvent event, Object api){&#xA;&#xA;    LOGGER.warn(&quot;MATProcessUnitUpdatesFromStowPlan Started !&quot; + timeNow);&#xA;    Unit unit = (Unit) event.getEntity();&#xA;    LOGGER.warn(&quot;unit:&quot; + unit);&#xA;    Event evnt = event.getEvent();&#xA;    String eventId = evnt.getEventTypeId();&#xA;    LOGGER.warn(&quot;Event:&quot; + eventId);&#xA;    boolean process = false;&#xA;    if (unit != null){&#xA;      //If the event is from processing the EDI stow plan process the unit updates&#xA;      UnitFacilityVisit ufv = this.findUfv(unit);&#xA;      if (eventId.equals(ediEvent))&#xA;      {&#xA;        process = true;&#xA;      }&#xA;      // If the event is from UNIT_ACTIVATE, then confirm that the unit has a valid stow position and then process the unit updates.&#xA;      // We are doing this here because when new units are created using stowplan event is not getting recorded. May be a N4 2.1 issue.&#xA;      // When we upgrade to 2.2 and higher Positing should be changed to LocPosition&#xA;      if (eventId.equals(unitEvent))&#xA;      {&#xA;        LocTypeEnum currentPositionType = null;&#xA;        if (ufv != null) {&#xA;          currentPositionType = ufv.getUfvLastKnownPosition().getPosLocType();&#xA;        }&#xA;        if (currentPositionType.equals(LocTypeEnum.VESSEL)){&#xA;             process = true;&#xA;        }&#xA;      }&#xA;    LOGGER.warn(&quot;process:&quot; + process.toString());&#xA;    if (process.toString() == &quot;true&quot;) {&#xA;         this.updateUfvProperties (unit);&#xA;         this.updateContainerProperties(unit);&#xA;         this.updateUnitProperties(unit);&#xA;    }&#xA;  }&#xA;    LOGGER.warn(&quot;MATProcessUnitUpdatesFromStowPlan Ended !&quot; + timeNow);&#xA;  }&#xA;&#xA;  private UnitFacilityVisit findUfv(Unit inUnit) {&#xA;    UnitFacilityVisit ufv;&#xA;    Facility fcy = Facility.findFacility(honFacility) ;&#xA;    if (fcy != null){&#xA;      ufv = inUnit.getUfvForFacilityNewest(fcy);&#xA;    }&#xA;    return ufv;&#xA;  }&#xA;&#xA;  // this method is used to update Unit Facility Visit&#xA;  private void updateUfvProperties (Unit inUnit){&#xA;    UnitFacilityVisit inUfv = this.findUfv(inUnit);&#xA;    // Set transit state to inbound irrespective of Vessel Visit transit state.&#xA;    if (inUfv != null){&#xA;      RectifyParms parms = new RectifyParms();&#xA;      parms.setUfvTransitState(UfvTransitStateEnum.S20_INBOUND);&#xA;      try{&#xA;        inUfv.rectify(parms);&#xA;        LOGGER.warn (&quot;Unit Facility Visit rectified&quot;);&#xA;      } catch (Exception e) {&#xA;        LOGGER.warn(&quot;Rectify Failed&quot; + e);&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;//this method is used to update equipment and container properties.&#xA;&#xA;  private void updateContainerProperties(Unit inUnit){&#xA;&#xA;    Equipment inEq = inUnit.getPrimaryEq();&#xA;    if (inEq != null){&#xA;      UnitEquipment ue = inUnit.getUnitPrimaryUe();&#xA;      EquipmentState eqs = ue.getUeEquipmentState();&#xA;      // Set equipment flex string 01 to &quot;CLIENT&quot; for each container attached to the bill of lading.&#xA;      try{&#xA;        eqs.setEqsFlexString01(client);&#xA;      } catch (Exception e){&#xA;        LOGGER.warn(&quot; Error in updating the Equipment Flex String &quot; + e);&#xA;      }&#xA;&#xA;&#xA;      // If the Equipment Operator = MSK set the Equipment Operator = MAE&#xA;      String  equipOperator = inEq.getEquipmentOperatorId();&#xA;      ScopedBizUnit eqMaeOperator = ScopedBizUnit.findEquipmentOperator(maeOperator);&#xA;      if (equipOperator.equals(mskOperator)) {&#xA;        try {&#xA;          eqs.upgradeEquipmentOperator(eqMaeOperator,DataSourceEnum.EDI_STOW);&#xA;        } catch (Exception e){&#xA;          LOGGER.warn(&quot; Error in updating the Equipment Operator for MAE &quot; + e);&#xA;        }&#xA;      }&#xA;      // &quot;If equipoperator = ANL then set equipowner = ANLC else equipowner = equipoperator+”U” &quot;&#xA;      LOGGER.warn (&quot; equipment owner :&quot; + inEq.equipmentOwnerId);&#xA;      ScopedBizUnit equipmentAnlOwner = ScopedBizUnit.findEquipmentOwner(anlcEquipOwner) ;&#xA;      if (equipOperator.equals(anlEquipOwner))&#xA;      {&#xA;        try {&#xA;          eqs.upgradeEquipmentOwner(equipmentAnlOwner,DataSourceEnum.EDI_MNFST);&#xA;        } catch (Exception e){&#xA;          LOGGER.warn(&quot; Error in updating the Equipment Operator for ANL &quot; + e);&#xA;        }&#xA;      }&#xA;      else {&#xA;        String equipmentOwnerString = equipOperator + appendString;&#xA;        ScopedBizUnit equipmentOwner = ScopedBizUnit.findEquipmentOwner(equipmentOwnerString);&#xA;        try {&#xA;          eqs.upgradeEquipmentOwner(equipmentOwner,DataSourceEnum.EDI_STOW);&#xA;        } catch (Exception e){&#xA;          LOGGER.warn(&quot; Error in updating the Equipment Operator &quot; + equipmentOwnerString + &quot;   &quot; + e);&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;  private void updateUnitProperties (Unit inUnit){&#xA;&#xA;    //If the BL Number is null then update BL number with hard coded text&#xA;    GoodsBase goods = inUnit.getUnitGoods();&#xA;    String blNbr =  goods.getGdsBlNbr();&#xA;    if (blNbr == null){&#xA;      // Update the Unit Notes with hard coded text&#xA;      try{&#xA;        inUnit.updateRemarks(&quot;Stowplan Data&quot;);&#xA;        goods.setGdsBlNbr(&quot;DO NOT EDIT - WAIT FOR NEWVESS&quot;);&#xA;      } catch (Exception e){&#xA;        LOGGER.warn(&quot;Unable to update commodity description &quot; + e);&#xA;      }&#xA;&#xA;    }&#xA;     //If discharge port is not HON then set Unit Category to Through&#xA;    RoutingPoint point = inUnit.getUnitRouting().getRtgPOD1();&#xA;    String disc = point.getPointId();&#xA;&#xA;    if (!disc.equals(honFacility)){&#xA;      inUnit.updateCategory(UnitCategoryEnum.THROUGH);&#xA;    }&#xA;    //If Unit Freight Kind is MTY and the Discharge port is HON then Unit Category to Import&#xA;    if ((FreightKindEnum.MTY.equals(inUnit.getUnitFreightKind())) &amp;&amp; (disc.equals(honFacility))){&#xA;      inUnit.updateCategory(UnitCategoryEnum.IMPORT);&#xA;    }&#xA;    //If Unit Freight Kind is MTY and the Discharge port is OPT then Unit Category to Import&#xA;    if ((FreightKindEnum.MTY.equals(inUnit.getUnitFreightKind())) &amp;&amp; (disc.equals(optFacility))){&#xA;      inUnit.updateCategory(UnitCategoryEnum.IMPORT);&#xA;    }&#xA;    //if unit destination is Marshal Islands port (EBY, JIS, KWJ, MAJ, WAK)&#xA;    //then set category = TRANSSHIP&#xA;    //if unit destination is Guam port (API, GUM, KMI, PAG, PNP, PPT, PUX, RTA, SPN, TIN, TMGU, UUK, YAP)&#xA;    //then set category = TRANSSHIP&#xA;    // if unit destination is NIS ports (HIL)&#xA;    // then set the unit pod1 as the destination routing point.&#xA;&#xA;    String destination = inUnit.getUnitGoods().getGdsDestination();&#xA;&#xA;    if (!destination.equals(null)){&#xA;      if (MARSHALL_ISLAND_DEST.contains(destination)){&#xA;        inUnit.updateCategory(UnitCategoryEnum.TRANSSHIP);&#xA;      }&#xA;      if (GUAM_PORTS.contains(destination)){&#xA;        inUnit.updateCategory(UnitCategoryEnum.TRANSSHIP);&#xA;      }&#xA;      if (NIS_PORTS.contains(destination)){&#xA;        RoutingPoint destPoint = RoutingPoint.findRoutingPoint(destination);&#xA;        if (!destPoint.equals(null)){&#xA;          inUnit.getUnitRouting().setRtgPOD1(destPoint);&#xA;        }&#xA;      }&#xA;    }&#xA;&#xA;  }&#xA;  private static final Logger LOGGER = Logger.getLogger(MATProcessUnitUpdatesFromStowPlan.class);&#xA;}&#xA;" />
<digital-asset id="MatUpdateWithManifestData" short-description="MatUpdateWithManifestData" is-pre-deployed="N" groovy-code="import org.apache.xmlbeans.XmlObject&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.cargo.business.model.BillOfLading&#xA;import com.navis.cargo.business.model.BlGoodsBl&#xA;import com.navis.cargo.business.model.GoodsBl&#xA;import org.apache.log4j.Logger;&#xA;import com.navis.cargo.business.model.BlItem&#xA;&#xA;import org.apache.commons.lang.StringUtils&#xA;&#xA;import com.navis.argo.ArgoBizMetafield&#xA;import com.navis.argo.ArgoField&#xA;import com.navis.argo.BlTransactionDocument&#xA;import com.navis.argo.BlTransactionDocument.BlTransaction&#xA;import com.navis.argo.BlTransactionsDocument&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.EdiBlItem&#xA;import com.navis.argo.EdiCommodity&#xA;import com.navis.argo.EdiFacility&#xA;import com.navis.argo.EdiVesselVisit&#xA;import com.navis.argo.EdiBlEquipment&#xA;import com.navis.argo.EdiContainer&#xA;import com.navis.argo.Temperature&#xA;import com.navis.argo.Port&#xA;import com.navis.argo.PortCodes&#xA;import com.navis.argo.ShippingLine&#xA;import com.navis.argo.business.api.ArgoEdiUtils&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.argo.business.atoms.CarrierDirectionEnum&#xA;import com.navis.argo.business.atoms.DataSourceEnum&#xA;import com.navis.argo.business.atoms.FreightKindEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.model.Complex&#xA;import com.navis.argo.business.model.Facility&#xA;import com.navis.argo.business.reference.Commodity&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.business.reference.LineOperator&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.external.edi.entity.AbstractEdiPostInterceptor&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.persistence.HibernatingEntity&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.inventory.business.api.RectifyParms&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.services.business.api.EventManager&#xA;import com.navis.services.business.rules.EventType&#xA;import com.navis.vessel.VesselEntity&#xA;import com.navis.vessel.VesselField&#xA;import com.navis.vessel.VesselPropertyKeys&#xA;import com.navis.vessel.business.operation.Vessel&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.road.business.model.TruckingCompany&#xA;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.inventory.InventoryEntity;&#xA;import com.navis.inventory.business.api.UnitField;&#xA;import com.navis.argo.ArgoRefField;&#xA;import com.navis.argo.business.reference.RoutingPoint;&#xA;import com.navis.argo.business.reference.UnLocCode;&#xA;import com.navis.framework.portal.query.ObsoletableFilterFactory;&#xA;&#xA;import com.navis.argo.business.model.GeneralReference;&#xA;&#xA;import java.text.DecimalFormat;&#xA;import java.sql.Connection;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 06/05/2013&#xA;* Description: This groovy is used to conditionally update existing (Baplie) unit values with manifest data.&#xA;*/&#xA;&#xA;public class MatUpdateWithManifestData extends GroovyInjectionBase&#xA;{ &#xA;&#x9;private static String loadPortCode = &quot;&quot;;&#xA;&#x9;private static String vesVoy=&quot;&quot;;&#xA;&#x9;private static String unitNbr = &quot;&quot;;&#xA;&#x9;private static String unitTypeCode = &quot;&quot;;&#xA;&#x9;private static String unitSealNbr = &quot;&quot;;&#xA;&#x9;private static String unitGrossWt = &quot;&quot;;&#xA;&#x9;private static String unitTareWt = &quot;&quot;;&#xA;&#x9;private static String unitPrefTemp = &quot;&quot;;&#xA;&#x9;private static String unitLoadPort = &quot;&quot;;&#xA;&#x9;private static String unitLoadPortId = &quot;&quot;;&#xA;&#x9;private static String unitVesVoy = &quot;&quot;;&#xA;&#x9;private static String checkVes = &quot;&quot;;&#xA;&#x9;private static String lloydsId = &quot;&quot;;&#xA;&#x9;private static String ibVoyage = &quot;&quot;;&#xA;&#x9;private static String sendAlert = &quot;N&quot;;&#xA;&#x9;private static String honFacility = &quot;HON&quot;;&#xA;&#x9;private static String ediLoadPort = &quot;&quot;;&#xA;&#xA;&#x9;private static String container = &quot;&quot;;&#xA;&#x9;private static String typeCode = &quot;&quot;;&#xA;&#x9;private static String sealNbr = &quot;&quot;;&#xA;&#x9;private static String grossWt = &quot;&quot;;&#xA;&#x9;private static String tareWt = &quot;&quot;;&#xA;&#x9;private static String prefTemp = &quot;&quot;;&#xA;&#x9;private static String portIdConvention;&#xA;&#xA;&#x9;private static String retTypeCode = &quot;&quot;;&#xA;&#x9;private static String retSealNbr = &quot;&quot;;&#xA;&#x9;private static String retGrossWt = &quot;&quot;;&#xA;&#x9;private static String retTareWt = &quot;&quot;;&#xA;&#x9;private static String retVesVoy=&quot;&quot;;&#xA;&#x9;private static String retPrefTemp = &quot;&quot;;&#xA;&#x9;private static String repVesVoy = &quot;&quot;;&#xA;&#xA;&#x9;DecimalFormat df = new DecimalFormat(&quot;#.##&quot;);&#xA;&#xA;&#x9;private final String  emailFrom = '1aktosdevteam@matson.com'&#xA;&#x9;private final String emailTo = &quot;1Tosdevteamhon@gmail.com&quot;;&#xA;&#xA;  &#x9;def inj = new GroovyInjectionBase();&#xA;&#xA;&#xA;private void updateManifestData(XmlObject inXmlObject) {&#xA;&#x9;LOGGER.warn(&quot;updateManifestData Start&quot;);&#xA;    BlTransactionsDocument blDocument = (BlTransactionsDocument) inXmlObject;&#xA;    final BlTransactionsDocument.BlTransactions bltrans = blDocument.getBlTransactions();&#xA;    final BlTransactionDocument.BlTransaction[] bltransArray = bltrans.getBlTransactionArray();&#xA;    final BlTransactionDocument.BlTransaction blTran = bltransArray[0];&#xA;&#xA;    Port loadPort = blTran.getLoadPort();&#xA;&#x9;EdiVesselVisit ediVesselVisit = blTran.getEdiVesselVisit();&#xA;&#x9;CarrierVisit cv = this.getVesselVisit(blTran);&#xA;&#x9;if (cv != null) {&#xA;&#x9;&#x9;vesVoy = cv;&#xA;&#x9;}&#xA;&#xA;    List&lt;BlTransaction.EdiBlItemHolder&gt; blItems = blTran.getEdiBlItemHolderList();&#xA;    if (!blItems.isEmpty()) {&#xA;      for (int i = 0; i &lt; blTran.getEdiBlItemHolderArray().length; i++) {&#xA;        BlTransaction.EdiBlItemHolder ediBlItemHolder = blTran.getEdiBlItemHolderArray(i);&#xA;&#x9;&#x9;this.getContainer(ediBlItemHolder.getEdiBlEquipmentArray(),loadPort,ediVesselVisit);&#xA;      }&#xA;    }&#xA;    LOGGER.warn(&quot;updateManifestData Start&quot;);&#xA;  }&#xA;&#xA;private void getContainer(EdiBlEquipment[] inEdiBlItemArray,Port loadPort,EdiVesselVisit ediVesselVisit) {&#xA;&#x9;try {&#xA;&#x9;&#x9;List unitList = null;&#xA;      &#x9;GeneralReference generalReference = new GeneralReference();&#xA;      &#x9;for (int i = 0; i &lt; inEdiBlItemArray.length; i++)&#xA;      &#x9;{&#xA;        &#x9;EdiBlEquipment ediBlEquipment = inEdiBlItemArray[i];&#xA;&#xA;&#x9;&#x9;&#x9;EdiContainer ediContainer = ediBlEquipment.getEdiContainer();&#xA;        &#x9;Temperature temperature = ediContainer.getTemperature();&#xA;&#x9;&#x9;&#x9;ediLoadPort = &quot;&quot;&#xA;&#x9;&#x9;&#x9;prefTemp = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;container = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;typeCode = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;sealNbr = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;grossWt = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;tareWt = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;retTypeCode = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;retSealNbr = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;retGrossWt = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;retTareWt = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;retVesVoy=&quot;&quot;;&#xA;&#x9;&#x9;&#x9;retPrefTemp = &quot;&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;if (ediContainer!= null){&#xA;&#x9;&#x9;&#x9;&#x9;container = ediContainer.getContainerNbr();&#xA;&#x9;&#x9;&#x9;&#x9;typeCode = ediContainer.getContainerISOcode();&#xA;&#x9;&#x9;&#x9;&#x9;sealNbr = ediContainer.getContainerSealNumber1();&#xA;&#x9;&#x9;&#x9;&#x9;grossWt = ediContainer.getContainerGrossWt();&#xA;&#x9;&#x9;&#x9;&#x9;tareWt = ediContainer.getContainerTareWt();&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (loadPort != null){&#xA;&#x9;&#x9;&#x9;&#x9;loadPortCode = loadPort.getPortId();&#xA;&#x9;&#x9;&#x9;&#x9;portIdConvention = loadPort.getPortIdConvention();&#xA;&#x9;&#x9;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;RoutingPoint rtg = this.resolveRoutingPointFromEncoding(portIdConvention,loadPortCode);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ediLoadPort = rtg.getPointId();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;::::RoutingPoint:::::&quot;+loadPortCode);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;catch (e)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;::::RoutingPoint:::::&quot;+e);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (temperature != null){&#xA;&#x9;&#x9;&#x9;&#x9;prefTemp = temperature.getPreferredTemperature();&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;println(&quot;InputediContainer:::::::&quot;+container);&#xA;&#x9;&#x9;&#x9;unitList = this.getUnit(container);&#xA;&#x9;&#x9;&#x9;if (unitList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitNbr = unit.getFieldValue(&quot;unitId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitTypeCode = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitSealNbr = unit.getFieldValue(&quot;unitSealNbr1&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitGrossWt = unit.getFieldValue(&quot;unitGoodsAndCtrWtKg&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitTareWt = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqTareWeightKg&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (unit.getUnitGoods().getGdsReeferRqmnts() != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitPrefTemp = unit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempRequiredC&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitLoadPortId = unit.getFieldValue(&quot;unitRouting.rtgPOL.pointScheduleKCode&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitLoadPort = unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitVesVoy = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;repVesVoy = unitVesVoy;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (unitVesVoy != null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;checkVes = unitVesVoy.substring(0,3);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;lloydsId = this.getLloydsId(checkVes);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;} // End of while&#xA;&#xA;&#x9;&#x9;&#x9;String valueRetained = &quot;&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;println(&quot;StartedBuilding 1&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;if (unitTypeCode != typeCode){&#xA;&#x9;&#x9;&#x9;&#x9;sendAlert = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;valueRetained = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;if (unitTypeCode != null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;valueRetained = unitTypeCode;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ediContainer.setContainerISOcode(unitTypeCode);&#xA;&#x9;&#x9;&#x9;&#x9;}else{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;valueRetained = typeCode;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;retTypeCode = valueRetained;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;unitTypeCode = null;&#xA;&#x9;&#x9;&#x9;&#x9;typeCode = null;&#xA;&#x9;&#x9;&#x9;&#x9;retTypeCode = null;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Started building 2&quot;);&#xA;&#x9;&#x9;&#x9;if (unitSealNbr != sealNbr){&#xA;&#x9;&#x9;&#x9;&#x9;sendAlert = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;valueRetained = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;if (unitSealNbr != null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;valueRetained = unitSealNbr;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ediContainer.setContainerSealNumber1(unitSealNbr);&#xA;&#x9;&#x9;&#x9;&#x9;}else{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;valueRetained = sealNbr;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;retSealNbr = valueRetained;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;unitSealNbr = null;&#xA;&#x9;&#x9;&#x9;&#x9;sealNbr = null;&#xA;&#x9;&#x9;&#x9;&#x9;retSealNbr = null;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Started building 3 &quot;+unitTareWt+&quot;:::&quot;+tareWt);&#xA;&#x9;&#x9;&#x9;if ((unitTareWt==null||unitTareWt==&quot;&quot; ? &quot;0.0&quot; : Double.parseDouble(unitTareWt)) != (tareWt==null ||tareWt==&quot;&quot; ? &quot;0.0&quot; : Double.parseDouble(tareWt))){&#xA;&#x9;&#x9;&#x9;&#x9;sendAlert = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Inside Started building 3&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;valueRetained = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;if (unitTareWt != null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;valueRetained = unitTareWt;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ediContainer.setContainerTareWt(unitTareWt);&#xA;&#x9;&#x9;&#x9;&#x9;}else{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;valueRetained = tareWt;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;tareWt = tareWt==null || tareWt==&quot;&quot; ? &quot;0.0&quot; : tareWt;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;def storeUnitTareWt = Double.valueOf(df.format(Double.parseDouble(unitTareWt)));&#xA;&#x9;&#x9;&#x9;&#x9;def storeTareWt = Double.valueOf(df.format(Double.parseDouble(tareWt)));&#xA;&#x9;&#x9;&#x9;&#x9;def storeRetainedTareWt = Double.valueOf(df.format(Double.parseDouble(valueRetained)));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;unitTareWt = storeUnitTareWt.toString();&#xA;&#x9;&#x9;&#x9;&#x9;tareWt = storeTareWt.toString();&#xA;&#x9;&#x9;&#x9;&#x9;retTareWt = storeRetainedTareWt.toString();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;unitTareWt = null;&#xA;&#x9;&#x9;&#x9;&#x9;tareWt = null;&#xA;&#x9;&#x9;&#x9;&#x9;retTareWt = null;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Started building 4&quot;);&#xA;&#x9;&#x9;&#x9;if ((unitGrossWt==null||unitGrossWt==&quot;&quot; ? &quot;0.0&quot; : Double.parseDouble(unitGrossWt)) != (grossWt==null||grossWt==&quot;&quot; ? &quot;0.0&quot; : Double.parseDouble(grossWt))){&#xA;&#x9;&#x9;&#x9;&#x9;sendAlert = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;valueRetained = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;if (unitGrossWt != null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;valueRetained = unitGrossWt;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ediContainer.setContainerGrossWt(unitGrossWt)&#xA;&#x9;&#x9;&#x9;&#x9;}else{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;valueRetained = grossWt;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;grossWt = grossWt==null || grossWt==&quot;&quot; ? &quot;0.0&quot; : grossWt;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;def storeUnitGrossWt = Double.valueOf(df.format(Double.parseDouble(unitGrossWt)));&#xA;&#x9;&#x9;&#x9;&#x9;def storeRetainedGrossWt = Double.valueOf(df.format(Double.parseDouble(valueRetained)))&#xA;&#x9;&#x9;&#x9;&#x9;unitGrossWt = storeUnitGrossWt.toString();&#xA;&#x9;&#x9;&#x9;&#x9;retGrossWt = storeRetainedGrossWt.toString();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;unitGrossWt = null;&#xA;&#x9;&#x9;&#x9;&#x9;grossWt = null;&#xA;&#x9;&#x9;&#x9;&#x9;retGrossWt = null;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Started building 5 &quot; + unitPrefTemp + &quot;::&quot;+prefTemp);&#xA;&#x9;&#x9;&#x9;if ((unitPrefTemp==null || unitPrefTemp==&quot;&quot;? &quot;0.0&quot; : Double.parseDouble(unitPrefTemp)) != (prefTemp==null || prefTemp==&quot;&quot;? &quot;0.0&quot; : Double.parseDouble(prefTemp))){&#xA;&#x9;&#x9;&#x9;&#x9;sendAlert = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;valueRetained = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;if (unitPrefTemp != null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;valueRetained = unitPrefTemp;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;temperature.setPreferredTemperature(unitPrefTemp);&#xA;&#x9;&#x9;&#x9;&#x9;}else{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;valueRetained = prefTemp;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;def storeUnitPrefTemp = Double.valueOf(df.format(Double.parseDouble(unitPrefTemp)));&#xA;&#x9;&#x9;&#x9;&#x9;def storePrefTemp = Double.valueOf(df.format(Double.parseDouble(prefTemp)));&#xA;&#x9;&#x9;&#x9;&#x9;def storeRetainedPrefTemp = Double.valueOf(df.format(Double.parseDouble(valueRetained)));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;unitPrefTemp = storeUnitPrefTemp.toString();&#xA;&#x9;&#x9;&#x9;&#x9;prefTemp = storePrefTemp.toString();&#xA;&#x9;&#x9;&#x9;&#x9;retPrefTemp = storeRetainedPrefTemp.toString();&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;retPrefTempValue::::&quot;+retPrefTemp+&quot;::&quot;+storeRetainedPrefTemp);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;unitPrefTemp = null;&#xA;&#x9;&#x9;&#x9;&#x9;prefTemp = null;&#xA;&#x9;&#x9;&#x9;&#x9;retPrefTemp = null;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Started building 6&quot;);&#xA;&#x9;&#x9;&#x9;if (unitVesVoy != vesVoy){&#xA;&#x9;&#x9;&#x9;&#x9;sendAlert = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;valueRetained = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;if (unitLoadPortId != null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;valueRetained = unitVesVoy;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ediVesselVisit.setVesselId(lloydsId);&#xA;&#x9;&#x9;&#x9;&#x9;}else{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;valueRetained = vesVoy;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;retVesVoy = valueRetained;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;unitVesVoy = null;&#xA;&#x9;&#x9;&#x9;&#x9;vesVoy = null;&#xA;&#x9;&#x9;&#x9;&#x9;retVesVoy = null;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;EmailediContainerTest:::::::&quot;+container);&#xA;&#xA;&#x9;&#x9;&#x9;if (sendAlert == &quot;Y&quot;) {&#xA;&#x9;&#x9;&#x9;&#x9;def GvyRefDataLookup = inj.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;Connection conn;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Inserting data for :::&quot;+ unitNbr);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;conn = GvyRefDataLookup.connect();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;BaplieValuesCheck:::&quot; + unitTypeCode+&quot; :: &quot;+unitSealNbr+&quot; :: &quot;+unitPrefTemp+&quot; :: &quot;+unitTareWt+&quot; :: &quot;+unitGrossWt+&quot; :: &quot;+unitVesVoy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;GvyRefDataLookup.insertDiscrepancy(repVesVoy,&quot;BAPLIE&quot;,unitNbr,unitTypeCode,unitSealNbr,unitPrefTemp,unitTareWt,unitGrossWt,unitVesVoy,conn);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;conn = GvyRefDataLookup.connect();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;ManifestValues:::&quot; + typeCode+&quot; :: &quot;+sealNbr+&quot; :: &quot;+prefTemp+&quot; :: &quot;+tareWt+&quot; :: &quot;+grossWt+&quot; :: &quot;+vesVoy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;GvyRefDataLookup.insertDiscrepancy(repVesVoy,&quot;MANIFEST&quot;,unitNbr,typeCode,sealNbr,prefTemp,tareWt,grossWt,vesVoy,conn);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;conn = GvyRefDataLookup.connect();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;RetainedValues:::&quot; + retTypeCode+&quot; :: &quot;+retSealNbr+&quot; :: &quot;+retPrefTemp+&quot; :: &quot;+retTareWt+&quot; :: &quot;+retGrossWt+&quot; :: &quot;+retVesVoy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;GvyRefDataLookup.insertDiscrepancy(repVesVoy,&quot;RETAINED&quot;,unitNbr,retTypeCode,retSealNbr,retPrefTemp,retTareWt,retGrossWt,retVesVoy,conn);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;GvyRefDataLookup.deleteGenRefData Calling&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//GvyRefDataLookup.disconnect(conn);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;GvyRefDataLookup.insertDiscrepancy Ended with errors :: &quot; +  e);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}// End of sendAlert&#xA;&#x9;&#x9;}// End unitList IF&#xA;&#x9;}// End of For loop&#xA;&#x9;}&#xA;      catch (e){&#xA;      println(&quot;Error in getContainer for conatiner &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+e);&#xA;      }&#xA;  }&#xA;public List getUnit(String unitNbr)&#xA;&#x9;{&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;).addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID, unitNbr));&#xA;&#x9;&#x9;&#x9;def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;After unitList&quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(unit.getFieldValue(&quot;unitVisitState&quot;).equals(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;units.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;  }&#xA;&#x9;&#x9;&#x9;return units;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  LOGGER.warn(e.getMessage());&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;public static RoutingPoint resolveRoutingPointFromEncoding(String inEncodingScheme, String inCode)&#xA;  {&#xA;    RoutingPoint point;&#xA;    if (&quot;UNLOCCODE&quot;.equals(inEncodingScheme)) {&#xA;      point = resolveRoutingPointFromUnLoc(inCode);&#xA;    } else {&#xA;      DomainQuery dq = QueryUtils.createDomainQuery(&quot;RoutingPoint&quot;);&#xA;      if (&quot;SCHED_D&quot;.equals(inEncodingScheme))&#xA;        dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.POINT_SCHEDULE_D_CODE, inCode));&#xA;      else if (&quot;SCHED_K&quot;.equals(inEncodingScheme)) {&#xA;        dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.POINT_SCHEDULE_K_CODE, inCode));&#xA;      }&#xA;      else if (&quot;SPLC&quot;.equals(inEncodingScheme))&#xA;        dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.POINT_SPLC_CODE, inCode));&#xA;      else if (&quot;PORT_CODE&quot;.equals(inEncodingScheme))&#xA;        dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.POINT_ID, inCode));&#xA;      else {&#xA;        return resolveRoutingPointFromPortCode(inCode);&#xA;      }&#xA;&#xA;      dq.setFilter(ObsoletableFilterFactory.createShowActiveFilter());&#xA;      point = (RoutingPoint)HibernateApi.getInstance().getUniqueEntityByDomainQuery(dq);&#xA;    }&#xA;    return point;&#xA;  }&#xA;&#xA;  public static RoutingPoint resolveRoutingPointFromUnLoc(String inUnLocCode)&#xA;  {&#xA;    RoutingPoint routingPoint = null;&#xA;&#xA;    UnLocCode un = UnLocCode.findUnLocCode(inUnLocCode);&#xA;    if (un != null)&#xA;    {&#xA;      MetafieldId pointUnLocId = MetafieldIdFactory.getCompoundMetafieldId(ArgoRefField.POINT_UN_LOC, ArgoRefField.UNLOC_ID);&#xA;      DomainQuery dq = QueryUtils.createDomainQuery(&quot;RoutingPoint&quot;).addDqPredicate(PredicateFactory.eq(pointUnLocId, inUnLocCode));&#xA;&#xA;      dq.setFilter(ObsoletableFilterFactory.createShowActiveFilter());&#xA;      List points = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#xA;      if (points.size() == 1)&#xA;      {&#xA;        routingPoint = (RoutingPoint)points.get(0);&#xA;      } else if (points.isEmpty())&#xA;      {&#xA;        routingPoint = findOrCreateRoutingPoint(un.getUnlocPlaceCode(), inUnLocCode);&#xA;      }&#xA;      else&#xA;      {&#xA;        for (Iterator iterator = points.iterator(); iterator.hasNext(); ) {&#xA;          RoutingPoint rp = (RoutingPoint)iterator.next();&#xA;          if (StringUtils.equals(rp.getPointId(), un.getUnlocPlaceCode()))&#xA;            routingPoint = rp;&#xA;&#xA;        }&#xA;&#xA;        if (routingPoint == null) {&#xA;          routingPoint = (RoutingPoint)points.get(0);&#xA;          LOGGER.warn(&quot;resolveRoutingPoint: guessing routing point &lt;&quot; + routingPoint.getPointId() + &quot;&gt; for &lt;&quot; + inUnLocCode + &quot;&gt;&quot;);&#xA;        }&#xA;      }&#xA;&#xA;    }&#xA;&#xA;    if (routingPoint == null)&#xA;      LOGGER.info(&quot;resolveRoutingPointFromUnLoc: could not resolve UnLoc code &lt;&quot; + inUnLocCode + &quot;&gt;&quot;);&#xA;&#xA;    return routingPoint;&#xA;  }&#xA;&#xA;  public static RoutingPoint resolveRoutingPointFromPortCode(String inPortCode)&#xA;  {&#xA;    RoutingPoint routingPoint = findRoutingPoint(inPortCode);&#xA;&#xA;    if (routingPoint == null)&#xA;    {&#xA;      DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnLocCode&quot;).addDqPredicate(PredicateFactory.eq(ArgoRefField.UNLOC_PLACE_CODE, inPortCode)).addDqPredicate(PredicateFactory.eq(ArgoRefField.UNLOC_IS_PORT, Boolean.TRUE));&#xA;&#xA;      List uns = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#xA;      if (!(uns.isEmpty())) {&#xA;        UnLocCode un = (UnLocCode)uns.get(0);&#xA;        routingPoint = findOrCreateRoutingPoint(un.getUnlocPlaceCode(), un.getUnlocId());&#xA;        if (uns.size() &gt; 1)&#xA;          LOGGER.warn(&quot;resolveRoutingPoint: guessed routing point &lt;&quot; + routingPoint.getPointId() + &quot;&gt; is for &lt;&quot; + un.getUnlocId() + &quot;&gt;&quot;);&#xA;&#xA;      }&#xA;      else if ((inPortCode != null) &amp;&amp; (inPortCode.length() == 3)) {&#xA;        routingPoint = findOrCreateRoutingPoint(inPortCode, &quot;XXXXX&quot;);&#xA;        LOGGER.warn(&quot;resolveRoutingPoint: could not find a UnLoc for &lt;&quot; + routingPoint.getPointId() + &quot;&gt;&quot;);&#xA;      }&#xA;    }&#xA;&#xA;    if (routingPoint == null)&#xA;      LOGGER.warn(&quot;resolveRoutingPoint: could not resolve location code &lt;&quot; + inPortCode + &quot;&gt;&quot;);&#xA;&#xA;    return routingPoint;&#xA;  }&#xA;&#xA;private CarrierVisit getVesselVisit(BlTransaction inBlTrans) {&#xA;&#xA;    String vesselOperatorId = null;&#xA;    String vesselOperatorIdAgency = null;&#xA;    EdiVesselVisit vesselVisit = inBlTrans.getEdiVesselVisit();&#xA;    if (vesselVisit != null) {&#xA;      if (vesselVisit.getShippingLine() != null) {&#xA;        vesselOperatorId = vesselVisit.getShippingLine().getShippingLineCode();&#xA;        vesselOperatorIdAgency = vesselVisit.getShippingLine().getShippingLineCodeAgency();&#xA;      }&#xA;    }&#xA;    ScopedBizUnit vesselOperator = ScopedBizUnit.resolveScopedBizUnit(vesselOperatorId, vesselOperatorIdAgency, BizRoleEnum.LINEOP);&#xA;    LineOperator line = LineOperator.resolveLineOprFromScopedBizUnit(vesselOperator);&#xA;    CarrierVisit cv = this.findVesselVisit(inBlTrans.getEdiVesselVisit(), inBlTrans.getDischargeFacility(), line);&#xA;    if (cv == null) {&#xA;      LOGGER.warn(&quot;Vessel Visit is Null and Not found&quot;);&#xA;    }else {&#xA;      LOGGER.warn(&quot;Vessel Visit is:&quot;+ cv);&#xA;    }&#xA;    return cv;&#xA;&#xA;  }&#xA;&#xA;private CarrierVisit findVesselVisit(EdiVesselVisit inEdiVesselVisit, EdiFacility inEdiFacility, LineOperator inLine) {&#xA;&#xA;    LOGGER.warn (&quot; in find Vessel visit:&quot;);&#xA;    CarrierVisit cv;&#xA;    Complex complex = ContextHelper.getThreadComplex();&#xA;    if (complex == null) {&#xA;      LOGGER.warn(&quot;Complex is Null&quot;);&#xA;      return;&#xA;    }&#xA;    if (inEdiFacility == null) {&#xA;      LOGGER.warn(&quot;Facility is Null&quot;);&#xA;      return;&#xA;    }&#xA;    String vvConvention = inEdiVesselVisit.getVesselIdConvention();&#xA;    String vvId = inEdiVesselVisit.getVesselId();&#xA;    String vvName = inEdiVesselVisit.getVesselName();&#xA;    String vygNbr;&#xA;    vygNbr = inEdiVesselVisit.getInVoyageNbr();&#xA;    try {&#xA;      cv = ArgoEdiUtils.findVesselVisit(inEdiVesselVisit);&#xA;      LOGGER.warn(&quot;value of cv:&quot; + cv.toString());&#xA;    } catch (BizViolation inBv) {&#xA;      LOGGER.warn(&quot; Carrier Visit Not Found &quot; + inBv);&#xA;    }&#xA;&#xA;    RoutingPoint discPoint = RoutingPoint.findRoutingPoint(honFacility);&#xA;    if (cv == null){&#xA;       cv = this.findVesselVisitForInboundStow(complex, vvConvention, vvId, vygNbr,discPoint,inLine);&#xA;  }&#xA;    LOGGER.warn(&quot; foundCv:&quot; + cv);&#xA;    return cv;&#xA;  }&#xA;&#xA;  public CarrierVisit findVesselVisitForInboundStow(Complex inComplex,&#xA;                                                      String inIdConvention, String inId, String inInboundVoyage,&#xA;                                                      RoutingPoint inPoint, LineOperator inLineOperator) throws BizViolation&#xA;    {&#xA;&#xA;      Facility fcy = Facility.findFacility(honFacility) ;&#xA;      List vvdList = this.findVvdList(inIdConvention, inId, inComplex, fcy, inInboundVoyage, true, inLineOperator);&#xA;      CarrierVisit foundCv = null;&#xA;      VesselVisitDetails vvd = null;&#xA;      int size = vvdList.size();&#xA;&#xA;      LOGGER.warn (&quot;vvdList size:&quot; + size);&#xA;      String lineVoyageNbr = &quot;&quot;;&#xA;      if (size == 0) {&#xA;        LOGGER.warn(VesselPropertyKeys.VVFINDER_CAN_NOT_RESOLVE_VISIT);&#xA;        return null;&#xA;      }&#xA;&#xA;        for (int i = 0; i &lt; vvdList.size(); i++){&#xA;          vvd =  (VesselVisitDetails) vvdList.get(i);&#xA;          lineVoyageNbr = vvd.getCarrierLineVoyNbrOrTrainId(inLineOperator,CarrierDirectionEnum.IB);&#xA;          ibVoyage = vvd.vvdIbVygNbr;&#xA;          LOGGER.warn(&quot;ibVoyage&quot;+ibVoyage);&#xA;          if (lineVoyageNbr.equals(inInboundVoyage)){&#xA;             foundCv = vvd.getCvdCv();&#xA;          }&#xA;        }&#xA;      LOGGER.warn(&quot; foundCv:&quot; + foundCv+&quot;::::&quot;+ibVoyage);&#xA;      return foundCv;&#xA;&#x9;}&#xA;&#xA;private List findVvdList(String inIdConvention, String inId, Complex inComplex, Facility inFacility, String inVoyage, boolean inIsInbound,&#xA;                           LineOperator inOperator) throws BizViolation {&#xA;&#xA;    Vessel vessel = Vessel.findVesselByEncoding(inId, inIdConvention);&#xA;    if (vessel == null) {&#xA;     LOGGER.warn (&quot; Vessel is null&quot;);&#xA;     return null;&#xA;    }&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(VesselEntity.VESSEL_VISIT_DETAILS)&#xA;            .addDqPredicate(PredicateFactory.eq(VVD_COMPLEX, inComplex.getCpxGkey()))&#xA;            .addDqPredicate(PredicateFactory.eq(VesselField.VVD_VESSEL, vessel.getVesGkey()));&#xA;&#xA;      List vvdList =  HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#xA;      return vvdList;&#xA;}&#xA;&#xA;private String getLloydsId(String vesId) throws BizViolation {&#xA;&#x9;String lloydsId = &quot;&quot;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(&quot;Vessel&quot;)&#xA;            .addDqPredicate(PredicateFactory.eq(VesselField.VES_ID, vesId));&#xA;&#x9;LOGGER.warn(&quot;getLloydsId&quot;+dq);&#xA;&#x9;List vvdList =  HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;LOGGER.warn(&quot;getLloydsId&quot;+dq);&#xA;&#x9;try{&#xA;&#x9;if (vvdList.size() == 0) {&#xA;&#x9;        return null;&#xA;&#x9;}&#xA;&#x9;Iterator iter = vvdList.iterator();&#xA;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;def vessel = iter.next();&#xA;&#x9;&#x9;lloydsId = vessel.vesLloydsId;&#xA;&#x9;}&#xA;}&#xA;catch(e){&#xA;&#x9;LOGGER.warn(&quot;lloydsId::&quot;+e);&#xA;}&#xA;&#x9;LOGGER.warn(&quot;lloydsId::&quot;+lloydsId);&#xA;&#x9;return lloydsId;&#xA;}&#xA;&#xA;&#x9;private static final Logger LOGGER = Logger.getLogger(MatUpdateWithManifestData.class);&#xA;}" />
<digital-asset id="GvyCmisEventPassPass" short-description="GvyCmisEventPassPass" is-pre-deployed="N" groovy-code="public class GvyCmisEventPassPass&#xA;{&#xA;   //Method Post Pass Pass Assign (OTR) Msg&#xA;   public void passpassAssignOtr(String xmlData,Object gvyBaseClass)&#xA;   {&#xA;     def xmlGvyString = xmlData&#xA;     def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;); &#xA;     gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,&quot;PDU&quot;)&#xA;   }&#xA;   &#xA;   //Method Post Pass Pass Assign (SHOW) Msg&#xA;   public void passpassAssignShow(String xmlData,Object gvyBaseClass)&#xA;   {&#xA;      def xmlGvyString = xmlData&#xA;      def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;); &#xA;      gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,&quot;PDU&quot;)&#xA;   }&#xA;   &#xA;   //Method Post Pass Pass UNAssign Msg&#xA;   public void passpassUnAssign(String xmlData,Object gvyBaseClass)&#xA;   {&#xA;     def xmlGvyString = xmlData&#xA;     def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;); &#xA;     //plan Disp gets set in Rtg method &#xA;     //gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;planDisp=&quot;,&quot;null&quot;)&#xA;     gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,&quot;PDD&quot;)&#xA;   }&#xA;&#xA;}" />
<digital-asset id="GvyCmisProcessEditFlag" short-description="GvyCmisProcessEditFlag" is-pre-deployed="N" groovy-code="/*&#xA;*  Srno  Changer Date        Desc&#xA;*  A1    GR      08/09/10    Added Supplemental Check for EditFlag Update  &#xA;*  A2    GR      11/23/10    Commented print Statement  &#xA;*  A3    GR      01/05/11    Newves Fix After Adding Direct posting EDT/BDC to Gems  &#xA;*  A4    GR      09/02/11    SIT unassign to set misc2=S&#xA;*/&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.reference.Shipper&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import java.text.SimpleDateFormat;&#xA;&#xA;public class GvyCmisProcessEditFlag {&#xA;&#xA;public String processEditFlag(Object event, String eventType, Object unit, Object gvyBaseClass)&#xA;{&#xA; //MISC2 Field &#xA; def editFlag = ''&#xA;&#xA; try&#xA; {&#xA;    def gvyEvnt = event.getEvent()&#xA;&#x9;def eventNotes = gvyEvnt.getEventNote()&#xA;    eventNotes = eventNotes != null ? eventNotes : ''&#xA;&#xA;     //Get Flag value  //A3 - Newves Fix After Adding Direct posting EDT/BDC to Gems &#xA;     editFlag = unit.getUnitFlexString11();&#xA;&#x9; if(eventNotes != null &amp;&amp; (eventNotes.startsWith('Supplemental') || eventNotes.startsWith('NewVes') || eventNotes.startsWith('NIS Load'))){&#xA;&#x9;&#x9; return editFlag;&#xA;     }&#xA;    &#xA;     Map fieldMap = getEditFieldMap(); &#xA;     &#xA;      //Reads and Maps Event Updated Field value&#xA;     def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;); &#xA;     Map mapEvntFld = gvyEventUtil.eventFieldChangedValues(event, gvyBaseClass)&#xA;&#xA;      //Read Fields and stores values into StringBuffer Objects for processing&#xA;     editFlag = readEventChangedFields(mapEvntFld, fieldMap, event, editFlag) &#xA;     editFlag = processEventEditFlag(eventType, editFlag);&#xA;&#xA;  }catch(Exception e){&#xA;      e.printStackTrace()&#xA;  }&#xA;  return editFlag&#xA;&#xA;}&#xA;&#xA;&#xA;// Set's EditFlag for Hold/Release Events&#x9;&#xA;public static String processEventEditFlag(String eventType, String editFlagVal)&#xA;{&#xA;  String editFlagHld = ''&#xA;  try&#xA; {&#xA;    editFlagHld = editFlagVal;&#xA;&#x9;&#xA;    if(eventType.equals(&quot;HP_HOLD&quot;) || eventType.equals(&quot;HP_RELEASE&quot;)&#xA;       ||eventType.equals(&quot;CC_HOLD&quot;) || eventType.equals(&quot;CC_RELEASE&quot;))&#xA;    {&#xA;      editFlagHld = appendValue(editFlagHld,&quot;M&quot;);&#xA;     }&#xA;     else if(eventType.equals(&quot;AG_HOLD&quot;) || eventType.equals(&quot;AG_RELEASE&quot;) &#xA;&#x9;   || eventType.equals(&quot;XT_HOLD&quot;) || eventType.equals(&quot;XT_RELEASE&quot;))&#xA;     {&#xA;        editFlagHld = appendValue(editFlagHld,&quot;A&quot;);&#xA;      }&#xA;      else if(eventType.equals(&quot;INB_HOLD&quot;) || eventType.equals(&quot;INB_RELEASE&quot;) &#xA;&#x9;|| eventType.equals(&quot;CUS_HOLD&quot;) || eventType.equals(&quot;CUS_RELEASE&quot;))&#xA;     {&#xA;        editFlagHld  = appendValue(editFlagHld,&quot;B&quot;); &#xA;      }&#xA;      else if(eventType.equals(&quot;ON_HOLD&quot;) || eventType.equals(&quot;ON_RELEASE&quot;))&#xA;     {&#xA;       editFlagHld = appendValue(editFlagHld,&quot;O&quot;); &#xA;     }&#xA;   }catch(Exception e){&#xA;      e.printStackTrace()&#xA;   }&#xA;   return editFlagHld;&#xA;}&#xA;&#xA;//Appends EditFlag value from the Right (10Char max)&#x9;&#xA;public static String appendValue(String edtFlag, String fldEditFlag)&#xA;{   &#xA;  String editFlagValue = &quot;&quot;;&#xA;  try&#xA;  {&#xA;     if(edtFlag != null &amp;&amp; edtFlag.length() == 10){&#xA;       String stripFirstChar = edtFlag.substring(1, edtFlag.length());&#xA;       editFlagValue = stripFirstChar+fldEditFlag;&#xA;        //A2- println('editFlagValue=:::'+editFlagValue+' stripFirstChar :'+stripFirstChar+'    fldEditFlag:'+fldEditFlag) &#xA;     }else{&#xA;         if(edtFlag == null || edtFlag.trim().length() == 0){&#x9;&#xA;             editFlagValue = fldEditFlag;&#xA;             //A2- println('editFlagValue IF :::'+editFlagValue+'   fldEditFlag:::'+fldEditFlag)&#xA;         }else{&#xA;            editFlagValue = edtFlag+fldEditFlag;&#x9;&#xA;          //A2- println('editFlagValue ELSE :::'+editFlagValue+'   fldEditFlag:::'+fldEditFlag)&#xA;         }&#xA;      }&#xA;   }catch(Exception e){&#xA;      e.printStackTrace()&#xA;   }&#xA;   //A2 - println('editFlagValue :::'+editFlagValue)&#xA;  return editFlagValue; &#xA;}&#xA;&#xA;&#xA; public Map getEditFieldMap(){&#xA;&#xA;     Map fieldMap = new HashMap();&#xA;     fieldMap.put(&quot;gdsConsigneeAsString&quot;, &quot;C&quot;); fieldMap.put(&quot;gdsDestination&quot;,&quot;P&quot;);&#xA;     fieldMap.put(&quot;unitFreightKind&quot;,&quot;D&quot;); fieldMap.put(&quot;gdsCommodity&quot;,&quot;D&quot;);&#xA;     fieldMap.put(&quot;unitDrayStatus&quot;,&quot;S&quot;); fieldMap.put(&quot;unitRemark&quot;,&quot;R&quot;);&#xA;     fieldMap.put(&quot;gdsBlNbr&quot;,&quot;K&quot;);&#xA;     fieldMap.put(&quot;gdsConsigneeBzu&quot;, &quot;C&quot;);  // Added for non-BuiltIn Evnts&#xA;     &#xA;     // Added for avail Dates.&#xA;     fieldMap.put(&quot;ufvFlexDate02&quot;,&quot;X&quot;);&#xA;&#xA;     //Added for Release To party&#xA;     fieldMap.put(&quot;unitFlexString02&quot;,&quot;C&quot;);&#xA;&#xA;     return fieldMap&#xA; }&#xA;&#xA;&#xA;   /*&#xA;   * Method reads the Updated field values from the object  &#xA;   * and stores the values in a string buffer for processing&#xA;   */&#xA;   public String readEventChangedFields(Object mapEvntField, Object fieldMap,Object event, String editFlagVal)&#xA;   {&#xA;      def processFlag = false;&#xA;      def fldvalue = &quot;&quot;;&#xA;     def editFlagFld = editFlagVal;&#xA;      try&#xA;      {&#xA;        Iterator it = mapEvntField.keySet().iterator();&#xA;        while (it.hasNext()) &#xA;        {&#xA;             def aField = it.next();&#xA;             if(fieldMap.get(aField) == null) { &#xA;                  continue;&#xA;             }&#xA;&#xA;              //Fetch Field Map : Key,Value &#xA;             fldvalue = fieldMap.get(aField) &#xA;&#xA;             //Fetch Event Updated Field : current and Previous value  &#xA;             def aEvntFieldObj = mapEvntField.get(aField)    &#xA;             def fieldname = aEvntFieldObj.getFieldName()&#xA;             def previousValue = aEvntFieldObj.getpreviousValue()&#xA;              previousValue = previousValue != null ? previousValue : ''&#xA;             def currentValue = aEvntFieldObj.getCurrentValue()&#xA;             currentValue = currentValue != null ? currentValue : ''  &#xA;&#xA;             //println('TEST ---- aField :'+aField+'    fldvalue:'+fldvalue+'  fieldname ::'+fieldname+'  previousValue::'+previousValue+'   currentValue::'+currentValue)&#xA;             //Validating Field Change and Setting Edit Flag &#xA;             if(!currentValue.equals(previousValue))&#xA;             {&#xA;                 if(aField.equals(&quot;gdsCommodity&quot;) &amp;&amp; currentValue.equals(&quot;AUTOMOBILE&quot;) || currentValue.equals(&quot;AUTO&quot;)){&#xA;                    editFlagFld = appendValue(editFlagFld,fldvalue);&#xA;                 }&#xA;                 else if(aField.equals(&quot;unitDrayStatus&quot;) &amp;&amp; (currentValue.equals(&quot;DRAYIN&quot;) || currentValue.equals(&quot;OFFSITE&quot;) || currentValue.equals(&quot;Dray Out and Back&quot;) || previousValue.equals(&quot;OFFSITE&quot;) || previousValue.equals(&quot;Dray Out and Back&quot;))){&#xA;                   editFlagFld = appendValue(editFlagFld,fldvalue);&#xA;                 }&#xA;                 else if (!(aField.equals(&quot;gdsCommodity&quot;) || aField.equals(&quot;unitDrayStatus&quot;)))&#xA;                 {&#xA;                    editFlagFld = appendValue(editFlagFld,fldvalue);&#xA;                 }&#x9; &#xA;             }//Inner If&#xA;         }//While Ends&#xA;     }catch(Exception e){&#xA;        e.printStackTrace()&#xA;     }&#xA;&#x9;return editFlagFld;&#xA;   }//Method readEventChangedFields Ends&#xA;&#xA;&#xA;}" />
<digital-asset id="GvyOldConsignee" short-description="GvyOldConsignee" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.framework.persistence.HibernateApi; &#xA;import com.navis.services.business.event.EventFieldChange;&#xA;&#xA;public class GvyOldConsignee {&#xA;&#xA;public String doIt(Object event)    &#xA;{&#xA;  println(&quot;In Class GvyOldCosignee.doIt() !!!!!!!!!!!!!&quot;)&#xA;  &#xA;  //Calling Msg Formater class&#xA;  def gvyBaseClass = new GroovyInjectionBase();&#xA;&#xA;  //Get OBJECT&#xA;  Object unitObj = event.getEntity();&#xA;&#xA;  def eventBase = event.getEvent();&#xA;  println(&quot;Changes=&quot;+eventBase.getEvntFieldChanges());&#xA;&#xA;  Iterator i1 = eventBase.getEvntFieldChanges().iterator();&#xA;&#xA;   String id;&#xA;   while(i1.hasNext()) {&#xA;       def efc = (EventFieldChange)i1.next();&#xA;       def name = efc.getEvntfcMetafieldId();&#xA;       def value = efc.getPrevVal();&#xA;       println(&quot;name=&quot;+name+&quot; value=&quot;+value);   &#xA;       println(efc.dump());&#xA;    }&#xA;            &#xA;&#xA;  &#xA;  // Test&#xA;  def current  =  unitObj.getFieldValue(&quot;unitGoods.gdsConsigneeAsString&quot;)&#xA;  println(&quot;CurrentConsignee= &quot;+current);&#xA;  def result1 = event.wasFieldChanged(&quot;GoodsConsignee&quot;)&#xA;  def result2 = event.getPreviousPropertyAsString(&quot;GoodsConsigneeName&quot;);&#xA;  def result3 = event.getPreviousPropertyAsString(&quot;GoodsConsigneeRef&quot;);&#xA;   def prevc = event.getPreviousPropertyAsString(&quot;GoodsConsignee&quot;);&#xA;   if(result1) {&#xA;      &#xA;      HibernateApi api = HibernateApi.getInstance();&#xA;      ScopedBizUnit biz = api.get(ScopedBizUnit.class, Long.valueOf(prevc));&#xA;      def prevCosignee = biz.getBzuName();&#xA;      println(&quot;Previous Consignee = &quot;+prevCosignee+&quot; id=&quot;+prevc+&quot; &quot;+result2+&quot; &quot;+result3);&#xA;      return prevCosignee;&#xA;   } else {&#xA;      println(&quot;No Change&quot;);&#xA;   }&#xA;&#xA;   println(event.dump());&#xA;   return null;&#xA;}&#xA;}" />
<digital-asset id="GvyCmisUtil" short-description="GvyCmisUtil" is-pre-deployed="N" groovy-code="/*&#xA;* Srno   Doer  Date      Change&#xA;* A1     GR    06/21/10  Added Email Notification for JMS Posting Error&#xA;* A2     GR    07/09/10  Method to Customize Field on Actions&#xA;* A3     GR    07/12/10  Added Null Check before Overriding the Field value&#xA;* A4     GR    07/16/10  Dont catch errros submit to Intergation Errors&#xA;* A5     GR    09/08/10  Trimmed HoldId and HoldId mapping&#xA;* A6     GR    10/09/10  Gems : Add Method to Handle vesvoy fields(Cell &amp; Barge)&#xA;* A7     GR    10/09/10  Gems : BDC-FREE For Gems&#xA;* A8     GR    11/01/10  Gems : AVL on OBcarrier updt to set value to NULL&#xA;* A9     GR    11/01/10  Gems : RHN set Actual ves,voy,leg&#xA;* A10    GR    11/30/10  Adding the JMS Error Email and Resubmitting the msg to integration Errors.&#xA;* A11    GR    12/09/10  Handel westcoastload &amp; blank ports for AVL-leg computation&#xA;* A12    GR    12/09/10  AVL remove Obcarrier Field Check on AVL compute for all AVL's&#xA;* A13    GR    12/09/10  DONT post AVL for BARGE&#xA;* A14    GR    03/07/11  Method to Set carrier OutboudId&#xA;* A15    GR    03/10/11  Rectify unit State Method&#xA;* A16    GR    04/20/11  Added Method to Fetch Unit Groovy event Object&#xA;* A17    GR    06/08/11  Added Generic Code to set Vesvoy leg&#xA;* A18    GR    07/18/11  Added OBClassType in RHN Event&#xA;* 08/16/11 2.1 Updated Email Method&#xA;* A19    LC    09/12/12  Added condition for GEN_TRUCK, set Obcarrier to TRUCK&#xA;* A20    RI    02/27/14  Added method to capture Integration error&#xA;*/&#xA;import com.navis.vessel.business.operation.VesselClass&#xA;import com.navis.vessel.business.operation.VesselClassHbr&#xA;import com.navis.vessel.business.atoms.VesselTypeEnum&#xA;&#xA;import com.navis.argo.business.api.ArgoRoadManager&#xA;import com.navis.argo.business.api.ITruckVisitDetails&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.argo.business.api.*;&#xA;import com.navis.framework.business.*;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.model.CarrierVisit;&#xA;import com.navis.inventory.business.api.RectifyParms;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.framework.portal.UserContext;&#xA;&#xA;import com.navis.services.business.rules.EventType&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.api.EventManager&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.framework.persistence.HibernateApi&#xA;&#xA;&#xA;public class GvyCmisUtil {&#xA;&#xA;    private static final String emailTo = '1aktosdevteam@matson.com'&#xA;    private static final String emailfrom = '1aktosdevteam@matson.com'&#xA;&#xA;    def inj = new GroovyInjectionBase();&#xA;&#xA;&#xA;///Method Returns the true/false based on validity of the units load port and dischararge port&#xA;//Method Takes Input unit and event&#xA;    boolean checkValidUnitSendEmail(Object event, Object unit)&#xA;    {&#xA;        def returnFlag = true;&#xA;        def dischargePort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;        def loadPort = unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;)&#xA;        def unitDetails = inj.getGroovyClassInstance(&quot;GvyCmisDataProcessor&quot;)&#xA;        def unitDtl = unitDetails.doIt(event)&#xA;        def gvyLoadObj = inj.getGroovyClassInstance(&quot;GvyCmisEventUnitLoad&quot;);&#xA;        String outMsg = gvyLoadObj.getLoadedEquipClassMsg(unitDtl,event,inj);&#xA;        dischargePort  = getActualFieldValues(outMsg, &quot;dischargePort=&quot;)&#xA;        loadPort = getActualFieldValues(outMsg, &quot;loadPort=&quot;)&#xA;        dischargePort = dischargePort != null ? dischargePort.trim().toLowerCase() : null;&#xA;        loadPort = loadPort != null ? loadPort.trim().toLowerCase() : null;&#xA;&#xA;        println( &quot; ############## dischargePort &quot;+ dischargePort +  &quot; ################# loadPort &quot; + loadPort);&#xA;&#xA;        if (loadPort =='null' || dischargePort =='null'){&#xA;            returnFlag =  false;&#xA;        } else if (loadPort.indexOf(dischargePort) &gt; -1 || dischargePort.indexOf(loadPort) &gt; -1 ){&#xA;            returnFlag = false;&#xA;        }else {&#xA;            println( &quot; ##############  leg will be calculated correctly &quot; );&#xA;            returnFlag = true ;&#xA;        }&#xA;&#xA;        if(!returnFlag){&#xA;&#xA;&#xA;            def ibcarrier = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;);&#xA;            def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;            def emailFrom = '1aktosdevteam@matson.com'&#xA;            def emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;            println( &quot; ##############  leg will not be calculated correctly the output message is &quot; + outMsg );&#xA;            emailSender.custSendEmail(emailFrom,&quot;WARNING : Unit loading error for ## &quot; + ibcarrier  + &quot; ## load port ## &quot; + loadPort + &quot;##  discharge port ## &quot; + dischargePort + &quot; ## this might calculate leg incorrectly &quot; ,&quot;WARNING : Unit loading  warning &quot; + outMsg  );&#xA;&#xA;        }&#xA;&#xA;        println( &quot; ##############  returnFlag &quot;  + returnFlag);&#xA;        return returnFlag;&#xA;    }&#xA;&#xA;&#xA;    //Method Returns the Vessel Type [Ship/Barge]&#xA;    //Methof takes input last known Position&#xA;    private String getVesselClassTypeBackup(String vesselId)&#xA;    {&#xA;        def vesselType = ''&#xA;        try&#xA;        {&#xA;            def vesselClassId = vesselId != null &amp;&amp; vesselId.length() &gt;3 ? vesselId.substring(0,3) : null&#xA;            println(&quot;vesselClassId :: ibcarrier ::&quot;+vesselClassId)&#xA;            if(vesselClassId != null)&#xA;            {&#xA;                VesselClass vesselClass = new VesselClass()&#xA;                vesselClass = vesselClass.findVesselClassById(vesselClassId)&#xA;                println(&quot;vesselClass :: ibcarrier ::&quot;+vesselClass)&#xA;                VesselTypeEnum  vesselTypeEnum = vesselClass != null ? vesselClass.getVesclassVesselType() : null&#xA;                println(&quot;VesselTypeEnum ::&quot;+VesselTypeEnum)&#xA;                vesselType = vesselTypeEnum != null ? vesselTypeEnum.getKey() : ''&#xA;            }&#xA;            //println('VESSEL TYPE :'+vesselType)&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return vesselType&#xA;    }&#xA;&#xA;    //Method Returns the Vessel Type [Ship/Barge]&#xA;    //Methof takes input last known Position&#xA;    private String getVesselClassType(String vesselId)&#xA;    {&#xA;        def vesselType = ''&#xA;        try&#xA;        {&#xA;            def vesselClassId = vesselId != null &amp;&amp; vesselId.length() &gt;3 ? vesselId.substring(0,3) : null&#xA;            println(&quot;vesselClassId :: ibcarrier ::&quot;+vesselClassId)&#xA;            if(vesselClassId != null)&#xA;            {&#xA;                if( &quot;STB&quot;.equalsIgnoreCase(vesselClassId)  || &quot;STR&quot;.equalsIgnoreCase(vesselClassId)  ||&#xA;                        &quot;BAB&quot;.equalsIgnoreCase(vesselClassId)){&#xA;&#xA;                    vesselClassId=&quot;ILB&quot;;&#xA;                    println(&quot;setting vesselClassId as &quot;+vesselClassId )&#xA;                }&#xA;&#xA;                VesselClass vesselClass = new VesselClass()&#xA;                vesselClass = vesselClass.findVesselClassById(vesselClassId)&#xA;                println(&quot;vesselClass :: ibcarrier ::&quot;+vesselClass)&#xA;                VesselTypeEnum  vesselTypeEnum = vesselClass != null ? vesselClass.getVesclassVesselType() : null&#xA;                println(&quot;VesselTypeEnum ::&quot;+VesselTypeEnum)&#xA;                vesselType = vesselTypeEnum != null ? vesselTypeEnum.getKey() : ''&#xA;            }&#xA;            //println('VESSEL TYPE :'+vesselType)&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return vesselType&#xA;    }&#xA;&#xA;&#xA;    //Method Returns the Vessel Type [Ship/Barge]&#xA;    //Method Takes Input Vessel Cd&#xA;    private String getVesselClassForVesCode(String vesselId)&#xA;    {&#xA;        try&#xA;        {&#xA;            def vesselClassId = vesselId != null ? vesselId : null&#xA;            if(vesselClassId != null){&#xA;                VesselClass vesselClass = new VesselClass()&#xA;                vesselClass = vesselClass.findVesselClassById(vesselClassId)&#xA;                if(vesselClass != null){&#xA;                    VesselTypeEnum  vesselTypeEnum = vesselClass.getVesclassVesselType()&#xA;                    def vesselType = vesselTypeEnum != null ? vesselTypeEnum.getKey() : ''&#xA;                    //println('VESSEL TYPE :'+vesselType)&#xA;                    return vesselType&#xA;                }&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return ''&#xA;    }&#xA;&#xA;    //Method Vessel Class Type that has no entry in the vesVisit&#xA;    public String getVesClassTypeWithNoVisitEntry(Object unit)&#xA;    {&#xA;        def vesselClass = ''&#xA;        try&#xA;        {&#xA;            def aibcarrierMode=unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCarrierMode&quot;)&#xA;            aibcarrierMode = aibcarrierMode!= null ? aibcarrierMode.getKey() : ''&#xA;            if(aibcarrierMode != null &amp;&amp; aibcarrierMode.equals('VESSEL'))&#xA;            {&#xA;                def ibcarrier = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;);&#xA;                ibcarrier = ibcarrier != null &amp;&amp; ibcarrier.length() &gt; 3 ? ibcarrier.substring(0,3) : ''&#xA;                vesselClass = getVesselClassForVesCode(ibcarrier)&#xA;                println(&quot;noVesselVisitEntry :: ibcarrier ::&quot;+ibcarrier+&quot;   vesselClass ----&quot;+vesselClass)&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return vesselClass&#xA;    } //Method VesClass&#xA;&#xA;&#xA;    public String eventSpecificFieldValue(String xmlGvyData,String field,String newFieldValue)&#xA;    {&#xA;        String newValue = null;&#xA;        String tempNewValue = newFieldValue != null ? newFieldValue : 'null' //A2&#xA;        String oldValue = null;&#xA;        String xmlGvyString = xmlGvyData;&#xA;        int fieldIndx = xmlGvyString.indexOf(field);&#xA;&#xA;&#xA;        try&#xA;        {&#xA;            if(fieldIndx != -1)&#xA;            {&#xA;                int equalsIndx = xmlGvyString.indexOf(&quot;=&quot;,fieldIndx);&#xA;                int nextspace = xmlGvyString.indexOf(&quot;'&quot;, equalsIndx+2);&#xA;                oldValue = xmlGvyString.substring(equalsIndx+2, nextspace);&#xA;&#xA;                if(oldValue.equals(&quot;null&quot;) ){&#xA;                    newValue = tempNewValue;&#xA;                }&#xA;                else{&#xA;                    //CHECK FOR VALUE HERE&#xA;                    newValue = tempNewValue;&#xA;                }&#xA;&#xA;                System.out.println(&quot;Field ::&quot;+field+&quot;  oldValue ::&quot;+oldValue+&quot;  newValue :::&quot;+newValue);&#xA;&#xA;&#xA;                //Replace Escape Char in String&#xA;                newValue = replaceQuotes(newValue)&#xA;&#xA;&#xA;                String oldXmlValue = field+&quot;'&quot;+oldValue+&quot;'&quot;;&#xA;                String newXmlValue = field+&quot;'&quot;+newValue+&quot;'&quot;;&#xA;                xmlGvyString = xmlGvyString.replace(oldXmlValue, newXmlValue);&#xA;&#xA;&#xA;            }//IF Ends&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return xmlGvyString;&#xA;    }// Method eventSpecificFieldValue Ends&#xA;&#xA;    public static String getFieldValues(String xmlGvyString, String field)&#xA;    {&#xA;        String fieldValue = ''&#xA;        try&#xA;        {&#xA;            def fieldIndx = xmlGvyString.indexOf(field);&#xA;            def equalsIndx = xmlGvyString.indexOf(&quot;=&quot;,fieldIndx);&#xA;            def nextspace = xmlGvyString.indexOf(&quot;'&quot;, equalsIndx+2);&#xA;            fieldValue  = xmlGvyString.substring(equalsIndx+2, nextspace);&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return fieldValue;&#xA;    }&#xA;&#xA;    public static String getActualFieldValues(String xmlGvyString, String field)&#xA;    {&#xA;        String fieldValue = null&#xA;        try&#xA;        {&#xA;            def fieldIndx = xmlGvyString.indexOf(field);&#xA;            def equalsIndx = xmlGvyString.indexOf(&quot;=&quot;,fieldIndx);&#xA;            def nextspace = xmlGvyString.indexOf(&quot;'&quot;, equalsIndx+2);&#xA;            fieldValue  = xmlGvyString.substring(equalsIndx+2, nextspace);&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return fieldValue;&#xA;    }&#xA;&#xA;&#xA;    //Sets the specific Cmis action and Post the Message&#xA;    public void postMsgForAction(String xmlData,Object gvyBaseClass,String action)&#xA;    {&#xA;        def xmlGvyString = xmlData&#xA;        def api = new GroovyApi();&#xA;        if(!('null').equals(action)){&#xA;            xmlGvyString = eventSpecificFieldValue(xmlGvyString,&quot;lastAction=&quot;, action)&#xA;            xmlGvyString = eventSpecificFieldValue(xmlGvyString,&quot;action=&quot;, action)&#xA;        }&#xA;        xmlGvyString = customizeActionField(xmlGvyString,action)&#xA;        try{&#xA;            api.log(&quot; posting the message for action &quot;+action);&#xA;            gvyBaseClass.sendXml(xmlGvyString);&#xA;          }catch(Exception e){ //A10&#xA;            def emailSender = gvyBaseClass.getGroovyClassInstance(&quot;EmailSender&quot;);&#xA;            String error = e;&#xA;            api.log(&quot;Error occured in posting the message &quot;+ e.printStackTrace());&#xA;&#xA;          //  if (error.contains(&quot;JMS&quot;) &amp;&amp; !error.contains(&quot;authenticate&quot;)  &amp;&amp; xmlGvyString != null) {&#xA;                emailSender.custSendEmail(emailTo, &quot;TOS : NODE2 JMS SERVICE DOWN&quot;, &quot;Fix : Goto Administration -&gt; System -&gt; Cluster management -&gt; Select Node2 -&gt; Action -&gt; Restart JMS Connections  \r\n\r\n&quot;);&#xA;                //Catching the Error will post the mail and Re-posting the Message will exception out not be caught and will get Logged into the Integration Errors.&#xA;                gvyBaseClass.sendXml(xmlGvyString)&#xA;          ///  }&#xA;&#xA;            //A20&#xA;            if (error.contains(&quot;JMS&quot;) &amp;&amp; xmlGvyString != null){&#xA;                println(&quot;Calling MatGetIntegrationError.createIntegrationError&quot;);&#xA;                String entity = &quot;Unit&quot;;&#xA;                def unitId = this.getFieldValues(xmlGvyString, &quot;ctrNo=&quot;);&#xA;                def eventId = this.getFieldValues(xmlGvyString, &quot;msgType=&quot;);&#xA;                def errDesc = eventId+&quot; Failed for &quot;+unitId;&#xA;                def inj = new GroovyInjectionBase();&#xA;                inj.getGroovyClassInstance(&quot;MatGetIntegrationError&quot;).createIntegrationError(error,entity,unitId,eventId,errDesc,xmlGvyString);&#xA;                HibernateApi.getInstance().flush();&#xA;            }&#xA;&#xA;        }&#xA;    }&#xA;&#xA;&#xA;    //Sets the specific Cmis action and Post the Message&#xA;    public void postMsgForAction(String xmlData,Object gvyBaseClass,String action, Object unit, Object event,Object gvyEventUtil)&#xA;    {&#xA;&#xA;        def tempXml = xmlData&#xA;        boolean dontPost = true;&#xA;        try{&#xA;            if('AVL'.equals(action)){&#xA;                def transitState = unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;                def isInYard = 'S40_YARD'.equals(transitState.getKey())&#xA;                def isObCarUpdt = gvyEventUtil.wasFieldChanged(event,&quot;ufvIntendedObCv&quot;);&#xA;                //A12&#xA;                def obVesClass = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;                obVesClass = obVesClass != null ? obVesClass.getKey() : ''&#xA;                def obCarrierId = isObCarUpdt ? unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;) : unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;)&#xA;                //A13&#xA;                if('BARGE'.equals(obCarrierId) || 'BARGE'.equals(obVesClass)){&#xA;                    dontPost = false;&#xA;                }&#xA;                if(isInYard &amp;&amp; !'BARGE'.equals(obCarrierId) &amp;&amp; ('BARGE'.equals(obVesClass) || 'CELL'.equals(obVesClass)) ){&#xA;                    tempXml = setVesvoyFields(unit, tempXml, obCarrierId, obVesClass) //A17&#xA;                    tempXml = eventSpecificFieldValue(tempXml,&quot;locationStallConfig=&quot;,&quot;null&quot;)&#xA;                } //A12&#xA;                if(isObCarUpdt){tempXml = eventSpecificFieldValue(tempXml,&quot;locationStallConfig=&quot;,&quot;null&quot;)} //A8&#xA;            }else if('RHN'.equals(action)){&#xA;                //A18&#xA;                def obVesClass = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;                obVesClass = obVesClass != null ? obVesClass.getKey() : ''&#xA;&#xA;                def intdObCarrierId = unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;)&#xA;                def aobcarrierId = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;)&#xA;                aobcarrierId = aobcarrierId != null ? aobcarrierId : intdObCarrierId&#xA;                tempXml = setVesvoyFields(unit, tempXml, aobcarrierId, obVesClass) //A17&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;&#xA;        println(&quot;dontPost :: &quot;+dontPost+&quot;   action ----&quot;+action);&#xA;        if(dontPost){&#xA;            postMsgForAction(tempXml,gvyBaseClass,action)&#xA;        }&#xA;    }&#xA;&#xA;    //Method to Customized Fields based on Event Action&#xA;    //1. HLP &amp; HLR for Holds and Releases&#xA;    public String customizeActionField(String xmlData,String action){&#xA;        String xmlGvyString = xmlData&#xA;        try{&#xA;            if('null'.equals(action)){&#xA;                return xmlGvyString;&#xA;            }&#xA;&#xA;            if('HLP'.equals(action)){&#xA;                def msgType = getFieldValues(xmlGvyString, &quot;msgType=&quot;)&#xA;                def holdId = msgType.substring(0,msgType.indexOf('_HOLD'))&#xA;                holdId = holdId.startsWith('CG_INSP') ? 'CG' : (holdId.startsWith('OUTGATE') ? 'RD' : holdId)&#xA;                xmlGvyString = eventSpecificFieldValue(xmlGvyString,&quot;crStatus=&quot;, holdId.trim()) //A5&#xA;            }else if('HLR'.equals(action)){&#xA;                def msgType = getFieldValues(xmlGvyString, &quot;msgType=&quot;)&#xA;                def holdId = msgType.substring(0,msgType.indexOf('_RELEASE'))&#xA;                holdId = holdId.startsWith('CG_INSP') ? 'CG' : (holdId.startsWith('OUTGATE') ? 'RD' : holdId)&#xA;                xmlGvyString = eventSpecificFieldValue(xmlGvyString,&quot;crStatus=&quot;, holdId.trim())&#xA;            }else if('FREE'.equals(action)){ //A4&#xA;                xmlGvyString = eventSpecificFieldValue(xmlGvyString,&quot;action=&quot;, 'BDC')&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return xmlGvyString&#xA;    }&#xA;&#xA;    /*&#xA;     * Method returns the Vessel Service/Line operator&#xA;     */&#xA;    public String vesselServiceOperator(Object unit)&#xA;    {&#xA;        boolean unitOnBarge = false;&#xA;        def lkpLocType=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;        def locType = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;&#xA;        if(!locType.equals('VESSEL')){&#xA;            return ''&#xA;        }&#xA;&#xA;        def lkpCarrierId=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocId&quot;)&#xA;&#xA;        def aibcarrierId=unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;)&#xA;        def aobcarrierId=unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;)&#xA;&#xA;        def carrierOperatorIdOB = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.carrierOperatorId&quot;)&#xA;        carrierOperatorIdOB = carrierOperatorIdOB != null ? carrierOperatorIdOB : ''&#xA;&#xA;        def carrierOperatorIdIB = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.carrierOperatorId&quot;)&#xA;        carrierOperatorIdIB  = carrierOperatorIdIB != null ? carrierOperatorIdIB : ''&#xA;&#xA;        def vesServiceOperator = ''&#xA;&#xA;        if(lkpCarrierId.equals(aibcarrierId)){&#xA;            vesServiceOperator = carrierOperatorIdIB&#xA;        }&#xA;        else if(lkpCarrierId.equals(aobcarrierId)){&#xA;            vesServiceOperator = carrierOperatorIdOB&#xA;        }&#xA;&#xA;        println(&quot;UNIT OnVesselType :: lkpLocType ::&quot;+locType+&quot; LKPCarrId::&quot;+lkpCarrierId+&quot; vesServiceOperator:&quot;+vesServiceOperator)&#xA;&#xA;        return vesServiceOperator;&#xA;    }&#xA;&#xA;    public String getVesselLineOperator(Object unit)&#xA;    {&#xA;        def vesselLine = null&#xA;&#xA;        def category=unit.getFieldValue(&quot;unitCategory&quot;)&#xA;        category = category != null ? category.getKey() : ''&#xA;&#xA;        def vesselLineOb = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdBizu.bzuId&quot;);&#xA;        def vesselLineIb = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdBizu.bzuId&quot;);&#xA;        if(vesselLineOb != null ||  vesselLineIb != null)&#xA;        {&#xA;            if (category.equals('EXPRT') || category.equals('THRGH'))&#xA;            {&#xA;                vesselLine = vesselLineOb&#xA;            }&#xA;            else if (category.equals('IMPRT'))&#xA;            {&#xA;                vesselLine = vesselLineIb&#xA;            }&#xA;        }&#xA;        println(&quot;vesselLineOb ::&quot;+vesselLineOb+&quot;     vesselLineIb::&quot;+vesselLineIb+' vesselLine ::'+vesselLine  )&#xA;        return vesselLine&#xA;    }&#xA;&#xA;    /*Method Validates Neighbor island port */&#xA;    public boolean isNISPort(String destPort)&#xA;    {&#xA;        def nisPort = false;&#xA;        try&#xA;        {&#xA;            if(destPort != null)&#xA;            {&#xA;                if(destPort.equals('KAH') || destPort.equals('HIL') || destPort.equals('KHI') || destPort.equals('NAW') ||&#xA;                        destPort.equals('LNI') || destPort.equals('MOL'))&#xA;                {&#xA;                    nisPort = true;&#xA;                }&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return  nisPort&#xA;    }&#xA;&#xA;    /*Method Validates Neighbor island port */&#xA;    public boolean isNISPortReroute(String destPort)&#xA;    {&#xA;        def nisPort = false;&#xA;        try&#xA;        {&#xA;            if(destPort != null)&#xA;            {&#xA;                if(destPort.equals('KAH') || destPort.equals('HIL') || destPort.equals('KHI') || destPort.equals('NAW') ||&#xA;                        destPort.equals('LNI') || destPort.equals('MOL') || destPort.equals('HON'))&#xA;                {&#xA;                    nisPort = true;&#xA;                }&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return  nisPort&#xA;    }&#xA;&#xA;    /*&#xA;     * Method checks last event processing time interval to call thread sleep on current processing thread&#xA;     */&#xA;    public boolean holdEventProcessing(Object event, String eventType, int sec)&#xA;    {&#xA;        def secInterval = sec * 1000&#xA;        def currEvntTime = event.getEvntAppliedDate()&#xA;        def currEvtTime = currEvntTime != null ? currEvntTime.getTime() : null&#xA;&#xA;        def mstEvent = event.getMostRecentEvent(eventType)&#xA;        def mstEvntTime = mstEvent!= null ? mstEvent.getEvntAppliedDate() : null&#xA;        if(currEvtTime != null &amp;&amp; mstEvntTime != null)&#xA;        {&#xA;            def mstEvtTime = mstEvntTime.getTime()&#xA;            def evntTimeDiff = currEvtTime - mstEvtTime&#xA;            if(evntTimeDiff &lt; secInterval){&#xA;                return true&#xA;            }&#xA;            else{&#xA;                return false;&#xA;            }&#xA;        }else{&#xA;            return false;&#xA;        }&#xA;    }&#xA;&#xA;    //convert Cm To Inch&#xA;    private Object convertCmToInch(Object cmValue)&#xA;    {&#xA;        def inchValue = null&#xA;        def api = new GroovyApi();&#xA;        if(cmValue != null &amp;&amp; cmValue &gt; 0){&#xA;            def inchVal = cmValue * 0.393700787;&#xA;            inchVal = new BigDecimal(inchVal).setScale(2, BigDecimal.ROUND_HALF_UP);&#xA;            inchValue = Math.round(inchVal)&#xA;        }&#xA;        return inchValue&#xA;    }&#xA;&#xA;    public Object lookupFacility(Object id) {&#xA;        println(&quot;GvyUnitLookup.lookupFacility&quot;);&#xA;&#xA;        try {&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#xA;            dq.addDqPredicate(PredicateFactory.eq(InventoryField.UFV_UNIT,id ));&#xA;            def list = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            if(list != null) {&#xA;                Iterator iter = list.iterator();&#xA;                while(iter.hasNext()) {&#xA;                    def visit = iter.next();&#xA;                    def testVisit = visit.getFieldValue(&quot;ufvTransitState&quot;)&#xA;                    println(&quot;visit.getFieldValue-ufvTransitState------&quot;+testVisit); if(visit.getFieldValue(&quot;ufvTransitState&quot;).equals(com.navis.inventory.business.atoms.UfvTransitStateEnum.S70_DEPARTED)) {&#xA;                        return visit;&#xA;                    }&#xA;                }}&#xA;            return null;&#xA;        } catch (Exception e) {&#xA;            println(&quot;Exception in GvyUnitLookup &quot;+e.getMessage());&#xA;            e.printStackTrace();&#xA;        }&#xA;&#xA;        return null;&#xA;    }&#xA;&#xA;    public  String replaceQuotes(Object message)&#xA;    {&#xA;        def msg = message.toString();&#xA;        def replaceAmp = msg.replaceAll('&amp;', '&amp;amp;');&#xA;        replaceAmp = replaceAmp.replaceAll('\'', '&amp;apos;');&#xA;        replaceAmp = replaceAmp.replaceAll(&quot;&lt;&quot;, &quot;&amp;lt;&quot;)&#xA;        replaceAmp =  replaceAmp.replaceAll(&quot;&gt;&quot;, &quot;&amp;gt;&quot;)&#xA;        replaceAmp = replaceAmp.replaceAll(&quot;\&quot;&quot;, &quot;&amp;quot;&quot;)&#xA;        return replaceAmp;&#xA;    }&#xA;&#xA;    /* A6 AVL messages sets the Actual vessel, Voyage and leg value&#xA;     1. Post AVL Message if Discharge from barge&#xA;     2. When Obcarrier is updated&#xA;    */&#xA;    public String setVesvoyFields(Object unit, String xmlGvyString, String carrierId, String obVesselType)&#xA;    {&#xA;&#xA;&#xA;        def xmldata =  xmlGvyString&#xA;        try{&#xA;            def loadPort = unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;)&#xA;            def lkpLocType=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;).getKey() //A11&#xA;            if(lkpLocType.equals('YARD') &amp;&amp; ('LAX'.equals(loadPort) || 'OAK'.equals(loadPort) || 'SEA'.equals(loadPort) || loadPort == null )){&#xA;                def routing = unit.getUnitRouting();&#xA;                routing.setRtgPOL(RoutingPoint.findRoutingPoint(ContextHelper.getThreadFacility().getFcyId()));&#xA;            }&#xA;            def dischargePort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;            //def obVesselType = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;            def obVesselTypeKey = obVesselType&#xA;&#xA;            if(carrierId == null || carrierId.startsWith('GEN') || carrierId.equals('BARGE')){&#xA;                return xmldata;&#xA;            }&#xA;&#xA;            def actualVessel = null; def actualVoyage = null; def leg = null;&#xA;            if('BARGE'.equals(obVesselTypeKey)){&#xA;                actualVessel = carrierId.length() &gt; 6 ? carrierId.substring(0,3) : 'null'&#xA;                actualVoyage = carrierId.length() &gt; 6 ? carrierId.substring(3,6) : 'null'&#xA;                leg = carrierId.length() &gt; 6 ? carrierId.substring(6) : 'null'&#xA;            }else{&#xA;                leg = loadPort+'_'+dischargePort&#xA;                actualVessel = carrierId.length() &gt; 5 ? carrierId.substring(0,3) : 'null'&#xA;                actualVoyage = carrierId.length() &gt; 5 ? carrierId.substring(3) : 'null'&#xA;            }&#xA;&#xA;&#xA;            xmldata = eventSpecificFieldValue(xmldata,&quot;actualVessel=&quot;,actualVessel)&#xA;            xmldata = eventSpecificFieldValue(xmldata,&quot;actualVoyage=&quot;,actualVoyage)&#xA;            xmldata = eventSpecificFieldValue(xmldata,&quot;leg=&quot;,leg)&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return xmldata&#xA;    }&#xA;&#xA;    //A14&#xA;    public void setObCarrier(Object unit, String vesselId){&#xA;        try{&#xA;            def facility = ContextHelper.getThreadFacility();&#xA;            def visit;&#xA;&#xA;            //A19&#xA;            if (vesselId.equals('GEN_TRUCK'))&#xA;            {&#xA;                def complex = ContextHelper.getThreadComplex();&#xA;                visit = CarrierVisit.findOrCreateGenericCv(complex, com.navis.argo.business.atoms.LocTypeEnum.TRUCK)&#xA;&#xA;            } else {&#xA;&#xA;                visit = CarrierVisit.findOrCreateVesselVisit(facility, vesselId)&#xA;            }&#xA;&#xA;            unit.getUfvForFacilityNewest(facility).setUfvIntendedObCv(visit);&#xA;            unit.getUfvForFacilityNewest(facility).setUfvActualObCv(visit);&#xA;&#xA;        }catch(Exception e){&#xA;            api.log(&quot;Exception in GvyCmisUtil.setObCarrier() &quot; + e);&#xA;        }&#xA;    }&#xA;&#xA;    public void rectifyState(Object aUfv, UfvTransitStateEnum tState, UnitVisitStateEnum vState)&#xA;    {&#xA;        try{&#xA;            RectifyParms rparms = new RectifyParms();&#xA;            rparms.setUfvTransitState(UfvTransitStateEnum.S70_DEPARTED);&#xA;            rparms.setUnitVisitState(UnitVisitStateEnum.DEPARTED)&#xA;            aUfv.rectify(rparms);&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;/*&#xA;* Method Return Groovy EventType Obejct back for Specified Unit&#xA;* Input Unit Object and EventName&#xA;* Returns NULL if doesnt Find a match Else returns GroovyEvent Object for Event&#xA;* Created this for Special cases when we need to Pull out event inforamtion&#xA;  After the Fact/At a later time&#xA;*/&#xA;    public Object getUnitGroovyEventObject(Object unit, String eventName)&#xA;    {&#xA;        try{&#xA;            //def unit = event.getEntity()&#xA;            EventType eventType = EventType.findEventType(eventName);&#xA;            EventManager eventManager = (EventManager)Roastery.getBean(&quot;eventManager&quot;);&#xA;            List events = eventManager.getEventHistory(eventType, unit);&#xA;            Event deptUnitEvent = null&#xA;            if (events!= null &amp;&amp; events.size() == 0){&#xA;                return null;&#xA;            } else {&#xA;                deptUnitEvent = (Event)events.get(0);&#xA;            }&#xA;            if(deptUnitEvent != null){&#xA;                GroovyEvent moveEvent = new GroovyEvent( deptUnitEvent , unit);&#xA;                //Check if we are getting this object&#xA;                return moveEvent&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;    } //Method ends&#xA;&#xA;/*Method Validates Alaskan Neighbor island port */&#xA;    public boolean isAlaskanNISPort(String destPort)&#xA;    {&#xA;        def nisPort = false;&#xA;        try&#xA;        {&#xA;            if(destPort != null)&#xA;            {&#xA;                if(destPort.equals('KQA') || destPort.equals('SDP') || destPort.equals('NNK') || destPort.equals('PML') ||&#xA;                        destPort.equals('QPO') /*|| destPort.equals('MOL')*/)&#xA;                {&#xA;                    nisPort = true;&#xA;                }&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return  nisPort&#xA;    }//method ends&#xA;&#xA;    public String trimLength(def inval, def len) {&#xA;&#xA;        GroovyApi apiLog = new GroovyApi();&#xA;        def trimmedValue = &quot;&quot;;&#xA;        try {&#xA;&#xA;            if (inval == null) {&#xA;                return &quot;&quot;;&#xA;            }&#xA;&#xA;            if (&quot;NULL&quot;.equalsIgnoreCase(inval) || inval.toString().isEmpty()) {&#xA;                return inval;&#xA;            }&#xA;&#xA;            if (inval != null) {&#xA;                inval = inval.toString().trim();&#xA;            }&#xA;&#xA;            if (inval.toString().length() &gt; len) {&#xA;                trimmedValue = inval.toString().substring(0, len);&#xA;            } else {&#xA;                apiLog.log(&quot;Could not remove the values from the unit &quot; + inval + &quot; length value is &quot; + len);&#xA;                trimmedValue = inval;&#xA;            }&#xA;        }&#xA;        catch (Exception e) {&#xA;            apiLog.log(&quot;Error occured while trimming method - trimLength &quot; + e.getMessage());&#xA;        }&#xA;        return trimmedValue;&#xA;    }&#xA;&#xA;    public String removeAccessoryCheckdigit(def inval) {&#xA;&#xA;        // def accessory = '';&#xA;        def accessory = inval;&#xA;        GroovyApi apiLog = new GroovyApi();&#xA;&#xA;        apiLog.log(&quot;in removeAccessoryCheckdigit method &quot;);&#xA;&#xA;        try {&#xA;&#xA;            if (accessory != null  &amp;&amp; (!accessory.toString().isEmpty())) {&#xA;&#xA;                def accessoryLength = accessory.toString().length();&#xA;                if (accessoryLength &gt;= 11) {&#xA;                    accessory = trimLength(accessory, 10);&#xA;                }&#xA;                if (accessoryLength &lt; 11) {&#xA;                    def indexofDigitX = accessory.toString().toUpperCase().lastIndexOf(&quot;X&quot;);&#xA;                    if ((accessoryLength - 1) == indexofDigitX) {&#xA;                        accessory = trimLength(accessory, indexofDigitX);&#xA;                    }&#xA;                }&#xA;            }&#xA;&#xA;        } catch (Exception e) {&#xA;            apiLog.log(&quot;Error occured in validateAccessory method &quot; + e.getMessage());&#xA;        }&#xA;&#xA;        return accessory;&#xA;    }&#xA;&#xA;&#xA;&#xA;}&#xA;" />
<digital-asset id="GvyVesselLookup" short-description="GvyVesselLookup" is-pre-deployed="N" groovy-code="/*******************************************************************&#xA;* Srno   Date&#x9;            AuthorName&#x9;Change Description&#xA;* A1      03/17/09       Glenn Raposo&#x9;NullPointer Check&#xA;* A2      06/29/09       Steven Bauer&#x9;added advanceVV&#xA;* A3      07/15/09       Steven Bauer&#x9;No phase VV for NI.&#xA;* A4      04/11/09       Glenn Raposo   handle Multiple Phases&#xA;* A5      07/13/11       Glenn Raposo   Barge Chassis on ALE and MKA added Desk position as RORO&#xA;* 08/16/11 2.1 Updated Email Method&#xA;* A6  GR 10/25/11  Removed Weblogic API&#xA;* A7  GR 11/06/11  Corrected Email&#xA;* A8  GR    11/10/11  TOS2.1 Get Environment Variable&#xA;* A9     10/01/13        Kelvin Mikami  Increase tier for ISO schema from 14 to 16&#xA;**********************************************************************/&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import java.util.Iterator;&#xA;import java.util.Collection;&#xA;import com.navis.vessel.VesselField;&#xA;import com.navis.vessel.business.atoms.VesselTypeEnum;&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.vessel.business.operation.Vessel;&#xA;import com.navis.vessel.business.atoms.StowageSchemeEnum;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.argo.business.atoms.LocTypeEnum;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.argo.business.atoms.CarrierVisitPhaseEnum;&#xA;import com.navis.vessel.api.VesselVisitField;&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.argo.business.api.ServicesManager;&#xA;import com.navis.argo.business.atoms.EventEnum;&#xA;&#xA;import com.navis.framework.portal.BizRequest;&#xA;import com.navis.framework.portal.BizResponse;&#xA;import com.navis.framework.portal.FieldChanges;&#xA;import com.navis.framework.portal.CrudOperation;&#xA;import com.navis.framework.portal.CrudDelegate;&#xA;import com.navis.framework.util.TransactionParms;&#xA;&#xA;import com.navis.argo.*;&#xA;import com.navis.framework.email.*;&#xA;import java.io.PrintWriter;&#xA;import java.io.StringWriter;&#xA;import org.apache.commons.lang.StringUtils;&#xA;import com.navis.argo.business.atoms.EquipClassEnum&#xA;&#xA;&#xA;public class GvyVesselLookup  extends GroovyInjectionBase {&#xA;    public static final String AboveDeck = &quot;OD&quot;;&#xA;    public static final String BelowDeck = &quot;BD&quot;;&#xA;    public static final String RORO      = &quot;RO&quot;;&#xA;    public static final String UNK      = &quot;UNK&quot;;&#xA;&#x9;GroovyApi groovyApi = new GroovyApi();&#xA;&#xA;public boolean isBarge(String id) {&#xA;    def type = lookupType(id);&#xA;    if(type != null &amp;&amp; type.equals(VesselTypeEnum.BARGE)) {&#xA;       return true;&#xA;    }&#xA;    return false;&#xA;}&#xA;&#xA;// Lookup a vessel type by vessel id.&#xA;// Returns a com.navis.vessel.VesselField.VesselTypeEnum;&#xA;public Object lookupType(String id) {&#xA;   //Example IDs&#xA;   // def id = &quot;ALE&quot;;&#xA;   //def id = &quot;MHI&quot;;&#xA;&#xA;   try {&#xA;      DomainQuery dq = QueryUtils.createDomainQuery(&quot;VesselClass&quot;);&#xA;&#xA;      dq.addDqPredicate(PredicateFactory.eq(VesselField.VESCLASS_ID,id ));&#xA;      def list = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#xA;      if(list != null) {&#xA;         Iterator iter = list.iterator();&#xA;         while(iter.hasNext()) {&#xA;             def item = iter.next();&#xA;            // println(&quot;type=&quot;+item.getFieldValue(&quot;Type&quot;));&#xA;             return item.getFieldValue(&quot;vesclassVesselType&quot;);&#xA;             // Possible values are&#xA;            VesselTypeEnum.CELL // Containership&#xA;            VesselTypeEnum.BARGE // Barge&#xA;        }&#xA;   }&#xA;&#xA;&#xA;   return null;&#xA;   } catch (Exception e) {&#xA;      println(&quot;Exception in Vessel Type lookup  &quot;+e.getMessage());&#xA;      e.printStackTrace();&#xA;   }&#xA;&#xA;   return null;&#xA;  }&#xA;&#xA;&#xA;  public Object getCarrierVisit(String id) {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(&quot;CarrierVisit&quot;);&#xA;        dq.addDqPredicate(PredicateFactory.eq(ArgoField.CV_ID,id ));&#xA;        def list = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;        if(list != null &amp;&amp; list.size() &gt; 0) return list.get(0);&#xA;        return null;&#xA;  }&#xA;&#xA;&#xA;   public String setDeckPositionType(Object unit) {&#xA;         String deck = getDeckPositionType(unit);&#xA;         if(deck != null) {&#xA;             def ufv = unit.unitActiveUfv;&#xA;             if(ufv == null) {&#xA;                          def gvyBaseClass = new GroovyInjectionBase()&#xA;        &#x9;    def lookup =  gvyBaseClass.getGroovyClassInstance(&quot;GvyUnitLookup&quot;);&#xA;&#x9;    ufv = lookup.lookupFacility(unit.primaryKey);&#xA;             }&#xA;             if(ufv != null)  ufv.setFieldValue(&quot;ufvFlexString06&quot;,deck);&#xA;         }&#xA;         return deck;&#xA;   }&#xA;&#xA;    public String getDeckPositionType(Object unit) {&#xA;        def gvyBaseClass = new GroovyInjectionBase()&#xA;        def lookup =  gvyBaseClass.getGroovyClassInstance(&quot;GvyUnitLookup&quot;);&#xA;        //A11&#xA;&#x9;&#x9;def primaryClass = unit.unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&#xA;&#xA;        def position  = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition&quot;);&#xA;        if(position == null) {&#xA;            def ufv = lookup.lookupFacility(unit.primaryKey);&#xA;            if(ufv != null) position = ufv.getFieldValue(&quot;ufvLastKnownPosition&quot;);&#xA;        }&#xA;        if(position == null) return null;&#xA;        if(!position.posLocType.equals(LocTypeEnum.VESSEL)) return null;&#xA;&#xA;        def visit = position.posLocId;&#xA;        def cv =   getCarrierVisit(visit);&#xA;        def vesselId = cv.carrierVehicleId;&#xA;        def vessel =  Vessel.findVesselById(vesselId);&#xA;        def schema =  vessel != null ? vessel.vesStowageScheme : null; //A1&#xA;        boolean iso = schema != null &amp;&amp; schema.equals(StowageSchemeEnum.ISO) ?  true : false;&#xA;&#xA;        def slot = position.posSlot;&#xA;        // Need to be at least 2 char to analize it.&#xA;        if( !EquipClassEnum.CHASSIS.equals(primaryClass) &amp;&amp; (slot == null || slot.length() &lt; 2)) return UNK;&#xA;&#xA;&#x9;if(vesselId.equals(&quot;KAU&quot;) || vesselId.equals(&quot;MAU&quot;) ) {&#xA;                                            if(vesselId.equals(&quot;KAU&quot;) ) {&#xA;&#x9;&#x9;   char c1 = slot.charAt(0);&#xA;&#x9;&#x9;   char c2 = slot.charAt(1);&#xA;&#x9;&#x9;   if(Character.isLetter(c1) || Character.isLetter(c2)) {&#xA;&#x9;&#x9;&#x9;return RORO;&#xA;&#x9;&#x9;   }&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;String first2Char = slot.substring(0,2);&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;   int num = Integer.parseInt(first2Char);&#xA;&#x9;&#x9;   if(num &gt;= 2 &amp;&amp; num &lt;= 9) return AboveDeck;&#xA;&#x9;&#x9;} catch (Exception e) {&#xA;&#x9;&#x9;   // Do nothing, standard NON-ISO&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;} else if (vesselId.equals(&quot;LHE&quot;) ) {&#xA;&#x9;    String lastChar = slot.substring(slot.length()-1);&#xA;&#x9;    if(lastChar.equalsIgnoreCase(&quot;A&quot;) || lastChar.equalsIgnoreCase(&quot;A&quot;)) return AboveDeck;&#xA;&#x9;    try {&#xA;&#x9;        int lastNum = Integer.parseInt(lastChar);&#xA;&#x9;        if(lastNum &gt;= 7) return AboveDeck;&#xA;&#x9;        else return BelowDeck;&#xA;&#x9;    } catch (Exception e) {&#xA;&#x9;        return UNK;&#xA;&#x9;    }&#xA;&#x9;} else if(vesselId.equals(&quot;LUR&quot;) || vesselId.equals(&quot;MAT&quot;) ) {&#xA;&#x9;&#x9;if(slot.length() == 3 || slot.length() == 4 ) {&#xA;&#x9;&#x9;&#x9;return RORO;&#xA;&#x9;&#x9;}&#xA;&#x9;} else if(vesselId.equals(&quot;MKA&quot;)  ||  vesselId.equals(&quot;ALE&quot;) ) {&#xA;&#x9;&#x9;&#x9;if(EquipClassEnum.CHASSIS.equals(primaryClass)){ //A5&#xA;               return RORO;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;        if(slot.length() == 4 ) {&#xA;&#x9;&#x9;&#x9;   return RORO;&#xA;&#x9;&#x9;    }&#xA;&#x9;&#x9;char c1 = slot.charAt(0);&#xA;&#x9;&#x9;char c2 = slot.charAt(1);&#xA;&#x9;&#x9;if(Character.isLetter(c1) || Character.isLetter(c2)) {&#xA;&#x9;&#x9;&#x9;return RORO;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;//log(&quot;Deck ISO=&quot;+iso);&#xA;&#x9;if(iso) {&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;String last2Char = slot.substring(slot.length()-2);&#xA;&#xA;&#x9;&#x9;&#x9;int lastNum = Integer.parseInt(last2Char);&#xA;//log(&quot;Deck Char=&quot;+lastNum);&#xA;&#x9;&#x9;&#x9;if(lastNum &gt;= 80) return AboveDeck;&#xA;&#x9;        &#x9;if(lastNum &lt;= 16) return BelowDeck;  //A9  14 to 16&#xA;&#x9;        &#x9;return UNK;&#xA;&#x9;        } catch (Exception e) {&#xA;                    log(&quot;Deck Error=&quot;+e.getMessage());&#xA;&#x9;    &#x9;    return UNK;&#xA;&#x9;    &#x9;}&#xA;&#x9;} else {&#xA;&#xA;&#x9;   String secondLastChar = slot.substring(slot.length()-2,slot.length()-1);&#xA;&#x9;   if (secondLastChar.equals(&quot;0&quot;)) return AboveDeck;&#xA;&#x9;   if (secondLastChar.equals(&quot;1&quot;)) return BelowDeck;&#xA;&#x9;   return UNK;&#xA;&#x9;}&#xA;          return UNK;&#xA;&#xA;    }&#xA;&#xA;   public boolean isClosed(CarrierVisitPhaseEnum state) {&#xA;   if(state == CarrierVisitPhaseEnum.DEPARTED  || state == CarrierVisitPhaseEnum.CLOSED || state == CarrierVisitPhaseEnum.CANCELED || state == CarrierVisitPhaseEnum.ARCHIVED ) {&#xA;      return true;&#xA;   }&#xA;   return false;&#xA;}&#xA;&#xA;   public void advanceVV(visit,phase) {&#xA;           def  originalUserContext = ContextHelper.getThreadUserContext();&#xA;&#xA;           def sco = originalUserContext.getScopeCoordinate();&#xA;           def scoper = Roastery.getBean(&quot;entityScoper&quot;);&#xA;           def scopeNodeEntity = scoper.getScopeNodeEntity(sco);&#xA;           def context = ContextHelper.getSystemUserContextForScope(scopeNodeEntity.getScopeEnum(), scopeNodeEntity.getPrimaryKey());&#xA;           TransactionParms.getBoundParms().setUserContext(context);&#xA;      &#x9;   def request = new BizRequest(context);&#xA;      &#x9;   request.setUserContext(context);&#xA;&#xA;           def response = new BizResponse();&#xA;           def changes = new FieldChanges();&#xA;           changes.setFieldChange(VesselVisitField.VVD_VISIT_PHASE, visit.vvdVisitPhase , phase);&#xA;&#xA;&#xA;           def crud = new CrudOperation(null, 2, &quot;VesselVisitDetails&quot;, changes, visit.cvdGkey);&#xA;           request.addCrudOperation(crud);&#xA;           request.setApiTarget(&quot;vslAdvanceVesselVisit&quot;);&#xA;&#xA;           def target =  request.getUpdateTarget();&#xA;&#x9;       def task = Roastery.getBean(target);&#xA;           task.advanceVesselVisit(request,response);&#xA;&#xA;&#xA;           TransactionParms.getBoundParms().setUserContext(originalUserContext);&#xA;&#xA;   }&#xA;&#xA;   public void updateVVCheck(visit) {&#xA;        def emailto = &quot;1aktosdevteam@matson.com&quot;;&#xA;        def emailfrom = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#xA;        def phase = &quot;&quot;;&#xA;        try {&#xA;                String note = visit.vvdNotes;&#xA;&#xA;&#x9;&#x9;if(note == null) return;&#xA;&#x9;&#x9;String phaseNote = &quot;phase_vv='&quot;;&#xA;&#x9;&#x9;int index = note.indexOf(&quot;phase_vv='&quot;);&#xA;&#x9;&#x9;if(index == -1) return;&#xA;&#x9;&#x9;int endIndex = note.indexOf(&quot;'&quot;,index+phaseNote.length());&#xA;&#x9;&#x9;if(endIndex == -1) return;&#xA;&#x9;&#x9;//String phaseStr = note.substring(index+phaseNote.length(),endIndex);&#xA;&#x9;&#x9;def phaseStr = note.substring(index+phaseNote.length(),endIndex);&#xA;&#x9;&#x9;println(&quot;Visit_Id&quot;+visit.cvdCv.toString()+&quot;phaseStr =&quot;+phaseStr)&#xA;&#x9;&#x9;phaseStr = phaseStr.split(',')&#xA;        for(aPhase in phaseStr){&#xA;          println(&quot;Visit_Id&quot;+visit.cvdCv.toString()+&quot;aPhase =&quot;+aPhase)&#xA; &#x9;&#x9;  phase =  com.navis.argo.business.atoms.CarrierVisitPhaseEnum.getEnum(aPhase);&#xA;&#x9;&#x9;  if(phase == null) return&#xA;&#x9;&#x9;   //note = note.substring(0,index)+note.substring(endIndex+1);&#xA;&#x9;&#x9;  // visit.vvdNotes = note;&#xA;&#xA;&#x9;&#x9;   def facility = visit.getFieldValue(&quot;cvdCv.cvFacility.fcyId&quot;);&#xA;&#x9;&#x9;   if(ContextHelper.getThreadFacility().getFcyId().equals(facility) &amp;&amp;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(&quot;ANK&quot;.equals(facility) || &quot;DUT&quot;.equals(facility) || &quot;KDK&quot;.equals(facility))) {&#xA;&#x9;&#x9;    advanceVV(visit,phase);&#xA;&#x9;&#x9;   } else {&#xA;&#x9;&#x9;    def changes = new FieldChanges();&#xA;            changes.setFieldChange(VesselVisitField.VVD_VISIT_PHASE, visit.vvdVisitPhase , phase);&#xA;&#x9;&#x9;    visit.vvdVisitPhase=phase;&#xA;&#xA;&#x9;&#x9;    ServicesManager srvcMgr = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;&#x9;&#x9;    srvcMgr.recordEvent(EventEnum.PHASE_VV, &quot;NI Phase change&quot;, null, null, visit, changes);&#xA;&#x9;&#x9;    println(&quot;Visit_Id&quot;+visit.cvdCv.toString()+&quot;After Recording PhaseVV&quot;)&#xA;&#x9;&#x9;  }&#xA;&#x9;     }//for ends A4&#xA;&#xA;&#x9;} catch (Exception e) {&#xA;&#x9;   &#x9;log(&quot;ERR_GVY_PVV_001. Cound not advance vessel &quot; + phase+&quot;. Error message is &quot;+e.getMessage());&#xA;&#x9;&#x9;def text = new StringBuffer();&#xA;&#x9;&#x9;text.append(&quot;ERR_GVY_PVV_001. Cound not advance vessel &quot;);&#xA;&#x9;&#x9;text.append(visit.cvdCv.toString());&#xA;&#x9;&#x9;text.append(&quot; desired phase &quot;);&#xA;&#x9;&#x9;text.append(phase.getName());&#xA;&#x9;&#x9;text.append(&quot;\n Error message is &quot;);&#xA;&#x9;&#x9;text.append(e.getMessage());&#xA;&#x9;&#x9;text.append(&quot;\n&quot;);&#xA;&#x9;&#x9;text.append(getStackTrace(e));&#xA;&#xA;&#xA;&#x9;&#x9;EmailMessage msg = new EmailMessage(ContextHelper.getThreadUserContext());&#xA;&#x9;&#x9;msg.setTo(StringUtils.split(emailto, &quot;;,&quot;));&#xA;&#x9;&#x9;msg.setSubject(getEnvVersion()+&quot;Phase_VV error &quot;+visit.cvdCv.toString());&#xA;&#x9;&#x9;msg.setText(text.toString());&#xA;&#x9;&#x9;msg.setReplyTo(emailfrom);&#xA;&#x9;   &#x9;msg.setFrom(emailfrom);&#xA;&#x9;&#x9;def  emailManager = Roastery.getBean(&quot;emailManager&quot;);&#xA;&#x9;&#x9;emailManager.sendEmail(msg);&#xA;&#x9;}&#xA;   }&#xA;&#xA;   public  String getEnvVersion()  {&#xA;     String envType = groovyApi.getReferenceValue(&quot;ENV&quot;, &quot;ENVIRONMENT&quot;, null, null, 1)&#xA;&#x9; if(&quot;PRODUCTION&quot;.equals(envType)){&#xA;&#x9;&#x9; return &quot;&quot;;&#xA;     }&#xA;     return envType+&quot; &quot;;&#xA;   }&#xA;&#xA;   public String getStackTrace(Throwable inException) {&#xA;&#x9;StringWriter sw = new StringWriter();&#xA;&#x9;PrintWriter pw = new PrintWriter(sw, true);&#xA;&#x9;inException.printStackTrace(pw);&#xA;&#x9;pw.flush();&#xA;&#x9;pw.close();&#xA;&#x9;return sw.toString();&#xA;   }&#xA;&#xA;}" />
<digital-asset id="GvyCmisEventUnitOutGate" short-description="GvyCmisEventUnitOutGate" is-pre-deployed="N" groovy-code="/** Change History&#xA;   *   A1:  SKB   04/09/2009  Set visible in sparcs to true&#xA;   *   A2:  GR    04/14/09  Added Code to Set BO carrier as BARGE    &#xA;   *   A3:  GR    07/15/2009  Added departYBTransferUnit() &#xA;   *   A4   GR    11/17/09   Check before setting Barge &#xA;   *   A5   GR    05/27/10   Roll over the Avail and Detention Dates&#xA;                             To the new Create UFV&#xA;   *   A6   GR    12/08/11   Set Designated Trucker for YB (SIT)&#xA;   *   A7   GR    12/08/11   Updated Function to Add Trucking Company(SIT)&#xA;   *   A8   GR    12/08/11   Removing SetDesigneted Trucker from Outgate &#xA;&#xA; */&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import  com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.inventory.business.api.RectifyParms;&#xA;import java.util.Iterator&#xA;import com.navis.argo.business.model.CarrierVisit;&#xA;import com.navis.argo.ContextHelper;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.road.business.model.TruckingCompany &#xA;&#xA;public class GvyCmisEventUnitOutGate&#xA;{&#xA;  public void processOutGate(Object event, Object api)&#xA;  {&#xA;    def unit = event.getEntity()&#xA;    def gvyCmisUtil = api.getGroovyClassInstance(&quot;GvyCmisUtil&quot;)&#xA;    try&#xA;   {&#xA;       //Roll Over Avail and Detention Dates to the new Created UFV&#xA;&#x9;   def availDate = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate02&quot;)&#xA;       def detentionDate = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate03&quot;)&#xA;       def lastfreeDay = unit.getFieldValue(&quot;unitActiveUfv.ufvCalculatedLastFreeDay&quot;)&#xA;&#xA;       def groupCode = unit.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;)&#xA;       groupCode = groupCode != null ? groupCode : ''&#xA;&#xA;       def _drayStatus=unit.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;       def drayStatus = _drayStatus!= null ? _drayStatus.getKey() : _drayStatus&#xA;&#xA;        if(drayStatus.equals('OFFSITE') || drayStatus.equals('DRAYIN') || drayStatus.equals('TRANSFER'))&#xA;        {&#xA;           def unitId=unit.getFieldValue(&quot;unitGkey&quot;)&#xA;           def unitDetails = api.getGroovyClassInstance(&quot;GvyUnitLookup&quot;)&#xA;           def visit = unitDetails.lookupFacility(unitId)&#xA;&#xA;           if(visit != null) &#xA;          {&#xA;              // A1, Set Visible in sparcs true&#xA;             visit.setFieldValue(&quot;ufvVisibleInSparcs&quot;, true);&#xA;           &#x9; visit.setFieldValue(&quot;ufvTransitState&quot;, com.navis.inventory.business.atoms.UfvTransitStateEnum.S20_INBOUND)&#xA;             visit.setFieldValue(&quot;ufvVisitState&quot;, com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE)&#xA;&#xA;             visit.setFieldValue(&quot;ufvFlexDate02&quot;,availDate); //Roll over the Avail,Dtn,Storage Dates&#xA;&#x9;&#x9;&#x9; visit.setFieldValue(&quot;ufvFlexDate03&quot;,detentionDate);&#xA;&#xA;             //visit.setFieldValue(&quot;ufvLastFreeDay&quot;,lastfreeDay);&#xA;&#x9;&#x9;&#x9; if(lastfreeDay != null &amp;&amp; !lastfreeDay.contains('no')){&#xA;&#x9;&#x9;&#x9;   lastfreeDay = lastfreeDay.replace('!','')&#xA;&#x9;&#x9;       def formatter = new java.text.SimpleDateFormat(&quot;yyyy-MMM-dd&quot;);&#xA;               def lstFreedate = (Date)formatter.parse(lastfreeDay);&#xA;&#x9;&#x9;&#x9;   def longlastFreeDay = lstFreedate.getTime() + (long)1 *(long)(24*3600*1000)&#xA;               Date alteredlastFreeDay = new Date(longlastFreeDay) &#xA;&#x9;&#x9;&#x9;   //Plus 1 Day &#xA;&#x9;&#x9;&#x9;   visit.setUfvLastFreeDay(alteredlastFreeDay)&#xA;&#x9;&#x9;&#x9; }&#xA;&#xA;              unit.setFieldValue(&quot;unitActiveUfv&quot;, visit)&#xA;              //Setting OB Carrier to Barge  &#xA;              def curDischPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;              curDischPort = curDischPort != null ? curDischPort : &quot;&quot;&#xA;             def intdObCarrierId = unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;) &#xA;             intdObCarrierId = intdObCarrierId != null ? intdObCarrierId : &quot;&quot; &#xA;             boolean ObcarrierFlag = intdObCarrierId.equals(&quot;GEN_TRUCK&quot;) || intdObCarrierId.equals(&quot;GEN_VESSEL&quot;) || intdObCarrierId.equals(&quot;GEN_CARRIER&quot;) ? true : false&#xA;             if(gvyCmisUtil.isNISPort(curDischPort) &amp;&amp; ObcarrierFlag ){&#xA;                 def bargeVisit = CarrierVisit.findOrCreateVesselVisit(com.navis.argo.ContextHelper.getThreadFacility(), &quot;BARGE&quot;)&#xA;                 unit.getUfvForFacilityNewest(com.navis.argo.ContextHelper.getThreadFacility()).updateObCv(bargeVisit);&#xA;              }&#xA;          } &#xA;           else &#xA;          {&#xA;           println(&quot;Inbound lookup failed!!!!!!!!!!!!!!!!!!!!!!!&quot;)&#xA;           }&#xA;        } //Dray status Filter Ends &#xA;   }catch(Exception e){&#xA;     e.printStackTrace()&#xA;   }&#xA;&#xA;  }//Method doIt Ends&#xA;&#xA;  //Depart Unit With Group[YB], Dray[Transfer] and POD [MOL,LNI]&#xA;  public void departYBTransferUnit(Object event)&#xA; {&#xA;  try{&#xA;    def unit = event.getEntity()&#xA;    def group=unit.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;)&#xA;    group = group != null ? group : ''&#xA;&#xA;    def drayStatus=unit.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;    drayStatus = drayStatus!= null ? drayStatus.getKey() : ''&#xA; &#xA;    def pod = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;    pod = pod != null ? pod.trim() : ''    &#xA;&#xA;     def ufvUnit = unit.getUnitActiveUfv()&#xA;&#xA;    if(group.equals('YB') &amp;&amp; drayStatus.equals('TRANSFER') &amp;&amp; (pod.equals('MOL') || pod.equals('LNI'))){&#xA;        RectifyParms rparms = new RectifyParms();&#xA;        rparms.setUfvTransitState(UfvTransitStateEnum.S70_DEPARTED);&#xA;        rparms.setUnitVisitState(UnitVisitStateEnum.DEPARTED)&#xA;        ufvUnit.rectify(rparms);&#xA;        ufvUnit.setFieldValue(&quot;ufvVisibleInSparcs&quot;, false);&#xA;    }&#xA;&#xA;   }catch(Exception e){&#xA;      e.printStackTrace()&#xA;   }&#xA;}&#xA;&#xA;&#xA;  //Set Ufv OB Carrier to YB With Group[YB], Dray[Transfer]&#xA; public void setYbForSitUnit(Object event)&#xA; {&#xA;  try&#xA;  {&#xA;    def unit = event.getEntity()&#xA;    def group=unit.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;)&#xA;    group = group != null ? group : ''&#xA;&#xA;    def drayStatus=unit.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;    drayStatus = drayStatus!= null ? drayStatus.getKey() : '' &#xA;    &#xA;    def ufvSet = null;&#xA;    if(group.equals('YB') &amp;&amp; (drayStatus.equals('TRANSFER') || drayStatus.equals('OFFSITE')) )&#xA;    {&#xA;      //If intdObCarrierId yb OR ufv size is one then return&#xA;      def intdObCarrierId=unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;)&#xA;      ufvSet = unit.getUnitUfvSet()&#xA;      if( (intdObCarrierId != null &amp;&amp; intdObCarrierId.startsWith('YB')) &#xA;             || (ufvSet == null || ufvSet.size() == 1) ){&#xA;       return;&#xA;      }&#xA;&#xA;      def aUfv = null;&#xA;      Iterator iterator = ufvSet.iterator();&#xA;      while(iterator.hasNext())&#xA;      {&#xA;         aUfv = (UnitFacilityVisit)iterator.next()  &#xA;         def intdObCarrId = aUfv.ufvIntendedObCv.cvId&#xA;         if(intdObCarrId != null &amp;&amp; intdObCarrId.startsWith('YB')){&#xA;           setObCarreir(unit,intdObCarrId)&#xA;           break;&#xA;         }&#xA;       }//for ends&#xA;    }//outer if ends&#xA;&#xA;  }catch(Exception e){&#xA;     e.printStackTrace();&#xA;  }&#xA; }//method ends&#xA;&#xA;&#xA; public void setObCarreir(Object unit,String aobcarrierId)&#xA; {&#xA;  try{&#xA;    def facility = ContextHelper.getThreadFacility();&#xA;    CarrierVisit carriervisit = CarrierVisit.findVesselVisit(facility, aobcarrierId);&#xA;     unit.getUfvForFacilityNewest(facility).setUfvIntendedObCv(carriervisit);&#xA;     unit.getUfvForFacilityNewest(facility).setUfvActualObCv(carriervisit);&#xA;   }catch(Exception e){&#xA;       e.printStackTrace()&#xA;   }&#xA; }&#xA;&#xA; //A7 - Setting Designated Trucker for YB&#xA; public void setYbAssignTrucker(Object unit,Object gvyEventUtil, Object event){&#xA;   try{&#xA;    def truck = unit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;&#x9;def ybTrucker = unit.setFieldValue(&quot;unitFlexString14&quot;, truck);&#xA;&#x9;&#x9; &#xA;&#x9;if(&quot;SIT&quot;.equals(unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;))){&#xA;&#xA;        def prevTruck = gvyEventUtil.getPreviousPropertyAsString(event,&quot;rtgTruckingCompany&quot;) &#xA;&#x9;&#x9;if(prevTruck != null){&#xA;&#x9;&#x9;   def trkc = TruckingCompany.load(prevTruck);&#xA;&#x9;&#x9;   if(trkc != null) {  unit.getUnitRouting().setRtgTruckingCompany(trkc); }&#xA;&#x9;    }else{&#xA;&#x9;&#x9;  unit.getUnitRouting().setRtgTruckingCompany(null);&#xA;&#x9;&#x9;}&#xA;    }//Sit Check ends&#xA;   }catch(Exception e){&#xA;&#x9;   e.printStackTrace();&#xA;   }&#xA; }//Method Ends&#xA;&#xA;}//Class Ends&#xA;" />
<digital-asset id="GvyInjAbda" short-description="ACETS BDA Process" is-pre-deployed="N" groovy-code="/*&#xA;**********************************************************************&#xA;* Srno   Date&#x9;             Changer&#x9; Change Description&#xA;* A1     12/29/08       Glenn Raposo&#x9; Unit Field Tracker code Added&#xA;* A1- 12/22/08 Change err 006 to use IB vessle on for imports&#xA;* A2- 01/21/08 Correct Consignee&#xA;* A3- 02/06/09          Steven Bauer&#x9; Remove Commiddty Note.&#xA;* A4     04/09/09       Glenn Raposo     Adde check to set the BDB Dest to POD if they dont match&#xA;* A5     04/27/09&#x9;Steven Bauer&#x9; Changed destination mapping to import = dest, export =disch.&#xA;* A6     05/13/09       Steven Bauer     Changed disch mapping to import = dest, export =disch.&#xA;* A7     05/26/09       Steven Bauer&#x9; Lookup unit at complex level.&#xA;* A8     06/02/09&#x9;Steven Bauer&#x9; 403 - Supress all updates before GetNV&#xA;* A9&#x9; 07/21/09&#x9;Steven Bauer&#x9; Changed POD&#xA;**********************************************************************&#xA;*/&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.atoms.EventEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.orders.business.eqorders.EquipmentOrderManagerPea&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.argo.ContextHelper;&#xA;import com.navis.argo.business.api.GroovyApi&#xA;&#xA;class GvyInjAbda extends GroovyInjectionBase {&#xA;&#x9;public String execute(Map inParameters) {&#xA;&#xA;&#xA;&#x9;def ctrId = (String) inParameters.get(&quot;equipment-id&quot;);&#xA;&#xA;&#x9;def recorder = (String) inParameters.get(&quot;recorder&quot;);&#xA;&#x9;def vesvoyBda = (String) inParameters.get( &quot;vesvoy&quot;);&#xA;&#x9;def bdaBookingNum = (String) inParameters.get( &quot;bookingNum&quot;);&#xA;&#x9;def consigneeIdBda = (String) inParameters.get( &quot;consigneeId&quot;);&#xA;&#x9;def consigneeNameBda = (String) inParameters.get( &quot;consigneeName&quot;);&#xA;&#x9;def shipperNameBda = (String) inParameters.get( &quot;shipperName&quot;);&#xA;&#x9;def shipperIdBda = (String) inParameters.get( &quot;shipperId&quot;);&#xA;&#x9;def destPortBda = (String) inParameters.get( &quot;destPort&quot;);&#xA;&#x9;def discPortBda = (String) inParameters.get( &quot;dischargePort&quot;);&#xA;&#x9;def primCarrierBda = (String) inParameters.get( &quot;primCarrier&quot;);&#xA;&#x9;def tempBda = (String) inParameters.get( &quot;temp&quot;);&#xA;&#x9;def sealBda = (String) inParameters.get( &quot;sealNum&quot;);&#xA;&#x9;def commodityBda = (String) inParameters.get( &quot;commodity&quot;);&#xA;&#x9;def note = &quot;\n\nPlease fix either the booking or unit and review the routing after correction&quot;;&#xA;log( &quot;1- bdaBookingNum = &quot; + bdaBookingNum);&#xA;&#x9;com.navis.argo.ContextHelper.setThreadExternalUser(&quot;ACETS&quot;);&#xA;&#xA;&#x9;String  emailFrom = '1aktosdevteam@matson.com'&#xA;&#x9;String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;def unitFreightKind = null;&#xA;&#x9;def bkngFreightKind = null;&#xA;&#x9;def emailBody = null;&#xA;&#xA;&#x9;def inj = new GroovyInjectionBase();&#xA;&#x9;def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;);&#xA;&#xA;&#x9;// Find the UFV&#xA;&#x9;log( &quot;Starting BDA Injection process.&quot;);&#xA;&#x9;def ufv;&#xA;&#x9;def unit;&#xA;                     //A1- tracker&#xA;&#x9;def tracker;&#xA;        GroovyApi gvyApi = new GroovyApi();&#xA;&#x9;def unitLookup = gvyApi.getGroovyClassInstance(&quot;GvyUnitLookup&quot;);&#xA;&#x9;def podLookup = gvyApi.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;);&#xA;&#xA;&#xA;&#x9;try {&#xA;&#x9;&#x9;//ufv = findActiveUfv(ctrId);&#xA;&#x9;&#x9;ufv = unitLookup.getUfvActiveInComplex(ctrId);&#xA;&#x9;&#x9;if(ufv == null) {&#xA;&#x9;&#x9;    throw new Exception(&quot;Could not find active unit&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;unit = ufv.getUfvUnit();&#xA;&#x9;&#x9;//A1- Tracker Change&#xA;         def gvyUnitFldTracker = gvyApi.getGroovyClassInstance(&quot;GvyUnitFieldTracker&quot;);&#xA;         tracker = gvyUnitFldTracker.createFieldChangeTracker(unit)&#xA;&#xA;&#x9;&#x9;unitFreightKind = unit.getFieldValue(&quot;unitFreightKind&quot;);&#xA;&#x9;&#x9;unitFreightKind = unitFreightKind.getKey();&#xA;&#x9;} catch ( Exception ex) {&#xA;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo,&quot; BDA error for Booking &quot;+ bdaBookingNum+ &quot; and Unit &quot; +ctrId ,&quot;Could not find unit: &quot;+ctrId+note);&#xA;&#x9;&#x9;fail((new StringBuilder()).append(ex.toString()).append(&quot; ERR_GVY_BDA_001. Could not find unit: &quot;).append( ctrId).toString());&#xA;&#x9;}&#xA;&#xA;        if(isStowplan(unit)) return;&#xA;&#xA;&#x9;List bkng = Booking.findBookingsByNbr(bdaBookingNum);&#xA;&#x9;Iterator iter = bkng.iterator();&#xA;&#x9;while (iter.hasNext()){&#xA;&#x9;&#x9;def book = iter.next();&#xA;&#x9;&#x9;bkngFreightKind = book.eqoEqStatus;&#xA;&#x9;&#x9;bkngFreightKind = bkngFreightKind.getKey()&#xA;&#x9;}&#xA;&#xA;&#x9;StringBuffer header = new StringBuffer();&#xA;&#x9;&#x9;header.append(&quot;\nBooking Number       : &quot;+bdaBookingNum);&#xA;&#x9;&#x9;header.append(&quot;\nContainer Number     : &quot;+ctrId);&#xA;&#x9;&#x9;header.append(&quot;\nBooking FreigthKind   : &quot;+bkngFreightKind);&#xA;&#x9;&#x9;header.append(&quot;\nContainer FreightKind : &quot;+unitFreightKind);&#xA;&#x9;&#x9;header.append(&quot;\n\n&quot;);&#xA;&#xA;&#x9;emailBody = header.toString();&#xA;log( &quot;2- bdaBookingNum = &quot; + bdaBookingNum);&#xA;&#x9;if( UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory()) &amp;&amp;&#xA;&#x9;&#x9;isBarge( vesvoyBda) &amp;&amp;&#xA;&#x9;&#x9;UnitVisitStateEnum.DEPARTED.equals(ufv.getUfvVisitState())) {&#xA;&#x9;    emailSender.custSendEmail(emailFrom,emailTo,&quot; BDA error for Booking &quot;+ bdaBookingNum+ &quot; and Unit &quot; +ctrId ,emailBody + &quot;VesVoy: &quot; + vesvoyBda + &quot; sailed. Could not apply BDA.&quot;+note);&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_BDA_002. VesVoy: &quot; + vesvoyBda + &quot; sailed. Could not apply BDA.&quot;);&#xA;&#xA;&#x9;}&#xA;&#xA;&#xA;&#x9;def n4BlNum = unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;);&#xA;log( &quot;3- n4BlNum = &quot; + n4BlNum + &quot; bdaBookingNum = &quot; + bdaBookingNum);&#xA;&#x9;def bdaBookingNumCompare = null;&#xA;&#x9;&#xA;// FACTS message processing during NV&#xA;&#x9;if (n4BlNum!=null &amp;&amp; n4BlNum.contains(&quot;DO NOT EDIT-NEWVES:&quot;))&#xA;&#x9;{&#xA;&#x9;&#x9;if( n4BlNum != null &amp;&amp; n4BlNum.length() &gt; 26 ) {&#xA;&#x9;&#x9;&#x9;n4BlNum = n4BlNum.substring(0,26);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;bdaBookingNum = &quot;DO NOT EDIT-NEWVES:&quot;+bdaBookingNum;&#xA;&#x9;&#x9;bdaBookingNumCompare = &quot;DO NOT EDIT-NEWVES:&quot;+bdaBookingNumCompare;&#xA;&#xA;&#x9;} else {&#xA;&#x9;&#x9;if( n4BlNum != null &amp;&amp; n4BlNum.length() &gt; 7 ) {&#xA;&#x9;&#x9;&#x9;n4BlNum = n4BlNum.substring(0,7);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;// FACTS message processing during NV&#xA;&#xA;&#x9;log( &quot;n4BlNum = &quot; + n4BlNum + &quot; bdaBookingNum = &quot; + bdaBookingNum);&#xA;&#xA;&#x9;if ( n4BlNum != null &amp;&amp; bdaBookingNumCompare!= null &amp;&amp; !&quot;DO NOT EDIT-NEWVES:&quot;.equalsIgnoreCase(n4BlNum) &amp;&amp; !n4BlNum.equalsIgnoreCase(bdaBookingNumCompare)) {&#xA;log( &quot;if diff n4BlNum = &quot; + n4BlNum + &quot; bdaBookingNum = &quot; + bdaBookingNumCompare);&#xA;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo,&quot; BDA error for Booking &quot;+ bdaBookingNum+ &quot; and Unit &quot; +ctrId ,emailBody + &quot;Unit: &quot; + ctrId + &quot; Booking Num dismatch: N4 num=&quot; + n4BlNum + &quot;  BDA num=&quot; + bdaBookingNum+note);&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_BDA_003. Unit: &quot; + ctrId + &quot; Booking Num dismatch: N4 num=&quot; + n4BlNum + &quot;  BDA num=&quot; + bdaBookingNum);&#xA;&#x9;}&#xA;&#xA;&#x9;// if not export or import then return&#xA;&#x9;if ( !UnitCategoryEnum.EXPORT.equals(unit.getUnitCategory()) &amp;&amp; !UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory())) {&#xA;&#x9;&#x9;log( &quot;ERR_GVY_BDA_004. Unit: &quot; + ctrId + &quot; category is not EXPORT or IMPORT.&quot;);&#xA;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo,&quot; BDA error for Booking &quot;+ bdaBookingNum+ &quot; and Unit &quot; +ctrId ,emailBody + &quot;Unit: &quot; + ctrId + &quot; category is not EXPORT or IMPORT.&quot;+note);&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_BDA_004. Unit: &quot; + ctrId + &quot; category is not EXPORT or IMPORT.&quot;);&#xA;&#x9;}&#xA;&#xA;&#xA;&#xA;&#x9;// if N4 vesvoy is not equal to dba.vesvoy then return&#xA;&#x9;def vesvoyN4 = null;&#xA;&#x9;if(UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory()))  {&#xA;&#x9;    vesvoyN4 = unit.getFieldValue( &quot;unitActiveUfv.ufvActualIbCv.cvId&quot;);&#xA;&#x9;} else {&#xA;&#x9;    vesvoyN4 = unit.getFieldValue( &quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;);&#xA;&#x9;}&#xA;&#xA;    &#x9;def cmdyId = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;    &#x9;boolean isUnitSIT = &quot;SIT&quot;.equals(cmdyId) || &quot;SAT&quot;.equals(cmdyId) ? true : false&#xA;&#xA;&#x9;if ( !isUnitSIT &amp;&amp; vesvoyN4 != vesvoyBda &amp;&amp; !isBarge(vesvoyN4)) {&#xA;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo,&quot; BDA error for Booking &quot;+ bdaBookingNum+ &quot; and Unit &quot; +ctrId ,emailBody + &quot;vesvoy mismatch for unit; &quot; + ctrId + &quot;. vesvoyN4=&quot; + vesvoyN4 + &quot; vesvoyBda=&quot; + vesvoyBda+note);&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_BDA_006. vesvoy mismatch for unit; &quot; + ctrId + &quot;. vesvoyN4=&quot; + vesvoyN4 + &quot; vesvoyBda=&quot; + vesvoyBda);&#xA;&#x9;}&#xA;&#xA;&#x9;def oldDestPort = unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;);&#xA;&#x9;def oldConsinee = unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;);&#xA;&#x9;def consigneeN4 = unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;);&#xA;&#xA;&#x9;def misc2 = unit.getFieldValue(&quot;unitFlexString11&quot;);&#xA;&#xA;&#x9;if ( (n4BlNum == null || n4BlNum == &quot;&quot; || &quot;DO NOT EDIT-NEWVES:&quot;.equals(n4BlNum)) &amp;&amp; ( consigneeN4 != null &amp;&amp; (consigneeN4.contains( &quot;unapproved&quot;) ||&#x9;consigneeN4.contains( &quot;invalid assign&quot;)))) {&#xA;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsBlNbr&quot;, bdaBookingNum);&#xA;&#x9;}&#xA;&#xA;&#x9;def comments = &quot;&quot;;&#xA;&#x9;if ( (misc2 == null || !misc2.contains( &quot;C&quot;)) &amp;&amp; consigneeN4 != consigneeNameBda) {&#xA;&#x9;&#x9;// find BDA consignee in N4&#xA;&#x9;&#x9;def cneeGrp = ScopedBizUnit.findScopedBizUnit( consigneeIdBda, BizRoleEnum.SHIPPER);&#xA;&#x9;&#x9;if ( cneeGrp == null) {&#xA;&#x9;&#x9;&#x9;log( &quot;Consignee&quot; + consigneeNameBda + &quot; not configured in N4.&quot;);&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;unit.getUnitGoods().updateConsignee( cneeGrp);&#xA;&#x9;&#x9;&#x9;log( &quot;update consignee with BDA.&quot;);&#xA;&#x9;&#x9;&#x9;comments += &quot;RECON X &quot; + consigneeN4;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;                     log(&quot;misc2=&quot;+misc2+&quot; oldDestPort=&quot;+oldDestPort+&quot; destPortBda=&quot;+destPortBda);&#xA;&#x9;// Set dest&#xA;&#x9;// if export, disch=disch else disch=dest.&#xA;&#x9;String dest = destPortBda;&#xA;&#x9;// todo, not inbound, if inbound, get from booking?&#xA;&#x9;if(UnitCategoryEnum.EXPORT.equals(unit.getUnitCategory() ) ) {&#xA;&#x9;   if(oldDestPort != destPortBda) {&#xA;&#x9;      unit.setFieldValue(&quot;unitGoods.gdsDestination&quot;, dest);&#xA;&#x9;      comments += &quot; &quot; + oldDestPort + &quot; &quot; +  dest;&#xA;&#x9;   }&#xA;&#xA;&#x9;   def dischargePortN4 = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;&#x9;   UfvTransitStateEnum transitState = ufv.getUfvTransitState();&#xA;&#x9;   println( &quot;dischargePortN4 = &quot; + dischargePortN4);&#xA;&#x9;   try{&#xA;&#x9;      if ( discPortBda != dischargePortN4 ) {&#xA;&#x9;        def podRtgBda = RoutingPoint.findRoutingPoint( discPortBda)&#xA;&#x9;        if(podRtgBda == null){&#xA;&#x9;&#x9;  emailSender.custSendEmail(emailFrom,emailTo,&quot; BDA error for Booking &quot;+ bdaBookingNum+ &quot; and Unit &quot; +ctrId ,emailBody + &quot;Destination Port not a Routing Point. POD lookup NULL: &quot; + discPortBda+note);&#xA;&#x9;&#x9;  fail( &quot;ERR_GVY_BDA_007.6. Destination Port not a Routing Point. POD lookup NULL: &quot; + discPortBda);&#xA;&#x9;&#x9;}&#xA;&#x9;   &#x9;unit.getUnitRouting().setRtgPOD1(podRtgBda);&#xA;&#x9;   &#x9;def gvyInjAbdb = getGroovyClassInstance(&quot;GvyInjAbdb&quot;);&#xA;&#x9;   &#x9;gvyInjAbdb.setOBCarrierOnPODChng(ctrId, dischargePortN4, discPortBda);&#xA;&#x9;      }&#xA;&#x9;   }catch(Exception e){&#xA;&#x9;      e.printStackTrace()&#xA;&#x9;   }&#xA;        } else {&#xA;&#x9;   if ( misc2 == null || !misc2.contains( &quot;P&quot;)) {&#xA;                log(&quot;Change &quot;+destPortBda);&#xA;                if(oldDestPort != destPortBda) {&#xA;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsDestination&quot;, dest);&#xA;&#x9;&#x9;&#x9;comments += &quot; &quot; + oldDestPort + &quot; &quot; +  dest;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;//Added Code to Set&#xA;&#x9;&#x9;def dischargePortN4 = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;&#x9;&#x9;UfvTransitStateEnum transitState = ufv.getUfvTransitState();&#xA;&#x9;&#x9;println( &quot;dischargePortN4 = &quot; + dischargePortN4);&#xA;&#x9;&#x9;try{&#xA;&#x9;&#x9;   def pod = podLookup.lookupPod(dest);&#xA;&#x9;&#x9;   if ( pod != dischargePortN4  ) {&#xA;&#x9;&#x9;&#x9;   println(&quot;Sstting the POD to BDA DestPort&quot;+&quot;dischargePortN4 = &quot; + dischargePortN4+&quot; destPortBda :&quot;+pod)&#xA;&#x9;&#x9;&#x9;   def podRgtPoint = RoutingPoint.findRoutingPoint(pod);&#xA;&#x9;&#x9;&#x9;   if(podRgtPoint == null){&#xA;&#x9;&#x9;&#x9;      emailSender.custSendEmail(emailFrom,emailTo,&quot; BDA error for Booking &quot;+ bdaBookingNum+ &quot; and Unit &quot; +ctrId ,emailBody + &quot;POD Port not a Routing Point. POD lookup NULL: &quot; + dest+note);&#xA;&#x9;&#x9;&#x9;      fail( &quot;ERR_GVY_BDA_007.5. POD Port not a Routing Point. POD lookup NULL: &quot; + dest);&#xA;&#x9;&#x9;&#x9;   }&#xA;&#x9;&#x9;&#x9;   unit.getUnitRouting().setRtgPOD1(podRgtPoint);&#xA;&#x9;&#x9;&#x9;   def gvyInjAbdb = getGroovyClassInstance(&quot;GvyInjAbdb&quot;);&#xA;&#x9;&#x9;&#x9;   gvyInjAbdb.setOBCarrierOnPODChng(ctrId, dischargePortN4, pod);&#xA;&#x9;&#x9;   }&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;   e.printStackTrace()&#xA;&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;if ( tempBda.trim().length() !=0)&#xA;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempRequiredC&quot;, new Double( tempBda));&#xA;&#xA;&#x9;unit.setFieldValue(&quot;unitSealNbr1&quot;, sealBda);&#xA;&#x9;def shipper = Shipper.findOrCreateShipper( shipperIdBda, shipperNameBda);&#xA;&#x9;unit.getUnitGoods().updateShipper( shipper);&#xA;&#xA;&#x9;// A2 removed this setting&#xA;&#x9;//def conee = Shipper.findOrCreateShipper( consigneeIdBda, consigneeNameBda);&#xA;&#x9;//unit.getUnitGoods().updateConsignee( conee);&#xA;&#xA;&#x9;//def cmdy = Commodity.findCommodity( &quot;commodityBda&quot;);&#xA;&#x9;//if ( cmdy == null)&#xA;&#x9;//&#x9;fail( &quot;ERR_GVY_BDA_006. Commodity from BDA: &quot; + commodityBda + &quot; could not be found in N4.&quot;);&#xA;&#xA;&#x9;//unit.setFieldValue(&quot;unitGoods.gdsCommodity&quot;, cmdy);&#xA;&#xA;&#x9;//unit.setFieldValue(&quot;unitRemark&quot;, unit.getFieldValue(&quot;unitRemark&quot;) + &quot; &quot; + comments + &quot; &quot; + commodityBda);&#xA;&#x9;unit.setFieldValue(&quot;unitRemark&quot;, unit.getFieldValue(&quot;unitRemark&quot;) + &quot; &quot; + comments);&#xA;&#xA;&#xA;    }&#xA;&#xA;    //A1 - Tracker Change&#xA;    def changes = tracker.getChanges(unit);&#xA;    if(changes != null &amp;&amp; changes.getFieldChangeCount() != 0) {&#xA;        unit.recordUnitEvent(com.navis.argo.business.atoms.EventEnum.UNIT_PROPERTY_UPDATE,changes , &quot;Field Updated BDA Data&quot;);&#xA;    }&#xA;&#xA;&#x9;def event = new GroovyEvent( null, unit);&#xA;&#x9;event.postNewEvent( &quot;BDA&quot;, &quot;ACETS: &quot; + recorder);&#xA;}&#xA;&#xA;    private boolean isBarge( String vesvoy) {&#xA;&#x9;//def gvyBaseClass = new GroovyInjectionBase()&#xA;  &#x9;def gvyUtil = getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;  &#x9;def vType = gvyUtil.getVesselClassType( vesvoy);&#xA;  &#x9;return vType == &quot;BARGE&quot; ? true : false;&#xA;    }&#xA;&#xA;    private boolean isStowplan(unit) {&#xA;       def remark = unit.unitRemark;&#xA;       if(remark == null) return false;&#xA;       return remark.startsWith(&quot;Stowplan Data&quot;);&#xA;    }&#xA;}" />
<digital-asset id="GvyCmisExceptionProcess" short-description="GvyCmisExceptionProcess" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;&#xA;public class GvyCmisExceptionProcess&#xA;{&#xA;   public void processException(Object event, Exception e)&#xA;   {&#xA;      def unitId = ''&#xA;     def eventType = ''&#xA;     try&#xA;    {&#xA;       def unit = event.getEntity()&#xA;       def gvyEventObj = event.getEvent()&#xA;       eventType =  gvyEventObj.getEventTypeId()  &#xA;       //Getting UNIT_OBJ from EQUIP_OBJ&#xA;       if(unit instanceof EquipmentState){&#xA;         GroovyInjectionBase gvyBaseClass =  new GroovyInjectionBase() &#xA;         def unitDetails = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUnitDetail&quot;); &#xA;         unit = getUnitFromEquipment(unit)&#xA;       }&#xA;&#x9;  &#xA;       unitId = unit.getFieldValue(&quot;unitId&quot;) &#xA;&#xA;      def exceptionMsg = ExceptionToString(ex)&#xA;      def msg = &quot;&lt;CmisFeedErrorMsg  unit=\'&quot;+unitId+&quot;\' event=\'&quot;+eventType+&quot;\' errorStack=\'&quot;+exceptionMsg+&quot;\' /&gt;&quot;;&#x9;      &#xA;      println(msg) &#xA;      //gvyBaseClass.sendXml(msg)&#xA;     }&#xA;     catch(Exception ex)&#xA;     {&#xA;        processException(ex) &#xA;     }&#xA;   }&#xA;&#xA;   public void processException(Exception e)&#xA;   {&#xA;       def exceptionMsg = ExceptionToString(ex)   &#xA;       def msg = &quot;&lt;CmisFeedErrorMsg  errorStack=\'&quot;+exceptionMsg+&quot;\' /&gt;&quot;  &#xA;       println(msg) &#xA;       //gvyBaseClass.sendXml(msg)&#xA;   }&#xA;&#xA;   /* Method converts the Exception class to a String to pass it out */ &#xA;   public String ExceptionToString(Exception e)&#xA;   { &#xA;     StringBuffer strBuff = new StringBuffer();&#x9;&#xA;     StackTraceElement[] stackElement = e.getStackTrace();&#xA;     for(eStr in stackElement){&#xA;        strBuff.append(eStr);&#xA;       errorBuff.append(&quot;\r\n&quot;);&#xA;     }&#xA;     return  strBuff.toString(); &#xA;   }&#xA;&#xA;}" />
<digital-asset id="GvyEquipmentLookup" short-description="GvyEquipmentLookup" is-pre-deployed="N" groovy-code="import com.navis.argo.business.reference.Accessory;&#xA;import com.navis.argo.business.reference.Equipment;&#xA;/*&#xA;* Get the n4 equipment object.&#xA;*/&#xA;class GvyEquipmentLookup {&#xA;    public Object getEquipment(Object id) {&#xA;        return Equipment.findEquipment(id);&#xA;    }&#xA;}" />
<digital-asset id="GvyCmisEventField" short-description="GvyCmisEventField" is-pre-deployed="N" groovy-code="public class GvyCmisEventField {&#xA;   &#xA;    String fieldName = null;&#xA;    String previousValue = null;&#xA;    String currentValue = null;&#xA;&#x9; &#xA;    public void setFieldName(String fieldName)&#xA;   {&#xA;          this.fieldName = fieldName;&#xA;    }&#xA;    public String getFieldName()&#xA;   {&#xA;        return fieldName;&#xA;    }&#xA;  &#xA;    public void setpreviousValue(String previousValue)&#xA;   {&#xA;        this.previousValue = previousValue; &#xA;    }&#xA;    public String getpreviousValue()&#xA;   {&#xA;        return previousValue;&#xA;    }&#xA;&#xA;     public void setCurrentValue(String currentValue)&#xA;    {&#xA;        this.currentValue = currentValue; &#xA;     }&#xA;     public String getCurrentValue()&#xA;    {&#xA;          return currentValue;&#xA;     }&#xA; &#xA;}" />
<digital-asset id="GvyXmlMsgFormatter" short-description="Groovy Xml MsgFormatter " is-pre-deployed="N" groovy-code="public class GvyXmlMsgFormatter {&#xA;&#xA;  public String doIt(String msgObj) &#xA;  {&#xA;    println(&quot;In Class GvyXmlMsgFormatter.doIt()&quot;)&#xA;&#xA;    def gvyXmlMsg = createGroovyXml(msgObj)&#xA;    return gvyXmlMsg;&#xA;  }&#xA;&#x9;&#xA;  public String  createGroovyXml(String msgString)&#xA;  {&#xA;     def strBuff = new StringBuffer();&#xA;     strBuff.append( '&lt;GroovyMsg');&#xA;     strBuff.append(' '+msgString);&#xA;     strBuff.append( '/&gt;');&#xA;     return strBuff.toString();&#xA;   }&#xA;&#xA;  &#xA;}" />
<digital-asset id="StuffUnit" short-description="GroovyStuffUnit" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.atoms.EventEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.framework.AllOtherFrameworkPropertyKeys&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import org.apache.commons.io.IOUtils&#xA;&#xA;/**  A1 2/23/09  Undoing Stuff workaround&#xA; A2 5/26/09  Find unit in complex&#xA; A3 06/02/09 Steven Bauer&#x9; 403 - Supress all updates before GetNV&#xA; A4 08/14/09 Steven Bauer&#x9; EP000100565, should have been using cmdyId not name.&#xA; **/&#xA;class StuffUnit extends GroovyInjectionBase {&#xA;&#xA;    public String execute(Map inParameters) {&#xA;        com.navis.argo.ContextHelper.setThreadExternalUser(&quot;ACETS&quot;);&#xA;        def ctrId = (String) inParameters.get(&quot;equipment-id&quot;);&#xA;        //def stuffManager = getGroovyClassInstance(&quot;StuffManager&quot;);&#xA;        try {&#xA;            def recorder = (String) inParameters.get(&quot;recorder&quot;);&#xA;&#xA;            // Find the empty UFV&#xA;            //def emptyUfv = findActiveUfv(ctrId);&#xA;            def unitLookup = getGroovyClassInstance(&quot;GvyUnitLookup&quot;);&#xA;            def emptyUfv = unitLookup.getUfvActiveInComplex(ctrId);&#xA;&#xA;            if( emptyUfv == null)&#xA;                fail((new StringBuilder()).append(&quot;ERR_GVY_STUFF_001. Could not find Active UFV for &quot;).append(ctrId).toString());&#xA;            // Stuff it, and get back the new full UFV and Unit&#xA;            def stuffedUfv = null;&#xA;            def strippedUfv = null;&#xA;            def action = &quot;&quot;;&#xA;&#xA;            try {&#xA;                action = &quot;stuff &quot;;&#xA;                // A1&#xA;                //stuffedUfv = stuffManager.coreStuffUfv(emptyUfv, null);&#xA;                this.log(&quot;Found empty UFV, N4 is going to stuff the empty UFV&quot;)&#xA;                stuffedUfv = stuffUfv(emptyUfv, null);&#xA;            } catch ( BizViolation ex) {&#xA;                try {&#xA;                    action = &quot;stuff or strip &quot;;&#xA;                    // check if the commodity id is ok.&#xA;                    def ufvUnit = emptyUfv.getUfvUnit();&#xA;                    // A3&#xA;                    if(isStowplan(ufvUnit)) return;&#xA;&#xA;                    if ( ufvUnit.isStorageEmpty())&#xA;                        fail((new StringBuilder()).append(&quot;ERR_GVY_STUFF_002. Could not STRIP EMPTY unit: &quot;).append(ctrId).toString());&#xA;&#xA;                    def stripGoods = ufvUnit.getUnitGoods();&#xA;                    /*if ( stripGoods != null) {&#xA;                        def stripComm = stripGoods.getGdsCommodity();&#xA;                        if ( stripComm != null) {&#xA;                            def commId = stripComm.getCmdyId();&#xA;                            //def commId = stripComm.getCmdyShortName();&#xA;                            if ( commId.length() &lt; 3)&#xA;                                fail((new StringBuilder()).append(&quot;ERR_GVY_STUFF_003. Could not STRIP unit: &quot;).append(ctrId).append(&quot; with COMMODITY code: &quot;).append(commId).toString());&#xA;&#xA;                            if ( !commId.substring(0, 3).equalsIgnoreCase( &quot;AUT&quot;)&#xA;                                    &amp;&amp; !commId.substring(0, 3).equalsIgnoreCase( &quot;CFS&quot;)&#xA;                                    &amp;&amp; !commId.substring(0, 3).equalsIgnoreCase( &quot;COB&quot;)) {&#xA;                                fail((new StringBuilder()).append(&quot;ERR_GVY_STUFF_003. Could not STRIP unit: &quot;).append(ctrId).append(&quot; with COMMODITY code: &quot;).append(commId).toString());&#xA;                            }&#xA;                        } else {&#xA;                            fail((new StringBuilder()).append(&quot;ERR_GVY_STUFF_003. Could not STRIP unit: &quot;).append(ctrId).append(&quot; with no COMMODITY code. &quot;).toString());&#xA;                        }&#xA;                    } else {&#xA;                        fail((new StringBuilder()).append(&quot;ERR_GVY_STUFF_003. Could not STRIP unit: &quot;).append(ctrId).append(&quot; with no avail COMMODITY code. &quot;).toString());&#xA;                    }*/&#xA;&#xA;                    strippedUfv = stripUfvAndRecordEvent( emptyUfv, null, &quot;Stuff Groovy Code&quot;);&#xA;                    def strippedUnit = strippedUfv.getUfvUnit();&#xA;                    action = &quot;strip then stuff again &quot;;&#xA;                    // record strip event.&#xA;                    //strippedUnit.recordUnitEvent(EventEnum.UNIT_STRIP, null, &quot;Stripped by &quot; + recorder);&#xA;                    // A1&#xA;                    stuffedUfv = stuffUfv( strippedUfv, null);&#xA;                    // Attempt at a WO fix, may cause more harm than good&#xA;                    //stuffedUfv = stuffManager.coreStuffUfv(strippedUfv, null);&#xA;                } catch ( BizViolation ex1) {&#xA;                    System.out.println(&quot;Exception for&quot;+ctrId+&quot; &quot;+ex1.getMessage() );&#xA;                    ex1.printStackTrace();&#xA;                    // TODO correctly rethrow ERR_003.&#xA;                    fail((new StringBuilder()).append(&quot;ERR_GVY_STUFF_004. Could not &quot;).append(action).append(ctrId).toString()+ex1.getMessage());&#xA;                }&#xA;            }&#xA;&#xA;            def stuffedUnit = stuffedUfv.getUfvUnit();&#xA;            // Update the routing&#xA;            String fcyId = stuffedUfv.getUfvFacility().getFcyId();&#xA;            this.log(&quot;Fcy for message : &quot;+fcyId);&#xA;&#xA;            def carrierModeId = (String) inParameters.get(&quot;routing-carrier-mode&quot;);&#xA;            def carrierId = (String) inParameters.get(&quot;routing-carrier-id&quot;);&#xA;            def pod1Id = (String) inParameters.get(&quot;routing-pod-1&quot;);&#xA;            def polId = (String) inParameters.get(&quot;routing-pol&quot;);&#xA;            def destination = (String) inParameters.get(&quot;routing-destination&quot;);&#xA;            if (&quot;ANK&quot;.equalsIgnoreCase(fcyId) &amp;&amp; &quot;KQA&quot;.equalsIgnoreCase(destination)) {&#xA;                pod1Id = &quot;DUT&quot;;&#xA;            }&#xA;            if (&quot;DUT&quot;.equalsIgnoreCase(fcyId) &amp;&amp; &quot;KQA&quot;.equalsIgnoreCase(destination)) {&#xA;                pod1Id = &quot;KQA&quot;&#xA;                carrierModeId = &quot;VESSEL&quot;;&#xA;            }&#xA;            this.log(&quot;Carrier id : &quot;+carrierId);&#xA;            def carrierMode = LocTypeEnum.getEnum( carrierModeId);&#xA;this.log(&quot;Fcy : &quot;+getFacility());&#xA;            def obCarrier = CarrierVisit.findCarrierVisit(getFacility(), carrierMode, carrierId);&#xA;            this.log(&quot;OB Carrier id : &quot;+obCarrier);&#xA;            if ( obCarrier == null)&#xA;                fail((new StringBuilder()).append(&quot;ERR_GVY_STUFF_005. Could not find Carrier for &quot;).append(ctrId).toString());&#xA;            stuffedUfv.updateObCv(obCarrier);&#xA;            this.log(&quot;update OB CV : &quot;+stuffedUfv.getUfvObCv().getCvId());&#xA;            stuffedUfv.setUfvActualObCv(obCarrier);&#xA;            this.log(&quot;update actual OB CV 1: &quot;+stuffedUfv.getUfvObCv().getCvId());&#xA;            this.log(&quot;update actual OB CV 2: &quot;+stuffedUfv.getUfvActualObCv().getCvId());&#xA;            def routing = stuffedUnit.getUnitRouting();&#xA;            if ( routing == null)&#xA;                fail((new StringBuilder()).append(&quot;ERR_GVY_STUFF_006. Could not find Routing for &quot;).append(ctrId).toString());&#xA;&#xA;            routing.setRtgDeclaredCv(obCarrier);&#xA;            if ( pod1Id != null)&#xA;                routing.setRtgPOD1(RoutingPoint.findRoutingPoint(pod1Id));&#xA;            if ( polId != null)&#xA;                routing.setRtgPOL(RoutingPoint.findRoutingPoint(polId));&#xA;            stuffedUnit.updateUnitRouting(routing);&#xA;&#xA;            GoodsBase goods = stuffedUnit.getUnitGoods();&#xA;            if ( destination != null)&#xA;                goods.setGoodsDestination(destination);&#xA;            // update other info&#xA;            def sealNum = (String) inParameters.get(&quot;seal-1&quot;);&#xA;            def consigneeId = (String) inParameters.get(&quot;consignee-id&quot;);&#xA;            def consigneeName = (String) inParameters.get(&quot;consignee-name&quot;);&#xA;            def shipperId = (String) inParameters.get(&quot;shipper-id&quot;);&#xA;            def shipperName = (String) inParameters.get(&quot;shipper-name&quot;);&#xA;            def remark = (String) inParameters.get(&quot;remark&quot;);&#xA;            def oogBack = (String) inParameters.get(&quot;oog-back&quot;);&#xA;            def oogFront = (String) inParameters.get(&quot;oog-front&quot;);&#xA;            def oogLeft = (String) inParameters.get(&quot;oog-left&quot;);&#xA;            def oogRight = (String) inParameters.get(&quot;oog-right&quot;);&#xA;            def oogHeight = (String) inParameters.get(&quot;oog-height&quot;);&#xA;            def commodityId = (String) inParameters.get(&quot;commodity-id&quot;);&#xA;            def commodityName = (String) inParameters.get(&quot;commodity-name&quot;);&#xA;            def weight = (String) inParameters.get(&quot;unit-gross-weight&quot;);&#xA;            def temperature = (String) inParameters.get(&quot;temperature&quot;)&#xA;            def tempUnit = (String) inParameters.get(&quot;tempUnit&quot;)&#xA;            def isHaz = (String) inParameters.get(&quot;is-haz&quot;);&#xA;            try {&#xA;                this.log(&quot;Start Hazard refresh - clear haz in N4 first, is Haz? : &quot;+isHaz);&#xA;                stuffedUnit.getUnitGoods().clearHazardsRef();&#xA;                String transitState = stuffedUfv.getUfvTransitState().getKey();&#xA;                transitState = transitState.substring(4);&#xA;                this.log(&quot;Unit's transit state : &quot;+transitState);&#xA;                if (&quot;Y&quot;.equalsIgnoreCase(isHaz) &amp;&amp; (commodityId != null &amp;&amp; commodityId.contains(&quot;CFS&quot;))) {&#xA;                    //callTDPHazRefreshService(ctrId, fcyId, transitState);&#xA;                }&#xA;                this.log(&quot;end Hazard Refresh&quot;);&#xA;            } catch (Exception e) {&#xA;                this.log(&quot;Error thrown while calling WS : &quot;+e);&#xA;            }&#xA;            if ( sealNum != null)&#xA;                stuffedUnit.setUnitSealNbr1( sealNum);&#xA;            if (&quot;LCL&quot;.equalsIgnoreCase(shipperName)) {&#xA;                shipperId = &quot;LCL&quot;;&#xA;            }&#xA;            if (&quot;LCL&quot;.equalsIgnoreCase(consigneeName)) {&#xA;                consigneeId = &quot;LCL&quot;;&#xA;            }&#xA;            if ( shipperId != null || shipperName != null) {&#xA;                Shipper shipper = Shipper.findOrCreateShipper(shipperId, shipperName);&#xA;                //goods.setGdsShipperBzu(shipper);&#xA;                goods.updateShipper( shipper);&#xA;            }&#xA;            if ( consigneeId != null || consigneeName != null) {&#xA;                Shipper consignee = Shipper.findOrCreateShipper(consigneeId, consigneeName);&#xA;                //goods.setGdsConsigneeBzu(consignee);&#xA;                goods.updateConsignee( consignee);&#xA;            }&#xA;            if ( weight != null)&#xA;                stuffedUnit.updateGoodsAndCtrWtKg( new Double(weight));&#xA;            if (temperature != null &amp;&amp; temperature.trim() != &quot;&quot;) {&#xA;                ReeferRqmnts reefer = goods.getGdsReeferRqmnts();&#xA;                try {&#xA;                    Double tempVal = new Double(temperature);&#xA;                    if (tempUnit == null || tempUnit.trim().equalsIgnoreCase(&quot;&quot;) || &quot;F&quot;.equalsIgnoreCase(tempUnit)) {&#xA;                        tempVal = convertTempToCelsius(tempVal);&#xA;                        stuffedUfv.setUfvFlexString07(temperature);&#xA;                    } else {&#xA;                        stuffedUfv.setUfvFlexString07(convertTempToFarenheit(tempVal).toString());&#xA;                    }&#xA;                    if (reefer == null) {&#xA;                        reefer = new ReeferRqmnts();&#xA;                    }&#xA;                    reefer.setRfreqTempLimitMinC(tempVal);&#xA;                    reefer.setRfreqTempRequiredC(tempVal);&#xA;                    goods.setGdsReeferRqmnts(reefer);&#xA;&#xA;                } catch (Exception e) {&#xA;                    this.log(&quot;Failed to update temperature for &quot;+ctrId + &quot; &gt;&gt; temp value : &quot;+temperature);&#xA;                    this.log(e.getMessage());&#xA;                    e.printStackTrace();&#xA;                }&#xA;            }&#xA;            stuffedUnit.updateRemarks(remark);&#xA;            if ( oogBack != null &amp;&amp; oogFront != null &amp;&amp; oogLeft != null &amp;&amp; oogRight != null &amp;&amp; oogHeight != null)&#xA;                stuffedUnit.updateOog( new Integer(oogBack), new Integer(oogFront), new Integer(oogLeft), new Integer(oogRight), new Integer(oogHeight));&#xA;&#xA;            //def cmdity = Commodity.findCommodity( &quot;AUTO&quot;);&#xA;            //stuffedUnit.updateCommodity( cmdity);&#xA;&#xA;            if ( commodityId != null) {&#xA;                def unitComm = Commodity.findOrCreateCommodity(commodityId);&#xA;                //def unitGoods = stuffedUnit.getUnitGoods();&#xA;                unitComm.setCmdyShortName( commodityName);&#xA;                goods.setGdsCommodity(unitComm);&#xA;            }&#xA;&#xA;            // Update the hazardous info&#xA;            //def hazardItem = stuffedUnit.getUnitGoods().attachHazard(&quot;3&quot;, &quot;1203&quot;)&#xA;            //hazardItem.setHzrdiPageNumber(&quot;52&quot;);&#xA;            // Record an event&#xA;            stuffedUnit.recordUnitEvent(EventEnum.UNIT_STUFF, null, &quot;Stuffed by &quot; + recorder);&#xA;            return &quot;done via Groovy, unit is: &quot; + stuffedUnit;&#xA;        } catch ( Exception ex) {&#xA;            fail((new StringBuilder()).append(ex.toString()).append(&quot;ERR_GVY_STUFF_999. Could not STUFF unit: &quot;).append(ctrId).toString());&#xA;            ex.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;    private boolean isStowplan(unit) {&#xA;        def remark = unit.unitRemark;&#xA;        if(remark == null) return false;&#xA;        return remark.startsWith(&quot;Stowplan Data&quot;);&#xA;    }&#xA;&#xA;    private Double convertTempToCelsius(Double temp) {&#xA;        return (temp - 32) /1.8;&#xA;    }&#xA;&#xA;    private Double convertTempToFarenheit(Double temp) {&#xA;        return temp * 1.8 +32;&#xA;    }&#xA;    private boolean callTDPHazRefreshService(String inUnitNbr, String facility, String transitState) throws Exception {&#xA;        this.log(&quot;Start of WS call&quot;);&#xA;        InputStream stream = null;&#xA;        try {&#xA;            //@todo configure the WS URL in General Reference&#xA;            GeneralReference genRef = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;RESTHAZTDP&quot;, &quot;URL&quot;);&#xA;            URL url = new URL(genRef.getRefValue1() + &quot;/hazmatinterface/refreshunithaz/?&quot;&#xA;                    + &quot;equipmentId=&quot; + inUnitNbr + &quot;&amp;facilityId=&quot;+ facility + &quot;&amp;transitState=&quot; + transitState);&#xA;&#xA;            this.log(&quot;TDP Haz Service URL : &quot; + url.toString());&#xA;            URLConnection connection = url.openConnection();&#xA;            this.log(&quot;Connection : &quot;+connection);&#xA;            stream = connection != null ? connection.getInputStream() : null;&#xA;            this.log(&quot;Stream : &quot;+stream);&#xA;            if (stream != null) {&#xA;                String StringFromInputStream = IOUtils.toString(stream, &quot;UTF-8&quot;);&#xA;                this.log(&quot;String format of stream : &quot;+StringFromInputStream);&#xA;            } else {&#xA;                RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                        &quot;No hazard record found from webservice for Unit:&quot; + inUnitNbr + &quot; in facility :&quot; + facility));&#xA;            }&#xA;        } catch (Exception e) {&#xA;            RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__SERVICE_NOT_AVAILABLE, null,&#xA;                    &quot; Haz Refresh Service call failed for :&quot; + inUnitNbr + &quot; in facility :&quot; + facility));&#xA;            return false;&#xA;        } finally {&#xA;            if (stream != null) {&#xA;                stream.close();&#xA;            }&#xA;        }&#xA;        this.log(&quot;End of WS call&quot;);&#xA;        return true;&#xA;    }&#xA;}" />
<digital-asset id="GvyCmisRoutingDetail" short-description="GvyCmisRoutingDetail" is-pre-deployed="N" groovy-code="/*&#xA;* srno  Doer  Date       Change&#xA;* A1    GR    11/05/10   Added UNIT_STRIP to the List&#xA;* A2    GR    07/25/11  Updated from Null to % for overdimension fields&#xA;*/&#xA;&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.argo.business.reference.UnLocCode&#xA;&#xA;public class GvyCmisRoutingDetail {&#xA;&#xA;    public String doIt(Object gvyTxtMsgFmt, Object unitObj, String eventMsg) {&#xA;        println(&quot;In Class GvyCmisRoutingDetail.doIt()&quot;)&#xA;        def u = unitObj&#xA;        def routingFieldAttr = ''&#xA;        try {&#xA;            //SHIPPER POOL&#xA;            def shipperPool = u.getFieldValue(&quot;unitRouting.rtgOPL.pointId&quot;);&#xA;            def shipperPoolAttr = gvyTxtMsgFmt.doIt('shipperPool', shipperPool)&#xA;&#xA;            //DISCHARGE PORT&#xA;            def dischargePort = u.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;            dischargePort = dischargePort != null ? dischargePort.trim() : ''&#xA;            def dischargePortAttr = gvyTxtMsgFmt.doIt('dischargePort', dischargePort)&#xA;&#xA;            //DPORT&#xA;            def dPort = u.getFieldValue(&quot;unitGoods.gdsDestination&quot;)&#xA;            dPort = getDestPort(dPort);&#xA;            dPort = dPort != null ? dPort.trim() : ''&#xA;            def dPortAttr = gvyTxtMsgFmt.doIt('dPort', dPort)&#xA;&#xA;            //LOAD PORT&#xA;            def loadPort = ''&#xA;            def transitState = u.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;            transitState = transitState != null ? transitState.getKey() : ''&#xA;            if (transitState.equals(&quot;S60_LOADED&quot;)) {&#xA;                loadPort = '%'&#xA;            } else {&#xA;                loadPort = u.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;)&#xA;            }&#xA;            loadPort = loadPort != null ? loadPort.trim() : ''&#xA;            def loadPortAttr = gvyTxtMsgFmt.doIt('loadPort', loadPort)&#xA;&#xA;            //RET_PORT&#xA;            def retport = u.getFieldValue(&quot;unitRouting.rtgReturnToLocation&quot;);&#xA;            def retportAttr = gvyTxtMsgFmt.doIt('retPort', retport)&#xA;&#xA;            //OVER_DIMENSIONS ATTRIBUTES&#xA;            def overLongBack = &quot;%&quot;;   //A2 - updated from null to %&#xA;            def overLongFront = &quot;%&quot;;&#xA;            def overWideLeft = &quot;%&quot;;&#xA;            def overWideRight = &quot;%&quot;;&#xA;            def overHeight = &quot;%&quot;;&#xA;&#xA;            if (eventMsg.equals('UNIT_IN_GATE') || eventMsg.equals('REVIEW_FOR_STOW') || eventMsg.equals('UNIT_STRIP')) {&#xA;                //A1&#xA;                overLongBack = convertCmToInch(u.getFieldValue(&quot;unitOogBackCm&quot;))&#xA;                overLongBack = overLongBack != null ? overLongBack : 0&#xA;&#xA;                overLongFront = convertCmToInch(u.getFieldValue(&quot;unitOogFrontCm&quot;))&#xA;                overLongFront = overLongFront != null ? overLongFront : 0&#xA;&#xA;                overWideLeft = convertCmToInch(u.getFieldValue(&quot;unitOogLeftCm&quot;))&#xA;                overWideLeft = overWideLeft != null ? overWideLeft : 0&#xA;&#xA;                overWideRight = convertCmToInch(u.getFieldValue(&quot;unitOogRightCm&quot;))&#xA;                overWideRight = overWideRight != null ? overWideRight : 0&#xA;&#xA;                overHeight = convertCmToInch(u.getFieldValue(&quot;unitOogTopCm&quot;))&#xA;                overHeight = overHeight != null ? overHeight : 0&#xA;            }&#xA;&#xA;            def overBackAttr = gvyTxtMsgFmt.doIt('overLongBack', overLongBack)&#xA;            def overFrontAttr = gvyTxtMsgFmt.doIt('overLongFront', overLongFront)&#xA;            def overLeftAttr = gvyTxtMsgFmt.doIt('overWideLeft', overWideLeft)&#xA;            def overRightAttr = gvyTxtMsgFmt.doIt('overWideRight', overWideRight)&#xA;            def overTopAttr = gvyTxtMsgFmt.doIt('overHeight', overHeight)&#xA;&#xA;&#xA;            routingFieldAttr = shipperPoolAttr + dischargePortAttr + dPortAttr + loadPortAttr + retportAttr + overBackAttr + overFrontAttr + overLeftAttr + overRightAttr + overTopAttr&#xA;&#xA;            //println('routingFieldAttr : '+routingFieldAttr)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;&#xA;        return routingFieldAttr&#xA;&#xA;    }&#xA;&#xA;    //convert Cm To Inch&#xA;    private Object convertCmToInch(Object cmValue) {&#xA;        def inchValue = null&#xA;        def api = new GroovyApi();&#xA;        if (cmValue != null &amp;&amp; cmValue &gt; 0) {&#xA;            def inchVal = cmValue * 0.393700787;&#xA;            inchVal = new BigDecimal(inchVal).setScale(2, BigDecimal.ROUND_HALF_UP);&#xA;            inchValue = Math.round(inchVal)&#xA;        }&#xA;        return inchValue&#xA;    }&#xA;&#xA;    public String getDestPort(String destPort) {&#xA;        def destinationPort = destPort&#xA;        destinationPort = destinationPort != null ? destinationPort : ''&#xA;&#xA;        def rtgPointObj = RoutingPoint.findRoutingPoint(destinationPort)&#xA;        if (rtgPointObj == null) {&#xA;            def UnLocCodeObj = UnLocCode.findUnLocCode(destinationPort)&#xA;            if (UnLocCodeObj != null) {&#xA;                destinationPort = destinationPort.substring(2)&#xA;            }&#xA;            println('UnLocCodeObj ::' + UnLocCodeObj + &quot;       destinationPort::&quot; + destinationPort)&#xA;        }&#xA;        return destinationPort&#xA;    }&#xA;&#xA;}//Class Ends&#xA;" />
<digital-asset id="GvyMsgFormatter" short-description="Groovy Txt Msg Formatter" is-pre-deployed="N" groovy-code="//Class Formats the message string by appending Attr &amp; Attr value &#xA;&#xA;public class GvyMsgFormatter {&#xA;&#xA;   public String doIt(String attrName,Object attrValue ) &#xA;  {&#xA;     try&#xA;    {&#xA;       def fmtValue = ''&#xA;       if(attrValue != null)&#xA;       {&#xA;        def attrFmtValue= replaceQuotes(attrValue)&#xA;        fmtValue = attrName+'=\''+attrFmtValue+'\' '&#xA;        return fmtValue;&#xA;       }&#xA;       else&#xA;       {&#xA;         return fmtValue;&#xA;        }&#xA;     }catch(Exception e){&#xA;        e.printStackTrace()&#xA;     }&#xA;   }&#xA;&#xA;  public  String replaceQuotes(Object message)&#xA;   {&#xA;     def msg = message.toString();&#xA;     def replaceAmp = msg.replaceAll('&amp;', '&amp;amp;');&#xA;           replaceAmp = replaceAmp.replaceAll('\'', '&amp;apos;');&#xA;     return replaceAmp; &#xA;    }&#xA; &#xA;}&#xA;" />
<digital-asset id="GvyCmisRtgProcessDetail" short-description="GvyCmisRtgProcessDetail" is-pre-deployed="N" groovy-code="/*&#xA;* SrNo  Doer Date        Change&#xA;* A1    GR   06/24/2010  Added DS AUTOCY=CY&#xA;* A2    GR   09/08/10    Added PlanDisp for TTNU event Return to Customer (SN4Q change)&#xA;* A3    GR   12/23/11    Commodity SIT-YB checkcode change &#xA;*/&#xA;public class GvyCmisRtgProcessDetail {&#xA;&#xA; public String doIt(String strMsgType, Object gvyTxtMsgFmt, Object unitObj, Object gvyBaseClass)    &#xA; {&#xA;   println(&quot;In Class GvyCmisRtgProcessDetail.doIt()&quot;)&#xA;   def u =  unitObj&#xA;   def rtgProcessFieldAttr = ''&#xA;&#xA;   try&#xA;   {&#xA;    def _freightkind=u.getFieldValue(&quot;unitFreightKind&quot;)&#xA;    def freightkindKey = _freightkind != null ? _freightkind.getKey() : ''&#xA;&#xA;    def _category=u.getFieldValue(&quot;unitCategory&quot;)&#xA;    def categoryKey = _category != null ? _category.getKey() : ''&#xA;   &#xA;    def _transitState=u.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;    def transitStatekey = _transitState != null ? _transitState.getKey() : ''&#xA;&#xA;    def _drayStatus=u.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;    def drayStatusKey = _drayStatus!= null ? _drayStatus.getKey() : ''&#xA;&#xA;    def group=u.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;)&#xA;    group = group != null ? group : ''&#xA;&#xA;    def lkpSlot=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)   &#xA;    lkpSlot = lkpSlot != null ? lkpSlot : ''&#xA;   &#xA;   def expGateBkgNbr = u.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;)&#xA;&#xA;    def lkpLocType=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;    lkpLocType = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;&#xA;    def gdsBlNbr = u.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;)&#xA;&#xA;    //COMMODITY&#xA;    def designatedTrucker=u.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;    designatedTrucker = designatedTrucker != null ? (designatedTrucker.length() == 3 ? designatedTrucker+' ' : designatedTrucker)  : ''&#xA;       &#xA;    def _commodityId=u.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;)&#xA;    def cmdtyId = _commodityId != null ? _commodityId : ''&#xA;    def commodityId= commodityCode(cmdtyId,group,designatedTrucker,lkpSlot)&#xA;    def commodityAttr= gvyTxtMsgFmt.doIt('commodity',commodityId)&#xA;     &#xA;    //DIR&#xA;    def dir =  getDir(categoryKey,transitStatekey,freightkindKey,expGateBkgNbr,lkpLocType,gdsBlNbr)&#xA;    def dirAttr = gvyTxtMsgFmt.doIt('dir',dir)&#xA; &#xA;    //DSC&#xA;    def dsc = getDsc(strMsgType,freightkindKey,drayStatusKey,group,lkpSlot,cmdtyId,gvyBaseClass) &#xA;    def dscAttr = gvyTxtMsgFmt.doIt('dsc',dsc)&#xA;&#xA;    //PLAN DISP&#xA;    def planDisp = getPlanDisp(drayStatusKey, group, lkpSlot)&#xA;&#xA;    println(&quot;Testing YB_ASSIGN for planDsip    &quot;+strMsgType);&#xA;     if (&quot;YB_ASSIGN&quot;.equalsIgnoreCase(strMsgType)) {&#xA;       planDisp = '7'&#xA;     }&#xA;&#xA;    //A3 &#xA;    /*if('3'.equals(planDisp) &amp;&amp; (strMsgType.contains('ASSIGN') || strMsgType.contains('TRANSFER'))){&#xA;&#x9;&#x9;exit;&#xA;&#x9;}*/&#xA;    def planDispAttr = gvyTxtMsgFmt.doIt('planDisp',planDisp)&#xA;&#xA;    //DS - A1 - (Discussion to add more Conditions) &#xA;    def ds = getDs(freightkindKey,cmdtyId)&#xA;    def dsAttr = gvyTxtMsgFmt.doIt('ds',ds) &#xA;&#xA;    //ORIENTATION&#xA;    def orientation = freightkindKey.equals('MTY') ? 'E' : (freightkindKey.length() &gt; 1 ? 'F' : '')&#xA;    def orientationAttr = gvyTxtMsgFmt.doIt('orientation',orientation)&#xA;&#xA;    rtgProcessFieldAttr = commodityAttr+dirAttr+dscAttr+planDispAttr+dsAttr+orientationAttr&#xA;   }catch(Exception e){&#xA;     e.printStackTrace()&#xA;   }&#xA;  &#xA;    return rtgProcessFieldAttr&#xA; }&#xA;&#xA;   // Retrieves DS Field-Based on freightkindKey,commodityId &#xA;   public String getDs(String freightkindKey,String cmdtyId)&#xA;   {&#xA;      def ds = ''&#xA;      if(cmdtyId.equals('AUTOCON')){ &#xA;         ds = 'CON'&#xA;      }else if(cmdtyId.equals('AUTO')){&#xA;         ds = 'AUT'&#xA;      }else if (freightkindKey.equals('FCL') || cmdtyId.equals('AUTOCY')){&#xA;         ds = 'CY'&#xA;      }else{&#xA;         ds = '%'&#xA;      }&#xA;      return ds &#xA;    }&#xA;&#xA;    //Retrieves DSC Field-Based on transitState,drayStatus and group&#xA;    public String getDsc(String strMsgType, String freightkindKey,String  drayStatus, String group, String lkpSlot, String cmdtyId,Object gvyBaseClass)&#xA;   {&#xA;      def dsc = ''&#xA;      if(group != null &amp;&amp; group.equals(&quot;TS&quot;)){&#xA;         dsc = 'C'&#xA;      }&#xA;      else if((group.equals(&quot;XFER-P2&quot;) || group.equals(&quot;XFER-SI&quot;) || group.equals(&quot;XFER-WO&quot;)) &amp;&amp; freightkindKey.equals('MTY'))    {&#xA;        dsc = ''&#xA;      }&#xA;      else if((group.equals(&quot;XFER-P2&quot;) || group.equals(&quot;XFER-SI&quot;) || group.equals(&quot;XFER-WO&quot;)) &amp;&amp; !freightkindKey.equals('MTY'))  {&#xA;        dsc = 'C'&#xA;      }&#xA;      else if(drayStatus.equals('OFFSITE') &amp;&amp; cmdtyId.equals('SIT')){&#xA;        dsc = 'S'&#xA;      }else if (drayStatus.equals('OFFSITE') || drayStatus.equals('DRAYIN')){&#xA;        dsc = 'C'&#xA;     }else if(cmdtyId.equals('SIT')){&#xA;        dsc = 'S'&#xA;     }else{&#xA;        def gvyFldUpdtObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventFieldUpdateFilter&quot;);   &#xA;        dsc = gvyFldUpdtObj.evntFilterOnDscFldChng(strMsgType)&#xA;     }&#xA;     return dsc&#xA;   }&#xA;&#xA;   // Retrieves PlanDisp Field-Based on DrayStatus and Eventype&#xA;  public String getPlanDisp(String drayStatus, String group, String lkpSlot)&#xA; {&#xA;    def planDisp = ''&#xA;    if(group.equals('TS')) {&#xA;        planDisp='T'&#xA;    }&#xA;    else if (group.equals('XFER-P2') || group.equals('XFER-WO')) {&#xA;       planDisp = group.equals('XFER-P2') ? '3' : 'W' &#xA;     }&#xA;    else if(group.equals('XFER-SI')){&#xA;        planDisp = lkpSlot.startsWith('WOA') ? &quot;W&quot; : &quot;3&quot;&#xA;    }&#xA;    else if(group.equals('COMSVC')) {&#xA;        planDisp='3'&#xA;    }else if((group.equals('OTR') || group.equals('PASSPASS')) &amp;&amp; drayStatus.equals('FORWARD')) {&#xA;        planDisp='8'&#xA;    }else if(group.equals('YB')){&#xA;        planDisp='7' &#xA;    }else  if (group.equals('1WAY')){&#xA;        planDisp='9' &#xA;    }else if ((group.equals('SHOW') || group.equals('TTNU') || group.equals('PASSPASS')) &amp;&amp; drayStatus.equals('RETURN')){ //A2&#xA;        planDisp='A' &#xA;    }else if (group.equals('MDA')){&#xA;        planDisp='B'&#xA;   }&#xA;    return planDisp;&#xA; }&#xA;&#xA;   // Retrieves DIR Field-Based on category &amp; transitState  &#xA;   public  String getDir(String category,String transitState,String freightkindKey, String expGateBkgNbr,String lkpLocType,String gdsBlNbr)&#xA;  {&#xA;    def dir = ''&#xA;    if(category.equals('EXPRT') &amp;&amp; !freightkindKey.equals('MTY') ){&#xA;      dir='OUT'&#xA;    } else if (category.equals('EXPRT') &amp;&amp; expGateBkgNbr != null){&#xA;      dir='OUT'&#xA;    }else if (category.equals('IMPRT') &amp;&amp; lkpLocType.equals('VESSEL') &amp;&amp; freightkindKey.equals('MTY') &amp;&amp; gdsBlNbr == null){&#xA;      dir = 'MTY'&#xA;    }else if (category.equals('IMPRT')){&#xA;      dir='IN'&#xA;    }else if (category.equals('TRSHP') &amp;&amp; transitState.equals('S20_INBOUND')){&#xA;      dir = 'IN'&#xA;    }else if (category.equals('TRSHP') &amp;&amp; transitState.trim().length() &gt; 0){&#xA;      dir = 'OUT'&#xA;    }else if (category.equals('THRGH') &amp;&amp; !freightkindKey.equals('MTY')){&#xA;      dir = 'OUT'&#xA;    }else{&#xA;      dir = 'MTY'&#xA;    }&#xA;    return dir;&#xA;  }&#xA;&#xA;//Method Retrieves CommodityCode-CMIS Relation value  &#xA;public  String commodityCode(String commodity, String group, String designatedTrucker, String lkpSlot)&#xA;{&#xA;    def commodityCode = ''&#xA;    def map = new HashMap()&#xA;    map.put(&quot;PINEAPPLE CANNED&quot;, &quot;CANNED P&quot;)&#xA;    map.put(&quot;PINEAPPLE FRESH&quot;, &quot;FRESH PI&quot;)&#xA;    map.put(&quot;GOLDEN STATE&quot;,&quot;GOLDNSTA&quot;)&#xA;    map.put(&quot;MTY MILK CASES&quot;, &quot;MLK CASE&quot;)&#xA;    try&#xA;    {&#xA;      commodityCode = map.get(commodity) != null ? map.get(commodity) : commodity;&#xA;      def truckerFlag = designatedTrucker.length() &gt; 0 &#xA;&#xA;      if(group.equals(&quot;XFER-WO&quot;) &amp;&amp; commodityCode.equals('SIT')){&#xA;             commodityCode = truckerFlag ? designatedTrucker+&quot;   S&quot; : &quot;       S&quot;&#x9;&#xA;      }&#xA;      else if(group.equals(&quot;XFER-SI&quot;)){&#xA;          if(commodityCode.equals('SIT') &amp;&amp; lkpSlot.startsWith('WOA')){&#xA;             commodityCode = truckerFlag ? designatedTrucker+&quot;   S&quot; : &quot;       S&quot; &#x9;&#xA;          }&#xA;      }else if(commodityCode.equals(&quot;SIT&quot;)){ //A3&#xA;      }&#xA;      else if(group.equals(&quot;YB&quot;)){&#xA;          commodityCode = 'YB'&#xA;      }&#xA;    }catch(Exception e){&#xA;      e.printStackTrace()&#xA;    }&#xA;    return commodityCode;&#xA;}&#xA;&#xA;}//Class Ends" />
<digital-asset id="MdaHoldProc" short-description="MDA HOLD Proc" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.atoms.EventEnum&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.argo.business.atoms.DrayStatusEnum&#xA;&#xA;public class MdaHoldProc {&#xA;    public String process(Object equip) {&#xA;&#xA;&#x9;def equiId = equip.getFieldValue(&quot;eqsEquipment.eqIdFull&quot;) // Object Equipment.EqId&#xA;&#xA;&#x9;//println(&quot;equiId = &quot;+equiId)&#xA;&#xA;&#x9;def injBase = new GroovyInjectionBase();&#xA;&#xA;&#x9;def complex = ContextHelper.getThreadComplex();&#xA;&#xA;&#x9;def unitFinder = injBase.getUnitFinder();&#xA;&#xA;&#x9;def eq = Equipment.loadEquipment( equiId);&#xA;&#xA;&#x9;def unit = unitFinder.findAttachedUnit(complex, eq);&#xA;&#xA;&#x9;if ( unit != null) {&#xA;&#x9;&#x9;def unitId = unit.getFieldValue(&quot;unitId&quot;);&#xA;&#x9;&#x9;//println( &quot;UnitId = &quot; + unitId);&#xA;&#x9;&#x9;unit.setFieldValue( &quot;unitDrayStatus&quot;, DrayStatusEnum.RETURN);&#xA;&#x9;} else {&#xA;&#x9;&#x9;println( &quot;Unit is null.&quot;);&#xA;&#x9;}&#xA;&#xA;&#xA;}&#xA;}" />
<digital-asset id="CoBizBooking" short-description="Co Biz Booking" is-pre-deployed="N" groovy-code="/*&#xA;**********************************************************************&#xA;* Srno   Date&#x9;        Changer&#x9; &#x9; Change Description&#xA;* A1    10/12/2011  Glenn Raposo&#x9; updated Assign Booking Method for TOS2.1  &#xA;**********************************************************************&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.atoms.EventEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.orders.business.eqorders.EquipmentOrderManagerPea&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.services.business.event.GroovyEvent&#xA;&#xA;public class CoBizBooking {&#xA;    public String process(Object unit) {&#xA;&#xA;&#xA;&#x9;def ctrId = unit.getFieldValue(&quot;unitId&quot;);&#xA;&#x9;def bl_nbr = unit.getFieldValue(&quot;unitFlexString09&quot;);&#xA;&#x9;def dobCvId = unit.getFieldValue(&quot;unitFlexString10&quot;);&#xA;&#x9;def unitNotes = unit.getFieldValue(&quot;unitRemark&quot;);&#xA;&#x9;unit.setFieldValue(&quot;unitFlexString09&quot;, &quot;&quot;);&#xA;&#x9;unit.setFieldValue(&quot;unitFlexString10&quot;, &quot;&quot;);&#xA;&#xA;try {&#xA;&#xA;&#x9;// check if the unit is empty.&#xA;&#x9;if ( unit.isStorageEmpty())&#xA;&#x9;&#x9;return (new StringBuilder()).append(&quot;ERR_GVY_COBIZ_BK_001. Could not ASSIGN CO BIZ BOOKING to EMPTY unit: &quot;).append(ctrId).toString();&#xA;&#xA;&#x9;// find booking&#xA;&#x9;def injBase = new GroovyInjectionBase();&#xA;&#x9;def facility = injBase.getFacility();&#xA;&#x9;def cv = CarrierVisit.findVesselVisit( facility, dobCvId);&#xA;&#x9;if ( cv == null) {&#xA;&#x9;&#x9;return &quot;ERR_GVY_COBIZ_BK_002. Could not find the carrier visit: &quot; + dobCvId;&#xA;&#x9;}&#xA;&#xA;&#x9;def bizScope = ScopedBizUnit.findScopedBizUnit( &quot;MAT&quot;, BizRoleEnum.LINEOP);&#xA;&#x9;if ( bizScope == null) {&#xA;&#x9;&#x9;&#x9;return &quot;ERR_GVY_COBIZ_BK_003. Could not find the business unit: MAT&quot;;&#xA;&#x9;}&#xA;&#xA;&#x9;def booking = Booking.findBookingByUniquenessCriteria( bl_nbr, bizScope, cv);&#xA;&#x9;if ( booking == null) {&#xA;&#x9;&#x9;&#x9;return &quot;ERR_GVY_COBIZ_BK_004. Could not find booking: &quot; + bl_nbr;&#xA;&#x9;}&#xA;&#xA;&#x9;// set CATEGORY&#xA;&#x9;unit.setUnitCategory(UnitCategoryEnum.EXPORT);&#xA;&#x9;// set BOOKING NUM and Carrier info&#xA;&#x9;unit.setFieldValue(&quot;unitGoods.gdsBlNbr&quot;, bl_nbr);&#xA;&#x9;unit.setUnitRemark( unitNotes);&#xA;&#xA;&#x9;def eqoMgr = new EquipmentOrderManagerPea();&#xA;&#x9;//eqoMgr.assignExportBookingToUnit( booking, unit);&#xA;   eqoMgr.assignExportBookingToUnit( booking, null, unit); //Update Method for TOS2.1 -- A16&#xA;&#xA;&#x9;GroovyEvent event = new GroovyEvent( null, unit);&#xA;&#x9;//event.postNewEvent( &quot;UNIT_ROLL&quot;, unitNotes);&#xA;&#x9;event.postNewEvent( &quot;ROUTE_COBIZ&quot;, unitNotes);&#xA;&#xA;&#x9;// Record an event&#xA;&#x9;return &quot;done via Groovy, unit=&quot; + ctrId + &quot;booking=&quot; + bl_nbr + &quot; cv=&quot; + dobCvId;&#xA;&#xA;} catch ( Exception ex) {&#xA;&#x9;return ((new StringBuilder()).append(&quot;ERR_GVY_COBIZ_BK_999. Could not fire COBIZ_BOOKING event on unit: &quot;).append(ctrId).append(&quot;\nSN4 Exception: &quot;).append(ex.toString()).toString());&#xA;}&#xA;}&#xA;}&#xA;&#xA;" />
<digital-asset id="GvyCmisFlexFieldDetail" short-description="GvyCmisFlexFieldDetail" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;&#xA;public class GvyCmisFlexFieldDetail {&#xA;&#xA;public String doIt(Object gvyTxtMsgFmt, Object unitObj, Object event, String eventType, Object isUnitObj,Object gvyBaseClass)    &#xA;{&#xA; //  gvyBaseClass.log(&quot;In Class GvyCmisFlexFieldDetail.doIt()&quot;)&#xA;   def u = unitObj&#xA;    def flexFieldAttr = ''&#xA;    try&#xA;    {&#xA;       //HSF7 &#xA;       def hsf7 = u.getFieldValue(&quot;unitFlexString05&quot;)&#xA;       def hsf7Attr = gvyTxtMsgFmt.doIt('hsf7',hsf7)&#xA;   &#xA;       //PMD&#xA;       def pmd = null; &#xA;       def chasType =u.getFieldValue(&quot;unitActiveUfv.ufvFlexString02&quot;)&#xA;         if(chasType != null){&#xA;            pmd = chasType;&#xA;         }else{&#xA;           def _pmdDt =u.getFieldValue(&quot;unitActiveUfv.ufvFlexDate01&quot;) &#xA;           def strpmd = _pmdDt != null ? (''+_pmdDt) : ''&#xA;           pmd =  strpmd.length() &gt; 10 ? strpmd.substring(8,10) : strpmd &#xA;        }&#xA;       def pmdAttr = gvyTxtMsgFmt.doIt('pmd',pmd)&#xA;&#xA;       //LOCATION RUN&#xA;       def  locationRun = '%'&#xA;       def locationRunAttr =  gvyTxtMsgFmt.doIt('locationRun',locationRun) &#xA;       &#xA;&#x9;   def drayStatus=u.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;       drayStatus = drayStatus!= null ? drayStatus.getKey() : null   &#xA;      //MISC2 - A1(flex fielsds-cargo status field Change code)&#xA;      def misc2 = ''&#xA;      def gvyEditFlag = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisProcessEditFlag&quot;);&#xA;      misc2 =gvyEditFlag.processEditFlag(event, eventType, unitObj, gvyBaseClass )&#xA;      unitObj.setUnitFlexString11(misc2)&#xA;      def misc2Attr = gvyTxtMsgFmt.doIt('misc2',misc2)&#xA;&#xA;   //MISC3 &#xA;   def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;   def misc3 = getMisc3(u, gvyEventUtil)&#xA;   def misc3Attr = gvyTxtMsgFmt.doIt('misc3',misc3)&#xA;&#xA;   flexFieldAttr =  hsf7Attr+pmdAttr+locationRunAttr+misc2Attr+misc3Attr&#xA; // println('flexFieldAttr : '+flexFieldAttr)&#xA;  }catch(Exception e){&#xA;     e.printStackTrace()&#xA;  }&#xA;   return flexFieldAttr&#xA; }&#xA; &#xA; public String getMisc3(Object u , Object gvyEventUtil )&#xA; {&#xA;   def misc3 = ''&#xA;   try&#xA;   {&#xA;     def ufvFlexDate2=u.getFieldValue(&quot;unitActiveUfv.ufvFlexDate02&quot;)&#xA;     def flex2Fmt = ufvFlexDate2 != null ? gvyEventUtil.convertToJulianDate(ufvFlexDate2) : '' &#xA;     def ufvFlexDate3=u.getFieldValue(&quot;unitActiveUfv.ufvFlexDate03&quot;)&#xA;     def flex3Fmt = ufvFlexDate3 != null ? gvyEventUtil.convertToJulianDate(ufvFlexDate3) : '' &#xA;     println('flex2Fmt:::'+flex2Fmt+&quot;   flex3Fmt::::&quot;+flex3Fmt)&#xA;     misc3 = flex2Fmt + flex3Fmt&#xA;&#xA;   }catch(Exception e){&#xA;         e.printStackTrace()&#xA;   }&#xA;   return misc3&#xA; }&#xA; &#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyCmisEquipmentDeliveryOrder" short-description="GvyCmisEquipmentDeliveryOrder" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.services.business.event.EventFieldChange&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;import com.navis.framework.util.DateUtil;&#xA;import com.navis.argo.business.atoms.EquipClassEnum;&#xA;import com.navis.orders.business.eqorders.EquipmentDeliveryOrder&#xA;import com.navis.inventory.InventoryField&#xA;&#xA;&#xA;public class GvyCmisEquipmentDeliveryOrder {&#xA;&#xA;//Method Returns Equipment Delivey Order Object  &#xA;public EquipmentDeliveryOrder findEquipmentDeliveryOrder(String inEdoNbr) &#xA;{&#xA;   EquipmentDeliveryOrder edo = null;&#xA;  try&#xA;  {&#xA;    //LineOperator line = LineOperator.resolveLineOprFromScopedBizUnit(inLine);&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(&quot;EquipmentDeliveryOrder&quot;).addDqPredicate(PredicateFactory.eq(InventoryField.EQBO_NBR, inEdoNbr));&#xA;    List lst = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#xA;    if (lst != null) {&#xA;        if (lst.size() == 1) {&#xA;           edo = (EquipmentDeliveryOrder)lst.get(0);&#xA;        }&#xA;    }&#xA;   }catch(Exception e){&#xA;      e.printStackTrace()&#xA;   }&#xA;    return edo;&#xA; }&#xA; &#xA;  //Method returns Line Operator for EDO (Object EDO extends EquipmentOrderHbr )&#xA;  public String getEDOLineOperator(EquipmentDeliveryOrder edo)&#xA; {&#xA;     def edoLine = ''&#xA;      try{&#xA;         if(edo != null){&#xA;             edoLine = edo.getEqoLine().getBzuId()&#xA;         }&#xA;      }catch(Exception e){&#xA;         e.printStackTrace()&#xA;      }    &#xA;      return edoLine        &#xA;  }&#xA;}" />
<digital-asset id="GvyAdvisedChassisCleanupJob" short-description="GvyAdvisedChassisCleanupJob" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.api.UnitManager;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.business.api.UnitField;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.framework.business.Roastery;&#xA;/*&#xA;* Get a list of all the Advised Chassis' and deletes them&#xA;*/&#xA;class GvyAdvisedChassisCleanupJob  {&#xA;    public String execute(Map inParameters) {&#xA;&#xA;        GroovyApi gvyApi = new GroovyApi();&#xA;&#xA;        gvyApi.logWarn(&quot;Advised chassis::starting...&quot;);&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;);&#xA;        dq.addDqPredicate(PredicateFactory.eq(UnitField.UNIT_CURRENT_UFV_TRANSIT_STATE, UfvTransitStateEnum.S10_ADVISED));&#xA;        dq.addDqPredicate(PredicateFactory.like(UnitField.UNIT_PRIMARY_EQTYPE_ID, &quot;C%&quot;));&#xA;&#xA;        def list = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;        def iter = list.iterator();&#xA;        gvyApi.logWarn(&quot;Advised chassis: &quot; + (list!=null ? list.size() : &quot;0&quot;));&#xA;        while(iter.hasNext()) {&#xA;            UnitManager unitManager = (UnitManager) Roastery.getBean(UnitManager.BEAN_ID);&#xA;            try {&#xA;                Unit chsUnit = (Unit) iter.next();&#xA;                unitManager.purgeUnit(chsUnit);&#xA;                gvyApi.logWarn(&quot;Delete Advised Chassis: &quot;+chsUnit.getUnitId()+&quot; /inUnit:&quot;+chsUnit);&#xA;            } catch (Exception e) {&#xA;                e.printStackTrace();&#xA;            }&#xA;&#xA;        }&#xA;    }&#xA;}" />
<digital-asset id="GvyInjAbob" short-description="ACETS BOB Process" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.argo.business.reference.*&#xA;&#xA;class GvyInjAbob extends GroovyInjectionBase {&#xA;&#x9;public String execute(Map inParameters) {&#xA;&#xA;&#x9;&#x9;com.navis.argo.ContextHelper.setThreadExternalUser(&quot;ACETS&quot;);&#xA;&#xA;&#x9;&#x9;def eventId = (String) inParameters.get(&quot;eventId&quot;);&#xA;&#x9;&#x9;def bookingNum = (String) inParameters.get( &quot;bookingNum&quot;);&#xA;&#x9;&#x9;def vesvoy = (String) inParameters.get( &quot;vesvoy&quot;);&#xA;                                           log( &quot;GvyInjAbob start event: &quot; + eventId + &quot; for booking: &quot; + bookingNum);&#xA;&#xA;&#x9;&#x9;&#x9;// find booking&#xA;&#x9;&#x9;&#x9;def facility = getFacility();&#xA;&#x9;&#x9;&#x9;def cv = CarrierVisit.findVesselVisit( facility, vesvoy);&#xA;&#x9;&#x9;&#x9;if ( cv == null) {&#xA;&#x9;&#x9;&#x9;&#x9;fail( &quot;ERR_GVY_BOB_001. Could not find the carrier visit: &quot; + vesvoy);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;def bizScope = ScopedBizUnit.findScopedBizUnit( &quot;MAT&quot;, BizRoleEnum.LINEOP);&#xA;&#x9;&#x9;&#x9;if ( bizScope == null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;fail( &quot;ERR_GVY_BOB_002. Could not find the business unit: MAT&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;def booking = Booking.findBookingByUniquenessCriteria( bookingNum, bizScope, cv);&#xA;&#x9;&#x9;&#x9;if ( booking == null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;fail( &quot;ERR_GVY_BOB_003. Could not find booking: &quot; + bookingNum);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;def event = new GroovyEvent( null, booking);&#xA;&#xA;&#x9;&#x9;event.postNewEvent( eventId);&#xA;&#x9;&#x9;log( &quot;GvyInjAbob post event: &quot; + eventId + &quot; for booking: &quot; + bookingNum);&#xA;&#x9;}&#xA;&#xA;}" />
<digital-asset id="GvyInjTest" short-description="John's GVY Test" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.framework.presentation.internationalization.IMessageTranslatorProvider;&#xA;import com.navis.framework.presentation.internationalization.MessageTranslator;&#xA;import com.navis.argo.business.atoms.CarrierVisitPhaseEnum;&#xA;import com.navis.framework.util.AtomizedEnum;&#xA;import com.navis.framework.portal.context.PortalApplicationContext;&#xA;&#xA;&#xA; class GvyInjTest extends GroovyInjectionBase {&#xA;&#x9;public String execute(Map inParameters) {&#xA;&#xA;  def inLocale = Locale.ENGLISH;&#xA;  def inValue = CarrierVisitPhaseEnum.CLOSED;&#xA;  IMessageTranslatorProvider translatorProvider = (IMessageTranslatorProvider)PortalApplicationContext.getBean(&quot;messageTranslatorProvider&quot;);&#xA;  MessageTranslator translator = translatorProvider.getMessageTranslator(inLocale);&#xA;  com.navis.framework.util.internationalization.PropertyKey key = ((AtomizedEnum)inValue).getDescriptionPropertyKey();&#xA;  Object outValue;&#xA;  if(translator.isMessageAvailable(key))&#xA;    {&#xA;      outValue = translator.getMessage(key);&#xA;       log( &quot;outValue=&quot; + outValue);&#xA;    }&#xA;&#x9;log( &quot;key=&quot; + key);&#xA; &#xA;&#xA;&#x9;}&#xA;}" />
<digital-asset id="MatReportClientVesDiscrepancy" short-description="MatReportClientVesDiscrepancy" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.road.business.model.*;&#xA;import java.util.Calendar;&#xA;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;&#xA;import com.navis.argo.ArgoConfig;&#xA;import com.navis.argo.ArgoPropertyKeys;&#xA;import com.navis.argo.ArgoRefField;&#xA;import com.navis.argo.business.model.GeneralReference;&#xA;//import com.navis.framework.ulc.server.application.controller.form.ShowDeleteFormCommand;&#xA;import java.sql.Connection;&#xA;&#xA;import com.navis.edi.EdiEntity;&#xA;import com.navis.edi.EdiField&#xA;import com.navis.edi.business.entity.EdiTransaction&#xA;import com.navis.edi.business.entity.EdiError;&#xA;import com.navis.edi.business.atoms.EdiStatusEnum;&#xA;import com.navis.edi.business.api.EdiFinder;&#xA;import com.navis.edi.business.entity.EdiSession;&#xA;import com.navis.framework.portal.UserContext;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.ContextHelper;&#xA;import com.navis.edi.business.atoms.EdiMessageDirectionEnum;&#xA;import com.navis.edi.business.entity.EdiBatch;&#xA;import java.sql.ResultSet;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 09/16/2013 &#xA;* Description: This groovy is used to generate the CVDR&#xA;*/&#xA;&#xA;public class MatReportClientVesDiscrepancy extends GroovyInjectionBase&#xA;&#x9;{&#xA;&#x9;private final String  emailFrom = '1aktosdevteam@matson.com';&#xA;&#x9;private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;String inputVesVoy = null;&#xA;&#xA;&#x9;def inj = null;&#xA;&#xA;&#xA;&#x9;public void generateReport (GroovyEvent ipEvent, Object api){&#xA;&#xA;&#x9;&#x9;UserContext context = ContextHelper.getThreadUserContext();&#xA;&#x9;&#x9;Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#x9;&#x9;System.out.println(&quot;MatReportClientVesDiscrepancy.generateReport Started !&quot; + timeNow);&#xA;&#x9;&#x9;String blNumber = null;&#xA;&#x9;&#x9;String vesVoy = null;&#xA;&#xA;&#x9;&#x9;EdiSession session = (EdiSession) ipEvent.getEntity();&#xA;&#x9;&#x9;Serializable inSessionGkey = (Serializable) session.getEdisessGkey();&#xA;&#x9;&#x9;EdiMessageDirectionEnum ediDirection = EdiMessageDirectionEnum.R;&#xA;&#x9;&#x9;EdiBatch currentEdiBatch = this.getLatestEdiBatch(inSessionGkey, ediDirection);&#xA;&#xA;&#x9;&#x9;if (currentEdiBatch == null){&#xA;&#x9;&#x9;&#x9;println (&quot; No EDI Batches found&quot;);&#xA;&#x9;&#x9;&#x9;println(&quot;MatGetStowplanTrankey Ended !&quot; + timeNow);&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;} else {&#xA;&#xA;&#x9;&#x9;&#x9;println(&quot;Batch Number:&quot; + currentEdiBatch.getEdibatchNbr().toString());&#xA;&#x9;&#x9;&#x9;println (&quot;Batch Transaction Count:&quot; + currentEdiBatch.getTransactionCount().toString());&#xA;&#x9;&#x9;&#x9;List&lt;EdiTransaction&gt; tranList = this.getEdiFndr().findTxnForBatch(currentEdiBatch);&#xA;&#x9;&#x9;&#x9;if (tranList.size() == 0) {&#xA;&#x9;&#x9;&#x9;&#x9;println (&quot;Batch has no transaction;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;EdiTransaction trans = tranList.get(0);&#xA;&#x9;&#x9;&#x9;Serializable tranGkey = trans.getEditranGkey();&#xA;&#x9;&#x9;&#x9;blNumber = trans.getEditranPrimaryKeywordValue();&#xA;&#x9;&#x9;&#x9;inputVesVoy = getUnitVesVoy (blNumber);&#xA;&#x9;&#x9;&#x9;this.createReport(inputVesVoy);&#xA;&#x9;&#x9;}&#xA;    &#x9;println(&quot;MatGetStowplanTrankey Ended !&quot; + timeNow);&#xA;    }&#xA;&#xA;&#x9;public static EdiBatch getLatestEdiBatch(Serializable inSessionGkey, EdiMessageDirectionEnum inDirection) {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(EdiEntity.EDI_BATCH)&#xA;                .addDqPredicate(PredicateFactory.eq(EdiField.EDIBATCH_SESSION, inSessionGkey))&#xA;                .addDqPredicate(PredicateFactory.eq(EdiField.EDIBATCH_DIRECTION, inDirection))&#xA;                .addDqOrdering(Ordering.desc(EdiField.EDIBATCH_CREATED));&#xA;        List batches = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#xA;&#x9;&#x9;return batches != null &amp;&amp; !batches.isEmpty() ? (EdiBatch) batches.get(0) : null;&#xA;    }&#xA;&#xA;&#x9;private EdiFinder getEdiFndr() {&#xA;&#x9;&#x9;return (EdiFinder) Roastery.getBean(EdiFinder.BEAN_ID);&#xA;&#x9;}&#xA;&#xA;&#x9;public void createReport(String  reportVesVoy)&#xA;&#x9;{&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;&#x9;def GvyRefDataLookup = inj.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;);&#xA;&#x9;&#x9;&#x9;Connection conn;&#xA;&#x9;&#x9;&#x9;ResultSet rs = null;&#xA;&#x9;&#x9;&#x9;HashMap reportMap = null;&#xA;&#x9;&#x9;&#x9;ArrayList reportGenRefList =  new ArrayList();&#xA;&#xA;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;conn = GvyRefDataLookup.connect();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rs = GvyRefDataLookup.getDiscrepancyData(reportVesVoy,conn);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;GvyRefDataLookup.getDiscrepancyDate Calling&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;while (rs.next()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportMap = new HashMap();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String vesVoy = rs.getString(&quot;VESVOY&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String value = rs.getString(&quot;VALUE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String unitId = rs.getString(&quot;CONTAINER_ID&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String type = rs.getString(&quot;TYPE_CODE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String seal = rs.getString(&quot;SEAL_NBR&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String tempReq = rs.getString(&quot;TEMP_REQ&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String grossWt = rs.getString(&quot;GROSS_WT&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String tareWt = rs.getString(&quot;TARE_WT&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String unitVesVoy = rs.getString(&quot;UNIT_VESVOY&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportMap.put(&quot;UnitNbr&quot;, unitId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportMap.put(&quot;UnitFlexString01&quot;, vesVoy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportMap.put(&quot;UnitFlexString02&quot;, value);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportMap.put(&quot;UnitFlexString03&quot;, type);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportMap.put(&quot;UnitFlexString04&quot;, seal);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportMap.put(&quot;UnitFlexString05&quot;, tempReq);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportMap.put(&quot;UnitFlexString06&quot;, tareWt);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportMap.put(&quot;UnitFlexString07&quot;, grossWt);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportMap.put(&quot;UnitFlexString08&quot;, unitVesVoy);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportGenRefList.add(reportMap);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Details :::&quot;+vesVoy+&quot; :: &quot;+value+&quot; :: &quot;+unitId+&quot; :: &quot;+type+&quot; :: &quot;+seal+&quot; :: &quot;+tempReq+&quot; :: &quot;+grossWt+&quot; :: &quot;+tareWt+&quot; :: &quot;+unitVesVoy)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;reportGenRefList.size() ::: &quot;+reportGenRefList.size());&#xA;&#x9;&#x9;&#x9;&#x9;if (reportGenRefList.size() &gt; 0) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource ds = new JRMapCollectionDataSource(reportGenRefList);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailExcelReport(ds,parameters, &quot;CLIENT_VESSEL_DESC_REPORT&quot;,emailTo, &quot;Client Vessel Discrepancy for : &quot; + reportVesVoy  ,&quot;Attached report for CVDR&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;GvyRefDataLookup.delDiscrepancyData(reportVesVoy,conn);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;GvyRefDataLookup.delDiscrepancyData Calling&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} catch (Exception e) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;GvyRefDataLookup.delDiscrepancyData Ended with errors::&quot; + e);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportGenRefList ------- Success&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportGenRefList ------- No data to print&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;} finally {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GvyRefDataLookup.disconnect(conn);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rs.close();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;GvyRefDataLookup.getDiscrepancyDate Ended&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}catch (Exception e) {&#xA;&#x9;&#x9;&#x9;println(&quot;Exception while getting data from tos_client_ves_discrepancy table::&quot;+e);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;public void execute(Map map)&#xA;&#x9;{&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;&#x9;def GvyRefDataLookup = inj.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;);&#xA;&#x9;&#x9;&#x9;Connection conn;&#xA;&#x9;&#x9;&#x9;ResultSet rs = null;&#xA;&#x9;&#x9;&#x9;HashMap reportMap = null;&#xA;&#x9;&#x9;&#x9;ArrayList reportGenRefList =  new ArrayList();&#xA;&#x9;&#x9;&#x9;String reportVesVoy = &quot;CBA889&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;conn = GvyRefDataLookup.connect();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rs = GvyRefDataLookup.getDiscrepancyData(&quot;CBA889&quot;,conn);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;GvyRefDataLookup.getDiscrepancyDate Calling&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;while (rs.next()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportMap = new HashMap();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String vesVoy = rs.getString(&quot;VESVOY&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String value = rs.getString(&quot;VALUE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String unitId = rs.getString(&quot;CONTAINER_ID&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String type = rs.getString(&quot;TYPE_CODE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String seal = rs.getString(&quot;SEAL_NBR&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String tempReq = rs.getString(&quot;TEMP_REQ&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String grossWt = rs.getString(&quot;GROSS_WT&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String tareWt = rs.getString(&quot;TARE_WT&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String unitVesVoy = rs.getString(&quot;UNIT_VESVOY&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportMap.put(&quot;UnitNbr&quot;, unitId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportMap.put(&quot;UnitFlexString01&quot;, vesVoy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportMap.put(&quot;UnitFlexString02&quot;, value);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportMap.put(&quot;UnitFlexString03&quot;, type);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportMap.put(&quot;UnitFlexString04&quot;, seal);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportMap.put(&quot;UnitFlexString05&quot;, tempReq);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportMap.put(&quot;UnitFlexString06&quot;, tareWt);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportMap.put(&quot;UnitFlexString07&quot;, grossWt);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportMap.put(&quot;UnitFlexString08&quot;, unitVesVoy);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportGenRefList.add(reportMap);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Details :::&quot;+vesVoy+&quot; :: &quot;+value+&quot; :: &quot;+unitId+&quot; :: &quot;+type+&quot; :: &quot;+seal+&quot; :: &quot;+tempReq+&quot; :: &quot;+grossWt+&quot; :: &quot;+tareWt+&quot; :: &quot;+unitVesVoy)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;reportGenRefList.size() ::: &quot;+reportGenRefList.size());&#xA;&#x9;&#x9;&#x9;&#x9;if (reportGenRefList.size() &gt; 0) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource ds = new JRMapCollectionDataSource(reportGenRefList);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailExcelReport(ds,parameters, &quot;CLIENT_VESSEL_DESC_REPORT&quot;,emailTo, &quot;Client Vessel Discrepancy for : &quot; + reportVesVoy  ,&quot;Attached report for CVDR&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;GvyRefDataLookup.delDiscrepancyData(reportVesVoy,conn);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;GvyRefDataLookup.deleteGenRefData Calling&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} catch (Exception e) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;GvyRefDataLookup.deleteGenRefData Ended with errors::&quot; + e);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportGenRefList ------- Success&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportGenRefList ------- No data to print&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;} finally {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GvyRefDataLookup.disconnect(conn);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;GvyRefDataLookup.getDiscrepancyDate Ended&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}catch (Exception e) {&#xA;&#x9;&#x9;&#x9;println(&quot;Exception while getting data from tos_client_ves_discrepancy table::&quot;+e);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;public String getUnitVesVoy(String blNbr)&#xA;&#x9;{&#xA;&#x9;&#x9;String vesVoy = null;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;).addDqPredicate(PredicateFactory.eq(UnitField.UNIT_GDS_BL_NBR, blNbr));&#xA;&#x9;&#x9;&#x9;println(&quot;Bl Query : &quot;+ dq);&#xA;&#x9;&#x9;&#x9;def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println(&quot;After unitList&quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;vesVoy = unit.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (vesVoy != null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;println(&quot; vesVoy &quot;+ vesVoy);&#xA;&#x9;&#x9;&#x9;return vesVoy;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;&#x9;&#x9;println(e.getMessage());&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" />
<digital-asset id="GvyInjAupd" short-description="ACETS UPD process" is-pre-deployed="N" groovy-code="/*&#xA;**********************************************************************&#xA;* Srno   Date&#x9;             Changer&#x9; Change Description&#xA;* A1     12/29/08       Glenn Raposo&#x9; Unit Field Tracker code Added&#xA;* A2     02/19/09       Steven Bauer&#x9; Added Equipment Grade&#xA;* A3&#x9; 05/27/09       Steven Bauer&#x9; Log UPU changes&#xA;* A4     07/16/2008    Steven Bauer&#x9; Don't email no such unit message&#xA;* A5     10/28/09      Glenn Raposo      Add MajorFeature for UP1(to be added once acets side is done)&#xA;* A6     09/01/10      GR                Uncommented as part for gems testing.&#xA;* A7     10/13/11      GR                TOS2.1 Method Change&#xA;* A8     01/11/12      GR                Added Biz task method&#xA;**********************************************************************&#xA;*/&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.atoms.DataSourceEnum;&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.argo.ArgoBizMetafield&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.argo.business.api.IBizUnitManager&#xA;import com.navis.argo.business.api.IEquipStateManager&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.argo.business.reference.Equipment;&#xA;import com.navis.argo.business.reference.Accessory;&#xA;import com.navis.inventory.business.units.EquipmentState;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;import com.navis.inventory.business.api.UnitFinder;&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.reference.EquipGrade&#xA;import com.navis.argo.business.reference.Equipment;&#xA;&#xA;&#xA;class GvyInjAupd extends GroovyInjectionBase {&#xA;    public String execute(Map inParameters) {&#xA;        com.navis.argo.ContextHelper.setThreadExternalUser(&quot;ACETS&quot;);&#xA;        def gvyBaseClass = new GroovyInjectionBase();&#xA;        def eqId = (String) inParameters.get(&quot;equipment-id&quot;);&#xA;        def typeCodeUpd = (String) inParameters.get(&quot;typeCode&quot;);&#xA;        def gradeUpd = (String) inParameters.get(&quot;grade&quot;);&#xA;        def primCarrierUpd = (String) inParameters.get(&quot;primCarrier&quot;);&#xA;        def primControllerUpd = (String) inParameters.get(&quot;primController&quot;);&#xA;        def acetsMsgType = (String) inParameters.get(&quot;acetsMsgType&quot;);&#xA;        def majorFeature = (String) inParameters.get(&quot;majorFeature&quot;); //A5&#xA;&#xA;        def gvyEquipmentLookup = gvyBaseClass.getGroovyClassInstance(&quot;GvyEquipmentLookup&quot;);&#xA;&#xA;        ContextHelper.setThreadExternalUser(&quot;ACETS&quot;);&#xA;&#xA;// A3, store a note to add to the event&#xA;        String note = &quot;&quot;;&#xA;&#xA;        def equipment = gvyEquipmentLookup.getEquipment(eqId);&#xA;//def equipment =  Equipment.findEquipment(eqId);&#xA;&#xA;//A1- tracker&#xA;        def tracker;&#xA;        def eqTracker&#xA;        GroovyApi gvyApi;&#xA;        gvyApi = new GroovyApi()&#xA;        def gvyUnitFldTracker = gvyApi.getGroovyClassInstance(&quot;GvyUnitFieldTracker&quot;);&#xA;//A1- Tracker Ends&#xA;&#xA;        if (equipment == null) {&#xA;            log(&quot;ERR_GVY_UPD_001. Could not find equipment: &quot; + eqId);&#xA;            return;&#xA;        }&#xA;//A1&#xA;        eqTracker = gvyUnitFldTracker.createFieldChangeTrackerEquip(equipment)&#xA;&#xA;        note += &quot;Type: &quot; + equipment.getFieldValue(&quot;eqEquipType.eqtypId&quot;) + &quot;-&gt;&quot; + typeCodeUpd;&#xA;        equipment.upgradeEqType(typeCodeUpd, DataSourceEnum.USER_DBA);&#xA;        def operator = com.navis.argo.business.model.Operator.findOperator(&quot;MATSON&quot;);&#xA;        def state = com.navis.inventory.business.units.EquipmentState.findEquipmentState(equipment, operator);&#xA;&#xA;        if (gradeUpd != null) {&#xA;            if (state != null) {&#xA;                state.eqsGradeID = EquipGrade.findOrCreateEquipGrade(gradeUpd);&#xA;                note += &quot; Grade: &quot; + state.eqsGradeID + &quot;-&gt;&quot; + gradeUpd;&#xA;&#xA;            }&#xA;        }&#xA;&#xA;//A5 -Start&#xA;        this.log(&quot;acetsMsgType --&gt;:&quot; + acetsMsgType + &quot; majorFeature:&quot; + majorFeature + &quot; state :&quot; + state)&#xA;        log(&quot;acetsMsgType :&quot; + acetsMsgType + &quot; majorFeature:&quot; + majorFeature + &quot; state :&quot; + state)&#xA;&#xA;        try {&#xA;            IEquipStateManager eqManager = (IEquipStateManager) Roastery.getBean(&quot;equipStateManager&quot;);&#xA;            if ((majorFeature == null || majorFeature.length() == 0) &amp;&amp; state != null) {&#xA;                if (state.getEqsGradeID() != null) {&#xA;                    state.setEqsGradeID(null);&#xA;                }&#xA;            } else if ((majorFeature != null &amp;&amp; majorFeature.length() &gt; 0) &amp;&amp; state != null) {&#xA;                EquipGrade eqGrade = EquipGrade.findEquipGrade(majorFeature)&#xA;                if (eqGrade != null) {&#xA;                    //eqManager.upgradeEqGrade(state.eqsEquipment.eqGkey, eqGrade);&#xA;                    state.upgradeEqGrade(equipment, eqGrade)  //A7&#xA;                }&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;//A5 -Ends&#xA;&#xA;&#xA;        def bzu = null;&#xA;        IBizUnitManager bum = (IBizUnitManager) Roastery.getBean(&quot;bizUnitManager&quot;);&#xA;        bzu = ScopedBizUnit.findScopedBizUnit(primControllerUpd, BizRoleEnum.LEASINGCO);&#xA;        this.log(&quot;bzu--&gt;&quot; + bzu);&#xA;        if (bzu == null) {&#xA;            fail(&quot;ERR_GVY_UPD_002. Can not find leasing company: &quot; + primControllerUpd + &quot; in N4.&quot;);&#xA;        }&#xA;&#xA;        state.upgradeEqOwner(equipment, bzu, DataSourceEnum.USER_DBA) //A7&#xA;        if (state != null) {&#xA;            note += &quot; Owner: &quot; + state.getFieldValue(&quot;eqsEqOwner.bzuId&quot;) + &quot;-&gt;&quot; + primControllerUpd;&#xA;&#xA;&#xA;        } else {&#xA;            note += &quot; Owner: -&gt;&quot; + primControllerUpd;&#xA;        }&#xA;&#xA;        // update primary carrier&#xA;        bzu = ScopedBizUnit.findScopedBizUnit(primCarrierUpd, BizRoleEnum.LINEOP);&#xA;        if (bzu == null) {&#xA;            fail(&quot;ERR_GVY_UPD_003. Can not find line operator: &quot; + primCarrierUpd + &quot; in N4.&quot;);&#xA;        }&#xA;&#xA;        this.log(&quot;2 bzu / lineOp--&gt;&quot; + bzu);&#xA;&#xA;        try {&#xA;            def ufv;&#xA;            def unit;&#xA;            try {&#xA;                def uf = (UnitFinder) Roastery.getBean(&quot;unitFinder&quot;);&#xA;                def facility = getFacility();&#xA;                unit = uf.findActiveUnit(facility.getFcyComplex(), equipment);&#xA;                //A1 - Tracker Change&#xA;                //tracker = gvyUnitFldTracker.createFieldChangeTracker(unit)&#xA;            } catch (Exception ex) {&#xA;                this.log(ex.getCause());&#xA;                this.log(ex.getMessage());&#xA;                unit = null;&#xA;            }&#xA;&#xA;            if (unit != null) {&#xA;                this.log(&quot; Unit / unit.getUnitCategory()--&gt;&quot; + unit.getUnitId() + &quot; / &quot; + unit.getUnitCategory());&#xA;                if (UnitCategoryEnum.STORAGE.equals(unit.getUnitCategory())) {&#xA;&#xA;                    bum.upgradeEqOperator(unit.unitPrimaryUe.ueEquipmentState.eqsGkey, bzu, DataSourceEnum.SNX);&#xA;                    this.log(&quot; EqOperator update completed on &quot; + unit);&#xA;                    if (unit.unitPrimaryUe.ueEquipmentState.eqsEqOperator != null) {&#xA;                        note += &quot; Oper: &quot; + unit.unitPrimaryUe.ueEquipmentState.eqsEqOperator.bzuId + &quot;-&gt;&quot; + primCarrierUpd;&#xA;                        this.log(&quot;Note After changing the EQOperator ::&quot; + note);&#xA;                    }&#xA;                    def primEq = unit.getPrimaryEq();&#xA;                    if (primEq.equals(equipment)) {&#xA;                        unit.updateLineOperator(bzu);&#xA;                    }&#xA;                }&#xA;            }&#xA;&#xA;            //A1 - Tracker Change Equip&#xA;            if (equipment != null) {&#xA;                def eqChanges = eqTracker.getChanges(equipment);&#xA;                if (eqChanges != null &amp;&amp; eqChanges.getFieldChangeCount() != 0) {&#xA;                    unit.recordUnitEvent(com.navis.argo.business.atoms.EventEnum.UNIT_PROPERTY_UPDATE, eqChanges, &quot;Field Updated UPU Equipment Information&quot;);&#xA;                }&#xA;            }&#xA;            //A1 - Tracker Change Commented out as Currently Generating event UNIT_OPERATOR_CHANGE&#xA;/*       if(unit != null)&#xA;       {&#xA;          def changes = tracker.getChanges(unit);&#xA;          if(changes != null &amp;&amp; changes.getFieldChangeCount() != 0) {&#xA;           unit.recordUnitEvent(com.navis.argo.business.atoms.EventEnum.UNIT_PROPERTY_UPDATE,changes , &quot;Field Updated UPU Unit Information&quot;);&#xA;          }&#xA;       } */&#xA;            //A1- Tracker Ends&#xA;            def event = new GroovyEvent(null, unit);&#xA;            event.postNewEvent(&quot;UPU&quot;, &quot;ACETS &quot; + note);&#xA;&#xA;        } catch (Exception gex) {&#xA;            gex.printStackTrace()&#xA;            log(&quot;Could not update eqOperator for &quot; + eqId);&#xA;        }&#xA;&#xA;    }&#xA;}" />
<digital-asset id="TestEvent" short-description="TestEvent" is-pre-deployed="N" groovy-code="import com.navis.services.business.event.*&#xA;import com.navis.argo.business.api.Serviceable;&#xA;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.atoms.LogicalEntityEnum&#xA;import com.navis.services.business.rules.*&#xA;import com.navis.argo.business.api.IFlagType&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.inventory.business.units.Unit&#xA;&#xA;import com.navis.argo.business.atoms.EquipClassEnum&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.argo.ArgoBizMetafield;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.portal.FieldChanges;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.argo.business.reference.Chassis;&#xA;import com.navis.argo.business.reference.Accessory;&#xA;import com.navis.argo.ArgoRefField;&#xA;&#xA;&#xA;public class TestEvent{&#xA;  &#xA;public void sendNewVesEmail(String note, Object api, String aibcarrierId)&#xA;{&#xA;   String msg1 = &quot;NewVes Completed&quot;;  String msg2 = &quot;NIS Load Transaction Completed&quot;;&#xA;   String msg3 = &quot;Supplemental Data Completed&quot;&#xA;   try{&#xA;       def emailto = &quot;1aktosdevteam@matson.com&quot;; def sub = null;&#xA;       String unitCnt = note.substring(note.indexOf(&quot;=&quot;)+1,note.indexOf(&quot;=&quot;)+4);&#xA;       if(note.contains(msg2)){&#xA;         emailto = &quot;1aktosdevteam@matson.com&quot;;&#xA;         sub = &quot;NIS Load Transaction Process Completed for &quot;+aibcarrierId+&quot; in TOS.&quot;+unitCnt+&quot; Units Processed&quot;;&#xA;       }else if(note.contains(msg3)){&#xA;         sub = &quot;Supplemental Data Completed in TOS.&quot;+unitCnt+&quot; Units Processed&quot;;&#xA;       }&#xA;       def emailSender = api.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;        emailSender.sendEmail(emailto,sub,sub);&#xA;     }catch(Exception e){&#xA;      e.printStackTrace();&#xA;    }&#xA; }   &#xA;&#xA; &#xA; public String getMostRecentEvent(String inEventId, Object unit)&#xA; {      &#xA;      println(&quot;&lt;&lt;&lt;getMostRecentEvent &gt;&gt;&gt; ::: &quot;)         &#xA;      EventType eventType = EventType.findEventType(inEventId);         &#xA;      if (eventType == null) {                                          &#xA;         println(&quot;&lt;&lt;&lt;EVENT TYPE IS NULL&gt;&gt;&gt;&quot;)&#xA;          return null;                                                  &#xA;      }                                                                 &#xA;      EventManager sem = (EventManager)Roastery.getBean(&quot;eventManager&quot;);&#xA;      List events = sem.getEventHistory(eventType, unit);       &#xA;       if (events.isEmpty()) {                                           &#xA;            return null;                                                  &#xA;       } else {                                                          &#xA;           Event eventObj = (Event)events.get(0);   &#xA;           def eventTypeMsg = eventObj.getEventTypeId()&#xA;          println(&quot;&lt;&lt;&lt;EVENT TYPE &gt;&gt;&gt; ::: &quot;+eventTypeMsg)&#xA;           return eventTypeMsg&#xA;        }                                                                 &#xA;  }&#xA;  &#xA; public Object getActiveUfvUnit(Object unit)&#xA; {&#xA;    println('&lt;&lt;&lt;getActiveUfvUnit-1&gt;&gt;&gt;')&#xA;    GroovyInjectionBase  injBase = new GroovyInjectionBase()&#xA;    def facility = injBase.getFacility();&#xA;    println('&lt;&lt;&lt;getActiveUfvUnit-2&gt;&gt;&gt;::: '+facility)&#xA;    def activeUfv = unit.getUfvForFacilityLiveOnly(facility) &#xA;    println('&lt;&lt;&lt;getActiveUfvUnit-3&gt;&gt;&gt;::: '+activeUfv)&#xA;    return activeUfv&#xA;  } &#xA;&#xA;  public Object getHoldAppliesToClass(String aHold)&#xA; {&#xA;    ServicesManager sm = (ServicesManager)Roastery.getBean(&quot;servicesManager&quot;);&#xA;    IFlagType iflagType =  sm.getFlagTypeById(aHold)&#xA;    LogicalEntityEnum logicalEnum = iflagType.getFlgtypAppliesTo()&#xA;   if(logicalEnum instanceof Unit) {&#xA;       println(&quot;Print 123 &quot;) &#xA;   }&#xA;  else{&#xA;    println(&quot;Print 456&quot;) &#xA;  }&#xA;&#xA; }                                                                    &#xA;       &#xA;public void fetchChassis(){&#xA;try{&#xA;ScopedBizUnit matBizOwner = ScopedBizUnit.findEquipmentOwner('MATU')&#xA;ScopedBizUnit matBizOperator = ScopedBizUnit.findEquipmentOperator('MAT')&#xA;&#xA;ScopedBizUnit unkBizOperator = ScopedBizUnit.findEquipmentOperator('UNK') &#xA;def unkOperGkey = unkBizOperator.bzuGkey&#xA;&#xA;ScopedBizUnit unkBizOwner = ScopedBizUnit.findEquipmentOwner('UNK') &#xA;def unkOwnerGkey = unkBizOwner.bzuGkey&#xA;&#xA;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Chassis&quot;) &#xA;List chasList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;Chassis chs = null&#xA;int i = 0;&#xA;int j = 0;&#xA; Iterator iter = chasList.iterator();&#xA;  while(iter.hasNext()) {&#xA;    chs = (Chassis)iter.next();&#xA;    def operGkey = chs.getEquipmentOperator() != null ? chs.getEquipmentOperator().bzuGkey : null&#xA;    def ownerGkey = chs.getEquipmentOwner() != null ? chs.getEquipmentOwner().bzuGkey : null&#xA;&#xA;    if(chs.getEquipmentOperator() == null || (unkOperGkey.equals(operGkey))){&#xA;       chs.setFieldValue(ArgoBizMetafield.EQUIPMENT_OWNER, matBizOwner.bzuGkey)&#xA;       chs.setFieldValue(ArgoBizMetafield.EQUIPMENT_OPERATOR, matBizOperator.bzuGkey)&#xA;       println(&quot;UNK Chas Operator set to MATU/MAT----------------&quot;+chs.eqIdFull)&#xA;&#x9;   i++;&#xA;    } // If Ends&#xA;&#xA;&#x9;if(chs.getEquipmentOwner() == null || (unkOwnerGkey.equals(ownerGkey))){&#xA;       chs.setFieldValue(ArgoBizMetafield.EQUIPMENT_OWNER, matBizOwner.bzuGkey)&#xA;       chs.setFieldValue(ArgoBizMetafield.EQUIPMENT_OPERATOR, matBizOperator.bzuGkey)&#xA;       println(&quot;UNK Chas Owner set to MATU/MAT----------------&quot;+chs.eqIdFull)&#xA;&#x9;   j++;&#xA;    } // If Ends&#xA;  }//While Ends&#xA;  println(&quot;Count of UNK OPERATOR =&quot;+i);&#xA;  println(&quot;Count of UNK OWNER =&quot;+j);&#xA; }catch(Exception e){&#xA;   e.printStackTrace();&#xA; }&#xA;} //Method Ends                            &#xA;&#xA;&#xA;public void fetchAccessory(){&#xA;try{&#xA;ScopedBizUnit matBizOwner = ScopedBizUnit.findEquipmentOwner('MATU')&#xA;ScopedBizUnit matBizOperator = ScopedBizUnit.findEquipmentOperator('MAT')&#xA;&#xA;ScopedBizUnit unkBizOperator = ScopedBizUnit.findEquipmentOperator('UNK') &#xA;def unkOperGkey = unkBizOperator.bzuGkey&#xA;&#xA;ScopedBizUnit unkBizOwner = ScopedBizUnit.findEquipmentOwner('UNK') &#xA;def unkOwnerGkey = unkBizOwner.bzuGkey&#xA;&#xA;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Accessory&quot;) &#xA;List chasList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;Accessory chs = null&#xA;int i = 0;&#xA;int j = 0;&#xA; Iterator iter = chasList.iterator();&#xA;  while(iter.hasNext()) {&#xA;    chs = (Accessory)iter.next();&#xA;    def operGkey = chs.getEquipmentOperator() != null ? chs.getEquipmentOperator().bzuGkey : null&#xA;    def ownerGkey = chs.getEquipmentOwner() != null ? chs.getEquipmentOwner().bzuGkey : null&#xA;&#xA;    if(chs.getEquipmentOperator() == null || (unkOperGkey.equals(operGkey))){&#xA;       chs.setFieldValue(ArgoBizMetafield.EQUIPMENT_OWNER, matBizOwner.bzuGkey)&#xA;       chs.setFieldValue(ArgoBizMetafield.EQUIPMENT_OPERATOR, matBizOperator.bzuGkey)&#xA;       println(&quot;UNK MG Operator set to MATU/MAT----------------&quot;+chs.eqIdFull)&#xA;&#x9;   i++;&#xA;    } // If Ends&#xA;&#xA;&#x9;if(chs.getEquipmentOwner() == null || (unkOwnerGkey.equals(ownerGkey))){&#xA;       chs.setFieldValue(ArgoBizMetafield.EQUIPMENT_OWNER, matBizOwner.bzuGkey)&#xA;       chs.setFieldValue(ArgoBizMetafield.EQUIPMENT_OPERATOR, matBizOperator.bzuGkey)&#xA;       println(&quot;UNK MG Owner set to MATU/MAT----------------&quot;+chs.eqIdFull)&#xA;&#x9;   j++;&#xA;    } // If Ends&#xA;  }//While Ends&#xA;  println(&quot;Count of MG OPERATOR =&quot;+i);&#xA;  println(&quot;Count of MG OWNER =&quot;+j);&#xA; }catch(Exception e){&#xA;   e.printStackTrace();&#xA; }&#xA;} //Method Ends                            &#xA;&#xA;&#xA;public void getChassisUNKOperator(){&#xA;try{&#xA;  DomainQuery dq = QueryUtils.createDomainQuery(&quot;Chassis&quot;).addDqPredicate(PredicateFactory.eq(ArgoRefField.BIZU_IS_EQ_OPERATOR, 'UNK'));&#xA;  def list = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;  println(&quot;List of chassis :&quot;+(list != null ? list.size() : &quot;ZERO&quot;))&#xA;  /*&#xA;  //BIZU_IS_EQ_OWNER, BIZU_IS_EQ_OPERATOR, BZU_IS_EQ_OWNER, BZU_IS_EQ_OPERATOR&#xA;  ScopedBizUnit bizOwner = ScopedBizUnit.findEquipmentOwner('MATU')&#xA;  ScopedBizUnit bizOperator = ScopedBizUnit.findEquipmentOperator('MAT')&#xA;  newChas.setFieldValue(ArgoBizMetafield.EQUIPMENT_OWNER, bizOwner.bzuGkey)&#xA;  newChas.setFieldValue(ArgoBizMetafield.EQUIPMENT_OPERATOR, bizOperator.bzuGkey)&#xA;  */&#xA; }catch(Exception e){&#xA;    e.printStackTrace()&#xA; }&#xA;}&#xA;                                                                                                                                       &#xA;&#xA;}" />
<digital-asset id="GvyCmisEventOverDimension" short-description="GvyCmisEventOverDimension" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;&#xA;public class GvyCmisEventOverDimension{&#xA; &#xA;  def ACTION = &quot;action='null'&quot;&#xA;  def LAST_ACTION = &quot;lastAction='null'&quot;&#xA;&#xA;  //UNIT_DIMENSION_UPDATE  &#xA;  public String getUnitDimensionUpdate(String xmlGvyData,Object event,Object unit)&#xA;  {&#xA;     def  xmlGvyString = xmlGvyData&#xA;     try&#xA;    {&#xA;       def outOfGauge  = unit.getFieldValue(&quot;unitIsOog&quot;); &#xA; &#xA;        if( (event.wasFieldChanged('OOGFront') || event.wasFieldChanged('OOGBack') ||&#xA;           event.wasFieldChanged('OOGTop') || event.wasFieldChanged('OOGLeft') ||  &#xA;           event.wasFieldChanged('OOGRight')) &amp;&amp; outOfGauge.equals(Boolean.FALSE) )&#xA;        {&#xA;            xmlGvyString = xmlGvyString.replace(LAST_ACTION,&quot;lastAction='OVD'&quot;);&#xA;            xmlGvyString = xmlGvyString.replace(ACTION,&quot;action='OVD'&quot;) &#xA;         }&#xA;     }catch(Exception e){&#xA;        e.printStackTrace()&#xA;     }&#xA;&#xA;     return xmlGvyString;&#xA;   }&#xA;&#xA;   //MAP ACTION EDT&#xA;/*   public String getCmisActionEDT(String xmlGvyData, Object appendObj)&#xA;  {&#xA;    def  xmlGvyString = xmlGvyData&#xA;    try&#xA;   {&#xA;      def action = appendObj.getFieldValues(xmlGvyString, &quot;action=&quot;);&#xA;      def lastaction = appendObj.getFieldValues(xmlGvyString, &quot;lastAction=&quot;);&#xA;      def actionOld = &quot;action='&quot;+action+&quot;'&quot;;&#xA;      def lastActionOld = &quot;lastAction='&quot;+lastaction+&quot;'&quot; &#xA;&#xA;      xmlGvyString = xmlGvyString.replace(lastActionOld,&quot;lastAction='EDT'&quot;);&#xA;      xmlGvyString = xmlGvyString.replace(actionOld,&quot;action='EDT'&quot;) &#xA;&#xA;   }catch(Exception e){&#xA;       e.printStackTrace()&#xA;   }&#xA;&#xA;    return xmlGvyString;&#xA;   }&#xA;*/&#xA;&#xA; }//Class Ends" />
<digital-asset id="GvyCmisEquipmentHoldEvents" short-description="GvyCmisEquipmentHoldEvents" is-pre-deployed="N" groovy-code="/*&#xA;* Sr doer  Date      change&#xA;* A1 GR    11/01/10  SN4Q : Changes DIR to Category=Storage as dir was not getting computed&#xA;* A2 GR    03/14/10  Commented out setting locationStatus=6 coz MNS is getting jammed&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;&#xA;public class GvyCmisEquipmentHoldEvents{&#xA;&#xA;def locationStatus =''&#xA;def gvyCmisUtil = null;&#xA;&#xA;public String setEquipmentHoldFields(String xmlGvyData, Object event, Object unit)&#xA;{&#xA;&#xA;  def xmlGvyString = xmlGvyData&#xA;  GroovyInjectionBase gvyBaseClass = new GroovyInjectionBase()&#xA;  def gvyCmisTxtFmt =  gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisTxtMsgFormatter&quot;);&#xA;&#xA;  try{&#xA;  Event gvyEventObj = event.getEvent()&#xA;  def eventNotes = gvyEventObj.getEventNote()&#xA;  eventNotes = eventNotes != null ? gvyCmisTxtFmt.replaceQuotes(eventNotes) : null&#xA;  String eventType =  gvyEventObj.getEventTypeId()&#xA;  def u = unit&#xA;&#xA;  //Sets the locationStatus class var&#xA;  getLocationStatus(unit)&#xA;&#xA;  def _freightkind=u.getFieldValue(&quot;unitFreightKind&quot;)&#xA;  def freightkind = _freightkind != null ? _freightkind.getKey() : ''&#xA;&#xA;  def holdsList = u.getFieldValue(&quot;unitAppliedHoldOrPermName&quot;)&#xA;  holdsList = holdsList != null ? holdsList : ''&#xA;&#xA;&#xA;  def appendObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;)&#xA;  gvyCmisUtil =  gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;&#xA;  def holdFlag = true&#xA;  //CHECK ON EVENT TYPE&#xA;  if(eventType.equals(&quot;CL_HOLD&quot;)){&#xA;     xmlGvyString = getClaimHold(freightkind, xmlGvyString, eventNotes, appendObj, unit)&#xA;     getClaim(xmlGvyString,gvyBaseClass,unit)&#xA;     holdFlag = false&#xA;  }&#xA;  else if(eventType.equals(&quot;CG_DMG_HOLD&quot;)){&#xA;     xmlGvyString = getCgDmgHold(xmlGvyString, appendObj, gvyBaseClass, eventType, unit)&#xA;     holdFlag = false&#xA;  }&#xA;  else if(eventType.equals(&quot;CL_RELEASE&quot;)){&#xA;     getClaimRel(xmlGvyString,gvyBaseClass,unit,appendObj)&#xA;     holdFlag = false&#xA;  }&#xA;  else if(eventType.equals(&quot;CG_DMG_RELEASE&quot;)){&#xA;     getClaimRel(xmlGvyString,gvyBaseClass,unit,appendObj)&#xA;     holdFlag = false&#xA;  }&#xA;  else if(eventType.equals(&quot;SHOP_HOLD&quot;)){&#xA;     xmlGvyString = getShopHold(xmlGvyString,eventType,appendObj,eventNotes)&#xA;     holdFlag = false&#xA;  }&#xA;  else if(eventType.equals('SHOP_RELEASE')){&#xA;     xmlGvyString  = getShopRelease(xmlGvyString,appendObj,unit)&#xA;     holdFlag = false&#xA;  }&#xA;  else if(eventType.equals('LTV_HOLD')){&#xA;    xmlGvyString  = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;stowFlag=&quot;,&quot;C&quot;,null,null,null)&#xA;     holdFlag = false&#xA;  }&#xA;  else if(eventType.equals('LTV_RELEASE')){&#xA;    xmlGvyString  = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;stowFlag=&quot;,&quot;null&quot;,null,null,null)&#xA;     holdFlag = false&#xA;  }&#xA;  else if(eventType.equals('INGATE_HOLD')){&#xA;    xmlGvyString  = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;damageCode=&quot;,&quot;Z&quot;,null,null,null)&#xA;     holdFlag = false&#xA;  }&#xA;  else if(eventType.equals('INGATE_RELEASE')){&#xA;    xmlGvyString  = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;damageCode=&quot;,&quot;null&quot;,null,null,null)&#xA;     holdFlag = false&#xA;  }&#xA;&#xA;&#xA;  //Process fields for CL,CG_DMG and SHOP HOLD&#xA;  if(holdFlag)&#xA;  {&#xA;    def claimsHold = holdsList!= null ? holdsList.indexOf(&quot;CL&quot;) : -1&#xA;    def cgmgHold = holdsList!= null ? holdsList.indexOf(&quot;CG_DMG&quot;) : -1&#xA;    def shopHold = holdsList!= null ? holdsList.indexOf(&quot;SHOP&quot;) : -1&#xA;    def ltvHold = holdsList!= null ? holdsList.indexOf(&quot;LTV&quot;) : -1&#xA;    def ingateHold = holdsList!= null ? holdsList.indexOf(&quot;INGATE&quot;) : -1&#xA;&#xA;    if(claimsHold != -1){&#xA;      xmlGvyString = getClaimHold(freightkind, xmlGvyString, eventNotes, appendObj, unit)&#xA;    }&#xA;    if(cgmgHold != -1){&#xA;       xmlGvyString = getCgDmgHold(xmlGvyString, appendObj, gvyBaseClass, eventType, unit)&#xA;    }&#xA;    if(shopHold != -1){&#xA;      xmlGvyString = getShopHold(xmlGvyString,eventType,appendObj,eventNotes)&#xA;    }&#xA;    if (ltvHold != -1){&#xA;&#x9;&#x9;if (holdsList != &quot;SHOW LTV&quot;){&#xA;&#x9;&#x9;&#x9;xmlGvyString  = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;stowFlag=&quot;,&quot;C&quot;,null,null,null)&#xA;&#x9;&#x9;}&#xA;    }&#xA;    if(ingateHold != -1){&#xA;       xmlGvyString  = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;damageCode=&quot;,&quot;Z&quot;,null,null,null)&#xA;    }&#xA;&#xA;  }&#xA;&#xA; }catch(Exception e){&#xA;   e.printStackTrace();&#xA; }&#xA;&#xA;&#xA; return xmlGvyString&#xA;}&#xA;&#xA;   //CL_HOLD&#xA;   public String getClaimHold(String freightkind, String xmlGvyData, String eventNotes, Object appendObj,Object unit)&#xA;  {&#xA;     def xmlGvyString = xmlGvyData&#xA;     //def locationStatus = appendObj.getFieldValues(xmlGvyString, &quot;locationStatus=&quot;);&#xA;&#xA;     def transitState=unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;     transitState = transitState != null ? transitState.getKey() : ''&#xA;     if(!transitState.equals('S40_YARD')){&#xA;        xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;consignee=&quot;,&quot;CLAIMS-MTY&quot;,null,null,null)&#xA;     }&#xA;     def equiType=unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;)&#xA;     equiType = equiType != null ? equiType : ''&#xA;     if (locationStatus.equals(&quot;1&quot;) &amp;&amp; equiType.startsWith('R'))&#xA;    {&#xA;     //A2  xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;locationStatus=&quot;,&quot;6&quot;,null,null,null)&#xA;    }&#xA;    return xmlGvyString&#xA;  }&#xA;&#xA;  //CG_DMG_HOLD&#xA;  public String getCgDmgHold(String xmlGvyData, Object appendObj, Object gvyBaseClass, String  eventType, Object unit)&#xA;  {&#xA;    def xmlGvyString = xmlGvyData&#xA;    try&#xA;    {&#xA;      //def locationStatus = appendObj.getFieldValues(xmlGvyString, &quot;locationStatus=&quot;);&#xA;      def dir = appendObj.getFieldValues(xmlGvyString, &quot;dir=&quot;);&#xA;      def cargoNotes = appendObj.getFieldValues(xmlGvyString, &quot;cargoNotes=&quot;);&#xA;     def consignee = appendObj.getFieldValues(xmlGvyString, &quot;consignee=&quot;);&#xA;     def transitState=unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;     transitState = transitState != null ? transitState.getKey() : ''&#xA;     def category=unit.getFieldValue(&quot;unitCategory&quot;)&#xA;&#xA;      if(consignee.equals('%') &amp;&amp; !transitState.equals('S40_YARD')){&#xA;         xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;consignee=&quot;,&quot;CLAIMS-MTY &quot;,null,null,null)&#xA;       }else if(!transitState.equals('S40_YARD')){&#xA;         xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;consignee=&quot;,&quot;CLAIMS-MTY &quot;,&quot;L&quot;,null,null)&#xA;       }&#xA;      def cargoNotesValue = appendObj.getFieldValues(xmlGvyString, &quot;cargoNotes=&quot;);&#xA;      if(!cargoNotesValue.equals('null')){&#xA;        xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;cargoNotes=&quot;,&quot;CG/EQUIP HOLD-&quot;,&quot;L&quot;,null,null)&#xA;      }&#xA;      else{&#xA;        xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;cargoNotes=&quot;,&quot;CG/EQUIP HOLD&quot;,null,null,null)&#xA;      }&#xA;&#xA;      //if(locationStatus.equals(&quot;1&quot;) &amp;&amp; dir.equals(&quot;MTY&quot;)){&#xA;&#x9;  if(locationStatus.equals(&quot;1&quot;) &amp;&amp; UnitCategoryEnum.STORAGE.equals(category)){ //A1&#xA;        //A2 xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;locationStatus=&quot;,&quot;6&quot;,null,null,null)&#xA;          if(eventType.equals(&quot;CG_DMG_HOLD&quot;)){&#xA;                postAcetHoldsMsg(xmlGvyString,gvyBaseClass)&#xA;         }&#xA;     }&#xA;    }catch(Exception e){&#xA;       e.printStackTrace();&#xA;    }&#xA;&#xA;   return xmlGvyString&#xA;  }&#xA;&#xA;  //SHOP_HOLD&#xA;  public String getShopHold(String xmlGvyData,String eventType,Object appendObj, String eventnotes)&#xA;  {&#xA;     def xmlGvyString = xmlGvyData&#xA;     try&#xA;     {&#xA;       //def  locationStatus = appendObj.getFieldValues(xmlGvyString, &quot;locationStatus=&quot;);&#xA;       def action = appendObj.getFieldValues(xmlGvyString, &quot;action=&quot;);&#xA;       def lastaction = appendObj.getFieldValues(xmlGvyString, &quot;lastAction=&quot;);&#xA;&#xA;       def cargoNotes = appendObj.getFieldValues(xmlGvyString, &quot;cargoNotes=&quot;);&#xA;       if(!cargoNotes.equals(&quot;null&quot;)){&#xA;          cargoNotes = eventnotes!= null ? 'TO F&amp;amp;M-'+eventnotes+'.'+cargoNotes : 'TO F&amp;amp;M '+cargoNotes&#xA;          xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;cargoNotes=&quot;,cargoNotes,null,null,null)&#xA;        }else{&#xA;          cargoNotes = eventnotes!= null ? 'TO F&amp;amp;M-'+eventnotes+'.' : 'TO F&amp;amp;M '&#xA;         xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;cargoNotes=&quot;,cargoNotes,null,null,null)&#xA;       }&#xA;&#xA;       if(locationStatus.equals(&quot;1&quot;))&#xA;       {&#xA;         //A2 -- xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;locationStatus=&quot;,&quot;6&quot;,null,null,null)&#xA;         def actionOld = &quot;action='&quot;+action+&quot;'&quot;;&#xA;         def lastActionOld = &quot;lastAction='&quot;+lastaction+&quot;'&quot;&#xA;&#xA;         if(eventType.equals('SHOP_HOLD')){&#xA;           xmlGvyString = xmlGvyString.replace(actionOld,&quot;action='TFM'&quot;);&#xA;           xmlGvyString = xmlGvyString.replace(lastActionOld,&quot;lastAction='TFM'&quot;);&#xA;         }&#xA;       }&#xA;     }catch(Exception e){&#xA;         e.printStackTrace()&#xA;     }&#xA;&#xA;     return xmlGvyString;&#xA;   }&#xA;&#xA;   //SHOP_RELEASE&#xA;   public String getShopRelease(String xmlGvyData, Object appendObj, Object unit)&#xA;  {&#xA;     def xmlGvyString = xmlGvyData&#xA;     try&#xA;    {&#xA;       //def  locationStatus = appendObj.getFieldValues(xmlGvyString, &quot;locationStatus=&quot;);&#xA;       def lkpLocType=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;       lkpLocType = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;       def locationStatus = lkpLocType.equals('YARD') ? '1' : '0'&#xA;&#xA;       def cargoNotes = appendObj.getFieldValues(xmlGvyString, &quot;cargoNotes=&quot;);&#xA;       if(cargoNotes != null )&#xA;       {&#xA;          cargoNotes = cargoNotes.replace(&quot;TO F&amp;amp;M &quot;, &quot;&quot;)&#xA;          cargoNotes = cargoNotes.replace(&quot;TO F&amp;amp;M-&quot;, &quot;&quot;)&#xA;/*        if(cargoNotes.indexOf(&quot;TO F&amp;M-&quot;) != -1)&#xA;       {&#xA;          if(cargoNotes.indexOf(&quot;.&quot;) !=-1){&#xA;               cargoNotes = cargoNotes.substring(cargoNotes.indexOf(&quot;.&quot;)+1)&#xA;          }&#xA;        }&#xA;*/&#xA;        xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;cargoNotes=&quot;,cargoNotes,null,null,null)&#xA;       }&#xA;&#xA;       if(locationStatus.equals(&quot;1&quot;))&#xA;      {&#xA;        xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;locationStatus=&quot;,&quot;1&quot;,null,null,null)&#xA;        xmlGvyString = xmlGvyString.replace(&quot;lastAction='null'&quot;,&quot;lastAction='FFM'&quot;)&#xA;        xmlGvyString = xmlGvyString.replace(&quot;action='null'&quot;,&quot;action='FFM'&quot;)&#xA;       }&#xA;    }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    }&#xA;       return xmlGvyString;&#xA;   }&#xA;&#xA;&#xA;  //CL_RELEASE and CG_DMG_RELEASE&#xA;  public void getClaim(String xmlGvyData, Object gvyBaseClass, Object unit)&#xA;  {&#xA;     def xmlGvyString = xmlGvyData&#xA;     def lkpLocType=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;     def lkpLocTypeKy = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;     if(lkpLocTypeKy.equals('YARD')){&#xA;         postAcetHoldsMsg(xmlGvyString,gvyBaseClass)&#xA;      }&#xA;  }&#xA;&#xA;  public void getClaimRel(String xmlGvyData, Object gvyBaseClass, Object unit,Object appendObj)&#xA;  {&#xA;     def xmlGvyString = xmlGvyData&#xA;     def lkpLocType=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;     def lkpLocTypeKy = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;     if(lkpLocTypeKy.equals('YARD')){&#xA;         xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;locationStatus=&quot;,&quot;1&quot;,null,null,null)&#xA;         postAcetHoldsMsg(xmlGvyString,gvyBaseClass)&#xA;      }&#xA;  }&#xA;&#xA;  //Post Acets Msg for CL/CG Hold -- A1&#xA;  public void postAcetHoldsMsg(String xmlGvyData, Object gvyBaseClass){&#xA;&#x9;   def xmlGvyString = xmlGvyData&#xA;       gvyCmisUtil = gvyCmisUtil == null ? gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;) : gvyCmisUtil;&#xA;&#x9;   gvyCmisUtil.postMsgForAction(xmlGvyData,gvyBaseClass,&quot;CLS&quot;)&#xA;  }&#xA;&#xA;  public void getLocationStatus(Object unit){&#xA;       def lkpLocType=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;       lkpLocType = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;       locationStatus = lkpLocType.equals('YARD') ? '1' : ''&#xA;  }&#xA;&#xA;}" />
<digital-asset id="GvyCmisEventUnitDismount" short-description="GvyCmisEventUnitDismount" is-pre-deployed="N" groovy-code="/*&#xA;* Srno doer date  change&#xA;* A1    GR   07/18/10 change posting method&#xA;*/&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.business.atoms.EquipClassEnum&#xA;&#xA;public class GvyCmisEventUnitDismount&#xA;{&#xA;&#xA;    public String getAttachedEquipId(String xmlData,Object event, Object gvyBaseClass)&#xA;    {&#xA;        def xmlGvyString = xmlData&#xA;        try&#xA;        {&#xA;            def unit = event.getEntity()&#xA;            def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;            def lkpLocType = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;            lkpLocType = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;            //def locationStatus = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;locationStatus=&quot;)&#xA;            def locationStatus = lkpLocType.equals('TRUCK') ? '3' : ''&#xA;            println('Unit Mount Location ::'+locationStatus)&#xA;            if(!locationStatus.equals('3'))&#xA;            {&#xA;                getDetachedEquipId(xmlData,event,gvyBaseClass)&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;&#xA;    public String getDetachedEquipId(String xmlData,Object event, Object gvyBaseClass)&#xA;    {&#xA;        def xmlGvyString = xmlData&#xA;        def xmlGvyEquipment = '';&#xA;&#xA;        def unit = event.getEntity()&#xA;        def unitId = unit.getFieldValue(&quot;unitId&quot;)&#xA;        def gvyCmisUtil = null&#xA;        try&#xA;        {&#xA;            gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;            def gvyEventObj = event.getEvent()&#xA;            def gvyEventType = gvyEventObj.getEventTypeId()&#xA;            def eventNotes = gvyEventObj.getEventNote()&#xA;            eventNotes = eventNotes != null ? eventNotes : ''&#xA;            def equipId  = ''&#xA;&#xA;            def lastIndx = eventNotes.indexOf(&quot; &quot;)&#xA;            if(lastIndx == -1)&#xA;            {&#xA;                equipId = eventNotes.length() ==  0 ? ''  : eventNotes&#xA;                println('equipId_event '+equipId)&#xA;            }&#xA;            else&#xA;            {&#xA;                equipId = eventNotes.substring(0,lastIndx)&#xA;                println('equipId '+equipId+'   lastIndx ::'+lastIndx)&#xA;            }&#xA;&#xA;            def equipClassType = null&#xA;            try{&#xA;                equipClassType = equipId != null &amp;&amp; !equipId.equals('swiped')  ? Equipment.loadEquipment( equipId) : null;&#xA;            }catch(Exception e){&#xA;                println(&quot;Dismounted/Swiped Owner Chassis ::&quot;+equipId)&#xA;                equipClassType = null;&#xA;            }&#xA;            if(equipClassType == null){&#xA;                return&#xA;            }&#xA;&#xA;            if(equipClassType instanceof com.navis.argo.business.reference.Chassis)&#xA;            {&#xA;                println('equipClassType inside chassis ::'+equipClassType)&#xA;                def chassisId = equipId != null ? equipId.substring(0,equipId.length()-1) : ''&#xA;                def chassisCd =  equipId != null ? equipId.substring(equipId.length()-1) : ''&#xA;&#xA;                //Pass Record for Detached Equipment&#xA;                xmlGvyEquipment = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;unitClass=&quot;,&quot;CHASSIS&quot;)&#xA;                xmlGvyEquipment = gvyCmisUtil.eventSpecificFieldValue(xmlGvyEquipment,&quot;chassisNumber=&quot;,chassisId)&#xA;                xmlGvyEquipment = gvyCmisUtil.eventSpecificFieldValue(xmlGvyEquipment,&quot;chassisCd=&quot;,chassisCd)&#xA;                xmlGvyEquipment = gvyCmisUtil.eventSpecificFieldValue(xmlGvyEquipment,&quot;sectionCode=&quot;,'%')&#xA;&#xA;                if (gvyEventType.equals('UNIT_DISMOUNT')) {&#xA;                    xmlGvyEquipment = gvyCmisUtil.eventSpecificFieldValue(xmlGvyEquipment,&quot;ctrNo=&quot;,&quot;null&quot;)&#xA;                }&#xA;&#xA;            }// If for Chassis ends&#xA;            else if(equipClassType instanceof com.navis.argo.business.reference.Accessory)&#xA;            {&#xA;                println('equipClassType inside Accessory ::'+equipClassType)&#xA;&#xA;                if (equipId != null) {&#xA;                    try {&#xA;                        if (!equipId.toString().isEmpty()) {&#xA;&#xA;                            equipId=gvyCmisUtil.removeAccessoryCheckdigit(equipId);&#xA;&#xA;                        }&#xA;                    } catch (Exception e) {&#xA;                        println(&quot;Error occured while removing checkdigit from equipClassType accessory:&quot; + e.getMessage());&#xA;                    }&#xA;                }&#xA;&#xA;                //Pass Record for Detached Equipment&#xA;                xmlGvyEquipment = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;unitClass=&quot;,&quot;ACCESSORY&quot;)&#xA;                xmlGvyEquipment = gvyCmisUtil.eventSpecificFieldValue(xmlGvyEquipment,&quot;accessory=&quot;,equipId)&#xA;                xmlGvyEquipment = gvyCmisUtil.eventSpecificFieldValue(xmlGvyEquipment,&quot;mgWeight=&quot;,&quot;%&quot;)&#xA;&#xA;                xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;unitClass=&quot;,&quot;CHASSIS&quot;)&#xA;                xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;sectionCode=&quot;,'%')&#xA;&#xA;                if(gvyEventType.equals('UNIT_MOUNT'))&#xA;                {&#xA;                    xmlGvyEquipment = gvyCmisUtil.eventSpecificFieldValue(xmlGvyEquipment,&quot;lastAction=&quot;,&quot;MGM&quot;)&#xA;                    xmlGvyEquipment = gvyCmisUtil.eventSpecificFieldValue(xmlGvyEquipment,&quot;action=&quot;,&quot;MGM&quot;)&#xA;                }&#xA;                else if (gvyEventType.equals('UNIT_DISMOUNT'))&#xA;                {&#xA;                    //Sets Chassis values&#xA;                    xmlGvyString = setChassisValue(xmlGvyString,eventNotes,unitId,gvyCmisUtil)&#xA;                    xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;accessory=&quot;,&quot;null&quot;)&#xA;&#xA;                    xmlGvyEquipment = gvyCmisUtil.eventSpecificFieldValue(xmlGvyEquipment,&quot;locationStatus=&quot;,&quot;6&quot;)&#xA;                    xmlGvyEquipment = gvyCmisUtil.eventSpecificFieldValue(xmlGvyEquipment,&quot;truck=&quot;,&quot;null&quot;)&#xA;                    xmlGvyEquipment = gvyCmisUtil.eventSpecificFieldValue(xmlGvyEquipment,&quot;chassisNumber=&quot;,&quot;null&quot;)&#xA;                    xmlGvyEquipment = gvyCmisUtil.eventSpecificFieldValue(xmlGvyEquipment,&quot;chassisCd=&quot;,&quot;null&quot;)&#xA;                    xmlGvyEquipment = gvyCmisUtil.eventSpecificFieldValue(xmlGvyEquipment,&quot;lastAction=&quot;,&quot;MGG&quot;)&#xA;                    xmlGvyEquipment = gvyCmisUtil.eventSpecificFieldValue(xmlGvyEquipment,&quot;action=&quot;,&quot;MGG&quot;)&#xA;                }&#xA;&#xA;            }//Else if for Accessory Ends&#xA;            else if(equipClassType instanceof com.navis.argo.business.reference.Container)&#xA;            {&#xA;                println('equipClassType inside Container ::'+equipClassType)&#xA;                xmlGvyEquipment = gvyCmisUtil.eventSpecificFieldValue(xmlGvyEquipment,&quot;ctrNo=&quot;,equipId)&#xA;&#xA;                //Pass Record for Detached Equipment&#xA;                xmlGvyEquipment = gvyCmisUtil.eventSpecificFieldValue(xmlGvyEquipment,&quot;unitClass=&quot;,&quot;CONTAINER&quot;)&#xA;            }//Else if for Container Ends&#xA;&#xA;            //Post Primary Unit Msg&#xA;            //println('xmlGvyString_Primary ::'+xmlGvyString)&#xA;            //gvyBaseClass.sendXml(xmlGvyString)&#xA;            gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,&quot;null&quot;)&#xA;&#xA;            // Post Secondary unit Msg&#xA;            //println('xmlGvyEquipment ::'+xmlGvyEquipment)&#xA;            //gvyBaseClass.sendXml(xmlGvyEquipment)&#xA;            gvyCmisUtil.postMsgForAction(xmlGvyEquipment,gvyBaseClass,&quot;null&quot;)&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;&#xA;        return xmlGvyString&#xA;    }&#xA;&#xA;    public String setChassisValue(String xmlData, String eventNotes, String unitId, Object gvyCmisUtil)&#xA;    {&#xA;        def xmlGvyString = xmlData&#xA;        try&#xA;        {&#xA;            Equipment primaryClass = unitId != null ? Equipment.loadEquipment(unitId) : '';&#xA;            //Check to see if Container is the primary class&#xA;            if((primaryClass instanceof com.navis.argo.business.reference.Container) &amp;&amp; eventNotes != null)&#xA;            {&#xA;                def chassisNbrIndx = eventNotes.indexOf(&quot;as&quot;)&#xA;                if(chassisNbrIndx != -1)&#xA;                {&#xA;                    //println('chassisNbrIndx ::'+chassisNbrIndx+' chassisNbrIndx+3 :::'+chassisNbrIndx+3)&#xA;                    def chassisNbr = eventNotes.substring(chassisNbrIndx+3,eventNotes.indexOf(&quot; &quot;,chassisNbrIndx+3))&#xA;                    chassisNbr = chassisNbr != null ? chassisNbr : ''&#xA;                    println(&quot;chassisNbr ::::::::::&quot;+chassisNbr)&#xA;                    def chassisId = chassisNbr.substring(0,chassisNbr.length()-1)&#xA;                    def chassisCd = chassisNbr.substring(chassisNbr.length()-1)&#xA;                    xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;chassisNumber=&quot;,chassisId)&#xA;                    xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;chassisCd=&quot;,chassisCd)&#xA;&#xA;                    return xmlGvyString;&#xA;                }&#xA;            }&#xA;        }&#xA;        catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return xmlGvyString;&#xA;    }&#xA;&#xA;}" />
<digital-asset id="GvyUnitFieldTracker" short-description="GvyUnitFieldTracker" is-pre-deployed="N" groovy-code="import com.navis.argo.util.FieldChangeTracker&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdList;&#xA;import com.navis.inventory.business.api.UnitField;&#xA;&#xA;&#xA;public class GvyUnitFieldTracker&#xA;{&#xA;    &#xA;   //Method post a unit Property Update event for Field change &#xA;   public void recordFieldUpdtEvent(Object tracker,Object unit)&#xA;   {&#xA;     try{ &#xA;     def changes = tracker.getChanges(unit);&#xA;        if(changes != null &amp;&amp; changes.getFieldChangeCount() != 0) {&#xA;        unit.recordUnitEvent(com.navis.argo.business.atoms.EventEnum.UNIT_PROPERTY_UPDATE,changes , &quot;Field Update&quot;);&#xA;      }&#xA;     }catch(Exception e){&#xA;         e.printStacktrace()&#xA;     }&#xA;   }&#xA;&#xA;    //Method maps the Field changed&#xA;    public FieldChangeTracker createFieldChangeTracker(Object unit) &#xA;   {&#xA;       MetafieldId [] metaFieldId = null &#xA;       try{ &#xA;        metaFieldId = [InventoryField.UNIT_VISIT_STATE,InventoryField.UNIT_DECLARED_IB_CV, InventoryField.UNIT_CATEGORY, InventoryField.UNIT_FREIGHT_KIND, InventoryField.UNIT_DRAY_STATUS, InventoryField.UNIT_SPECIAL_STOW, InventoryField.UNIT_SPECIAL_STOW2, InventoryField.UNIT_SPECIAL_STOW3, InventoryField.UNIT_DECK_RQMNT,InventoryField.UNIT_REQUIRES_POWER,InventoryField.UNIT_IS_POWERED, InventoryField.UNIT_WANT_POWERED, InventoryField.UNIT_POWER_RQST_TIME, InventoryField.UNIT_IS_OOG, InventoryField.UNIT_OOG_BACK_CM, InventoryField.UNIT_OOG_FRONT_CM, InventoryField.UNIT_OOG_LEFT_CM, InventoryField.UNIT_OOG_RIGHT_CM, InventoryField.UNIT_OOG_TOP_CM,InventoryField.UNIT_LINE_OPERATOR,InventoryField.UNIT_GOODS_AND_CTR_WT_KG, InventoryField.UNIT_GOODS_AND_CTR_WT_KG_ADVISED, InventoryField.UNIT_GOODS_AND_CTR_WT_KG_GATE_MEASURED, InventoryField.UNIT_GOODS_AND_CTR_WT_KG_YARD_MEASURED, InventoryField.UNIT_SEAL_NBR1, InventoryField.UNIT_SEAL_NBR2, InventoryField.UNIT_SEAL_NBR3, InventoryField.UNIT_SEAL_NBR4, InventoryField.UNIT_REMARK, InventoryField.UNIT_FLEX_STRING01,InventoryField.UNIT_FLEX_STRING02, InventoryField.UNIT_FLEX_STRING03, InventoryField.UNIT_FLEX_STRING04, InventoryField.UNIT_FLEX_STRING05, InventoryField.UNIT_FLEX_STRING06, InventoryField.UNIT_FLEX_STRING07, InventoryField.UNIT_FLEX_STRING08, InventoryField.UNIT_FLEX_STRING09, InventoryField.UNIT_FLEX_STRING10, InventoryField.UNIT_FLEX_STRING11,InventoryField.UNIT_FLEX_STRING12, InventoryField.UNIT_FLEX_STRING13, InventoryField.UNIT_FLEX_STRING14, InventoryField.UNIT_FLEX_STRING15, UnitField.UNIT_DEPARTURE_ORDER_NBR, UnitField.UNIT_DECLARED_OB_CV, UnitField.UNIT_CURRENT_UFV_INTENDED_OB_CV, UnitField.UNIT_RTG_POL, UnitField.UNIT_RTG_POD1, UnitField.UNIT_RTG_POD2,UnitField.UNIT_RTG_OPT1, UnitField.UNIT_RTG_OPT2, UnitField.UNIT_RTG_OPT3, UnitField.UNIT_RTG_GROUP, UnitField.UNIT_RTG_RETURN_TO_LOCATION, UnitField.UNIT_RTG_TRUCKING_COMPANY, UnitField.UNIT_RTG_CARRIER_SERVICE, UnitField.UNIT_CMDY_ID, UnitField.UNIT_GDS_CONSIGNEE_AS_STRING, UnitField.UNIT_GDS_SHIPPER_AS_STRING,UnitField.UNIT_GDS_ORIGIN, UnitField.UNIT_GDS_DESTINATION, UnitField.UNIT_UE_MNR_STATUS, UnitField.UNIT_UE_PLACARDED, UnitField.UNIT_GDS_RFREQ_TEMP_SET_POINT_C, UnitField.UNIT_PRIMARY_EQ_BUILD_DATE, UnitField.UNIT_PRIMARY_EQ_CSC_EXPIRATION, UnitField.UNTI_EQS_GRADE_I_D, UnitField.UNIT_EQ_MATERIAL, InventoryField.GDS_BL_NBR,UnitField.UNIT_GDS_BL_NBR,UnitField.UNIT_TEMP_REQUIRED_C,InventoryField.GDS_COMMODITY,UnitField.EQS_EQ_OWNER_ID,UnitField.EQS_EQ_OPERATOR_ID,UnitField.EQS_EQ_EQTYPE,UnitField.UE_EQ_OWNER,UnitField.UE_EQ_OPERATOR,UnitField.UE_EQ_OWNER_ID,UnitField.UE_EQ_OPERATOR_ID,UnitField.UNIT_PRIMARY_EQTYPE,InventoryField.UFV_TIME_IN,UnitField.WI_UFV_TIME_IN] &#xA;       }catch(Exception e){&#xA;          e.printStackTrace()&#xA;       }&#xA;       return new FieldChangeTracker(unit,metaFieldId);&#xA;   }&#xA; &#xA;   //Method maps the Equipment Field changed &#xA;   public FieldChangeTracker createFieldChangeTrackerEquip(Object equip) &#xA;   {&#xA;       MetafieldId [] metaFieldId = null &#xA;       try{ &#xA;        metaFieldId = [UnitField.EQ_EQTYPE_ID,UnitField.EQ_EQTYPE_ISO_GROUP,UnitField.EQ_RFR_TYPE,UnitField.EQS_EQ_ID_FULL,UnitField.EQS_EQ_EQTYPE,UnitField.EQS_EQ_EQTYPE_ISO_GROUP,UnitField.EQS_EQ_RFR_TYPE,UnitField.EQS_EQ_OPERATOR_ID,UnitField.EQS_EQ_OWNER_ID,UnitField.EQS_EQ_PREVIOUS_OPERATOR_ID,UnitField.EQS_EQ_ISO_GROUP,UnitField.UE_EQ_OWNER,UnitField.UE_EQ_OPERATOR,UnitField.UE_EQ_PREVIOUS_OPERATOR,UnitField.UE_EQ_OWNER_ID,UnitField.UE_EQ_OPERATOR_ID,UnitField.UE_EQ_PREVIOUS_OPERATOR_ID,UnitField.UE_EQ_CLASS,UnitField.UNIT_OPERATOR,UnitField.UNIT_PRIMARY_EQ_ID,UnitField.UNIT_PRIMARY_EQ_ID_FULL,UnitField.UNIT_PRIMARY_EQTYPE,UnitField.UNIT_PRIMARY_RFR_TYPE,UnitField.UNIT_PRIMARY_EQUIP_ISO_GROUP,UnitField.UE_EQ_ID,UnitField.UE_EQ_ID_FULL,UnitField.UE_OPERATOR,UnitField.UE_LINE_OPERATOR,UnitField.UE_EQ_EQTYPE,UnitField.UE_EQ_EQTYPE_ID,UnitField.UE_EQ_OWNER_BIC,UnitField.UE_EQ_OWNER_SCAC,UnitField.UNIT_PRIMARY_UE_EQ_OWNER_ID,UnitField.UNIT_CARRIAGE_UE_EQ_OWNER_ID]&#xA;       }catch(Exception e){&#xA;          e.printStackTrace()&#xA;       }&#xA;       return new FieldChangeTracker(equip,metaFieldId);&#xA;   }&#xA;}&#xA;&#xA;&#xA;" />
<digital-asset id="GroovySeedPrivilege" short-description="GroovySeedPrivilege : Session Factory Log Privilege" is-pre-deployed="N" groovy-code="import com.navis.framework.business.Roastery;&#xA;import com.navis.framework.portal.context.PortalApplicationContext;&#xA;import com.navis.framework.presentation.internationalization.HardCodedResourceKey;&#xA;import com.navis.framework.presentation.util.FrameworkUserActions;&#xA;import com.navis.framework.ulc.server.application.navigation.FrameworkNavigationNodes;&#xA;import com.navis.framework.util.internationalization.PropertyKeyFactory;&#xA;import com.navis.framework.variform.CarinaVariforms;&#xA;import com.navis.security.authorization.IMutablePrivilege;&#xA;import com.navis.security.authorization.PrivilegeFactory;&#xA;import com.navis.security.authorization.securable.ISecuredObjectManager;&#xA;import com.navis.security.authorization.securable.loader.SecuredActionElement;&#xA;import com.navis.security.authorization.securable.loader.SecuredNode;&#xA;import com.navis.security.business.privilege.IPrivilegeManagerMutator;&#xA;import com.navis.security.authorization.privilege.PrivilegeIdFactory;&#xA;import com.navis.security.authorization.IPrivilege;&#xA;/*&#xA;* Dynamically seeds a new privilege controlling the session factory screen.&#xA;* Normally this would be delivered as an xml configuration in the next release.&#xA;*/&#xA;class GroovySeedPrivilege {&#xA;&#xA;  public String execute() &#xA;  {&#xA;   //STEP 1. add the privilege&#xA;   IPrivilegeManagerMutator privilegeManager = (IPrivilegeManagerMutator)Roastery.getBean(&quot;loaderBasedPrivilegeManager&quot;);&#xA;   final IMutablePrivilege priv = PrivilegeFactory.createPrivilege(&quot;DEBUG_SESSION_FACTORY&quot;, null, &quot;2.0&quot;, null);&#xA;   priv.setNameKey(HardCodedResourceKey.valueOf(PropertyKeyFactory.valueOf(&quot;SESSION_FACTORY_PRIV_NAME&quot;), &quot;Debug - Session Factory&quot;));&#xA;   priv.setDescriptionKey(HardCodedResourceKey.valueOf(PropertyKeyFactory.valueOf(&quot;SESSION_FACTORY_PRIV_DESC&quot;), &quot;Access to Session Factory Screen, get HQL timings. Temporary privilege loaded by groovy for the running of this instance&quot;));&#xA;   privilegeManager.addPrivilege(priv);&#xA;&#xA;  // STEP 2. Associate privilege to node and actions&#xA;  ISecuredObjectManager securedMananger = (ISecuredObjectManager)PortalApplicationContext.getBean(ISecuredObjectManager.BEAN_ID);&#xA;  SecuredNode securedNode = new SecuredNode(priv,FrameworkNavigationNodes.NODE_DIAGNOSTICS_SESSION_FACTORY.getName());&#xA;   if (!securedMananger.secureObject(securedNode)) {&#xA;     return &quot;Error-Privilege was NOT seeded.&quot;;&#xA;   }&#xA;   securedMananger.secureObject(new SecuredActionElement(priv,FrameworkUserActions.ENABLE_STATISTICS.getName(), null));&#xA;   securedMananger.secureObject(new SecuredActionElement(priv,FrameworkUserActions.CLEAR_STATISTICS.getName(), null));&#xA;   securedMananger.secureObject(new SecuredActionElement(priv,FrameworkUserActions.DISABLE_STATISTICS.getName(), null));&#xA;   securedMananger.secureObject(new SecuredActionElement(priv,FrameworkUserActions.INFO.getName(),CarinaVariforms.TABLE_SESSION_FACTORY));&#xA;   SecuredActionElement element = new SecuredActionElement(priv,FrameworkUserActions.ENABLE_STATISTICS.getName(), null);&#xA;   IPrivilege foundPriv = privilegeManager.findPrivilege(PrivilegeIdFactory.valueOf(&quot;DEBUG_SESSION_FACTORY&quot;));&#xA;   return &quot;Created Privilege &quot; + foundPriv;&#xA;  }&#xA;}" />
<digital-asset id="GvyXpsEquipmentOwner" short-description="Sets EquipmentOwner for XPS" is-pre-deployed="N" groovy-code="/*&#xA;*  Sr doer date      change&#xA;*  A1 GR   07/13/11  Change to handel lease cntr   &#xA;*  A2 GR   07/14/11  Added 12 new Codes&#xA;*  A3 GR   07/14/11  Added Method setEquipOwnerInBizTask&#xA;*/&#xA;public class GvyXpsEquipmentOwner&#xA;{&#xA;   public void setEquipmentOwner(Object event)&#xA;   {&#xA;     try&#xA;     {&#xA;      def unit = event.getEntity();&#xA;&#x9;  def unitId = unit.unitId&#xA;      def ownerCode = event.getProperty(&quot;EquipmentOwner&quot;);&#xA;      ownerCode = ownerCode != null ? ownerCode : ''&#xA;&#x9;  /*if(!unitId.startsWith('MATU') &amp;&amp; ownerCode.equals('MATU')){&#xA;&#x9;&#x9;&#x9;unit.setUnitFlexString13('LEAS');&#xA;      }*/&#xA;&#x9;  if(ownerCode.equals('MATU') || ownerCode.equals('ANLC') || ownerCode.equals('ANZU') || ownerCode.equals('APLU') ||&#xA;       ownerCode.equals('CCLU') || ownerCode.equals('CSXU') || ownerCode.equals('DOLU') || ownerCode.equals('FSCU') ||  &#xA;       ownerCode.equals('HLCU') || ownerCode.equals('MAEU') || ownerCode.equals('MSGU') || ownerCode.equals('MSLU') ||&#xA;       ownerCode.equals('NYKU') || ownerCode.equals('POLU') ||  ownerCode.equals('PONU') || ownerCode.equals('SHOW') ||&#xA;       ownerCode.equals('ZCSU') || ownerCode.equals('HSDU') || ownerCode.equals('FHSU') || ownerCode.equals('CPSU') &#xA;&#x9;   || ownerCode.equals('MEDX') || ownerCode.equals('WATU') || ownerCode.equals('AMPC') || ownerCode.equals('CHVU') &#xA;&#x9;   || ownerCode.equals('COOP') || ownerCode.equals('CPRU') || ownerCode.equals('EADE') || ownerCode.equals('DCIU') &#xA;&#x9;   || ownerCode.equals('EADU') || ownerCode.equals('HEAD') || ownerCode.equals('MDAN') || ownerCode.equals('MSCU') &#xA;&#x9;   || ownerCode.equals('PLEU'))&#xA;       {&#xA;         unit.setUnitFlexString13(ownerCode);&#xA;       }&#xA;      /* else{&#xA;        unit.setUnitFlexString13('LEAS');&#xA;       }*/&#xA;     }catch(Exception e){&#xA;         e.printStackTrace()&#xA;     }&#xA;   }&#xA;&#xA;&#xA;   /*public void setEquipOwnerInBizTask(dao){&#xA;&#x9;   try{&#xA;&#x9;&#x9;def truckTran = dao.tran&#xA;&#x9;&#x9;def unit = truckTran.tranUnit&#xA;    &#x9;def unitId = unit.unitId&#xA;&#xA;&#x9;&#x9;def equiOwner =unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOwner.bzuId&quot;)&#xA;&#x9;&#x9;if(!unitId.startsWith('MATU') &amp;&amp; equiOwner.equals('MATU')){&#xA;&#x9;&#x9;&#x9;unit.setUnitFlexString13('LEAS');&#xA;        }&#xA;&#x9;   }catch(Exception  e){&#xA;&#x9;&#x9;   e.printStackTrace()&#xA;&#x9;   }&#xA;   }*/&#xA;}" />
<digital-asset id="RejectInternalTruckUnknown" short-description="RejectInternalTruckUnknown" is-pre-deployed="N" groovy-code="import java.io.Serializable;&#xA;&#xA;import com.navis.argo.ArgoEntity;&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.argo.ContextHelper;&#xA;import com.navis.argo.business.xps.model.Che;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.framework.util.internationalization.PropertyKey;&#xA;import com.navis.framework.util.internationalization.PropertyKeyFactory;&#xA;import com.navis.framework.util.message.MessageLevel;&#xA;import com.navis.road.business.model.TruckVisitDetails;&#xA;import com.navis.road.business.util.RoadBizUtil;&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder;&#xA;&#xA;public class RejectInternalTruckUnknown {&#xA;&#xA;    public static String BEAN_ID = &quot;rejectInternalTruckUnknown&quot;;&#xA;    public static PropertyKey INTERNAL_TRUCK_ID_UNKNOWN = PropertyKeyFactory.valueOf(&quot;gate.internal_truck_id_unknown&quot;);&#xA;&#xA;    public void execute(TransactionAndVisitHolder dao, api) {&#xA;&#xA;        TruckVisitDetails tv = dao.getTv();&#xA;        if (tv == null) {&#xA;            return;&#xA;        }&#xA;&#xA;        String truckLicenseNbr = tv.getTvdtlsTruckLicenseNbr();&#xA;api.log('TV DETAILS, LIC #: ' + truckLicenseNbr)&#xA;api.log('Event' + dao.properties);&#xA;api.log('TV' + tv.properties)&#xA;api.log('Tran' + dao.tran.properties)&#xA;&#xA;&#xA;        if (truckLicenseNbr == null) {&#xA;            return;&#xA;        }&#xA;&#xA;        Serializable yardKey = ContextHelper.getThreadYardKey();&#xA;&#xA;        Che xpeChe = findCheByShortName(truckLicenseNbr, yardKey);&#xA;&#xA;        if (xpeChe == null || xpeChe.getCheKind() != INTERNAL_TRUCK) {&#xA;            RoadBizUtil.appendMessage(MessageLevel.SEVERE, INTERNAL_TRUCK_ID_UNKNOWN, truckLicenseNbr);&#xA;        }&#xA;    }&#xA;&#xA;    private Che findCheByShortName(String shortName, Serializable yardKey) {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(ArgoEntity.CHE)&#xA;                .addDqPredicate(PredicateFactory.eq(ArgoField.CHE_YARD, yardKey))&#xA;                .addDqPredicate(PredicateFactory.eq(ArgoField.CHE_SHORT_NAME, shortName));&#xA;&#xA;        return (Che) HibernateApi.getInstance().getUniqueEntityByDomainQuery(dq);&#xA;    }&#xA;&#xA;    private static final Long INTERNAL_TRUCK = 3L;&#xA;}&#xA;&#xA;" />
<digital-asset id="RejectContainerNotInGroup" short-description="RejectContainerNotInGroup" is-pre-deployed="N" groovy-code="import com.navis.argo.business.reference.Group;&#xA;import com.navis.framework.util.internationalization.PropertyKey;&#xA;import com.navis.framework.util.internationalization.PropertyKeyFactory;&#xA;import com.navis.framework.util.message.MessageLevel;&#xA;import com.navis.inventory.business.units.Routing;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.road.business.util.RoadBizUtil;&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder;&#xA;&#xA;public class RejectContainerNotInGroup {&#xA;&#xA;    public static final String BEAN_ID = &quot;rejectContainerNotInGroup&quot;;&#xA;    public static PropertyKey CONTAINER_NOT_IN_GROUP = PropertyKeyFactory.valueOf(&quot;gate.container_not_in_group&quot;);&#xA;&#xA;    public void execute(TransactionAndVisitHolder dao, api) {&#xA;        Unit unit = dao.getTran().getTranUnit();&#xA;        String groupId = getGroupId(unit);&#xA;&#xA;        if (!GROUP_ID.equals(groupId)) {&#xA;            RoadBizUtil.appendMessage(MessageLevel.SEVERE, CONTAINER_NOT_IN_GROUP, dao.getTran().getTranCtrNbr(), groupId);&#xA;        }&#xA;    }&#xA;&#xA;    private String getGroupId(Unit unit) {&#xA;        Routing routing = unit.getUnitRouting();&#xA;        if (routing == null) {&#xA;            return null;&#xA;        }&#xA;&#xA;        Group group = routing.getRtgGroup();&#xA;        if (group == null) {&#xA;            return null;&#xA;        }&#xA;&#xA;        return group.getGrpId();&#xA;    }&#xA;&#xA;    private static final String GROUP_ID = &quot;PASSPASS&quot;;&#xA;}&#xA;" />
<digital-asset id="GvyRejectTranAdvisedUnitMismatch" short-description="GvyRejectTranAdvisedUnitMismatch" is-pre-deployed="N" groovy-code="import com.navis.argo.ContextHelper;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;import com.navis.argo.business.reference.Container;&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.framework.util.BizViolation;&#xA;import com.navis.framework.util.message.MessageCollector;&#xA;import com.navis.framework.util.message.MessageLevel;&#xA;import com.navis.inventory.business.api.UnitFinder;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.road.RoadPropertyKeys;&#xA;import com.navis.road.business.adaptor.IGateTaskAdaptor;&#xA;import com.navis.road.business.atoms.TranSubTypeEnum;&#xA;import com.navis.road.business.model.TruckAction;&#xA;import com.navis.road.business.model.TruckTransaction;&#xA;import com.navis.road.business.util.RoadBizUtil;&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder;&#xA;import java.util.Collection;&#xA;import java.util.Iterator;&#xA;&#xA;public class GvyRejectTranAdvisedUnitMismatch&#xA;    implements IGateTaskAdaptor&#xA;{&#xA; &#xA;    public GvyRejectTranAdvisedUnitMismatch()&#xA;    {&#xA;    }&#xA;&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;        throws BizViolation&#xA;    {&#xA;       println(&quot;GvyRejectTranAdvisedUnitMismatch&quot;);&#xA;        TruckTransaction tran = inDao.getTran();&#xA;        if(tran != null)&#xA;        {&#xA;            TranSubTypeEnum subType = tran.getTranSubType();&#xA;            Container ctr = tran.getTranContainer();&#xA;            println(&quot;GvyRejectTranAdvisedUnitMismatch subType &quot;+subType + &quot;::&quot;+ctr);&#xA;            if(ctr != null)&#xA;            {&#xA;                UnitFinder unitFinder = (UnitFinder)Roastery.getBean(&quot;unitFinder&quot;);&#xA;                Collection unitList = unitFinder.findAllUnitsUsingEq(ContextHelper.getThreadComplex(), ctr);&#xA;                if(unitList == null) return;&#xA;                Iterator iterator = unitList.iterator();&#xA;                while(iterator.hasNext()) {&#xA;                    Unit unit = (Unit)iterator.next();&#xA;                    println(&quot;GvyRejectTranAdvisedUnitMismatch unit &quot;+unit);&#xA;                    if(unit != null &amp;&amp; unit.getUnitCategory() != null &amp;&amp; (UnitVisitStateEnum.ADVISED.equals(unit.getUnitVisitState()) || UnitVisitStateEnum.ACTIVE.equals(unit.getUnitVisitState())))&#xA;                    {&#xA;     &#xA;                        UnitFacilityVisit ufv = unit.getUfvForFacilityNewest(ContextHelper.getThreadFacility());&#xA;                        println(&quot;GvyRejectTranAdvisedUnitMismatch ufv &quot;+ufv);&#xA;                        if(ufv != null &amp;&amp; tran.isReceival() &amp;&amp; !tran.isAdvisedUnitCompatible(subType, unit) &amp;&amp; ufv.isTransitStateAtMost(UfvTransitStateEnum.S20_INBOUND)) {&#xA;                            String[] fields = [ctr.getEqIdFull(), unit.getUnitCategory().getName(), subType.getName()];&#xA;                            RoadBizUtil.getMessageCollector().appendMessage(MessageLevel.SEVERE, RoadPropertyKeys.GATE__UNIT_PREADVISED_TRAN_TYPE_MISMATCH, null,  fields&#xA;                            );&#xA;                           }&#xA;                    }&#xA;                } &#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    public static String BEAN_ID = &quot;rejectTranAdvisedUnitMismatch&quot;;&#xA;&#xA;&#x9;@Override&#xA;&#x9;public TruckAction getDefaultAction() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#xA;}" />
<digital-asset id="GvyCmisEventEditPortBooking" short-description="GvyCmisEventEditPortBooking" is-pre-deployed="N" groovy-code="public class GvyCmisEventEditPortBooking&#xA;{ &#xA;    def cmisActnList = ''&#xA;&#xA;    public String processEditPortBkg(String xmlData,Object event,Object gvyBaseClass)&#xA;    {&#xA;       def xmlGvyString = xmlData&#xA;       try&#xA;       {&#xA;         def unit = event.getEntity()&#xA;         def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;); &#xA;         def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);  &#xA;         def rerouteEvntFeed = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventFeedUnitReroute&quot;)&#xA;         cmisActnList = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisListAction&quot;);  &#xA;         &#xA;          //1]GoodsBLNbr 2] DestPort 3] UnitNotes 4]DischPort 5] LoadPort 6] O/B carrier &#xA;         def updtGdsBlNbrFlag = gvyEventUtil.wasFieldChanged(event, &quot;gdsBlNbr&quot;)&#xA;         def updtDestportFlag = gvyEventUtil.wasFieldChanged(event, &quot;gdsDestination&quot;)&#xA;         def updtUnitNotesFlag = gvyEventUtil.wasFieldChanged(event, &quot;unitRemark&quot;) &#xA;         def updtDischPortFlag = gvyEventUtil.wasFieldChanged(event, &quot;rtgPOD1&quot;)&#xA;         def updtLoadPortFlag = gvyEventUtil.wasFieldChanged(event, &quot;rtgOPL&quot;)&#xA;         def updtObCarrierFlag = gvyEventUtil.wasFieldChanged(event, &quot;ufvIntendedObCv&quot;)&#xA;&#xA;         def locationStatus = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;locationStatus=&quot;)      &#xA;&#xA;         if (updtObCarrierFlag)&#xA;         {&#xA;             processOBCarrierChange(xmlGvyString, gvyBaseClass,gvyCmisUtil)     &#xA;         }&#xA;         if(updtGdsBlNbrFlag || updtDischPortFlag || updtLoadPortFlag)&#xA;         {&#xA;            postFieldChange(xmlGvyString,gvyBaseClass,gvyCmisUtil,locationStatus)&#xA;          }&#xA;          if(updtDestportFlag)&#xA;          {&#xA;            rerouteEvntFeed.processUnitRerouteCmisFeed(xmlGvyString,gvyBaseClass,event,unit,cmisActnList)  &#xA;          }&#xA;         if(updtUnitNotesFlag)&#xA;         {&#xA;            cmisActnList.setActionList(&quot;EDT&quot;)&#xA;         }&#xA;        &#xA;        &#xA;        //Post Cmis msg after appending the required action&#xA;        LinkedHashSet actionList = cmisActnList.getActionList();&#xA;        println(&quot;actionList :::::&quot;+actionList.size())&#xA;        for(aAction in actionList)&#xA;        {&#xA;          println(&quot;UNIT_EDIT_PORT_BOOKING_POSTING ::&quot;+aAction);&#xA;          gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,aAction)&#xA;        }&#xA;&#xA;         println(&quot;&lt;&lt;&lt;&lt; processEditPortBkg(String xmlData,Object event,Object gvyBaseClass) &gt;&gt;&gt;&gt;&quot;)&#xA;      }catch(Exception e){&#xA;           e.printStackTrace()&#xA;      }&#xA;&#xA;    }&#xA;&#xA;    public void postFieldChange(String xmlData,Object gvyBaseClass,Object gvyCmisUtil,String locationStatus)&#xA;   {&#xA;         def xmlGvyString = xmlData&#xA;         try&#xA;         {&#x9; &#xA;           if(locationStatus.equals('7'))&#xA;           {  &#xA;              //overwrite ACTION=NIB &amp; Post Msg&#xA;              cmisActnList.setActionList(&quot;NIB&quot;)&#xA;           }&#xA;           else{&#xA;              //overwrite ACTION=BDC &amp; Post Msg&#xA;              cmisActnList.setActionList(&quot;NIB&quot;)             &#xA;           }&#xA;         }catch(Exception e){&#xA;              e.printStackTrace();&#xA;         }&#xA;    }&#xA;&#xA;  public void processOBCarrierChange(String xmlGvyData, Object gvyBaseClass,Object gvyCmisUtil)&#xA;  {&#xA;     def xmlGvyString = xmlGvyData &#xA;    try&#xA;    {&#xA;      //OBCarrier Cmis Action   &#xA;      cmisActnList.setActionList(&quot;AVL&quot;)&#xA;      cmisActnList.setActionList(&quot;BDC&quot;)       &#xA;     }catch(Exception e){&#xA;       e.printStackTrace();&#xA;     }&#xA;  }&#xA;&#xA;}&#xA;" />
<digital-asset id="GvyCmisDomainQueryUtil" short-description="GvyCmisDomainQueryUtil" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import com.navis.services.business.event.*&#xA;&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.services.business.event.EventFieldChange&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;import com.navis.framework.util.DateUtil;&#xA;import com.navis.argo.business.atoms.EquipClassEnum;&#xA;import com.navis.services.business.rules.Flag;&#xA;import com.navis.services.business.rules.FlagType&#xA;import com.navis.services.ServicesField;&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;&#xA;/*&#xA;* Class Fetches Field Values for Fields/Methods that return field GKey   &#xA;* A1 - Added Change for Query Oracle 10.2.0.5 Upgrade issue &#xA;*/&#xA;public class GvyCmisDomainQueryUtil&#xA;{&#xA;  &#xA;  //Method : Fetches POD value based on GKEY&#xA;  public String lookupRtgPOD(String id) {&#xA;     def prevPod = ''&#xA; try{&#xA;&#x9;   if(id == null){&#xA;          return prevPod;&#xA;       } &#xA;       DomainQuery dq = QueryUtils.createDomainQuery(&quot;RoutingPoint&quot;).addDqPredicate(PredicateFactory.eq(com.navis.argo.ArgoRefField.POINT_GKEY, id));&#xA;      RoutingPoint r = (RoutingPoint)HibernateApi.getInstance().getUniqueEntityByDomainQuery(dq);&#xA;     if(r == null)  {&#xA;        return prevPod;&#xA;      }&#xA;     //prevPod = r.getRtgPOD1();&#xA;      prevPod = r.getPointActualPOD() != null ? r.getPointActualPOD().getPointId() : ''&#xA;   }catch(Exception e){&#xA;    e.printStackTrace()&#xA;   }&#xA; return prevPod&#xA;  }//Method Ends&#xA;  &#xA;&#xA;  //Method : Fetches Commodity Short name based on GKEY&#xA;  public String lookupCommodity(String id) {&#xA;   DomainQuery dq = QueryUtils.createDomainQuery(&quot;Commodity&quot;).addDqPredicate(PredicateFactory.eq(com.navis.argo.ArgoRefField.CMDY_GKEY, id));&#xA;   Commodity c = (Commodity)HibernateApi.getInstance().getUniqueEntityByDomainQuery(dq);&#xA;  if(c == null)  {&#xA;     return &quot;&quot;;&#xA;  }&#xA;  return c.getCmdyShortName();&#xA;&#xA;}&#xA;&#xA;   //Method to Delete Hold/Flag&#xA;   public void deleteFlagType(String inFlagId, Object inLogicalEntity) &#xA;  {&#xA;    FlagType flagType = FlagType.findFlagType(inFlagId);&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(&quot;Flag&quot;).addDqPredicate(PredicateFactory.eq(ServicesField.FLAG_FLAG_TYPE, flagType.getFlgtypGkey())).addDqPredicate(PredicateFactory.eq(ServicesField.FLAG_APPLIED_TO_PRIMARY_KEY, inLogicalEntity.getPrimaryKey()))&#xA;    List flags = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;    for( i in flags) {&#xA;      Flag flag = (Flag) i;&#xA;      ArgoUtils.carefulDelete(flag);&#xA;    }&#xA;&#xA; }&#xA;&#xA; }//Class Ends&#xA;   &#xA;   &#xA;   &#xA;  " />
<digital-asset id="GvyRejectCarrierVisitPhaseDeparted" short-description="GvyRejectCarrierVisitPhaseDeparted" is-pre-deployed="N" groovy-code="import com.navis.argo.business.atoms.CarrierVisitPhaseEnum;&#xA;import com.navis.argo.business.model.CarrierVisit;&#xA;import com.navis.framework.util.message.MessageCollector;&#xA;import com.navis.framework.util.message.MessageLevel;&#xA;import com.navis.road.RoadPropertyKeys;&#xA;import com.navis.road.business.atoms.TranSubTypeEnum;&#xA;import com.navis.road.business.model.TruckTransaction;&#xA;import com.navis.road.business.util.RoadBizUtil;&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder;&#xA;import java.util.Date;&#xA;&#xA;public class GvyRejectCarrierVisitPhaseDeparted&#xA;{&#xA;    private static java.text.SimpleDateFormat format = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy&quot;);&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;    {&#xA;        TruckTransaction tran = inDao.getTran();&#xA;        if(tran != null &amp;&amp; TranSubTypeEnum.RE.equals(tran.getTranSubType()))&#xA;        {&#xA;            CarrierVisit cv = tran.getCarrierVisit();&#xA;            if(cv != null)&#xA;            {&#xA;                def date = cv.getCvATD();&#xA;                if(date != null) {&#xA;                       date = format.format(date)&#xA;                }&#xA;                String[] depart = [cv.getCvId(), date];&#xA;                String[] cancelled = [cv.getCvId()];&#xA;                CarrierVisitPhaseEnum phase = cv.getCvVisitPhase();&#xA;                println(&quot;GvyRejectCarrierVisitPhaseDeparted &quot;+phase+&quot; &quot;+cv.getCvId()+&quot; &quot;+date);&#xA;                if(phase != null)  {&#xA;                    if(phase.equals(CarrierVisitPhaseEnum.DEPARTED) || phase.equals(CarrierVisitPhaseEnum.CLOSED ))  {&#xA;                        println(&quot;Closed&quot;);&#xA;                        RoadBizUtil.getMessageCollector().appendMessage(MessageLevel.SEVERE, RoadPropertyKeys.GATE__CARRIER_DEPARTED, null, depart);&#xA;                    } else if(phase.equals(CarrierVisitPhaseEnum.CANCELED)) {&#xA;                         println(&quot;Cancel&quot;);&#xA;                        RoadBizUtil.getMessageCollector().appendMessage(MessageLevel.SEVERE, RoadPropertyKeys.GATE__CARRIER_CANCELED, null, cancelled);&#xA;                   }&#xA;               }&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    public static String BEAN_ID = &quot;rejectCarrierVisitPhaseDeparted&quot;;&#xA;&#xA;}" />
<digital-asset id="GvyP32Ingate" short-description="GvyP32Ingate" is-pre-deployed="N" groovy-code="import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import java.util.Iterator;&#xA;import java.util.Collection;&#xA;&#xA;public class GvyP32Ingate {&#xA;&#xA;/** If commodity code is SIT reapply DRAY status&#xA;*/&#xA;public void setDray(Object unit) {&#xA;                if(unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;).equals(&quot;SIT&quot;)) {&#xA;                     unit.setFieldValue(&quot;unitDrayStatus&quot;,com.navis.argo.business.atoms.DrayStatusEnum.OFFSITE);&#xA;                }&#xA;}&#xA;&#xA;public void setPosition(Object unit) {&#xA;  &#x9;     // Update Position to P32-1&#xA;                  GroovyEvent moveEvent = new GroovyEvent( null, unit);&#xA;                  moveEvent.setProperty(&quot;PositionFull&quot;,&quot;Y-SI-P32-1&quot;);&#xA;                   moveEvent.setProperty(&quot;PositionSlot&quot;,&quot;P32&quot;);&#xA;                  moveEvent.postNewEvent( &quot;UNIT_YARD_MOVE&quot;, &quot;Position Update on P32 In Gate&quot;);&#xA;&#xA;}&#xA;&#xA;&#xA;}" />
<digital-asset id="NowYardRowPositionRefresh" short-description="NowYardPositionRefresh" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.argo.ArgoReportsField;&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.inventory.business.api.UnitField;&#xA;&#xA;import com.navis.argo.business.atoms.LocTypeEnum;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.argo.business.model.LocPosition;&#xA;import nowsol_chastrack.*;&#xA;/*&#xA;* Class Passes Now Unit Slot updates for &#xA;* 08/16/11 2.1 Updated Email Method&#xA;*/&#xA;/*&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;argo:snx xmlns:argo='http://www.navs.com/argo' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation='http://www.navis.com/argo snx.xsd'&gt;&lt;groovy class-location='database' class-name='NowYardRowPositionRefresh'&gt;&lt;parameters&gt;&lt;parameter id='recorder' value='now' /&gt;&lt;parameter id='position' value='A15' /&gt;&lt;parameter id='note' value='Test' /&gt;&lt;/parameters&gt;&lt;/groovy&gt;&lt;/argo:snx&gt;*/&#xA;&#xA;public class NowYardRowPositionRefresh extends GroovyInjectionBase&#xA;{&#xA;  def emailSender = null;&#xA;  //private static final String emailTo = '1aktosdevteam@matson.com' ;&#xA;  def emailTo = '1aktosdevteam@matson.com';&#xA;&#xA;  public void execute(Map inParameters){&#xA;&#xA;    println(&quot;Calling NowYardRowPositionRefresh&quot;);&#xA;    def nowRefreshSnx = null;&#xA;&#x9;def position = (String) inParameters.get( &quot;position&quot;);&#xA;&#x9;if(position == null || position.trim().length() == 0){&#xA;      throw new Exception(&quot;Now Postion Recieved is Blank&quot;);&#xA;    }&#xA;    def pos = position&#xA;    position = position.replace('.','') &#xA;    println(&quot;Calling NowYardRowPositionRefresh position :; &quot; + position );&#xA;    def chasTrackingBld = getGroovyClassInstance(&quot;NowChassisTrackingBuilder&quot;)&#xA;&#x9;try{&#xA;   &#xA;      String row = '%'+position+'%'&#xA;&#x9;  LocPosition inPosition = new LocPosition(LocTypeEnum.YARD, 'SI', 300863, null, null)&#xA;&#x9;  List ufvList = findAllUfvByPosition(inPosition,row)&#xA;   &#x9;  ufvList = getActiveUnits(ufvList)&#xA;&#x9;&#x9; &#xA;      if(ufvList == null || ufvList.size() == 0 ){&#xA;         nowRefreshSnx = staticSnx(pos,&quot;empty&quot;);&#xA;      }else{&#xA;         StringBuffer strBuff = new StringBuffer();&#xA;         for(aUfv in ufvList){&#xA;&#x9;       def xml = chasTrackingBld.xmlBuilder(aUfv.getUfvUnit(), null,'refresh:'+pos)&#xA;           strBuff.append(xml); &#xA;&#x9;     }&#xA;    &#x9; nowRefreshSnx =  chasTrackingBld.setSnx(strBuff.toString())&#xA;&#x9;  }&#xA;       &#xA;       //chasTrackingBld.postNowMsg(nowRefreshSnx)&#xA;&#xA;&#x9;  }catch(Exception e){&#xA;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;  emailSender = emailSender != null ? emailSender : getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;   &#x9;      emailSender.custSendEmail(emailTo, &quot;N4ToNow : REFRESH ERROR ON ROW : &quot;+position, e.getMessage());&#xA;      }&#xA;  }&#xA;&#xA;&#xA;  public List findAllUfvByPosition(LocPosition inPosition, String row) {&#xA;     DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;).addDqPredicate(PredicateFactory.eq(UnitField.UFV_POS_LOC_TYPE, inPosition.getPosLocType())).addDqPredicate(PredicateFactory.eq(UnitField.UFV_POS_LOC_GKEY, inPosition.getPosLocGkey())).addDqPredicate(PredicateFactory.eq(UnitField.UFV_POS_LOC_ID, inPosition.getPosLocId())).addDqPredicate(PredicateFactory.like(UnitField.UFV_POS_NAME, row));&#xA;     List ufvList = Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;     return ufvList;&#xA;  }&#xA;&#xA;  public List getActiveUnits(List ufvList){&#xA;      List arrList = new ArrayList();&#xA;&#x9;  for(aUfv in ufvList){&#xA;&#x9;    if(UnitVisitStateEnum.ACTIVE.equals(aUfv.getUfvVisitState())){&#xA;&#x9;&#x9;  arrList.add(aUfv)&#xA;        } &#xA;&#x9;  }&#xA;&#x9;  return arrList&#xA;  }&#xA;&#xA;  public String staticSnx(String position, String note){&#xA;   &#xA;   String msg = &quot;&lt;unit transit-state='YARD' unique-key='&quot;+note+&quot;' snx-update-note='refresh:&quot;+position+&quot;' id='&quot;+note+&quot;'&gt;&quot;+&#xA;    &quot;&lt;equipment eqid='&quot;+note+&quot;' role='PRIMARY' height-mm='2591' type='C40' class='CHS' /&gt;&quot;+&#xA;    &quot;&lt;position slot='&quot;+position+&quot;' location='SI' loc-type='YARD' /&gt;&lt;/unit&gt;&quot;;&#xA;&#x9;def chasTrackingBld = getGroovyClassInstance(&quot;NowChassisTrackingBuilder&quot;)&#xA;&#x9;String emptyRow = chasTrackingBld.setSnx( msg)&#xA;    return emptyRow;&#xA;  }&#xA;&#xA;}//Class Ends" />
<digital-asset id="ReportFieldSortUtil" short-description="ReportFieldSortUtil" is-pre-deployed="N" groovy-code="/*&#xA;* Srno doer date      Change&#xA;* A1   GR   02/11/2011  Added Map sorting Map By Value&#xA;* A2   GR   06/30/2011  Added Map sorting Map By Key&#xA;*/&#xA;import java.util.Arrays;&#xA;import java.util.HashMap;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import org.apache.commons.collections.comparators.ComparatorChain;&#xA;import java.util.List&#xA;import java.util.LinkedList&#xA;import java.util.LinkedHashMap&#xA;import java.util.Map&#xA;import java.util.Iterator&#xA;import java.util.Collection&#xA;import java.util.Comparator&#xA;import java.lang.Comparable&#xA;&#xA;&#xA;public class ReportFieldSortUtil {&#xA;&#xA;    public ArrayList processFieldSort(ArrayList unitList, String sortFields)&#xA;    {&#xA;        Object[] dataMapArr =unitList.toArray();  &#xA;        ArrayList arrList = new ArrayList();&#xA;        try&#xA;        {&#xA;             ComparatorChain chain = new ComparatorChain();&#xA;             String[] sortUnitFlds = sortFields.split(',') &#x9;  &#xA;              for(aField in sortUnitFlds)&#xA;             {&#xA;                 if(aField.equals('UnitNbr')){&#xA;                    chain.addComparator(new SortUnitNbr());&#xA;                 }else if(aField.equals('GoodsConsigneeName')){&#xA;                    chain.addComparator(new SortGoodsConsigneeName());&#xA;                 }else if(aField.equals('DeclaredIbCarrierId')){&#xA;                    chain.addComparator(new SortDeclaredIbCarrier());&#xA;                 }else if(aField.equals('truckingCompanyId')){&#xA;                    chain.addComparator(new SortTruckCompanyId()); &#xA;                 }else if(aField.equals('vesselId')){&#xA;                    chain.addComparator(new SortVesselId());   &#xA;                 }else if(aField.equals('createdDate')){&#xA;                    chain.addComparator(new SortCreatedDate())&#xA;                 }else if(aField.equals('EquipmentType')){&#xA;                    chain.addComparator(new SortEquipmentType())&#xA;                 }&#xA;              }//For Ends&#x9; &#xA;&#xA;               Arrays.sort(dataMapArr, chain);&#xA;               printData(dataMapArr);&#xA;&#xA;               for(aUnit in dataMapArr){&#xA;                   arrList.add(aUnit)&#xA;                }&#xA;          }catch(Exception e){&#xA;                e.printStackTrace();&#xA;           }&#xA;         return arrList          &#xA;    } &#xA;          &#xA;    public void printData(Object[] dataMapArr){&#xA;       try&#xA;       {&#xA;           for(aUnitData in dataMapArr)&#xA;           {&#xA;              HashMap map = (HashMap)aUnitData;&#xA;              //println(&quot;KEY :&quot;+map.get(&quot;DeclaredIbCarrierId&quot;)+&quot;  UnitNbr:&quot;+map.get(&quot;UnitNbr&quot;));&#xA;             }&#xA;         }catch(Exception e){&#xA;             e.printStackTrace();&#xA;         }&#xA;     }&#xA;&#xA;   //A1 - Starts Sort Map Object By Value &#xA;  public Map sortMapByValue(Map map) &#xA;  {      &#xA;&#x9;  List list = new LinkedList(map.entrySet());      &#xA;&#x9;  Collections.sort(list, new SortMapObject());      &#xA;&#x9;  Map result = new LinkedHashMap();     &#xA;&#x9;  for (it in list) &#xA;&#x9;  {         &#xA;&#x9;&#x9;  Map.Entry entry = (Map.Entry)it;         &#xA;&#x9;&#x9;  result.put(entry.getKey(), entry.getValue());     &#xA;&#x9;  }     &#xA;&#x9;  return result; &#xA;  }  //A1 - Starts&#xA;&#xA;&#xA;  //A2 - Starts Sort Map Object By Key &#xA;  public Map sortMapByKey(Map map) &#xA;  {      &#xA;&#x9;  List list = new LinkedList(map.entrySet());      &#xA;&#x9;  Collections.sort(list, new SortMapObjectByKey());      &#xA;&#x9;  Map result = new LinkedHashMap();     &#xA;&#x9;  for (it in list) &#xA;&#x9;  {         &#xA;&#x9;&#x9;  Map.Entry entry = (Map.Entry)it;         &#xA;&#x9;&#x9;  result.put(entry.getKey(), entry.getValue());     &#xA;&#x9;  }     &#xA;&#x9;  return result; &#xA;  }  //A2 - Starts&#xA;&#xA;} //ReportFieldSortUtil - Class Ends&#xA;&#xA;&#xA; public class SortMapObject implements java.util.Comparator{&#xA;      public int compare(Object o1, Object o2)&#xA;&#x9;  {&#xA;&#x9;&#x9;  return ((Comparable) ((Map.Entry) (o1)).getValue()).compareTo(((Map.Entry) (o2)).getValue());&#xA;&#x9;  }&#xA; }&#xA;&#xA;&#xA; public class SortMapObjectByKey implements java.util.Comparator{&#xA;      public int compare(Object o1, Object o2)&#xA;&#x9;  {&#xA;&#x9;&#x9;  return ((Comparable) ((Map.Entry) (o1)).getKey()).compareTo(((Map.Entry) (o2)).getKey());&#xA;&#x9;  }&#xA; }&#xA;&#xA; public class SortDeclaredIbCarrier implements java.util.Comparator {&#xA;       public int compare(Object map1, Object map2) {&#xA;           String declaredIb1 = new ReportSort(map1).getDeclaredIbCarrierId();&#xA;           String declaredIb2 = new ReportSort(map2).getDeclaredIbCarrierId();&#xA;           return declaredIb1.compareTo(declaredIb2 );    &#xA;        }&#xA; }&#xA;&#xA; public class SortUnitNbr implements java.util.Comparator {&#xA;        public int compare(Object map1, Object map2) {&#xA;          String unitNbr1 = new ReportSort(map1).getUnitNbr();&#xA;          String unitNbr2 = new ReportSort(map2).getUnitNbr();&#xA;          return unitNbr1.compareTo(unitNbr2);    &#xA;       }&#xA; }&#xA;&#xA;  public class SortGoodsConsigneeName implements java.util.Comparator {&#xA;        public int compare(Object map1, Object map2) {&#xA;          String goodsConsigneeName1 = new ReportSort(map1).getGoodsConsigneeName();&#xA;          String goodsConsigneeName2 = new ReportSort(map2).getGoodsConsigneeName();&#xA;&#x9;&#x9;  goodsConsigneeName1 = goodsConsigneeName1 == null ? &quot;Z&quot; : goodsConsigneeName1&#xA;          goodsConsigneeName2 = goodsConsigneeName2 == null ? &quot;Z&quot; : goodsConsigneeName2&#xA;          return goodsConsigneeName1.compareTo(goodsConsigneeName2);    &#xA;       }&#xA; }&#xA;&#xA; public class SortTruckCompanyId implements java.util.Comparator {&#xA;        public int compare(Object map1, Object map2) {&#xA;          String truckCmpyId1 = new ReportSort(map1).getTruckCompanyId();&#xA;          String truckCmpyId2 = new ReportSort(map2).getTruckCompanyId();&#xA;          return truckCmpyId1.compareTo(truckCmpyId2);    &#xA;       }&#xA; }&#xA;&#xA;public class SortEquipmentType implements java.util.Comparator {&#xA;        public int compare(Object map1, Object map2) {&#xA;          String equipmentType1 = new ReportSort(map1).getEquipmentType();&#xA;          String equipmentType2 = new ReportSort(map2).getEquipmentType();&#xA;          return equipmentType1.compareTo(equipmentType2);    &#xA;       }&#xA; }&#xA;&#xA; public class SortVesselId implements java.util.Comparator {&#xA;        public int compare(Object map1, Object map2) {&#xA;          String vesselId1 = new ReportSort(map1).getVesselId();&#xA;          String vesselId2 = new ReportSort(map2).getVesselId();&#xA;          return vesselId1.compareTo(vesselId2);    &#xA;       }&#xA; }&#xA;&#xA; public class SortCreatedDate implements java.util.Comparator {&#xA;        public int compare(Object map1, Object map2) {&#xA;          Date createdDate1 = new ReportSort(map1).getCreatedDate();&#xA;          Date createdDate2 = new ReportSort(map2).getCreatedDate();&#xA;          return createdDate1.compareTo(createdDate2);    &#xA;       }&#xA; }&#xA;        &#xA;public class ReportSort&#xA;{&#xA;     private String _declaredIbCarrId;&#xA;     private String _unitNbr;&#xA;     private String _truckCompanyId;&#xA;     private String _vesselId;&#xA;     private Date _createdDate;&#xA;&#x9; private String _goodsConsigneeName;&#xA;&#x9; private String _equipmentType;&#xA;        &#x9;    &#xA;     public ReportSort(Object map)&#xA;     {&#xA;        HashMap map1 = (HashMap) map;&#xA;        _declaredIbCarrId = (String)map1.get(&quot;DeclaredIbCarrierId&quot;);&#xA;        _unitNbr = (String)map1.get(&quot;UnitNbr&quot;);&#xA;        _truckCompanyId = (String)map1.get(&quot;truckingCompanyId&quot;);&#xA;        _vesselId = (String)map1.get(&quot;vesselId&quot;);&#xA;        _createdDate = (Date)map1.get(&quot;createdDate&quot;);&#xA;        _goodsConsigneeName = (String)map1.get(&quot;GoodsConsigneeName&quot;);&#xA;&#x9;&#x9;_equipmentType = (String)map1.get(&quot;EquipmentType&quot;);&#xA;     }&#xA;&#xA;&#xA;     public void setDeclaredIbCarrierId(String declaredIbCarrierId){        &#xA;        this._declaredIbCarrId=declaredIbCarrierId;&#xA;     }&#xA;&#xA;     public String getDeclaredIbCarrierId(){          &#xA;         return this._declaredIbCarrId;&#xA;     }&#xA;&#xA;     public void setUnitNbr(String unitNbr){         &#xA;         this._unitNbr=unitNbr;&#xA;     }&#xA;&#xA;     public String getUnitNbr(){&#xA;         return this._unitNbr;&#xA;     }     &#xA;&#xA;&#x9; public void setGoodsConsigneeName(String goodsConsigneeName){         &#xA;         this._goodsConsigneeName=goodsConsigneeName;&#xA;     }&#xA;&#xA;     public String getGoodsConsigneeName(){&#xA;         return this._goodsConsigneeName;&#xA;     }     &#xA;&#xA;     public void setTruckCompanyId(String truckCompanyId){         &#xA;         this._truckCompanyId=truckCompanyId;&#xA;     }&#xA;&#xA;     public String getTruckCompanyId(){&#xA;         return this._truckCompanyId;&#xA;     }&#xA;&#xA;&#xA;&#x9; public void setEquipmentType(String equipmentType){         &#xA;         this._equipmentType=equipmentType;&#xA;     }&#xA;&#xA;     public String getEquipmentType(){&#xA;         return this._equipmentType;&#xA;     }&#xA;&#x9; &#xA;     public void setVesselId(String vesselId){         &#xA;         this._vesselId=vesselId;&#xA;     }&#xA;&#xA;     public String getVesselId(){&#xA;         return this._vesselId;&#xA;     }&#xA;    &#xA;    public void setCreatedDate(Date createdDate){         &#xA;         this._createdDate=createdDate;&#xA;     }&#xA;&#xA;     public Date getCreatedDate(){&#xA;         return this._createdDate;&#xA;     }&#xA;&#xA;&#xA;&#xA;}//Class Ends &#x9;&#x9;  &#xA;&#xA;/*&#xA;  HashMap map1 = new HashMap();&#xA;  map1.put(&quot;DeclaredIbCarrierId&quot;,&quot;MAU726&quot; );&#xA;  map1.put(&quot;UnitNbr&quot;,&quot;MATU111111&quot;);&#xA;        &#x9;&#x9;  &#xA;  HashMap map5 = new HashMap();&#xA;  map5.put(&quot;DeclaredIbCarrierId&quot;,&quot;ALE901&quot; );&#xA;  map5.put(&quot;UnitNbr&quot;,&quot;MATU555555&quot;);&#xA;        &#x9;&#x9;  &#xA;  HashMap map2 = new HashMap();&#xA;  map2.put(&quot;DeclaredIbCarrierId&quot;,&quot;ALE901&quot; );&#xA;  map2.put(&quot;UnitNbr&quot;,&quot;MATU222222&quot;);&#xA;        &#x9;&#x9;  &#xA;  HashMap map3 = new HashMap();&#xA;  map3.put(&quot;DeclaredIbCarrierId&quot;,&quot;HAL904&quot; );&#xA;  map3.put(&quot;UnitNbr&quot;,&quot;MATU333333&quot;);&#xA;        &#x9;&#x9;  &#xA;  HashMap map4 = new HashMap();&#xA;  map4.put(&quot;DeclaredIbCarrierId&quot;,&quot;ALE901&quot; );&#xA;  map4.put(&quot;UnitNbr&quot;,&quot;MATU111111&quot;);&#xA;        &#x9;&#x9;  &#xA;  ArrayList list = new ArrayList();&#xA;  list.add(map1);&#xA;  list.add(map5);&#xA;  list.add(map2);&#xA;  list.add(map3);&#xA;  list.add(map4);&#xA;&#xA;*/&#xA;" />
<digital-asset id="EmailSender" short-description="EmailSender" is-pre-deployed="N" groovy-code="/*&#xA;* Sr  doer  date          Change&#xA;* A1 GR    09/07/10   Added Method to specify parameter emailFrom&#xA;* A2 GR    08/15/11  Update method SendEmail to custsendEmail&#xA;* A3 GR    10/25/11  Removed Weblogic API&#xA;* A4 GR    11/10/11  TOS2.1 Get Environment Variable&#xA;*/&#xA;import com.navis.framework.email.*;&#xA;import com.navis.argo.ContextHelper;&#xA;import org.springframework.core.io.ByteArrayResource;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import org.apache.commons.lang.StringUtils;&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;&#xA;public class EmailSender extends GroovyInjectionBase &#xA;{&#xA;&#xA;  private static String emailFrom = &quot;1aktosdevteam@matson.com&quot;;&#xA;  GroovyApi groovyApi = new GroovyApi();&#xA;&#xA;&#xA;  public void custSendEmail(EmailMessage msg){&#xA;    def emailManager = Roastery.getBean(&quot;emailManager&quot;);&#xA;    EmailManager mng = new EmailManager();&#xA;    emailManager.sendEmail(msg); &#xA;  }&#xA;&#xA;  public void custSendEmail(String emailTo, String subject, String body){&#xA;    EmailMessage msg = emailContext(emailTo, subject, body)&#xA;    custSendEmail(msg)&#xA;  }&#xA;   &#xA;  //A1&#xA;  public void custSendEmail(String emailFromAddr, String emailTo, String subject, String body){&#xA;    EmailMessage msg = emailContext(emailFromAddr,emailTo, subject, body)&#xA;    custSendEmail(msg)&#xA;  }&#xA; &#xA;  //Method to Send Reports as PDF attachments&#xA;  public void custSendEmail(String emailTo, String subject, String body, ByteArrayResource barAttachment,String attachmentName){&#xA;    EmailMessage msg = emailContext(emailTo, subject, body)&#xA;    //Add Attachment &#xA;    DefaultAttachment attach = new DefaultAttachment();&#xA;    attach.setAttachmentContents(barAttachment);&#xA;    attach.setAttachmentName(attachmentName+&quot;.pdf&quot;);&#xA;    attach.setContentType(&quot;application/octet-stream&quot;);&#xA;    msg.addAttachment(attach);&#xA;&#xA;    custSendEmail(msg)&#xA;   }&#xA;&#xA;   //Method to Send Attacehments as Txt of Html File&#xA;   public void custSendEmail(String emailTo, String subject, String body, String inAttachmentContents,String inAttachmentName){&#xA;    EmailMessage msg = emailContext(emailTo, subject, body)&#xA;    //Add Attachment &#xA;    DefaultAttachment attach = DefaultAttachment(inAttachmentName, inAttachmentContents);&#xA;    attach.setAttachmentContents(attach.getAttachmentContents());&#xA;    attach.setAttachmentName(attach.getAttachmentName());&#xA;    attach.setContentType(&quot;text/html&quot;);&#xA;    msg.addAttachment(attach);&#xA;&#xA;    custSendEmail(msg)&#xA;   }&#xA;&#xA;&#xA;   public EmailMessage emailContext(String emailTo, String subject, String body){ &#xA;&#x9; EmailMessage msg = new EmailMessage(ContextHelper.getThreadUserContext());&#xA;     msg.setTo(StringUtils.split(emailTo, &quot;;,&quot;)); &#xA;     msg.setSubject(getEnvVersion()+subject);&#xA;     msg.setText(body);&#xA;     msg.setReplyTo(emailFrom);&#xA;     msg.setFrom(emailFrom);  &#xA;&#x9; return msg;&#xA;   }&#xA;     &#xA;&#xA;   //A1&#xA;   public EmailMessage emailContext(String emailFromAddr, String emailTo, String subject, String body){ &#xA;&#x9; EmailMessage msg = new EmailMessage(ContextHelper.getThreadUserContext());&#xA;     msg.setTo(StringUtils.split(emailTo, &quot;;,&quot;)); &#xA;     msg.setSubject(getEnvVersion()+subject);&#xA;     msg.setText(body);&#xA;     msg.setReplyTo(emailFromAddr);&#xA;     msg.setFrom(emailFromAddr);  &#xA;&#x9; return msg;&#xA;   }&#xA;&#xA;   public  String getEnvVersion()  {&#xA;     String envType = groovyApi.getReferenceValue(&quot;ENV&quot;, &quot;ENVIRONMENT&quot;, null, null, 1) &#xA;&#x9; if(&quot;PRODUCTION&quot;.equals(envType)){&#xA;&#x9;&#x9; return &quot;&quot;;&#xA;     }&#xA;     return envType+&quot; &quot;;&#xA;    }&#x9; &#xA; }" />
<digital-asset id="GvyUnitUpdate" short-description="GvyUnitUpdate" is-pre-deployed="N" groovy-code="import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import java.util.Iterator;&#xA;import java.util.Collection;&#xA;&#xA;&#xA;public class GvyUnitUpdate {&#xA;&#xA;/** Sets all other units foriegn key null and then updates the foriegn key.&#xA;*/&#xA;public void setForeignKey(Object newUnit) {&#xA;    &#xA;    def id = newUnit.unitId;&#xA;    newUnit.unitForeignHostKey= id;&#xA;    println(&quot;GvyUnitUpdate.setForeignKey &quot;+id);&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;);&#x9;&#x9;&#xA;    dq.addDqPredicate(PredicateFactory.eq(InventoryField.UNIT_ID,id ));     &#xA;    dq.addDqPredicate(PredicateFactory.isNotNull(InventoryField.UNIT_FOREIGN_HOST_KEY));     &#xA;    &#xA;     def list = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;      if(list != null) {&#xA;         Iterator iter = list.iterator();&#xA;         while(iter.hasNext()) {&#xA;            def unit = iter.next();&#xA;            if(unit != newUnit) unit.unitForeignHostKey= null;&#xA;         }&#xA;      }  &#xA;}&#xA;}" />
<digital-asset id="MatsonWNETdraymangate" short-description="MatsonWNETdraymangate" is-pre-deployed="N" groovy-code="/*&#xA; * Copyright (c) 2011 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;/**&#xA; * Created by IntelliJ IDEA. User: isimmons Date: 10/1/11 Time: 12:42 PM To change this template use File | Settings | File Templates.&#xA; */&#xA;/*&#xA;&#xA;Groovy code called from the gate form the truckvisit level&#xA;&#xA;Aim to produce the graymangate message to be saved as a flat file&#xA;The file is picked up by the WNET MTS system.&#xA;&#xA;example of draymangate message&#xA;&#xA;&lt;draymanGate time=20021204120000 type=SiteArrival&gt;&#xA;     &lt;truck id=524&gt;&#xA;         &lt;type&gt;Drayman&lt;/type&gt;&#xA;     &lt;/truck&gt;&#xA;     &lt;container1 id=MATU1234567&gt;&#xA;         &lt;tagID&gt;19100210&lt;/tagID&gt;&#xA;         &lt;length&gt;20&lt;/length&gt;&#xA;         &lt;weight&gt;1985100&lt;/weight&gt;&#xA;         &lt;height&gt;8&lt;/height&gt;&#xA;         &lt;loadStatus&gt;L&lt;/loadStatus&gt;&#xA;         &lt;chassisPosition&gt;1&lt;/chassisPosition&gt;&#xA;         &lt;custom1&gt;&lt;/custom1&gt;&#xA;     &lt;/container1&gt;&#xA;     &lt;container2 id=MATU1234568&gt;&#xA;         &lt;tagID&gt;19100432&lt;/tagID&gt;&#xA;         &lt;length&gt;20&lt;/length&gt;&#xA;         &lt;weight&gt;1985100&lt;/weight&gt;&#xA;         &lt;height&gt;8&lt;/height&gt;&#xA;         &lt;loadStatus&gt;L&lt;/loadStatus&gt;&#xA;         &lt;chassisPosition&gt;2&lt;/chassisPosition&gt;&#xA;         &lt;custom1&gt;&lt;/custom1&gt;&#xA;     &lt;/container2&gt;&#xA;     &lt;gate&gt;&#xA;         &lt;type&gt;Inbound&lt;/type&gt;&#xA;         &lt;lane&gt;5&lt;/lane&gt;&#xA;     &lt;/gate&gt;&#xA;&lt;/draymanGate&gt;&#xA;&#xA;*/&#xA;&#xA;import java.io.File;&#xA;import java.util.Date;&#xA;import java.util.TimeZone;&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.argo.ContextHelper;&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.argo.business.atoms.EventEnum;&#xA;import com.navis.argo.business.reference.Equipment;&#xA;import com.navis.external.framework.ui.AbstractTableViewCommand;&#xA;import com.navis.external.framework.ui.EUIExtensionHelper;&#xA;import com.navis.framework.util.DateUtil;&#xA;import com.navis.framework.util.message.MessageLevel;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.road.business.model.TruckTransaction;&#xA;import com.navis.road.business.model.TruckVisitDetails;&#xA;import com.navis.xpscache.business.atoms.EquipBasicLengthEnum;&#xA;&#xA;class MatsonWNETdraymangate extends GroovyInjectionBase {&#xA;    public void execute(inDao) {&#xA;        if (inDao == null) {&#xA;            //showMessage(&quot;null Dao&quot;);&#xA;            return;&#xA;        }&#xA;        //showMessage(&quot;starting&quot;);&#xA;&#xA;        // now find the truck visit details&#xA;        TruckVisitDetails tvdtls = inDao.getTv();&#xA;        if (tvdtls == null) {&#xA;            //showMessage(&quot;truck visit is null&quot;);&#xA;            return;&#xA;        }&#xA;&#xA;        def _trkid = tvdtls.getTvdtlsTruckId();  // or if we need licnbr tvdtls.getTvdtlsTruckLicenseNbr()&#xA;        //wnet tag id is here&#xA;        String _tagId = tvdtls.getTvdtlsFlexString01();&#xA;&#xA;        def createdrayman = false;&#xA;        //showMessage(&quot;trkid is &quot; + _trkid);&#xA;        //showMessage(&quot;tag id is &quot; + _tagId);&#xA;&#xA;        // check if it is exit or entry gate&#xA;        String _gateid = &quot;1&quot;;&#xA;        def _gateclass = &quot;IN&quot;;&#xA;        def _entryLane = tvdtls.getTvdtlsEntryLane();&#xA;        def _exitLane = tvdtls.getTvdtlsExitLane();&#xA;&#xA;        if ((_entryLane == null) &amp;&amp; (_exitLane == null)) {&#xA;            //showMessage(&quot;No entry or exit gates&quot;);&#xA;            return;&#xA;        }&#xA;&#xA;        if (_exitLane != null) {&#xA;            //showMessage(&quot;Exit gate&quot;);&#xA;            _gateid = inDao.tv.tvdtlsExitLane.laneId;&#xA;            _gateclass = tvdtls.getTvdtlsExitLane().getLaneClass().getName();&#xA;        }&#xA;        if ((_entryLane != null) &amp;&amp; (_exitLane == null)) {&#xA;            //showMessage(&quot;Entry gate&quot;);&#xA;            _gateid = inDao.tv.tvdtlsEntryLane.laneId;&#xA;            _gateclass = tvdtls.getTvdtlsEntryLane().getLaneClass().getName();&#xA;        }&#xA;&#xA;        //showMessage(&quot;gate is &quot; + _gateid);&#xA;        //showMessage(&quot;gate class is &quot; + _gateclass);&#xA;&#xA;        // Check the DRAYMAN parameters&#xA;        GroovyApi apiG = new GroovyApi();&#xA;        String _inType1 = &quot;DRAYMAN&quot;;&#xA;        String _inId1 = &quot;MESSAGE&quot;;&#xA;        String _inId2 = null;&#xA;        String _inId3 = null;&#xA;        int _inDataValueIdx = 1;&#xA;&#xA;        //SEND INGATE&#xA;        if (_gateclass == &quot;IN&quot;) {&#xA;            _inId2 = &quot;SEND&quot;;&#xA;            _inId3 = &quot;INGATE&quot;;&#xA;            String _sendIngate = apiG.getReferenceValue(_inType1, _inId1, _inId2, _inId3, _inDataValueIdx);&#xA;            if (_sendIngate != &quot;TRUE&quot;) {&#xA;                //showMessage(&quot;Drayman parameter SEND/INGATE not set to TRUE&quot;);&#xA;                return;&#xA;            }&#xA;        }&#xA;&#xA;        // SEND OUTGATE&#xA;        if (_gateclass == &quot;OUT&quot;) {&#xA;            _inId2 = &quot;SEND&quot;;&#xA;            _inId3 = &quot;OUTGATE&quot;;&#xA;            String _sendOutgate = apiG.getReferenceValue(_inType1, _inId1, _inId2, _inId3, _inDataValueIdx);&#xA;            if (_sendOutgate != &quot;TRUE&quot;) {&#xA;                //showMessage(&quot;Drayman parameter SEND/OUTGATE not set to TRUE&quot;);&#xA;                return;&#xA;            }&#xA;        }&#xA;&#xA;        // DRAYMAN File Directory&#xA;        _inId2 = &quot;DIRECTORY&quot;;&#xA;        _inId3 = null;&#xA;        String _dir = apiG.getReferenceValue(_inType1, _inId1, _inId2, _inId3, _inDataValueIdx);&#xA;&#xA;        // SEND UPDATES ONLY&#xA;        _inId2 = &quot;SEND&quot;;&#xA;        _inId3 = &quot;UPDATES_ONLY&quot;;&#xA;        String _sendUpdatesOnly = apiG.getReferenceValue(_inType1, _inId1, _inId2, _inId3, _inDataValueIdx);&#xA;&#xA;        // FIND SNXMSG tag id&#xA;        // ONLY if tagId is null&#xA;        if (_tagId == null) {&#xA;            //showMessage(&quot;No WNET tag details on this truck visit&quot;);&#xA;            // get lane details&#xA;            _inId1 = &quot;SNXMSG&quot;;&#xA;            _inId2 = &quot;LANE&quot;;&#xA;            _inId3 = _gateid;&#xA;            String _snxDateString = apiG.getReferenceValue(_inType1, _inId1, _inId2, _inId3, _inDataValueIdx);&#xA;            _inDataValueIdx = 2;&#xA;            _tagId = apiG.getReferenceValue(_inType1, _inId1, _inId2, _inId3, _inDataValueIdx);&#xA;&#xA;            // get time tolerance&#xA;            _inId3 = &quot;TIME_TOLERANCE&quot;;&#xA;            _inDataValueIdx = 1;&#xA;            String _minToleranceString = apiG.getReferenceValue(_inType1, _inId1, _inId2, _inId3, _inDataValueIdx);&#xA;            //showMessage(&quot;Time tolernace is &quot; + _minToleranceString);&#xA;            if (_minToleranceString == null) {&#xA;                _minToleranceString = &quot;20&quot;;&#xA;            }&#xA;&#xA;            // need to check if _snxDateTime is close to this time.&#xA;            Date _currentDate = new Date();&#xA;            Date _snxDate = new Date();&#xA;            TimeZone _timeZone = ContextHelper.getThreadUserTimezone();&#xA;&#xA;            //showMessage(&quot;Time zone is &quot; + _timeZone);&#xA;            try {&#xA;                _snxDate = DateUtil.dateStringToDate(_snxDateString);&#xA;            } catch (Exception e) {&#xA;                log(&quot;Error is converting general reference date &quot; + e);&#xA;            }&#xA;&#xA;            //showMessage(&quot;snxdate is &quot; + _snxDate);&#xA;            double _diffmin = DateUtil.differenceInMinutesMinusDaysAndHours(_snxDate, _currentDate, _timeZone);&#xA;            // now check if this i greater than  _minTolerance = 5;&#xA;            double _minTolerance = new Integer(_minToleranceString);&#xA;            //showMessage(&quot;diff in minutes is &quot; + _diffmin);&#xA;&#xA;            if (_diffmin &gt; _minTolerance) {&#xA;                //showMessage(&quot;general reference tag is too old&quot;);&#xA;                _tagId = null;&#xA;            }&#xA;        }&#xA;&#xA;        // if tag_id is null&#xA;        // return&#xA;        if (_tagId == null)&#xA;            _tagId = &quot;&quot;;&#xA;&#xA;        if (_tagId == &quot;&quot;) {&#xA;            //showMessage(&quot;No tag id - exitting&quot;);&#xA;            return;&#xA;        }&#xA;&#xA;        // count flags for Receive and Delivery&#xA;        // can only do single containers at present&#xA;        def _recCount = 0;&#xA;        def _delCount = 0;&#xA;        for (TruckTransaction tran : inDao.getTv().getActiveTransactions()) {&#xA;&#xA;            def ctr = tran.getEqNbr();&#xA;            //showMessage(&quot;transaction is &quot; + ctr);&#xA;&#xA;            //showMessage(&quot;Starting the container tag update on truck transaction  &quot;);&#xA;&#xA;            //now find the transactions details of the unit&#xA;            def _trangkey = tran.getTranNbr();&#xA;            def _booking = tran.getTranEqoNbr();&#xA;            //showMessage(&quot; gkey is &quot; + _trangkey);&#xA;            //showMessage(&quot;booking is &quot; + _booking);&#xA;&#xA;            def _booking_type = tran.getTranSubType().getName();&#xA;            //showMessage(&quot;booking type &quot; + _booking_type);&#xA;&#xA;            String _ctrid1 = tran.getTranCtrNbr();&#xA;            //showMessage(&quot;container is &quot; + _ctrid1);&#xA;            // check if CTR already has tagId on it&#xA;            //showMessage(&quot;Now get the Tagid from the Unit&quot;);&#xA;            UnitFacilityVisit ufv = findActiveUfv(_ctrid1);&#xA;            Unit unit = null;&#xA;            if (ufv == null) {&#xA;                //showMessage(&quot;ufv is null&quot;);&#xA;                unit = getUnitFinder().findActiveUnit(ContextHelper.getThreadComplex(), Equipment.findEquipment(_ctrid1));&#xA;            } else {&#xA;                unit = ufv.getUfvUnit();&#xA;            }&#xA;            Equipment eq = unit.getPrimaryEq();&#xA;&#xA;            if (unit == null) {&#xA;                //showMessage(&quot; No unit found&quot;);&#xA;            } else {&#xA;                //showMessage(&quot;found unit&quot;);&#xA;                def _eq_tagId = eq.getEqTransponderId();&#xA;                def _ctrid1_tagId = unit.getUnitFlexString15();&#xA;                //showMessage(&quot;Eq tag id is &quot; + _eq_tagId);&#xA;                //showMessage(&quot;unit tag id is &quot; + _ctrid1_tagId);&#xA;                if (_eq_tagId == _tagId) {&#xA;                    //showMessage(&quot;Ctr already has tagID on it&quot;);&#xA;                    unit.setUnitFlexString15(_tagId);&#xA;                    unit.recordUnitEvent(EventEnum.UNIT_PROPERTY_UPDATE, null, &quot;updated WNET tag id from CTR trnspId&quot;);&#xA;&#xA;                    if (_sendUpdatesOnly == &quot;TRUE&quot;) {&#xA;                        //showMessage(&quot;UPDATES ONLY not set to TRUE&quot;);&#xA;                        return;&#xA;                    }&#xA;                } else {&#xA;                    eq.setEqTransponderId(_tagId);&#xA;                    unit.setUnitFlexString15(_tagId);&#xA;                    //showMessage(&quot;Updated tag id to &quot; + _tagId);&#xA;                    // Record an event&#xA;                    unit.recordUnitEvent(EventEnum.UNIT_PROPERTY_UPDATE, null, &quot;updated WNET tag id&quot;);&#xA;                }&#xA;            }&#xA;&#xA;            def _eqsz1 = &quot;20&quot;;&#xA;            if (EquipBasicLengthEnum.BASIC40.equals(tran.getTranEqLength(EquipBasicLengthEnum.BASIC40))) {&#xA;                _eqsz1 = &quot;40&quot;;&#xA;            } else {&#xA;                _eqsz1 = &quot;20&quot;;&#xA;            }&#xA;            //showMessage(&quot;ctrid1 is &quot; + _ctrid1);&#xA;            //showMessage(&quot;size is &quot; + _eqsz1);&#xA;            def _eqwt1 = null;&#xA;            def _eqwt11 = tran.getTranCtrGrossWeight();&#xA;            if (_eqwt11 != null) {&#xA;                _eqwt1 = _eqwt11.intValue();&#xA;            }&#xA;            def _eqwt2 = tran.getTranCtrNetWeight();&#xA;            String _eqht = null;&#xA;            def _eqht01 = tran.getTranEqoEqHeight();&#xA;            if (_eqht01 != null) {&#xA;                _eqht = tran.getTranEqoEqHeight().getName();&#xA;            }&#xA;            def _chspos1 = tran.getTranCtrTruckPosition();&#xA;            //showMessage(&quot;ht1 is &quot; + _eqht);&#xA;            //showMessage(&quot;wt1 is &quot; + _eqwt1);&#xA;            //showMessage(&quot;wt2 is &quot; + _eqwt2);&#xA;            //showMessage(&quot;chs1 is &quot; + _chspos1);&#xA;            def _eqht1 = &quot;8&quot;;&#xA;            if (_eqht.length() &gt; 4) {&#xA;                _eqht1 = _eqht.substring(3, 4);&#xA;            }&#xA;            //showMessage(&quot;ht1 is &quot; + _eqht1);&#xA;&#xA;            def _yardBlock = null;&#xA;            def _bay = &quot;&quot;;&#xA;            if (tran.getTranCtrPosition() != null) {&#xA;                if (tran.getTranCtrPosition().getYardBin() != null) {&#xA;                    if (tran.getTranCtrPosition().getYardBin().getBlock() != null) {&#xA;                        _yardBlock = tran.getTranCtrPosition().getYardBin().getBlock().getBlockName();&#xA;                    }&#xA;                }&#xA;                _bay = tran.getTranCtrPosition().getPosSlot();&#xA;            }&#xA;            //showMessage(&quot;bay is &quot; + _bay);&#xA;&#xA;            if (tran.isReceival()) {&#xA;&#xA;                if (_gateclass != &quot;IN&quot;) {&#xA;                    // exit because we are only doing Deliveries at the outgate&#xA;                    //showMessage(&quot;Delivery not at the Ingate&quot;);&#xA;                    return;&#xA;                }&#xA;                // start logging that we are working..&#xA;                //showMessage(&quot;Starting the container tag update on receival truck visit &quot;);&#xA;                createdrayman = true;&#xA;&#xA;                if ((_booking_type == &quot;RE&quot;) || (_booking_type == &quot;RM&quot;)) {&#xA;                    _recCount = _recCount + 1;&#xA;                }&#xA;                //showMessage(&quot;recCount &quot; + _recCount);&#xA;                if (_recCount &gt; 1) {&#xA;                    createdrayman = false;&#xA;                    return;&#xA;                }&#xA;                // now setup the drayman message variables&#xA;                def _msgtype = &quot;SiteArrival&quot;;&#xA;                def _type = &quot;Drayman&quot;;&#xA;                def _load1 = &quot;L&quot;;&#xA;                def _direction = &quot;Inbound&quot;;&#xA;&#xA;                if (createdrayman) {&#xA;                    createdrayman1(_ctrid1, _trangkey, _msgtype, _trkid, _type, _tagId, _eqsz1, _eqwt1, _eqht1, _load1, _chspos1, _direction,&#xA;                            _gateid, _bay, _dir);&#xA;                }&#xA;            }&#xA;&#xA;            if (tran.isDelivery()) {&#xA;&#xA;                if (_gateclass != &quot;OUT&quot;) {&#xA;                    // exit because we are only doing Deliveries at the outgate&#xA;                    //showMessage(&quot;Delivery not at the Outgate&quot;);&#xA;                    return;&#xA;                }&#xA;                // start logging that we are working..&#xA;                //showMessage(&quot;Starting the container tag update on delivery truck visit &quot;);&#xA;                createdrayman = true;&#xA;&#xA;                if ((_booking_type == &quot;DI&quot;) || (_booking_type == &quot;DM&quot;)) {&#xA;                    _delCount = _recCount + 1;&#xA;                }&#xA;&#xA;                //showMessage(&quot;recCount &quot; + _recCount);&#xA;                if (_delCount &gt; 1) {&#xA;                    createdrayman = false;&#xA;                    return;&#xA;                }&#xA;                // Check if Unit already has this tag id&#xA;&#xA;                // Update the Container flexfield with the tag id&#xA;&#xA;                def _msgtype = &quot;Pickup&quot;;&#xA;                def _type = &quot;Drayman&quot;;&#xA;                def _load1 = &quot;S&quot;;&#xA;                def _direction = &quot;Outbound&quot;;&#xA;&#xA;                if (createdrayman) {&#xA;                    createdrayman1(_ctrid1, _trangkey, _msgtype, _trkid, _type, _tagId, _eqsz1, _eqwt1, _eqht1, _load1, _chspos1, _direction,&#xA;                            _gateid, _bay, _dir);&#xA;                }&#xA;            }&#xA;&#xA;            //showMessage(&quot;at end of is receival&quot;);&#xA;        }&#xA;        //showMessage(&quot;at end of tran for loop&quot;);&#xA;    }&#xA;&#xA;    public void createdrayman1(_ctrid1, _trangkey, _msgtype, _trkid, _type, _tagId, _eqsz1, _eqwt1, _eqht1, _load1, _chspos1, _direction, _gateid,&#xA;                               _bay, _dir) {&#xA;&#xA;        //showMessage(&quot;at the print&quot;);&#xA;        // now create the drayman xml file&#xA;        //showMessage(&quot;gen ref value is &quot; + _dir);&#xA;&#xA;        //showMessage(&quot;gen ref value updated is &quot; + _dir);&#xA;        def _xxdir = _dir.toLowerCase();&#xA;        //showMessage(&quot;gen ref value updated is &quot; + _xxdir);&#xA;&#xA;        _dir = _xxdir;&#xA;&#xA;        def filedir = new File(_dir);&#xA;        if (!filedir.exists()) {&#xA;            //showMessage(&quot;The directory defined does NOT exist &quot; + _dir);&#xA;            _dir = &quot;&quot;;&#xA;        }&#xA;&#xA;        //showMessage(&quot;gen ref value updated 9 is &quot; + _dir);&#xA;&#xA;        def _date = new Date().format('yyyyMMddHHmmss'); // &quot;20021204120000&quot;;&#xA;        //showMessage(&quot;date is &quot; + _date);&#xA;        try{&#xA;        def drayfile = &quot;$_dir/drayman_&quot; + _trangkey + &quot;_&quot; + _ctrid1 + &quot;_&quot; + _bay + &quot;_&quot; + _date+&quot;.xml&quot;;&#xA;        def draymanfile = new File(drayfile);&#xA;&#xA;        //showMessage(&quot;file name is &quot; + drayfile);&#xA;&#xA;        draymanfile.append(&quot;&lt;draymanGate time=\&quot;&quot; + _date + &quot;\&quot; type=\&quot;&quot; + _msgtype + &quot;\&quot;&gt;\n&quot;);&#xA;        draymanfile.append(&quot;&lt;truck id=\&quot;&quot; + _trkid + &quot;\&quot;&gt;\n&quot;);&#xA;        draymanfile.append(&quot;&lt;type&gt;&quot; + _type + &quot;&lt;/type&gt;\n&quot;);&#xA;        draymanfile.append(&quot;&lt;/truck&gt;\n&quot;);&#xA;        draymanfile.append(&quot;&lt;container1 id=\&quot;&quot; + _ctrid1 + &quot;\&quot;&gt;\n&quot;);&#xA;        draymanfile.append(&quot;&lt;tagID&gt;&quot; + _tagId + &quot;&lt;/tagID&gt;\n&quot;);&#xA;        draymanfile.append(&quot;&lt;length&gt;&quot; + _eqsz1 + &quot;&lt;/length&gt;\n&quot;);&#xA;        draymanfile.append(&quot;&lt;weight&gt;&quot; + _eqwt1 + &quot;&lt;/weight&gt;\n&quot;)&#xA;        draymanfile.append(&quot;&lt;height&gt;&quot; + _eqht1 + &quot;&lt;/height&gt;\n&quot;);&#xA;        draymanfile.append(&quot;&lt;loadStatus&gt;&quot; + _load1 + &quot;&lt;/loadStatus&gt;\n&quot;);&#xA;        draymanfile.append(&quot;&lt;chassisPosition&gt;&quot; + _chspos1 + &quot;&lt;/chassisPosition&gt;\n&quot;)&#xA;        draymanfile.append(&quot;&lt;/container1&gt;\n&quot;);&#xA;        draymanfile.append(&quot;&lt;gate&gt;\n&quot;);&#xA;        draymanfile.append(&quot;&lt;type&gt;&quot; + _direction + &quot;&lt;/type&gt;\n&quot;);&#xA;        draymanfile.append(&quot;&lt;lane&gt;&quot; + _gateid + &quot;&lt;/lane&gt;\n&quot;);&#xA;        draymanfile.append(&quot;&lt;/gate&gt;\n&quot;);&#xA;        draymanfile.append(&quot;&lt;/draymanGate&gt;\n&quot;);&#xA;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;        }&#xA;&#xA;        //showMessage(draymanfile.getText());&#xA;    }&#xA;&#xA;    private void showMessage(String message) {&#xA;        //RoadBizUtil.messageCollector.appendMessage(BizFailure.create(message))&#xA;        def uiHelper = new AbstractTableViewCommand()&#xA;        EUIExtensionHelper extHelper = uiHelper.getExtensionHelper();&#xA;        extHelper.showMessageDialog(MessageLevel.WARNING, &quot;Error&quot;, message);&#xA;    }&#xA;}" />
<digital-asset id="GvyReportCVSHourlyStatus" short-description="GvyReportCVSHourlyStatus" is-pre-deployed="N" groovy-code="import com.navis.framework.persistence.*;&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.argo.business.atoms.EventEnum;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.argo.business.atoms.CarrierVisitPhaseEnum;&#xA;import com.navis.argo.business.model.CarrierVisit;&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;import java.util.HashMap;&#xA;import java.util.Calendar;&#xA;import java.text.DateFormat;&#xA;import java.text.SimpleDateFormat;&#xA;import com.navis.framework.util.scope.ScopeCoordinates;&#xA;import com.navis.framework.portal.context.UserContextUtils;&#xA;import com.navis.framework.portal.UserContext;&#xA;&#xA;public class GvyReportCVSHourlyStatus extends GroovyInjectionBase &#xA;{&#xA;  private Date startDateTimeHst = null; &#xA;  private Date endDateTimeHst = null;&#xA;  GroovyInjectionBase inj = null&#xA;  def gvyRptEventUtil = null&#xA;/*  private final String emailTo = &quot;1aktosdevteam@matson.com;1CVSHO_HON@matson.com;atokairin@matson.com;jchagami@matson.com;kmikami@matson.com;pschroeder@matson.com;1aktosdevteam@matson.com;sysreports@matson.com&quot;; */&#xA;&#xA; private final String emailTo=&quot;1aktosdevteam@matson.com;&quot; ; &#xA;  HashSet deptVesSet = new HashSet();&#xA;  HashMap workingVesMap = new HashMap();&#xA;&#xA;  public void setDeptVessel(String deptVessel){&#xA;    deptVesSet.add(deptVessel)&#xA;  }&#xA;&#xA;  public void setWorkingVessel(String VesId, String VesValue){&#xA;    workingVesMap.put(VesId,VesValue)&#xA;  }&#xA;&#xA;  public String execute(Map inParameter) &#xA;  {&#xA;    try&#xA;    {  &#xA;      return;&#xA;      inj = new GroovyInjectionBase();&#xA;      def userContext = com.navis.argo.ContextHelper.getThreadUserId()&#xA;&#x9;  com.navis.argo.ContextHelper.setThreadExternalUser(&quot;admin&quot;);&#xA;&#xA;      def gvyCmisUtil  = inj.getGroovyClassInstance(&quot;GvyCmisUtil&quot;)&#xA;      gvyRptEventUtil  = inj.getGroovyClassInstance(&quot;GvyReportEventUtil&quot;)&#xA;&#xA;       getDateCriteria();&#xA;       EventType[] evntTypeArr =  getEventTypeArray();&#xA;       EventManager em = (EventManager)Roastery.getBean(&quot;eventManager&quot;);&#xA;       List eventList = gvyRptEventUtil.getEventsByCreatedDate(startDateTimeHst,endDateTimeHst,evntTypeArr)&#xA;       println(&quot;eventList ::&quot;+(eventList != null ? eventList.size() : 0))&#xA;       ArrayList listUnits = new ArrayList()&#xA;&#xA;       for(aEvent in eventList)&#xA;      {&#xA;         Date evntDate = aEvent.getEvntCreated() &#xA;         String eventId = aEvent.getEvntEventType().getEvnttypeId();&#xA;         String unitNbr = aEvent.getEvntAppliedToNaturalKey()&#xA;&#xA;         Set changes = aEvent.getFieldChanges()&#xA;         Iterator iterator = changes.iterator();&#xA;         String updtFieldValue = &quot;&quot;&#xA;         String vesselVisitId = &quot;&quot;&#xA;&#xA;         while(iterator.hasNext()) &#xA;         {&#xA;            EventFieldChange  fieldChange = (EventFieldChange)iterator.next();&#xA;            String fieldName = fieldChange.getMetafieldId()&#xA;            MetafieldId mfId = MetafieldIdFactory.valueOf(fieldName);&#xA;            if(eventId.equals(&quot;UNIT_DISCH&quot;)){&#xA;              updtFieldValue = ArgoUtils.getPropertyValueAsUiString(mfId, fieldChange.getEvntfcPrevVal()); &#xA;            }else if(eventId.equals(&quot;UNIT_LOAD&quot;)){&#xA;              updtFieldValue = ArgoUtils.getPropertyValueAsUiString(mfId, fieldChange.getEvntfcNewVal());&#xA;            }&#xA;&#xA;           vesselVisitId = getVesselId(updtFieldValue, gvyCmisUtil)&#xA;           //Gets WorK Shift &amp; Rearranges Dates&#xA;           evntDate = getFirstPeriodWorkDate(evntDate)&#xA;           evntDate = gvyRptEventUtil.formatDateToTimeZone(evntDate, &quot;HST&quot;)&#x9;   &#xA;&#xA;           //Checks If Vessel Entry should be included in the Report           &#xA;           if(vesselVisitId == null){&#xA;               continue;&#xA;           } &#xA;    &#xA;           HashMap unitData = populateCSVData(vesselVisitId,evntDate,unitNbr) &#xA;           listUnits.add(unitData)&#xA;&#xA;         }//While Ends&#xA;      }//For Ends&#xA;      &#xA;      //Sorting By Field&#xA;      def gvyRptUtil = inj.getGroovyClassInstance(&quot;ReportFieldSortUtil&quot;)&#xA;      if(listUnits != null &amp;&amp; listUnits.size() &gt; 0){&#xA;       //Sort By Vesvoy &amp;&amp; EventCreated Time&#xA;       listUnits =  gvyRptUtil.processFieldSort(listUnits,&quot;vesselId,createdDate&quot;)&#xA;      }&#xA;      &#xA;      //Create IReport Design &#xA;      processReportDesign(listUnits)&#xA;&#xA;      println(&quot;deptVesSet for CVS Hourly Status Report :&quot;+deptVesSet+&quot; WorkingVesSet :&quot;+workingVesMap)&#xA;&#xA;    }catch(Exception e){&#xA;       e.printStackTrace();&#xA;    }&#xA;  &#xA; }//Method Ends&#xA;&#xA;&#xA;  public EventType[] getEventTypeArray()&#xA;  {&#xA;   EventType[] evntTypeArr = null;&#xA;    try&#xA;    {&#xA;      EventType evntDisch = EventType.resolveIEventType(EventEnum.UNIT_DISCH);&#xA;      EventType evntLoad = EventType.resolveIEventType(EventEnum.UNIT_LOAD);&#xA;      evntTypeArr = [evntDisch,evntLoad]  &#xA;    }catch(Exception e){&#xA;      e.printStackTrace();&#xA;    }&#xA;   return evntTypeArr&#xA;  }//Method Ends&#xA;&#xA;&#xA;&#xA;  public HashMap populateCSVData(String vesselId,Date createdDate,String unitNbr)&#xA;  {&#xA;      HashMap map = new HashMap() &#xA;       try&#xA;      {&#xA;         map.put(&quot;vesselId&quot;, vesselId); &#xA;         map.put(&quot;createdDate&quot;, createdDate);&#xA;         map.put(&quot;unitNbr&quot;, unitNbr);&#xA;&#xA;      }catch(Exception e){&#xA;         e.printStackTrace()&#xA;      }&#xA;      return map&#xA;  }&#xA;&#xA;&#xA;  public String getVesselId(String updtFieldValue, Object gvyCmisUtil)&#xA;  {&#xA;    String vesselId = null;&#xA;    try{&#xA;    String [] vesselPosition = updtFieldValue != null ? updtFieldValue.split(&quot;-&quot;) : &quot;&quot;&#xA;    vesselId = vesselPosition.length &gt; 0 ? vesselPosition[1] : &quot;&quot; &#xA;    &#xA;      //Check Vessel Id from Buffered Id Values&#xA;      if(deptVesSet != null &amp;&amp; deptVesSet.contains(vesselId)){&#xA;         return null; &#xA;      }else if(workingVesMap.get(vesselId) != null){&#xA;              //  println(&quot;workingVesMap.get(vesselId) ::&quot;+workingVesMap.get(vesselId))&#xA;         return workingVesMap.get(vesselId)&#xA;      }/*else{&#xA;         def entry = null;&#xA;         workingVesMap.each&#xA;         { &#xA;            println(&quot;it.key ---::&quot;+it.key+&quot;   it.key.contains(vesselId) ::&quot;+it.key.contains(vesselId))&#xA;            String aVesKey = it.key&#xA;            if(aVesKey.contains(vesselId)){&#xA;              entry = it.value; &#xA;              return entry &#xA;            }&#xA;          }&#xA;      }*/&#xA;    &#xA;    //Get Vess&#xA;    String vesClassType = gvyCmisUtil.getVesselClassType(vesselId)&#xA;    &#xA;    //Gets CarrierVisit&#xA;    def cv = CarrierVisit.findVesselVisit( getFacility(), vesselId);&#xA;    if(cv == null){&#xA;        return vesselId&#xA;    }&#xA;&#xA;    VesselVisitDetails vvd = VesselVisitDetails.resolveVvdFromCv(cv);&#xA;    String vvdIbVygNbr =  vvd.vvdIbVygNbr&#xA;    String vvdObVygNbr =  vvd.vvdObVygNbr&#xA;    Date actualTimeofDept = cv.cvATD&#xA;    //println(&quot;actTimeofDept ------::&quot;+actualTimeofDept)&#xA;&#xA;    CarrierVisitPhaseEnum visitPhase = cv.getCvVisitPhase();&#xA;&#xA;    if ( (CarrierVisitPhaseEnum.DEPARTED.equals(visitPhase) || CarrierVisitPhaseEnum.CLOSED.equals(visitPhase) &#xA;           || CarrierVisitPhaseEnum.ARCHIVED.equals(visitPhase) || CarrierVisitPhaseEnum.WORKING.equals(visitPhase)) &#xA;           &amp;&amp; actualTimeofDept != null &amp;&amp;  gvyRptEventUtil.timeDiffInHrs(endDateTimeHst, actualTimeofDept) &gt; 12 ) &#xA;    {&#xA;         setDeptVessel(vesselId); //Set VesselId to Departed Buffer&#xA;         return null; &#xA;    }else if (CarrierVisitPhaseEnum.INBOUND.equals(visitPhase) || CarrierVisitPhaseEnum.CANCELED.equals(visitPhase) ){&#xA;        return null;&#xA;    }&#xA;&#xA;    if(vesClassType.equals(&quot;CELL&quot;)){&#xA;      setWorkingVessel(vesselId,vesselId)&#xA;    }&#xA;    if(vesClassType.equals(&quot;BARGE&quot;))&#xA;    {&#xA;       // println(&quot;vvdIbVygNbr --::&quot;+vvdIbVygNbr+&quot; vvdObVygNbr --::&quot;+vvdObVygNbr+&quot; visitPhase --::&quot;+visitPhase+&quot; actualTimeofDept --::&quot;+actualTimeofDept)&#xA;       def bargeVesId = vesselId &#xA;       def vesselCode = vesselId != null &amp;&amp; vesselId.length() &gt;3 ? vesselId.substring(0,3) : null&#xA;       vesselId = vesselCode+vvdIbVygNbr+&quot;/&quot;+vvdObVygNbr&#xA;       def bargeVesValue = vesselId &#xA;       &#xA;       //Set Working vessel &#xA;       setWorkingVessel(bargeVesId,bargeVesValue)&#xA;    } &#xA;&#xA;   }catch(Exception e){&#xA;       e.printStackTrace()&#xA;   }&#xA;   return vesselId&#xA;  }&#xA;&#xA;  //Get Report Search Date Criteria&#xA;  public void getDateCriteria()&#xA;  { &#xA;   try&#xA;   {&#xA;    Calendar calendarHst = Calendar.getInstance();&#xA;    endDateTimeHst = calendarHst.getTime() //formatDateToTimeZone(, &quot;HST&quot;);&#xA;&#xA;    calendarHst.add(Calendar.DATE, -3); &#xA;    startDateTimeHst = calendarHst.getTime() //formatDateToTimeZone(, &quot;HST&quot;);&#xA;&#xA;    println(&quot;startDateTimeHst::&quot; +startDateTimeHst+&quot;   endDateTimeHst::&quot;+endDateTimeHst);&#xA;   }catch(Exception e){&#xA;       e.printStackTrace()&#xA;   }&#xA; }//Method Ends&#xA;&#xA;&#xA; //Method Substracts Date to a Day Earlier on the Morning Shift 0hrs to 6hrs&#xA; public Date getFirstPeriodWorkDate(Date evntDate)&#xA; {&#xA;   // println(&quot; getFirstPeriodWorkDate evntDate --- ::&quot;+evntDate)&#xA;&#xA;     Date shiftDate = evntDate; &#xA;     try&#xA;     {&#xA;        Calendar cal=Calendar.getInstance();&#xA;        cal.setTimeZone(TimeZone.getTimeZone(&quot;HST&quot;));&#xA;        cal.setTime(evntDate);&#xA;        if(cal.get(cal.HOUR_OF_DAY) &gt;= 0 &amp;&amp; cal.get(cal.HOUR_OF_DAY) &lt; 7){&#xA;            cal.add(Calendar.DATE, -1); &#xA;            shiftDate = cal.getTime()&#x9;   &#xA;         }   &#xA;      }catch(Exception e){&#xA;        e.printStackTrace()&#xA;      }&#x9;   &#xA;    return shiftDate&#xA;  }&#xA;&#xA;&#xA; public void processReportDesign(ArrayList unitList)&#xA; {&#xA;   println(&quot;unitList Count=&quot;+unitList.size())&#x9;  &#xA;   try{&#xA;       //Set Report Parameter&#xA;        HashMap parameters = new HashMap();&#xA;        String strDate = ContextHelper.formatTimestamp(new Date(), ContextHelper.getThreadUserTimezone())&#xA;       &#xA;        println(&quot;Report Time ::&quot;+new Date()+&quot;    TimeZone:&quot;+ContextHelper.getThreadUserTimezone()+&quot;  strDate ::&quot;+strDate)&#xA;       &#xA;        parameters.put(&quot;Date&quot;,strDate);&#xA;       // parameters.put(&quot;MATSONLOGO&quot;,DigitalAsset.findImage(&quot;MATSONLOGO&quot;)); &#xA;&#xA;        //Create and Mail Report &#xA;        JRDataSource ds = new JRMapCollectionDataSource(unitList);&#xA;        &#xA;        def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;println(&quot;ds=&quot;+ds+&quot; parameters=&quot;+parameters+&quot; emailTo=&quot;+emailTo)&#xA;        reportRunner.emailReport(ds, parameters, &quot;CVS_HOURLY_STATUS&quot;, emailTo, &quot;CVS Hourly Status Report&quot;, &quot;CVS Hourly Status Report&quot;);&#xA;&#xA;      }catch(Exception e){&#xA;         e.printStackTrace();&#xA;      }&#xA;  }&#xA; &#xA;}//Class Ends" />
<digital-asset id="GvyCmisEventUnitLoad" short-description="GvyCmisEventUnitLoad" is-pre-deployed="N" groovy-code="/*&#xA; *  Sr  Chg Date        Desc&#xA; *  A1  GR  11/24/09    Set POL,OPL to facility if blank&#xA; *  A2  GR  06/23/2010  Pass Chassis Info to NOW - 06/23/2010&#xA; *  A3  GR  07/18/10    Updt Post Messages method&#xA; *  A4  GR  09/14/10    Node2 Change - Updated method with Return Type&#xA; *  A5  GR  09/23/10    TT#009202 - Suppress LTV for MG and Chassis if Primary unit=Container&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Commented Code that is not used&#xA; *  A6  GR  12/13/10    Set locationTier for Pier2 Loads&#xA; *  A7  GR  03/07/11    Added Null condition check&#xA; *  A8  GR  04/05/12&#x9;   Set leg=E for OPT port of Discharge&#xA; *  A9  SS  06/21/13    Update the POL with current facility&#xA; */&#xA; &#xA; import com.navis.argo.ContextHelper&#xA; import com.navis.services.business.event.Event&#xA; import com.navis.argo.business.reference.RoutingPoint&#xA; import com.navis.argo.business.atoms.EquipClassEnum&#xA; &#xA; public class GvyCmisEventUnitLoad&#xA; {&#xA; &#xA;  public String getLoadedEquipClassMsg(String xmlData,Object event, Object gvyBaseClass) {&#xA;&#x9;  def xmlGvyString = xmlData&#xA;&#x9;  def xmlGvyChassis = ''&#xA;&#x9;  def xmlGvyAcsry = ''&#xA;&#x9;  def gvyCmisUtil = null&#xA; &#xA;&#x9;  def unit = event.getEntity()&#xA;&#x9;  def gvyEvntObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;&#x9;  gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;&#x9;  &#xA;&#x9;  def loadPort = unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;)&#xA;&#x9;  def dischargePort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;&#x9;  &#xA;&#x9;  &#xA; &#xA;&#x9;  /* A5 Change&#xA;&#x9;def chassisNbr = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;chassisNumber=&quot;)&#xA;&#x9;def accessoryNbr = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;accessory=&quot;)&#xA;&#x9;def unitClass = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;unitClass=&quot;)&#xA;&#x9;*/&#xA; &#xA;&#x9;  //A6,A7&#xA;&#x9;  String prevPos = gvyEvntObj.getPreviousPropertyAsString(event, 'posName')&#xA;&#x9;  prevPos = prevPos == null ? &quot;&quot; : prevPos&#xA;&#x9;  if (prevPos.contains('P2A') || prevPos.contains('P29') || prevPos.contains('29Z')) {&#xA;&#x9;&#x9;  xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;locationTier=&quot;, &quot;T2&quot;)&#xA;&#x9;  }&#xA; &#xA;&#x9;  //Dport&#xA;&#x9;  def dischPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA; &#xA;&#x9;  //Override the POL to facility&#xA;&#x9;  def facilityId = unit.getFieldValue(&quot;unitActiveUfv.ufvFacility.fcyId&quot;)&#xA;&#x9;  println(&quot;POL facility id &quot; + facilityId)&#xA;&#x9;  facilityId = facilityId != null ? facilityId : ''&#xA;&#x9;  Event gvyEventObj = event.getEvent();&#xA;&#x9;  def eventFcyId = facilityId&#xA;&#x9;  if (gvyEventObj != null) {&#xA;&#x9;&#x9;  eventFcyId = gvyEventObj.getEvntFacility() != null ? gvyEventObj.getEvntFacility().fcyId : facilityId&#xA;&#x9;  }&#xA;&#x9;  println(&quot;XML string before POL set : &quot; + xmlGvyString)&#xA;&#x9;  xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;loadPort=&quot;, eventFcyId)&#xA;&#x9;  println(&quot;XML string after POL set : &quot; + xmlGvyString)&#xA;&#x9;  //A9 Added By Solomon - Start&#xA;&#x9;  if (eventFcyId != null) {&#xA;&#x9;&#x9;  def routing = unit.getUnitRouting();&#xA;&#x9;&#x9;  routing.setRtgPOL(RoutingPoint.findRoutingPoint(eventFcyId));&#xA;&#x9;  }&#xA;&#x9;  // Added By Solomon - End&#xA; &#xA;&#x9;  //Override misc1 value for Long haul vessel to NIS&#xA;&#x9;  def lkpLocType = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;&#x9;  def aobcarrierId = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;)&#xA;&#x9;  lkpLocType = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;&#x9;  if (lkpLocType.equals('VESSEL') &amp; gvyCmisUtil.isNISPort(dischPort)) {&#xA;&#x9;&#x9;  xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;misc1=&quot;, aobcarrierId)&#xA;&#x9;  }&#xA;&#x9;  println(&quot;aobcarrierId before Akutan load &quot; + aobcarrierId)&#xA;&#x9;  println(&quot;unit.getFieldValue(unitDeclaredIbCv.cvId) == &quot; + unit.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;))&#xA;&#x9;  // compare eventFcyId with facilityId - to find vessvoy for barge load&#xA;&#x9;  println(&quot;eventFcyId : &quot; + eventFcyId +&quot;facilityId  :&quot;+facilityId)&#xA; &#xA;&#x9;  if ( (eventFcyId == &quot;KQA&quot;  || eventFcyId == &quot;SDP&quot;  || eventFcyId == &quot;BBA&quot;  || eventFcyId == &quot;PML&quot;) &amp;&amp; facilityId == &quot;DUT&quot; ) {&#xA;&#x9;&#x9;  def declaredOBVesType = null;&#xA;&#x9;&#x9;  println(&quot;inside eventFcyId : &quot; + eventFcyId +&quot;facilityId  :&quot;+facilityId)&#xA;&#x9;&#x9;  //def ObCarrier = unit.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;)&#xA;&#x9;&#x9;  if (aobcarrierId != null) {&#xA;&#x9;&#x9;&#x9;  declaredOBVesType = gvyCmisUtil.getVesselClassType(aobcarrierId);&#xA;&#x9;&#x9;  }&#xA;&#x9;&#x9;  declaredOBVesType = declaredOBVesType != null ? declaredOBVesType : '';&#xA;&#x9;&#x9;  // for empties without booking, IB visit should be populated&#xA;&#x9;&#x9;  Boolean isEmpty = false;&#xA;&#x9;&#x9;  def freightKind = unit.getFieldValue(&quot;unitFreightKind&quot;);&#xA;&#x9;&#x9;  freightKind = freightKind != null ? freightKind.getKey() : ''&#xA;&#x9;&#x9;  String declaredIBCV = unit.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;);&#xA;&#x9;&#x9;  println(&quot;freightKind : &quot; + freightKind +&quot; declaredIBCV: &quot;+declaredIBCV +&quot; declaredOBVesType: &quot;+declaredOBVesType)&#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  if (freightKind != null &amp;&amp; ( 'MTY'.equals(freightKind)  || 'FCL'.equals(freightKind))    &amp;&amp; (''.equals(declaredOBVesType) || declaredOBVesType==null)) {&#xA;&#x9;&#x9;&#x9;  declaredOBVesType = gvyCmisUtil.getVesselClassType(declaredIBCV);&#xA;&#x9;&#x9;  }&#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  println(&quot;inside declaredOBVesType : &quot; + declaredOBVesType)&#xA; &#xA;&#x9;&#x9;  if (&quot;BARGE&quot;.equals(declaredOBVesType)) {&#xA;&#x9;&#x9;   println(&quot;inside 1 declaredOBVesType : &quot; + declaredOBVesType)&#xA;&#x9;&#x9;&#x9;  def declaredIBInVoyNbrForKQA = unit.getFieldValue(&quot;unitDeclaredIbCv.cvCvd.vvdIbVygNbr&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;declaredIBInVoyNbrForKQA : &quot; + declaredIBInVoyNbrForKQA)&#xA;&#x9;&#x9;&#x9;  if (declaredIBInVoyNbrForKQA != null) {&#xA;&#x9;&#x9;&#x9;&#x9;  def actualVessel = declaredIBCV.length() &gt; 5 ? declaredIBCV.substring(0,3) : 'null'&#xA;&#x9;&#x9;&#x9;&#x9;  def actualVoyage = declaredIBInVoyNbrForKQA != null ? declaredIBInVoyNbrForKQA :declaredIBCV.length() &gt; 5 ? declaredIBCV.substring(3,6) : 'null'&#xA; &#xA;&#x9;&#x9;&#x9;&#x9;  xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;actualVessel=&quot;,actualVessel)&#xA;&#x9;&#x9;&#x9;&#x9;  xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;actualVoyage=&quot;,actualVoyage)&#xA;&#x9;&#x9;&#x9;&#x9;  &#xA;&#x9;&#x9;&#x9;&#x9;  &#xA;&#x9;&#x9;&#x9;  } &#xA;&#x9;&#x9;&#x9; aobcarrierId = unit.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;)&#xA;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9; println(&quot;facilityId: &quot; +facilityId +&quot; dischargePort &quot;+dischargePort +&quot;loadPort &quot;+loadPort)&#xA;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9; if(  (loadPort!=null &amp;&amp; loadPort!=&quot;&quot;) &amp;&amp;  (dischargePort!=null &amp;&amp; dischargePort!=&quot;&quot; ) ) {&#x9;&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9; xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;leg=&quot;,loadPort+'_'+dischargePort)&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;&#x9;  &#xA;&#x9;&#x9;  }&#xA;&#x9;&#x9;  else {&#xA;&#x9;&#x9;&#x9;&#x9;aobcarrierId = unit.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;)&#xA;&#x9;&#x9;  }&#xA;&#x9;&#x9;  &#xA;&#x9;  }else{&#xA;&#x9;   println(&quot;event.event.eventTypeId: &quot; + event.event.eventTypeId)&#xA;&#x9;   &#xA;&#x9;&#x9;  if(&quot;UNIT_LOAD&quot;.equals(event.event.eventTypeId) &amp;&amp; aobcarrierId!=null &amp;&amp; aobcarrierId.length()&gt;5){&#xA;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9; println(&quot;aobcarrierId: &quot; + aobcarrierId)&#xA;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;  def actualVessel = aobcarrierId.length() &gt; 5 ? aobcarrierId.substring(0,3) : 'null'&#xA;&#x9;&#x9;&#x9;&#x9;  def actualVoyage = aobcarrierId.length() &gt; 5 ? aobcarrierId.substring(3,6) : 'null'&#xA;&#x9;&#x9;&#x9;&#x9;  &#xA;&#x9;&#x9;&#x9;&#x9; // def actualVoyage = aobcarrierId != null ? aobcarrierId :declaredIBCV.length() &gt; 5 ? declaredIBCV.substring(3,6) : 'null'&#xA; &#xA;&#x9;&#x9;&#x9;&#x9;  println(&quot;actualVessel: &quot; + actualVessel +&quot; actualVoyage :&quot;+actualVoyage)&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;  xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;actualVessel=&quot;,actualVessel)&#xA;&#x9;&#x9;&#x9;&#x9;  xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;actualVoyage=&quot;,actualVoyage)&#xA;&#x9;&#x9;&#x9;&#x9;  xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;leg=&quot;,loadPort+'_'+dischargePort)&#xA; &#xA;&#x9;&#x9; &#xA;&#x9;&#x9; }&#xA;&#x9;  }&#xA;&#x9;println(&quot;aobcarrierId after Akutan load &quot;+ aobcarrierId)&#xA; &#xA;&#x9;xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;vesvoy=&quot;,aobcarrierId)&#xA;&#x9;//println(&quot;xmlGvyString after &quot;+ xmlGvyString)&#xA;&#x9;&#xA;&#x9;if(&quot;OPT&quot;.equals(dischPort)){&#xA;&#x9;&#x9; xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;leg=&quot;,&quot;E&quot;);&#xA;&#x9;}&#xA; &#xA;&#x9;//Added conditions in Generic Code&#xA;&#x9;xmlGvyString = unitLoadToNIS(unit,xmlGvyString,gvyCmisUtil,dischPort)&#xA;&#x9;//Formatting the Time Attrubites for Event Time Stamp Ordering&#xA;&#x9;java.util.Date date = new java.util.Date()&#xA;&#x9;//java.util.Date date = event.getEvent().getEventTime()&#xA; &#xA;&#x9;def zone =  unit.getUnitComplex().getTimeZone();&#xA;&#x9;def fmtDate =  gvyEvntObj.formatDate(date, zone)&#xA;&#x9;def fmtTime = gvyEvntObj.formatTime(date,zone)&#xA;&#x9;xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;lastADate=&quot;,fmtDate)&#xA;&#x9;xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;lastATime=&quot;,fmtTime)&#xA;&#x9;xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;aDate=&quot;,fmtDate)&#xA;&#x9;xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;aTime=&quot;,fmtTime)&#xA;&#x9;&#x9;&#xA; &#xA;&#x9;try&#xA;&#x9;{&#xA; &#xA;&#x9;  def unitId = unit.getFieldValue(&quot;unitId&quot;)&#xA; &#xA; /*  A5 - Change&#xA;&#x9;  if(unitClass.equals(&quot;CONTAINER&quot;))&#xA;&#x9;  {&#xA;&#x9;   if(!chassisNbr.equals('null'))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;   def chassisId = chassisNbr != null ? chassisNbr.substring(0,chassisNbr.length()-1) : 'null'&#xA;&#x9;&#x9;   def chassisCd =  chassisNbr != null ? chassisNbr.substring(chassisNbr.length()-1) : 'null'&#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;   //Pass Record for Loaded Chassis&#xA;&#x9;&#x9;   xmlGvyChassis = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;unitClass=&quot;,&quot;CHASSIS&quot;)&#xA;&#x9;&#x9;   xmlGvyChassis = gvyCmisUtil.eventSpecificFieldValue(xmlGvyChassis,&quot;chassisNumber=&quot;,chassisId)&#xA;&#x9;&#x9;   xmlGvyChassis = gvyCmisUtil.eventSpecificFieldValue(xmlGvyChassis,&quot;chassisCd=&quot;,chassisCd)&#xA;&#x9;&#x9;   &#xA;&#x9;&#x9;   // compare eventFcyId with facilityId - to find vessvoy for barge load&#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;   &#xA;&#x9;&#x9;   if ((eventFcyId == &quot;KQA&quot;  || eventFcyId == &quot;SDP&quot;  || eventFcyId == &quot;BBA&quot;  || eventFcyId == &quot;PML&quot;) &amp;&amp; facilityId == &quot;DUT&quot; ) {&#xA;&#x9;&#x9;   &#xA;&#x9;&#x9;&#x9;  aobcarrierId = unit.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;)&#xA;&#x9;&#x9;   }&#xA;&#x9;&#x9;   xmlGvyChassis = gvyCmisUtil.eventSpecificFieldValue(xmlGvyChassis,&quot;vesvoy=&quot;,aobcarrierId)&#xA;&#x9;&#x9;   //Posting Chassis Msg&#xA;&#x9;&#x9;   //gvyBaseClass.sendXml(xmlGvyChassis)&#xA;&#x9;&#x9;   //A5- gvyCmisUtil.postMsgForAction(xmlGvyChassis,gvyBaseClass,&quot;null&quot;)&#xA;&#x9;&#x9; }&#xA;&#x9;&#x9; if (!accessoryNbr.equals('null'))&#xA;&#x9;&#x9; {&#xA;&#x9;&#x9;   //Pass Record for Loaded Acry&#xA;&#x9;&#x9;   xmlGvyAcsry = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;unitClass=&quot;,&quot;ACCESSORY&quot;)&#xA;&#x9;&#x9;   xmlGvyAcsry = gvyCmisUtil.eventSpecificFieldValue(xmlGvyAcsry,&quot;accessory=&quot;,accessoryNbr)&#xA;&#x9;&#x9;   xmlGvyAcsry = gvyCmisUtil.eventSpecificFieldValue(xmlGvyAcsry,&quot;mgWeight=&quot;,&quot;%&quot;)&#xA;&#x9;&#x9;   //Posting Accessory Msg&#xA;&#x9;&#x9;   //gvyBaseClass.sendXml(xmlGvyAcsry)&#xA;&#x9;&#x9;   //A5 - gvyCmisUtil.postMsgForAction(xmlGvyAcsry,gvyBaseClass,&quot;null&quot;)&#xA;&#x9;&#x9; }&#xA;  &#xA;&#x9;&#x9;//Posting Container Msg&#xA;&#x9;&#x9;//gvyBaseClass.sendXml(xmlGvyString)&#xA;&#x9;&#x9;//A4 gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,&quot;null&quot;)&#xA;&#x9;&#x9;return xmlGvyString&#xA; &#xA;&#x9;  }//If for Container Ends&#xA;&#x9;  else if(unitClass.equals(&quot;CHASSIS&quot;))&#xA;&#x9;  {&#xA;&#x9;&#x9; if (!accessoryNbr.equals('null'))&#xA;&#x9;&#x9; {&#xA;&#x9;&#x9;   //Pass Record for Loaded Acry&#xA;&#x9;&#x9;   xmlGvyAcsry = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;unitClass=&quot;,&quot;ACCESSORY&quot;)&#xA;&#x9;&#x9;   xmlGvyAcsry = gvyCmisUtil.eventSpecificFieldValue(xmlGvyAcsry,&quot;accessory=&quot;,accessoryNbr)&#xA;&#x9;&#x9;   xmlGvyAcsry = gvyCmisUtil.eventSpecificFieldValue(xmlGvyAcsry,&quot;mgWeight=&quot;,&quot;%&quot;)&#xA;&#x9;&#x9;   //Posting Accessory Msg&#xA;&#x9;&#x9;   //gvyBaseClass.sendXml(xmlGvyAcsry)&#xA;&#x9;&#x9;&#x9;//A5 - gvyCmisUtil.postMsgForAction(xmlGvyAcsry,gvyBaseClass,&quot;null&quot;)&#xA;&#x9;&#x9; }&#xA;&#x9;&#x9;//Posting Chassis Msg&#xA;&#x9;&#x9;gvyBaseClass.sendXml(xmlGvyString)&#xA;&#x9;&#x9;//gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,&quot;null&quot;)&#xA; &#xA;&#x9;  }// If for Chassis ends&#xA;&#x9;  else if(unitClass.equals(&quot;ACCESSORY&quot;))&#xA;&#x9;  {&#xA;&#x9;&#x9;  //Posting Chassis Msg&#xA;&#x9;&#x9;  //gvyBaseClass.sendXml(xmlGvyString)&#xA;&#x9;&#x9;  gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,&quot;null&quot;)&#xA;&#x9;  }//Else if for Accessory Ends&#xA; */&#xA;&#x9; return xmlGvyString&#xA; &#xA;&#x9;}catch(Exception e){&#xA;&#x9; e.printStackTrace()&#xA;&#x9;}&#xA; &#xA;   }//getLoadedEquipClassMsg Ends&#xA; &#xA; /*&#xA;  //Method Checks if the Chassi is Attached to a RORO unit&#xA;   public boolean IschasAttachToRoRoUnit(Object event,Object api)&#xA;  {&#xA;&#x9;try&#xA;&#x9;{&#xA;&#x9;  def equip = event.getEntity()&#xA;&#x9;  def gvyFinderObj = api.getGroovyClassInstance(&quot;GvyCmisUnitFinderUtil&quot;);&#xA;&#x9;  def unit = gvyFinderObj.findAttachedUnit(equip)&#xA;&#x9;  if(unit != null)&#xA;&#x9;  {&#xA;&#x9;   //Adding Check for Event Ordering on UNIT_LOAD RORO for Chassis&#xA;&#x9;   def lookup = api.getGroovyClassInstance(&quot;GvyVesselLookup&quot;);&#xA;&#x9;   def position =  lookup.setDeckPositionType(unit);&#xA;&#x9;   println('-----Position----:'+position+'--------unit.subsidiaryEquipment----'+unit.subsidiaryEquipment)&#xA; &#xA;&#x9;   if(&quot;RO&quot;.equals(position) &amp;&amp; unit.subsidiaryEquipment != null) {&#xA;&#x9;&#x9;println('INSIDE THE UNIT_PROPERTY_UPDATE DECK POISTION : FLASE')&#xA;&#x9;&#x9;return false&#xA;&#x9;   }&#xA;&#x9;  }&#xA; &#xA;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;   e.printStackTrace()&#xA;&#x9;}&#xA;&#x9;return true&#xA;  }&#xA; &#xA; */&#xA; &#xA;   /*&#xA;   * Change for UNIT_LOAD LS,LOC,Truck&#xA;   * Added Conditions in Generic Code&#xA;   */&#xA;   public String unitLoadToNIS(Object unit,String xmlData,Object gvyCmisUtil,String dischPort)&#xA;  {&#xA;&#x9; def xmlGvyString = xmlData&#xA;&#x9; try{&#xA;&#x9;   def aobcarrierVesId= unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdVessel.vesId&quot;)&#xA;&#x9;   def islandPort = gvyCmisUtil.isNISPort(dischPort)&#xA;&#x9;   if(islandPort){&#xA;&#x9;&#x9; xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;locationStatus=&quot;, &quot;7&quot;)&#xA;&#x9;&#x9; xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;loc=&quot;, &quot;NIS&quot;)&#xA;&#x9;&#x9; xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;truck=&quot;, &quot;9&quot;+aobcarrierVesId)&#xA;&#x9;   }&#xA;&#x9;&#x9;//Being Set in Generic Rules&#xA;&#x9;&#x9;/*  else if (!islandPort){&#xA;&#x9;&#x9;   xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;locationStatus=&quot;, &quot;2&quot;)&#xA;&#x9;&#x9;   xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;loc=&quot;, &quot;null&quot;)&#xA;&#x9;&#x9;   }*/&#xA;&#x9;}catch(Exception e){&#xA;&#x9; e.printStackTrace()&#xA;&#x9;}&#xA;   return xmlGvyString&#xA; }&#xA; &#xA;  // Auto Popluate POL and OPL to facilityId if Blank&#xA;  public void setPolIfBlank(Object unit){&#xA;&#x9; try{&#xA;&#x9;   def pol =  unit.unitRouting.rtgPOL;&#xA;&#x9;   def opl =  unit.unitRouting.rtgOPL;&#xA;&#x9;   if(pol == null || opl == null){&#xA;&#x9;&#x9;  def fcyId = ContextHelper.getThreadFacility().getFcyId()&#xA;&#x9;&#x9;  def routing = unit.getUnitRouting();&#xA;&#x9;&#x9;  pol = pol == null ? routing.setRtgPOL(RoutingPoint.findRoutingPoint(fcyId)) : pol;&#xA;&#x9;&#x9;  opl = opl == null ? routing.setRtgOPL(RoutingPoint.findRoutingPoint(fcyId)) : opl;&#xA;&#x9;&#x9;}&#xA;&#x9; }catch(Exception e){&#xA;&#x9;   e.printStackTrace();&#xA;&#x9;}&#xA;  }&#xA;   &#xA;   public void passBareChassisToNow(Object unit, Object api, Object event){&#xA;&#x9; def primaryClass = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;&#x9; def aobcarrierId = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;)&#xA;&#x9; if(EquipClassEnum.CHASSIS.equals(primaryClass) &amp;&amp; aobcarrierId.startsWith('ALE')){&#xA;&#x9;   def gvyNow = api.getGroovyClassInstance(&quot;NowChassisTrackingBuilder&quot;)&#xA;&#x9;   gvyNow.nowMessagesProcessor(event, api)&#xA;&#x9; }&#xA;   }&#xA; &#xA; }" />
<digital-asset id="PlaceUnitIntoSkipYard" short-description="PlaceUnitIntoSkipYard" is-pre-deployed="N" groovy-code="/*&#xA;* SrNo Doer Date        Change&#xA;* A1   GR   07/07/10  Method to Detach Chassis&#xA;* A2   GR   07/12/10  IsOnVessel=true and chassis value dosent match then Detach &#xA;* A3   GR   07/26/10  Added NULL Check for Unit&#xA;* 08/16/11 2.1 Updated Email Method&#xA;*/&#xA;import com.navis.argo.ContextHelper;&#xA;import com.navis.argo.business.atoms.LocTypeEnum;&#xA;import com.navis.argo.business.model.LocPosition;&#xA;import com.navis.argo.business.model.Yard;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder;&#xA;import com.navis.road.business.util.RoadBizUtil;&#xA;import com.navis.framework.util.BizViolation;&#xA;import com.navis.framework.util.message.MessageLevel;&#xA;import com.navis.framework.util.internationalization.PropertyKey;&#xA;import com.navis.framework.util.internationalization.PropertyKeyFactory;&#xA;import com.navis.road.business.model.TruckTransaction;&#xA;import com.navis.argo.business.reference.Equipment;&#xA;import com.navis.inventory.business.api.UnitManager;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.framework.business.Roastery&#xA;&#xA;&#xA;public class PlaceUnitIntoSkipYard {&#xA;&#xA;    public static final String BEAN_ID = &quot;placeUnitIntoSkipYard&quot;;&#xA;    public static PropertyKey PLACE_UNIT_INTO_SKIP_YARD = PropertyKeyFactory.valueOf(&quot;gate.place_unit_into_skip_yard&quot;);&#xA;    private static final String SKIP_YARD_BLOCK_NAME = &quot;SKPYRD&quot;;&#xA;&#x9;private static final String emailTo = '1aktosdevteam@matson.com'&#xA;&#xA;    public void execute(TransactionAndVisitHolder dao, api) {&#xA;&#xA;        UnitFacilityVisit ufv = dao.getTran().getTranUfv();&#xA;        LocPosition currentPos = ufv.getUfvLastKnownPosition();&#xA;        if (LocTypeEnum.VESSEL.equals(currentPos.getPosLocType())) {&#xA;            Yard moveYard = ContextHelper.getThreadYard();&#xA;            LocPosition skipYardPos = LocPosition.resolvePosition(ufv.getUfvFacility(),&#xA;                    LocTypeEnum.YARD, moveYard.getYrdId(), SKIP_YARD_BLOCK_NAME, null, ufv.getBasicLength());&#xA;            Unit unit = dao.getTran().getTranUnit();&#xA;            try {&#xA;                unit.move(skipYardPos);&#xA;            } catch (BizViolation bv) {&#xA;                RoadBizUtil.appendMessage(MessageLevel.SEVERE, PLACE_UNIT_INTO_SKIP_YARD, unit.getUnitId(), bv.getLocalizedMessage());&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;&#xA;&#xA;   public void detachChassis(TransactionAndVisitHolder dao, api)&#xA;  {&#xA;&#x9;  String cntrNbr = null; String chassisNbr = null;  &#xA;      try&#xA;     {&#xA;       TruckTransaction tran = dao.tran&#xA;       cntrNbr = tran.tranCtrNbr&#xA;       chassisNbr = tran.tranChsNbr&#xA;       Unit unit = dao.tran.tranUnit;&#xA;&#x9;   if(unit == null){ //A3&#xA;           println('Unit Object Null at pass pass Gate') &#xA;&#x9;&#x9;   return;&#xA;       }&#xA;       def carriageId = unit.getFieldValue(&quot;unitCarriageUe.ueEquipment.eqIdFull&quot;)&#xA;&#x9;   def lkpPosLoc = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;&#xA;       if(carriageId == null){&#xA;         println('No chassis to Dismount at pass pass Gate') &#xA;         return;&#xA;       }&#xA;&#xA;       if(chassisNbr == null &amp;&amp; carriageId != null){&#xA;          unit.swipeChsByOwnersChs()&#xA;       }else if (carriageId != null &amp;&amp; !carriageId.equals(chassisNbr) &amp;&amp; LocTypeEnum.VESSEL.equals(lkpPosLoc)){&#xA;          unit.swipeChsByOwnersChs()&#xA;       }&#xA;     }catch(Exception e){&#xA;       def emailSender = api.getGroovyClassInstance(&quot;EmailSender&quot;);&#xA;       emailSender.custSendEmail(emailTo, &quot;PassPass Error Detaching Chassis &quot;+chassisNbr+&quot; from Container &quot;+cntrNbr, e.getMessage());&#xA;     }&#xA;    }//Method Ends&#xA;}&#xA;" />
<digital-asset id="GvyGateSetOwnerFlex" short-description="GvyGateSetOwnerFlex" is-pre-deployed="N" groovy-code="/*&#xA;&#xA;Groovy code called to set owner&#xA;&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;&#xA;public class GvyGateSetOwnerFlex  extends GroovyInjectionBase&#xA;{&#xA;&#x9;public void execute(inDao, api)&#xA;&#x9;{&#xA;&#x9;&#x9;log(&quot;\nGvyGateSetOwnerFlex: --Executing Groovy Gate Task---&quot;)&#xA;&#x9;&#x9;def tran = inDao.getTran();&#xA;&#x9;&#x9;if(tran == null) return&#xA;                def unit = tran.getTranUnit();&#xA;                if(unit == null) return;&#xA;                def owner = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOwner.bzuId&quot;);&#x9;&#x9;        &#xA;        &#x9;unit.setFieldValue(&quot;unitFlexString13&quot;, owner);&#xA;&#x9;}&#xA;}" />
<digital-asset id="GvyCmisCargoStatusUtil" short-description="GvyCmisCargoStatusUtil" is-pre-deployed="N" groovy-code="import com.navis.framework.business.Roastery&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.api.IFlagType&#xA;import com.navis.argo.business.atoms.FlagPurposeEnum&#xA;import com.navis.security.business.user.BaseUser&#xA;&#xA;/*&#xA;* A1   GR  Commented out Field  replaceQuotes&#xA;* A2   GR   12/13/11  Update HOLD FOR LNK&#xA;*/&#xA;&#xA;//Class to Manipulate String Values &#xA;public class GvyCmisCargoStatusUtil&#xA;{&#xA;&#xA;    public String eventSpecificFieldValue(String xmlGvyData,String field,String newFieldValue)&#xA;   {&#xA;    String newValue = null;&#xA;    String oldValue = null;&#xA;    String xmlGvyString = xmlGvyData;&#xA;    int fieldIndx = xmlGvyString.indexOf(field);&#xA;    try&#xA;   {&#xA;       if(fieldIndx != -1)&#xA;       {&#xA;         int equalsIndx = xmlGvyString.indexOf(&quot;=&quot;,fieldIndx);&#xA;         int nextspace = xmlGvyString.indexOf(&quot;\&quot;&quot;, equalsIndx+2);&#xA;         oldValue = xmlGvyString.substring(equalsIndx+2, nextspace);&#xA;&#x9;  &#xA;          if(oldValue.equals(&quot;null&quot;) ){&#xA;            newValue = newFieldValue;&#xA;          }&#xA;          else{&#xA;             //CHECK FOR VALUE HERE&#xA;             newValue = newFieldValue;&#xA;           }&#xA;           //System.out.println(&quot;Field ::&quot;+field+&quot;  oldValue ::&quot;+oldValue+&quot;  newValue :::&quot;+newValue);&#xA;           //Replace Escape Char  in String&#xA;           newValue = replaceQuotesUtil(newValue)&#xA;           String oldXmlValue = field+&quot;\&quot;&quot;+oldValue+&quot;\&quot;&quot;;&#xA;           String newXmlValue = field+&quot;\&quot;&quot;+newValue+&quot;\&quot;&quot;;&#xA;            //println(&quot;oldXmlValue ::&quot;+oldXmlValue+&quot;  newXmlValue :::&quot;+newXmlValue); &#xA;           xmlGvyString = xmlGvyString.replace(oldXmlValue, newXmlValue);&#xA;        }//IF Ends&#xA;     }catch(Exception e){&#xA;         e.printStackTrace()&#xA;     }&#xA;     return xmlGvyString;&#xA;   }// Method eventSpecificFieldValue Ends&#xA; &#xA;   public static String getFieldValues(String xmlGvyString, String field)&#xA;  {&#xA;      String fieldValue = ''&#xA;      try&#xA;     {&#xA;       def fieldIndx = xmlGvyString.indexOf(field);&#xA;       def equalsIndx = xmlGvyString.indexOf(&quot;=&quot;,fieldIndx);&#xA;       def nextspace = xmlGvyString.indexOf(&quot;\&quot;&quot;, equalsIndx+2);&#xA;       fieldValue  = xmlGvyString.substring(equalsIndx+2, nextspace);&#xA;       //println(&quot;equalsIndx:&quot;+equalsIndx+&quot;  nextspace:&quot;+nextspace+&quot; oldValue:&quot;+fieldValue);&#xA;      }catch(Exception e){&#xA;        e.printStackTrace()&#xA;     }&#xA;      return fieldValue;&#xA;   }&#xA;&#xA;   public  String arrayToString(String[] a, String separator) {&#xA;    String result = &quot;&quot;;&#xA;    if (a.length &gt; 0) {&#xA;        result = a[0];    // start with the first element&#xA;        for (i in a) {&#xA;            result = result + separator + i;&#xA;        }&#xA;    }&#xA;    return result;&#xA; }&#xA;&#xA;    //Method Get Active Holds for Unit&#xA;   public String getUnitActiveHolds(Object unitbase) &#xA;   {&#xA;     def activeHoldList = &quot;&quot;;&#xA;    try&#xA;   {&#xA;     def map = new HashMap()      &#xA;     map.put('DRAY CANNOT LTV','')&#xA;     map.put('HOLD FOR LNK','HLD')&#xA;     map.put('CG_INSP','CG')&#xA;     map.put('OUTGATE','RD')      &#xA;&#xA;     def strBuffer = new StringBuffer()&#xA;     ServicesManager sm = (ServicesManager)Roastery.getBean(&quot;servicesManager&quot;);&#xA;     def flagIds = sm.getActiveFlagIds(unitbase);&#xA;     if (flagIds != null) &#xA;    {&#xA;        for(holdId in flagIds)&#xA;       {&#xA;         def  iFlageType = sm.getFlagTypeById(holdId)&#xA;         def flagPurpose =  iFlageType.getPurpose().getKey()&#xA;         if(flagPurpose.equals('HOLD')) &#xA;       {&#xA;             def appHoldId = map.get(holdId) != null ? map.get(holdId) : holdId &#xA;             strBuffer.append(appHoldId+',')&#xA;         }&#xA;       }&#xA;     }//IF Ends&#xA;       activeHoldList = strBuffer.length() &gt; 0 ? (''+strBuffer).substring(0,strBuffer.length()-1) : strBuffer&#xA;       //println(&quot;activeHoldList ::::&quot;+activeHoldList)&#xA;  }catch(Exception e){&#xA;    e.printStackTrace()&#xA;  }&#xA;   return activeHoldList&#xA; }//Method Ends&#xA;&#xA;&#xA;   public String formatField(String attrName,String attrValue ) &#xA;  {&#xA;     try&#xA;    {&#xA;       def fmtValue = ''&#xA;       if(attrValue != null)&#xA;       {&#xA;        def attrFmtValue= replaceQuotes(attrValue)&#xA;        //def attrFmtValue= attrValue&#xA;        fmtValue = attrName+&quot;=\&quot;&quot;+attrFmtValue+&quot;\&quot; &quot;&#xA;        return fmtValue;&#xA;       }&#xA;       else&#xA;       {&#xA;         return fmtValue;&#xA;        }&#xA;     }catch(Exception e){&#xA;        e.printStackTrace()&#xA;     }&#xA;   }&#xA;   &#xA;    public  String replaceQuotes(Object message)&#xA;   {&#xA;     def msg = message.toString();&#xA;     def replaceAmp = msg.replaceAll('&amp;', '&amp;amp;');&#xA;     replaceAmp = replaceAmp.replaceAll('\'', '&amp;apos;');&#xA;     replaceAmp = replaceAmp.replaceAll(&quot;&lt;&quot;, &quot;&amp;lt;&quot;)&#xA;     replaceAmp =  replaceAmp.replaceAll(&quot;&gt;&quot;, &quot;&amp;gt;&quot;)&#xA;     replaceAmp = replaceAmp.replaceAll(&quot;\&quot;&quot;, &quot;&amp;quot;&quot;)&#xA;     return replaceAmp; &#xA;    }&#xA;&#xA;   //Method verifies the &#xA;   public String getCsrUserRole(String userId)&#xA;   {&#xA;     try&#xA;    {&#xA;      BaseUser baseUser = new BaseUser()&#xA;      baseUser = baseUser.findBaseUser(userId)&#xA;      def groupArr = baseUser != null ? baseUser.getUserRoleNames() : null&#xA;      for(aGroup in groupArr)&#xA;      {&#xA;          if(aGroup.equals('No Email')){&#xA;            println(&quot;User Has CSR No Email Group :&quot;+aGroup)&#xA;            return aGroup&#xA;          }&#xA;      }&#xA;    }catch(Exception e){&#xA;     e.printStackTrace()&#xA;    }&#xA;   return null&#xA;   }&#xA;  &#xA;   /*&#xA; * Methods Validates if POD is NIS port&#xA; * and sends out messages to NIS mailing Groups for Holds&#xA; */&#xA;   public boolean nisPortCheck(Object event, Object api)&#xA;  {&#xA;     boolean isNIS = false &#xA;     try&#xA;    {&#xA;       def unit = event.getEntity()&#xA;       def gvyCmisUtil = api.getGroovyClassInstance(&quot;GvyCmisUtil&quot;) &#xA;       def curDischPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;       curDischPort = curDischPort != null ? curDischPort : &quot;&quot;&#xA;       isNIS  = gvyCmisUtil.isNISPort(curDischPort)&#xA;     }catch(Exception e){&#xA;        e.printStackTrace()&#xA;     }&#xA;     return isNIS&#xA;   }&#xA;&#xA;   public  String replaceQuotesUtil(Object message)&#xA;   {&#xA;     def msg = message.toString();&#xA;     def replaceAmp = msg.replaceAll('&amp;', '&amp;amp;');&#xA;           replaceAmp = replaceAmp.replaceAll('\'', '&amp;apos;');&#xA;           replaceAmp = replaceAmp.replaceAll(&quot;&lt;&quot;, &quot;&amp;lt;&quot;)&#xA;           replaceAmp =  replaceAmp.replaceAll(&quot;&gt;&quot;, &quot;&amp;gt;&quot;)&#xA;           replaceAmp = replaceAmp.replaceAll(&quot;\&quot;&quot;, &quot;&amp;quot;&quot;)&#xA;     return replaceAmp; &#xA;    }&#xA;&#xA;}" />
<digital-asset id="GvyCmisUnitPropertyUpdate" short-description="GvyCmisUnitPropertyUpdate" is-pre-deployed="N" groovy-code="/*&#xA;* Sr doer  Date      change &#xA;* A1 GR    10/08/10  Gems : Uptd message posting method to Incorporate &#xA;                     Message specific field updates(example : AVL)   &#xA;                    Depending Class GvyCmisUtil&#xA;* A2 GR       02/17/12   TOS2.1 : Updt Field unitFlexString07 to UfvFlexString07&#xA;*/&#xA;&#xA;public class GvyCmisUnitPropertyUpdate&#xA;{&#xA;    def cmisActionList = ''&#xA;    def locationStatus = ''&#xA;&#x9;def fieldname=''&#xA;&#x9;def currentValue=''&#xA;&#x9;def previousValue=''&#xA;&#xA;    StringBuffer buffFieldName = new StringBuffer();&#xA;   /* &#xA;    * Method Processes the Updates fields in event UNIT_PROPERTY_UPDATE&#xA;    * 1] Read the event obj and stores the Updated Field Values&#xA;    * 2] Reads the field obj and process cmis msg for updates Fields&#xA;    */&#xA;   public String unitUpdateProcess(String xmlData,Object event,Object gvyBaseClass, boolean detnMsg)&#xA;   {&#xA;      def xmlGvyString = xmlData&#xA;      boolean postMsgEDT = false;&#xA;      try&#xA;      {&#xA;        //Read &amp; Store Event Fields into an EventField Object&#xA;        def unit = event.getEntity()&#xA;        def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;); &#xA;        def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;        cmisActionList = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisListAction&quot;); &#xA;&#xA;        //Set location status field&#xA;       getlocationStatus(unit,gvyCmisUtil)&#xA;&#xA;        Map mapEvntFld = gvyEventUtil.eventFieldChangedValues(event, gvyBaseClass)&#xA;&#xA;        //Read Fields and stores values into StringBuffer Objects for processing&#xA;        readEventChangedFields(mapEvntFld)&#xA;        &#xA;        //Check For Detention Msg&#xA;        println(&quot;Detention MSG :::&quot;+detnMsg)&#xA;        if(detnMsg)&#xA;       {&#xA;          cmisActionList.setActionList(&quot;FREE&quot;) &#xA;          cmisActionList.setActionList(&quot;EDT&quot;)&#xA;        }&#xA;&#xA;        //Gets Field specific action &amp; Post Message&#xA;        String evntFieldName = new String(buffFieldName)&#xA;        String [] fldNames = evntFieldName != null ? evntFieldName.split(' ') : null;&#xA;        for(aFldName in fldNames)&#xA;        {&#xA;           def fldAction = getChangedFieldAction(aFldName.trim())&#xA;           println(&quot;unit_property_update::Field Action ::&quot;+fldAction)  &#xA;           if(fldAction != null &amp;&amp; fldAction.length() &gt; 0 )&#xA;           {  &#xA;&#x9;&#x9;&#x9;&#xA;             postFieldSpecMsg(xmlGvyString,gvyBaseClass,gvyCmisUtil,fldAction,unit,event)&#xA;           }&#xA;        }&#xA;      &#xA;      //Post Cmis msg after appending the required action&#xA;       LinkedHashSet actionList = cmisActionList.getActionList();&#xA;       println(&quot;actionList :::::&quot;+actionList.size())&#xA;       for(aAction in actionList)&#xA;       {&#xA;          println(&quot;UNIT_PROPERTY_UPDT_ACTION_MSG_POSTING ::&quot;+aAction);&#xA;          //gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,aAction)&#xA;&#x9;&#x9;  println(&quot;currentValue1::&quot;+currentValue);&#xA;&#x9;&#x9;  if(currentValue!=&quot;CSR_ACTION_REQUIRED&quot;){&#xA;&#x9;&#x9;&#x9;gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,aAction, unit, event,gvyEventUtil)&#xA;&#x9;&#x9;  }&#xA;       }&#xA;       &#xA;      }catch(Exception e){&#xA;        e.printStackTrace()&#xA;      }&#xA;      return ''&#xA;   }//Method unitUpdateProcess Ends&#xA;   &#xA;   /*&#xA;   * Method reads the Updated field values from the object  &#xA;   * and stores the values in a string buffer for processing&#xA;   */&#xA;   public void readEventChangedFields(Object mapEvntField)&#xA;   {&#xA;      def processFlag = false;&#xA;      try&#xA;      {&#xA;        Iterator it = mapEvntField.keySet().iterator();&#xA;        while (it.hasNext()) &#xA;        {&#xA;          def aField = it.next();&#xA;          def aEvntFieldObj = mapEvntField.get(aField)    &#xA;&#x9;   &#xA;          //Fetch Updated Field Values&#xA;           fieldname = aEvntFieldObj.getFieldName()&#xA;           previousValue = aEvntFieldObj.getpreviousValue()&#xA;           currentValue = aEvntFieldObj.getCurrentValue()&#xA;&#x9;   &#xA;          //Append updated Field Name and Prev Value&#xA;          buffFieldName.append(fieldname+' ')&#xA;            &#xA;          println('fieldname ::'+fieldname+'  previousValue::'+previousValue+'   currentValue::'+currentValue)&#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  &#xA;&#xA;        }//While Ends&#xA;     }catch(Exception e){&#xA;        e.printStackTrace()&#xA;     }&#xA;&#xA;   }//Method readEventChangedFields Ends&#xA;&#xA;   &#xA;   /* Method post messages for Field Specific Cmis Action */ &#xA;   public void postFieldSpecMsg(String xmlData,Object gvyBaseClass,Object gvyCmisUtil, String fieldAction, Object unit, Object event)&#xA;   {&#xA;     boolean msgPosted = false;&#xA;     def xmlGvyString = xmlData&#xA;     try&#xA;     {&#xA;       //OB Carrier msg flag&#xA;      def intdObCarrierId=unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;) &#xA;       intdObCarrierId = intdObCarrierId != null ? intdObCarrierId : ''   &#xA;       boolean postObCarrierMsg =  (intdObCarrierId.equals('GEN_TRUCK') || intdObCarrierId.equals('GEN_VESSEL') &#xA;                              || intdObCarrierId.equals('GEN_CARRIER')) ? false : true&#xA;       boolean isUnitRollEvnt = &quot;UNIT_ROLL&quot;.equals(event.getEvent().getEventTypeId()) ? true : false&#xA;&#xA;       //def locationStatus = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;locationStatus=&quot;)&#xA;       def destPort = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;dPort=&quot;)&#xA;       def srv = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;srv=&quot;)&#x9; &#xA;     &#xA;       def islandPort =  gvyCmisUtil.isNISPort(destPort)&#xA;       println(&quot;ISland POrt ::&quot;+islandPort+&quot;    locationStatus::&quot;+locationStatus+&quot;   svr ::&quot;+srv)&#xA;      &#xA;       if(fieldAction.equals('RTG'))&#xA;       {&#xA;         //UNIT_REROUTE_PROCESSING&#xA;         def rerouteEvntFeed = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventFeedUnitReroute&quot;)&#xA;         rerouteEvntFeed.processUnitRerouteCmisFeed(xmlGvyString, gvyBaseClass, event, unit, cmisActionList, false)  &#xA;       }&#xA;      //Pass action BDC &amp; NIB Msg Type&#xA;      else if(fieldAction.equals('BDC'))&#xA;      {&#xA;        //Generating NIB &amp; NIE on cmis side&#xA;        /* if(locationStatus.equals('7')) {  &#xA;             cmisActionList .setActionList(&quot;NIB&quot;)&#xA;         }&#xA;        else{ &#xA;             cmisActionList .setActionList(&quot;BDC&quot;)&#xA;         }*/&#xA;           cmisActionList .setActionList(&quot;BDC&quot;)&#xA;     }&#xA;     else if(fieldAction.equals('INOB') &amp;&amp; postObCarrierMsg)&#xA;     {&#xA;        //overwrite ACTION=AVL &amp; Post Msg dont post for UNIT_ROLL&#xA;        if(!isUnitRollEvnt){&#xA;            cmisActionList .setActionList(&quot;AVL&quot;)&#xA;         }&#xA;        //overwrite ACTION=BDC &amp; Post Msg&#xA;        cmisActionList .setActionList(&quot;BDC&quot;)&#xA;     }&#xA;     else if(fieldAction.equals('NIT'))&#xA;     {   //NIT (Check if not on Barge and srv=MAT)&#xA;         if(islandPort &amp;&amp; !locationStatus.equals('7') &amp;&amp; srv.equals('MAT'))   {&#xA;           //overwrite ACTION=NIT &amp; Post Msg&#xA;           cmisActionList .setActionList(&quot;NIT&quot;)&#xA;         }&#xA;         //EDT&#xA;         cmisActionList .setActionList(&quot;EDT&quot;)&#xA;      }     &#xA;     //Check to pass other MSG types(TYP,TMP,PMR,PO#)&#xA;     else {&#xA;       //overwrite the ACTION Attr &amp; Post Msg&#xA;       cmisActionList .setActionList(fieldAction)&#xA;     }&#xA;&#xA;    }catch(Exception e){&#xA;      e.printStackTrace()&#xA;    }&#xA;   }//Method postUnitUpdateMsg Ends&#xA;&#xA;   /* Method Maps the Updated Field to the relevant Cmis Action */&#xA;   public Object getChangedFieldAction(String fieldName)&#xA;   {&#xA;      def chgFieldAction = ''  &#xA;       &#xA;      Map mapType = new HashMap()&#xA;      mapType.put('rfreqTempRequiredC','TMP')&#xA;      mapType.put('ufvFlexString07','TMP') //A2&#xA;      mapType.put('unitFreightKind','EDT')&#xA;      mapType.put('unitGoodsAndCtrWtKg','EDT')&#xA;      mapType.put('unitSealNbr1','EDT')&#xA;      mapType.put('gdsConsigneeAsString','NIT')&#xA;      mapType.put('gdsShipperAsString','EDT')&#xA;      mapType.put('gdsDestination','BDC')&#xA;      mapType.put('gdsCommodity','EDT')&#xA;      mapType.put('gdsBlNbr','BDC')&#xA;      mapType.put('eqEquipType','TYP')&#xA;      mapType.put('unitRemark','EDT')&#xA;      mapType.put('ufvFlexDate01','PMR')  &#xA;      mapType.put('rtgPOL','BDC')&#xA;      //Commented out the Routing check in UNIT_PROPERTY_UPDATE  &#xA;      //mapType.put('rtgPOD1','RTG')&#xA;      mapType.put('unitFlexString01','PO#')&#xA;      mapType.put('ufvIntendedObCv','INOB')&#xA;      mapType.put('unitLineOperator','EDT')&#xA;      mapType.put('ufvFlexDate02','EDT')&#xA;      mapType.put('ufvFlexDate03','EDT')&#xA;      mapType.put('unitFlexString04','EDT')&#xA;      mapType.put('unitFlexString05','EDT')&#xA;  &#xA;      chgFieldAction = mapType.get(fieldName) != null ? mapType.get(fieldName) : null&#xA;&#xA;       return chgFieldAction&#xA;    }//Method getChangedFieldAction Ends&#xA;&#xA;&#xA;     public String AssignTrucker(String xmlData,Object gvyCmisUtil,Object unit )&#xA;    {&#xA;         def xmlGvyString = xmlData&#xA;         //overwrite ACTION=EDT &#xA;         def truck = unit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;          truck = truck != null ? truck : &quot;null&quot; &#xA;         xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;truck=&quot;,truck)&#xA;   &#xA;         return  xmlGvyString&#xA;    }&#xA;&#xA;    public void getlocationStatus(Object unit, Object gvyCmisUtil){&#xA;     try&#xA;    {&#xA;       def lkpLocType=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;       lkpLocType = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;       def lkpCarrierId = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocId&quot;) &#xA;       locationStatus = lkpLocType.equals('VESSEL') &amp;&amp; gvyCmisUtil.getVesselClassType(lkpCarrierId).equals('BARGE') ? '7' : ''&#xA;     }catch(Exception e){&#xA;         e.printStackTrace()&#xA;       }&#xA;    }&#xA;&#xA;}&#xA;&#xA;" />
<digital-asset id="GvyGateSetHazardous" short-description="GvyGateSetHazardous" is-pre-deployed="N" groovy-code="/*&#xA;&#xA;Groovy code called to check EIT&#xA;&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;&#xA;public class GvyGateSetHazardous  extends GroovyInjectionBase&#xA;{&#xA;&#x9;public void execute(inDao, api)&#xA;&#x9;{&#xA;&#x9;&#x9;log(&quot;\nGvyGateSetHazardous: --Executing Groovy Gate Task---&quot;)&#xA;&#x9;&#x9;//log(&quot;Properties=&quot;+inDao.properties);&#xA;&#x9;&#x9;//log(&quot;tv=&quot;+inDao.tv.properties);&#xA;&#x9;&#x9;def tran = inDao.getTran();&#xA;&#x9;&#x9;//log(&quot;tran=&quot;+tran.properties);&#xA;&#x9;&#x9;if(tran.tranIsHazard) {&#xA;&#x9;&#x9;   // Get Units&#xA;                                              def unit = tran.getTranUnit();&#xA;                                              if(unit != null &amp;&amp; unit.getUnitGoods() != null) {&#xA;&#x9;&#x9;       def hazardItem = unit.getUnitGoods().attachHazard(&quot;X&quot;, &quot;&quot;);&#xA;                                              }&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}" />
<digital-asset id="GvyCmisEventUnitRenumber" short-description="Renumber Unit pass DEL &amp; ADD" is-pre-deployed="N" groovy-code="public class GvyCmisEventUnitRenumber&#xA;{&#xA;   public processRenumber(Object event,String xmlData,Object gvybaseClass){&#xA;   def xmlGvyString = xmlData&#xA;   try{&#xA;     &#xA;     def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;     def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;     def prevUnitNbr = gvyEventUtil.getPreviousPropertyAsString(event,&quot;unitId&quot;)&#xA;     def xmlStrPrevUnitNbr = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;ctrNo=&quot;,prevUnitNbr)&#xA;       &#xA;     gvyCmisUtil.postMsgForAction(xmlStrPrevUnitNbr,gvyBaseClass,&quot;DEL&quot;)&#xA;     gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,&quot;ADD&quot;)&#xA;&#xA;     }catch(Exception e){&#xA;        e.printStackTrace()&#xA;     }&#xA;   } &#xA;}" />
<digital-asset id="GvyCmisEvntFldChngProcessor" short-description="GvyCmisEvntFldChngProcessor" is-pre-deployed="N" groovy-code="/*&#xA;* Srno  Doer  Date       comment&#xA;* A1    GR    06/16/10   Pass Holds to acets removed Barge (locationstatus 7 check)&#xA;* A2    GR    06/18/10   Added Hold Escape list for ITN,DVI,AGN hold&#xA;* A3    GR    06/22/10   Overwrite Event &amp; Recorder for Acets as AHLP &amp; AHLR&#xA;* A4    GR    06/28/10   Send DVI hold upto acets (HPL/HLR)&#xA;*                        Handel Messages Condition for Departed married units.&#xA;* A5    GR    06/29/10   Clear Chassis Alert for HLR&#xA;* A6    GR    08/11/10   Remove Actual ves, voy and leg from generic default setting&#xA;* A7    GR    07/15/10   Remove Haz handling from Class&#xA;* A8    GR    07/19/10   Updt Cmis Posting Method&#xA;* A9    GR    09/08/10   Added flex01 variable as GEMS dosent need UN/NA&#xA;* A10   GR    10/04/10   Gems Change : Added HAZ events to Skip event list&#xA;* A12   GR    10/15/10   Reverted A8 change now to login Integration errors&#xA;* A13   GR    10/18/10   Gems change : Add UPU messages to escape list&#xA;* A14   GR    10/28/10   Gems : Post NV and NLT Execution Messages Directly to Gems&#xA;* A15   GR    11/03/10   Gems : INGATE_RELEASE to set CLS to locationStatus=1&#xA;* A16   GR    11/10/10   Gems : Double posting HLP joce identified isssue Fixed&#xA;* A17   GR    12/08/10   Gems : DVIR Check&#xA;* A18   GR    01/11/11   Gems : Suppress EDT for overDimension Update&#xA;* A19   GR    01/31/11   Gems : USA Hold/ Release Added&#xA;* A20   GR    12/06/11   Gems : Added YB_TRUCKER_ASSIGN and mapped trucker&#xA;* A21   GR    03/16/11   opened out HLP/HLR posting for Client Vessel&#xA;* A22   RI    02/27/14   Added method to capture Integration error&#xA;*/&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.framework.persistence.HibernateApi&#xA;&#xA;public class GvyCmisEvntFldChngProcessor&#xA;{&#xA;    public static String getFieldValues(String xmlGvyString, String field)&#xA;    {&#xA;        String fieldValue = ''&#xA;        try&#xA;        {&#xA;            def fieldIndx = xmlGvyString.indexOf(field);&#xA;            def equalsIndx = xmlGvyString.indexOf(&quot;=&quot;,fieldIndx);&#xA;            def nextspace = xmlGvyString.indexOf(&quot;'&quot;, equalsIndx+2);&#xA;            fieldValue  = xmlGvyString.substring(equalsIndx+2, nextspace);&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return fieldValue;&#xA;    }&#xA;    public String processFieldChngCmisFeed(Object event,Object gvyBaseClass)&#xA;    {&#xA;        def xmlGvyString = ''&#xA;        try{&#xA;            //Get OBJECT&#xA;            Object unitObj = event.getEntity()&#xA;            def isUnitObj = false&#xA;&#xA;            //Check For Unit Object to handle Reporting Tag Event Call&#xA;            if(unitObj instanceof Unit) {&#xA;                isUnitObj = true&#xA;            }&#xA;&#xA;            //Gets EVENT ID&#xA;            Event gvyEventObj = event.getEvent()&#xA;            String eventType =  gvyEventObj.getEventTypeId()&#xA;            def evntNotes = gvyEventObj.getEventNote();&#xA;            evntNotes = evntNotes != null ? evntNotes : ''&#xA;&#xA;            def gvyDataProcObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisDataProcessor&quot;);&#xA;            def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;            def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;)&#xA;            def gvyTxtMsgFmt = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisTxtMsgFormatter&quot;);&#xA;&#xA;            //MSG TYPE&#xA;            def eventTypeAttr = gvyTxtMsgFmt.doIt('msgType',eventType)&#xA;&#xA;            //Getting UNIT_OBJ from EQUIP_OBJ&#xA;            if(unitObj instanceof EquipmentState){&#xA;                unitObj = gvyDataProcObj.getUnitFromEquipment(unitObj)&#xA;            }&#xA;            //Assigning If Equi Obj to Unit Obj&#xA;            def unit = unitObj&#xA;&#xA;            //Print Evnt and Unit&#xA;            def unitId = unit.getFieldValue(&quot;unitId&quot;);&#xA;            println('EventType ::'+eventType+&quot;   unitId:: &quot;+unitId)&#xA;&#xA;            // EQUIP CLASS&#xA;            def equiClass =unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;            equiClass = equiClass != null ? equiClass.getKey() : ''&#xA;&#xA;            //Crstatus,CargoNotes,Comments&#xA;            def CommentsAttr = ''&#xA;            def gvyCommentObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisCommentNotesField&quot;);&#xA;            CommentsAttr = gvyCommentObj.doIt(gvyEventObj,eventType,gvyTxtMsgFmt,unit)&#xA;&#xA;            //Action Attr&#xA;            def actionAttr = ''&#xA;            def gvyActionObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisActionDetail&quot;);&#xA;            actionAttr = gvyActionObj.doIt(gvyTxtMsgFmt,gvyEventObj,gvyBaseClass,unit)&#xA;&#xA;            //Unit Class,Nbr,Chassis Nbr,Accessory&#xA;            def unitFieldAttr = ''&#xA;            def gvyUnitDtlObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUnitDetail&quot;);&#xA;            unitFieldAttr = gvyUnitDtlObj.doIt(equiClass,gvyTxtMsgFmt,unit, event)&#xA;&#xA;            //DMG_CODE,STOW FLAG&#xA;            def flagFieldsAttr = flagFields(unit,eventType,gvyTxtMsgFmt)&#xA;&#xA;            //RESTOW&#xA;            def restow = unit.getFieldValue(&quot;unitActiveUfv.ufvRestowType&quot;)&#xA;            restow = restow != null ? restow.getKey() : ''&#xA;            def restowAttr = gvyTxtMsgFmt.doIt('restow',restow)&#xA;&#xA;            //CONSIGNEE&#xA;            def gvyConsigneeObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisShipmentDetail&quot;)&#xA;            def consignee=gvyConsigneeObj.getConsigneeValue(unit,eventType)&#xA;            if(consignee == null || consignee.equals('null') || consignee.trim().length() == 0){&#xA;                consignee = '%'&#xA;            }&#xA;            def consigneeAttr = gvyTxtMsgFmt.doIt('consignee',consignee)&#xA;&#xA;            //MISC2 - A1(flex fielsds-cargo status field Change code)&#xA;            def misc2 = ''&#xA;            def gvyEditFlag = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisProcessEditFlag&quot;);&#xA;            misc2 =gvyEditFlag.processEditFlag(event, eventType, unitObj, gvyBaseClass )&#xA;            unitObj.setUnitFlexString11(misc2)&#xA;            def misc2Attr = gvyTxtMsgFmt.doIt('misc2',misc2)&#xA;&#xA;            //Fields the Did not change&#xA;            def nonChngFieldAttr = nonChangingFields()&#xA;&#xA;            def msgString = eventTypeAttr+' '+CommentsAttr+' '+actionAttr+' '+unitFieldAttr+' '+flagFieldsAttr+' '+' '+restowAttr+' '+consigneeAttr+' '+nonChngFieldAttr+' '+misc2Attr         //Creates Groovy Xml&#xA;            xmlGvyString = gvyTxtMsgFmt.createGroovyXml(msgString)&#xA;&#xA;            //Field Manipulation&#xA;            def eventFeedObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventFeedManipulation&quot;);&#xA;            xmlGvyString = eventFeedObj.processCmisEventFeedManipulation(eventType,xmlGvyString, gvyBaseClass,event,unitObj, isUnitObj, equiClass)&#xA;&#xA;&#xA;            //Added Field Check - Remove EQUIP HOLD/RELEASE FIELD MANIPULATION&#xA;            //def equipHold = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEquipmentHoldEvents&quot;)&#xA;            //xmlGvyString = equipHold.setEquipmentHoldFields(xmlGvyString,event,unitObj)&#xA;            boolean msgPostingFlag = true;&#xA;&#xA;            if(eventType.equals(&quot;DVI_HOLD&quot;) || eventType.equals(&quot;DVI_RELEASE&quot;)){ // A4 Chassis Hold&#xA;                if(eventType.endsWith('_HOLD')){&#xA;                    xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;chassisAlert=&quot;,'DVI')&#xA;                }else{&#xA;                    xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;chassisAlert=&quot;,'null')&#xA;                }&#xA;&#xA;                xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;unitClass=&quot;,'CHASSIS')&#xA;&#xA;                //GemsPROD issue Reading for CntrNbr 12/09/10&#xA;                def chassisNbr = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;chassisNumber=&quot;)&#xA;                def chassisCd = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;chassisCd=&quot;)&#xA;&#xA;                xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;ctrNo=&quot;,chassisNbr)&#xA;                xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;checkDigit=&quot;,chassisCd)&#xA;            }&#xA;&#xA;            if (eventType.equals(&quot;UNIT_OVERDIMENSIONS_UPDATE&quot;)){&#xA;                msgPostingFlag = false;&#xA;                processOogFields(xmlGvyString,unit,gvyCmisUtil,event,gvyBaseClass)&#xA;&#xA;            }else if (eventType.equals(&quot;ARD&quot;)){&#xA;                //BOOKING NUMBER&#xA;                def bookingNbr=unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;)&#xA;                xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;bookingNumber=&quot;,bookingNbr)&#xA;            }&#xA;            else if (eventType.equals(&quot;TRUCKER_ASSIGN&quot;) || eventType.equals(&quot;RELEASE_CONTAINER&quot;) || eventType.equals(&quot;YB_TRUCKER_ASSIGN&quot;) || eventType.equals(&quot;PTL_RELEASE_TO&quot;) ){&#xA;                if(eventType.equals(&quot;RELEASE_CONTAINER&quot;)){&#xA;                    def relConsignee =gvyConsigneeObj.getConsigneeValue(unit,eventType)&#xA;                    relConsignee = relConsignee != null &amp;&amp; relConsignee.trim().length() != 0 ? relConsignee : &quot;null&quot;&#xA;                    xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;consignee=&quot;,relConsignee)&#xA;                }&#xA;&#xA;                def truck = unit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;                truck = truck != null ? truck : &quot;null&quot;&#xA;                xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;truck=&quot;,truck)&#xA;                gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,&quot;EDT&quot;)&#xA;                msgPostingFlag = false;&#xA;            }&#xA;            else if(eventType.equals(&quot;PREMOUNT_REQUEST&quot;)){&#xA;                xmlGvyString = processPremountEvent(xmlGvyString,unit,gvyCmisUtil)&#xA;            }&#xA;            else if (eventType.equals(&quot;UNIT_OPERATOR_CHANGE&quot;)){&#xA;                //OWNER &amp; OPERATOR(SRV)&#xA;                def gvyEquiObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEquiDetail&quot;);&#xA;                def srv = gvyEquiObj.getSrv(unit,gvyBaseClass)&#xA;                xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;srv=&quot;,srv)&#xA;            }else if (eventType.endsWith(&quot;_HOLD&quot;) || eventType.endsWith(&quot;_RELEASE&quot;)){&#xA;                if(!(eventType.startsWith(&quot;SHOP&quot;)|| eventType.startsWith(&quot;CG_DMG&quot;) || eventType.startsWith(&quot;CL&quot;) || eventType.startsWith(&quot;INGATE&quot;) || eventType.startsWith(&quot;LTV&quot;))){&#xA;                    def acetsAction = eventType.endsWith(&quot;_HOLD&quot;) ? 'HLP' : 'HLR'&#xA;                    //A3 - Overwrite for Acets&#xA;                    if(evntNotes.contains('Acets HLP/HLR')){&#xA;                        acetsAction = eventType.endsWith(&quot;_HOLD&quot;) ? 'AHLP' : 'AHLR'  // A16&#xA;                        xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;doer=&quot;,&quot;ACETS&quot;)&#xA;                        xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;lastDoer=&quot;,&quot;ACETS&quot;)&#xA;                    }&#xA;// A21 - Starts           def postAcetsMsg =  postHoldReleaseAcetsMsg(unit,gvyBaseClass,gvyCmisUtil)&#xA;                    //          if(postAcetsMsg){ //post acets messages&#xA;                    def acetsXml = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;action=&quot;,acetsAction)&#xA;                    acetsXml = gvyCmisUtil.eventSpecificFieldValue(acetsXml,&quot;lastAction=&quot;,acetsAction)&#xA;                    //A14 - Post NV and NLT Execution Messages Directly to Gems&#xA;                    /* if(event.event.evntAppliedBy.contains('jms')){&#xA;                         def jmsTopicSender = gvyBaseClass.getGroovyClassInstance(&quot;JMSTopicSender&quot;)&#xA;                         acetsXml = gvyCmisUtil.customizeActionField(acetsXml,acetsAction)&#xA;                         jmsTopicSender.send(acetsXml);&#xA;                         msgPostingFlag = false;&#xA;                         println(&quot;HLR SENT TO GEMS=&quot;+acetsXml)&#xA;                     }else{ */&#xA;                    acetsXml = gvyCmisUtil.customizeActionField(acetsXml,acetsAction)&#xA;                    try{&#xA;                        gvyBaseClass.sendXml(acetsXml) //A12&#xA;                    }catch(Exception e){ //A10&#xA;                        String error = e;&#xA;                        //A22&#xA;                        if (error.contains(&quot;JMS&quot;) &amp;&amp; acetsXml != null){&#xA;                            def eventId = this.getFieldValues(xmlGvyString, &quot;msgType=&quot;);&#xA;                            println(&quot;Calling MatGetIntegrationError.createIntegrationError in &quot;+eventId+&quot; message&quot;);&#xA;                            String entity = &quot;Unit&quot;;&#xA;                            def errUnitId = this.getFieldValues(xmlGvyString, &quot;ctrNo=&quot;);&#xA;                            def errDesc = eventId+&quot; Failed for &quot;+errUnitId;&#xA;                            def inj = new GroovyInjectionBase();&#xA;                            inj.getGroovyClassInstance(&quot;MatGetIntegrationError&quot;).createIntegrationError(error,entity,errUnitId,eventId,errDesc,xmlGvyString);&#xA;                            HibernateApi.getInstance().flush();&#xA;                        }&#xA;                    }&#xA;                    // }//A14 Ends&#xA;                    //A21 - Ends        }&#xA;                }else if(eventType.startsWith(&quot;INGATE_RELEASE&quot;)){//A15&#xA;                    xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;locationStatus=&quot;,&quot;1&quot;)&#xA;                }&#xA;            }else if (eventType.equals(&quot;SET_EMPTY&quot;) || eventType.equals(&quot;SET_FULL&quot;)){&#xA;                msgPostingFlag = false;&#xA;                xmlGvyString = postFreightKindFld(xmlGvyString,unit,gvyCmisUtil,gvyEventUtil,gvyBaseClass)&#xA;            }else if (eventType.equals(&quot;UPU&quot;) ){&#xA;                xmlGvyString = getUpuFields(xmlGvyString,unit,gvyCmisUtil,gvyBaseClass,equiClass)&#xA;            }else if (eventType.equals(&quot;UPDATE_UNIT_NOTES&quot;) ){&#xA;                msgPostingFlag = false;&#xA;            }else if (eventType.equals(&quot;SHIPPER_REHANDLE&quot;)){&#xA;                xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dsc=&quot;,&quot;C&quot;)&#xA;            }else if(eventType.equals(&quot;SHIPPER_REHANDLE_CANCEL&quot;)){&#xA;                xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dsc=&quot;,&quot;null&quot;)&#xA;                xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dss=&quot;,&quot;null&quot;)&#xA;            }else if(eventType.equals(&quot;UNIT_YARD_MOVE&quot;) || eventType.equals(&quot;UNIT_POSITION_CORRECTION&quot;) || eventType.equals(&quot;UNIT_SHIFT_ON_CARRIER&quot;)){&#xA;                xmlGvyString = getLocationPositionFields(xmlGvyString,gvyBaseClass,unit,gvyCmisUtil)&#xA;                msgPostingFlag = false;&#xA;            }else if(eventType.equals(&quot;UNIT_CHECKDIGIT&quot;)){&#xA;                xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;lastAction=&quot;,&quot;FCD&quot;)&#xA;                xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;action=&quot;,&quot;FCD&quot;)&#xA;            }else if(eventType.equals(&quot;UNIT_DRAY_IN&quot;)){&#xA;                xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;lastAction=&quot;,&quot;EDT&quot;)&#xA;                xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;action=&quot;,&quot;EDT&quot;)&#xA;            } else if(eventType.equals(&quot;RESPOT&quot;)){&#xA;                def respot = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString10&quot;)&#xA;                println(&quot;RESPOT : &quot;+ respot);&#xA;                xmlGvyString = xmlGvyString.replace(&quot;action='null'&quot;,&quot;action='EDT'&quot;)&#xA;                xmlGvyString = xmlGvyString.replace(&quot;lastAction='null'&quot;,&quot;lastAction='EDT'&quot;)&#xA;                xmlGvyString = xmlGvyString.replace(&quot;cell='%'&quot;, &quot;cell='&quot;+respot+&quot;'&quot;)&#xA;&#xA;                println(xmlGvyString);&#xA;            }&#xA;&#xA;            //Skip Hold Default posting&#xA;            if (skipEventInList(eventType)){&#xA;                msgPostingFlag = false;&#xA;            }&#xA;&#xA;            if(msgPostingFlag)&#xA;            {&#xA;                //println(&quot;xmlGvyString ::&quot;+xmlGvyString)&#xA;&#xA;                try{&#xA;                    gvyBaseClass.sendXml(xmlGvyString) //A12&#xA;                }catch(Exception e){ //A10&#xA;                    String error = e;&#xA;                    //A22&#xA;                    if (error.contains(&quot;JMS&quot;) &amp;&amp; xmlGvyString != null){&#xA;                        def eventId = this.getFieldValues(xmlGvyString, &quot;msgType=&quot;);&#xA;                        println(&quot;Calling MatGetIntegrationError.createIntegrationError in &quot;+eventId+&quot; message&quot;);&#xA;                        String entity = &quot;Unit&quot;;&#xA;                        def errUnitId1 = this.getFieldValues(xmlGvyString, &quot;ctrNo=&quot;);&#xA;                        def errDesc = eventId+&quot; Failed for &quot;+errUnitId1;&#xA;                        def inj = new GroovyInjectionBase();&#xA;                        inj.getGroovyClassInstance(&quot;MatGetIntegrationError&quot;).createIntegrationError(error,entity,errUnitId1,eventId,errDesc,xmlGvyString);&#xA;                        HibernateApi.getInstance().flush();&#xA;                    }&#xA;                }&#xA;                //A12&#xA;                //gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,action)&#xA;            }&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return xmlGvyString&#xA;    }// processFieldChngCmisFeed&#xA;&#xA;    public String nonChangingFields()&#xA;    {&#xA;        String appendedNonChngFields = &quot;srv='%' dir='%' loc='%' truck='%' pmd='%' dPort='%' shipper='%' vesvoy='%' ds='%' dsc='%' temp='%' seal='%' cell='%' typeCode='%' owner='%' cWeight='%' retPort='%' hsf7='%' bookingNumber='%' arrDate='%' cneeCode='%' dischargePort='%' planDisp='%' locationStatus='%' locationCategory='%' locationRow='%' locationRun='%' locationTier='%' locationStallConfig='%' orientation='%' commodity='%' stowRestCode='%' tareWeight='%' tempMeasurementUnit='%' actualVessel='%' actualVoyage='%' leg='%' loadPort='%' hgt='%' strength='%' gateSeqNo='%' shipperPool='%' misc1='%' misc3='%'  hazImdg='%' hazUnNum='%' gateTruckId='%' gateTruckCmpyCd='%' gateTruckCmpyName='%' batNumber='%' turnTime='%' laneGateId='%' deptTruckCode='%' deptDport='%' deptVesVoy='%'  deptOutGatedDt='%' consigneePo='%' prevAvaildate='%' laneId='%' safetyExpiry='%' lastInspection='%' lastAnnual='%' mgp='%' chassisAlert='%' chassisNotes='%' chassisHold='%' overWideRight='%' overWideLeft='%' overHeight='%' overLongBack='%' overLongFront='%' hazF='%' odf='%'  chassisTareWeight='%' flex01='%' hazDesc='%' hazRegs='%' hazOpenCloseFlag='%' &quot;;&#xA;&#xA;        return appendedNonChngFields&#xA;    }&#xA;&#xA;    public String flagFields(Object unit, String eventType, Object gvyTxtMsgFmt)&#xA;    {&#xA;        def fieldValueAttr = ''&#xA;        try&#xA;        {&#xA;            //DMG_CODE&#xA;            def damageCode = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsDamageSeverity&quot;)&#xA;            damageCode = damageCode != null ? damageCode.getKey() : damageCode&#xA;            def dmgCodeFmt = damageCode.equals('MAJOR') ? 'H' : (damageCode.equals('MINOR') ? 'L' : '%')&#xA;            def damageCodeAttr = gvyTxtMsgFmt.doIt('damageCode',dmgCodeFmt)&#xA;&#xA;            //STOW FLAG&#xA;            def stowFlag = eventType.equals('REVIEW_FOR_STOW') ? 'Y' : '%'&#xA;            def stowFlagAttr = gvyTxtMsgFmt.doIt('stowFlag',stowFlag)&#xA;&#xA;            fieldValueAttr = damageCodeAttr+stowFlagAttr&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;&#xA;        return fieldValueAttr&#xA;    }//flag Fields Ends&#xA;&#xA;&#xA;    //OVER_DIMENSIONS ATTRIBUTES&#xA;    public void processOogFields(String xmlData, Object unit,Object gvyCmisUtil,Object event,Object gvyBaseClass)&#xA;    {&#xA;        def xmlGvyString = xmlData&#xA;        try&#xA;        {&#xA;            def overLongBack=gvyCmisUtil.convertCmToInch(unit.getFieldValue(&quot;unitOogBackCm&quot;))&#xA;            overLongBack = overLongBack != null ? overLongBack : 0&#xA;&#xA;            def overLongFront=gvyCmisUtil.convertCmToInch(unit.getFieldValue(&quot;unitOogFrontCm&quot;))&#xA;            overLongFront = overLongFront != null ? overLongFront : 0&#xA;&#xA;            def overWideLeft=gvyCmisUtil.convertCmToInch(unit.getFieldValue(&quot;unitOogLeftCm&quot;))&#xA;            overWideLeft = overWideLeft != null ? overWideLeft : 0&#xA;&#xA;            def overWideRight=gvyCmisUtil.convertCmToInch(unit.getFieldValue(&quot;unitOogRightCm&quot;))&#xA;            overWideRight = overWideRight != null ? overWideRight : 0&#xA;&#xA;            def overHeight=gvyCmisUtil.convertCmToInch(unit.getFieldValue(&quot;unitOogTopCm&quot;))&#xA;            overHeight = overHeight != null ? overHeight : 0&#xA;&#xA;            //ODF&#xA;            def odf = unit.getFieldValue(&quot;unitIsOog&quot;);&#xA;            odf = odf == true ? 'Y' : 'null'&#xA;&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;odf=&quot;,odf)&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;overLongBack=&quot;,&quot;&quot;+overLongBack)&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;overLongFront=&quot;,&quot;&quot;+overLongFront)&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;overWideLeft=&quot;,&quot;&quot;+overWideLeft)&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;overWideRight=&quot;,&quot;&quot;+overWideRight)&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;overHeight=&quot;,&quot;&quot;+overHeight)&#xA;&#xA;            def GvyOvrDimObj =gvyBaseClass.getGroovyClassInstance('GvyCmisEventOverDimension')&#xA;            xmlGvyString = GvyOvrDimObj.getUnitDimensionUpdate(xmlGvyString,event,unit)&#xA;            gvyBaseClass.sendXml(xmlGvyString)&#xA;            try{&#xA;                gvyBaseClass.sendXml(xmlGvyString) //A12&#xA;            }catch(Exception e){ //A10&#xA;                String error = e;&#xA;                //A22&#xA;                if (error.contains(&quot;JMS&quot;) &amp;&amp; xmlGvyString != null){&#xA;                    def eventId = this.getFieldValues(xmlGvyString, &quot;msgType=&quot;);&#xA;                    println(&quot;Calling MatGetIntegrationError.createIntegrationError in &quot;+eventId+&quot; message&quot;);&#xA;                    String entity = &quot;Unit&quot;;&#xA;                    def unitId = this.getFieldValues(xmlGvyString, &quot;ctrNo=&quot;);&#xA;                    def errDesc = eventId+&quot; Failed for &quot;+unitId;&#xA;                    def inj = new GroovyInjectionBase();&#xA;                    inj.getGroovyClassInstance(&quot;MatGetIntegrationError&quot;).createIntegrationError(error,entity,unitId,eventId,errDesc,xmlGvyString);&#xA;                    HibernateApi.getInstance().flush();&#xA;                }&#xA;            }&#xA;            //A12 - gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,&quot;EDT&quot;)&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;    public String processPremountEvent(String xmlData,Object unit,Object gvyCmisUtil)&#xA;    {&#xA;        def xmlGvyString = xmlData&#xA;        try&#xA;        {&#xA;            def pmd = null;&#xA;            def chasType =unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString02&quot;)&#xA;            if(chasType != null){&#xA;                pmd = chasType;&#xA;            }else{&#xA;                def _pmdDt =unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate01&quot;)&#xA;                def strpmd = _pmdDt != null ? (''+_pmdDt) : ''&#xA;                pmd =  strpmd.length() &gt; 10 ? strpmd.substring(8,10) : strpmd&#xA;            }&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;pmd=&quot;,pmd)&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return xmlGvyString&#xA;    }//Premount Ends&#xA;&#xA;    public boolean postHoldReleaseAcetsMsg(Object unit,Object gvyBaseClass,Object gvyCmisUtil)&#xA;    {&#xA;        boolean postAcetsMsg = false&#xA;        try&#xA;        {&#xA;            //-- A1 Starts&#xA;            //def lkpLocType=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;            //lkpLocType = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;&#xA;            //def lkpCarrierId=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocId&quot;)&#xA;            //lkpCarrierId = lkpCarrierId != null ? lkpCarrierId : ''&#xA;&#xA;            //def transitState=unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;            //transitState = transitState != null ? transitState.getKey() : ''&#xA;&#xA;            //def category=unit.getFieldValue(&quot;unitCategory&quot;)&#xA;            //category = category != null ? category.getKey() : ''&#xA;&#xA;            //def dischPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;            //dischPort = dischPort != null ? dischPort : ''&#xA;&#xA;            def gvyEquiObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEquiDetail&quot;);&#xA;            def srv = gvyEquiObj.getSrv(unit,gvyBaseClass)&#xA;            //def gvyPositionObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisPositionDetail&quot;);&#xA;            //def locationStatus = gvyPositionObj.getLocationStatus(lkpLocType,lkpCarrierId,transitState,gvyCmisUtil,category,dischPort)&#xA;            //-- A1 Ends&#xA;            if(srv.equals('MAT')){&#xA;                postAcetsMsg = true&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return  postAcetsMsg&#xA;    }&#xA;&#xA;    //Method For Event SET_EMPTY / SET_FULL&#xA;    public String postFreightKindFld(String xmlData,Object unit,Object gvyCmisUtil,Object gvyEventUtil,Object gvyBaseClass)&#xA;    {&#xA;        def xmlGvyString = xmlData&#xA;        try&#xA;        {&#xA;            def freightkind=unit.getFieldValue(&quot;unitFreightKind&quot;)&#xA;            freightkind = freightkind != null ? freightkind.getKey() : ''&#xA;&#xA;            def category=unit.getFieldValue(&quot;unitCategory&quot;)&#xA;            category = category != null ? category.getKey() : ''&#xA;&#xA;            def transitState=unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;            transitState = transitState != null ? transitState.getKey() : ''&#xA;&#xA;            def expGateBkgNbr = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;)&#xA;&#xA;            def lkpLocType=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;            lkpLocType = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;&#xA;            def gdsBlNbr = unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;)&#xA;&#xA;            //ORIENTATION&#xA;            def orientation = freightkind.equals('MTY') ? 'E' : (freightkind.length() &gt; 1 ? 'F' : '')&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;orientation=&quot;,orientation)&#xA;&#xA;            //MISC3&#xA;            def gvyFlexObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisFlexFieldDetail&quot;)&#xA;            def misc3 = gvyFlexObj.getMisc3(unit, gvyEventUtil)&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;misc3=&quot;,misc3)&#xA;&#xA;            //LAST FREE DAY&#xA;            def lastfreeDay = unit.getFieldValue(&quot;unitActiveUfv.ufvCalculatedLastFreeDay&quot;);&#xA;            if (lastfreeDay != null &amp;&amp; lastfreeDay.indexOf(&quot;no&quot;) == -1){&#xA;                lastfreeDay = gvyEventUtil.formatDate(lastfreeDay)&#xA;                lastfreeDay =  gvyEventUtil.convertToJulianDate(lastfreeDay)&#xA;            }else if (lastfreeDay != null &amp;&amp; lastfreeDay.indexOf(&quot;no&quot;) != -1) {&#xA;                lastfreeDay = ''&#xA;            }&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;locationCategory=&quot;,lastfreeDay)&#xA;&#xA;            //DIR&#xA;            def gvyRtgObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisRtgProcessDetail&quot;)&#xA;            def dir =  gvyRtgObj.getDir(category,transitState,freightkind,expGateBkgNbr,lkpLocType,gdsBlNbr)&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dir=&quot;,dir)&#xA;&#xA;            //DPORT&#xA;            def dischargePort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dPort=&quot;,dischargePort)&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return xmlGvyString&#xA;    }&#xA;&#xA;    //Method gets Messages for UPU MSG TYPE&#xA;    public String getUpuFields(String xmlData, Object unit,Object gvyCmisUtil,Object gvyBaseClass,String equiClass)&#xA;    {&#xA;        def xmlGvyString = xmlData&#xA;        def equiType = ''&#xA;        try&#xA;        {&#xA;            //Type Code&#xA;            equiType=unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;)&#xA;            if(!(equiClass.equals('CHASSIS') || equiClass.equals('ACCESSORY'))){&#xA;                def eqHgt=unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypNominalHeight&quot;)&#xA;                eqHgt = eqHgt != null ? eqHgt.getKey() : ''&#xA;                def equiMaterial=unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqMaterial&quot;)&#xA;                equiMaterial = equiMaterial!= null ? equiMaterial.getKey() : ''&#xA;                def gvyEquiObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEquiDetail&quot;);&#xA;                equiType = gvyEquiObj.TypeCodeProcessing(equiType,eqHgt, equiMaterial)&#xA;            }&#xA;&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;typeCode=&quot;,equiType)&#xA;            //Line Operator&#xA;            def lineOperator=unit.getFieldValue(&quot;unitLineOperator.bzuId&quot;)&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;chassisHold=&quot;,lineOperator)&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;locationRow=&quot;,lineOperator)&#xA;&#xA;            //OWNER&#xA;            def equiOwner =unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOwner.bzuId&quot;)&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;owner=&quot;,equiOwner)&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return xmlGvyString&#xA;    }&#xA;&#xA;    //Method Sets the LOC and cell for Events UNIT_YARD_MOVE,UNIT_POSITION_CORRECTION,UNIT_SHIFT_ON_CARRIER&#xA;    public String getLocationPositionFields(String xmlData, Object gvyBaseClass,Object unit, Object gvyCmisUtil)&#xA;    {&#xA;        def xmlGvyString = xmlData&#xA;        try&#xA;        {&#xA;            def transitState=unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;            transitState = transitState != null ? transitState.getKey() : ''&#xA;&#xA;            def lkpSlot = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;            lkpSlot = lkpSlot!= null ? lkpSlot : ''&#xA;            def lkpSlotValue = lkpSlot.indexOf(&quot;.&quot;)== -1 ? lkpSlot : lkpSlot.substring(0,lkpSlot.indexOf(&quot;.&quot;));&#xA;&#xA;            def lkpLocType = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;            lkpLocType = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;&#xA;            def lkpCarrierId=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocId&quot;)&#xA;            lkpCarrierId = lkpCarrierId != null ? lkpCarrierId : ''&#xA;&#xA;            //LOC&#xA;            def gvyPositionObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisPositionDetail&quot;);&#xA;            def loc = gvyPositionObj.getLoc(gvyCmisUtil,lkpCarrierId, lkpLocType,lkpSlotValue,transitState)&#xA;            loc = loc.length() == 0  ? &quot;null&quot; : loc&#xA;&#xA;            //CELL&#xA;            def cell = lkpLocType.equals('VESSEL') ? lkpSlotValue : &quot;null&quot;&#xA;            cell = gvyCmisUtil.trimLength(cell, 7);&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;loc=&quot;,loc)&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;cell=&quot;,cell)&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return xmlGvyString&#xA;    }&#xA;&#xA;    public boolean skipEventInList(String eventType){&#xA;        ArrayList list = new ArrayList();&#xA;        list.add('DVI_HOLD');&#xA;        list.add('DVI_RELEASE');&#xA;        list.add('AGN_HOLD');&#xA;        list.add('AGN_RELEASE');&#xA;        list.add('USA_HOLD'); //A8&#xA;        list.add('USA_RELEASE');&#xA;        list.add('ITN_HOLD');&#xA;        list.add('ITN_RELEASE');&#xA;        list.add('UNIT_HAZARDS_INSERT');&#xA;        list.add('UNIT_HAZARDS_UPDATE');&#xA;        list.add('UNIT_HAZARDS_DELETE');&#xA;        list.add('UPU'); //A13&#xA;&#xA;        def skipBln = list.contains(eventType)&#xA;        return skipBln&#xA;    }&#xA;&#xA;}" />
<digital-asset id="GvyRenumberUnit" short-description="GvyRenumberUnit" is-pre-deployed="N" groovy-code="/*&#xA;* SrNo  Doer Date      Change&#xA;* A1    GR   10/26/10  Added Newves to the DepartAndRenumber (cmis:keyDup process)&#xA;*/&#xA;import java.util.StringTokenizer;&#xA;import java.util.NoSuchElementException;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.business.reference.Chassis&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.api.UnitManager&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;&#xA;/**&#xA;*&#xA;* Patch Matson N4 Groovy for 2.1/2.6 upgrade&#xA;*&#xA;* Author: Peter Seiler&#xA;* Date: 4 July 2014&#xA;* JIRA: ARGO-59892&#xA;* SFDC: None&#xA;* Called from: Unkown&#xA;* &#xA;*/&#xA;&#xA;public class GvyRenumberUnit {&#xA;&#xA;    public void nltDepartAndRenumber(Object unit, String note) {&#xA;        def transitState=unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;        transitState = transitState != null ? transitState.getKey() : ''&#xA;&#xA;&#xA;        if(note.startsWith(&quot;NIS Load Transaction&quot;) || note.startsWith(&quot;NewVes&quot;)) {&#xA;            // Handle NLT &amp; Newves&#xA;            GroovyInjectionBase injBase = new GroovyInjectionBase()&#xA;            def gvyNLTObj = injBase.getGroovyClassInstance(&quot;GvyInjNLTProcess&quot;)&#xA;            gvyNLTObj.processNLT(unit)&#xA;        }&#xA;        renumber(note);&#xA;    }&#xA;&#xA;    /**&#xA;     * Process unit renumbers&#xA;     * @param args&#xA;     */&#xA;    public void renumber(String note) {&#xA;        try {&#xA;            println(note);&#xA;            StringTokenizer renum = new StringTokenizer(note,&quot;Renum&quot;);&#xA;            //renum.nextToken();&#xA;            while(renum.hasMoreTokens()) {&#xA;                String token = renum.nextToken();&#xA;                if(token.indexOf(&quot;[&quot;) == -1) continue;&#xA;                token = token.replaceAll(&quot;.*\\[&quot;, &quot;&quot;);&#xA;                token = token.replaceAll(&quot;\\].*&quot;, &quot;&quot;);&#xA;                String[] eqList = token.split(&quot;\\|&quot;);&#xA;                if(eqList.length == 2) {&#xA;                    System.out.println(eqList[0] + &quot; &quot;+eqList[1]);&#xA;&#xA;                // Peter Seiler: renamed call to internal method to be different from public method&#xA;&#xA;                    renumberList(eqList);&#xA;                }&#xA;&#xA;            }&#xA;        }  catch (NoSuchElementException e) {}&#xA;&#xA;    }&#xA;&#xA;    // Peter Seiler: Renamed internal method to have different name from public one.&#xA;&#xA;    private boolean  renumberList (String[] eqList)  {&#xA;        Equipment eq =  Equipment.findEquipment(eqList[0])&#xA;        //     Chassis eq =  Chassis.findChassis(eqList[0])&#xA;        println(&quot;eq=&quot;+eq);&#xA;        if(eq == null) return false;&#xA;        UnitFinder unitFinder = (UnitFinder) Roastery.getBean(UnitFinder.BEAN_ID)&#xA;&#xA;        UnitEquipment unitEquipment = unitFinder.findActiveUeUsingEqInAnyRole(null, ContextHelper.getThreadComplex(), eq)&#xA;        if(unitEquipment == null) {&#xA;&#xA;            def list = unitFinder.findAllUeUsingEqInAnyRole(ContextHelper.getThreadComplex(), eq, null);&#xA;            if(list != null)  unitEquipment =  (UnitEquipment)list.get(0);&#xA;            else return false;&#xA;        }&#xA;        UnitManager unitManager = (UnitManager) Roastery.getBean(UnitManager.BEAN_ID)&#xA;        println(eqList[1]);&#xA;        unitManager.renumberUnitEquipment(unitEquipment, eqList[1])&#xA;        return true;&#xA;    }&#xA;&#xA;}&#xA;" />
<digital-asset id="OutgateTruckVisitOutValidations" short-description="Truck Visit Out at Outgate Stage validations" is-pre-deployed="N" groovy-code="/*&#xA; *&#xA; * Groovy code called at OG truck visit out.&#xA; *&#xA; * All truck visit out at OG validations must be inside this plugin.&#xA; * Specifically inside the if statement below that checks for lane.&#xA; * If lane is null, we are at security outgate and we should not run&#xA; * any validations!&#xA; *&#xA; * Change History&#xA; * 1: cnb 4/13/09 Moved all OG truck visit out validations to a single plugin to simplify the gate config.&#xA; */&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;&#xA;public class OutgateTruckVisitOutValidations extends GroovyInjectionBase {&#xA;   // Outgate Truck Visit Out&#xA;   public void execute(inDao, api) {&#xA;      api.log(&quot;Truck Visit Out at Outgate Stage validations...&quot;)&#xA;&#xA;      //If OG lane is null, then we are at the security outgate lane. Do not process the validations.&#xA;      api.log(&quot;OG Check the Lane: &quot; + inDao.getTv().getTvdtlsExitLane())&#xA;&#xA;      if (inDao != null &amp;&amp; inDao.getTv() != null &amp;&amp; inDao.getTv().getTvdtlsExitLane() != null) {&#xA;         /*&#xA;          * READ THIS!!!!&#xA;          *&#xA;          * Add new validations here!!!!!&#xA;          * You really want your validations inside the above check.&#xA;          */&#xA;&#xA;         // EIT Validation, Can't fix it here.&#xA;         //  api.getGroovyClassInstance(&quot;EITCheck&quot;).execute(inDao, api);&#xA;        &#xA;&#xA;         // NOW Validation&#xA;         try {&#xA;             api.getGroovyClassInstance(&quot;NOWOutgateProcessor&quot;).execute(inDao, api, false);&#xA;         } catch (Exception e) {&#xA;             api.log(&quot;Exception in NOWProcessor Outgate , verify=false: &quot; + e)&#xA;         }&#xA;      } else {&#xA;         api.log(&quot;Something was null, so we are assuming this is the security outgate and we did not process any validations on the TV OUT at OUTGATE&quot;)&#xA;         try { api.log(&quot;inDao == null? &quot; + inDao) } catch (Exception ignore) {}&#xA;         try { api.log(&quot;inDao.getTv() == null? &quot; + inDao.getTv()) } catch (Exception ignore) {}&#xA;         try { api.log(&quot;inDao.getTv().getTvdtlsExitLane() == null? &quot; + inDao.getTv().getTvdtlsExitLane()) } catch (Exception ignore) {}&#xA;         api.log(&quot;If the third one {lane} was null, then it was security outgate and we are OK to have skipped validations.&quot;)&#xA;      } &#xA;   }&#xA;}" />
<digital-asset id="CustomCreateOutGateDocument" short-description="CustomCreateOutGateDocument" is-pre-deployed="N" groovy-code="/*&#xA;&#xA;Groovy code called from the out gate to print an extra HAZARD (DCM) document if&#xA;the group is YB or XFER to WO for deliver import.&#xA;&#xA;1/28/9: Meeting with Joce and Chris Scott. Remove extra HAZ doc for WO. Only need the original one.&#xA;10/19/2009 GR   unitNbr Null Check&#xA;03/11/2010 GR   Navis Code Optimization&#xA;&#xA;*/&#xA;/*&#xA;* SrNo  Doer  Date      Change&#xA;* A1    Gopal 10/27/11  Workaround to remove Confirm Arrival &#xA;                        Create Ticket using groovy code till Bug Fix&#xA;*/&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.road.business.adaptor.document.CreateDocument&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.road.business.atoms.TranSubTypeEnum&#xA;import com.navis.road.business.model.TruckTransaction;&#xA;&#xA;public class CustomCreateOutGateDocument extends GroovyInjectionBase&#xA;{&#xA;    public void execute(inDao)&#xA;    {&#xA;         def docTypeId = &quot;TURN TIME&quot;&#xA;         inDao.put(&quot;docTypeId&quot;, docTypeId)&#xA;         (new CreateDocument()).execute(inDao)&#xA;    }&#xA;public void setCtrNbr(dao)&#xA;  {&#xA;       TruckTransaction tran = dao.tran&#xA;       tran.setTranCtrNbrAssigned(tran.tranCtrNbr)&#xA;   }    &#xA;}" />
<digital-asset id="GvyCmisChassisAttributes" short-description="GvyCmisChassisAttributes" is-pre-deployed="N" groovy-code="public class GvyCmisChassisAttributes{&#xA;&#xA;   //Method gets the chassis attributes &#xA;   public String getChassisAttributes(Object gvyTxtMsgFmt, Object unit, String unitClass,String eventType)&#xA;   {&#xA;       def chassisAttr= ''&#xA;      try&#xA;     {&#xA;       //Saftey Expiry&#xA;       def safetyExpiry = '%'&#xA;       def safetyExpAttr = gvyTxtMsgFmt.doIt('safetyExpiry',safetyExpiry)&#xA;&#xA;       //Last Inspection&#xA;       def lastInspection = '%'&#xA;       def lastInspectAttr = gvyTxtMsgFmt.doIt('lastInspection',lastInspection)&#xA;&#xA;       //Last Annual&#xA;       def lastAnnual = '%'&#xA;       def lastAnnualAttr = gvyTxtMsgFmt.doIt('lastAnnual',lastAnnual) &#xA;      &#xA;       //Chassis Alert&#xA;       def chassisAlert = '%'&#xA;       def chassisAlertAttr = gvyTxtMsgFmt.doIt('chassisAlert',chassisAlert)    &#xA;&#xA;       //MGP&#xA;       def mgp = ''&#xA;       def mgpAttr = gvyTxtMsgFmt.doIt('mgp',mgp)    &#xA;&#xA;       //CHASSIS HOLD&#xA;       def chassisHold =  unit.getFieldValue(&quot;unitLineOperator.bzuId&quot;)&#xA;       def chassisHoldAttr = gvyTxtMsgFmt.doIt('chassisHold',chassisHold)    &#xA;&#xA;      //CHASSIS NOTES&#xA;      def chassisNotes = '%'&#xA;      def chassisNotesAttr = gvyTxtMsgFmt.doIt('chassisNotes',chassisNotes)    &#xA;   &#xA;      //Chassis Tare weight&#xA;     def chassisweight = ''&#xA;      def chassTareWeightAttr = ''&#xA;     if(unitClass.equals('CHASSIS')){&#xA;          chassisweight = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqTareWeightKg&quot;)&#xA;     }else{&#xA;          chassisweight = unit.getFieldValue(&quot;unitCarriageUe.ueEquipment.eqTareWeightKg&quot;)&#xA;      }&#xA;      def chassisTareWeight = chassisweight != null ? Math.round(chassisweight * 2.20462262 ) : ''&#xA;       if(eventType.equals('UNIT_DISMOUNT')) {        &#xA;           chassTareWeightAttr = gvyTxtMsgFmt.doIt('chassTareWeight','%') &#xA;       }else{&#xA;         chassTareWeightAttr = gvyTxtMsgFmt.doIt('chassTareWeight',chassisTareWeight) &#xA;       }&#xA; &#xA; &#xA;      chassisAttr = safetyExpAttr+lastInspectAttr+lastAnnualAttr+chassisAlertAttr+mgpAttr+chassisHoldAttr+chassisNotesAttr+chassTareWeightAttr&#xA;  &#xA;      //println('chassisAttr ::'+chassisAttr) &#x9;  &#xA;     }catch(Exception e){&#xA;        e.printStackTrace()&#xA;     } &#xA;   &#xA;      return  chassisAttr;   &#xA;&#xA;   }&#xA; &#xA;&#xA;}" />
<digital-asset id="CustomPrintHazardDocument" short-description="CustomPrintHazardDocument" is-pre-deployed="N" groovy-code="/*&#xA;&#xA;Groovy code called from the out gate to print an extra HAZARD (DCM) document if&#xA;the group is YB or XFER to WO for deliver import.&#xA;&#xA;1/28/9: Meeting with Joce and Chris Scott. Remove extra HAZ doc for WO. Only need the original one.&#xA;10/19/2009 GR   unitNbr Null Check&#xA;03/11/2010 GR   Navis Code Optimization&#xA;&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.road.business.adaptor.document.PrintDocument&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.road.business.atoms.TranSubTypeEnum&#xA;import com.navis.road.business.model.TruckTransaction&#xA;&#xA;public class CustomPrintHazardDocument extends GroovyInjectionBase&#xA;{ &#xA;    public void execute(inDao, api)&#xA;    {&#xA;&#x9;def transactions = (Set&lt;TruckTransaction&gt;) inDao.tv.tvdtlsTruckTrans&#xA;&#xA;&#x9;for (transaction in transactions) {&#xA;&#x9;    if (transaction.tranSubType in [TranSubTypeEnum.DE]) {&#x9;&#xA;&#x9;&#x9;def unit = transaction.getTranUnit()&#xA;&#x9;&#xA;&#x9;&#x9;// Filter for group == YB   &#xA;                if (unit!=null &amp;&amp; unit.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;) in ['YB']) {&#xA;                    // Set the doc type id&#xA;                    def docTypeId = &quot;HAZARD&quot;&#xA;                    inDao.put(&quot;docTypeId&quot;, docTypeId)&#xA;&#xA;                    // Print the document&#xA;                    (new PrintDocument()).execute(inDao)&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;&#xA;&#xA;" />
<digital-asset id="GvyObsoleteTruckingCompanies" short-description="GvyObsoleteTruckingCompanies" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.road.business.model.TruckingCompany;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.argo.business.atoms.BizRoleEnum;&#xA;import com.navis.argo.ArgoRefField;&#xA;import com.navis.security.business.user.BaseUser&#xA;import com.navis.framework.business.atoms.LifeCycleStateEnum;&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;&#xA;&#xA;public class GvyObsoleteTruckingCompanies extends GroovyInjectionBase{&#xA;&#xA;   public String execute(Map inParameters) {&#xA;&#xA;&#x9;   try{&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(&quot;TruckingCompany&quot;);&#xA;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_ROLE, BizRoleEnum.HAULIER));&#xA;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_LIFE_CYCLE_STATE, LifeCycleStateEnum.ACTIVE));&#xA;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.isNull(ArgoRefField.BZU_PER_UNIT_GUARANTEE_LIMIT));&#xA;&#xA;        def truckList =  HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;        println(&quot;NonHonTuckerList=&quot;+(truckList != null ? truckList.size() : &quot;0&quot;))&#xA; &#x9;    for(atruck in truckList) {&#xA;&#x9;&#x9;  println(&quot;ObsoleteTruckCmpy=&quot;+atruck.getBzuId());&#xA;          atruck.setFieldValue(ArgoRefField.BZU_LIFE_CYCLE_STATE, LifeCycleStateEnum.OBSOLETE);&#xA;        }&#xA;&#x9;   }catch(Exception e){&#xA;&#x9;&#x9;   e.printStackTrace();&#xA;       }&#xA;    }&#xA;}" />
<digital-asset id="TestGvyPlugin" short-description="TestGvyPlugin" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import com.navis.services.business.event.*&#xA;import com.navis.framework.persistence.BaseFinder&#xA;&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.services.business.event.EventFieldChange&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;import com.navis.framework.util.DateUtil;&#xA;import com.navis.argo.business.atoms.EquipClassEnum;&#xA;import com.navis.inventory.business.units.Routing&#xA;&#xA;import com.navis.security.business.user.BaseUser&#xA;&#xA;public class TestGvyPlugin&#xA;{&#xA;&#xA;  public boolean getCsrUserRole(String userId)&#xA;{&#xA;  try&#xA;  {&#xA;    BaseUser baseUser = new BaseUser()&#xA;    baseUser = baseUser.findBaseUser(userId)&#xA;    //Set groupList = baseUser != null ? baseUser.getBuserGroupList() : null&#xA;    def groupArr = baseUser != null ? baseUser.getUserRoleNames() : null&#xA;    println('groupArr ::'+groupArr)&#xA;    for(aGroup in groupArr){&#xA;         println(&quot;User Group Sucessfully :&quot;+aGroup)&#xA;      if(aGroup.equals('No Email')){&#xA;         println(&quot;Fetched User Group Sucessfully :&quot;+aGroup)&#xA;         return true&#xA;     }&#xA;    }&#xA;  }catch(Exception e){&#xA;     e.printStackTrace()&#xA;  }&#xA;  return false&#xA;}&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;   &#xA; public void postCmisFeed(Object metaId,Object event,Object api)&#xA;{&#xA;  def unit = event.getEntity()&#xA;  def evntObj  =   event.getEvent()&#xA;&#xA;  def gvyTxtMsgFmt = api.getGroovyClassInstance(&quot;GvyCmisTxtMsgFormatter&quot;);&#xA;  def actionDetail = api.getGroovyClassInstance(&quot;GvyCmisActionDetail&quot;);&#xA;  def actionDetailAttr =actionDetail.doIt(gvyTxtMsgFmt, evntObj, api ,unit);&#xA;&#xA;  String eventType =  evntObj.getEventTypeId() &#xA;  def eventTypeAttr = gvyTxtMsgFmt.doIt('msgType',eventType)&#xA;&#xA;  StringBuffer strBuff = new StringBuffer();&#xA;  def tempValue;&#xA;&#xA;  for(aField in metaId)&#xA;  {&#xA;    tempValue = event.getProperty(aField) &#xA;    strBuff = strBuff.append(gvyTxtMsgFmt.doIt(aField,tempValue)+' ')  &#xA;  }&#xA;   &#xA;   println(&quot;strBuff ::&quot;+strBuff) &#xA;   def groovyXml = gvyTxtMsgFmt.createGroovyXml(eventTypeAttr+' '+strBuff+' '+actionDetailAttr)&#xA;   println(&quot;groovyXml ::&quot;+groovyXml)  &#xA;&#xA; }&#xA;&#xA;  public void getDate(Object event ,Object api)&#xA;  {&#xA;     def unit = event.getEntity()&#xA;     java.util.Date date = new java.util.Date()&#xA;     def gvyEvntObj = api.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;     def zone =  unit.getUnitComplex().getTimeZone();&#xA;    def fmtDate =  gvyEvntObj.formatDate(date, zone)&#xA;    def fmtTime = gvyEvntObj.formatTime(date,zone)&#xA;    println(&quot;fmtDate ::&quot;+fmtDate+&quot;     fmtTime::&quot;+fmtTime)&#xA;    &#xA;  }&#xA;  &#xA;  public void getData()&#xA; {&#xA;    ArrayList activeUnits = new ArrayList()&#xA;   try&#xA;   {&#xA;       BaseFinder baseFinder = new BaseFinder()&#xA;       List unitList = baseFinder.findAll(&quot;Unit&quot;)&#xA;      println(&quot;unit List ::-------------&quot;+unitList.size())&#xA;    &#xA;      if(unitList != null) {&#xA;         Iterator iter = unitList.iterator();&#xA;         while(iter.hasNext()) {&#xA;             def unit = iter.next();&#xA;             if(unit.getFieldValue(&quot;unitVisitState&quot;).equals(&#xA;                 com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE) &amp;&amp; unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;).equals(com.navis.argo.business.atoms.EquipClassEnum.CONTAINER)) {&#xA;                 activeUnits.add(unit)&#xA;             }//IF&#xA;          } //While&#xA;       }//outer If&#xA;     println(&quot;activeUnits ::-------------&quot;+activeUnits.size())&#xA;    //  List unitFacilityList = baseFinder.findAll(&quot;UnitFacilityVisit&quot;)&#xA;    //  println(&quot;unitFacilityList  ::-------------&quot;+unitFacilityList.size())&#xA;    }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    }&#xA;&#xA; }//Method ends&#xA;&#xA;&#xA;  public String getPreviousUnitHolds(String eventTypeId,Object unit,Object gvyBaseClass)&#xA; {&#xA;    def prevUnitHolds = &quot;&quot;&#xA;    &#xA;   try&#xA;   {&#xA;         def eventId = eventTypeId.endsWith(&quot;_HOLD&quot;) || eventTypeId.endsWith(&quot;_RELEASE&quot;) ? eventTypeId.substring(0,eventTypeId.indexOf(&quot;_&quot;)) : &quot;&quot;   &#xA;    def holdslist = [&quot;BND&quot;,&quot;CUS&quot;,&quot;CC&quot;,&quot;HP&quot;,&quot;ON&quot;,&quot;INB&quot;,&quot;AG&quot;,&quot;XT&quot;]&#xA;&#xA;     def gvyCommentObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisCargoStatusUtil&quot;)&#xA;     def activeUnitHldList = gvyCommentObj.getUnitActiveHolds(unit) &#xA;&#xA;     for(Id in holdslist){&#xA;        if(eventTypeId.endsWith(&quot;_HOLD&quot;) &amp;&amp; eventId.equals(Id)){&#xA;           prevUnitHolds = activeUnitHldList.replace(eventId,&quot;&quot;)&#xA;           println(&quot;After Pulling out the Hold : &quot;+ prevUnitHolds) &#xA;        }else if(eventTypeId.endsWith(&quot;_RELEASE&quot;) &amp;&amp; eventId.equals(Id)){&#xA;           prevUnitHolds = activeUnitHldList+&quot; &quot;+eventId&#xA;           println(&quot;Appending Hold : &quot;+ prevUnitHolds) &#xA;        } else{&#xA;          prevUnitHolds = activeUnitHldList&#xA;         println(&quot;Passing the Original Hold Value : &quot;+ prevUnitHolds) &#xA;        }&#xA;     }//For Ends&#xA;  println(&quot;eventId : &quot;+eventId+&quot;   activeUnitHldList::&quot;+activeUnitHldList )&#xA;  &#xA;   }catch(Exception e){&#xA;      e.printStackTrace()&#x9;&#x9;  &#xA;   }&#xA;   return prevUnitHolds&#xA; }&#xA;&#xA; &#xA; &#xA;&#xA; }//Class Ends&#xA;   &#xA;   &#xA;   &#xA;  " />
<digital-asset id="GvyInjOffLease" short-description="OFF_LEASE Process" is-pre-deployed="N" groovy-code="/*&#xA;**********************************************************************&#xA;* Srno   Date&#x9;             Changer&#x9; Change Description&#xA;* A1     02/16/09       Glenn Raposo&#x9; Added Method for OffLease unAssign&#xA;**********************************************************************&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.argo.business.api.ServicesManager;&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.services.business.rules.MockGuardian;&#xA;import com.navis.argo.business.api.Guardian;&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.argo.ArgoRefField;&#xA;import com.navis.services.ServicesField;&#xA;import com.navis.services.business.rules.Flag;&#xA;import com.navis.services.business.rules.FlagType&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;&#xA; class GvyInjOffLease {&#xA;   &#xA;   public String applyHold( Object unit, String note) {&#xA;      def servicesMgr = (ServicesManager)Roastery.getBean(&quot;servicesManager&quot;);&#xA;   &#xA;    //applyHold(String s, LogicalEntity logicalentity, String s1, String s2, boolean flag)&#xA;    servicesMgr.applyHold( &quot;INGATE&quot;, unit, note, &quot;null&quot;, true);&#xA;   }&#xA;&#xA;    public String releaseHold( Object unit, String note) {&#xA;      def servicesMgr = (ServicesManager)Roastery.getBean(&quot;servicesManager&quot;);&#xA;     // servicesMgr.applyGuardedPermission( &quot;INGATE&quot;, unit, null, null, note);&#xA;      deleteFlagType(&quot;INGATE&quot;,unit) &#xA;    }&#xA;&#xA;&#xA;   public void deleteFlagType(String inFlagId, Object inLogicalEntity) &#xA;  {&#xA;    FlagType flagType = FlagType.findFlagType(inFlagId);&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(&quot;Flag&quot;).addDqPredicate(PredicateFactory.eq(ServicesField.FLAG_FLAG_TYPE, flagType.getFlgtypGkey())).addDqPredicate(PredicateFactory.eq(ServicesField.FLAG_APPLIED_TO_PRIMARY_KEY, inLogicalEntity.getPrimaryKey()))&#xA;    List flags = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;    for( i in flags) {&#xA;      Flag flag = (Flag) i;&#xA;      println(&quot;FLAG ----------------&quot;+flag)&#xA;      ArgoUtils.carefulDelete(flag);&#xA;    }&#xA;&#xA; }  &#xA;&#xA; &#xA;}&#xA;&#xA;&#xA;&#xA;&#xA;" />
<digital-asset id="GvyDrayInPodCheck" short-description="GvyDrayInPodCheck" is-pre-deployed="N" groovy-code="import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import com.navis.framework.util.internationalization.PropertyKey&#xA;import com.navis.framework.util.internationalization.PropertyKeyFactory&#xA;import com.navis.framework.util.message.MessageLevel&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;&#xA;&#xA;public class GvyDrayInPodCheck{&#xA;&#xA;  public void execute(TransactionAndVisitHolder dao, api){&#xA;   try{&#xA;       TruckTransaction tran = dao.tran&#xA;       def dest = tran.tranDestination&#xA;       def msg = [dest];&#xA;        //added 'ANK','DUT','KDK', todo remove other ports&#xA;       def drayInPorts = ['ANK','DUT','KDK','KAH','HIL','KHI','NAW','LNI','MOL','HON','GUM','SHA','NGB','XMN','SEA','OAK','LAX']&#xA;       if(drayInPorts.contains(dest)){&#xA;          RoutingPoint routingPoint = new RoutingPoint()&#xA;          tran.tranDischargePoint1 = routingPoint.findRoutingPoint(dest)&#xA;       }else{&#xA;        PropertyKey INVALID_DEST = PropertyKeyFactory.valueOf(&quot;gate.invalid.dest&quot;);&#xA;        RoadBizUtil.appendMessage(MessageLevel.SEVERE,INVALID_DEST,msg);&#xA;      }&#xA;   }catch(Exception e){&#xA;       def msg = [&quot; Exception&quot;];&#xA;       PropertyKey INVALID_DEST = PropertyKeyFactory.valueOf(&quot;gate.invalid.dest&quot;);&#xA;       RoadBizUtil.appendMessage(MessageLevel.SEVERE,INVALID_DEST,msg);&#xA;       e.printStackTrace()&#xA;    }&#xA;&#xA; }//Method Ends&#xA;&#xA;}//Class Ends" />
<digital-asset id="CreateInYardChassis" short-description="CreateInYardChassis" is-pre-deployed="N" groovy-code="import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.reference.Chassis&#xA;import com.navis.argo.business.model.LocPosition;&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.api.UnitManager;&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.atoms.EqUnitRoleEnum&#xA;/**&#xA; * detaches the chassis from any active units and creates a new in yard chassis unit ready for delivery&#xA; */&#xA;&#xA;public class CreateInYardChassis {&#xA;&#xA;&#xA;   public static String BEAN_ID = &quot;createInYardChassis&quot;;&#xA;&#xA;    public void execute(TransactionAndVisitHolder dao, api) {&#xA;        TruckTransaction tran = dao.tran;&#xA;        String chsNbr = tran.tranChsNbrAssigned;&#xA;        Chassis ch = Chassis.findChassis(chsNbr);&#xA;&#xA;        if (!ch)&#xA;            return;&#xA;&#xA;        UnitFinder unitFinder = (UnitFinder) Roastery.getBean(UnitFinder.BEAN_ID);&#xA;        UnitEquipment unitEq = unitFinder.findActiveUeUsingEqInAnyRole(null, ContextHelper.getThreadComplex(), ch);&#xA;        UnitManager unitMgr = (UnitManager) Roastery.getBean(UnitManager.BEAN_ID);&#xA;&#xA;        Unit unit;&#xA;        UnitFacilityVisit ufv;&#xA;&#xA;        if (unitEq != null) {&#xA;            // find the unit for bare chassis or the container with this chassis&#xA;            unit = unitEq.ueUnit&#xA;            ufv = unit.getUnitActiveUfvNowActive();&#xA;            if (ufv == null)&#xA;                  return;&#xA;&#xA;            if (UfvTransitStateEnum.S40_YARD.equals(ufv.getUfvTransitState()) )&#xA;               return; // the bare chassis unit or the container unit with this chassis is already in the yard&#xA;&#xA;            // retire the unit if it is a bare chassis unit by itself&#xA;            if (EqUnitRoleEnum.PRIMARY.equals(unitEq.getUeEqRole())) {&#xA;                unit.makeRetired();&#xA;                HibernateApi.getInstance().flush();&#xA;                return;&#xA;             } else {&#xA;                 // otherewise swipe with OWN chassis&#xA;                 unit.swipeChsByOwnersChs();&#xA;                 HibernateApi.getInstance().flush();&#xA;             } &#xA;        }&#xA;&#xA;        // create unit for the Chassis in the Yard&#xA;        UnitFacilityVisit newUfv = unitMgr.createYardBornUnit(ContextHelper.getThreadFacility(), ch, null, &quot;groovy&quot;);&#xA;        newUfv.updateArrivePosition(LocPosition.createLocPosition(dao.getTv().getCvdCv(), null, null));&#xA;        newUfv.updateObCv(dao.getTv().getCvdCv());&#xA;&#xA;        Unit newUnit = newUfv.getUfvUnit();&#xA;        HibernateApi.getInstance().flush();                 &#xA;   }   &#xA;}" />
<digital-asset id="MatLastContainerDischarge" short-description="MatLastContainerDischarge" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.road.business.model.*;&#xA;import java.util.Calendar;&#xA;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.ServicesField;&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;&#xA;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;import java.util.HashMap&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;import com.navis.argo.business.atoms.FreightKindEnum;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.api.EventManager&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;&#xA;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 09/19/2012&#xA;* Description: This groovy is used to generate the Stowplan/Manifest Discrepancies after Stowplan and Manifest process&#xA;*/&#xA;&#xA;public class MatLastContainerDischarge extends GroovyInjectionBase&#xA;&#x9;{&#xA;&#x9;&#x9;def inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;//String vessel = &quot;MHI285&quot;;&#xA;&#x9;&#x9;//def vesselGkey = &quot;130043692&quot;;&#xA;&#x9;&#x9;//String vessel = &quot;MHI295&quot;;&#xA;&#x9;&#x9;//def vesselGkey = &quot;141859481&quot;;&#xA;&#xA;&#x9;&#x9;private final String emailTo = &quot;1aktosdevteam@matson.com &quot;;&#xA;&#x9;&#x9;private final String  emailFrom = '1aktosdevteam@matson.com';&#xA;&#x9;&#x9;//public boolean execute(Map params)&#xA;&#x9;&#x9;public void execute(String vessel, String vesselGkey)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;String replaceVes = &quot;V-&quot;+vessel+&quot;-&quot;;&#xA;&#x9;&#x9;&#x9;println(&quot;inside MatGetAllEvents.execute&quot;);&#xA;&#x9;&#x9;&#x9;def gvyEventUtil = inj.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;&#x9;&#x9;&#x9;HashMap reportDesignsmap = new HashMap();&#xA;&#x9;&#x9;&#x9;String subject = vessel+&quot; Last Container Discharge Report&quot;;&#xA;&#x9;&#x9;&#x9;String p2Subject = &quot; &quot;;&#xA;&#x9;&#x9;&#x9;String siSubject = &quot; &quot;;&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;ArrayList unitRptList = new ArrayList();&#xA;&#x9;&#x9;&#x9;println(&quot;Started : MatGetAllEvents&quot;);&#xA;&#x9;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;&#x9;List events = getAllDischEvents(vessel);&#xA;&#x9;&#x9;&#x9;&#x9;ArrayList dischUnits = new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;Iterator dischItr = events.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;List acctList = null;&#xA;&#x9;&#x9;&#x9;&#x9;def type = &quot;DISCHARGE&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;HashMap outputMap = null;&#xA;&#x9;&#x9;&#x9;&#x9;List resultAcctList = new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;while(dischItr.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Event disch = dischItr.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def creator = disch.evntCreator;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (creator == &quot;-xps-&quot;){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unitId = disch.evntAppliedToNaturalKey;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def changes = disch.evntFieldChangesString;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY,UnitCategoryEnum.THROUGH))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_TYPE, &quot;VESSEL&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_GKEY, vesselGkey))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID,unitId))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//.addDqOrdering(Ordering.asc(UnitField.UFV_CMDTY));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;acctList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;dq====&quot;+dq);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator unitIter = acctList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;while(unitIter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = unitIter.next()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;outputMap = populateAcctListByType(ufv,type,vessel)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultAcctList.add(outputMap)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;dischUnits.add(disch);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;println (&quot;resultAcctList.size  &quot;+resultAcctList.size);&#xA;&#x9;&#x9;&#x9;&#x9;JRDataSource reportDs = new JRMapCollectionDataSource(resultAcctList);&#xA; &#x9;&#x9;&#x9;&#x9;def runReport = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//Set report parameters&#xA;&#x9;&#x9;&#x9;&#x9;HashMap reportParameters = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;reportParameters.put(&quot;outboundVesVoy&quot;,&quot;MHI285&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;reportParameters.put(&quot;Date&quot;,new Date());&#xA;&#x9;&#x9;&#x9;&#x9;// call report design of rehandle containers not loaded back to vessel report.&#xA;&#x9;&#x9;&#x9;&#x9;def reportDesignName = &quot;ACCT AUDIT DISCH REPORT&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;// Emailing report&#xA;&#x9;&#x9;&#x9;&#x9;runReport.emailExcelReport(reportDs, reportParameters,reportDesignName ,&quot;1aktosdevteam@matson.com&quot;,&quot;ACCT AUDIT DISCH REPORT-&quot;+vessel,&quot;ACCT AUDIT DISCH REPORT&quot;);&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;dischUnits.size ::: &quot; + dischUnits.size);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;ArrayList siUnits = new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;ArrayList p2Units = new ArrayList();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Iterator itr = events.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(itr.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Event disch = itr.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def changes = disch.evntFieldChangesString;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (!changes.contains(&quot;P2&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;siUnits.add(disch);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (changes.contains(&quot;P2&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;p2Units.add(disch);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;List siList = generateReport(siUnits,vessel);&#xA;&#x9;&#x9;&#x9;&#x9;List p2List = generateReport(p2Units,vessel);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;Date startDate = new Date();&#xA;&#x9;&#x9;&#x9;&#x9;String strDate = startDate.format('MM/dd/yyyy')&#xA;            &#x9;parameters.put(&quot;Date&quot;,strDate);&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (siList.size &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource ds = new JRMapCollectionDataSource(siList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;TEST REPORT&quot;,ds);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;siSubject  = &quot;Note : No SI Gate discharges found&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;            if (p2List.size &gt; 0)&#xA;&#x9;            {&#xA;&#x9;                //Create and Mail Report&#xA;&#x9;                JRDataSource ds1 = new JRMapCollectionDataSource(p2List);&#xA;&#x9;                reportDesignsmap.put(&quot;TEST REPORT1&quot;,ds1);&#xA;&#x9;            }&#xA;&#x9;            else&#xA;&#x9;            {&#xA;&#x9;                p2Subject  = &quot;Note : No Pier-2 Gate discharges found&quot;;&#xA;&#x9;            }&#xA;&#x9;&#x9;&#x9;&#x9;subject = subject + &quot;\n \n&quot; + p2Subject + &quot;\n \n&quot; + siSubject;&#xA;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReports(reportDesignsmap, parameters,emailTo, &quot;Last Container Discharge for-&quot;+vessel ,subject);&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Exception in getAllDischEvents &quot;+e);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public List generateReport(List events, String vessel)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;def gvyEventUtil = inj.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;&#x9;&#x9;&#x9;String replaceVes = &quot;V-&quot;+vessel+&quot;-&quot;;&#xA;&#x9;&#x9;&#x9;ArrayList unitRptList = new ArrayList();&#xA;&#xA;&#x9;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;&#x9;Iterator itr = events.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(itr.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Event disch = itr.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def changes = disch.evntFieldChangesString;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println (&quot;1 :::&quot;+disch.evntAppliedToNaturalKey+&quot;::&quot;+changes+&quot;::&quot;+disch.evntAppliedDate+&quot;::&quot;+disch.evntAppliedBy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;changes = changes.replace(replaceVes,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def lkpSlotValue = changes.indexOf(&quot;-&quot;)== -1 ? changes : changes.substring(0,changes.indexOf(&quot;-&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;lkpSlotValue &quot;+lkpSlotValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap map = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def dischDate = disch.evntAppliedDate;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitNbr&quot;, disch.evntAppliedToNaturalKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;PositionSlot&quot;, lkpSlotValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;OutBoundCarrierId&quot;, vessel);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;type&quot;, &quot;OVERALL&quot; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;InTime&quot;, disch.evntAppliedDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;InTimeDate&quot;, disch.evntAppliedDate);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitRptList.add(map);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Iterator cyHon = events.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(cyHon.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Event disch = cyHon.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def changes = disch.evntFieldChangesString;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String cyHonFlg = getCyHonUnit(disch.evntAppliedToNaturalKey,vessel);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (cyHonFlg == &quot;Y&quot;){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println (&quot;2 :::&quot;+disch.evntAppliedToNaturalKey+&quot;::&quot;+changes+&quot;::&quot;+disch.evntAppliedDate+&quot;::&quot;+disch.evntAppliedBy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;changes = changes.replace(replaceVes,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def lkpSlotValue = changes.indexOf(&quot;-&quot;)== -1 ? changes : changes.substring(0,changes.indexOf(&quot;-&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;lkpSlotValue &quot;+lkpSlotValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap map = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitNbr&quot;, disch.evntAppliedToNaturalKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;PositionSlot&quot;, lkpSlotValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;OutBoundCarrierId&quot;, vessel);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;type&quot;, &quot;CY-HON&quot; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;InTime&quot;, disch.evntAppliedDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;InTimeDate&quot;, disch.evntAppliedDate);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitRptList.add(map);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Iterator auto = events.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(auto.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Event disch = auto.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def changes = disch.evntFieldChangesString;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String autoFlg = getAutoUnit(disch.evntAppliedToNaturalKey,vessel);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (autoFlg == &quot;Y&quot;){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println (&quot;3 :::&quot;+disch.evntAppliedToNaturalKey+&quot;::&quot;+changes+&quot;::&quot;+disch.evntAppliedDate+&quot;::&quot;+disch.evntAppliedBy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;changes = changes.replace(replaceVes,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def lkpSlotValue = changes.indexOf(&quot;-&quot;)== -1 ? changes : changes.substring(0,changes.indexOf(&quot;-&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;lkpSlotValue &quot;+lkpSlotValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap map = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitNbr&quot;, disch.evntAppliedToNaturalKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;PositionSlot&quot;, lkpSlotValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;OutBoundCarrierId&quot;, vessel);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;type&quot;, &quot;AUTO&quot; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;InTime&quot;, disch.evntAppliedDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;InTimeDate&quot;, disch.evntAppliedDate);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitRptList.add(map);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Iterator cy = events.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(cy.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Event disch = cy.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def changes = disch.evntFieldChangesString;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String cyFlg = getCyUnit(disch.evntAppliedToNaturalKey,vessel);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;Auto :::&quot;+auto);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (cyFlg == &quot;Y&quot;){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println (&quot;4 :::&quot;+disch.evntAppliedToNaturalKey+&quot;::&quot;+changes+&quot;::&quot;+disch.evntAppliedDate+&quot;::&quot;+disch.evntAppliedBy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;changes = changes.replace(replaceVes,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def lkpSlotValue = changes.indexOf(&quot;-&quot;)== -1 ? changes : changes.substring(0,changes.indexOf(&quot;-&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;lkpSlotValue &quot;+lkpSlotValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap map = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitNbr&quot;, disch.evntAppliedToNaturalKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;PositionSlot&quot;, lkpSlotValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;OutBoundCarrierId&quot;, vessel);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;type&quot;, &quot;CY-OTHER&quot; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;InTime&quot;, disch.evntAppliedDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;InTimeDate&quot;, disch.evntAppliedDate);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitRptList.add(map);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;return unitRptList;&#xA;&#x9;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Exception in getAllDischEvents &quot;+e);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#xA;private List getAllDischEvents(String vessel)&#xA;&#x9;{&#xA;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;Date startDate = new Date() -4;&#xA;&#x9;&#x9;&#x9;Date endDate = startDate + 4;&#xA;&#x9;&#x9;&#x9;String trimDate = startDate.format('yyyy-MM-dd')&#xA;&#x9;&#x9;&#x9;startDate = startDate.parse('yyyy-MM-dd', trimDate);&#xA;&#x9;&#x9;&#x9;ArrayList eventList = new ArrayList();&#xA;&#xA;       &#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Event&quot;)&#xA;    &#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ge(ServicesField.EVNT_APPLIED_DATE, startDate))&#xA;    &#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(ServicesField.EVNT_EVENT_TYPE, &quot;2753837&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqOrdering(Ordering.desc(ServicesField.EVNT_APPLIED_DATE));&#xA;    &#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.eq(ServicesField.EVNT_APPLIED_TO_NATURAL_KEY, &quot;MATU3701946&quot;));&#xA;&#xA;    &#x9;&#x9;println (dq);&#xA;&#xA;    &#x9;&#x9;//dq.setMaxResults(1);&#xA;&#x9;&#x9;&#x9;List events = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println (&quot;events.size()&quot; + events.size());&#xA;&#xA;&#x9;&#x9;&#x9;Iterator itr = events.iterator();&#xA;&#x9;&#x9;&#x9;while(itr.hasNext())&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Event disch = itr.next();&#xA;&#x9;&#x9;&#x9;&#x9;def changes = disch.evntFieldChangesString;&#xA;&#x9;&#x9;&#x9;&#x9;if (changes.contains(vessel)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;eventList.add(disch);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;println(&quot;eventList ::&quot;+eventList.size());&#xA;&#x9;&#x9;&#x9;return eventList;&#xA;&#xA;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;&#x9;println(&quot;Error while getting events:::&quot;+e)&#xA;&#x9;&#x9;}&#xA;  &#x9;}&#xA;&#xA; public String getAutoUnit(String containerId, String vessel)&#xA;&#x9;{&#xA;&#xA;&#x9;try {&#xA;&#x9;&#x9;&#x9;String auto = &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID,containerId));&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID,vessel));&#xA;&#x9;&#x9;&#x9;def unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;if (unitList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;commodity = commodity != null ? commodity : &quot;NO&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;commodity :::&quot;+ commodity);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (commodity.contains(&quot;AUTO&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;auto = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;return auto;&#xA;&#x9;}catch (Exception e){&#xA;&#x9;&#x9;println(&quot;Error &quot;+ e);&#xA;&#x9;}&#xA;}&#xA;&#xA; public String getCyHonUnit(String containerId , String vessel)&#xA;&#x9;{&#xA;&#xA;&#x9;try {&#xA;&#x9;&#x9;&#x9;String cyHon = &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID,containerId));&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID,vessel));&#xA;&#x9;&#x9;&#x9;def unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;if (unitList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;commodity = commodity != null ? commodity : &quot;NO&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def pod = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;commodity :::&quot;+ commodity);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (!commodity.contains(&quot;AUTO&quot;) &amp;&amp; pod == ContextHelper.getThreadFacility().getFcyId()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cyHon = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;return cyHon;&#xA;&#x9;}catch (Exception e){&#xA;&#x9;&#x9;println(&quot;Error &quot;+ e);&#xA;&#x9;}&#xA;}&#xA;&#xA; public String getCyUnit(String containerId , String vessel)&#xA;&#x9;{&#xA;&#xA;&#x9;try {&#xA;&#x9;&#x9;&#x9;String cy = &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID,containerId));&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID,vessel));&#xA;&#x9;&#x9;&#x9;def unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;if (unitList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;commodity = commodity != null ? commodity : &quot;NO&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def pod = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (!commodity.contains(&quot;AUTO&quot;) &amp;&amp; pod != ContextHelper.getThreadFacility().getFcyId()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cy = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;return cy;&#xA;&#x9;}catch (Exception e){&#xA;&#x9;&#x9;println(&quot;Error &quot;+ e);&#xA;&#x9;}&#xA;}&#xA;&#xA;public HashMap populateAcctListByType(UnitFacilityVisit ufv, String type, String vessel) {&#xA;&#xA;&#x9;        HashMap resMap = new HashMap();&#xA;&#x9;        def unit = ufv.ufvUnit&#xA;&#x9;        UnitEquipment chasEquip = unit.getUnitCarriageUe();&#xA;&#x9;        def freightkindout = unit.getFieldValue(&quot;unitFreightKind&quot;).getKey();&#xA;&#x9;        def attachedUnit = unit.getFieldValue(&quot;unitAttachedEquipIds&quot;)&#xA;&#x9;        if (&quot;FCL&quot;.equals(freightkindout))&#xA;&#x9;        {&#xA;&#x9;            freightkindout = &quot;F&quot;;&#xA;&#x9;        } else if (&quot;MTY&quot;.equals(freightkindout))&#xA;&#x9;        {&#xA;&#x9;            freightkindout = &quot;E&quot;;&#xA;&#x9;        }&#xA;&#xA;&#x9;        resMap.put(&quot;Commodity&quot;,unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;));&#xA;&#x9;        resMap.put(&quot;EquipmentTypeClass&quot;,unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;).getKey());&#xA;&#x9;        resMap.put(&quot;EquipmentType&quot;,unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;))&#xA;&#x9;        resMap.put(&quot;FreightKind&quot;,freightkindout)&#xA;&#x9;        resMap.put(&quot;UnitNbr&quot;,unit.getFieldValue(&quot;unitId&quot;))&#xA;&#x9;        if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;&#x9;&#x9;&#x9;&#x9;def commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;commodity = commodity != null &amp;&amp; commodity == &quot;AUTO&quot; ? &quot;AUTO&quot; : &quot; &quot;;&#xA;&#x9;&#x9;&#x9;&#x9;resMap.put(&quot;Commodity&quot;,commodity);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;        if (attachedUnit != null &amp;&amp; chasEquip !=null)&#xA;&#x9;        {&#xA;&#x9;            resMap.put(&quot;AttachedUnits&quot;,unit.getFieldValue(&quot;unitAttachedEquipIds&quot;))&#xA;&#x9;        } else if (attachedUnit != null &amp;&amp; chasEquip == null)&#xA;&#x9;        {&#xA;&#x9;            resMap.put(&quot;AttachedUnits&quot;,null)&#xA;&#x9;        }&#xA;&#xA;&#x9;&#x9;&#x9;if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;&#x9;            resMap.put(&quot;InboundCarrierATA&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvATA&quot;))&#xA;&#x9;            resMap.put(&quot;InboundCarrierATD&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvATD&quot;))&#xA;&#x9;            resMap.put(&quot;InboundCarrierId&quot;,vessel)&#xA;&#x9;            resMap.put(&quot;UfvFlexString06&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString06&quot;))&#xA;&#x9;        }&#xA;&#x9;        return resMap;&#xA;    }&#xA;&#xA;}&#xA;&#xA;" />
<digital-asset id="GvyCmisGateData" short-description="GvyCmisGateData" is-pre-deployed="N" groovy-code="/*&#xA;**********************************************************************&#xA;* Srno    Date        Changer&#x9;         Change Description&#xA;* A1      03/01/11    Glenn Raposo       Removed some logging&#xA;* A2      03/26/13    Lisa Crouch        Check group id, perform transfer complete&#xA;**********************************************************************&#xA;*/&#xA;import com.navis.argo.business.api.ArgoRoadManager&#xA;import com.navis.argo.business.api.ITruckVisitDetails&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.argo.business.api.*;&#xA;import com.navis.framework.business.*;&#xA;&#xA;import com.navis.inventory.business.api.UnitField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.portal.Ordering&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.argo.business.atoms.LocTypeEnum;&#xA;import com.navis.inventory.business.units.Routing&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;&#xA;/**&#xA; Change the gate gateSequenceNo to use startDate not StageStartDate.&#xA; */&#xA;public class GvyCmisGateData {&#xA;&#xA;    public String gateAttributes(Object unit, Object gvyTxtMsgFmt, Object gvyBaseClass, String eventType) {&#xA;&#xA;        def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;        def lkpLocType = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;        def locType = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;&#xA;        def carrierVisitGkey = ''&#xA;        def gateTruckCmpyCd = ''; def gateTruckCmpyName = ''; def gateTruckId = ''&#xA;        def batNumber = ''; def turnTime = ''; def gateSeqNo = '';&#xA;        def laneGateId = ''; def deptTruckCode = ''; def deptDport = '';&#xA;        def deptVesVoy = ''; def deptOutGatedDt = ''; def deptConsignee = '';&#xA;        def deptCneeCode = ''; def deptBkgNum = ''; def deptMisc3 = '';&#xA;        def deptCargoNotes = '';&#xA;        def gateId = '';&#xA;&#xA;        if (eventType.equals('UNIT_IN_GATE')) {&#xA;            // TRUCK CODE,NAME, ID, BAT_NBR, TURNTIME, GATE_SEQ_NBR&#xA;            carrierVisitGkey = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvdGkey&quot;)&#xA;            gateTruckCmpyCd = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.carrierOperatorId&quot;)&#xA;            gateTruckCmpyName = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.carrierOperatorName&quot;)&#xA;            gateTruckId = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;)&#xA;            batNumber = getTruckBatNbr(carrierVisitGkey)&#xA;            turnTime = ''&#xA;            gateSeqNo = gateSequenceNo(gvyBaseClass, unit, gvyEventUtil, carrierVisitGkey)&#xA;            laneGateId = getGateId(carrierVisitGkey)&#xA;            gateId = &quot;LONG HAUL&quot;; //todo, change based on input&#xA;&#xA;            //FIELDS FOR DEPARTED UNIT&#xA;            def departedUfvUnit = getDepatedUnit(unit)&#xA;&#xA;            if (departedUfvUnit != null) {&#xA;                //Get class&#xA;                def gvyShipDtl = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisShipmentDetail&quot;)&#xA;                def gvyFlexFld = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisFlexFieldDetail&quot;)&#xA;&#xA;                def deptLocType = departedUfvUnit.getFieldValue(&quot;ufvLastKnownPosition.posLocType&quot;)&#xA;                def zone = unit.getUnitComplex().getTimeZone();&#xA;                deptLocType = deptLocType != null ? deptLocType.getKey() : ''&#xA;                if (deptLocType.equals('TRUCK')) {&#xA;                    deptTruckCode = departedUfvUnit.getFieldValue(&quot;ufvActualObCv.carrierOperatorId&quot;)&#xA;                    deptOutGatedDt = departedUfvUnit.getFieldValue(&quot;ufvTimeOut&quot;);&#xA;                    deptOutGatedDt = deptOutGatedDt != null ? gvyEventUtil.formatDate(deptOutGatedDt, zone) : '';&#xA;&#xA;                    //casting UfvUnit to Unit obj as below fields are unit fields.&#xA;                    def departedUnit = departedUfvUnit.ufvUnit&#xA;                    deptDport = departedUnit.getFieldValue(&quot;unitGoods.gdsDestination&quot;)&#xA;                    deptVesVoy = getDeptVesvoy(departedUnit)&#xA;                    deptConsignee = gvyShipDtl.getConsigneeValue(departedUnit, eventType);&#xA;                    deptCneeCode = departedUnit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuId&quot;);&#xA;                    deptBkgNum = gvyShipDtl.getBookingNumber(departedUnit, eventType);&#xA;                    deptMisc3 = gvyFlexFld.getMisc3(departedUnit, gvyEventUtil);&#xA;                    deptCargoNotes = getDeptCargoNotes(departedUnit, gvyBaseClass, eventType)&#xA;&#xA;                    //println(&quot;deptDPort :&quot;+deptDport+&quot;  deptVesVoy:&quot;+deptVesVoy+&quot;  deptOutGatedDt:&quot;+deptOutGatedDt+&quot; gateTruckCmpyCd&quot;+gateTruckCmpyCd)&#xA;                    //println(&quot;deptConsignee ::&quot;+deptConsignee+&quot; deptCneeCode:&quot;+deptCneeCode+&quot; deptBkgNum:&quot;+deptBkgNum+&quot; deptMisc3:&quot;+deptMisc3+&quot; deptCargoNotes:&quot;+deptCargoNotes)&#xA;                }&#xA;            } else {&#xA;                deptTruckCode = ''; deptDport = ''; deptVesVoy = ''; deptOutGatedDt = '';&#xA;                deptConsignee = ''; deptCneeCode = ''; deptBkgNum = ''; deptMisc3 = '';&#xA;                deptCargoNotes = '';&#xA;            }&#xA;        } else if (eventType.equals('UNIT_DELIVER')) {&#xA;            // TRUCK CODE,NAME, ID, BAT_NBR, TURNTIME, GATE_SEQ_NBR&#xA;            carrierVisitGkey = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvdGkey&quot;)&#xA;            gateTruckCmpyCd = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.carrierOperatorId&quot;)&#xA;            gateTruckCmpyName = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.carrierOperatorName&quot;)&#xA;            gateTruckId = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;)&#xA;            batNumber = getTruckBatNbr(carrierVisitGkey)&#xA;            turnTime = ''&#xA;            gateSeqNo = gateSequenceNo(gvyBaseClass, unit, gvyEventUtil, carrierVisitGkey)&#xA;            laneGateId = getGateId(carrierVisitGkey)&#xA;            gateId = &quot;LONG HAUL&quot;; //todo, change based on input&#xA;&#xA;            deptTruckCode = ''; deptDport = ''; deptVesVoy = ''; deptOutGatedDt = '';&#xA;            deptConsignee = ''; deptCneeCode = ''; deptBkgNum = ''; deptMisc3 = '';&#xA;            deptCargoNotes = '';&#xA;        } else {&#xA;            gateTruckCmpyCd = '%'; gateTruckCmpyName = '%'; gateTruckId = '%';&#xA;            batNumber = '%'; turnTime = '%'; gateSeqNo = '%';&#xA;            laneGateId = '%'; deptTruckCode = ''; deptDport = '';&#xA;            deptVesVoy = ''; deptOutGatedDt = ''; deptConsignee = '';&#xA;            deptCneeCode = ''; deptBkgNum = ''; deptMisc3 = '';&#xA;            deptCargoNotes = '';&#xA;&#xA;            if (eventType.equals('UNIT_RECEIVE')) {&#xA;                carrierVisitGkey = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvdGkey&quot;)&#xA;                laneGateId = getGateId(carrierVisitGkey)&#xA;            }&#xA;            gateId = &quot;LONG HAUL&quot;; //todo, change based on input&#xA;        }&#xA;&#xA;        def gateTruckCmpyCdAttr = gvyTxtMsgFmt.doIt(&quot;gateTruckCmpyCd&quot;, gateTruckCmpyCd)&#xA;        def gateTruckCmpyNameAttr = gvyTxtMsgFmt.doIt(&quot;gateTruckCmpyName&quot;, gateTruckCmpyName)&#xA;        def gateTruckIdAttr = gvyTxtMsgFmt.doIt(&quot;gateTruckId&quot;, gateTruckId)&#xA;        def batNumberAttr = gvyTxtMsgFmt.doIt(&quot;batNumber&quot;, batNumber)&#xA;        def turnTimeAttr = gvyTxtMsgFmt.doIt(&quot;turnTime&quot;, turnTime)&#xA;        def gateSeqNoAttr = gvyTxtMsgFmt.doIt('gateSeqNo', gateSeqNo)&#xA;        //Departed Unit&#xA;        def laneGateIdAttr = gvyTxtMsgFmt.doIt('laneGateId', laneGateId)&#xA;        def deptTruckCodeAttr = gvyTxtMsgFmt.doIt('deptTruckCode', deptTruckCode)&#xA;        def deptDportAttr = gvyTxtMsgFmt.doIt('deptDport', deptDport)&#xA;        def deptVesVoyAttr = gvyTxtMsgFmt.doIt('deptVesVoy', deptVesVoy)&#xA;        def deptOutGatedDtAttr = gvyTxtMsgFmt.doIt('deptOutGatedDt', deptOutGatedDt)&#xA;        def deptConsigneeAttr = gvyTxtMsgFmt.doIt('deptConsignee', deptConsignee)&#xA;        def deptCneeCodeAttr = gvyTxtMsgFmt.doIt('deptCneeCode', deptCneeCode)&#xA;        def deptBkgNumAttr = gvyTxtMsgFmt.doIt('deptBkgNum', deptBkgNum)&#xA;        def deptMisc3Attr = gvyTxtMsgFmt.doIt('deptMisc3', deptMisc3)&#xA;        def deptCargoNotesAttr = gvyTxtMsgFmt.doIt('deptCargoNotes', deptCargoNotes)&#xA;        def gateIdAttr = gvyTxtMsgFmt.doIt('gateId', laneGateId) //laneGateId &amp; gateId refers to same&#xA;&#xA;&#xA;        def gateAttr = gateTruckCmpyCdAttr + gateTruckCmpyNameAttr + gateTruckIdAttr + batNumberAttr + turnTimeAttr + gateSeqNoAttr + laneGateIdAttr +&#xA;                deptTruckCodeAttr + deptDportAttr + deptVesVoyAttr + deptOutGatedDtAttr + deptConsigneeAttr + deptCneeCodeAttr + deptBkgNumAttr +&#xA;                deptMisc3Attr + deptCargoNotesAttr + gateIdAttr;&#xA;        return gateAttr&#xA;    }&#xA;&#xA;    public String getTruckBatNbr(Long cvdGkey) {&#xA;        ITruckVisitDetails tvd = null;&#xA;        try {&#xA;            ArgoRoadManager argoRoadMgr = (ArgoRoadManager) Roastery.getBean(&quot;argoRoadManager&quot;);&#xA;            tvd = argoRoadMgr != null ? argoRoadMgr.getTvdFromCvGkey(cvdGkey) : null;&#xA;            String batNbr = tvd != null ? tvd.getTruckBatNbr() : ''&#xA;            return batNbr&#xA;        }&#xA;        catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;    public String getEntryLaneId(long cvdGKey) {&#xA;        try {&#xA;            ArgoRoadManager argoRoadMgr = (ArgoRoadManager) Roastery.getBean(&quot;argoRoadManager&quot;);&#xA;            def tvd = argoRoadMgr.getTvdFromCvGkey(cvdGKey);&#xA;            String laneId = tvd != null ? (tvd.getTvdtlsEntryLane() != null ? tvd.getTvdtlsEntryLane().getLaneId() : '') : ''&#xA;            return laneId&#xA;        }&#xA;        catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;    }//Method EntryLaneId Ends&#xA;&#xA;&#xA;    public String getExitLaneId(long cvdGKey) {&#xA;        try {&#xA;            ArgoRoadManager argoRoadMgr = (ArgoRoadManager) Roastery.getBean(&quot;argoRoadManager&quot;);&#xA;            def tvd = argoRoadMgr.getTvdFromCvGkey(cvdGKey);&#xA;            String laneId = tvd != null ? (tvd.getTvdtlsExitLane() != null ? tvd.getTvdtlsExitLane().getLaneId() : '') : ''&#xA;            return laneId&#xA;        }&#xA;        catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;    }//Method EntryLaneId Ends&#xA;&#xA;&#xA;    public String gateSequenceNo(Object gvyBaseClass, Object unit, Object gvyEventUtil, Object carrierVisitGkey) {&#xA;        def gateSeqNo = ''&#xA;        try {&#xA;            if (carrierVisitGkey != null) {&#xA;                ArgoRoadManager argoRoadMgr = (ArgoRoadManager) Roastery.getBean(&quot;argoRoadManager&quot;);&#xA;                def tvd = argoRoadMgr != null ? argoRoadMgr.getTvdFromCvGkey(carrierVisitGkey) : null;&#xA;&#xA;                Date dateObj = null;&#xA;                if (tvd != null) {&#xA;                    def stats = tvd.tvdtlsStats != null ? tvd.tvdtlsStats.iterator() : tvd.tvdtlsStats;&#xA;                    if (stats.hasNext()) {&#xA;                        def currentStat = stats.next();&#xA;                        dateObj = currentStat.tvstatStart;&#xA;&#xA;                        //Date Formatting&#xA;                        def zone = unit.getUnitComplex().getTimeZone();&#xA;                        def aDate = gvyEventUtil.convertToJulianDate(dateObj)&#xA;                        def aTime = gvyEventUtil.formatTime(dateObj, zone)&#xA;                        def datefmt = aDate + aTime&#xA;                        gateSeqNo = datefmt != null ? datefmt.replace(&quot;:&quot;, &quot;&quot;) : datefmt&#xA;                    }&#xA;&#xA;                }&#xA;                //Date Formatting&#xA;&#xA;            }//If ends&#xA;        }//try Ends&#xA;        catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;        return gateSeqNo;&#xA;&#xA;    }//method execute ends&#xA;&#xA;&#xA;    public Object getDepatedUnit(Object unit) {&#xA;        try {&#xA;            GroovyApi apiLog = new GroovyApi();&#xA;&#xA;            def inComplex = unit.getFieldValue(&quot;unitComplex.cpxGkey&quot;)&#xA;            def equiGKey = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.ueGkey&quot;);&#xA;            def inFacility = com.navis.argo.ContextHelper.getThreadFacility();&#xA;&#xA;            unit as Unit;&#xA;&#xA;            if (unit != null &amp;&amp; inFacility==null) {&#xA;                apiLog.log(&quot;event facility:&quot; + unit.getLocFacility());&#xA;                inFacility=unit.getLocFacility();&#xA;&#xA;             }&#xA;&#xA;            //println('inComplex :'+inComplex+'    equiGKey'+equiGKey+'  inFacility:'+inFacility)&#xA;            //def departedUnit = findLatestDepartedUnit(inComplex,equiGKey)&#xA;            def departedUnit = findDepartedUfvUnit(inFacility, equiGKey)&#xA;&#xA;            return departedUnit&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;    // Finds Last Departed Unit at Complex Level&#xA;    private Object findLatestDepartedUnit(long inComplexGKey, long equiGKey) {&#xA;        def unit = null;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;).addDqPredicate(PredicateFactory.eq(UnitField.UNIT_COMPLEX, inComplexGKey)).addDqPredicate(PredicateFactory.eq(UnitField.UNIT_VISIT_STATE, UnitVisitStateEnum.DEPARTED)).addDqPredicate(PredicateFactory.eq(UnitField.UNIT_PRIMARY_EQ, equiGKey)).addDqOrdering(Ordering.desc(UnitField.UNIT_CREATE_TIME));&#xA;&#xA;        List unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;        if (unitList.size() &gt; 0) {&#xA;            //println(&quot;unitList Size :&quot;+ unitList.size())&#xA;            unit = (Unit) unitList.get(0);&#xA;        }&#xA;        return unit;&#xA;    }&#xA;&#xA;    /*&#xA;    * Method Fetches last Departed Ufv Unit with Actual OB carrier as Truck&#xA;    */&#xA;&#xA;    private Object findDepartedUfvUnit(Object inFacility, long primaryEquiGkey) {&#xA;        def lastDeptUfvUnit = null;&#xA;        List ufvUnitLst = null;&#xA;        try {&#xA;&#xA;&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;).addDqPredicate(PredicateFactory.eq(UnitField.UFV_FACILITY, inFacility.getFcyGkey())).addDqPredicate(PredicateFactory.eq(UnitField.UFV_VISIT_STATE, UnitVisitStateEnum.DEPARTED)).addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_CARRIER_MODE, LocTypeEnum.TRUCK)).addDqPredicate(PredicateFactory.eq(UnitField.UFV_PRIMARY_EQ, primaryEquiGkey)).addDqOrdering(Ordering.desc(UnitField.UFV_TIME_OUT));&#xA;            ufvUnitLst = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#xA;            //println('ufvUnitLst ::'+(ufvUnitLst != null ? ufvUnitLst.size() : '0'))&#xA;            int count = 0;&#xA;&#xA;            for (aUfv in ufvUnitLst) {&#xA;                count++;&#xA;                def remarks = aUfv.getFieldValue(&quot;ufvUnit.unitRemark&quot;);&#xA;                def truckerId = aUfv.getFieldValue(&quot;ufvActualObCv.carrierOperatorId&quot;)&#xA;                //println(&quot;Count :&quot;+count+&quot;: aUFv Remarks ::&quot;+remarks+&quot;  truckerId::&quot;+truckerId)&#xA;            }&#xA;&#xA;            //The First ufv in the List is the most recent dept unit&#xA;            if (ufvUnitLst.size() &gt; 0) {&#xA;                lastDeptUfvUnit = ufvUnitLst.get(0);&#xA;                return lastDeptUfvUnit&#xA;            }&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return lastDeptUfvUnit;&#xA;    }&#xA;&#xA;&#xA;    public String getGateId(long cvdGKey) {&#xA;        try {&#xA;            ArgoRoadManager argoRoadMgr = (ArgoRoadManager) Roastery.getBean(&quot;argoRoadManager&quot;);&#xA;            def tvd = argoRoadMgr.getTvdFromCvGkey(cvdGKey);&#xA;            String laneId = tvd != null ? (tvd.getTvdtlsGate() != null ? tvd.getTvdtlsGate().getGateId() : '') : ''&#xA;            return laneId&#xA;        }&#xA;        catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;    }//Method getGateId Ends&#xA;&#xA;    //Method gets Departed units vesvoy&#xA;    public String getDeptVesvoy(Object deptUnit) {&#xA;        def deptVesvoy = ''&#xA;        def dibcarrierId = ''&#xA;        try {&#xA;&#xA;            def aibcarrierMode = deptUnit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCarrierMode&quot;)&#xA;            aibcarrierMode = aibcarrierMode != null ? aibcarrierMode.getKey() : ''&#xA;&#xA;            def ibDecVesClassTyp = deptUnit.getFieldValue(&quot;unitDeclaredIbCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;            ibDecVesClassTyp = ibDecVesClassTyp != null ? ibDecVesClassTyp.getKey() : &quot;&quot;&#xA;&#xA;            def aIbVesselType = deptUnit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;            aIbVesselType = aIbVesselType != null ? aIbVesselType.getKey() : &quot;&quot;&#xA;&#xA;            if (aibcarrierMode.equals('TRUCK')) {&#xA;                if (ibDecVesClassTyp.equals('CELL')) {&#xA;                    dibcarrierId = deptUnit.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;)&#xA;                    deptVesvoy = dibcarrierId;&#xA;                } else {&#xA;                    deptVesvoy = null;&#xA;                }&#xA;            } else if (aibcarrierMode.equals('VESSEL')) {&#xA;                if (aIbVesselType.equals('CELL')) {&#xA;                    def aibcarrierId = deptUnit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;)&#xA;                    deptVesvoy = aibcarrierId;&#xA;                } else {&#xA;                    deptVesvoy = null;&#xA;                }&#xA;            }&#xA;            //println(&quot;aibcarrierMode:&quot;+aibcarrierMode+&quot;  dibcarrierId:&quot;+dibcarrierId+&quot;  ibDecVesClassTyp:&quot;+ibDecVesClassTyp+&quot;   aIbVesselType:&quot;+aIbVesselType+&quot;  deptVesvoy ::&quot;+deptVesvoy)&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;        return deptVesvoy&#xA;    }&#xA;&#xA;    public String getDeptCargoNotes(Object unit, Object gvyBaseClass, String eventType) {&#xA;        def cargoNotes = ''&#xA;        try {&#xA;&#xA;            def groupCode = unit.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;);&#xA;&#xA;            def lkpSlot = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;            lkpSlot = lkpSlot != null ? lkpSlot : ''&#xA;&#xA;            def _pmdDt = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate01&quot;)&#xA;            def strpmd = _pmdDt != null ? ('' + _pmdDt) : ''&#xA;            def pmd = strpmd.length() &gt; 10 ? strpmd.substring(8, 10) : strpmd&#xA;&#xA;            def equiType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;)&#xA;            equiType = equiType != null ? equiType : ''&#xA;&#xA;            def drayStatus = unit.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;            drayStatus = drayStatus != null ? drayStatus.getKey() : drayStatus&#xA;&#xA;            def reviewForStow = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString01&quot;)&#xA;&#xA;            def gvyComtNotes = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisCommentNotesField&quot;)&#xA;            //Cargo Status&#xA;            cargoNotes = unit.getFieldValue(&quot;unitRemark&quot;)&#xA;            cargoNotes = cargoNotes != null ? cargoNotes.replace(&quot;\n&quot;, &quot; &quot;) : ''&#xA;            cargoNotes = gvyComtNotes.processCargoNotesOnEvent(null, eventType, cargoNotes, groupCode, lkpSlot, pmd, equiType, reviewForStow, drayStatus)&#xA;&#xA;            String cargoNotesOverFlow = '';&#xA;            if (cargoNotes.length() &gt; 65) {&#xA;                int cargoNotesIndex = cargoNotes.substring(0, 65).lastIndexOf(&quot; &quot;);&#xA;                cargoNotesOverFlow = cargoNotes.substring(cargoNotesIndex + 1, cargoNotes.length());&#xA;                cargoNotes = cargoNotes.substring(0, cargoNotesIndex);&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;        return cargoNotes&#xA;    }&#xA;&#xA;    public void setTransferComplete(Object unit, Object api) {&#xA;        def carrierVisitGkey = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvdGkey&quot;);&#xA;        carrierVisitGkey = carrierVisitGkey != null ? carrierVisitGkey : '';&#xA;        Routing routing = unit.getUnitRouting();&#xA;        Group group = routing.getRtgGroup();&#xA;        def gvyGateObj = api.getGroovyClassInstance(&quot;GvyCmisGateData&quot;);&#xA;        String gateIdDesc = gvyGateObj.getGateId(carrierVisitGkey);&#xA;        boolean isGate = false;&#xA;        try {&#xA;            if (group == null) {&#xA;                println(&quot;group is null&quot;);&#xA;                return;&#xA;            } else {&#xA;                //println(&quot;carrierVisitGkey:&quot;+carrierVisitGkey);&#xA;                //println(&quot;group:&quot;+group.getGrpId().toUpperCase());&#xA;                //println(&quot;gateId:&quot;+gateIdDesc);&#xA;&#xA;                if (group.getGrpId().toUpperCase().endsWith(&quot;P2&quot;) &amp;&amp; gateIdDesc.equalsIgnoreCase(&quot;PIER2&quot;)) {&#xA;                    isGate = true;&#xA;                }&#xA;                if (group.getGrpId().toUpperCase().endsWith(&quot;SI&quot;) &amp;&amp; gateIdDesc.equalsIgnoreCase(&quot;SI GATE&quot;)) {&#xA;                    isGate = true;&#xA;                }&#xA;                if (group.getGrpId().toUpperCase().endsWith(&quot;WO&quot;) &amp;&amp; gateIdDesc.equalsIgnoreCase(&quot;WO GATE&quot;)) {&#xA;                    isGate = true;&#xA;                }&#xA;                if (group.getGrpId().toUpperCase().equals(&quot;PASSPASS&quot;) &amp;&amp; gateIdDesc.equalsIgnoreCase(&quot;PASSPASS&quot;)) {&#xA;                    isGate = true;&#xA;                }&#xA;            }&#xA;&#xA;            if (isGate) {&#xA;                //println(&quot;Remove group id&quot;);&#xA;                routing.setRtgGroup(null);&#xA;            } else {&#xA;                println(&quot;Set DrayStatus only&quot;);&#xA;                unit.setFieldValue(&quot;unitDrayStatus&quot;, com.navis.argo.business.atoms.DrayStatusEnum.OFFSITE);&#xA;            }&#xA;        } catch (Exception e) {&#xA;            api.log(&quot;Exception in GvyCmisGateData.setTransferComplete() &quot; + e);&#xA;        }&#xA;    }&#xA;}&#xA;" />
<digital-asset id="GvyTestEventValues" short-description="GvyTestEventValues" is-pre-deployed="N" groovy-code="import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;&#xA;&#xA;public class GvyTestEventValues&#xA;{&#xA;&#xA;   /* Method Returns a map object for Event Fields Changed&#xA;    * Map contains Field name as Key and Field Object as the value&#xA;    * The Field Object has Previous Value and Current Value&#xA;   */&#xA;   public Map eventFieldChangedValues(Object event, Object gvyBaseClass)&#xA;  {&#xA;     Map mapFields = new HashMap()&#xA;     def newValue=''&#xA;     def prevValue = ''&#xA;      try&#xA;     {&#xA;         def gvyEventObj = event.getEvent()&#xA;         Set changes =  gvyEventObj.getFieldChanges()&#xA;         Iterator iterator = changes.iterator();&#xA;         while(iterator.hasNext()) &#xA;        {&#xA;           EventFieldChange  fieldChange = (EventFieldChange)iterator.next();&#xA;           String fieldName = fieldChange.getMetafieldId()&#xA;           MetafieldId mfId = MetafieldIdFactory.valueOf(fieldName);&#xA;           newValue = ArgoUtils.getPropertyValueAsUiString(mfId, fieldChange.getEvntfcNewVal());&#xA;           newValue = newValue != null ? newValue : '' &#xA;           prevValue = ArgoUtils.getPropertyValueAsUiString(mfId, fieldChange.getEvntfcPrevVal()); &#xA;           prevValue = prevValue != null ? prevValue : ''&#xA;    &#xA;          def gvyEventField = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventField&quot;);&#xA;          gvyEventField.setFieldName(fieldName);&#xA;          gvyEventField.setpreviousValue(prevValue);&#xA;          gvyEventField.setCurrentValue(newValue);&#xA;          mapFields.put(fieldName, gvyEventField)&#xA;          println('fieldName:'+fieldName+'   mfId :'+mfId+'     newValue:'+newValue+'     prevValue:'+prevValue )&#xA;&#xA;        }&#xA;     }catch(Exception e){&#xA;           e.printStackTrace()&#xA;     }&#xA;    return mapFields;&#xA;   }&#xA;&#xA;   public void printEventFields(Object mapFieldValues, Object gvyBaseClass)&#xA;   {&#xA;      try&#xA;     {&#xA;        Iterator it = mapFieldValues.keySet().iterator();&#xA;        while (it.hasNext()) &#xA;        {&#xA;           def aField = it.next();&#xA;           def aEvntFieldObj = mapFieldValues.get(aField)    &#xA;           def fieldname = aEvntFieldObj.getFieldName()&#xA;           def previousValue = aEvntFieldObj.getpreviousValue()&#xA;           def currentValue = aEvntFieldObj.getCurrentValue()&#xA;           println('fieldname ::'+fieldname+'  previousValue::'+previousValue+'   currentValue::'+currentValue)&#xA;        }&#xA;     }catch(Exception e){&#xA;        e.printStackTrace()&#xA;     }&#xA;&#xA;   }&#xA;&#xA;&#xA;}" />
<digital-asset id="GvyInjAard" short-description="ACETS ARD Process" is-pre-deployed="N" groovy-code="/*&#xA;**********************************************************************&#xA;* Srno   Date&#x9;             Changer&#x9; Change Description&#xA;* A1     12/29/08       Glenn Raposo&#x9; Unit Field Tracker code Added&#xA;* A2     05/22/09&#x9;Steven Bauer&#x9; Lookup unit in complex&#xA;* A3     06/02/09&#x9;Steven Bauer&#x9; 403 - Supress all updates before GetNV&#xA;**********************************************************************&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.argo.util.FieldChangeTracker&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdList;&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import java.lang.Thread&#xA;&#xA;class GvyInjAard extends GroovyInjectionBase {&#xA;&#x9;public String execute(Map inParameters) {&#xA;&#xA;&#x9;def ctrId = (String) inParameters.get(&quot;equipment-id&quot;);&#xA;&#x9;def vesvoyArd = (String) inParameters.get( &quot;vesvoy&quot;);&#xA;&#x9;def recDateArd = (String) inParameters.get( &quot;autoRecDate&quot;);&#xA;&#xA;&#x9;com.navis.argo.ContextHelper.setThreadExternalUser(&quot;ACETS&quot;);&#xA;&#xA;&#x9;// Find the UFV&#xA;&#x9;log( &quot;Starting ARD Injection process.&quot;);&#xA;&#x9;def ufv;&#xA;&#x9;def unit;&#xA;&#x9;def tracker; &#xA;        GroovyApi gvyApi = new GroovyApi();&#xA;&#x9;def unitLookup = gvyApi.getGroovyClassInstance(&quot;GvyUnitLookup&quot;);&#xA;&#x9;&#xA;&#x9;try {&#xA;&#x9;&#x9;Thread.sleep( 5000);&#xA;&#x9;&#x9;//ufv = findActiveUfv(ctrId);&#xA;&#x9;&#x9;// A2&#xA;&#x9;&#x9;ufv =  unitLookup.getUfvActiveInComplex(ctrId);&#xA;&#x9;&#x9;unit = ufv.getUfvUnit();&#xA;&#x9;&#x9;//A1-Tracker Change&#xA;                def gvyUnitFldTracker = gvyApi.getGroovyClassInstance(&quot;GvyUnitFieldTracker&quot;);&#xA;                tracker = gvyUnitFldTracker.createFieldChangeTracker(unit) &#xA; &#xA;&#x9;} catch ( Exception ex) {&#xA;&#x9;        ex.printStackTrace() &#xA;&#x9;&#x9;fail((new StringBuilder()).append(ex.toString()).append(&quot; ERR_GVY_ARD_001. Could not find unit: &quot;).append( ctrId).toString());&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;//A3&#xA;&#x9;if(isStowplan(unit)) return;&#xA;&#x9;&#xA;&#x9;def cmdyName = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyShortName&quot;);&#xA;&#x9;log( &quot;CmdyName=&quot; + cmdyName);&#xA;&#x9;if ( cmdyName != null &amp;&amp; ! cmdyName.contains( &quot;AUTO&quot;)) {&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_ARD_002. ARD commodity code: &quot; + cmdyName + &quot; is not AUTO.&quot;);&#xA;&#x9;}&#xA;&#xA;def obDecVesvoy = ufv.getUfvIntendedObCv().toString();&#xA;&#xA;&#x9;//def obDecVesvoy = unit.getFieldValue( &quot;unitActiveUfv.ufvIntendedObCv&quot;);&#xA;&#x9;log( &quot;obDecVesvoy=&quot; + obDecVesvoy);&#xA;&#x9;if ( obDecVesvoy != vesvoyArd) {&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_ARD_003. OB Carrier in N4: &quot; + obDecVesvoy + &quot; does not match ARD vesvoy: &quot; + vesvoyArd);&#xA;&#x9;}&#xA;&#xA;&#xA;&#x9;unit.setFieldValue(&quot;unitGoods.gdsBlNbr&quot;, recDateArd);&#xA;&#x9;log( &quot;post ARD event.&quot;);&#xA;        &#xA;&#x9;//A1-Tracker Change&#xA;&#x9;def changes = tracker.getChanges(unit);&#xA;        if(changes != null &amp;&amp; changes.getFieldChangeCount() != 0) {&#xA;        unit.recordUnitEvent(com.navis.argo.business.atoms.EventEnum.UNIT_PROPERTY_UPDATE,changes , &quot;Field Update ARD Data&quot;);&#xA;        }&#xA;&#xA;&#x9;def event = new GroovyEvent( null, unit);&#xA;&#x9;event.postNewEvent( &quot;ARD&quot;, &quot;ACETS&quot;);&#xA;}&#xA;&#xA;     private boolean isStowplan(unit) {&#xA;        def remark = unit.unitRemark;&#xA;        if(remark == null) return false;&#xA;        return remark.startsWith(&quot;Stowplan Data&quot;);&#xA;    } &#xA;}" />
<digital-asset id="DetachChassisFromUnitInComplex" short-description="DetachChassisFromUnitInComplex" is-pre-deployed="N" groovy-code="/*&#xA;* Srno  Doer  Date       comment&#xA;* A1    GR    05/05/11   Added Obsolete Chassis Check&#xA;* A2    GR    05/26/11   For RM trans depart Active SitUnit&#xA;*/&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.argo.business.reference.Chassis&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.argo.business.reference.Equipment;&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import com.navis.inventory.business.atoms.EqUnitRoleEnum&#xA;import com.navis.framework.business.atoms.LifeCycleStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;&#xA;import java.util.List;&#xA;import java.util.Set;&#xA;&#xA;/**&#xA; * Detaches a chassis from a unit facility visit that has departed the facility but remains in the complex.&#xA; * This task is required so that chassis attached to a dray-off unit can be returned back into the gate.&#xA; */&#xA;public class DetachChassisFromUnitInComplex {&#xA;&#xA;&#xA;    public static String BEAN_ID = &quot;detachChassisFromUnitInComplex&quot;&#xA;&#xA;&#xA;    public void departActiveSitUnit(TransactionAndVisitHolder dao, api) {&#xA;        TruckTransaction tran = dao.tran&#xA;        tran.setTranChsPosition(null);&#xA;        Container cntr = tran.tranContainer&#xA;        if (!cntr)&#xA;            return&#xA;                    UnitFinder unitFinder = (UnitFinder) Roastery.getBean(UnitFinder.BEAN_ID)&#xA;        UnitEquipment unitEq = unitFinder.findActiveUeUsingEqInAnyRole(null, ContextHelper.getThreadComplex(), cntr)&#xA;        if (!unitEq)&#xA;            return&#xA;&#xA;                    Unit unit = unitEq.ueUnit&#xA;        if (!unit)&#xA;            return&#xA;        if(&quot;SIT&quot;.equals(unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;)) &amp;&amp; UnitVisitStateEnum.ACTIVE.equals(unit.unitActiveUfv.getUfvVisitState())){&#xA;            unit.makeDeparted();&#xA;            //Set Sparcs Visibility to false&#xA;            Set&lt;UnitFacilityVisit&gt; ufvSet = unit.getUnitUfvSet();&#xA;            for(UnitFacilityVisit ufv :ufvSet) {&#xA;                if(!ufv.isActive()) {&#xA;                    ufv.setUfvVisibleInSparcs(Boolean.FALSE);&#xA;                }&#xA;            }&#xA;            HibernateApi.getInstance().flush()&#xA;            return;&#xA;        }&#xA;    }&#xA;&#xA;    public void execute(TransactionAndVisitHolder dao, api) {&#xA;        TruckTransaction tran = dao.tran&#xA;        tran.setTranChsPosition(null);&#xA;        Chassis ch = tran.tranChassis&#xA;        if (!ch)&#xA;            return&#xA;                    UnitFinder unitFinder = (UnitFinder) Roastery.getBean(UnitFinder.BEAN_ID)&#xA;        UnitEquipment unitEq = unitFinder.findActiveUeUsingEqInAnyRole(null, ContextHelper.getThreadComplex(), ch)&#xA;        if (!unitEq)&#xA;            return&#xA;&#xA;                    Unit unit = unitEq.ueUnit&#xA;        if (!unit)&#xA;            return&#xA;        if (EqUnitRoleEnum.PRIMARY.equals(unitEq.getUeEqRole())) {&#xA;            unit.makeRetired();&#xA;            HibernateApi.getInstance().flush()&#xA;            return;&#xA;        }&#xA;        UnitFacilityVisit ufv = unit.getUfvForFacilityNewest(ContextHelper.getThreadFacility())&#xA;        if (!ufv)&#xA;            return&#xA;&#xA;                    // uncomment the if condition below when chassis inventory is managed properly&#xA;                    //if (!ufv.isInFacility()) {&#xA;                    unit.swipeChsByOwnersChs()&#xA;        //}&#xA;        // The flush is required to synchronize memory state of the unit with database state of the unit&#xA;        // so that the next findActiveUe will not result in an active chassis unit equipment.&#xA;        HibernateApi.getInstance().flush()&#xA;    }&#xA;&#xA;    //A1&#xA;    public void obsoleteChasCheck(inDao)&#xA;    {&#xA;        def chassis = inDao.tran.tranChassis&#xA;        if(chassis != null){&#xA;            LifeCycleStateEnum chasLifeCycle = chassis.eqLifeCycleState&#xA;            if(LifeCycleStateEnum.OBSOLETE.equals(chasLifeCycle)){&#xA;                throw com.navis.framework.util.BizFailure.create(&quot;CHASSIS IS OBSOLETE. -- CALL GATE SUPPORT -- &quot;);&#xA;            }&#xA;        }&#xA;    }&#xA;    //Method to detach the chassis from any unit that is departed in the facility but active in complex&#xA;&#xA;    public void detachChassisFromDepartedUnit(Unit inUnit, GroovyApi inApi) {&#xA;        if (inUnit != null) {&#xA;            UnitEquipment unitEquipment = inUnit.getUnitCarriageUe();&#xA;            if (unitEquipment != null) {&#xA;                UnitFinder unitFinder = (UnitFinder) Roastery.getBean(UnitFinder.BEAN_ID);&#xA;                Equipment eq = unitEquipment.getUeEquipment();&#xA;                List&lt;UnitEquipment&gt; unitEqList = unitFinder.findNotDetachedUnitEquipment(null, ContextHelper.getThreadComplex(), eq, false);&#xA;                if (unitEqList != null &amp;&amp; !unitEqList.isEmpty()) {&#xA;                    for (UnitEquipment unitEq : unitEqList) {&#xA;                        if (unitEquipment != null) {&#xA;                            try {&#xA;                                Unit unit = unitEq.getUeUnit();&#xA;                                if (unit != null &amp;&amp; unit.getUnitVisitState() != null &amp;&amp; UnitVisitStateEnum.ACTIVE.equals(unit.getUnitVisitState())&#xA;                                        &amp;&amp; !unit.equals(inUnit)) {&#xA;                                    unit.swipeChsByOwnersChs();&#xA;                                    inApi.logWarn(&quot;Completed dismountChassis() during Discharge&quot;);&#xA;                                }&#xA;                            } catch (Exception e) {&#xA;                                //&#xA;                            }&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;" />
<digital-asset id="GvyCmisEventCorrection" short-description="GvyCmisEventCorrection" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.api.NoticeManager;&#xA;import com.navis.framework.business.Roastery;&#xA;&#xA;public class GvyCmisEventCorrection extends GroovyInjectionBase &#xA;{&#xA;&#xA;  public String execute(Map inParameters)&#xA;  {&#xA;    try&#xA;    {&#xA;       def eventGKey = (String) inParameters.get(&quot;eventGkey&quot;);&#xA;       println(&quot;Event GKey ------------------------------------------------------------::&quot;+eventGKey)&#xA;       NoticeManager noticeManager = (NoticeManager) Roastery.getBean(NoticeManager.BEAN_ID);&#xA;       noticeManager.generateNotices( new Long(eventGKey));&#xA;&#xA;     }catch(Exception e){&#xA;       e.printStackTrace()&#xA;    }&#xA;&#xA;  }//Method execute Ends&#xA;&#xA;&#xA;}//Class Ends" />
<digital-asset id="N4EnvClassLoader" short-description="N4EnvClassLoader" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;/**&#xA; * Lookup a implementation by version number.&#xA;* And Example:&#xA;*         com.navis.apex.business.model.GroovyInjectionBase api = new  com.navis.apex.business.model.GroovyInjectionBase();&#xA;*         api.getGroovyClassInstance(&quot;N4EnvClassLoader&quot;);&#xA;*         api.getGroovyClassInstance(&quot;N4EnvClassLoader&quot;).getEnvClass(&quot;AcetsConfig&quot;);&#xA; * @author Steven Bauer&#xA; * A1  GR   10/25/11  Removed Weblogic API&#xA; * A2  GR    11/10/11  TOS2.1 Get Environment Variable&#xA; */&#xA;public class N4EnvClassLoader extends GroovyInjectionBase{&#xA;&#x9;/**&#xA;&#x9; * Configure the version you want deployed for each environment.&#xA;&#x9; */&#xA;&#x9;private static int devVersion = 1;&#xA;&#x9;private static int qaVersion  = 0;&#xA;&#x9;private static int preVersion = 0;&#xA;&#x9;private static int prodVersion = 0;&#xA;&#x9;&#xA;&#x9;private static String envType;&#xA;&#x9;private static N4EnvClassLoader loader;&#xA;&#xA;&#x9;private Map&lt;String, LinkedHashMap&gt; map;&#xA;&#x9;&#xA;&#x9;static {&#xA;&#x9;&#x9;GroovyApi groovyApi = new GroovyApi();&#xA;&#xA;&#x9;        HashMap map = new HashMap();&#xA;// Versions muist be in order from largest to smallest!&#xA;map.put(&quot;AcetsConfig&quot;,[4 : 'AcetsConfig4',3 : 'AcetsConfig3', 1 : 'AcetsConfig1']);&#xA;&#x9;       &#xA;                             loader =  new N4EnvClassLoader(map);&#xA;   &#x9; }&#xA;&#x9;&#xA;&#x9;public String getEnvVersion()  {&#xA;     String envType = groovyApi.getReferenceValue(&quot;ENV&quot;, &quot;ENVIRONMENT&quot;, null, null, 1) &#xA;&#x9; if(&quot;PRODUCTION&quot;.equals(envType)){&#xA;&#x9;&#x9; return &quot;&quot;;&#xA;     }&#xA;     return envType+&quot; &quot;;&#xA;    }&#x9; &#xA;&#x9;&#xA;&#x9;public Object getGroovyClassInstance(String clazz) {&#xA;&#x9;&#x9;int version = getEnvVersion();&#xA;&#x9;&#x9;LinkedHashMap clazzMap = map.get(clazz);&#xA;&#x9;&#x9;if(clazzMap == null ) return null;&#xA;&#x9;&#x9;def entry = null;&#xA;&#x9;&#x9;clazzMap.each{ if(it.key &lt;= version) entry = it.value; }&#xA;&#x9;&#x9;if(entry != null) return super.getGroovyClassInstance(entry);&#xA;&#x9;&#x9;else return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public N4EnvClassLoader() {&#xA;&#x9;   this.map = loader.map;&#xA;&#x9;}&#xA;&#x9;/**&#xA;&#x9; * Constructor for a mapped class lookup.&#xA;&#x9; */&#xA;&#x9;public N4EnvClassLoader(Map&lt;String, LinkedHashMap&gt; map) {&#xA;&#x9;&#x9;this.map = map;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Add entries to List implementations for classes you want to &#xA;&#x9; * load using the  &#xA;&#x9; */&#xA;&#x9;public static Object getEnvClass(String clazz) {&#xA;&#x9;&#x9;if(loader != null)  return loader.getGroovyClassInstance(clazz);&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#xA;&#xA;}" />
<digital-asset id="GvyCmisListAction" short-description="GvyCmisListAction" is-pre-deployed="N" groovy-code="public class GvyCmisListAction &#xA;{&#xA;&#x9;&#xA;    LinkedHashSet linkedSet = new LinkedHashSet();&#xA;&#x9;&#xA;    public void setActionList(String action)&#xA;    {&#xA;         linkedSet.add(action);&#xA;     }&#xA;&#x9;&#xA;     public LinkedHashSet  getActionList()&#xA;    {&#xA;        return linkedSet;&#xA;     }&#xA;&#xA;}&#xA;" />
<digital-asset id="GvySnxUpdateProcessor" short-description="GvySnxUpdateProcessor" is-pre-deployed="N" groovy-code="/*&#xA;* SrNo  Doer Date      Change&#xA;* A1    GR   07/08/10  Optimized UNIT_SNX_UPDATE  event&#xA;                       Added Consignee DAS message Change&#xA;* A2    GR   10/20/10  Post NewVes  EDT and BDC Directly to Gems&#xA;* A3    GR   10/22/10  Merging NV,NLT,SUP Processing into method procBatchExecution&#xA;                       Remove item8 from Unit_Snx_Update&#xA;* A4    GR   12/10/10  Switched Order On BDC and EDT&#xA;* A5    GR   02/02/11  POST to SAF queue for Gems&#xA;* A6    GR   02/16/11  Flip LinOpt for MAESRK Containers&#xA;* A7    GR   04/08/11  PDU for WO transfer units direct to gems&#xA;* A8    GR   04/13/11  Roll Booking  commodity over to Unit notes&#xA;* A9    GR   05/25/11  TT#12506 Set EqOperator and BLnr space check&#xA;* A10   GR   10/06/11  TT# Added EDT and BDC to supplimental&#xA;* A11   GR   10/27/11  TOS2.1 : Update  code to set EqOwner in Snx NLT process&#xA;* A11   GR   10/27/11  TOS2.1 : Added Equipment&#xA;* A12   GR   11/14/11  Supp Check to only post EDT&amp;BDC is unit-ufv is not departed&#xA;* A13   GR   11/14/11  Issue Updating Equipment Operator&#xA;* A14   GR   12/13/11  Update HOLD FOR LNK&#xA;* A15   GR   12/16/11  TOS2.1 : Update EqOpreator and Line Operator Multiple lines&#xA;* A16   GR   12/16/11  Added Owners to  General Reference&#xA;* A17   GR   01/04/11  Refresh Unit on Vessel&#xA;* A18   GR   01/11/12  YB cargoStatus  notificatio issue on Supplemental&#xA;* A19   GR   01/11/12  Suppress Add/Release hold on departed Supplemental  unit TT#15076&#xA;* A20   GR   03/08/12  Lookup currentFacility ufvState for Departed unit.&#xA;* A21   GR   04/12/12  NullPOinter Check on ufv.&#xA;        GB   05/21/12  NewVes Refresh on Last Unit.&#xA;  A22   LC   03/11/13  Add procCmisDataRefresh for NLT process&#xA;  A23   LC   06/13/13  Add Client NewVes CmisDataRefresh&#xA;  A24   KM   06/12/14  Release hold on departed unit TT# EP000205569&#xA;*/&#xA;&#xA;import com.navis.control.portal.optimization.IUnit&#xA;import com.navis.inventory.business.units.Routing;&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.api.IFlagType&#xA;import com.navis.argo.business.atoms.FlagPurposeEnum&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.argo.business.atoms.LogicalEntityEnum;&#xA;import com.navis.argo.business.api.LogicalEntity;&#xA;import com.navis.argo.business.api.Serviceable;&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;import com.navis.argo.business.atoms.FreightKindEnum;&#xA;import com.navis.argo.business.api.IBizUnitManager;&#xA;import com.navis.inventory.business.units.UnitEquipment;&#xA;import com.navis.argo.business.atoms.DataSourceEnum;&#xA;import com.navis.argo.business.reference.Equipment;&#xA;import com.navis.argo.business.atoms.BizRoleEnum;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.argo.business.model.Operator;&#xA;import java.util.Calendar&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.argo.business.atoms.EventEnum;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.argo.business.reference.Group&#xA;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.framework.portal.FieldChanges;&#xA;import com.navis.argo.business.reference.RoutingPoint;&#xA;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.inventory.business.api.UnitField;&#xA;import com.navis.inventory.InventoryEntity;&#xA;&#xA;public class GvySnxUpdateProcessor {&#xA;    def servicesMgr = (ServicesManager) Roastery.getBean(&quot;servicesManager&quot;);&#xA;&#xA;    public void procBatchExecution(Object api, Object event, Object unit, Object dtnFlag) {&#xA;        def note = event.event.evntNote;&#xA;        if (note.contains(&quot;Supplemental&quot;)) {&#xA;            procSupplemental(api, event, unit, dtnFlag)&#xA;        } else if (note.contains(&quot;NewVes&quot;)) {&#xA;            procNewVes(api, event, unit, dtnFlag)&#xA;        } else if (note.contains(&quot;NIS Load Transaction&quot;)) {&#xA;            procNLT(api, event, unit)&#xA;        }&#xA;    }&#xA;&#xA;    private void procCmisDataRefresh(Object api, Object event, Object unit) {&#xA;        def note = event.event.evntNote;&#xA;        try {&#xA;            def doer = event.event.evntAppliedBy;&#xA;            doer = doer.replace('user:', '');&#xA;            com.navis.argo.ContextHelper.setThreadExternalUser(doer);&#xA;            def sendEvent = new GroovyEvent(null, unit);&#xA;            sendEvent.postNewEvent(&quot;CMIS_DATA_REFRESH&quot;, note);&#xA;            api.logWarn(&quot;GvySnxUpdateProcessor.procCmisDataRefresh() completed&quot;);&#xA;        } catch (Exception e) {&#xA;            api.log(&quot;Exception in GvySnxUpdateProcessor.procCmisDataRefresh() &quot; + e);&#xA;        }&#xA;    }&#xA;&#xA;    public void procSupplemental(Object api, Object event, Object unit, Object dtnFlag) {&#xA;        try {&#xA;            def gvyEventUtil = api.getGroovyClassInstance(&quot;GvyEventUtil&quot;)&#xA;            def gvyCmisUtil = api.getGroovyClassInstance(&quot;GvyCmisUtil&quot;)&#xA;&#xA;            def updtdischPort = gvyEventUtil.wasFieldChanged(event, 'rtgPOD1')&#xA;            def dischPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;            //5.1 Reroute Supplemental units to Barge&#xA;            if (updtdischPort) {&#xA;                def gvyRerouteObj = api.getGroovyClassInstance(&quot;GvyCmisEventUnitReroute&quot;)&#xA;                gvyRerouteObj.setOBCarrierOnPODChng(unit, gvyEventUtil, gvyCmisUtil, event)&#xA;            }&#xA;            //5.2 - 06/16/2010  DAS Messages Consignee Updt and  On AvailDate Proc Flag&#xA;            def consigneeChng = gvyEventUtil.wasFieldChanged(event, 'gdsConsigneeAsString')&#xA;            def unitDetails = api.getGroovyClassInstance(&quot;GvyCmisDataProcessor&quot;)&#xA;            def unitDtl = unitDetails.doIt(event)&#xA;            if (dtnFlag || consigneeChng) {&#xA;                def gvyDentObj = api.getGroovyClassInstance(&quot;GvyCmisDetentionMsgProcess&quot;);&#xA;                gvyDentObj.detentionProcess(unitDtl, event, api)&#xA;            }&#xA;&#xA;            //A10 Starts - Blanket EDT [Remark,Shipper,consignee,freightkind]&#xA;            //A11 - IF unit is departed&#xA;            def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;            def ufv = unit.getUfvForFacilityCompletedOnly(fcy); //If Departed get facility ufv&#xA;            def visitState = ufv != null ? ufv.getFieldValue(&quot;ufvVisitState&quot;) : null; //A21&#xA;            if (visitState == null) {&#xA;                visitState = unit.getFieldValue(&quot;unitActiveUfv.ufvVisitState&quot;);&#xA;            }&#xA;            boolean isDeparted = visitState == null || UnitVisitStateEnum.DEPARTED.equals(visitState) ? true : false&#xA;            if (!isDeparted) {&#xA;                def xml = gvyCmisUtil.eventSpecificFieldValue(unitDtl, &quot;dischargePort=&quot;, dischPort);&#xA;                gvyCmisUtil.postMsgForAction(xml, api, &quot;EDT&quot;)&#xA;&#xA;&#xA;                def blNbrChng = gvyEventUtil.wasFieldChanged(event, 'gdsBlNbr')&#xA;                def destinationChng = gvyEventUtil.wasFieldChanged(event, 'gdsDestination')&#xA;                def polChng = gvyEventUtil.wasFieldChanged(event, 'rtgPOL')&#xA;&#xA;                if (blNbrChng || destinationChng || updtdischPort || polChng) {&#xA;                    gvyCmisUtil.postMsgForAction(xml, api, &quot;BDC&quot;)&#xA;                }&#xA;            }&#xA;            //A10 - Ends&#xA;&#xA;            //5.3. Cargo Status Report&#xA;            def prevGroup = gvyEventUtil.getPreviousPropertyAsString(event, &quot;rtgGroup&quot;);&#xA;            //event.getPreviousPropertyAsString(&quot;RoutingGroup&quot;);  // A19&#xA;            if (prevGroup != null) {&#xA;                prevGroup = lookupGroupId(prevGroup)&#xA;            }&#xA;            def group = unit.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;);&#xA;            def isNisPort = gvyCmisUtil.isNISPort(dischPort)&#xA;            if ('YB'.equals(prevGroup) &amp;&amp; group == null &amp;&amp; isDeparted &amp;&amp; isNisPort) {&#xA;                println(&quot;Dont Post CRS for YB&quot;)&#xA;            } else {&#xA;                def cargoStatusGvy = api.getGroovyClassInstance(&quot;GvyUnitCargoStatus&quot;);&#xA;                def ret = cargoStatusGvy.sendXml(&quot;CARGO_STATUS&quot;, event);&#xA;                api.sendXml(ret);&#xA;            }&#xA;&#xA;            // Invoke SIT_UNASSSIGN if notes contain SIT_DEL&#xA;            // This is fix supplemental SIT remove issue, after invoking the SIT_UNASSIGN removing SIT_DEL from unit notes&#xA;            def unitRemark = unit.getFieldValue(&quot;unitRemark&quot;);&#xA;            def commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#xA;            commodity = commodity != null ? commodity : &quot;NOSIT&quot;;&#xA;            println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;unitRemark&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot; + unitRemark);&#xA;            println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;commodity&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot; + commodity);&#xA;&#xA;            Routing routing = unit.getUnitRouting();&#xA;            String rtgGroup = routing.getRtgGroup();&#xA;            String drayStatus = unit.getFieldValue(&quot;unitDrayStatus&quot;);&#xA;&#xA;            rtgGroup = rtgGroup != null ? rtgGroup : &quot;NOWO&quot;;&#xA;&#xA;            println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;rtgGroup 1 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot; + rtgGroup);&#xA;            //println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;drayStatusKey&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+drayStatusKey);&#xA;&#xA;            if (unitRemark != null &amp;&amp; unitRemark.contains(&quot;~1&quot;) &amp;&amp; commodity == &quot;SIT&quot;) {&#xA;                unitRemark = unitRemark.replace(&quot;~1&quot;, &quot;&quot;);&#xA;                unitRemark = unitRemark.trim();&#xA;                unit.setFieldValue(&quot;unitRemark&quot;, unitRemark);&#xA;                println(&quot;Recording SIT_UNASSIGN&quot;);&#xA;                def sendEvent = new GroovyEvent(null, unit);&#xA;                def note = event.event.evntNote;&#xA;                sendEvent.postNewEvent(&quot;SIT_UNASSIGN&quot;, note);&#xA;            }&#xA;&#xA;            println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;rtgGroup 2&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot; + rtgGroup);&#xA;            println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;drayStatus&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot; + drayStatus);&#xA;&#xA;            if (unitRemark != null &amp;&amp; unitRemark.contains(&quot;~2&quot;) &amp;&amp; drayStatus != null &amp;&amp; drayStatus.contains(&quot;OFFSITE&quot;)) {&#xA;                println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;Inside WO_Update&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot; + drayStatus);&#xA;                try {&#xA;                    unitRemark = unitRemark.replace(&quot;~2&quot;, &quot;&quot;);&#xA;                    unitRemark = unitRemark.trim();&#xA;                    unit.setFieldValue(&quot;unitRemark&quot;, unitRemark);&#xA;                    println(&quot;Recording TRANSFER_CANCEL&quot;);&#xA;                    def sendEvent = new GroovyEvent(null, unit);&#xA;                    def note = event.event.evntNote;&#xA;                    sendEvent.postNewEvent(&quot;TRANSFER_CANCEL&quot;, note);&#xA;                } catch (Exception e) {&#xA;                    println(&quot;Exception in WO rtgGroup changes &quot; + e);&#xA;                }&#xA;            }&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;    //A2,A4,A7&#xA;    public void procNewVes(Object api, Object event, Object unit, Object dtnFlag) {&#xA;        try {&#xA;&#xA;            def category = unit.getFieldValue(&quot;unitCategory&quot;);&#xA;&#xA;            println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;unitCategory-procNewVes&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot; + category);&#xA;&#xA;            def unitDetails = api.getGroovyClassInstance(&quot;GvyCmisDataProcessor&quot;)&#xA;            def unitDtl = unitDetails.doIt(event)&#xA;            def gvyCmisUtil = api.getGroovyClassInstance(&quot;GvyCmisUtil&quot;)&#xA;            println(&quot;::::procNewVes:::::&quot;)&#xA;            //Post Directly to Gems(N4Topic)Bypass TDP&#xA;            //def jmsTopicSender = api.getGroovyClassInstance(&quot;JMSTopicSender&quot;)&#xA;            def jmsQueueSender = api.getGroovyClassInstance(&quot;JMSQueueSender&quot;) //A5&#xA;            def groupCode = unit.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;);&#xA;&#xA;            def comm = gvyCmisUtil.getFieldValues(unitDtl, &quot;commodity=&quot;);&#xA;            println(&quot;Commodity is :::&quot; + comm);&#xA;            //PDU for WO transfer units&#xA;            if ('XFER-WO'.equals(groupCode)) {&#xA;                def xmlpdu = gvyCmisUtil.eventSpecificFieldValue(unitDtl, &quot;action=&quot;, &quot;PDU&quot;)&#xA;                xmlpdu = gvyCmisUtil.eventSpecificFieldValue(xmlpdu, &quot;lastAction=&quot;, &quot;PDU&quot;)&#xA;                //A23&#xA;                if (xmlpdu != null &amp;&amp; (!(xmlpdu.contains(&quot;DO NOT EDIT-NEWVES&quot;) || xmlpdu.contains(&quot;ZZZZ&quot;)))) {&#xA;                    println(&quot;SENDING PDU during SNX IMPORT of NEWVES&quot;)&#xA;                    jmsQueueSender.send(xmlpdu);&#xA;                } else {&#xA;                    println(&quot; PDU NOT POSTED DURING NEWVES IMPORT BECAUSE OF BOOKING HAVING DO NOT EDIT STRING&quot;)&#xA;                }&#xA;                println(&quot;PDU DIRECT TO GEMS=&quot; + xmlpdu)&#xA;                // println(&quot;FOR TDP-NEWVES PROCESS: STRIPPED DO NOT EDIT &amp; ZZZZ ::: PDU DIRECT TO GEMS=&quot;+xmlpdu)&#xA;            }&#xA;&#xA;            //BDC&#xA;            def xmlBdc = gvyCmisUtil.eventSpecificFieldValue(unitDtl, &quot;action=&quot;, &quot;BDC&quot;)&#xA;            xmlBdc = gvyCmisUtil.eventSpecificFieldValue(xmlBdc, &quot;lastAction=&quot;, &quot;BDC&quot;)&#xA;            //A23&#xA;            if (xmlBdc != null &amp;&amp; (!(xmlBdc.contains(&quot;DO NOT EDIT-NEWVES&quot;) || xmlBdc.contains(&quot;ZZZZ&quot;)))) {&#xA;                println(&quot;SENDING BDC during SNX IMPORT of NEWVES&quot;)&#xA;                jmsQueueSender.send(xmlBdc);&#xA;            } else {&#xA;                println(&quot; BDC NOT POSTED DURING NEWVES IMPORT BECAUSE OF BOOKING HAVING DO NOT EDIT STRING&quot;)&#xA;            }&#xA;&#xA;            println(&quot;BDC DIRECT TO GEMS=&quot; + xmlBdc)&#xA;            // println(&quot;FOR TDP-NEWVES PROCESS: STRIPPED DO NOT EDIT &amp; ZZZZ ::: BDC DIRECT TO GEMS=&quot;+xmlBdc)&#xA;&#xA;            //EDT&#xA;            def xmlEdt = gvyCmisUtil.eventSpecificFieldValue(unitDtl, &quot;action=&quot;, &quot;EDT&quot;)&#xA;            xmlEdt = gvyCmisUtil.eventSpecificFieldValue(xmlEdt, &quot;lastAction=&quot;, &quot;EDT&quot;)&#xA;            //A23&#xA;            if (xmlEdt != null &amp;&amp; (!(xmlEdt.contains(&quot;DO NOT EDIT-NEWVES&quot;) || xmlEdt.contains(&quot;ZZZZ&quot;)))) {&#xA;                println(&quot;SENDING EDT during SNX IMPORT of NEWVES&quot;)&#xA;                jmsQueueSender.send(xmlEdt);&#xA;            } else {&#xA;                println(&quot; EDT NOT POSTED DURING NEWVES IMPORT BECAUSE OF BOOKING HAVING DO NOT EDIT STRING&quot;)&#xA;            }&#xA;&#xA;            println(&quot;EDT DIRECT TO GEMS=&quot; + xmlEdt)&#xA;            //println(&quot;FOR TDP-NEWVES PROCESS: STRIPPED DO NOT EDIT &amp; ZZZZ ::: EDT DIRECT TO GEMS=&quot;+xmlEdt)&#xA;&#xA;            println(&quot;Setting editFlag to empty... &quot; + unit.unitId)&#xA;            unit.setUnitFlexString11(&quot;&quot;);&#xA;&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;    public void procNLT(Object api, Object event, Object unit) {&#xA;        try {&#xA;            def gvyEquiObj = api.getGroovyClassInstance(&quot;GvyCmisEquiDetail&quot;);&#xA;            //Flip Mty Cli Cntr from MAT to Cli Operator(11/23/2009)&#xA;            gvyEquiObj.flipMtyCliCntrOperator(unit)&#xA;            //05/17/2010 - Post ALE bare chassis to NOW&#xA;            if ('CHASSIS'.equals(unit.unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass.key)) {&#xA;                def gvyNow = api.getGroovyClassInstance(&quot;NowChassisTrackingBuilder&quot;)&#xA;                gvyNow.nowMessagesProcessor(event, api)&#xA;            }&#xA;&#xA;            //A8-04/13/11 setting BKGNBR  to BL_NBR  and BKG Notes(commodity) to UnitNotes&#xA;            def expGateBkgNbr = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;)&#xA;            def bkgNotes = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqoNotes&quot;)&#xA;            def commodity = bkgNotes != null ? bkgNotes.substring(0, bkgNotes.indexOf(&quot;:&quot;)) : &quot;&quot;&#xA;            commodity = commodity.trim().length() &gt; 0 ? commodity : null&#xA;            if (expGateBkgNbr != null) {&#xA;                if (commodity != null) {&#xA;                    unit.setFieldValue(&quot;unitRemark&quot;, commodity)&#xA;                }&#xA;            }&#xA;&#xA;            //A6 - Flip Maersk Container unit line operator on the NLT execution&#xA;            def freightkind = unit.getFieldValue(&quot;unitFreightKind&quot;)&#xA;            def equiOwner = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOwner.bzuId&quot;)&#xA;            def blNbr = unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;)&#xA;            if (FreightKindEnum.MTY.equals(freightkind) &amp;&amp; ownersToFlipLine(equiOwner, api) &amp;&amp; (blNbr == null || blNbr.trim().length() == 0)) {&#xA;                setUnitAndEqOperator(unit, equiOwner)&#xA;            }//A15&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;    //Method Get Active Holds for Unit&#xA;    public String releaseHoldsPermissions(Object unit, String notes) {&#xA;        if (notes == null) {&#xA;            return&#xA;        }&#xA;        //A19 - Do not Add/Release Hold for Departed unit&#xA;        com.navis.argo.ContextHelper.setThreadExternalUser(&quot;-jms-&quot;);&#xA;        def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;        def ufv = unit.getUfvForFacilityCompletedOnly(fcy);  //If Departed get facility ufv&#xA;        def ufvVisit = ufv != null ? ufv.getFieldValue(&quot;ufvVisitState&quot;) : null;&#xA;        if (ufvVisit == null) {&#xA;            ufvVisit = unit.getFieldValue(&quot;unitActiveUfv.ufvVisitState&quot;);&#xA;        }&#xA;        /* boolean isDeparted = UnitVisitStateEnum.DEPARTED.equals(ufvVisit) ? true : false  //A24 km**&#xA;          if(notes.contains(&quot;Supplemental&quot;) &amp;&amp; isDeparted){&#xA;             return;&#xA;          } */&#xA;        try {&#xA;            def snxflags = notes.indexOf('(') != -1 &amp;&amp; notes.indexOf(')') != -1 ? notes.substring(notes.indexOf('(') + 1, notes.indexOf(')')) : ''&#xA;            def holdFlags = unit.getFieldValue(&quot;unitAppliedHoldOrPermName&quot;)&#xA;            def flagIds = holdFlags != null ? holdFlags.split(&quot;,&quot;) : ''&#xA;            println(&quot;holdFlags:&quot; + holdFlags + &quot;flagIds&quot; + flagIds);&#xA;            for (holdId in flagIds) {&#xA;                def iFlageType = servicesMgr.getFlagTypeById(holdId)&#xA;                def logicalEntity = iFlageType.getAppliesTo()&#xA;                def flagPurpose = iFlageType.getPurpose().getKey()&#xA;                println(&quot;flagPurpose:&quot; + flagPurpose + &quot;snxflags&quot; + snxflags + &quot;holdId:&quot; + holdId);&#xA;                if (flagPurpose.equals('HOLD') &amp;&amp; !snxflags.contains(holdId)) {&#xA;              //  if (flagPurpose.equals('HOLD') &amp;&amp; !snxflags.contains(holdId) || flagPurpose.equals('HOLD') &amp;&amp; holdToRel(holdId,unit)) {&#xA;                    //Releasing Equip Holds&#xA;                    if (logicalEntity.equals(LogicalEntityEnum.EQ) || logicalEntity.equals(LogicalEntityEnum.CTR)) {&#xA;                        //Commented on 05/15/09 as Equi Holds Should be Released&#xA;                        /* def equipmentId =  unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqIdFull&quot;)&#xA;                         def equipObj   =  Equipment.loadEquipment(equipmentId);&#xA;                         def operator = com.navis.argo.business.model.Operator.findOperator(&quot;MATSON&quot;);&#xA;                          def equipmentState =    com.navis.inventory.business.units.EquipmentState.findEquipmentState(equipObj,operator);&#xA;                          releaseHold(equipmentState,holdId) */&#xA;                    } else if (logicalEntity.equals(LogicalEntityEnum.UNIT) &amp;&amp; filterHoldToRel(holdId)) {&#xA;                        releaseHold(unit, holdId);&#xA;                    }&#xA;                }&#xA;            }//for ends&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;&#xA;    }//Method Ends&#xA;&#xA;    //FOR NLT Process Set the Unit and Equipment Line Operator&#xA;    public void setUnitAndEqOperator(Object unit, String owner) {&#xA;        try {&#xA;            def line = owner.substring(0, owner.length() - 1);&#xA;            def operator = LineOperator.findLineOperatorById(line);&#xA;            unit.setUnitLineOperator(operator); //Update  unit Operator&#xA;            def eqOperator = Operator.findOperator(&quot;MATSON&quot;)&#xA;            Equipment equipment = unit.unitPrimaryUe.ueEquipment&#xA;            def state = com.navis.inventory.business.units.EquipmentState.findOrCreateEquipmentState(equipment, eqOperator);&#xA;            def bzu = ScopedBizUnit.findScopedBizUnit(line, BizRoleEnum.LINEOP);&#xA;            state.upgradeEqOperator(equipment, bzu, DataSourceEnum.USER_DBA);&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;    public String releaseHold(Object unit, String holdId) {&#xA;        try {&#xA;            println(&quot;releaseHold unit:&quot; + unit + &quot;holdId:&quot; + holdId);&#xA;            com.navis.argo.ContextHelper.setThreadExternalUser(&quot;-jms-&quot;);&#xA;            servicesMgr.applyPermission(holdId, unit, null, &quot;Hold Released by NV/NLT/SUPP&quot;, true)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;&#xA;    }&#xA;&#xA;    public boolean filterHoldToRel(String holdId) {&#xA;        try {&#xA;            String arrHolds = [&quot;TD&quot;, &quot;TI&quot;, &quot;TS&quot;, &quot;ULK&quot;, &quot;XT&quot;, &quot;OUTGATE&quot;, &quot;HOLD  FOR LNK&quot;, &quot;ST&quot;, &quot;RM&quot;, &quot;CAR&quot;, &quot;GX&quot;]&#xA;            println(&quot;Filter Hold:&quot; + arrHolds.contains(holdId) + &quot;holdId:&quot; + holdId);&#xA;            if (!arrHolds.contains(holdId)) {&#xA;                return true;&#xA;            }&#xA;            return false&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;&#xA;    }&#xA;&#xA;    public boolean holdToRel(String holdId, def unit) {&#xA;        try {&#xA;&#xA;            if (unit == null) return false;&#xA;&#xA;            Unit unit1 = unit as Unit;&#xA;&#xA;            println(&quot;holdToRel unit1:&quot; + unit1.toString());&#xA;&#xA;            if (unit1.getUnitGoods() == null) return false;&#xA;&#xA;            println(&quot;holdToRel unit1.getUnitGoods():&quot; + unit1.getUnitGoods().toString());&#xA;&#xA;            if (unit1.getUnitGoods().getGdsBlNbr() == null) return false;&#xA;&#xA;            println(&quot;holdToRel unit1.getUnitGoods().getGdsBlNbr():&quot; + unit1.getUnitGoods().getGdsBlNbr());&#xA;&#xA;            def unitBlNbr = unit1.getUnitGoods().getGdsBlNbr();&#xA;&#xA;            if (unitBlNbr != null &amp;&amp; !unitBlNbr.contains(&quot;DO NOT EDIT-NEWVES&quot;)) {&#xA;&#xA;                println(&quot;holdToRel Hold:&quot; + arrHolds.contains(holdId) + &quot;holdId:&quot; + holdId);&#xA;                String arrHolds = [&quot;SNX-HOLD&quot;]&#xA;                println(&quot;holdToRel Hold:&quot; + arrHolds.contains(holdId) + &quot;holdId:&quot; + holdId);&#xA;                if (arrHolds.contains(holdId)) {&#xA;                    return true;&#xA;                }&#xA;            }&#xA;            return false&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;&#xA;    }&#xA;&#xA;    public boolean ownersToFlipLine(String owners, Object api) {&#xA;        try {&#xA;            String ownerNlt = api.getReferenceValue(&quot;NLT_OWNER&quot;, &quot;NLT_OWNER&quot;, null, null, 1)  //A16&#xA;            if (ownerNlt.contains(owners)) {&#xA;                return true;&#xA;            }&#xA;            return false&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;// A17 - Refresh Newves and NLT units&#xA;    public void refreshUnitsOnVessel(Object unit) {&#xA;        try {&#xA;            Date tagTime = new Date(com.navis.argo.business.api.ArgoUtils.timeNowMillis() + 1);&#xA;            def gvyBase = new GroovyInjectionBase();&#xA;            def cv = unit.unitActiveUfv.ufvActualIbCv;&#xA;            def unitFinder = gvyBase.getUnitFinder();&#xA;            def list = unitFinder.findAllUnitsByDeclaredIbCarrier(cv);&#xA;            def iter = list.iterator();&#xA;            while (iter.hasNext()) {&#xA;                def aUnit = iter.next();&#xA;                com.navis.inventory.business.units.ImpedimentsBean impedimentsBean = aUnit.calculateImpediments(true);&#xA;                if (impedimentsBean != null) {&#xA;                    aUnit.updateImpediments(impedimentsBean, tagTime);&#xA;                    HibernateApi.getInstance().saveOrUpdate(aUnit);&#xA;                    println(&quot;Refreshed NV/NLT unit =&quot; + aUnit.unitId)&#xA;                }//if ends&#xA;            }//while ends&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }//try  ends&#xA;&#xA;    }//Method Ends&#xA;&#xA;    // A17 - Refresh Supplemental units&#xA;    public void refreshSuppUnits() {&#xA;        try {&#xA;            Date tagTime = new Date(com.navis.argo.business.api.ArgoUtils.timeNowMillis() + 1);&#xA;            def gvyBase = new GroovyInjectionBase();&#xA;            Calendar calendarHst = Calendar.getInstance();&#xA;            def endDateTimeHst = calendarHst.getTime()&#xA;&#xA;            calendarHst.add(Calendar.MINUTE, -30);&#xA;            def startDateTimeHst = calendarHst.getTime()&#xA;&#xA;            EventType evntSnx = EventType.resolveIEventType(EventEnum.UNIT_SNX_UPDATE);&#xA;            EventType[] evntTypeArr = [evntSnx]&#xA;&#xA;            def gvyRptEventUtil = gvyBase.getGroovyClassInstance(&quot;GvyReportEventUtil&quot;)&#xA;            List list = gvyRptEventUtil.getEventsByCreatedDate(startDateTimeHst, endDateTimeHst, evntTypeArr)&#xA;            def iter = list.iterator();&#xA;            while (iter.hasNext()) {&#xA;                def aEvent = iter.next();&#xA;                def inCtrId = aEvent.getEventAppliedToNaturalKey();&#xA;                def ufv = gvyBase.findActiveUfv(inCtrId)&#xA;                def aUnit = ufv.getUfvUnit();&#xA;                com.navis.inventory.business.units.ImpedimentsBean impedimentsBean = aUnit.calculateImpediments(true);&#xA;                if (impedimentsBean != null) {&#xA;                    aUnit.updateImpediments(impedimentsBean, tagTime);&#xA;                    HibernateApi.getInstance().saveOrUpdate(aUnit);&#xA;                }//if ends&#xA;                println(&quot;Refreshed Supp unit =&quot; + aUnit.unitId)&#xA;            }&#xA;        } catch (Exception ex) {&#xA;            ex.printStackTrace();&#xA;        }&#xA;&#xA;    }//Method Ends&#xA;&#xA;    public String lookupGroupId(String Gkey) {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(&quot;Group&quot;).addDqPredicate(PredicateFactory.eq(com.navis.argo.ArgoRefField.GRP_GKEY, Gkey));&#xA;        Group grp = (Group) HibernateApi.getInstance().getUniqueEntityByDomainQuery(dq);&#xA;        if (grp == null) {&#xA;            return &quot;&quot;;&#xA;        }&#xA;        return grp.grpId;&#xA;    }&#xA;&#xA;}" />
<digital-asset id="MatUpdateTagId" short-description="MatUpdateTagId" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;&#xA;import com.navis.argo.business.model.GeneralReference;&#xA;import com.navis.argo.ArgoField;&#xA;&#xA;class MatUpdateTagId{&#xA;&#xA;&#x9;public void execute(String unitId) {&#xA;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;List refList = null;&#xA;&#x9;&#x9;&#x9;refList = getGenRef(unitId);&#xA;&#x9;&#x9;&#x9;println (&quot;refList.size() ::: &quot; + refList.size())&#xA;&#xA;&#x9;&#x9;&#x9;if (refList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterRefList = refList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterRefList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def genRef = iterRefList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def tagId = genRef.getRefValue2();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;tagId :::: &quot;+ tagId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;genRef.setRefValue2(&quot;&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;tagId = genRef.getRefValue2();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;After update -- tagId :::: &quot;+ tagId);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}catch (Exception e){&#xA;&#x9;&#x9;&#x9;println(&quot;Error while updating the tagId for ::::: &quot;+unitId);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;public List getGenRef(String unitId)&#xA;  &#x9;{&#xA;  &#x9;&#x9;try {&#xA;    &#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;GeneralReference&quot;).addDqPredicate(PredicateFactory.eq(ArgoField.REF_TYPE, &quot;DRAYMAN&quot;)).addDqPredicate(PredicateFactory.eq(ArgoField.REF_ID1, &quot;SNXMSG&quot;)).addDqPredicate(PredicateFactory.eq(ArgoField.REF_ID2, &quot;LANE&quot;)).addDqPredicate(PredicateFactory.eq(ArgoField.REF_VALUE4, unitId));&#xA;&#x9;&#x9;&#x9;println(dq);&#xA;    &#x9;&#x9;List genRef = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println (&quot;genRef.size() ::: &quot; + genRef.size())&#xA;&#x9;&#x9;&#x9;return (genRef);&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;&#x9;&#x9;println(e.getMessage());&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" />
<digital-asset id="GvyCmisTruckDataProcessor" short-description="GvyCmisTruckDataProcessor" is-pre-deployed="N" groovy-code="/*&#xA;*  SrNo     Date                 Changer      Desc &#xA;*  A1       04/27/09            GR              NullPointer check on Turntime attribute Div&#xA;*  A2  GR   08/15/2011  Pulling out SingletonService class call&#xA;*/&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import com.navis.framework.util.DateUtil;&#xA;&#xA;&#xA;public class GvyCmisTruckDataProcessor {&#xA;&#xA;public String getLaneIdDoer(Object doer, Object gateId, Object entryLane, Object exitLane, String gateType) {&#xA;&#x9;if(gateId.equals(&quot;PASSPASS&quot;) || gateId.equals(&quot;passpass&quot;)) {&#xA;&#x9;   return '8'+doer;&#xA;&#x9;} else if( gateId.equals('PIER2') &amp;&amp; gateType.equals('OGATE') ) {&#xA;&#x9;   return '9'+doer;&#xA;&#x9;} else if( gateId.equals('PIER2') &amp;&amp; gateType.equals('IGATE') ) {&#xA;&#x9;   return '7'+doer;&#xA;&#x9;} else if( gateId.equals('WO GATE') &amp;&amp; gateType.equals('OGATE') ) {&#xA;&#x9;   return '11'+doer;&#xA;&#x9;} else if( gateId.equals('WO GATE') &amp;&amp; gateType.equals('IGATE') ) {&#xA;&#x9;   return '10'+doer;&#xA;&#x9;} else if(gateType.equals('IGATE')  ) {&#xA;&#x9;   if(entryLane != null) {&#xA;&#x9;   &#x9;return entryLane.laneId+doer;&#xA;&#x9;   } else {&#xA;&#x9;        return '1'+doer;&#xA;&#x9;   }&#xA;&#x9;} else if(gateType.equals('OGATE') ) {&#xA;&#x9;   if(exitLane != null) {&#xA;&#x9;   &#x9;return exitLane.laneId+doer;&#xA;&#x9;   } else {&#xA;&#x9;   &#x9;return '4'+doer;&#xA;&#x9;   }&#xA;&#x9;}&#xA;&#xA;&#x9;return '';&#xA;}&#xA;&#xA;public String getDoer(Object event) {&#xA;     def doer = event.getEvent().getEvntAppliedBy();&#xA;     if(doer == null) return '';&#xA;&#xA;     String[] doerArr = doer.split(&quot;:&quot;);&#xA;     if(doerArr.length == 1){&#xA;       doer = doerArr[0] ;&#xA;     } else if(doerArr.length == 2 || doerArr.length == 3){&#xA;        doer = doerArr[1];&#xA;     } else if(doerArr.length &gt; 3 ) {&#xA;        doer = doerArr[2];&#xA;     }&#xA;     return doer;&#xA;}&#xA;&#xA;&#xA; public Object getStat(Object tvd) {&#xA;&#x9; if(tvd == null) return null;&#xA;&#x9; if(tvd.tvdtlsStats != null) {&#xA;&#x9;    def stats = tvd.tvdtlsStats.iterator();&#xA;&#x9;    if(stats.hasNext()) return stats.next();&#xA;&#x9; }&#xA;&#x9; return null;&#xA; }&#xA;&#xA;&#xA; public String gateSequenceNo(Object currentStat, Object zone, Object gvyEventUtil)&#xA;   {&#xA;      def gateSeqNo = ''&#xA;      try&#xA;      {&#xA;&#xA;           Date dateObj = null;&#xA;           if(currentStat != null)&#xA;          {&#xA;              dateObj = currentStat.tvstatStart;&#xA;&#xA;               //Date Formatting&#xA;              def aDate  = gvyEventUtil.convertToJulianDate(dateObj)&#xA;              def aTime = gvyEventUtil.formatTime(dateObj,zone)&#xA;              def datefmt = aDate+aTime&#xA;              gateSeqNo = datefmt != null ? datefmt.replace(&quot;:&quot;,&quot;&quot;) : datefmt&#xA;              return gateSeqNo;&#xA;&#xA;&#xA;&#xA;         }//If ends&#xA;       }//try Ends&#xA;       catch(Exception e){&#xA;         e.printStackTrace();&#xA;       }&#xA;       return gateSeqNo;&#xA;&#xA;   }//method execute ends&#xA;&#xA;&#xA;public String doIt(Object event, Object tran)&#xA;{&#xA;  println(&quot;In Class GvyCmisDataProcessor.doForTruck()&quot;);&#xA;  def gvyBaseClass = '';&#xA;  def groovyXml  = '';&#xA;&#xA;  try&#xA;  {&#xA;&#xA;     //Calling Msg Formater class&#xA;     gvyBaseClass = new GroovyInjectionBase();&#xA;     def gvyTxtMsgFmt = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisTxtMsgFormatter&quot;);&#xA;     def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);   &#xA;&#xA;     def zone = tran.tranComplex.getTimeZone();&#xA;     def stat = getStat(tran.tranTruckVisit);&#xA;&#xA;     Event gvyEventObj = event.getEvent();&#xA;     String eventType =  gvyEventObj.getEventTypeId();&#xA;     println('EventType ::'+eventType);&#xA;&#xA;     def eventTypeAttr = gvyTxtMsgFmt.doIt('msgType',eventType);&#xA;     gvyBaseClass.log(&quot;Truck tran type=&quot;+eventTypeAttr);&#xA;&#xA;     def unitClassAttr = gvyTxtMsgFmt.doIt('unitClass','TRUCKVISIT');&#xA;&#xA;     def gateSeqNoAttr = gvyTxtMsgFmt.doIt('gateSeqNo',gateSequenceNo(stat,zone,gvyEventUtil));&#xA;&#xA;     def stage = &quot;OUTGATE&quot;.equalsIgnoreCase(tran.tranStageId) ? &quot;OGATE&quot; : &quot;IGATE&quot;;&#xA;     def actionAttr    = gvyTxtMsgFmt.doIt('action',stage);&#xA;&#xA;&#xA;     def aDate  = event.getEvent().getEvntAppliedDate();&#xA;     def aDateAttr = gvyTxtMsgFmt.doIt(&quot;aDate&quot;,gvyEventUtil.formatDate(aDate,zone));&#xA;     def aTimeAttr = gvyTxtMsgFmt.doIt(&quot;aTime&quot;,gvyEventUtil.formatTime(aDate,zone));&#xA;&#xA;     //DOER&#xA;     def doer = getDoer(event);&#xA;     def lane = getLaneIdDoer(doer, tran.tranTruckVisit.tvdtlsGate.gateId, tran.tranTruckVisit.tvdtlsEntryLane, tran.tranTruckVisit.tvdtlsExitLane, stage)&#xA;     def doerAttr = gvyTxtMsgFmt.doIt('consigneeAddr3',doer);&#xA;&#xA;     def turnTimeAttr = '';&#xA;     if(stat != null) {&#xA;              //A1&#xA;              double ttmin = stat.tvstatTurnTime != null ? stat.tvstatTurnTime/60000.0 : 0.0;&#xA;              long value = Math.round(ttmin);&#xA;              turnTimeAttr = gvyTxtMsgFmt.doIt('turnTime',value+&quot;&quot;);&#xA;     }&#xA;&#xA;     def transAttr = gvyTxtMsgFmt.doIt('trans','BobTail');&#xA;     def tractorAttr = gvyTxtMsgFmt.doIt('tractor',tran.tranTruckVisit.tvdtlsTruckId);&#xA;     def truckAttr = gvyTxtMsgFmt.doIt('truck',tran.tranTruckingCompany.bzuId);&#xA;     def truckerNameAttr = gvyTxtMsgFmt.doIt('truckerName',tran.tranTruckingCompany.bzuName);&#xA;     def driversLicenseAttr = gvyTxtMsgFmt.doIt('driversLicense',  tran.tranTruckVisit.tvdtlsOutBatNbr);&#xA;&#xA;      def msgString =  eventTypeAttr + unitClassAttr + gateSeqNoAttr + actionAttr + aDateAttr + aTimeAttr + doerAttr + turnTimeAttr + transAttr + tractorAttr + truckAttr + truckerNameAttr + driversLicenseAttr&#xA;&#xA;      groovyXml = gvyTxtMsgFmt.createGroovyXml(msgString)&#xA;&#xA;  }catch(Exception e){&#xA;    e.printStackTrace()&#xA;    //def gvyExceptionObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisExceptionProcess&quot;);&#xA;    //gvyExceptionObj.processException(e)&#xA;  }&#xA;&#xA;   return groovyXml;&#xA;}&#xA;&#xA;&#xA;public boolean isOutgate(Object tran) {&#xA;   if(&quot;OUTGATE&quot;.equalsIgnoreCase(tran.tranStageId) ) return true;&#xA;   return false;&#xA;}&#xA;&#xA;}//Class Ends" />
<digital-asset id="DetachAccessoryFromUnitInComplex" short-description="DetachAccessoryFromUnitInComplex" is-pre-deployed="N" groovy-code="import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.reference.Accessory&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import com.navis.inventory.business.atoms.EqUnitRoleEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;/**&#xA; * Detaches a chassis from a unit facility visit that has departed the facility but remains in the complex.&#xA; * This task is required so that chassis attached to a dray-off unit can be returned back into the gate.&#xA; */&#xA;public class DetachAccessoryFromUnitInComplex {&#xA;&#xA;&#xA;   public static String BEAN_ID = &quot;detachAccessoryFromUnitInComplex&quot;&#xA;&#xA;    public void execute(TransactionAndVisitHolder dao, api) {&#xA;       TruckTransaction tran = dao.tran&#xA;        Accessory acc = tran.tranChsAccessory&#xA;        if (!acc)&#xA;            return&#xA;        UnitFinder unitFinder = (UnitFinder) Roastery.getBean(UnitFinder.BEAN_ID)&#xA;        UnitEquipment unitEq = unitFinder.findActiveUeUsingEqInAnyRole(null, ContextHelper.getThreadComplex(), acc)&#xA;        if (!unitEq)&#xA;            return&#xA;&#xA;        Unit unit = unitEq.ueUnit&#xA;        if (!unit)&#xA;            return&#xA;&#xA;        if (EqUnitRoleEnum.PRIMARY.equals(unitEq.getUeEqRole())) {&#xA;            unit.makeRetired();&#xA;            HibernateApi.getInstance().flush()&#xA;            return;&#xA;        }&#xA;        UnitFacilityVisit ufv = unit.getUfvForFacilityNewest(ContextHelper.getThreadFacility())&#xA;        if (!ufv)&#xA;            return&#xA;        // uncomment the if condition below when chassis inventory is managed properly &#xA;        //if (!ufv.isInFacility()) {&#xA;            unit.detachAccessoriesOnChassis(&quot;groovy&quot;)&#xA;        //} &#xA;        // The flush is required to synchronize memory state of the unit with database state of the unit&#xA;        // so that the next findActiveUe will not result in an active chassis unit equipment.&#xA;        HibernateApi.getInstance().flush()&#xA;    }&#xA;}&#xA;" />
<digital-asset id="GvyAddLineAgreement" short-description="Add LineAgreement To Trucking Company" is-pre-deployed="N" groovy-code="import com.navis.argo.business.reference.LineOperator&#xA;import com.navis.road.business.model.TruckingCompany&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.argo.business.atoms.BizRoleEnum;&#xA;import com.navis.argo.ArgoRefField;&#xA;import com.navis.road.business.model.TruckingCompany&#xA;import com.navis.security.business.user.BaseUser&#xA;import com.navis.framework.business.atoms.LifeCycleStateEnum;&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;&#xA;&#xA;public class  GvyAddLineAgreement&#xA;{&#xA;&#xA;  public  void addLineAgrrementToTrckCmpy(){&#xA;  try&#xA;  {&#xA;    def truckList = getTruckingCmpy() &#xA;   int count = 0&#xA;   for(atruck in truckList) {&#xA;          addLineAgreement(atruck.getBzuId())  &#xA;         count++&#xA;      }&#xA;    println(&quot;TruckList ::&quot;+truckList.size()+&quot;       TruckList Processed MED :&quot;+count)&#xA;  }catch(Exception e){&#xA;         e.printStackTrace()&#xA;  }&#xA;&#xA;  }&#xA;&#xA;&#xA;  public Object getTruckingCmpy()&#xA; {&#xA;    try{&#xA;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;TruckingCompany&quot;).addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_ROLE, BizRoleEnum.HAULIER)).addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_LIFE_CYCLE_STATE, LifeCycleStateEnum.ACTIVE));&#xA;        //return (TruckingCompany)HibernateApi.getInstance().getUniqueEntityByDomainQuery(dq);&#xA;     return HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;    }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    }&#xA;  }&#xA;&#xA; public void addLineAgreement(String trckCmpyId){&#xA;   try&#xA;  {&#xA;    //line Operator takes line String returns LineOperatorObject&#xA;    def lineOperatorObj = com.navis.argo.business.reference.LineOperator.findOrCreateLineOperator(&quot;MED&quot;)&#xA;    if(lineOperatorObj != null){&#xA;     // println(&quot;lineOperatorObj Not Null&quot;)&#xA;    }&#xA;   //IsHouseTrucker set to Boolean = false&#xA;   def isHouseTrucker = false&#xA;   com.navis.road.business.model.TruckingCompany  truckingCompany =  com.navis.road.business.model.TruckingCompany.findOrCreateTruckingCompany(trckCmpyId)&#xA;   def truckingCompanyLine = truckingCompany.addLineAgreement(lineOperatorObj, isHouseTrucker)&#xA;   java.text.DateFormat df = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;   java.util.Date dt = df.parse(&quot;2050-12-31&quot;); &#xA;   truckingCompanyLine.setTrkclineExpirationDate(dt)&#xA;   truckingCompanyLine.setTrkclineStatus(com.navis.road.business.atoms.TrkcStatusEnum.OK)&#xA;&#xA;  }catch(Exception e){&#xA;    e.printStackTrace()&#xA;  }&#xA; }&#xA;&#xA;}//Class Ends" />
<digital-asset id="ReadChassisGroovy" short-description="ReadChassisGroovy" is-pre-deployed="N" groovy-code="import com.navis.road.business.adaptor.chassis.ReadChassis;&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder;&#xA;&#xA;&#xA;public class ReadChassisGroovy extends ReadChassis {&#xA;    public void execute(TransactionAndVisitHolder dao, api) {&#xA;        execute(dao);&#xA;    }&#xA;}&#xA;" />
<digital-asset id="MatUpdateUnitConsigneeNotes" short-description="MatUpdateUnitConsigneeNotes" is-pre-deployed="N" groovy-code="import com.navis.external.framework.entity.AbstractEntityLifecycleInterceptor&#xA;import com.navis.external.framework.entity.EEntityView&#xA;import com.navis.external.framework.util.EFieldChanges&#xA;import com.navis.external.framework.util.EFieldChangesView&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.business.units.GoodsBase;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import org.apache.log4j.Logger;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.ArgoRefField;&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 05/01/2013&#xA;* Description: This groovy is used to update the UfvFlexString08 with consignee notes.&#xA;*/&#xA;&#xA;public class MatUpdateUnitConsigneeNotes extends GroovyInjectionBase&#xA;{&#xA;&#xA;&#x9;private updateNotes(Unit unit)&#xA;&#x9;{&#xA;&#x9;&#x9;println(&quot;Start MatUpdateUnitConsigneeNotes&quot;);&#xA;&#x9;&#x9;def consignee = unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;);&#xA;&#xA;&#x9;&#x9;def notes = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString06&quot;);&#xA;&#x9;&#x9;def dbNotes = getTrucker(consignee);&#xA;&#x9;&#x9;unit.setFieldValue(&quot;unitActiveUfv.ufvFlexString08&quot;,dbNotes);&#xA;&#x9;&#x9;def UpdtNotes = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString08&quot;);&#xA;&#x9;&#x9;println(&quot;Consignee notes ::::: &quot;+ unit.unitId +&quot; :: &quot;+consignee +&quot; :: &quot;+ notes +&quot; :: &quot;+ UpdtNotes+&quot; :: &quot;+dbNotes);&#xA;&#x9;&#x9;println(&quot;End MatUpdateUnitConsigneeNotes&quot;);&#xA;&#x9;}&#xA;&#xA;private String getTrucker(String ShipperBzuName)&#xA;&#x9;{&#xA;    String notes = null;&#xA;&#xA;&#x9;DomainQuery dqShipper = QueryUtils.createDomainQuery(&quot;Shipper&quot;).addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_NAME,ShipperBzuName))&#xA;&#x9;&#x9;.addDqPredicate(PredicateFactory.isNotNull(ArgoRefField.BZU_NOTES))&#xA;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_LIFE_CYCLE_STATE,&quot;ACT&quot;));&#xA;&#xA;&#x9;println(dqShipper);&#xA;&#xA;&#x9;List shipperList = HibernateApi.getInstance().findEntitiesByDomainQuery(dqShipper);&#xA;&#x9;println (&quot;shipperList.size()&quot; + shipperList.size())&#xA;&#x9;if (shipperList.size() &gt; 0)&#xA;&#x9;{&#xA;&#x9;&#x9;Iterator iter = shipperList.iterator();&#xA;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;def shipper = iter.next();&#xA;&#x9;&#x9;&#x9;notes = shipper.bzuNotes;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return (notes)&#xA;  }&#xA;&#xA;}" />
<digital-asset id="MatReportGCSDamageContainers" short-description="MatReportGCSDamageContainers" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.argo.ArgoRefField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.road.business.model.*;&#xA;import java.util.Calendar;&#xA;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;&#xA;import com.navis.road.RoadField;&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;&#xA;import com.navis.argo.ArgoConfig;&#xA;import com.navis.argo.ArgoPropertyKeys;&#xA;import com.navis.argo.ArgoRefField;&#xA;import com.navis.argo.business.reference.AgentRepresentation;&#xA;import com.navis.argo.business.atoms.BizRoleEnum;&#xA;import com.navis.argo.business.reference.Agent;&#xA;import com.navis.road.business.model.TruckingCompany&#xA;import java.lang.*;&#xA;import com.navis.argo.business.model.GeneralReference;&#xA;// import com.navis.framework.ulc.server.application.controller.form.ShowDeleteFormCommand;&#xA;import com.navis.framework.ulc.server.application.controller.form.UlcDeleteUiProcessor&#xA;import com.navis.argo.business.reference.Chassis;&#xA;import com.navis.framework.business.atoms.LifeCycleStateEnum;&#xA;import com.navis.inventory.business.atoms.EqDamageSeverityEnum;&#xA;&#xA;&#xA;import com.navis.argo.business.reference.RoutingPoint;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 09/19/2012&#xA;* Description: This groovy is used to generate the Stowplan/Manifest Discrepancies after Stowplan and Manifest process&#xA;*/&#xA;&#xA;/**&#xA;*&#xA;* Patch Matson N4 Groovy for 2.1/2.6 upgrade&#xA;*&#xA;* Author: Peter Seiler&#xA;* Date: 6 July 2014&#xA;* JIRA: ARGO-59892&#xA;* SFDC: None&#xA;* Called from: Unkown&#xA;* &#xA;*/&#xA;&#xA;public class MatReportGCSDamageContainers extends GroovyInjectionBase&#xA;{&#xA;&#x9;private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;    //private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;    private final String  emailFrom = '1aktosdevteam@matson.com'&#xA;    def inj = new GroovyInjectionBase();&#xA;    String reportDate = null;&#xA;    String reportTime = null;&#xA;    String reportVesVoy = null;&#xA;    public boolean execute(Map params)&#xA;    {&#xA;        try{&#xA;            List ufvList = getDamageUnits();&#xA;            HashMap map = null;&#xA;            ArrayList reportUnitList =  new ArrayList();&#xA;&#xA;            if(ufvList != null) {&#xA;                Iterator iter = ufvList.iterator();&#xA;                while(iter.hasNext()) {&#xA;                    def ufv = iter.next();&#xA;                    def unit = ufv.ufvUnit;&#xA;                    def vesselService  =unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.cvdService.srvcId&quot;)&#xA;                    if (&quot;GCS&quot;.equals(vesselService)){&#xA;                        map = new HashMap();&#xA;                        def unitId = unit.unitId;&#xA;                        def damageNotes = unit.getUnitEquipDmgsItmNote();&#xA;                        def vesselCd =  ufv.getFieldValue(&quot;ufvActualObCv.cvId&quot;);&#xA;                        def outBoundATD = ufv.getFieldValue(&quot;ufvActualObCv.cvATD&quot;);&#xA;                        def POD = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;                        def POL = unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;);&#xA;                        def EquipType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;                        def positionSlot = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;);&#xA;                        println(&quot;&lt;&lt;&lt;&lt;vesselService&gt;&gt;&gt;&gt;&gt;&quot;+unit.unitId+vesselService+&quot;&lt;&lt;&gt;&gt;&quot;+&quot;&lt;&lt;&gt;&gt;&quot;+vesselCd+&quot;&lt;&lt;&gt;&gt;&quot;+outBoundATD+&quot;&lt;&lt;&gt;&gt;&quot;+POD+&quot;&lt;&lt;&gt;&gt;&quot;+POL+&quot;&lt;&lt;&gt;&gt;&quot;+EquipType+&quot;&lt;&lt;&gt;&gt;&quot;+positionSlot+&quot;&lt;&lt;&gt;&gt;&quot;+damageNotes);&#xA;                        String isDeparted = getLatestUfv(unitId);&#xA;                        println(&quot;&lt;&lt;&lt;&lt;&lt;isDeparted&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+isDeparted);&#xA;                        if (damageNotes == null || damageNotes == &quot;null&quot;){&#xA;                            damageNotes = &quot;&quot;;&#xA;                        }&#xA;                        if ((&quot;NGB&quot;.equals(POD) || &quot;SHA&quot;.equals(POD)) &amp;&amp; (&quot;Y&quot;.equals(isDeparted))){&#xA;                            map.put(&quot;UnitNbr&quot;, unitId);&#xA;                            map.put(&quot;OutboundCarrierId&quot;, vesselCd);&#xA;                            map.put(&quot;OutboundCarrierATD&quot;, outBoundATD);&#xA;                            map.put(&quot;POD&quot;, POD);&#xA;                            map.put(&quot;POL&quot;, POL);&#xA;                            map.put(&quot;EquipmentType&quot;, EquipType);&#xA;                            map.put(&quot;PositionSlot&quot;, positionSlot);&#xA;                            map.put(&quot;DamageDescription&quot;, damageNotes);&#xA;                            map.put(&quot;OutboundCarrierServiceId&quot;, vesselService);&#xA;                            map.put(&quot;UnitFlexString01&quot;, reportDate);&#xA;                            map.put(&quot;UnitFlexString02&quot;, reportTime);&#xA;                            reportVesVoy = vesselCd;&#xA;                            if(map != null) {&#xA;                                reportUnitList.add(map);&#xA;                            }&#xA;                        }&#xA;                    }&#xA;                }&#xA;                println(&quot;reportUnitList.size() &quot;+reportUnitList.size());&#xA;                if (reportUnitList.size() &gt; 0)&#xA;                {&#xA;                    HashMap parameters = new HashMap();&#xA;&#xA;                    //Create and Mail Report&#xA;                    JRDataSource ds = new JRMapCollectionDataSource(reportUnitList);&#xA;&#xA;                    HashMap reportDesignsmap = new HashMap();&#xA;                    reportDesignsmap.put(&quot;DAMAGE CONTAINER REPORT&quot;,ds);&#xA;                    try&#xA;                    {&#xA;                        def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#xA;                        reportRunner.emailReports(reportDesignsmap,parameters, emailTo, reportVesVoy+&quot; Damage to NGB/SHA&quot; ,&quot;Attached Damage containers report for &quot; +reportVesVoy);&#xA;                        println(&quot;reportUnitList ------- Success&quot;)&#xA;                    }catch (Exception e){&#xA;                        println(&quot;No design&quot;);&#xA;                    }&#xA;                }&#xA;                else {&#xA;                    def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;                    //emailSender.custSendEmail(emailFrom,emailTo, &quot;Damage to NGB/SHA&quot;,&quot;No Damages are reported&quot;);&#xA;                    println(&quot;reportUnitList ------- No data to print&quot;)&#xA;                }&#xA;            }&#xA;        }catch (Exception e){&#xA;            println(&quot;Exception in MatReportGCSDamageContainers :: &quot;+ e)&#xA;        }&#xA;    }&#xA;&#xA;    public List getDamageUnits()&#xA;    {&#xA;        Date startDate = new Date() - 3;&#xA;        reportDate = new Date().format('MM/dd/yyyy');&#xA;        reportTime = new Date().format('HH:mm');&#xA;        String trimDate = startDate.format('yyyy-MM-dd')&#xA;        startDate = startDate.parse('yyyy-MM-dd', trimDate);&#xA;        Date endDate = startDate + 1;&#xA;        println(&quot;startDate &quot;+ startDate);&#xA;        println(&quot;endDate &quot;+ endDate);&#xA;        println(&quot;reportDate &quot;+ reportDate);&#xA;        println(&quot;reportTime &quot;+ reportTime);&#xA;&#xA;        try {&#xA;            ArrayList units = new ArrayList();&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;            dq = dq.addDqPredicate(PredicateFactory.in(UnitField.UFV_PRIMARY_EQ_DAMAGE_SEVERITY,EqDamageSeverityEnum.MAJOR,EqDamageSeverityEnum.MINOR))&#xA;                    .addDqPredicate(PredicateFactory.in(UnitField.UFV_VISIT_STATE,&quot;3DEPARTED&quot;))&#xA;                    .addDqPredicate(PredicateFactory.ge(UnitField.UFV_TIME_OUT,startDate))&#xA;                    .addDqPredicate(PredicateFactory.le(UnitField.UFV_TIME_OUT,endDate));&#xA;&#xA;            println(dq);&#xA;            List ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            println(&quot;After unitList&quot;+ufvList.size());&#xA;            return ufvList;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;            println(e.getMessage());&#xA;        }&#xA;    }&#xA;&#xA;    public String getLatestUfv(String unitId)&#xA;    {&#xA;        String isDeparted = &quot;N&quot;;&#xA;        try {&#xA;            ArrayList units = new ArrayList();&#xA;&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;).addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID, unitId)).addDqOrdering(Ordering.desc(InventoryField.UFV_TIME_OF_LAST_MOVE));&#xA;&#xA;            println(&quot;dq:::::::::&quot;+dq)&#xA;            def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            println(&quot;After unitList&quot;+ufvList.size());&#xA;            if(ufvList != null) {&#xA;                Iterator iter = ufvList.iterator();&#xA;                while(iter.hasNext()) {&#xA;                    def ufv = iter.next();&#xA;                    def unit = ufv.ufvUnit;&#xA;                    def ufvVisitState = ufv.getFieldValue(&quot;ufvVisitState&quot;);&#xA;                    ufvVisitState = ufvVisitState.getKey();&#xA;                    println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;ufvVisitState&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+ufvVisitState);&#xA;                    if (&quot;3DEPARTED&quot;.equals(ufvVisitState)){&#xA;                        isDeparted= &quot;Y&quot;&#xA;                    }&#xA;                    break;&#xA;                }&#xA;            }&#xA;            return isDeparted;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;            println(e.getMessage());&#xA;        }&#xA;    }&#xA;}" />
<digital-asset id="MatsonEMTruckVisitTagIdUpdate" short-description="MatsonEMTruckVisitTagIdUpdate" is-pre-deployed="N" groovy-code="/*&#xA; * Copyright (c) 2011 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;/**&#xA; * Created by IntelliJ IDEA. User: isimmons Date: 10/1/11 Time: 12:36 PM To change this template use File | Settings | File Templates.&#xA; */&#xA;/*&#xA;Groovy code called via direct injection through the agro webservice&#xA;&#xA;Aim is to update the truck visit details ( tvdtlsFlexString01) with the WNET tag details recorded&#xA;The details sent are&#xA;truck id - Transcore generated&#xA;ctr-id - WNET generated ctr id&#xA;tag -id - WNET tag read&#xA;gos-tv-gkey  WNET tv gkey&#xA;lane-id  WNET lane id - matches N4 Gate lane Id&#xA;&#xA;example of message sent&#xA;&lt;groovy class-location=&quot;database&quot;  class-name=&quot;MatsonEMTruckVisitTagIdUpdate&quot;&gt;&#xA;    &lt;parameters&gt;&#xA;&#x9;&lt;parameter id=&quot;truck-id&quot; value=&quot;1236&quot;/&gt;&#xA;     &lt;parameter id=&quot;equipment-id&quot; value=&quot;SUDU1874437&quot;/&gt;&#xA;     &lt;parameter id=&quot;tag-id&quot; value=&quot;88555&quot;/&gt;&#xA;&#x9; &lt;parameter id=&quot;gos-tv-gkey&quot; value=&quot;1099&quot;/&gt;&#xA;&#x9; &lt;parameter id=&quot;lane-id&quot; value=&quot;1&quot;/&gt;&#xA;    &lt;/parameters&gt;&#xA;&lt;/groovy&gt;&#xA;&#xA;*/&#xA;&#xA;import java.util.Date;&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.argo.business.model.GeneralReference;&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.road.RoadEntity;&#xA;import com.navis.road.RoadField;&#xA;import com.navis.road.business.model.TruckVisitDetails;&#xA;&#xA;class MatsonEMTruckVisitTagIdUpdate extends GroovyInjectionBase {&#xA;    public String execute(Map inParameters) {&#xA;&#xA;        String trkId = inParameters.get(&quot;truck-id&quot;);&#xA;        String ctrId = inParameters.get(&quot;equipment-id&quot;);&#xA;        String tagId = inParameters.get(&quot;tag-id&quot;);&#xA;        String gosTvGkey = inParameters.get(&quot;gos-tv-gkey&quot;);&#xA;        String laneId = inParameters.get(&quot;lane-id&quot;);&#xA;&#xA;        TruckVisitDetails truckVisit = null;&#xA;&#xA;        String returnString = &quot;&quot;;&#xA;        if (trkId != null) {&#xA;            truckVisit = findTruckVisitByNbr(trkId, gosTvGkey);&#xA;        }&#xA;&#xA;        if (truckVisit == null) {&#xA;            // no truck visit - update the general reference&#xA;            if (laneId == null) {&#xA;                //set lane to 99&#xA;                laneId = &quot;99&quot;;&#xA;            }&#xA;            String _inType1 = &quot;DRAYMAN&quot;;&#xA;            String _inId1 = &quot;SNXMSG&quot;;&#xA;            String _inId2 = &quot;LANE&quot;;&#xA;            String _inId3 = laneId;&#xA;            String _date = new Date().format('yyyy-MM-dd HH:mm:ss');&#xA;&#xA;            GeneralReference genR = GeneralReference.findUniqueEntryById(_inType1, _inId1, _inId2, _inId3);&#xA;            if (genR == null) {&#xA;                // set up the genR&#xA;                returnString = &quot;No general reference setup for label id &quot; + laneId;&#xA;                GeneralReference genR1 = GeneralReference.findOrCreate(_inType1, _inId1, _inId2, _inId3, _date, tagId, trkId, ctrId, gosTvGkey, null);&#xA;            } else {&#xA;                genR.setFieldValue(ArgoField.REF_VALUE1, _date);&#xA;                genR.setFieldValue(ArgoField.REF_VALUE2, tagId);&#xA;                genR.setFieldValue(ArgoField.REF_VALUE3, trkId);&#xA;                genR.setFieldValue(ArgoField.REF_VALUE4, ctrId);&#xA;                genR.setFieldValue(ArgoField.REF_VALUE5, gosTvGkey);&#xA;            }&#xA;&#xA;            returnString = &quot;Updated general reference : Lane Id &quot; + laneId + &quot;. Rfid tag is &quot; + tagId;&#xA;            return returnString;&#xA;        } else {&#xA;            // do a simple Change and record an event&#xA;            truckVisit.setTvdtlsFlexString01(tagId);&#xA;            returnString = &quot;Updated truck visit is: &quot; + trkId + &quot; : &quot; + gosTvGkey + &quot;. Rfid tag is &quot; + tagId;&#xA;            return returnString;&#xA;        }&#xA;    }&#xA;&#xA;    private TruckVisitDetails findTruckVisitByNbr(String inTruckLicNbr, String inGosTVGkey) {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(RoadEntity.TRUCK_VISIT_DETAILS)&#xA;                .addDqPredicate(PredicateFactory.eq(RoadField.TVDTLS_TRUCK_ID, inTruckLicNbr))&#xA;                .addDqPredicate(PredicateFactory.eq(RoadField.TVDTLS_STATUS, &quot;OK&quot;))&#xA;                .addDqPredicate(PredicateFactory.eq(RoadField.TVDTLS_GOS_TV_KEY, inGosTVGkey));&#xA;        return (TruckVisitDetails) Roastery.getHibernateApi().getUniqueEntityByDomainQuery(dq);&#xA;    }&#xA;}&#xA;" />
<digital-asset id="MatUnitUpdateWithBlDetails" short-description="MatUnitUpdateWithBlDetails" is-pre-deployed="N" groovy-code="import com.navis.external.framework.entity.AbstractEntityLifecycleInterceptor&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.external.framework.entity.EEntityView&#xA;import com.navis.external.framework.util.EFieldChanges&#xA;import com.navis.external.framework.util.EFieldChangesView&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.units.EqBaseOrder&#xA;import com.navis.inventory.business.units.GoodsBase;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;import com.navis.argo.business.atoms.FreightKindEnum;&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import org.apache.log4j.Logger;&#xA;import com.navis.cargo.business.model.BillOfLading;&#xA;import com.navis.inventory.business.api.UnitField;&#xA;import com.navis.cargo.business.api.CargoCompoundField;&#xA;import com.navis.cargo.InventoryCargoField;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.argo.business.reference.RoutingPoint;&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;import com.navis.argo.business.atoms.DataSourceEnum;&#xA;import com.navis.argo.business.reference.Equipment;&#xA;import com.navis.argo.business.atoms.BizRoleEnum;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.inventory.business.units.UnitEquipment;&#xA;import com.navis.inventory.business.units.EquipmentState;&#xA;import com.navis.argo.business.model.CarrierVisit;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.orders.business.api.OrdersFinder;&#xA;import com.navis.orders.business.eqorders.EquipmentOrder;&#xA;&#xA;import com.navis.services.business.api.EventManager&#xA;import com.navis.services.business.rules.EventType&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.argo.ArgoBizMetafield&#xA;import com.navis.argo.ArgoField&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 02/20/2013&#xA;* Description: This groovy is used to update the unit details with BL details when BL get updated.&#xA;*&#xA;* Modified : Raghu Iyer&#xA;* Date     : 05/21/2013&#xA;* Description: Added updateUnitWithBlData method to update the unit consignee/shipper details with BL&#xA;*              consignee/shipper details using &quot;BL_UPDATE_CONSIGNEE&quot; general notice.&#xA;*/&#xA;&#xA;public class MatUnitUpdateWithBlDetails extends GroovyInjectionBase&#xA;&#x9;{&#xA;&#x9;private void getUnitListForBl(String blNbr,String blPol,String blPod1,String blPod2,String blDest,String blOrgn,String blLinrOptr){&#xA;&#x9;println(&quot;MatUnitUpdateWithBlDetails.getUnitListForBl&quot;)&#xA;    String&#x9;ownerCode = null;&#xA;&#x9;ownerCode = blLinrOptr+&quot;U&quot;;&#xA;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;)&#xA;            .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_GDS_BL_NBR,blNbr));&#xA;//&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UNIT_ID,&quot;GLDU0570236&quot;));&#xA; &#x9;println(&quot;dq:::::::::&quot;+dq)&#xA;    HibernateApi hibernate = HibernateApi.getInstance();&#xA;    List unitList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Before Update UnitId:::&quot;+unit.unitId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;POL:&quot;+ unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;POD1:&quot;+unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;destination:&quot;+unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Orogin:&quot;+unit.getFieldValue(&quot;unitGoods.gdsOrigin&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;LineOptr:::&quot;+unit.getFieldValue(&quot;unitLineOperator.bzuId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;equiOptr:&quot;+unit.getFieldValue(&quot;unitCarriageUe.ueEquipmentState.eqsEqOperator.bzuId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;equiOwner:&quot;+unit.getFieldValue(&quot;unitFlexString13&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Carr Owner:&quot;+unit.getFieldValue(&quot;unitCarriageUe.ueEquipmentState.eqsEqOwner.bzuId&quot;))&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def operator = LineOperator.findLineOperatorById(blLinrOptr);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+operator)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit.setUnitLineOperator(operator);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def routing = unit.getUnitRouting();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;routing.setRtgPOL(RoutingPoint.findRoutingPoint(blPol));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;routing.setRtgPOD1(RoutingPoint.findRoutingPoint(blPod1));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;routing.setRtgPOD2(RoutingPoint.findRoutingPoint(blPod2));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsDestination&quot;,blDest);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsOrigin&quot;,blOrgn);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit.setUnitFlexString13(ownerCode); // Owner code&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;After Update UnitId:::&quot;+unit.unitId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;LineOptr:::&quot;+unit.getFieldValue(&quot;unitLineOperator.bzuId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;POL:&quot;+ unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;POD1:&quot;+unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;destination:&quot;+unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Orogin:&quot;+unit.getFieldValue(&quot;unitGoods.gdsOrigin&quot;))&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;LineOptr:::&quot;+unit.getFieldValue(&quot;unitLineOperator.bzuId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;equiOptr:&quot;+unit.getFieldValue(&quot;unitCarriageUe.ueEquipmentState.eqsEqOperator.bzuId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;equiOwner:&quot;+unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOwner.bzuId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Carr Owner:&quot;+unit.getFieldValue(&quot;unitCarriageUe.ueEquipmentState.eqsEqOwner.bzuId&quot;))&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;private void getUnitListForBlTest(String blDest ){&#xA;&#xA;println(&quot;MatUnitUpdateWithBlDetails.getUnitListForBlTest&quot;)&#xA;&#x9;String  blNumber = &quot;TEST123456&quot;;&#xA;&#x9;//String&#x9;blDest = &quot;HON&quot;;&#xA;&#x9;String  blLinrOptr = &quot;APL&quot;;&#xA;&#x9;String&#x9;blPod1 = &quot;HIL&quot;;&#xA;&#x9;String  blPod2 = &quot;KHI&quot;;&#xA;&#x9;String  blPol = &quot;HIL&quot;;&#xA;&#x9;String  blOrgn = &quot;MEL&quot;;&#xA;&#x9;String ownerCode = null;&#xA;&#x9;if (blLinrOptr != null)&#xA;&#x9;{&#xA;&#x9;&#x9;ownerCode = blLinrOptr+&quot;U&quot;;&#xA;&#x9;}&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;)&#xA;            .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_GDS_BL_NBR,blNumber));&#xA;            //.addDqPredicate(PredicateFactory.in(UnitField.UNIT_ID, &quot;GLDU0570236&quot;));&#xA;&#x9;println(&quot;dq:::::::::&quot;+dq)&#xA;    HibernateApi hibernate = HibernateApi.getInstance();&#xA;    List unitList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Before Update UnitId:::&quot;+unit.unitId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;POL:&quot;+ unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;POD1:&quot;+unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;destination:&quot;+unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Orogin:&quot;+unit.getFieldValue(&quot;unitGoods.gdsOrigin&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;LineOptr:::&quot;+unit.getFieldValue(&quot;unitLineOperator.bzuId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;equiOptr:&quot;+unit.getFieldValue(&quot;unitCarriageUe.ueEquipmentState.eqsEqOperator.bzuId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;equiOwner:&quot;+unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOwner.bzuId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Carr Owner:&quot;+unit.getFieldValue(&quot;unitCarriageUe.ueEquipmentState.eqsEqOwner.bzuId&quot;))&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def operator = LineOperator.findLineOperatorById(&quot;APL&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+operator)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit.setUnitLineOperator(operator);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def routing = unit.getUnitRouting();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;routing.setRtgPOL(RoutingPoint.findRoutingPoint(blPol));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;routing.setRtgPOD1(RoutingPoint.findRoutingPoint(blPod1));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;routing.setRtgPOD2(RoutingPoint.findRoutingPoint(blPod2));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsDestination&quot;,blDest);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsOrigin&quot;,blOrgn);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit.setUnitFlexString13(ownerCode);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;After Update UnitId:::&quot;+unit.unitId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;LineOptr:::&quot;+unit.getFieldValue(&quot;unitLineOperator.bzuId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;POL:&quot;+ unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;POD1:&quot;+unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;destination:&quot;+unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Orogin:&quot;+unit.getFieldValue(&quot;unitGoods.gdsOrigin&quot;))&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;LineOptr:::&quot;+unit.getFieldValue(&quot;unitLineOperator.bzuId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;equiOptr:&quot;+unit.getFieldValue(&quot;unitCarriageUe.ueEquipmentState.eqsEqOperator.bzuId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;equiOwner:&quot;+unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOwner.bzuId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Carr Owner:&quot;+unit.getFieldValue(&quot;unitCarriageUe.ueEquipmentState.eqsEqOwner.bzuId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;private void getUnitListForBlUpdate(Unit unit){&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;String  blNumber = unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;);&#xA;&#x9;&#x9;&#x9;String&#x9;blDest = null;&#xA;&#x9;&#x9;&#x9;String  blLinrOptr = null;&#xA;&#x9;&#x9;&#x9;String&#x9;blPod1 = null;&#xA;&#x9;&#x9;&#x9;String  blPod2 = null;&#xA;&#x9;&#x9;&#x9;String  blPol = null;&#xA;&#x9;&#x9;&#x9;String  blOrgn = null;&#xA;&#x9;&#x9;&#x9;String ownerCode = null;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;getUnitListForBlUpdate&quot;)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;BillOfLading&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(CargoCompoundField.BL_NBR,blNumber));&#xA;&#x9;&#x9;&#x9;&#x9;println(dq);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;HibernateApi hibernate = HibernateApi.getInstance();&#xA;&#x9;&#x9;&#x9;&#x9;List blList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;blList: &quot;+blList.size())&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterBlList = blList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterBlList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def blDetails = iterBlList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;blDest =  blDetails.blDestination;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;blLinrOptr =  blDetails.blLineOperator.bzuId;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (blDetails.blPol != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;blPol = blDetails.blPol.pointId;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (blDetails.blPod1 != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;blPod1 = blDetails.blPod1.pointId;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (blDetails.blPod2 != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;blPod2 = blDetails.blPod2.pointId;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;blOrgn =  blDetails.blOrigin;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (blLinrOptr != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (blLinrOptr != &quot;ANL&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ownerCode = blLinrOptr+&quot;U&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ownerCode = blLinrOptr+&quot;C&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Bl Details:&quot;+blNumber+&quot;:&quot;+blDest+&quot;:&quot;+blLinrOptr+&quot;:&quot;+blOrgn+&quot;:&quot;+blPol+&quot;:&quot;+blPod1+&quot;:&quot;+blPod2+&quot;:&quot;+ownerCode);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Before Update UnitId:::&quot;+unit.unitId);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;BL Number:&quot;+ blNumber)&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;POL:&quot;+ unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;POD1:&quot;+unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;destination:&quot;+unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Orogin:&quot;+unit.getFieldValue(&quot;unitGoods.gdsOrigin&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;LineOptr:::&quot;+unit.getFieldValue(&quot;unitLineOperator.bzuId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Owner:&quot;+unit.getFieldValue(&quot;unitFlexString13&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;equiOwner:&quot;+unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOwner.bzuId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Carr Owner:&quot;+unit.getFieldValue(&quot;unitCarriageUe.ueEquipmentState.eqsEqOwner.bzuId&quot;))&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;def operator = LineOperator.findLineOperatorById(blLinrOptr);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+operator+&quot;&lt;&lt;&gt;&gt;&quot;+ownerCode)&#xA;&#x9;&#x9;&#x9;&#x9;unit.setUnitLineOperator(operator);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;def routing = unit.getUnitRouting();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;routing.setRtgPOL(RoutingPoint.findRoutingPoint(blPol));&#xA;&#x9;&#x9;&#x9;&#x9;routing.setRtgPOD1(RoutingPoint.findRoutingPoint(blPod1));&#xA;&#x9;&#x9;&#x9;&#x9;routing.setRtgPOD2(RoutingPoint.findRoutingPoint(blPod2));&#xA;&#x9;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsDestination&quot;,blDest);&#xA;&#x9;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsOrigin&quot;,blOrgn);&#xA;&#x9;&#x9;&#x9;&#x9;unit.setUnitFlexString13(ownerCode);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Equipment equipment = unit.getPrimaryEq();&#xA;&#x9;&#x9;&#x9;&#x9;UnitEquipment ue = unit.getUnitPrimaryUe();&#xA;&#x9;&#x9;&#x9;&#x9;EquipmentState eqs = ue.getUeEquipmentState();&#xA;&#x9;&#x9;&#x9;&#x9;ScopedBizUnit equipmentOwner = ScopedBizUnit.findEquipmentOwner(ownerCode);&#xA;&#x9;&#x9;&#x9;&#x9;eqs.upgradeEquipmentOwner(equipmentOwner,DataSourceEnum.USER_DBA);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;After Update UnitId:::&quot;+unit.unitId);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;LineOptr:::&quot;+unit.getFieldValue(&quot;unitLineOperator.bzuId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;POL:&quot;+ unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;POD1:&quot;+unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;destination:&quot;+unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Orogin:&quot;+unit.getFieldValue(&quot;unitGoods.gdsOrigin&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;LineOptr:::&quot;+unit.getFieldValue(&quot;unitLineOperator.bzuId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Owner:&quot;+unit.getFieldValue(&quot;unitFlexString13&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;equiOwner:&quot;+unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOwner.bzuId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Carr Owner:&quot;+unit.getFieldValue(&quot;unitCarriageUe.ueEquipmentState.eqsEqOwner.bzuId&quot;))&#xA;&#x9;&#x9;&#x9;} catch (Throwable e) {&#xA;      &#x9;&#x9;&#x9;log(&quot;Testing &quot; + e.getMessage());&#xA;      &#x9;&#x9;&#x9;e.printStackTrace();&#xA;    &#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;private List getUnitsForUpdate(String blNbr){&#xA;&#xA;&#x9;&#x9;println(&quot;getUnitsForUpdate&quot;);&#xA;&#x9;&#x9;List unitList = null;&#xA;&#x9;&#x9;def unitShipper = &quot;&quot;;&#xA;&#x9;&#x9;def unitConsignee = &quot;&quot;;&#xA;&#x9;&#x9;def unitShipperId = &quot;&quot;;&#xA;&#x9;&#x9;def unitConsigneeId = &quot;&quot;;&#xA;&#x9;&#x9;try {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UNIT_GDS_BL_NBR,blNbr));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;HibernateApi hibernate = HibernateApi.getInstance();&#xA;&#x9;&#x9;&#x9;&#x9;unitList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#xA;&#x9;&#x9;&#x9;} catch (e) {&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Error in Bl Units::::: &quot; + blNbr + &quot; ::::: &quot;+ e);&#xA;&#x9;&#x9;&#x9;&#x9;return;&#xA;    &#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return unitList;&#xA;&#x9;&#x9;}&#xA;&#xA;private void updateUnitWithBlData(CarrierVisit vesVoy){&#xA;&#xA;&#x9;&#x9;def blNbr = &quot;&quot;;&#xA;&#x9;&#x9;def blConsignee = &quot;&quot;;&#xA;&#x9;&#x9;def blShipper = &quot;&quot;;&#xA;&#x9;&#x9;def blConsigneeId = &quot;&quot;;&#xA;&#x9;&#x9;def blShipperId = &quot;&quot;;&#xA;&#x9;&#x9;def unitShipper = &quot;&quot;;&#xA;&#x9;&#x9;def unitConsignee = &quot;&quot;;&#xA;&#x9;&#x9;def unitShipperId = &quot;&quot;;&#xA;&#x9;&#x9;def unitConsigneeId = &quot;&quot;;&#xA;&#x9;&#x9;List unitList = null;&#xA;&#xA;&#x9;&#x9;try {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;BillOfLading&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(InventoryCargoField.BL_CARRIER_VISIT,vesVoy.getCvGkey()));&#xA;&#x9;&#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.eq(CargoCompoundField.BL_NBR,&quot;AU4408388&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;println(dq);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;HibernateApi hibernate = HibernateApi.getInstance();&#xA;&#x9;&#x9;&#x9;&#x9;List blList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;blList  &quot;+blList.size())&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterBlList = blList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterBlList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;blShipper = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;blConsignee = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;blShipperId = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;blConsigneeId = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def blDetails = iterBlList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;blNbr = blDetails.blNbr;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( blDetails.blShipper != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;blShipperId = blDetails.blShipper.bzuId;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;blShipper = blDetails.blShipper.bzuName;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( blDetails.blConsignee != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;blConsigneeId = blDetails.blConsignee.bzuId;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;blConsignee = blDetails.blConsignee.bzuName;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def consignee = ScopedBizUnit.findScopedBizUnit( blConsigneeId, BizRoleEnum.SHIPPER);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def shipper = ScopedBizUnit.findScopedBizUnit( blShipperId, BizRoleEnum.SHIPPER);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;============================================================================================================================&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println (&quot;BL Number :::: &quot;+ blNbr + &quot; Consignee Id :: &quot;+ blConsigneeId  +  &quot; Consignee Name :: &quot;+ blConsignee  +&quot; Shipper Id:: &quot;+ blShipperId + &quot; Shipper Name :: &quot;+ blShipper);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;============================================================================================================================&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitList= getUnitsForUpdate(blNbr);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (unitList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitShipper = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitConsignee = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitShipperId = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitConsigneeId = &quot;&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def inUnit = iterUnitList.next();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;inUnit.getUnitGoods().updateConsignee( consignee);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;inUnit.getUnitGoods().updateShipper( shipper);&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( inUnit.unitGoods != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitConsigneeId = inUnit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitConsignee = inUnit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitShipperId = inUnit.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitShipper = inUnit.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuName&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println (&quot;Before Unit Number :::: &quot;+ inUnit.unitId + &quot; Consignee Id :: &quot;+ unitConsigneeId  +  &quot; Consignee Name :: &quot;+ unitConsignee  +&quot; Shipper Id:: &quot;+ unitShipperId + &quot; Shipper Name :: &quot;+ unitShipper);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;catch (e)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Error in Bl ::::: &quot; + blNbr + &quot; ::::: &quot;+ e);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;} catch (e) {&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Testing &quot; + e);&#xA;&#xA;    &#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}&#xA;&#xA;private String getBlDest(String blNbr){&#xA;&#xA;&#x9;&#x9;def blDest = &quot;&quot;;&#xA;&#xA;&#x9;&#x9;try {&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;BillOfLading&quot;)&#xA;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(CargoCompoundField.BL_NBR,blNbr));&#xA;&#x9;&#x9;&#x9;println(&quot;dq:::::::::&quot;+dq);&#xA;&#xA;&#x9;&#x9;&#x9;HibernateApi hibernate = HibernateApi.getInstance();&#xA;&#x9;&#x9;&#x9;List blList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println(&quot;blList  &quot;+blList.size())&#xA;&#x9;&#x9;&#x9;Iterator iterBlList = blList.iterator()&#xA;&#x9;&#x9;&#x9;while (iterBlList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;def blDetails = iterBlList.next();&#xA;&#x9;&#x9;&#x9;&#x9;blDest = blDetails.blDestination;&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;BL Destination:&quot;+blDest);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;} catch (e) {&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Testing &quot; + e);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;return blDest;&#xA;&#x9;&#x9;}&#xA;&#xA;private void updateUnitWithBlDest(String unitId){&#xA;&#xA;&#x9;&#x9;def blNbr = &quot;&quot;;&#xA;&#x9;&#x9;def blDest = &quot;&quot;;&#xA;&#xA;&#x9;&#x9;try {&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;)&#xA;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.in(UnitField.UNIT_ID, unitId));&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;dq:::::::::&quot;+dq)&#xA;&#x9;&#x9;&#x9;    HibernateApi hibernate = HibernateApi.getInstance();&#xA;&#x9;&#x9;&#x9;    List unitList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;UnitId:::&quot;+unit.unitId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;destination:&quot;+unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;blNbr = unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;blNbr:&quot;+blNbr);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;blDest = this.getBlDest(blNbr);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;blDest:&quot;+blDest);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsDestination&quot;,blDest);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;} catch (e) {&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Testing &quot; + e);&#xA;&#xA;    &#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private void updateUnitWithBookingShipperAndUCC(String unitId){&#x9;&#xA;&#xA;&#x9;&#x9;try {&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;)&#xA;                            .addDqPredicate(PredicateFactory.in(UnitField.UNIT_ID, unitId))&#xA;                            .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_CATEGORY, UnitCategoryEnum.STORAGE))&#xA;                            .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_FREIGHT_KIND, FreightKindEnum.MTY))&#xA;                            .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_CURRENT_UFV_TRANSIT_STATE, UfvTransitStateEnum.S40_YARD));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;dq:::::::::&quot;+dq)&#xA;&#x9;&#x9;&#x9;    HibernateApi hibernate = HibernateApi.getInstance();&#xA;&#x9;&#x9;&#x9;    List unitList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;UnitId:::&quot;+unit.unitId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;FInding booking : &quot;+unit.getUnitPrimaryUe().getUeDepartureOrderItem());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EqBaseOrder order = unit.getUnitPrimaryUe().getUeDepartureOrderItem().getEqboiOrder();&#xA;                    &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/*OrdersFinder ordersFinder = (OrdersFinder)Roastery.getBean(&quot;ordersFinder&quot;);&#xA;                    EquipmentOrder eqOrder = ordersFinder.findEquipmentOrderByGkey(order.getEqboGkey())*/&#xA;                    EquipmentOrder eqOrder = EquipmentOrder.resolveEqoFromEqbo(order);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Found Order : &quot;+eqOrder);&#xA;                    unit.getUnitGoods().setFieldValue(&quot;gdsShipperBzu&quot;, eqOrder.getEqoShipper())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Updated Shipper into UNIT : &quot;+ eqOrder.getShipperAsString())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;UCC value : &quot;+unit.getUnitFlexString15());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (unit.getUnitFlexString15().equalsIgnoreCase(&quot;CP&quot;)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unit.setUnitFlexString15(&quot;RB&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;UCC Updated with RB&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;} catch (e) {&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Testing &quot; + e);&#xA;&#xA;    &#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;" />
<digital-asset id="MatGetUnitDetails" short-description="MatGetUnitDetails" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.argo.ArgoRefField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.road.business.model.*;&#xA;import java.util.Calendar;&#xA;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;&#xA;import com.navis.road.RoadField;&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;&#xA;import com.navis.argo.ArgoConfig;&#xA;import com.navis.argo.ArgoPropertyKeys;&#xA;import com.navis.argo.ArgoRefField;&#xA;import com.navis.argo.business.reference.AgentRepresentation;&#xA;import com.navis.argo.business.atoms.BizRoleEnum;&#xA;import com.navis.argo.business.reference.Agent;&#xA;import com.navis.road.business.model.TruckingCompany&#xA;import java.lang.*;&#xA;import com.navis.argo.business.model.GeneralReference;&#xA;//import com.navis.framework.ulc.server.application.controller.form.ShowDeleteFormCommand;&#xA;import com.navis.argo.business.reference.Chassis;&#xA;import com.navis.framework.business.atoms.LifeCycleStateEnum;&#xA;import com.navis.inventory.business.atoms.EqDamageSeverityEnum;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;import com.navis.argo.business.reference.Container;&#xA;import com.navis.argo.business.atoms.EquipMaterialEnum;&#xA;&#xA;&#xA;import com.navis.argo.business.reference.RoutingPoint;&#xA;&#xA;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;import java.util.HashMap&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;import com.navis.argo.business.atoms.FreightKindEnum;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.api.EventManager&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import java.sql.ResultSet;&#xA;import java.sql.Connection;&#xA;&#xA;import com.navis.argo.UserArgoField;&#xA;import com.navis.argo.business.security.ArgoUser;&#xA;import com.navis.security.SecurityField;&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.model.Yard&#xA;import com.navis.xpscache.yardmodel.api.*;&#xA;import com.navis.xpscache.yardmodel.impl.*;&#xA;&#xA;import com.navis.yard.business.model.*;&#xA;import com.navis.spatial.business.api.IBinModel;&#xA;import com.navis.spatial.business.model.AbstractBin;&#xA;import com.navis.spatial.business.model.block.AbstractBlock;&#xA;import com.navis.spatial.business.model.block.BinModelHelper;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 09/19/2012&#xA;* Description: This groovy is used to generate the Stowplan/Manifest Discrepancies after Stowplan and Manifest process&#xA;*/&#xA;&#xA;public class MatGetUnitDetails extends GroovyInjectionBase&#xA;&#x9;{&#xA;&#x9;&#x9;private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;private String outBoundCarrierId = null&#xA;&#x9;&#x9;def inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;String VesVoy = null;&#xA;&#x9;&#x9;private static final String XML_OVERRIDE = &quot;\&quot;&quot;;&#xA;&#x9;&#x9;private static final String XML_END_ELEMENT = &quot;/&gt;&quot;;&#xA;&#xA;&#x9;&#x9;String editUser = &quot;snx:-snx-&quot;;&#xA;&#x9;&#x9;String notes = &quot;FRUITS OR VEGETABLES, FRESH HON to HIL CNC CUS S-11/01/13&quot;;&#xA;&#x9;&#x9;String holds = &quot;&quot;;&#xA;&#x9;&#x9;String updateHolds = &quot;&quot;;&#xA;&#x9;&#x9;String updatedNotes = &quot;&quot;&#xA;&#x9;&#x9;Integer start = 0;&#xA;&#x9;&#x9;def vesselForDischId = &quot;MLI101&quot;;&#xA;&#xA;&#xA;&#x9;&#x9;public boolean execute(Map params)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;def binName = &quot;A1111&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;println (binName.substring(0,3)+' '+binName.substring(3));&#xA;&#x9;&#x9;&#x9;&#x9;println (binName.substring(0,2)+' '+binName.substring(2));&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;/*XpsYardModel yardModel = new XpsYardModel(&quot;SI&quot;,&quot;Sand Island&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;println (&quot; yardModel is ::::&quot;+yardModel + &quot; :: &quot; +yardModel.getYardName());&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;IXpsYardBin bin = yardModel.getBinFromSlot(&quot;A1211&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;println (&quot; bin is ::::&quot;+bin);*/&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;def inFacility = com.navis.argo.ContextHelper.getThreadFacility()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Yard inYard =  Yard.findYard(&quot;SI&quot;, inFacility)&#xA;&#x9;&#x9;&#x9;&#x9;YardBinModel yardModel =  com.navis.yard.business.model.YardBinModel.findYardBinModelFromYardCodeAndOwner(&quot;SI&quot;, inYard)&#xA;&#x9;&#x9;&#x9;&#x9;println (&quot; yardModel is ::::&quot;+yardModel);&#xA;&#x9;&#x9;&#x9;&#x9;AbstractBin bin = yardModel.findDescendantBinFromInternalSlotString(binName, null); &#xA;&#x9;&#x9;&#x9;&#x9;println (&quot; bin is ::::&quot;+bin);&#xA;&#x9;&#x9;&#x9;&#x9;//println (&quot; yardModel is ::::&quot;+yardModel + &quot; :: &quot; +yardModel.getYardName());&#xA;&#x9;&#x9;&#x9;&#x9;/*&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;IYardModel yardModel1 = inYard.getYardModel();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;println (&quot; yardModel1 is ::::&quot;+yardModel1 + &quot; :: &quot; +yardModel1.getYardName());&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;IYardBin bin1 = yardModel1.getBin(binName);&#xA;&#x9;&#x9;&#x9;&#x9;println (&quot; bin1 is ::::&quot;+bin1);&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;IYardModel yardModel = new YardModel(&quot;SI&quot;,&quot;Sand Island&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;println (&quot; yardModel is ::::&quot;+yardModel + &quot; :: &quot; +yardModel.getYardName());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;IYardBin bin = yardModel.getBin(binName);&#xA;&#x9;&#x9;&#x9;&#x9;println (&quot; bin is ::::&quot;+bin);&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;*/&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;//println (&quot; bin is ::::&quot;+block + &quot; :: &quot;+block.getBlockType());&#xA;&#x9;&#x9;&#x9;&#x9;//IXpsYardBlock block = IXpsYardModel.getYardBlock(&quot;D12&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;/*def crsStatus = &quot;SCRAP_METAL&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;   def holdsApp = ''&#xA;&#x9;&#x9;&#x9;&#x9;   if(crsStatus.length() &gt; 10){ &#xA;&#x9;&#x9;&#x9;&#x9;       &#xA;&#x9;&#x9;&#x9;&#x9;       int commaIndex = crsStatus.substring(0,11).lastIndexOf(' ');&#xA;&#x9;&#x9;&#x9;&#x9;       if (commaIndex &lt; 0) {&#xA;&#x9;&#x9;&#x9;&#x9;           commaIndex = crsStatus.substring(0,11).lastIndexOf('_');&#xA;&#x9;&#x9;&#x9;&#x9;       }&#xA;&#x9;&#x9;&#x9;&#x9;       println(&quot;commaIndex :::  &quot;+commaIndex);&#xA;&#x9;&#x9;&#x9;&#x9;       holdsApp = crsStatus.substring(commaIndex+1,crsStatus.length());&#xA;&#x9;&#x9;&#x9;&#x9;       crsStatus = crsStatus.substring(0,commaIndex);&#xA;&#x9;&#x9;&#x9;&#x9;       println(&quot;holdsApp :::  &quot;+holdsApp + &quot; :: &quot;+ crsStatus);&#xA;    &#x9;&#x9;&#x9;&#x9;    }*/&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;//def temUnit = getActiveUnits1(&quot;TCLU8001357&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;//println(&quot;temUnit&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+temUnit);&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;/*def userId = &quot;riyer&quot;;&#xA;&#x9;&#x9;&#x9;println(&quot;UserId :: &quot; + userId);&#xA;&#x9;&#x9;&#x9;def usrEmail = null;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;ArgoUser&quot;).addDqPredicate(PredicateFactory.eq(SecurityField.BUSER_UID, userId));&#xA;&#x9;&#x9;&#x9;println(dq);&#xA;&#x9;&#x9;&#x9;def user =  HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;if (user.size() &gt; 0) {&#xA;&#x9;&#x9;&#x9;&#x9;Iterator userIter = user.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while ( userIter.hasNext()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def usr = userIter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;usrEmail = usr.buserEMail;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;usrEmail :::&quot;+usrEmail);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}*/&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;//getUnitForId(&quot;CAXU6972024&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;//Facility facility = Facility.findFacility(&quot;HON&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;//println(&quot;facility :::::::::::::&quot;+facility.fcyJmsConnection.jmsProviderUrl);&#xA;&#x9;&#x9;&#x9;&#x9;//println(&quot;Calling GvyRefDataLookup to get the JMS_URL from topology&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;//String tdpUrl = getGroovyClassInstance(&quot;GvyRefDataLookup&quot;).getN4TopicAddress(); //A6&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;//Connection conn;&#xA;&#x9;&#x9;&#x9;&#x9;//ResultSet rs = null;&#xA;&#x9;&#x9;&#x9;&#x9;//HashMap reportMap = null;&#xA;&#x9;&#x9;&#x9;&#x9;//def GvyRefDataLookup = inj.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;//conn = GvyRefDataLookup.connect();&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;//rs = GvyRefDataLookup.lookupNv(&quot;MAU021&quot;,conn);&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;/*println(&quot;Calling unitsByArrivalPosition&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;ArrayList&lt;String&gt; ctnr = new ArrayList&lt;String&gt;();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ctnr.add(0,&quot;MATU5514754&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;for (String ctr: ctnr)&#xA;&#x9;&#x9;&#x9;&#x9;{&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;def container = Container.findContainer(ctr);&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot; container :::::::::::::::; &quot;+container.eqMaterial);&#xA;&#x9;&#x9;&#x9;&#x9;container.setEqMaterial(EquipMaterialEnum.STEEL);&#xA;&#x9;&#x9;&#x9;&#x9;}*/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//unitsByArrivalPosition();&#xA;&#x9;&#x9;&#x9;&#x9;//def url = getGroovyClassInstance(&quot;GvyRefDataLookup&quot;).getN4TopicAddress();&#xA;&#x9;&#x9;&#x9;&#x9;//println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;url&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+url);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//String wsdlurl = getGroovyClassInstance(&quot;GvyRefDataLookup&quot;).getChasRfidUrl(); //A6&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; wsdlurl &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+wsdlurl);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//getUnitForId();&#xA;&#x9;&#x9;&#x9;&#x9;/*List ufvList = getActiveUnitsTest();&#xA;&#x9;&#x9;&#x9;&#x9;//if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//def vesselService  =unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.cvdService.srvcId&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;&lt;&lt;&lt;&lt;vesselService&gt;&gt;&gt;&gt;&gt;&quot;+vesselService);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//if (vesselService.equals(&quot;KAH&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//def damageNotes = unit.getUnitEquipDmgsItmNote()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;&lt;&lt;&lt;&lt;vesselService&gt;&gt;&gt;&gt;&gt;&quot;+unit.unitId+&quot;&lt;&lt;&gt;&gt;&quot;+vesselService+&quot;&lt;&lt;&gt;&gt;&quot;+damageNotes);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//}&#xA;&#x9;&#x9;&#x9;&#x9;//  }&#x9;&#x9;*/&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//getChassis();&#xA;/*&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;String inType = &quot;CVDR&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String inId1 = &quot;PES318&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String inId2 = &quot;SUDU123456&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String inId3 = &quot;TEMP&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String inValue1 = &quot;10&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String inValue2 = &quot;20&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String inValue3 = null;&#xA;&#x9;&#x9;&#x9;&#x9;String inValue4 = null;&#xA;&#x9;&#x9;&#x9;&#x9;String inValue5 = null;&#xA;&#x9;&#x9;&#x9;&#x9;String inValue6 = null;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;GeneralReference generalReference = GeneralReference.findOrCreate(inType, inId1, inId2, inId3, inValue1, inValue2, inValue3, inValue4, inValue5, inValue6);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;inType = &quot;CVDR&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;inId1 = &quot;PES318&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;inId2 = &quot;SUDU123456&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;inId3 = &quot;GROSS WEIGHT&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;inValue1 = &quot;2600&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;inValue2 = &quot;2800&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;inValue3 = &quot;2600&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;inValue4 = null;&#xA;&#x9;&#x9;&#x9;&#x9;inValue5 = null;&#xA;&#x9;&#x9;&#x9;&#x9;inValue6 = null;&#xA;&#x9;&#x9;&#x9;&#x9;generalReference = GeneralReference.findOrCreate(inType, inId1, inId2, inId3, inValue1, inValue2, inValue3, inValue4, inValue5, inValue6);&#xA;&#xA;            &#x9;&#x9;&#x9;List refList = null;&#xA;            &#x9;&#x9;&#x9;refList = getGenRef(inType, inId1);&#xA;            &#x9;&#x9;&#x9;println (&quot;refList.size() ::: &quot; + refList.size())&#xA;&#xA;            &#x9;&#x9;&#x9;if (refList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator iterRefList = refList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while (iterRefList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def genRef = iterRefList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot; :: genRef data :: &quot;+ genRef.refGkey +&quot;:&quot;+ genRef.refType +&quot;:&quot;+ genRef.refId1 +&quot;:&quot;+ genRef.refId2 +&quot;:&quot;+ genRef.refId3 +&quot;:&quot;+ genRef.refValue1 +&quot;:&quot;+ genRef.refValue2 +&quot;:&quot;+ genRef.refValue3);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;*/&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;/*&#x9;println(&quot;MatGetUnitDetails&quot;)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;List unitList = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;List shipperList = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;List agentList = null;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;start = notes.indexOf(&quot;CNC&quot;) + 4;&#xA;&#x9;&#x9;&#x9;&#x9;updatedNotes = notes.substring(start)&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;updatedNotes  &quot;+updatedNotes)&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Index of CNc in str   &quot;+ notes.indexOf(&quot;CNC&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;start =  updatedNotes.indexOf(&quot; &quot;);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Index of Space in str   &quot;+ updatedNotes.indexOf(&quot; &quot;));&#xA;&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (editUser.equalsIgnoreCase(&quot;snx:-snx-&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (notes.contains(&quot;ADD&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;In ADD&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//updateHolds = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (notes.contains(&quot;CNC&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;In CNC&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;updateHolds = updatedNotes.substring(0,start);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;updateHolds :&quot;+updateHolds);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;    &#x9;&#x9;&#x9;}*/&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//getUnitsForUpdate()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//getUnitListForBl();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//getUnit();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//emailSender.custSendEmail(&quot;1aktosdevteam@matson.com&quot;,&quot;1aktosdevteam@matson.com&quot;,&quot;: Client Vessel Notification&quot;,&quot;Clent vessel completed, xml posted to MNS application&quot;);&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList ------- Success&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(e)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA; public void unitsByArrivalPosition(){&#xA; String Id = &quot;MLI101&quot;;&#xA;&#x9;&#x9;println(&quot;&lt;&lt;&lt;&lt;TESTING DISCHARGE REPORT COUNTS ID&gt;&gt;&gt;&gt;&quot;+Id);&#xA;&#x9;&#x9;HashMap outputMap = null;&#xA;&#x9;&#x9;List resultAcctList = new ArrayList();&#xA;&#x9;&#x9;HashSet positionSet = new HashSet();&#xA;&#x9;&#x9;List acctList = null;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY,UnitCategoryEnum.THROUGH))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_TYPE, &quot;VESSEL&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_GKEY, &quot;144267770&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S10_ADVISED))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S99_RETIRED))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S20_INBOUND))&#xA; &#x9;&#x9;&#x9;&#x9;.addDqOrdering(Ordering.asc(UnitField.UFV_UNIT_ID));&#xA;&#xA;&#x9;&#x9;&#x9;acctList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println(&quot;Domain Query:::&quot;+dq);&#xA;&#x9;&#x9;&#x9;println(&quot;&lt;&lt;&lt;&lt;ACCTLIST SIZE IS &gt;&gt;&gt;&gt;&quot;+acctList.size());&#xA;&#x9;&#x9;&#x9;def checkUnit = &quot;0000000000&quot;;&#xA;&#x9;&#x9;&#x9;if (acctList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterUnitList = acctList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unitId = unit.unitId;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (unitId != checkUnit){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;checkUnit = unitId;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;&lt;&lt;&lt;unitId &gt;&gt;&gt;&quot;+unitId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def EquipmentTypeClass = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;).getKey();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def transitState = ufv.ufvTransitState;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def transitStateKey = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def equipType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (transitState != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;transitStateKey = transitState != null ? transitState.getKey() : ''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def tState = transitStateKey.split(&quot;_&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;transitStateKey = tState[1]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ((transitStateKey.equalsIgnoreCase(&quot;ECOUT&quot;) &amp;&amp; EquipmentTypeClass.equalsIgnoreCase(&quot;CHASSIS&quot;)) || equipType.startsWith(&quot;MG&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;log(unit.unitId+&quot;::&quot;+transitStateKey+&quot;::::&quot;+EquipmentTypeClass +&quot;::&quot;+equipType);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;outputMap = populateAcctListByType(ufv)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultAcctList.add(outputMap)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;println (&quot;resultAcctList.size  &quot;+resultAcctList.size);&#xA;&#x9;&#x9;&#x9;JRDataSource ds = new JRMapCollectionDataSource(resultAcctList);&#xA; &#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#xA;                &#x9;//Set report parameters&#xA;                &#x9;HashMap parameters = new HashMap();&#xA;                &#x9;parameters.put(&quot;outboundVesVoy&quot;,&quot;MLI101&quot;);&#xA;                &#x9;parameters.put(&quot;Date&quot;,new Date());&#xA;                &#x9;// call report design of rehandle containers not loaded back to vessel report.&#xA;               &#x9;&#x9;def reportDesignName = &quot;ACCT AUDIT DISCH REPORT&quot;;&#xA;&#xA;                &#x9;// Emailing report&#xA;                &#x9;reportRunner.emailExcelReport(ds, parameters,reportDesignName ,&quot;1aktosdevteam@matson.com&quot;,&quot;ACCT AUDIT DISCH REPORT - After&quot;,&quot;ACCT AUDIT DISCH REPORT&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#xA;                }&#xA;&#xA;&#xA;    public HashMap populateAcctListByType(UnitFacilityVisit ufv) {&#xA;&#xA;        HashMap resMap = new HashMap();&#xA;        def unit = ufv.ufvUnit&#xA;        UnitEquipment chasEquip = unit.getUnitCarriageUe();&#xA;        def freightkindout = unit.getFieldValue(&quot;unitFreightKind&quot;).getKey();&#xA;        def attachedUnit = unit.getFieldValue(&quot;unitAttachedEquipIds&quot;)&#xA;        //println(&quot;chasEquip   &quot;+chasEquip)&#xA;        if (&quot;FCL&quot;.equals(freightkindout))&#xA;        {&#xA;            freightkindout = &quot;F&quot;;&#xA;        } else if (&quot;MTY&quot;.equals(freightkindout))&#xA;        {&#xA;            freightkindout = &quot;E&quot;;&#xA;        }&#xA;&#xA;        resMap.put(&quot;Commodity&quot;,unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;));&#xA;        resMap.put(&quot;EquipmentTypeClass&quot;,unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;).getKey());&#xA;        resMap.put(&quot;EquipmentType&quot;,unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;))&#xA;        resMap.put(&quot;FreightKind&quot;,freightkindout)&#xA;        resMap.put(&quot;UnitNbr&quot;,unit.getFieldValue(&quot;unitId&quot;))&#xA;        if (attachedUnit != null &amp;&amp; chasEquip !=null)&#xA;        {&#xA;            resMap.put(&quot;AttachedUnits&quot;,unit.getFieldValue(&quot;unitAttachedEquipIds&quot;))&#xA;        } else if (attachedUnit != null &amp;&amp; chasEquip == null)&#xA;        {&#xA;            resMap.put(&quot;AttachedUnits&quot;,null)&#xA;        }&#xA;&#xA;        resMap.put(&quot;InboundCarrierATA&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvATA&quot;))&#xA;            resMap.put(&quot;InboundCarrierATD&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvATD&quot;))&#xA;            resMap.put(&quot;OPL&quot;,unit.getFieldValue(&quot;unitRouting.rtgOPL.pointId&quot;))&#xA;            //resMap.put(&quot;InboundCarrierId&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;))&#xA;            resMap.put(&quot;InboundCarrierId&quot;,vesselForDischId)&#xA;            resMap.put(&quot;UfvFlexString06&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString06&quot;))&#xA;&#xA;        //println(&quot;Result map is &quot;+resMap);&#xA;        return resMap;&#xA;    }&#xA;&#xA;public void getUnitForId(String containerId)&#xA;&#x9;{&#xA;&#xA;&#x9;try {&#xA;&#x9;&#x9;&#x9;println(&quot;Inside getUnit&quot;);&#xA;&#x9;&#x9;&#x9;inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;//String containerId = &quot;MATU2496256&quot;;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID,containerId));&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S40_YARD))&#xA;&#x9;&#x9;&#x9;println(&quot;getUnit &quot;+dq);&#xA;&#x9;&#x9;&#x9;def unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println(&quot;After unitList&quot;+unitList.size());&#xA;&#x9;&#x9;&#x9;if (unitList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;def trucker = null;&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def consignee = unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def shipper = unit.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuName&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String gdsWeight = new BigDecimal(unit.getUnitGoodsAndCtrWtKg()).setScale(2, BigDecimal.ROUND_HALF_UP).toString();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String gdsWeight1 = unit.getUnitGoodsAndCtrWtKg().toString();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;&lt;&lt;&lt;consignee &gt;&gt;&gt;&quot;+consignee + &quot; &lt;&lt;&lt;shipper&gt;&gt;&gt;&gt;&quot;+shipper +&quot; gdsWeight &quot;+ gdsWeight + &quot;::&quot;+gdsWeight1);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;}catch (Exception e){&#xA;&#x9;&#x9;println(&quot;Error :&quot; + e);&#xA;&#x9;}&#xA;}&#xA;&#xA;public List getActiveUnitsTest()&#xA;&#x9;&#x9;&#x9;   {&#xA;&#xA;&#x9;&#x9;Date startDate = new Date() - 302;&#xA;&#x9;&#x9;String trimDate = startDate.format('yyyy-MM-dd')&#xA;&#x9;&#x9;startDate = startDate.parse('yyyy-MM-dd', trimDate);&#xA;&#x9;&#x9;Date endDate = startDate +  301;&#xA;&#x9;&#x9;println(&quot;startDate &quot;+ startDate);&#xA;&#x9;&#x9;println(&quot;endDate &quot;+ endDate);&#xA;&#xA;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;                dq = dq.addDqPredicate(PredicateFactory.in(UnitField.UFV_PRIMARY_EQ_DAMAGE_SEVERITY,EqDamageSeverityEnum.MAJOR,EqDamageSeverityEnum.MINOR))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.in(UnitField.UFV_VISIT_STATE,&quot;3DEPARTED&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ge(UnitField.UFV_TIME_OUT,startDate))&#xA;                .addDqPredicate(PredicateFactory.le(UnitField.UFV_TIME_OUT,endDate));&#xA;&#x9;&#x9;&#x9;&#x9;  println(dq);&#xA;&#x9;&#x9;&#x9;&#x9;  List ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;&#x9;  println(&quot;After unitList&quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;&#x9; /* if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def vesselService  =unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.cvdService.srvcId&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;&lt;&lt;&lt;&lt;vesselService&gt;&gt;&gt;&gt;&gt;&quot;+vesselService);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (vesselService.equals(&quot;GCS&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;units.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;&lt;&lt;&lt;&lt;vesselService&gt;&gt;&gt;&gt;&gt;&quot;+unit.unitId+&quot;&lt;&lt;&gt;&gt;&quot;+vesselService);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def damageNotes = unit.getUnitEquipDmgsItmNote()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;&lt;&lt;&lt;&lt;damageNotes&gt;&gt;&gt;&gt;&gt;&quot;+unit.unitId+&quot;&lt;&lt;&gt;&gt;&quot;+damageNotes);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}catch (Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;error while getting damage description&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;  }&#xA;&#x9;&#x9;&#x9;&#x9;  println(&quot;unitsSize&quot; + units.size);*/&#xA;&#x9;&#x9;&#x9;&#x9;return ufvList;&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9;&#x9; }&#xA;&#x9;}&#xA;&#xA;public  void getChassis()&#xA;&#x9;&#x9;   {&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;println(&quot;Inside getUnit&quot;);&#xA;&#x9;&#x9;&#x9;List ufvGateUnits = null;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Chassis&quot;);&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.le(ArgoRefField.EQ_TARE_WEIGHT_KG, 0))&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.EQ_LIFE_CYCLE_STATE, LifeCycleStateEnum.ACTIVE))&#xA;&#x9;&#x9;&#x9;println(&quot;getUnit &quot;+dq);&#xA;&#x9;&#x9;&#x9;def chList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println(&quot;After unitList&quot;+chList.size());&#xA;&#x9;&#x9;&#x9;if (chList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterChList = chList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterChList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def chassis = iterChList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(chassis.eqIdFull+&quot;|&quot;+chassis.eqEquipType.eqtypId+&quot;|&quot;+chassis.eqTareWeightKg)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;println(&quot;After unitList&quot;+chList.size());&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;   }&#xA;&#xA;&#xA;public  void getUnitCntForTagId()&#xA;&#x9;&#x9;   {&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;println(&quot;Inside getUnit&quot;);&#xA;&#x9;&#x9;&#x9;List ufvGateUnits = null;&#xA;&#x9;&#x9;&#x9;String tagId = &quot;Start&quot;;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;);&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(UnitField.UNIT_VISIT_STATE, &quot;1ACTIVE&quot;))&#xA;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.isNotNull(InventoryField.UNIT_FLEX_STRING15))&#xA;&#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.in(InventoryField.UNIT_FLEX_STRING15,&quot;33717937&quot;,&quot;33807230&quot;))&#xA;&#x9;&#x9;&#x9;.addDqOrdering(Ordering.desc(InventoryField.UNIT_FLEX_STRING15))&#xA;&#x9;&#x9;&#x9;.addDqOrdering(Ordering.desc(InventoryField.UNIT_CREATE_TIME));&#xA;&#x9;&#x9;&#x9;def unit = null;&#xA;&#x9;&#x9;&#x9;println(&quot;getUnit &quot;+dq);&#xA;&#x9;&#x9;&#x9;def unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println(&quot;After unitList&quot;+unitList.size());&#xA;&#x9;&#x9;&#x9;if (unitList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (tagId == unit.unitFlexString15){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Update TagId as NULL for unit number :: &quot;+ unit.unitId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Update TagId as &quot;+unit.unitFlexString15+&quot; for unit number :: &quot;+ unit.unitId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;tagId = unit.unitFlexString15;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;   }&#xA;&#xA;  public List getGenRef(String inType, String inId1)&#xA;  {&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(&quot;GeneralReference&quot;).addDqPredicate(PredicateFactory.eq(ArgoField.REF_TYPE, inType)).addDqPredicate(PredicateFactory.eq(ArgoField.REF_ID1, inId1));&#xA;&#x9;println(dq);&#xA;    &#x9;List genRef = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;println (&quot;genRef.size() ::: &quot; + genRef.size())&#xA;&#x9;return (genRef);&#xA;  }&#xA;&#xA;public  getUnitCnt()&#xA;&#x9;&#x9;   {&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;println(&quot;Inside getUnit&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;Long lineOpGkey = LineOperator.findLineOperatorById(&quot;MAT&quot;).bzuGkey&#xA;&#xA;&#x9;&#x9;&#x9;List ufvGateUnits = null;&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;);&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(InventoryField.UNIT_LINE_OPERATOR,lineOpGkey)).addDqPredicate(PredicateFactory.le(InventoryField.UNIT_FREIGHT_KIND,&quot;MTY&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;def unit = null;&#xA;&#xA;&#x9;&#x9;&#x9;println(&quot;getUnit &quot;+dq);&#xA;&#x9;&#x9;&#x9;def unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println(&quot;After unitList&quot;+unitList.size());&#xA;&#x9;&#x9;&#x9;if (unitList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;//return unit;&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;   }&#xA;&#xA;public void getUnit()&#xA;&#x9;&#x9;   {&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;println(&quot;Inside getUnit&quot;);&#xA;&#x9;&#x9;&#x9;inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;&#x9;String trucker = null;&#xA;&#x9;&#x9;&#x9;String agentListGkey = null;&#xA;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;String containerId = &quot;FCIU3316760&quot;;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;//dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID,&quot;ALE252A&quot;));&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID,containerId));&#xA;&#x9;&#x9;&#x9;&#x9;/*dq.addDqPredicate(PredicateFactory.in(UnitField.UFV_TRANSIT_STATE,&quot;S70_DEPARTED&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.ne(UnitField.UFV_CATEGORY,&quot;STRGE&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.in(UnitField.UFV_GDS_DESTINATION,&quot;MOL&quot;)); */&#xA;&#x9;&#x9;&#x9;println(&quot;getUnit &quot;+dq);&#xA;&#x9;&#x9;&#x9;def unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println(&quot;After unitList&quot;+unitList.size());&#xA;&#x9;&#x9;&#x9;if (unitList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;trucker = null;&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Here &quot;+unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;UnitId &quot; + unit.ufvUnit.unitId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;unitRemark &quot; + unit.ufvUnit.unitRemark);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;trucker = unit.ufvUnit.unitRemark;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (trucker.contains(&quot;\&quot;&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trucker = trucker.replaceAll(&quot;\&quot;&quot;, &quot;\&quot;\&quot;&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;trucker &quot; +trucker);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/*if (unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuId&quot;) != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def updateTrucker = inj.getGroovyClassInstance(&quot;MatUpdateTrucker&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trucker = updateTrucker.getTrucker(unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;trucker &quot;+trucker);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (trucker != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def truckerName = TruckingCompany.findTruckingCompany(trucker)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;truckerName &quot; + truckerName)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Before Trucking &quot; + unit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitRouting.rtgTruckingCompany&quot;, truckerName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;After Trucking &quot; + unit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;))*/&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;UnitId &quot; + unit.getFieldValue(&quot;unitId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;Equipment Class &quot; + unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;).getKey())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;VesVoy &quot; + unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;UnitClass &quot; +unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;Destination &quot; + unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;Booking Number &quot;+unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;Create Date &quot;+ unit.unitCreateTime);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;   }&#xA;&#xA;public void getUnitTran()&#xA;&#x9;&#x9;   {&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;println(&quot;Inside getUnit&quot;);&#xA;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;String containerId = &quot;TOLU8794418&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;Date date = new Date();&#xA;&#x9;&#x9;&#x9;println(&quot; Inside DB Query &quot; + date);&#xA;&#xA;&#x9;&#x9;&#x9;List ufvYbUnits = null;&#xA;&#xA;&#x9;&#x9;&#x9;String formattedDate = date.format('MM/dd/yyyy');&#xA;&#xA;&#x9;&#x9;&#x9;String startDateHST = formattedDate +&quot; &quot;+&quot;00:00:00 HST&quot;;//2012-07-19 00:00:00 HST&quot;;&#xA;&#x9;&#x9;&#x9;String endDateHST = formattedDate +&quot; &quot;+&quot;23:59:59 HST&quot;;//&quot;2012-07-19 23:59:59 HST&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;Date startDate = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss z&quot;, Locale.ENGLISH).parse(startDateHST);&#xA;&#x9;&#x9;&#x9;println (&quot;PDT Start date time &quot; + startDate);&#xA;&#x9;&#x9;&#x9;Date endDate = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss z&quot;, Locale.ENGLISH).parse(endDateHST);&#xA;&#x9;&#x9;&#x9;println (&quot;PDT End date time &quot; + endDate);&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;TruckTransaction&quot;).addDqPredicate(PredicateFactory.ge(RoadField.TRAN_CREATED, startDate)).addDqPredicate(PredicateFactory.le(RoadField.TRAN_CREATED, endDate)).addDqPredicate(PredicateFactory.eq(RoadField.TRAN_LINE_ID, &quot;MEA&quot;));&#xA;            println(&quot;dq---------------&quot;+dq);&#xA;            ufvYbUnits  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            println(&quot;Query executed&quot;);&#xA;            println(&quot;unitUfvYB ::&quot;+ufvYbUnits != null ? ufvYbUnits.size() : 0)&#xA;&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;   }&#xA;&#xA;private List getShipper()&#xA;  {&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(&quot;Shipper&quot;).addDqPredicate(PredicateFactory.like(ArgoRefField.BZU_NAME, &quot;Test Shipper&quot;));&#xA;&#xA;&#x9;//DomainQuery dq = QueryUtils.createDomainQuery(&quot;Shipper&quot;).addDqPredicate(PredicateFactory.isNotNull(ArgoRefField.BZU_NOTES));&#xA;&#xA;&#x9;println (dq)&#xA;    List shippers = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#xA;&#x9;println (&quot;shippers.size()&quot; + shippers.size())&#xA;    if (shippers.size() &lt;= 0)&#xA;      return null;&#xA;&#xA;    return (shippers);&#xA;  }&#xA;&#xA;&#xA;  public List getAgentById(String inName)&#xA;  {&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(&quot;Agent&quot;).addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_ID, inName));&#xA;&#x9;println(dq);&#xA;&#x9;List agent = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;println (&quot;agent.size()&quot; + agent.size())&#xA;&#x9;return (agent);&#xA;  }&#xA;&#xA;public void getCmcYard()&#xA;&#x9;&#x9;   {&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;println(&quot;Inside getCmcYard&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.in(UnitField.UNIT_GDS_BL_NBR,&quot;AKL121210858&quot;))&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.in(UnitField.UFV_TRANSIT_STATE,&quot;S70_DEPARTED&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.ne(UnitField.UFV_CATEGORY,&quot;STRGE&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.in(UnitField.UFV_GDS_DESTINATION,&quot;MOL&quot;,&quot;NAW&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.in(UnitField.UFV_FREIGHT_KIND,&quot;FCL&quot;));&#xA;&#x9;&#x9;&#x9;println(&quot;getUnit &quot;+dq);&#xA;&#x9;&#x9;&#x9;def unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println(&quot;After unitList&quot;+unitList.size());&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;   }&#xA;&#xA;&#xA;public getActiveUnits(String unitNbr)&#xA;&#x9;&#x9;   {&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;//DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;  //dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID,vesVoy));&#xA;&#x9;&#x9;&#x9;  //println(dq);&#xA;&#x9;&#x9;&#x9;  Long facilityGkey = ContextHelper.getThreadFacility().getFcyGkey();&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;ContextHelper.getThreadFacility().getFcyGkey() : &quot;+ContextHelper.getThreadFacility().getFcyGkey())&#xA;&#x9;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UNIT_ID,unitNbr))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UFV_FACILITY, facilityGkey));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;dq:::::::::&quot;+dq)&#xA;&#xA;&#x9;&#x9;&#x9;  def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;  println(&quot;After unitList&quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;  if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;&#x9; Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9; while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; def unit = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; //if(unit.getFieldValue(&quot;unitVisitState&quot;).equals(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; //com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// units.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; UnitVisitStateEnum visitState = unit.getUnitVisitState();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; println(visitState.getKey());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; println(&quot; IbCv &quot;+ unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;)+&quot; ObCv : &quot;+unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;)+&quot; LastFreeDay : &quot;+unit.getFieldValue(&quot;unitActiveUfv.ufvCalculatedLastFreeDay&quot;)+&quot; Date2 : &quot;+unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate02&quot;)+&quot; Date3 : &quot;+unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate03&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;  }&#xA;&#x9;&#x9;&#x9;  println(&quot;unitsSize&quot; + units.size);&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;   }&#xA;&#xA;public List getActiveUnits1(String unitNbr)&#xA;&#x9;&#x9;   {&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;Long facilityGkey = ContextHelper.getThreadFacility().getFcyGkey();&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;ContextHelper.getThreadFacility().getFcyGkey() : &quot;+ContextHelper.getThreadFacility().getFcyGkey())&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;  dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_FACILITY, facilityGkey))&#xA;&#x9;&#x9;&#x9;&#x9;  .addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID, unitNbr));&#xA;&#x9;&#x9;&#x9;  println(dq);&#xA;&#x9;&#x9;&#x9;  def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;  println(&quot;After unitList&quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;  if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;&#x9; Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9; println(ufvList)&#xA;&#x9;&#x9;&#x9;&#x9; println(ufvList.ufvGkey)&#xA;&#x9;&#x9;&#x9;&#x9; println(ufvList.ufvCalculatedLastFreeDay)&#xA;&#x9;&#x9;&#x9;&#x9; while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; def ufv1 = unit.getUfvForFacilityCompletedOnly(fcy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; if(unit.getFieldValue(&quot;unitVisitState&quot;).equals(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; //def lastfreeDayStr = ufv1.getFieldValue(&quot;ufvCalculatedLastFreeDay&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; //println(&quot;lastfreeDayStr&quot;+lastfreeDayStr +&quot;:&quot;+ufv1.getFieldValue(&quot;ufvFlexDate02&quot;)+&quot;:&quot;+ufv1.getFieldValue(&quot;ufvFlexDate03&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; //println(&quot;ufvCalculatedLastFreeDay &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot; +unit.getFieldValue(&quot;unitActiveUfv.ufvCalculatedLastFreeDay&quot;)+&quot;:&quot;+unit.getFieldValue(&quot;unitActiveUfv.ufvTimeOfLastMove&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; units.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;  }&#xA;&#x9;&#x9;&#x9;  println(&quot;unitsSize&quot; + units.size);&#xA;&#x9;&#x9;&#x9;return units;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;   }&#xA;&#xA;&#xA;// Added by Raghu Iyer on 11/08/2012 to update the BL Number as blank where &quot;DO NOT EDIT .....&quot;&#xA;  private void getUnitListForBl(){&#xA;&#xA;&#xA;&#x9;String  blNumber = &quot;TEST123456&quot;;&#xA;&#x9;String&#x9;blDest = &quot;HON&quot;;&#xA;&#x9;String  blLinrOptr = &quot;APL&quot;;&#xA;&#x9;String&#x9;blPod1 = &quot;HIL&quot;;&#xA;&#x9;String  blPod2 = &quot;KHI&quot;;&#xA;&#x9;String  blPol = &quot;HIL&quot;;&#xA;&#x9;String  blOrgn = &quot;MEL&quot;;&#xA;&#x9;String ownerCode = null;&#xA;&#x9;if (blLinrOptr != null)&#xA;&#x9;{&#xA;&#x9;&#x9;ownerCode = blLinrOptr+&quot;U&quot;;&#xA;&#x9;}&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;)&#xA;            //.addDqPredicate(PredicateFactory.eq(UnitField.UNIT_GDS_BL_NBR,blNumber));&#xA;            .addDqPredicate(PredicateFactory.in(UnitField.UNIT_ID, &quot;MATU2510061&quot;));&#xA;&#x9;println(&quot;dq:::::::::&quot;+dq)&#xA;    HibernateApi hibernate = HibernateApi.getInstance();&#xA;    List unitList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Before Update UnitId:::&quot;+unit.unitId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;POL:&quot;+ unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;POD1:&quot;+unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;destination:&quot;+unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Orogin:&quot;+unit.getFieldValue(&quot;unitGoods.gdsOrigin&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;LineOptr:::&quot;+unit.getFieldValue(&quot;unitLineOperator.bzuId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;equiOptr:&quot;+unit.getFieldValue(&quot;unitCarriageUe.ueEquipmentState.eqsEqOperator.bzuId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;equiOwner:&quot;+unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOwner.bzuId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Carr Owner:&quot;+unit.getFieldValue(&quot;unitCarriageUe.ueEquipmentState.eqsEqOwner.bzuId&quot;))&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def operator = LineOperator.findLineOperatorById(&quot;APL&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+operator)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit.setUnitLineOperator(operator);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def routing = unit.getUnitRouting();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;routing.setRtgPOL(RoutingPoint.findRoutingPoint(blPol));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;routing.setRtgPOD1(RoutingPoint.findRoutingPoint(blPod1));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;routing.setRtgPOD2(RoutingPoint.findRoutingPoint(blPod2));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsDestination&quot;,blDest);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsOrigin&quot;,blOrgn);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit.setUnitFlexString13(ownerCode);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;After Update UnitId:::&quot;+unit.unitId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;LineOptr:::&quot;+unit.getFieldValue(&quot;unitLineOperator.bzuId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;POL:&quot;+ unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;POD1:&quot;+unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;destination:&quot;+unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Orogin:&quot;+unit.getFieldValue(&quot;unitGoods.gdsOrigin&quot;))&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;LineOptr:::&quot;+unit.getFieldValue(&quot;unitLineOperator.bzuId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;equiOptr:&quot;+unit.getFieldValue(&quot;unitCarriageUe.ueEquipmentState.eqsEqOperator.bzuId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;equiOwner:&quot;+unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOwner.bzuId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Carr Owner:&quot;+unit.getFieldValue(&quot;unitCarriageUe.ueEquipmentState.eqsEqOwner.bzuId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;  }&#xA;&#xA;   private void getUnitHazard(){&#xA;&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;)&#xA;            .addDqPredicate(PredicateFactory.in(UnitField.UNIT_ID, &quot;MATU2080356&quot;));&#xA;&#x9;println(&quot;dq:::::::::&quot;+dq)&#xA;    HibernateApi hibernate = HibernateApi.getInstance();&#xA;    List unitList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Hazard &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;) +&quot; &quot;+unit.getFieldValue(&quot;unitGoods.gdsIsHazardous&quot;) );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;) == &quot;KAU714&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String drayStatus = unit.getFieldValue(&quot;unitDrayStatus&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String requiredPower = unit.getFieldValue(&quot;unitRequiresPower&quot;) ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;unitDrayStatus:&quot;+drayStatus)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;unitRequiresPower:&quot;+requiredPower)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;unitSpecialStow:&quot;+ unit.getFieldValue(&quot;unitSpecialStow&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unitDeckRqmnt  = unit.getFieldValue(&quot;unitDeckRqmnt&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitDeckRqmnt = unitDeckRqmnt.getKey();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;unitDeckRqmnt:&quot;+ unitDeckRqmnt);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String etcAttrOpn = &quot;&lt;unit-etc&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String etcString = etcAttrOpn;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (requiredPower !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;etcString = etcString + &quot; requires-power=&quot; + XML_OVERRIDE + requiredPower + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (drayStatus !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;etcString = etcString + &quot; dray-status=&quot; + XML_OVERRIDE + drayStatus + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (drayStatus != null || requiredPower == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;etcString = etcString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;unitIsOog &lt;&lt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitIsOog&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (unit.getFieldValue(&quot;unitIsOog&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String backCm = unit.getFieldValue(&quot;unitOogBackCm&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String frontCm = unit.getFieldValue(&quot;unitOogFrontCm&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String leftCm = unit.getFieldValue(&quot;unitOogLeftCm&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String rightCm = unit.getFieldValue(&quot;unitOogRightCm&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String topCm = unit.getFieldValue(&quot;unitOogTopCm&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String oogAttrOpn = &quot;&lt;oog&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String oogString = oogAttrOpn&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (rightCm !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; right-cm=&quot; + XML_OVERRIDE + rightCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (leftCm !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; left-cm=&quot; + XML_OVERRIDE + leftCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (backCm !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; back-cm=&quot; + XML_OVERRIDE + backCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (frontCm !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; front-cm=&quot; + XML_OVERRIDE + frontCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (topCm !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; top-cm=&quot; + XML_OVERRIDE + topCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;oogString = oogString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = unit.getUnitActiveUfvNowActive();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String timeIn = ufv.ufvTimeIn;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String timeOut = ufv.ufvTimeOut;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String timeLoad = ufv.ufvTimeOfLoading;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String timeStampAttrOpn = &quot;&lt;timestamps&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String timeStampString = timeStampAttrOpn;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (timeIn !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + &quot; time-in=&quot; + XML_OVERRIDE + timeIn + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (timeOut !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + &quot; time-out=&quot; + XML_OVERRIDE + timeOut + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (timeLoad !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + &quot; time-load=&quot; + XML_OVERRIDE + timeLoad + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (timeIn != null || timeOut != null || timeLoad != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Timestamp &quot;+timeStampString);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Hazard &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;gdsIsHazardous&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (ufv.ufvUnit.getUnitGoods() != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def haz = ufv.ufvUnit.getUnitGoods().getGdsHazards();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;hazard&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+haz)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (haz != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String hazardsAttrOpn = &quot;&lt;hazards&gt;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String addtag = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def hazardAttrOpn = &quot;&lt;hazard&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def hazardString = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator hazardIter = ufv.ufvUnit.getUnitGoods().getGdsHazards().getHazardItemsIterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;while(hazardIter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def hazard = hazardIter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def imdgClass = hazard.getHzrdiImdgCode() != null ? hazard.getHzrdiImdgCode().getKey() : null&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def nbrType = hazard.getHzrdiNbrType() != null ? hazard.getHzrdiNbrType().getKey() : null&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def qty = hazard.hzrdiQuantity;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def packageType = hazard.hzrdiPackageType;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def weight = hazard.hzrdiWeight;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String properName = hazard.hzrdiProperName;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String techName   = hazard.hzrdiTechName;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String imdgclass  = hazard.hzrdiImdgClass.name;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def im01 = hazard.hzrdiSecondaryIMO1;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def im02 = hazard.hzrdiSecondaryIMO2;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String un  = hazard.hzrdiUNnum;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def pkg = hazard.hzrdiPackingGroup;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def flashPoint = hazard.hzrdiFlashPoint;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def limited = hazard.hzrdiLtdQty ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def marine = hazard.hzrdiMarinePollutants ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def phone = hazard.hzrdiEmergencyTelephone;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def hzrdiNotes = hazard.hzrdiNotes;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def hzrdiInhalationZone = hazard.hzrdiInhalationZone;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def hzrdiPageNumber = hazard.hzrdiPageNumber;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def hzrdiEMSNumber = hazard.hzrdiEMSNumber;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def hzrdiMFAG = hazard.hzrdiMFAG;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def hzrdiHazIdUpper = hazard.hzrdiHazIdUpper;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def hzrdiSubstanceLower = hazard.hzrdiSubstanceLower;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def hzrdiPlannerRef = hazard.hzrdiPlannerRef;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def hzrdiMoveMethod = hazard.hzrdiMoveMethod;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def hzrdiExplosiveClass = hazard.hzrdiExplosiveClass;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def hzrdiDcLgRef = hazard.hzrdiDcLgRef;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def hzrdiDeckRestrictions = hazard.hzrdiDeckRestrictions;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Hazard Details &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;+imdgClass+&quot;:&quot;+un+&quot;:&quot;+nbrType+&quot;:&quot;+limited+&quot;:&quot;+packageType+&quot;:&quot;+flashPoint+&quot;:&quot;+techName+&quot;:&quot;+weight+&quot;:&quot;+qty+&quot;:&quot;+im01+&quot;:&quot;+im02+&quot;:&quot;+marine+&quot;:&quot;+properName+&quot;:&quot;+pkg+&quot;:&quot;+phone+&quot;:&quot;+hzrdiNotes)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + hazardAttrOpn;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (nbrType != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; haz-nbr-type=&quot; + XML_OVERRIDE + nbrType + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (hzrdiNotes != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hzrdiNotes = this.stripInvalidXmlCharacters(hzrdiNotes);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hzrdiNotes = this.removeDoubleQuotes(hzrdiNotes);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; notes=&quot; +XML_OVERRIDE + hzrdiNotes + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (phone != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; emergency-telephone=&quot; +XML_OVERRIDE + phone + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;marine &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;:&quot;+marine)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (marine == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; marine-pollutants=&quot; +XML_OVERRIDE + marine + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (im01 != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; secondary-imo-1=&quot; +XML_OVERRIDE + im01 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (im02 != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; secondary-imo-2=&quot; +XML_OVERRIDE + im02 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (qty != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; quantity=&quot; +XML_OVERRIDE + qty + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (weight != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; weight-kg=&quot; +XML_OVERRIDE + weight + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (pkg != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; packing-group=&quot; +XML_OVERRIDE + pkg + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (properName != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;properName = this.stripInvalidXmlCharacters(properName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;properName = this.removeDoubleQuotes(properName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; proper-name=&quot; +XML_OVERRIDE + properName + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (techName != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;techName = this.stripInvalidXmlCharacters(techName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;techName = this.removeDoubleQuotes(techName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; tech-name=&quot; +XML_OVERRIDE + techName + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (flashPoint != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; flash-point=&quot; +XML_OVERRIDE + flashPoint + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (packageType != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; package-type=&quot; +XML_OVERRIDE + packageType + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;limited &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;:&quot;+limited)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (limited == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; ltd-qty-flag=&quot; +XML_OVERRIDE + limited + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (un != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; un=&quot; +XML_OVERRIDE + un + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (imdgClass != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; imdg=&quot; +XML_OVERRIDE + imdgClass + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (hzrdiInhalationZone != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; inhalation-zone=&quot; +XML_OVERRIDE + hzrdiInhalationZone + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (hzrdiExplosiveClass != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; explosive-class=&quot; +XML_OVERRIDE + hzrdiExplosiveClass + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (hzrdiEMSNumber != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; ems-nbr=&quot; +XML_OVERRIDE + hzrdiEMSNumber + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (hzrdiMFAG != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; mfag=&quot; +XML_OVERRIDE + hzrdiMFAG + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (hzrdiHazIdUpper != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; haz-id-upper=&quot; +XML_OVERRIDE + hzrdiHazIdUpper + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (hzrdiSubstanceLower != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; substance-lower=&quot; +XML_OVERRIDE + hzrdiSubstanceLower + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (hzrdiPlannerRef != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; planner-ref=&quot; +XML_OVERRIDE + hzrdiPlannerRef + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (hzrdiMoveMethod != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; move-method=&quot; +XML_OVERRIDE + hzrdiMoveMethod + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (hzrdiDeckRestrictions != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; deck-restrictions=&quot; +XML_OVERRIDE + hzrdiDeckRestrictions + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (hzrdiDcLgRef != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; dc-lg-ref=&quot; +XML_OVERRIDE + hzrdiDcLgRef + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (hzrdiPageNumber != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; page-number=&quot; +XML_OVERRIDE + hzrdiPageNumber + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (addtag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;hazardString &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+hazardString);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (addtag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hazardsAttrOpn = hazardsAttrOpn + hazardString + &quot;&lt;/hazards&gt;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;hazardsAttrOpn &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+hazardsAttrOpn);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;  }&#xA;&#xA;  &#x9;  public String stripInvalidXmlCharacters(String input){&#xA;&#x9;&#x9;String specialCharacter = &quot;&amp;&quot;;&#xA;&#x9;&#x9;if (input.contains(specialCharacter)) {&#xA;&#x9;&#x9;   input = input.replaceAll(&quot;&amp;&quot;, &quot;&amp;amp; &quot;);&#xA;&#x9;&#x9;   //LOGGER.warn(&quot;sb:&quot; + input);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return input;&#xA;&#x9;  }&#xA;&#xA;&#x9; public String removeDoubleQuotes(String input){&#xA;&#x9;&#x9;String specialCharacter = &quot;&amp;&quot;;&#xA;&#x9;&#x9;if (input.contains(&quot;\&quot;&quot;)) {&#xA;&#x9;&#x9;   input = input.replaceAll(&quot;\&quot;&quot;, &quot;&amp;quot;&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (input.contains(&quot;&lt;&quot;)) {&#xA;&#x9;&#x9;   input = input.replaceAll(&quot;&lt;&quot;, &quot;&amp;lt; &quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (input.contains(&quot;&gt;&quot;)) {&#xA;&#x9;&#x9;   input = input.replaceAll(&quot;&gt;&quot;, &quot;&amp;gt; &quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return input;&#xA;&#x9;  }&#xA;&#xA;private void getUnitReefer(){&#xA;&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;)&#xA;            .addDqPredicate(PredicateFactory.in(UnitField.UNIT_ID, &quot;MATU2080356&quot;));&#xA;&#x9;println(&quot;dq:::::::::&quot;+dq)&#xA;    HibernateApi hibernate = HibernateApi.getInstance();&#xA;    List unitList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def addtag = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;) == &quot;RJP379&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def tempReq = unit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempRequiredC&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def tempMax = unit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempLimitMaxC&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def tempMin = unit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempLimitMinC&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def tempTM1 = unit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor1&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def tempTM2 = unit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor2&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def tempTM3 = unit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor3&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def tempTM4 = unit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor4&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def tempPwrOnTime = unit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqLatestOnPowerTime&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def tempCo2Pct = unit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqCO2Pct&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def tempHmdtyPct = unit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqHumidityPct&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def tempO2Pct = unit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqO2Pct&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def tempVentReq = unit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqVentRequired&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def tempVentUnit = unit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqVentUnit&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def tempShowFahrenhiet = unit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempShowFahrenheit&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;tempShowFahrenhiet = tempShowFahrenhiet ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String reeferAttrOpn = &quot;&lt;reefer&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String reeferString = reeferAttrOpn;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (tempShowFahrenhiet == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-display-unit=&quot; + XML_OVERRIDE + tempShowFahrenhiet + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (tempReq !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-reqd-c=&quot; + XML_OVERRIDE + tempReq + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (tempO2Pct !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; o2-pct=&quot; + XML_OVERRIDE + tempO2Pct + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (tempCo2Pct !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; co2-pct=&quot; + XML_OVERRIDE + tempCo2Pct + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (tempHmdtyPct !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; humidity-pct=&quot; + XML_OVERRIDE + tempHmdtyPct + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (tempVentReq !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; vent-required-value=&quot; + XML_OVERRIDE + tempVentReq + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (tempVentUnit !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; vent-required-unit=&quot; + XML_OVERRIDE + tempVentUnit + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (tempMin !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-min-c=&quot; + XML_OVERRIDE + tempMin + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (tempMax !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-max-c=&quot; + XML_OVERRIDE + tempMax + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (tempPwrOnTime !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-latest-on-power=&quot; + XML_OVERRIDE + tempPwrOnTime + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (tempTM1 !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-1=&quot; + XML_OVERRIDE + tempTM1 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (tempTM2 !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-2=&quot; + XML_OVERRIDE + tempTM2 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (tempTM3 !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-3=&quot; + XML_OVERRIDE + tempTM3 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (tempTM4 !=null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-4=&quot; + XML_OVERRIDE + tempTM4 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (addtag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reeferString &quot;+reeferString)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Temp details &lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+tempReq+&quot;:&quot;+tempMax+&quot;:&quot;+tempMin+&quot;:&quot;+tempTM1+&quot;:&quot;+tempTM2+&quot;:&quot;+tempTM3+&quot;:&quot;+tempTM4+&quot;:&quot;+tempPwrOnTime+&quot;:&quot;+tempCo2Pct+&quot;:&quot;+tempHmdtyPct+&quot;:&quot;+tempVentReq+&quot;:&quot;+tempVentUnit+&quot;:&quot;+tempShowFahrenhiet);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;}&#xA;&#xA;&#x9;//private void getUnitsForUpdate(String blNbr, String blConsignee, String blConsigneeId ){&#xA;&#x9;&#x9;private void getUnitsForUpdate(){&#xA;&#x9;&#x9;List unitList = null;&#xA;&#x9;&#x9;def unitShipper = &quot;&quot;;&#xA;&#x9;&#x9;def unitConsignee = &quot;&quot;;&#xA;&#x9;&#x9;def unitShipperId = &quot;&quot;;&#xA;&#x9;&#x9;def unitConsigneeId = &quot;&quot;;&#xA;&#x9;&#x9;try {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.eq(UnitField.UNIT_GDS_BL_NBR,blNbr))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UNIT_ID,&quot;ECMU1463727&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;HibernateApi hibernate = HibernateApi.getInstance();&#xA;&#x9;&#x9;&#x9;&#x9;unitList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitShipper = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitConsignee = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitShipperId = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitConsigneeId = &quot;&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = iterUnitList.next();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ( unit.unitGoods != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitConsigneeId = unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitConsignee = unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitShipperId = unit.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitShipper = unit.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuName&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitConsigneeId = &quot;0000007907&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def consignee = ScopedBizUnit.findScopedBizUnit( unitConsigneeId, BizRoleEnum.SHIPPER);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println (&quot;Consignee ::::: &quot; + consignee);&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println (&quot;Before Unit Number :::: &quot;+ unit.unitId + &quot; Consignee Id :: &quot;+ unitConsigneeId  +  &quot; Consignee Name :: &quot;+ unitConsignee  +&quot; Shipper Id:: &quot;+ unitShipperId + &quot; Shipper Name :: &quot;+ unitShipper);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//unit.setFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;,blConsignee);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//unit.setFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuId&quot;,blConsigneeId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//unit.setFieldValue(&quot;unitGoods.gdsShipperBzu.bzuName&quot;,blShipper);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//unit.setFieldValue(&quot;unitGoods.gdsShipperBzu.bzuId&quot;,blShipperId);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit.getUnitGoods().updateShipper( consignee);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//unit.setFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;,&quot;Paper PAK INDUSTRIES&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//unit.setFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuId&quot;,&quot;C459879990&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ( unit.unitGoods != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitConsigneeId = unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitConsignee = unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitShipperId = unit.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitShipper = unit.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuName&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println (&quot;After Unit Number :::: &quot;+ unit.unitId + &quot; Consignee Id :: &quot;+ unitConsigneeId  +  &quot; Consignee Name :: &quot;+ unitConsignee  +&quot; Shipper Id:: &quot;+ unitShipperId + &quot; Shipper Name :: &quot;+ unitShipper);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;} catch (e) {&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Error in Bl Units::::: &quot; + blNbr + &quot; ::::: &quot;+ e);&#xA;    &#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;}&#xA;&#xA;&#xA;" />
<digital-asset id="UpdateGrossWeightForDrayInContainer" short-description="UpdateGrossWeightForDrayInContainer" is-pre-deployed="N" groovy-code="/*&#xA; * Copyright (c) 2011 Zebra Technologies Corp. All Rights Reserved.&#xA; * $Id: $&#xA; */&#xA;&#xA;&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.argo.business.api.GroovyApi&#xA;&#xA;/**&#xA;* new calculated gross weight in the gate screen will be updated to unit's gross weight&#xA;*/&#xA;&#xA;public class UpdateGrossWeightForDrayInContainer extends GroovyApi {&#xA;&#xA;  public void execute(TransactionAndVisitHolder dao, api) {&#xA;    logWarn(&quot;Groovy UpdateGrossWeightForDrayInContainer Start...&quot;);&#xA;    TruckTransaction tran = dao.tran&#xA;    Unit unit = tran.tranUnit&#xA;    if (unit == null) {&#xA;      return&#xA;    }&#xA;    if (tran.getTranCtrGrossWeight() != null) {&#xA;      unit.updateGoodsAndCtrWtKg(tran.getTranCtrGrossWeight());&#xA;    }&#xA;logWarn(&quot;Groovy UpdateGrossWeightForDrayInContainer End...&quot;);&#xA;  }&#xA;}" />
<digital-asset id="EITCheck" short-description="EITCheck" is-pre-deployed="N" groovy-code="/*&#xA;&#xA;Groovy code called to check EIT&#xA;&#xA;Change History&#xA;&#xA;A1:  skb  4/10/09  (103) Out BAT # Not Allowed for BOB.  Check if not bat on out but on in error, check for numeric eit.&#xA;A2: GR  06/13/11 Throw Error if EIT not in 101-200 or 900-999 series &#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.framework.util.message.MessageLevel&#xA;import com.navis.framework.util.internationalization.PropertyKey&#xA;import com.navis.framework.util.internationalization.PropertyKeyFactory&#xA;import com.navis.framework.util.BizFailure&#xA;&#xA;public class EITCheck  extends GroovyInjectionBase&#xA;{&#xA;        // Outgate&#xA;&#x9;public void execute(inDao, api)&#xA;&#x9;{ &#xA;&#x9;&#x9;api.log(&quot;\nEITCheck: --Executing Groovy Gate Task---&quot;)&#xA;&#xA;&#x9;&#x9;def eitString = inDao.tv.tvdtlsBatNbr&#xA;&#x9;&#x9;def eitOutString = inDao.tv.tvdtlsOutBatNbr&#xA;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;api.log(&quot;EITCheck: &quot;+eitString+&quot; &quot;+eitOutString+&quot;!\n\n&quot;)&#xA;&#xA;                                     &#xA;&#x9;        // println(inDao.tv.dump());&#xA;&#x9;&#x9;if(eitString != null &amp;&amp; eitOutString == null) {&#xA;&#x9;&#x9;   def msg = [eitString];&#xA;&#x9;&#x9;   PropertyKey INVALID_EIT = PropertyKeyFactory.valueOf(&quot;gate.enter_out_bat&quot;);&#x9;&#x9;   &#x9;       &#xA;&#x9;           RoadBizUtil.appendMessage(MessageLevel.SEVERE,INVALID_EIT ,msg);&#xA;&#x9;           return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;                                           /*&#xA;&#x9;&#x9;if(eitString == null &amp;&amp; eitOutString != null) {&#xA;&#x9;&#x9;    throw new Exception(&quot;Out Gate: No EIT given at ingate, please confirm truck ID!  If you can not find the truck Id used at In Gate, leave the Bat # blank to Out Gate.&quot;);&#xA;&#x9;&#x9;} &#xA;                                          */&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;try {&#xA;                                               if(eitOutString != null) {&#xA;&#x9;&#x9;     def eitNum = Integer.parseInt(eitOutString);&#xA;                                              }&#xA;&#x9;&#x9;} catch (Exception e) {&#xA;                                                def msg = [eitOutString];&#xA;&#x9;&#x9;   PropertyKey INVALID_EIT = PropertyKeyFactory.valueOf(&quot;gate.invalid_eit&quot;);&#x9;&#x9;   &#x9;       &#xA;&#x9;           RoadBizUtil.appendMessage(MessageLevel.SEVERE,INVALID_EIT ,msg);&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void executeIngate(inDao, api) {&#xA;&#x9;    def eitString = inDao.tv.tvdtlsBatNbr;&#xA;&#x9;    def msg = [eitString];&#xA;&#x9;&#x9;int eitNum = 0;&#xA;&#x9;    try {&#xA;&#x9;        if(eitString != null) {&#xA;&#x9;           eitNum = Integer.parseInt(eitString);&#xA;&#x9;        }&#xA;&#x9;    }catch (Exception e) {&#xA;&#x9;       PropertyKey INVALID_EIT = PropertyKeyFactory.valueOf(&quot;gate.invalid_eit&quot;);&#xA;&#x9;       RoadBizUtil.appendMessage(MessageLevel.SEVERE,INVALID_EIT ,msg);&#xA;&#x9;   }&#xA;     }&#xA;            &#xA;&#x9; public void gateSIEitCheck(inDao){&#xA;        def eitString = inDao.tv.tvdtlsBatNbr;&#xA;&#x9;    def msg = [eitString];&#xA;&#x9;&#x9;int eitNum = 0;&#xA;        if(eitString != null) {&#xA;           eitNum = Integer.parseInt(eitString);&#xA;        } &#xA;  &#x9;    if(eitNum &gt;= 101 &amp;&amp; eitNum &lt;= 200 &amp;&amp; !&quot;PASSPASS&quot;.equals(inDao.tv.tvdtlsGate.gateId)){&#xA;&#x9;&#x9;}else if(eitNum &gt;= 900 &amp;&amp; eitNum &lt;= 999 &amp;&amp; !&quot;PASSPASS&quot;.equals(inDao.tv.tvdtlsGate.gateId)){&#xA;        }else if(!&quot;PASSPASS&quot;.equals(inDao.tv.tvdtlsGate.gateId)){&#xA;&#x9;&#x9;&#x9;throw com.navis.framework.util.BizFailure.create(&quot;EIT &quot;+eitNum+&quot; is not a valid EIT number.   Please re-enter&quot;);&#xA;        }&#xA;     }&#xA;}" />
<digital-asset id="GvyFindVesselVisit" short-description="GvyFindVesselVisit" is-pre-deployed="N" groovy-code="import com.navis.argo.business.atoms.FreightKindEnum;&#xA;import com.navis.argo.business.reference.RoutingPoint;&#xA;import com.navis.argo.business.model.CarrierVisit;&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.argo.business.atoms.CarrierVisitPhaseEnum;&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;import com.navis.argo.ContextHelper;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.argo.business.reference.CarrierService;&#xA;import com.navis.argo.business.api.VesselVisitFinder;&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder;&#xA;import com.navis.road.business.model.TruckTransaction;&#xA;import com.navis.inventory.business.units.Unit;&#xA;&#xA;&#xA;public class GvyFindVesselVisit{&#xA;&#xA;    //Vessel Visit Finder&#xA;    public CarrierVisit vesselVisitFinder(RoutingPoint inFinalDischargePoint,LineOperator inLineOperator,boolean inIsHazardous,boolean inIsReefer)&#xA;    {&#xA;        CarrierVisit cv = null;&#xA;        try{&#xA;            VesselVisitFinder vvf = (VesselVisitFinder)Roastery.getBean(&quot;vesselVisitFinder&quot;);&#xA;            cv = vvf.findVesselVisitByLineAndFinalPod(inFinalDischargePoint, inLineOperator, inIsHazardous, inIsReefer);&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return cv;&#xA;    }&#xA;&#xA;&#xA;    //Find carrier by Service&#xA;    public CarrierVisit vesselVisitFinderService(RoutingPoint inFinalDischargePoint,LineOperator inLineOperator,Boolean inIsHazardous,Boolean inIsReefer, CarrierService srvc)&#xA;    {&#xA;        CarrierVisit cv = null;&#xA;        try{&#xA;            def isHaz = inIsHazardous != null ? inIsHazardous.booleanValue() : false;&#xA;            def isReefer =  inIsReefer != null ?  inIsReefer.booleanValue() : false;&#xA;&#xA;            VesselVisitFinder vvf = (VesselVisitFinder)Roastery.getBean(&quot;vesselVisitFinder&quot;);&#xA;            cv = vvf.findVesselVisitByLineFinalPodAndService(inFinalDischargePoint, inLineOperator, srvc, isHaz, isReefer);&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return cv;&#xA;    }&#xA;&#xA;    //Fix for Auto-roll vessel visit&#xA;    public void setNextVesselVisitToTran (TransactionAndVisitHolder inDao, GroovyApi api) {&#xA;        VesselVisitFinder vvf = (VesselVisitFinder) Roastery.getBean(VesselVisitFinder.BEAN_ID);&#xA;        TruckTransaction tran = inDao.getTran();&#xA;        Unit unit = tran.getTranUnit();&#xA;        CarrierVisit cv = tran.getCarrierVisit();&#xA;        if (cv != null &amp;&amp; (CarrierVisitPhaseEnum.COMPLETE.equals(cv.getCvVisitPhase()) || CarrierVisitPhaseEnum.CLOSED.equals(cv.getCvVisitPhase()))&#xA;                || CarrierVisitPhaseEnum.CANCELED.equals(cv.getCvVisitPhase())) {&#xA;            CarrierVisit cvNew = vvf.findVesselVisitByLineFinalPodAndService(tran.getTranDischargePoint1()  , tran.getTranLine() ,&#xA;                    cv.getCvCvd().getCvdService(), tran.isHazardous(), tran.isLiveReefer());&#xA;            if (cvNew != null ) {&#xA;                tran.setTranCarrierVisit(cvNew);&#xA;                api.logWarn(&quot;Updated the latest carrier visit to the transaction&quot;);&#xA;            }&#xA;&#xA;        }&#xA;    }&#xA;&#xA;&#xA;    /*&#xA;    * Run Verficiations checks before Resolving the route&#xA;    */&#xA;    public boolean InvalidTranforRouteResolving(){&#xA;        try{&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return true&#xA;    }&#xA;&#xA;}" />
<digital-asset id="GvyInjAlnk" short-description="ACETS LNK Process" is-pre-deployed="N" groovy-code="/*&#xA;**********************************************************************&#xA;* Srno   Date&#x9;             Changer&#x9; Change Description&#xA;* A1     12/29/08       Glenn Raposo&#x9; Unit Field Tracker code Added&#xA;* A2     04/20/09       Steven Bauer&#x9; Changed code to find or create.&#xA;* A3     05/01/09       Steven Bauer     Added Workaround for booking reassign error!&#xA;* A4     05/11/09       Steven Bauer&#x9; Do POD lookup for import&#xA;*&#x9;&#x9;&#x9;&#x9;&#x9; Apply import code to Through and Tranship&#xA;*&#x9;&#x9;&#x9;&#x9;&#x9; Set storage to export.&#xA;* A5     05/13/09      Steven Bauer&#x9; Handle T60 imports,&#xA;*&#x9;&#x9;&#x9;&#x9;&#x9; If the import has a Booking, update the booking.&#xA;* A6     05/26/09      Steven Bauer&#x9; Find active unit in complex&#xA;* A7     06/02/09&#x9;Steven Bauer&#x9; 403 - Supress all updates before GetNV&#xA;* A8     12/18/2009     Glenn Raposo&#x9; Export Cntr to check and rolls over client cntr Booking&#xA;* A9     09/12/11   Glenn Raposo     Update booking method for TOS2.1&#xA;* A10    12/09/11   Glenn Raposo     TT#13964 Create Booking on LNK if Bkg doesnt exist&#xA;* A11    12/13/11   Glenn Raposo   Update HOLD FOR LNK&#xA;* A12    12/13/11   Glenn Raposo   Added Check To create LNK only on GUM-CHINA port&#xA;**********************************************************************&#xA;*/&#xA;&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.argo.business.atoms.CarrierVisitPhaseEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.model.Facility&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.argo.business.reference.Shipper&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.orders.business.eqorders.EquipmentOrderItem&#xA;import com.navis.orders.business.eqorders.EquipmentOrderManagerPea&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import org.apache.log4j.Logger&#xA;&#xA;class GvyInjAlnk extends GroovyInjectionBase {&#xA;    private static final Logger LOGGER = Logger.getLogger(GvyInjAlnk.class);&#xA;&#xA;    public String execute(Map inParameters) {&#xA;&#xA;        com.navis.argo.ContextHelper.setThreadExternalUser(&quot;ACETS&quot;);&#xA;//Getting the parameter values from SNX.&#xA;        def ctrId = (String) inParameters.get(&quot;equipment-id&quot;);&#xA;        def bookingNum = (String) inParameters.get(&quot;bookingNum&quot;);&#xA;        def userId = (String) inParameters.get(&quot;userId&quot;);&#xA;        def vesvoy = (String) inParameters.get(&quot;vesvoy&quot;);&#xA;        def shipperName = (String) inParameters.get(&quot;shipperName&quot;);&#xA;        def shipperId = (String) inParameters.get(&quot;shipperId&quot;);&#xA;        def consigneeName = (String) inParameters.get(&quot;consigneeName&quot;);&#xA;        def consigneeId = (String) inParameters.get(&quot;consigneeId&quot;);&#xA;        def destPort = (String) inParameters.get(&quot;destPort&quot;);&#xA;        def dischargePort = (String) inParameters.get(&quot;dischargePort&quot;);&#xA;        def primCarrier = (String) inParameters.get(&quot;primCarrier&quot;);&#xA;&#xA;        final String emailFrom = '1aktosdevteam@matson.com'&#xA;        final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;        def unitFreightKind = null;&#xA;        def bkngFreightKind = null;&#xA;        def emailBody = null;&#xA;        def note = &quot;\n\nPlease fix either the booking or unit and review the routing after correction&quot;;&#xA;&#xA;        def inj = new GroovyInjectionBase();&#xA;        def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;);&#xA;&#xA;        // find the unit&#xA;        def ufv;&#xA;        def unit;&#xA;        //A1- tracker&#xA;        def tracker;&#xA;        GroovyApi gvyApi = new GroovyApi();&#xA;        def podLookup = gvyApi.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;);&#xA;        def unitLookup = gvyApi.getGroovyClassInstance(&quot;GvyUnitLookup&quot;);&#xA;        /**&#xA;         * D033647&#xA;         * LNK Messages for Older VVD's should be Rejected&#xA;         *&#xA;         */&#xA;        LOGGER.info(&quot;Start of Vessel Visit Phase Validation&quot;);&#xA;        boolean hasFailureMailSend = Boolean.FALSE;&#xA;        try {&#xA;            Facility facility = getFacility();&#xA;            CarrierVisit cv = CarrierVisit.findVesselVisit(facility, vesvoy);&#xA;            if (cv == null) {&#xA;                String messageBody = getEmailBody(facility, vesvoy, bookingNum, ctrId, cv);&#xA;                messageBody = messageBody + &quot;\nCarrier Visit is Not available in N4&quot;;&#xA;                emailSender.custSendEmail(emailFrom, emailTo, &quot; LNK error for Booking &quot; + bookingNum + &quot; and Unit &quot; + ctrId, messageBody + &quot;Could not find the carrier visit: &quot; + vesvoy + note);&#xA;                hasFailureMailSend = Boolean.TRUE;&#xA;                fail(&quot;ERR_GVY_LNK_007. Could not find the carrier visit: &quot; + vesvoy);&#xA;            } else if (cv != null &amp;&amp; (CarrierVisitPhaseEnum.DEPARTED.equals(cv.getCvVisitPhase()) ||&#xA;                    CarrierVisitPhaseEnum.ARCHIVED.equals(cv.getCvVisitPhase()) || CarrierVisitPhaseEnum.CANCELED.equals(cv.getCvVisitPhase()))) {&#xA;&#xA;                String messageBody = getEmailBody(facility, vesvoy, bookingNum, ctrId, cv);&#xA;                messageBody = messageBody + &quot;\nCarrier Visit is in Phase\t&quot; + cv.getCvVisitPhase() + &quot; it cannot be Linked to booking \t&quot; + bookingNum;&#xA;                emailSender.custSendEmail(emailFrom, emailTo, &quot; LNK error for Booking &quot; + bookingNum + &quot; and Unit &quot; + ctrId, messageBody);&#xA;                hasFailureMailSend = Boolean.TRUE;&#xA;                LOGGER.info(&quot;Skipping further processing of ALNK for Booking \t&quot; + bookingNum + &quot; and Unit \t&quot; + ctrId + &quot;\tas vessel is in phase\t&quot; + cv.getCvVisitPhase());&#xA;                fail(&quot;ERR_GVY_LNK_010. Carrier visit at &quot; + facility.getFcyId() + &quot; is in phase&quot; + cv.getCvVisitPhase() + &quot; it cannot be used for LNK&quot;);&#xA;            }&#xA;        } catch (Exception e1) {&#xA;            if (!hasFailureMailSend) {&#xA;                emailSender.custSendEmail(emailFrom, emailTo, &quot;Error Processing LNK Message&quot;, &quot;Message Parameters\n\n\n&quot; + inParameters + &quot;\n\n\nException is\n&quot; + e1.getMessage());&#xA;            }&#xA;            //Return and don't process any further&#xA;            fail(&quot;ERR_GVY_LNK_010. Failed to process LNK Message for booking\t&quot; + bookingNum + &quot;\t and Container&quot; + ctrId + &quot;, exception is\t&quot; + e1.getMessage());&#xA;        }&#xA;        LOGGER.info(&quot;End of Vessel Visit Phase Validation&quot;);&#xA;        /**&#xA;         * End of logic for D033647 LNK Messages for Older VVD's should be Rejected&#xA;         */&#xA;&#xA;//Get the active UFV from the complex&#xA;        try {&#xA;            //ufv = findActiveUfv(ctrId);&#xA;            //A6&#xA;            ufv = unitLookup.getUfvActiveInComplex(ctrId);&#xA;            LOGGER.warn(&quot;UFV:::&quot; + ufv);&#xA;            if (ufv == null) {&#xA;                emailSender.custSendEmail(emailFrom, emailTo, &quot; LNK error &quot;, &quot;Could not find active unit: &quot; + ctrId + &quot; in any facility&quot;);&#xA;                throw new Exception(&quot;Could not find active unit&quot;);&#xA;            }&#xA;            unit = ufv.getUfvUnit();&#xA;            LOGGER.warn(&quot;Unit::;&quot; + unit);&#xA;            //A7&#xA;            //if(isStowplan(unit)) return;&#xA;&#xA;            List bkng = Booking.findBookingsByNbr(bookingNum);&#xA;            Iterator iter = bkng.iterator();&#xA;            while (iter.hasNext()) {&#xA;                def book = iter.next();&#xA;                bkngFreightKind = book.eqoEqStatus;&#xA;                bkngFreightKind = bkngFreightKind.getKey()&#xA;            }&#xA;&#xA;            //A1- Tracker Change&#xA;            def gvyUnitFldTracker = gvyApi.getGroovyClassInstance(&quot;GvyUnitFieldTracker&quot;);&#xA;            tracker = gvyUnitFldTracker.createFieldChangeTracker(unit)&#xA;&#xA;            unitFreightKind = unit.getFieldValue(&quot;unitFreightKind&quot;);&#xA;            unitFreightKind = unitFreightKind.getKey();&#xA;        } catch (Exception ex) {&#xA;            //emailSender.custSendEmail(emailFrom,emailTo,&quot; LNK error for Booking &quot;+ bookingNum+ &quot; and Unit &quot; +ctrId ,&quot;Could not find active unit: &quot; + ctrId+note);&#xA;            fail(&quot;ERR_GVY_LNK_001. Could not find active unit: &quot; + ctrId);&#xA;        }&#xA;&#xA;        if (unit == null) {&#xA;            //emailSender.custSendEmail(emailFrom,emailTo,&quot; LNK error for Booking &quot;+ bookingNum+ &quot; and Unit &quot; +ctrId ,&quot;Could not find active unit: &quot; + ctrId+note);&#xA;            fail(&quot;ERR_GVY_LNK_001. Could not find active unit: &quot; + ctrId);&#xA;        }&#xA;&#xA;&#xA;&#xA;        StringBuffer header = new StringBuffer();&#xA;        header.append(&quot;\nBooking Number       : &quot; + bookingNum);&#xA;        header.append(&quot;\nContainer Number     : &quot; + ctrId);&#xA;        header.append(&quot;\nBooking FreightKind   : &quot; + bkngFreightKind);&#xA;        header.append(&quot;\nContainer FreightKind : &quot; + unitFreightKind);&#xA;        header.append(&quot;\n\n&quot;);&#xA;&#xA;        emailBody = header.toString();&#xA;&#xA;        if (!UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory()) &amp;&amp; !UnitCategoryEnum.EXPORT.equals(unit.getUnitCategory()) &amp;&amp; !UnitCategoryEnum.THROUGH.equals(unit.getUnitCategory()) &amp;&amp; !UnitCategoryEnum.TRANSSHIP.equals(unit.getUnitCategory())) {&#xA;            emailSender.custSendEmail(emailFrom, emailTo, &quot; LNK error for Booking &quot; + bookingNum + &quot; and Unit &quot; + ctrId, emailBody + ctrId + &quot; category is not IMPORT, EXPORT, THROUGH or TRANSHIP. Ignored.&quot; + note);&#xA;            fail(&quot;ERR_GVY_LNK_002. Unit: &quot; + ctrId + &quot; category is not IMPORT, EXPORT, THROUGH or TRANSHIP. Ignored.&quot;);&#xA;        }&#xA;        def transitState = ufv.getUfvTransitState();&#xA;        def obCarrier = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;);&#xA;        def obCarrierMode = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCarrierMode&quot;);&#xA;        def prevPODN4 = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;&#xA;        if (!(transitState.equals(UfvTransitStateEnum.S50_ECOUT) ||&#xA;                transitState.equals(UfvTransitStateEnum.S30_ECIN) ||&#xA;                transitState.equals(UfvTransitStateEnum.S20_INBOUND) ||&#xA;                transitState.equals(UfvTransitStateEnum.S40_YARD))) {&#xA;&#xA;            if (((transitState.equals(UfvTransitStateEnum.S70_DEPARTED) ||&#xA;                    transitState.equals(UfvTransitStateEnum.S60_LOADED)) &amp;&amp;&#xA;                    !isBarge(obCarrier))) {&#xA;                emailSender.custSendEmail(emailFrom, emailTo, &quot; LNK error for Booking &quot; + bookingNum + &quot; and Unit &quot; + ctrId, emailBody + ctrId +&#xA;                        &quot; TransitState is not in DEPARTURED or LOAD and OB Carrier is not barge.&quot; +&#xA;                        &quot; And TransitState is not in YARD or INBOUND or EC/In or EC/out.&quot; + note);&#xA;                fail(&quot;ERR_GVY_LNK_003. The unit: &quot; + ctrId +&#xA;                        &quot; TransitState is not in DEPARTURED or LOAD and OB Carrier is not barge.&quot; +&#xA;                        &quot; And TransitState is not in YARD or INBOUND or EC/In or EC/out.&quot;);&#xA;            }&#xA;        }&#xA;        if (transitState.equals(UfvTransitStateEnum.S60_LOADED) &amp;&amp; LocTypeEnum.VESSEL.equals(obCarrierMode)) {&#xA;            emailSender.custSendEmail(emailFrom, emailTo, &quot; LNK error for Booking &quot; + bookingNum + &quot; and Unit &quot; + ctrId, emailBody + ctrId + &quot; TransitState is LOADED and OB Carrier is VESSEL.&quot; + note);&#xA;            fail(&quot;ERR_GVY_LNK_004. The unit: &quot; + ctrId + &quot; TransitState is LOADED and OB Carrier is VESSEL.&quot;);&#xA;        }&#xA;&#xA;        //A10 - Create Booking if It doesnt Exist&#xA;        try {&#xA;            def bkgObj = findCreateBooking(bookingNum, primCarrier, vesvoy, destPort, podLookup, unit, consigneeId, shipperId)&#xA;            LOGGER.warn(&quot;Booking Obj:::&quot; + bkgObj);&#xA;            def eqoMgr = new EquipmentOrderManagerPea();&#xA;            eqoMgr.assignExportBookingToUnit(bkgObj, null, unit);&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;            LOGGER.error(&quot;Exception :::&quot; + e);&#xA;            // For Import Unit update BlNbr on exception and let the unit process&#xA;            if (!UnitCategoryEnum.EXPORT.equals(unit.getUnitCategory())) {&#xA;                unit.setFieldValue(&quot;unitGoods.gdsBlNbr&quot;, bookingNum);&#xA;            }//A12 - Throw exception for Export Cntr&#xA;            else if (UnitCategoryEnum.EXPORT.equals(unit.getUnitCategory())) {&#xA;                emailSender.custSendEmail(emailFrom, emailTo, &quot; LNK error for Booking &quot; + bookingNum + &quot; and Unit &quot; + ctrId, emailBody + &quot;Cannot Roll Booking for unit: &quot; + ctrId + note);&#xA;                fail(&quot;ERR_GVY_LNK_021. Cannot Roll Booking for unit: &quot; + ctrId);&#xA;            }&#xA;        }&#xA;&#xA;        unit.setFieldValue(&quot;unitGoods.gdsBlNbr&quot;, bookingNum);&#xA;        boolean t60 = false;&#xA;        if (UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory()) || UnitCategoryEnum.THROUGH.equals(unit.getUnitCategory()) || UnitCategoryEnum.TRANSSHIP.equals(unit.getUnitCategory())) {&#xA;            // Change to Create.&#xA;&#xA;            def shipper = Shipper.findOrCreateShipper(shipperId, shipperName);&#xA;            //ScopedBizUnit.findScopedBizUnit( shipperId, BizRoleEnum.SHIPPER);&#xA;            if (shipper == null) {&#xA;                emailSender.custSendEmail(emailFrom, emailTo, &quot; LNK error for Booking &quot; + bookingNum + &quot; and Unit &quot; + ctrId, emailBody + &quot;Could not find/create the shipper with ID: &quot; + shipperId + note);&#xA;                fail(&quot;ERR_GVY_LNK_005. Could not find/create the shipper with ID: &quot; + shipperId);&#xA;            }&#xA;&#xA;            def consignee = null;&#xA;            if (shipperId.equals(consigneeId)) {&#xA;                consignee = shipper;&#xA;            } else {&#xA;                consignee = Shipper.findOrCreateShipper(consigneeId, consigneeName);&#xA;            }&#xA;            //ScopedBizUnit.findScopedBizUnit( consigneeId, BizRoleEnum.SHIPPER);&#xA;            if (consignee == null) {&#xA;                emailSender.custSendEmail(emailFrom, emailTo, &quot; LNK error for Booking &quot; + bookingNum + &quot; and Unit &quot; + ctrId, emailBody + &quot;Could not find/create the consignee with ID: &quot; + consigneeId + note);&#xA;                fail(&quot;ERR_GVY_LNK_006. Could not find/create the consignee with ID: &quot; + consigneeId);&#xA;            }&#xA;            unit.getUnitGoods().updateShipper(shipper);&#xA;            unit.getUnitGoods().updateConsignee(consignee);&#xA;            unit.setFieldValue(&quot;unitGoods.gdsDestination&quot;, destPort);&#xA;&#xA;            // Ignore dischargePort, use pod from lookup&#xA;            //unit.getUnitRouting().getRtgPOL().setRtgPOD1( RoutingPoint.findRoutingPoint( dischargePort));&#xA;            // customizing podLookup for the Alaska TOS LNK&#xA;            def pod = podLookup.lookupPodForAK(destPort);&#xA;&#xA;            LOGGER.info(&quot;POD from db lookup:&quot; + pod);&#xA;            if (pod == null) {&#xA;                LOGGER.warn(&quot;calling lookup POD in CAS&quot;);&#xA;                pod = podLookup.lookupPodForAKinCAS(destPort, ctrId, bookingNum);&#xA;                LOGGER.warn(&quot;POD from CAS lookup:&quot; + pod);&#xA;            }&#xA;            def resolvedPod = RoutingPoint.findRoutingPoint(pod)&#xA;            unit.getUnitRouting().setRtgPOD1(resolvedPod);&#xA;            LOGGER.warn(&quot;Resolved POD:&quot; + pod);&#xA;&#xA;            //Setting the OB Carrier based on Prev and current DischargePort&#xA;            def gvyInjAbdb = getGroovyClassInstance(&quot;GvyInjAbdb&quot;);&#xA;            gvyInjAbdb.setOBCarrierOnPODChngForAK(ctrId, prevPODN4, destPort, vesvoy)&#xA;            def facility = getFacility();&#xA;            if (UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory()) &amp;&amp; transitState.equals(UfvTransitStateEnum.S40_YARD) &amp;&amp; (prevPODN4.equals(facility.getFcyId()) &amp;&amp; (resolvedPod.getPointId() != prevPODN4))) {&#xA;                try {&#xA;&#xA;                    unit.setUnitCategory(UnitCategoryEnum.EXPORT);&#xA;                    def bkgObj = findCreateBooking(bookingNum, primCarrier, vesvoy, destPort, podLookup, unit, consigneeId, shipperId)&#xA;                    LOGGER.warn(&quot;Booking Obj:::&quot; + bkgObj);&#xA;                    def eqoMgr = new EquipmentOrderManagerPea();&#xA;                    eqoMgr.assignExportBookingToUnit(bkgObj, null, unit);&#xA;                } catch (Exception e) {&#xA;                    e.printStackTrace();&#xA;                }&#xA;            }&#xA;&#xA;            if (unit.isReservedForBooking()) {&#xA;                t60 = true;&#xA;                unit.setUnitCategory(UnitCategoryEnum.EXPORT);&#xA;            }&#xA;        }&#xA;        def event = new GroovyEvent(null, unit);&#xA;        if (UnitCategoryEnum.STORAGE.equals(unit.getUnitCategory())) {&#xA;            unit.setUnitCategory(UnitCategoryEnum.EXPORT);&#xA;        }&#xA;&#xA;        /*if ( UnitCategoryEnum.EXPORT.equals(unit.getUnitCategory()) ) {&#xA;            // find booking&#xA;            def facility = getFacility();&#xA;            def cv = CarrierVisit.findVesselVisit( facility, vesvoy);&#xA;            if ( cv == null) {&#xA;                emailSender.custSendEmail(emailFrom,emailTo,&quot; LNK error for Booking &quot;+ bookingNum+ &quot; and Unit &quot; +ctrId ,emailBody + &quot;Could not find the carrier visit: &quot; + vesvoy+note);&#xA;                fail( &quot;ERR_GVY_LNK_007. Could not find the carrier visit: &quot; + vesvoy);&#xA;            }&#xA;             //A8 - 1. lookup primCarrier Business unit if null then lookup unit for MAT&#xA;            primCarrier = primCarrier != null ? primCarrier : &quot;MAT&quot;&#xA;            def bizScope = ScopedBizUnit.findScopedBizUnit( primCarrier, BizRoleEnum.LINEOP);&#xA;            bizScope = bizScope == null ? ScopedBizUnit.findScopedBizUnit( &quot;MAT&quot;, BizRoleEnum.LINEOP) : bizScope;&#xA;            if ( bizScope == null) {&#xA;                    emailSender.custSendEmail(emailFrom,emailTo,&quot; LNK error for Booking &quot;+ bookingNum+ &quot; and Unit &quot; +ctrId ,emailBody + &quot;Could not find the business unit: Line Operator&quot;+note);&#xA;                    fail( &quot;ERR_GVY_LNK_008. Could not find the business unit: Line Operator&quot;);&#xA;            }&#xA;            def booking = Booking.findBookingByUniquenessCriteria( bookingNum, bizScope, cv);&#xA;            if ( booking == null) {&#xA;                //A8 - If No Booking exist across Prim carreir then lookup Bkg with lineOP MAT.&#xA;                bizScope = ScopedBizUnit.findScopedBizUnit( &quot;MAT&quot;, BizRoleEnum.LINEOP);&#xA;                booking = Booking.findBookingByUniquenessCriteria( bookingNum, bizScope, cv);&#xA;                if(booking == null){&#xA;                   //A15 - TOS2.1 Create Booking if Booking is NULL&#xA;                   Booking cretedBkg = createBooking(unit, vesvoy, bizScope, destPort, bookingNum, podLookup)&#xA;                   if(cretedBkg == null){&#xA;                      emailSender.custSendEmail(emailFrom,emailTo,&quot; LNK error for Booking &quot;+ bookingNum+ &quot; and Unit &quot; +ctrId ,emailBody + &quot;Could not find booking: &quot; + bookingNum+note);&#xA;                      fail( &quot;ERR_GVY_LNK_009. Could not find booking: &quot; + bookingNum);&#xA;                   }else{&#xA;                      booking = cretedBkg;&#xA;                   }&#xA;&#xA;                }&#xA;            }&#xA;            // assign booking&#xA;            def eqoMgr = new EquipmentOrderManagerPea();&#xA;            //A3 Termp set to tranship for Navis bug&#xA;            boolean makeTranship = false;&#xA;            if( ufv != null &amp;&amp; UfvTransitStateEnum.S20_INBOUND.equals(ufv.ufvTransitState) &amp;&amp; LocTypeEnum.VESSEL.equals(ufv.ufvLastKnownPosition.posLocType) ) {&#xA;                makeTranship = true;&#xA;                ufv.ufvLastKnownPosition.posLocType  =  LocTypeEnum.TRUCK&#xA;            }&#xA;            eqoMgr.assignExportBookingToUnit( booking, null, unit); //Update Method for TOS2.1 -- A9&#xA;            if(makeTranship) {&#xA;               ufv.ufvLastKnownPosition.posLocType  =  LocTypeEnum.VESSEL&#xA;            }&#xA;            //event.postNewEvent( &quot;UNIT_ROLL&quot;, &quot;ACETS: &quot; + userId);&#xA;            // If Vessel is departed roll to the next vessel.&#xA;            // 266:&#xA;            def vesLookup = gvyApi.getGroovyClassInstance(&quot;GvyVesselLookup&quot;);&#xA;            if(vesLookup.isClosed(cv.cvVisitPhase)) {&#xA;               def roll = gvyApi.getGroovyClassInstance(&quot;RejectCarrierVisitPhaseNotActive&quot;);&#xA;               def line = LineOperator.resolveLineOprFromScopedBizUnit(cv.cvOperator)&#xA;               roll.executeForLnk(unit,line);&#xA;            }&#xA;&#xA;            if(t60) {&#xA;               unit.setUnitCategory(UnitCategoryEnum.IMPORT);&#xA;            }&#xA;        }*/&#xA;        def servicesMgr = (ServicesManager) Roastery.getBean(&quot;servicesManager&quot;);&#xA;        servicesMgr.applyGuardedPermission(&quot;HOLD FOR LNK&quot;, unit, null, null, &quot;LNK BKG Hold release&quot;);&#xA;        unit.setFieldValue(&quot;unitRemark&quot;, &quot;ACETS: &quot; + userId);&#xA;        //A1 - Tracker Change&#xA;        def changes = tracker.getChanges(unit);&#xA;        if (changes != null &amp;&amp; changes.getFieldChangeCount() != 0) {&#xA;            unit.recordUnitEvent(com.navis.argo.business.atoms.EventEnum.UNIT_PROPERTY_UPDATE, changes, &quot;Field Updated LNK Data&quot;);&#xA;        }&#xA;        event.postNewEvent(&quot;LNK&quot;, &quot;ACETS: &quot; + userId);&#xA;    }&#xA;&#xA;    private boolean isBarge(String vesvoy) {&#xA;        try {&#xA;            //def gvyBaseClass = new GroovyInjectionBase()&#xA;            def gvyUtil = getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;            def vType = gvyUtil.getVesselClassType(vesvoy);&#xA;            return vType == &quot;BARGE&quot; ? true : false;&#xA;        } catch (Exception e) {&#xA;            return false;&#xA;        }&#xA;    }&#xA;&#xA;    private String getEmailBody(Facility inFacility,&#xA;                                String inVesselVoyage,&#xA;                                String inBookingNumber,&#xA;                                String inContainerId,&#xA;                                CarrierVisit inCarrierVisit) {&#xA;        StringBuffer buffer = new StringBuffer();&#xA;        buffer.append(&quot;Facility&#x9;\t\t&quot; + inFacility.getFcyId() + &quot;\n&quot;);&#xA;        buffer.append(&quot;VesselVoyage\t&quot; + inVesselVoyage + &quot;\n&quot;);&#xA;        buffer.append(&quot;Booking Number\t&quot; + inBookingNumber + &quot;\n&quot;);&#xA;        buffer.append(&quot;Container Number\t&quot; + inContainerId + &quot;\n&quot;);&#xA;        if (inCarrierVisit != null) {&#xA;            buffer.append(&quot;Visit Phase\t&quot; + inCarrierVisit.getCvVisitPhase() + &quot;\n&quot;);&#xA;        }&#xA;        return buffer.toString();&#xA;&#xA;    }&#xA;&#xA;    private boolean isStowplan(unit) {&#xA;        def remark = unit.unitRemark;&#xA;        if (remark == null) return false;&#xA;        return remark.startsWith(&quot;Stowplan Data&quot;);&#xA;    }&#xA;&#xA;    /*&#xA;    * Added Method to handel bookings from the IMPORT CNTRSS&#xA;    */&#xA;&#xA;    private Booking findCreateBooking(String bookingNum, String primCarrier, String vesvoy, String destPort, Object podLookup, Object unit, String consigneeId, String shipperId) {&#xA;        def booking = null;&#xA;        try {&#xA;            primCarrier = primCarrier != null ? primCarrier : &quot;MAT&quot;&#xA;            def bizScope = ScopedBizUnit.findScopedBizUnit(primCarrier, BizRoleEnum.LINEOP);&#xA;            bizScope = bizScope == null ? ScopedBizUnit.findScopedBizUnit(&quot;MAT&quot;, BizRoleEnum.LINEOP) : bizScope;&#xA;            LOGGER.warn(&quot;In find booking::::&quot; + primCarrier);&#xA;            LOGGER.warn(&quot;In find booking::::&quot; + bookingNum);&#xA;&#xA;&#xA;            def facility = getFacility();&#xA;            def cv = CarrierVisit.findVesselVisit(facility, vesvoy);&#xA;            LOGGER.warn(&quot;In find booking::::Facility:::&quot; + facility);&#xA;            LOGGER.warn(&quot;In find booking::::&quot; + cv);&#xA;            booking = Booking.findBookingByUniquenessCriteria(bookingNum, bizScope, cv);&#xA;            LOGGER.warn(&quot;In find booking 1::::&quot; + booking);&#xA;            if (booking == null) {&#xA;                //A8 - If No Booking exist across Prim carreir then lookup Bkg with lineOP MAT.&#xA;                bizScope = ScopedBizUnit.findScopedBizUnit(&quot;MAT&quot;, BizRoleEnum.LINEOP);&#xA;                booking = Booking.findBookingByUniquenessCriteria(bookingNum, bizScope, cv);&#xA;                LOGGER.warn(&quot;In find booking 2::::&quot; + booking);&#xA;                if (booking == null) {&#xA;                    //A15 - TOS2.1 Create Booking if Booking is NULL&#xA;                    Booking cretedBkg = createBooking(unit, vesvoy, bizScope, destPort, bookingNum, podLookup, consigneeId, shipperId)&#xA;                    if (cretedBkg == null) {&#xA;                        LOGGER.warn(&quot;Created Booking::::&quot; + cretedBkg);&#xA;                        fail(&quot;ERR_GVY_LNK_009. Could not find/Create booking: &quot; + bookingNum);&#xA;                    }&#xA;                    booking = cretedBkg;&#xA;                    //unit.setUnitCategory(UnitCategoryEnum.EXPORT);&#xA;                    HibernateApi.getInstance().flush();&#xA;                }&#xA;            }&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;        return booking;&#xA;    }&#xA;&#xA;    private Booking createBooking(Object unit, String vesvoy, Object bizScope, String destPort, String bookingNum, Object podLookup, String consigneeId, String shipperId) {&#xA;        GroovyApi gvyApi = new GroovyApi();&#xA;        try {&#xA;            def unitId = unit.unitId;&#xA;            def pod = &quot;&quot;;&#xA;            def facility = ContextHelper.getThreadFacility();&#xA;            def cv = CarrierVisit.findVesselVisit(facility, vesvoy);&#xA;            LOGGER.warn(&quot; In create Booking::::Carrier Visit :::&quot; + cv);&#xA;            def freightKind = unit.getUnitFreightKind();&#xA;            def rtgPol = RoutingPoint.findRoutingPoint(ContextHelper.getThreadFacility().getFcyId());&#xA;            LOGGER.warn(&quot; In create Booking::::Dest as it came in:::&quot; + destPort);&#xA;            def podLookupFromDest = gvyApi.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;);&#xA;            if (isBarge(vesvoy)) {&#xA;                LOGGER.warn(&quot; In create Booking::::vesvoy is a barge :::&quot; + cv);&#xA;                if (destPort == 'KQA') {&#xA;                    pod = destPort;&#xA;                }&#xA;            } else {&#xA;                pod = podLookupFromDest.lookupPodForAK(destPort);&#xA;            }&#xA;&#xA;            LOGGER.warn(&quot; In create Booking::::Derived POD:::&quot; + pod);&#xA;            /*if(!(&quot;GUM&quot;.equals(pod) || &quot;SHA&quot;.equals(pod) || &quot;NGB&quot;.equals(pod)&#xA;                || &quot;XMN&quot;.equals(pod) || &quot;YTN&quot;.equals(pod) || &quot;HKG&quot;.equals(pod))){ //A12&#xA;                return null;&#xA;            }*/&#xA;            def rtgPOD1 = RoutingPoint.findRoutingPoint(pod)&#xA;            LOGGER.warn(&quot; In create Booking::::rtgPOD1:::&quot; + rtgPOD1);&#xA;            def onItineary = isPodOnVesItineary(cv, rtgPOD1)&#xA;            def eqtype = unit.unitPrimaryUe.ueEquipment.eqEquipType&#xA;&#xA;            if (unitId == null || facility == null || cv == null || freightKind == null || rtgPol == null || rtgPOD1 == null || !onItineary) {&#xA;                fail(&quot;ERR_GVY_LNK_012. Booking Didnt Exsit. System Tried to Create It but Routing Ports and Not on the Vessel visit: &quot; + bookingNum);&#xA;                LOGGER.warn(&quot; In create Booking:::: :::unitId == null || facility == null || cv == null || freightKind == null || rtgPol == null  || rtgPOD1 == null || !onItineary&quot;);&#xA;            }&#xA;&#xA;            Booking booking = Booking.create(bookingNum, bizScope, cv, freightKind, rtgPol, rtgPOD1, rtgPOD1)&#xA;            EquipmentOrderItem eqboi = EquipmentOrderItem.findOrCreateOrderItem(booking, Long.valueOf(5L), eqtype);&#xA;            eqboi.updateQty(Long.valueOf(100L));&#xA;&#xA;            booking.setEqoDestination(destPort);&#xA;            ScopedBizUnit bkgShipper = ScopedBizUnit.findScopedBizUnit(shipperId, BizRoleEnum.SHIPPER);&#xA;            ScopedBizUnit bkgConsignee = ScopedBizUnit.findScopedBizUnit(consigneeId, BizRoleEnum.SHIPPER);&#xA;            booking.setEqoShipper(bkgShipper);&#xA;            booking.setEqoConsignee(bkgConsignee);&#xA;            booking.setEqoOrigin(ContextHelper.getThreadFacility().getFcyId());&#xA;&#xA;            return booking;&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;            LOGGER.warn(&quot; In create Booking::::Got Exception:::&quot; + e);&#xA;        }&#xA;    }&#xA;&#xA;    public boolean isPodOnVesItineary(CarrierVisit cv, RoutingPoint rtgPOD1) {&#xA;        boolean isOnVesRouting = false;&#xA;        if (rtgPOD1 == null) {&#xA;            return isOnVesRouting&#xA;        }&#xA;        List itinaryPointsLst = cv.cvCvd.cvdItinerary.itinPoints&#xA;        for (port in itinaryPointsLst) {&#xA;            if (rtgPOD1.equals(port.callPoint)) {&#xA;                isOnVesRouting = true;&#xA;                break;&#xA;            }&#xA;        }&#xA;        return isOnVesRouting;&#xA;    }&#xA;}" />
<digital-asset id="GvyAllowGateWithoutXPS" short-description="GvyAllowGateWithoutXPS" is-pre-deployed="N" groovy-code="/*&#xA;* Copyright (c) 2003 Navis LLC. All Rights Reserved.&#xA;* $Id: GvyAllowGateWithoutXPS.java,v 1.1 2011-26-10 12:53:26 gbabu Exp $&#xA;*/&#xA;&#xA;import com.navis.argo.ArgoPropertyKeys&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.util.internationalization.UserMessage&#xA;import com.navis.framework.util.message.MessageLevel&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;&#xA;/**&#xA; * This groovy allows the Gate to continue processing even though XPS is down&#xA; * by setting the message level to Warning for the XPS TCP error message&#xA; */&#xA;public class GvyAllowGateWithoutXPS {&#xA;&#xA;    public void setXpsTpcWarning() throws BizViolation {&#xA;&#xA;      for (UserMessage um : (List&lt;UserMessage&gt;)RoadBizUtil.getMessageCollector().getMessages()) {&#xA;          if (ArgoPropertyKeys.XPS_TPC_ERROR.equals(um.getMessageKey())) {&#xA;              um.setSeverity(MessageLevel.WARNING);&#xA;          }&#xA;      }&#xA;    }&#xA;}&#xA;" />
<digital-asset id="PassPassTruckVisit" short-description="PassPassTruckVisit Gate Transactions to Now" is-pre-deployed="N" groovy-code="/*&#xA; * Created Plugin ot bypass gate lane check from plugin OutgateTruckVisitOutValidations &#xA; * Passing Gate service messages to now for the PassPass Gate transaction.&#xA; * Srno   Doer  Date       Changes&#xA; * A1     GR    06/04/10   &#xA; */&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;&#xA; public class PassPassTruckVisit extends GroovyInjectionBase {&#xA;   // Outgate Truck Visit Out&#xA;   public void executeOutgate(inDao, api) {&#xA;      println(&quot;Pass Pass Outgate Truck Visit &quot;)&#xA;        try {&#xA;             api.getGroovyClassInstance(&quot;NOWOutgateProcessor&quot;).execute(inDao, api, false);&#xA;         } catch (Exception e) {&#xA;             api.log(&quot;Exception in NOWProcessor Outgate , verify=false: &quot; + e)&#xA;         }&#xA;    }&#xA;&#xA; public void executeIngate(inDao, api) {&#xA;      println(&quot;Pass Pass Ingate Truck Visit &quot;)&#xA;        try {&#xA;&#x9;&#x9;&#x9; api.getGroovyClassInstance(&quot;NOWProcessor&quot;).execute(inDao, api, true, false);&#xA;         } catch (Exception e) {&#xA;             api.log(&quot;Exception in NOWProcessor Outgate , verify=false: &quot; + e)&#xA;         }&#xA;    }&#xA;}" />
<digital-asset id="NowChassisTrackingBuilder" short-description="NowChassisTrackingBuilder" is-pre-deployed="N" groovy-code="/*&#xA;* Change History&#xA;* Test Prod URL Call&#xA;* Stripped chassis CheckDigit&#xA;* Need to test ChasType flavours&#xA;* Pulled out transit state from message&#xA;&#xA;* Srno  Doer Date      Change&#xA;* A1    GR   050510    Opend JMS Messages flow to NOW&#xA;*                      Dismount being called at the Gate for MG'S  &#xA;* A2    GR   05/28/10  Added Bare Chassis passing code to NOW&#xA;* A3    GR   06/04/10  Added passpass Gate Code Check&#xA;* A4    GR   07/06/10  Added Chassis Type BM &#xA;* A5    GR   07/08/10  UNIT_LOAD added to EventBound for Now list to pass              &#xA;* A6    GR   10/21/10  Added RefDataLookup Code for ChassisRfid WSDL&#xA;* A8    GR   08/16/11  2.1 Updated Email Method&#xA;* A7    GR   08/16/11  Added Chassis Axis-WS Code&#xA;*/&#xA;&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.business.atoms.EquipClassEnum&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper;&#xA;import nowsol_ChasTrack.*;&#xA;import com.navis.argo.business.model.Yard&#xA;import com.navis.xpscache.yardmodel.api.IXpsYardBin;&#xA;import com.navis.xpscache.yardmodel.api.IXpsYardBlock;&#xA;import com.navis.xpscache.yardmodel.api.IXpsYardModel;&#xA;import com.navis.argo.business.atoms.LocTypeEnum;&#xA;import com.navis.spatial.business.api.IBinModel;&#xA;import com.navis.spatial.business.model.AbstractBin;&#xA;import com.navis.spatial.business.model.block.AbstractBlock;&#xA;import com.navis.spatial.business.model.block.BinModelHelper;&#xA;import com.navis.yard.business.model.*;&#xA;&#xA;&#xA;public class NowChassisTrackingBuilder extends GroovyInjectionBase{&#xA;&#xA; def equiDetached = null;&#xA; def emailSender = null;&#xA;private static final String emailTo = '1aktosdevteam@matson.com';&#xA;//private static final String emailTo = '1aktosdevteam@matson.com';&#xA;&#xA;/*String nowMessage =&quot;&lt;?xml version='1.0' encoding='UTF-8'?&gt;&quot;+&#xA;&quot;&lt;argo:snx xmlns:argo='http://www.navis.com/argo' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation='http://www.navis.com/argo snx.xsd'&gt;&quot;+&#xA;&quot;&lt;unit transit-state='YARD' unique-key='MATZ9022294' snx-update-note='Test' id='MATZ9022294'&gt;&quot;+&#xA;&quot;  &lt;equipment eqid='MATZ9022294' role='PRIMARY' height-mm='2591' type='C40' class='CHS' /&gt;&quot;+&#xA;&quot;  &lt;position slot='A1218' location='SI' loc-type='YARD' /&gt;&quot;+&#xA;&quot;&lt;/unit&gt;&lt;/argo:snx&gt;&quot;; */&#xA;&#xA;&#xA;public void nowMessagesProcessor(Object event, Object api){&#xA;   def unit  = event.getEntity() &#xA;  //1. isUserEvntRecorder &#xA;  //2. xmlBuilder&#xA;  //Client code call to post Messages&#xA;  try{&#xA;      boolean isEvntBoundForNow = isEventBoundForNow(event)&#xA;      boolean isUserRecorder = isEvntRecUser(event)&#xA;     println(&quot;isEvntBoundForNow=&quot;+isEvntBoundForNow+&quot;   isUserRecorder:&quot;+isUserRecorder)&#xA;     if(!isUserRecorder){  &#xA;&#x9;   println(&quot;UserRecorder : User Condition not satisfied&quot;)&#xA;&#x9;   return;&#xA;     }else if(!isEvntBoundForNow){&#xA;&#x9;   println(&quot;Event Condition not satisfied&quot;)&#xA;&#x9;   return;&#xA;     }&#xA;&#xA;    String nowMessage = xmlBuilder(unit,equiDetached,'') &#xA;    String nowSnx = setSnx(nowMessage)&#xA;&#xA;    //postNowMsg(nowSnx)&#xA;&#xA;  }catch(Exception e){&#xA;&#x9; e.printStackTrace();&#xA;     emailSender = emailSender != null ? emailSender : getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;     emailSender.custSendEmail(emailTo, &quot;N4ToNow: Error Unit &quot;+(unit != null ? unit.unitId : &quot;UNIT OBJ NULL&quot;)+&quot; Message Processing Error &quot;, e.getMessage());&#xA;  }&#xA;&#xA;}&#xA;&#xA;/*&#xA;* Method to build xml for NOW service snx format &#xA;*/&#xA;public String xmlBuilder(Object unitObj, Object equiDetached, String notes){&#xA;&#x9;def snx = null;&#xA;&#x9;def unit = null;&#xA;try{&#xA;  if(equiDetached != null){&#xA;     unit = equiDetached&#xA;  }else{&#xA;     unit = unitObj&#xA;  }&#x9;&#x9; &#xA;  def chasType = null;&#xA;  def unitId = unit.unitId&#xA;  def length = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqLengthMm&quot;)&#xA;  def height = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqHeightMm&quot;)&#xA;  def transitState = unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;  transitState = transitState != null ? transitState.getKey() : ''&#xA;  def tState = transitState.split(&quot;_&quot;)  &#xA;  transitState = tState[1]&#xA;  def primEqType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;)&#xA;  def primEqRole = unit.getFieldValue(&quot;unitPrimaryUe.ueEqRole&quot;)&#xA;&#x9;  primEqRole = primEqRole != null ? primEqRole.getKey() : ''&#x9;&#xA;  def primaryClass = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;  def primaryClassCode = EquipClassEnum.CONTAINER.equals(primaryClass) ? &quot;CTR&quot; : (EquipClassEnum.CHASSIS.equals(primaryClass) ? &quot;CHS&quot; : &quot;CTR&quot;)&#xA;  if(&quot;CHS&quot;.equals(primaryClassCode)){&#xA;    UnitEquipment unitEquipment = unit.getUnitPrimaryUe();&#xA;&#x9;Equipment primChasEq = unitEquipment.ueEquipment&#xA;    chasType = getChassisType(primChasEq, primaryClass,unit)&#xA;    unitId = unitId.substring(0,unitId.length()-1)&#xA;    //println(&quot;CHS - unitEquipment=&quot;+unitEquipment+&quot;  primChasEq=&quot;+primChasEq+&quot; chasType=&quot;+chasType)&#xA;  }&#xA;&#xA;  //Secondary Equi Values &#xA;  UnitEquipment unitEquipment = unit.getUnitCarriageUe();&#xA;  def chasid = null; def chasIdNoChkDigit = null; def chaslength = null; def chasHeight = null; def chasRole = null;&#xA;  def chasClass = null; def chasTypeIso= null;&#xA;&#xA;  if(unitEquipment != null){&#xA;   Equipment chasEq = unitEquipment.ueEquipment&#xA;   chasid = chasEq.eqIdFull&#xA;   chasIdNoChkDigit = chasid.substring(0,chasid.length()-1)&#xA;   chaslength = chasEq.eqLengthMm&#xA;   chasHeight = chasEq.eqHeightMm&#xA;   chasRole = unitEquipment.ueEqRole&#xA;   chasRole = chasRole != null ? chasRole.getKey() : ''&#xA;   chasClass = chasEq.eqEquipType.eqtypClass&#xA;   chasClass = EquipClassEnum.CHASSIS ? &quot;CHS&quot; : ''&#xA;   chasTypeIso = chasEq.eqEquipType.eqtypId&#xA;   chasType = getChassisType(chasEq, primaryClass, unit)&#xA;   //println(&quot;chasIdNoChkDigit=&quot;+chasIdNoChkDigit+&quot;chaslength=&quot;+chaslength+&quot;chasHeight=&quot;+chasHeight+&quot;chasRole=&quot;+chasRole+&quot;chasClass=&quot;+chasClass+&quot;chasTypeIso=&quot;+chasTypeIso+&quot; chasType=&quot;+chasType)&#xA;  }&#xA;&#xA;   def location=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocId&quot;)&#xA;   location = location != null ? location : ''&#xA;   def locType=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;   locType = locType != null ? locType.getKey() : ''&#xA;   //lkpSlot = lkpSlot != null ? lkpSlot : '' &#xA;   //println(&quot;unitId=&quot;+unitId+&quot;length=&quot;+length+&quot;height=&quot;+height+&quot;transitState=&quot;+transitState+&quot;primEqType=&quot;+primEqType+&quot;primEqRole=&quot;+primEqRole+&quot;primaryClassCode=&quot;+primaryClassCode+&quot;  equiDetached=&quot;+equiDetached)&#xA;   def lkpSlot = null&#xA;   if('VESSEL'.equals(locType)){&#xA;     lkpSlot = unit.unitActiveUfv.ufvLastKnownPosition.posSlot&#xA;     lkpSlot = lkpSlot != null ? lkpSlot : ''&#xA;   }else{&#xA;     lkpSlot = formatYardPosition(unit)&#xA;   }&#xA;&#xA;&#xA;// build XML using Groovy built-in capabilities&#xA;def writer = new StringWriter()&#xA;def builder = new groovy.xml.MarkupBuilder(writer)&#xA;def addNotes = notes&#xA;def snxnotes = getSnxNotes(primaryClass,length,chaslength,chasType,addNotes)&#xA;&#xA;builder.unit(id: unitId, 'unique-key': unitId, 'snx-update-note': snxnotes)&#xA;{&#xA;   equipment(eqid: unitId, class:primaryClassCode, role:primEqRole, type: primEqType, 'height-mm': height)&#xA;   if(unitEquipment != null){&#xA;    equipment(eqid: chasIdNoChkDigit, class:chasClass, role:chasRole, type: chasTypeIso, 'height-mm': chasHeight)&#xA;    }&#xA;   position('loc-type': locType, location: location, slot : lkpSlot) &#xA;}&#xA;&#xA;snx = writer.toString()&#xA;&#xA;&#xA;}catch(Exception e){&#xA;  throw e;&#xA;}&#xA; return snx&#xA;}//Method Ends&#xA;&#xA;&#xA;/*&#xA;* Method Sends Data back to the NOW service &#xA;  2.1 - if doer contains Gate dont send&#xA;  2.2 - if Doer is XPS dont send&#xA;  2.3 - if Doer is Jms/Snx(Steves Method Dont send)&#xA;*/&#xA;public boolean isEvntRecUser(Object event)&#xA;{&#xA;&#x9; boolean isUser = true;&#xA;     def doer = event.getEvent().getEvntAppliedBy();&#xA;     def evntNotes = event.getEvent().getEventNote();&#xA;     evntNotes = evntNotes != null ? evntNotes : ''&#xA;&#xA;     //Dont pass NOW Message for below Event Recorders&#xA;     if(doer.contains('WO') || doer.contains('wo') || doer.contains('GATE') || doer.contains('now') || doer.contains('xps') || doer.contains('gate') || doer.contains('passpass') || doer.contains('PASS')){&#xA;         isUser = false;&#xA;     }&#xA;   return isUser;&#xA; }&#xA;&#xA; /* Method to validate Event Message Posting  &#xA; * Send unit Mount and Dismounts for only Chassis[Carriage]&#xA; * Send yard Moves only for Bare chassis&#xA; */&#xA; public boolean isEventBoundForNow(Object event){&#xA;&#x9;def isBoundForNow = false&#xA;&#xA;    def eventType = event.getEvent().getEventTypeId() &#xA;&#x9;def evntNotes = event.getEvent().getEventNote();&#xA;&#x9;evntNotes = evntNotes != null ? evntNotes : ''&#xA;&#x9;def unit = event.getEntity();&#xA;    def primaryClass = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;    def isClassChassis = EquipClassEnum.CHASSIS.equals(primaryClass) ? true : false&#xA;&#xA;    if(eventType.equals('UNIT_MOUNT') &amp;&amp; unit.getUnitCarriageUe() != null){&#xA;        isBoundForNow = true;&#xA;    }else if (eventType.equals('UNIT_DISMOUNT') &amp;&amp; !evntNotes.contains('swiped') &amp;&amp; !evntNotes.startsWith('MATG')){&#xA;&#x9;&#x9;equiDetached = getEquiDetached(event)&#xA;        def unitClass = equiDetached != null ? equiDetached.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;) : null&#xA;&#x9;&#x9;if(EquipClassEnum.CHASSIS.equals(unitClass)){&#xA;&#x9;&#x9;&#x9;isBoundForNow = true;&#xA;        }&#xA;    }else if(eventType.equals('UNIT_YARD_MOVE') &amp;&amp; isClassChassis){&#xA;        isBoundForNow = true;&#xA;&#x9;}else if(eventType.equals('UNIT_SNX_UPDATE') &amp;&amp; isClassChassis){ //A1&#xA;        isBoundForNow = true;&#xA;&#x9;}else if(eventType.equals('UNIT_LOAD') &amp;&amp; isClassChassis){ //A2&#xA;        isBoundForNow = true;&#xA;&#x9;}&#xA;&#x9;return isBoundForNow &#xA; }&#xA;&#xA;&#xA;//Formats Messages SNX String&#xA;public static String setSnx( String xml) &#xA;{&#xA;&#x9;if ( xml == null)&#xA;&#x9;   return null;&#xA;&#x9;&#x9;&#xA;&#x9;StringBuffer ret = new StringBuffer();&#xA;&#x9;&#x9;&#xA;&#x9;ret.append( &quot;&lt;?xml version='1.0' encoding='UTF-8'?&gt;&quot;);&#xA;&#x9;ret.append( &quot;&lt;argo:snx xmlns:argo='http://www.navis.com/argo' &quot;);&#xA;&#x9;ret.append( &quot;xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' &quot;);&#xA;&#x9;ret.append( &quot;xsi:schemaLocation='http://www.navis.com/argo snx.xsd'&gt;&quot;);&#xA;&#x9;ret.append(xml);&#xA;&#x9;ret.append( &quot;&lt;/argo:snx&gt;&quot;);&#xA;&#x9;return ret.toString();&#xA;}&#xA;&#xA;//Test 1. Triaxel and Mg Triaxel Setting &#xA;public String getChassisType(Object chasEq, Object primaryClass, Object unit){&#xA;    def chasType = null;&#xA;    def chasId = chasEq.eqIdFull&#xA;&#x9;def isTriaxle = chasEq.eqEquipType.eqtypIsChassisTriaxle&#xA;    def acryId = null&#xA;&#x9;if(EquipClassEnum.CHASSIS.equals(primaryClass)){&#xA;&#x9;&#x9;acryId = unit.getUnitAcryEquipIds()&#xA;    }else if (EquipClassEnum.CONTAINER.equals(primaryClass)){&#xA;        acryId = unit.getUnitChsAcryId()&#xA;    }&#xA;&#xA;    if(chasId.startsWith('YC89')){chasType = &quot;BM&quot;; }&#xA;    else if(acryId != null &amp;&amp; isTriaxle){ chasType = &quot;MGX&quot;; }&#xA;&#x9;else if(isTriaxle){ chasType = &quot;TX&quot;; }&#xA;    else if(acryId != null ){ chasType = &quot;MG&quot;; }&#xA;&#x9;else{ chasType = &quot;STD&quot; }&#xA;&#xA;    //println(&quot;primaryClass=&quot;+primaryClass+&quot; acryId=&quot;+acryId+&quot; isTriaxle=&quot;+isTriaxle)&#xA;&#x9;return chasType&#xA;}&#xA;&#xA;/*&#xA;* 1. Method sets notes with : Cntr &amp; Chas Length, ChasType&#xA;* 2. Sets notes for rowRefresh&#xA;*/&#xA;public String getSnxNotes(Object primaryClass,Object length, Object chaslength, Object chasType, String addNotes)&#xA;{&#xA;  def chassisType = chasType != null ? 'ChassType:'+chasType : 'ChassType:NA' &#xA;  String cntrLength = (EquipClassEnum.CONTAINER.equals(primaryClass) ? mmtoFeetConversion(length) : '')&#xA;  String chassLength = (EquipClassEnum.CHASSIS.equals(primaryClass) ? mmtoFeetConversion(length) : (chaslength != null ? mmtoFeetConversion(chaslength) : ''))&#xA;  String cntrLengthStr = cntrLength.trim().length() &gt; 0  ? 'CntrLength:'+cntrLength : 'CntrLength:NA'&#xA;  String chassLengthStr = chassLength.trim().length() &gt; 0 ? 'ChassLength:'+chassLength : 'ChassLength:NA'&#xA;  def notes = chassisType+','+cntrLengthStr+','+chassLengthStr+','+addNotes&#xA;  return notes&#xA;}&#xA;&#xA;/*&#xA;* Method Returns Detached Equip Unit Object&#xA;*/&#xA;public Object getEquiDetached(Object event){&#xA;   def eventNotes = event.getEvent().getEventNote()&#xA;   def equid = eventNotes.split(' ') &#xA;   def injBase = new GroovyInjectionBase();&#xA;   def complex = ContextHelper.getThreadComplex();&#xA;   def unitFinder = injBase.getUnitFinder();&#xA;   def eq = Equipment.loadEquipment(equid[0]);&#xA;   if(!EquipClassEnum.CHASSIS.equals(eq.eqClass)){&#xA;&#x9;   return null;&#xA;   }&#xA;   def unit = unitFinder.findActiveUnit(complex, eq);&#xA;   return unit &#xA;}&#xA;&#xA;//MM to FEET conversion&#xA;public String mmtoFeetConversion(Object length){&#xA;&#x9;def feetLngth = length * 0.0032808399 &#xA;        feetLngth = Math.round(feetLngth)&#xA;    return &quot;&quot;+feetLngth&#xA;}&#xA;&#xA;&#xA;public String formatYardPosition(Object unit)&#xA;{&#xA;  String binName=null; String tierName=null;&#xA;  String finalSlotFmt = null;&#xA;  try{ &#xA;    def locId = unit.unitActiveUfv.ufvLastKnownPosition.posLocId&#xA;    def positionLocType = unit.unitActiveUfv.ufvLastKnownPosition.posLocType&#xA;    def inYardSlot = unit.unitActiveUfv.ufvLastKnownPosition.posSlot&#xA;&#x9;if(LocTypeEnum.VESSEL.equals(positionLocType)){&#xA;&#x9;&#x9;return finalSlotFmt = inYardSlot&#xA;    }else if(LocTypeEnum.TRUCK.equals(positionLocType)){&#xA;&#x9;&#x9;return finalSlotFmt = &quot;TRUCK&quot;&#xA;    }&#xA;    &#xA;    if(inYardSlot == null || inYardSlot.trim().length() == 0){ return ''; }&#x9;&#xA;&#x9;println (&quot;inYardSlot ------------------&gt; &quot;+ inYardSlot);&#xA;    def inFacility = ContextHelper.getThreadFacility()&#xA;    Yard inYard =  Yard.findYard(&quot;SI&quot;, inFacility);&#xA;    int lastDot = inYardSlot.lastIndexOf('.');&#xA;    &#xA;    if (inYardSlot.startsWith(&quot;S&quot;) || inYardSlot.startsWith(&quot;V&quot;) || inYardSlot.startsWith(&quot;O&quot;)){&#xA;&#x9;binName = inYardSlot.replace('.','');&#xA;&#x9;tierName = &quot;&quot;;&#xA;    } &#xA;    else {&#xA;    &#x9;if (lastDot &gt; 0) {&#xA;        &#x9;binName = inYardSlot.substring(0, lastDot);&#xA;         &#x9;tierName = inYardSlot.substring(lastDot + 1, inYardSlot.length());&#xA;        &#x9;} else {&#xA;         &#x9;binName = inYardSlot;&#xA;         &#x9;tierName = &quot;&quot;;&#xA;    &#x9;&#x9;}&#xA;    }&#xA;&#x9;String formattedYardSlotName = binName;&#xA;&#x9;finalSlotFmt = formattedYardSlotName.replace('-','.')&#xA;&#x9;int lastDotPos = finalSlotFmt.lastIndexOf('.'); &#xA;&#x9;if(finalSlotFmt.length() &gt; 5){&#xA;&#x9;&#x9;println(&quot;If  finalSlotFmt---------------------&gt; &quot;+ finalSlotFmt);&#x9;&#xA;&#x9;&#x9;finalSlotFmt  = finalSlotFmt.substring(0,2)+&quot;.&quot;+finalSlotFmt.substring(2,4)+&quot;.&quot;+finalSlotFmt.substring(4);&#xA;&#x9;} else {&#xA;&#x9;&#x9;println(&quot;Else finalSlotFmt ---------------------&gt; &quot;+ finalSlotFmt);&#xA;&#x9;&#x9;finalSlotFmt  = finalSlotFmt.substring(0,3)+&quot;.&quot;+finalSlotFmt.substring(3);&#xA;&#x9;} &#xA;&#x9;&#xA;&#x9;//if(lastDotPos &gt; 4){&#xA;&#x9;&#x9;//finalSlotFmt = finalSlotFmt.replace('.','')&#xA;        //finalSlotFmt  = finalSlotFmt.substring(0,2)+&quot;.&quot;+finalSlotFmt.substring(2,4)+&quot;.&quot;+finalSlotFmt.substring(4)&#xA;    &#x9;//}    &#xA;    &#xA;    /*YardBinModel yardModel =  com.navis.yard.business.model.YardBinModel.findYardBinModelFromYardCodeAndOwner(&quot;SI&quot;, inYard)&#xA;    //IXpsYardModel yardModel = inYard.getYardModel(); &#xA;    binName = yardModel.getUiFullPositionWithTier(BinNameTypeEnum.STANDARD, binName);&#xA;    def inCtrLength = unit.getBasicLength()&#xA;    int lastDot = inYardSlot.lastIndexOf('.');&#xA;    if (lastDot &gt; 0) {&#xA;     binName = inYardSlot.substring(0, lastDot);&#xA;     tierName = inYardSlot.substring(lastDot + 1, inYardSlot.length());&#xA;    } else {&#xA;     binName = inYardSlot;&#xA;     tierName = &quot;&quot;;&#xA;    }&#xA;&#xA;    AbstractBin bin = yardModel.findDescendantBinFromInternalSlotString(binName, null);&#xA;    //IXpsYardBin bin = yardModel.getBin(binName);&#xA;&#x9;if(bin == null){&#xA;&#x9;&#x9;throw new Exception(&quot;Unit=&quot;+unit.unitId+&quot; has an Invalid Yard Position Please Correct N4&quot;);&#xA;    }&#xA;    //String formattedYardSlotName = bin.getUiFullPositionWithTier(inCtrLength, tierName);&#xA;String formattedYardSlotName = binName;&#xA;&#x9;finalSlotFmt = formattedYardSlotName.replace('-','.')&#xA;&#x9;int lastDotPos = finalSlotFmt.lastIndexOf('.'); &#xA;&#x9;if(lastDotPos &gt; 4){&#xA;&#x9;&#x9;finalSlotFmt = finalSlotFmt.replace('.','')&#xA;        finalSlotFmt  = finalSlotFmt.substring(0,2)+&quot;.&quot;+finalSlotFmt.substring(2,4)+&quot;.&quot;+finalSlotFmt.substring(4)&#xA;    }*/&#xA;   &#xA; }catch(Exception e){&#xA;&#x9;throw e;&#xA; }&#xA;  println(&quot;finalSlotFmt ---------------------&gt; &quot;+ finalSlotFmt);&#xA;  return finalSlotFmt;&#xA; }//Method Ends&#xA;&#xA; //Method - makes call to NOW webservice&#xA; public void postNowMsg(String nowSnx){    &#xA;  try&#xA;  {&#xA;    //move to RefData&#xA;&#x9;  println(&quot;nowsnx=&quot;+nowSnx);&#xA;&#xA;&#x9;if(nowSnx == null &amp;&amp; nowSnx.trim().length() == 0){&#xA;&#x9;&#x9;return;&#xA;&#x9;}&#xA;&#xA;&#xA;    //String wsdlurl = &quot;http://192.168.170.244:9301/?wsdl&quot;;&#xA;&#x9;String wsdlurl = getGroovyClassInstance(&quot;GvyRefDataLookup&quot;).getChasRfidUrl(); //A6&#xA;&#x9;println(&quot;wsdlurl : NOW ::: &quot;+ wsdlurl);&#xA;&#x9;ChasTrack_ServiceLocator chasSrvLoc = new ChasTrack_ServiceLocator();&#xA;&#x9;println(&quot;chasProxy :::::: &quot;+chasSrvLoc);&#xA;&#x9;chasSrvLoc.setChasTrackEndpointAddress(wsdlurl);&#xA;&#x9;ChasTrack_PortType chasProxy = chasSrvLoc.getChasTrack();&#xA;&#x9;println(&quot;chasProxy :::::: &quot;+chasProxy);&#xA;&#x9;String resultValue = chasProxy.updateChassis(nowSnx);&#xA;    //ChasTrack_Service_Impl chasTrackImpl = new ChasTrack_Service_Impl(wsdlurl);&#xA;    //ChasTrack_PortType chasTrackPortType = chasTrackImpl.getChasTrack();&#xA;    //String resultValue = chasTrackPortType.updateChassis(nowSnx);&#xA;    println(&quot;resultValue=&quot;+resultValue);&#xA;&#xA;&#xA;  }catch(Exception e){&#xA;       e.printStackTrace()&#xA;       throw e;&#xA;  }&#xA; }&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyUnitUtility" short-description="GvyUnitUtility" is-pre-deployed="N" groovy-code="/*&#xA;* SrNo Doer  Date      Change&#xA;* A1   GR    08/30/10  &#xA;*/&#xA;&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.portal.Ordering&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.framework.persistence.*&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;&#xA;&#xA;public class GvyUnitUtility{&#xA;&#xA;  /* Method to Get  PreviousDepartedUnit in that facility */ &#xA;  public Unit getPreviousDepartedUnit(Object api,Object currentUnit){&#xA;     def gvyGateClass = api.getGroovyClassInstance(&quot;GvyCmisGateData&quot;)&#xA;     def departedUfvUnit = gvyGateClass.getDepatedUnit(currentUnit)&#xA;     def departedUnit = departedUfvUnit.ufvUnit&#xA;  }&#xA;&#xA;  /* Method Returns boolean if field was changed    */&#xA;   public boolean isFieldChngForNonBuildInEvents(GroovyEvent event,GroovyApi api, String afield, Object gvyEventUtil)&#xA;  {&#xA;     boolean isFldChange = false&#xA;    //Reads and Maps Event Updated Field value&#xA;    def gvyEvntUtil = gvyEventUtil == null ? api.getGroovyClassInstance(&quot;GvyEventUtil&quot;) : gvyEventUtil ;&#xA;    Map mapEvntField = gvyEvntUtil.eventFieldChangedValues(event, api) &#xA;&#xA;    //Fetch Event Updated Field : current and Previous value  &#xA;    def aEvntFieldObj = mapEvntField.get(afield)    &#xA;    if(aEvntFieldObj == null) { return isFldChange;}&#xA;     def fieldname = aEvntFieldObj.getFieldName()&#xA;     def previousValue = aEvntFieldObj.getpreviousValue()&#xA;    previousValue = previousValue != null ? previousValue : ''&#xA;    def currentValue = aEvntFieldObj.getCurrentValue()&#xA;    currentValue = currentValue != null ? currentValue : ''  &#xA;&#xA;    if(!currentValue.equals(previousValue)){&#xA;       isFldChange = true&#xA;    }&#xA;&#xA;    return isFldChange&#xA;&#xA; }&#xA; &#xA; /*&#xA;  * Method Fetches last Departed Ufv Unit &#xA;  */&#xA;  private Object findRetiredUfvUnit(Object inFacility, long primaryEquiGkey) &#xA;  { &#xA;    def lastRetiredUfvUnit = null;&#xA;    List ufvUnitLst = null;&#xA;    try{&#xA;    //NEW Query Removes TRUCK Criteria Check&#xA;   DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;).addDqPredicate(PredicateFactory.eq(UnitField.UFV_FACILITY, inFacility.getFcyGkey())).addDqPredicate(PredicateFactory.eq(UnitField.UFV_VISIT_STATE, UnitVisitStateEnum.RETIRED)).addDqPredicate(PredicateFactory.eq(UnitField.UFV_PRIMARY_EQ, primaryEquiGkey)).addDqOrdering(Ordering.desc(UnitField.UFV_TIME_OUT));  &#xA;&#xA;   ufvUnitLst = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#xA;   println('ufvUnitLst ::'+(ufvUnitLst != null ? ufvUnitLst.size() : '0'))&#xA;   int count = 0;&#xA;    &#xA;    for(aUfv in ufvUnitLst){&#xA;      count++;&#xA;      def remarks =  aUfv.getFieldValue(&quot;ufvUnit.unitRemark&quot;);&#xA;      def truckerId = aUfv.getFieldValue(&quot;ufvActualObCv.carrierOperatorId&quot;)&#xA;     }&#xA;&#x9;&#xA;     //The First ufv in the List is the most recent dept unit&#xA;     if (ufvUnitLst.size() &gt; 0) {&#xA;       lastRetiredUfvUnit = ufvUnitLst.get(0);&#xA;       return lastRetiredUfvUnit&#xA;     }&#xA;&#xA;   }catch(Exception e){&#xA;      e.printStackTrace()&#xA;   }&#xA;  return lastRetiredUfvUnit ;&#xA;}   &#xA;&#xA;    /*&#xA;      * Method Fetches last Retired/Departed Ufv Unit&#xA;      */&#xA;    private Object findRetiredDepartedUfvUnit(Object inFacility, long primaryEquiGkey)&#xA;    {&#xA;        def lastRetiredUfvUnit = null&#xA;        List ufvUnitLst = null&#xA;        try{&#xA;            //NEW Query Removes TRUCK Criteria Check&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;).addDqPredicate(PredicateFactory.eq(UnitField.UFV_FACILITY, inFacility.getFcyGkey())).addDqPredicate(PredicateFactory.in(UnitField.UFV_VISIT_STATE, [&#xA;                    UnitVisitStateEnum.RETIRED,&#xA;                    UnitVisitStateEnum.DEPARTED&#xA;            ])).addDqPredicate(PredicateFactory.eq(UnitField.UFV_PRIMARY_EQ, primaryEquiGkey)).addDqOrdering(Ordering.desc(UnitField.UFV_TIME_OF_LAST_MOVE))&#xA;&#xA;            ufvUnitLst = HibernateApi.getInstance().findEntitiesByDomainQuery(dq)&#xA;&#xA;            println('ufvUnitLst ::'+(ufvUnitLst != null ? ufvUnitLst.size() : '0'))&#xA;            int count = 0&#xA;&#xA;            for(aUfv in ufvUnitLst){&#xA;                count++&#xA;                def remarks =  aUfv.getFieldValue(&quot;ufvUnit.unitRemark&quot;)&#xA;                def truckerId = aUfv.getFieldValue(&quot;ufvActualObCv.carrierOperatorId&quot;)&#xA;            }&#xA;&#xA;            //The First ufv in the List is the most recent dept unit&#xA;            if (ufvUnitLst.size() &gt; 0) {&#xA;                lastRetiredUfvUnit = ufvUnitLst.get(0)&#xA;                return lastRetiredUfvUnit&#xA;            }&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return lastRetiredUfvUnit&#xA;    }&#xA;&#xA;}" />
<digital-asset id="GvyAuditDischargeCompleteTest" short-description="GvyAuditDischargeCompleteTest" is-pre-deployed="N" groovy-code="/*&#xA;*  A1   KM   02/10/2011     Initial groovyPlugins for vessel (long haul/barges) discharge audit&#xA;*                           Sends out Client discharge report&#xA;*  A2   GR                  Last container discharge report&#xA;*  A3   PS                  Sends out confirmation notice that discharge audit is complete&#xA;*  A4   GR                  Altered Query last DFV Rpt(no through cntr,no mty cntr,no pier29 cntr)&#xA;                            changed query to lookup on actual IB visit&#xA;*  A5   GR                  Changed Obcarrier to vessel visit IBvesvoy&#xA;*  A6   GR                  Check line operator split&#xA;*  A7   GR   05/02/11       Made Code Generic to Handel Load and Discharge function&#xA;*  A8   GR   05/02/11       For Load units change sorting by timeOut&#xA;*  A9   GR   05/02/11       For Load units change sort by last moved&#xA;*  A10  GR   05/04/11       Set Client unit Timezone, Hardcode HON as Facilty, Status=FreightKind&#xA;*  A11  GR   05/20/11       Adding rob,dfv COUNTS&#xA;*  A12  GR   05/23/11       OnDeck, Below Deck addition&#xA;*  A13  GR   05/24/11       Defect picking up Retired unit. Added Filter&#xA;*  A14  GR   05/25/11       Check Nullpointer Exception&#xA;*  A15  GR   05/26/11       FIX Replaced TimeIn with UfvFlexDate4 a)Correct Discharge b) Client Restow unit&#xA;*  A16  GR   06/15/11       Filter out Through Contianers from Client Cntr report&#xA;*  A17  GR   06/28/11       Trailer Report to Accouting&#xA;*  A18  KM   07/08/11       Split email audit pau and trailer report&#xA;*  A19&#x9;GR   07/12/11       Set OBcarrier for Client Reports&#xA;*  A20  KM   09/12/11       Updated prod emails addresses&#xA;* 08/16/11 2.1 Updated Email Method&#xA;* 08/14/2013 Fix the ROB list count to include all THROUGHs, remove the DEPARTED or LOADED condition&#xA;* 08/16/2013 Add filter to query for advised, retired&#xA;* 08/20/2013 Add filters for Discharge, fix ROB list count&#xA;*  A21   KM   12/09/13      Added 1aktosdevteam@matson.com to acctEmail var&#xA;*/&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;import java.util.HashMap&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;import com.navis.argo.business.atoms.FreightKindEnum;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.api.EventManager&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;&#xA;import java.text.DateFormat;&#xA;import java.text.SimpleDateFormat;&#xA;import java.util.Date;&#xA;&#xA;&#xA;public class GvyAuditDischargeCompleteTest extends GroovyInjectionBase&#xA;{&#xA;    private String outBoundCarrierId = null&#xA;    def inj = null;&#xA;    def gvyEventUtil = null;&#xA;    HashMap mapDisplayLst = new HashMap(); //A2&#xA;    def reportType = null;&#xA;    def timezone = null;&#xA;    List totalUnitList = null;&#xA;    private static final String eol = &quot;\r\n&quot;;&#xA;    def rptFieldSortUtil = null;&#xA;    def event = null;&#xA;    HashMap mapTrailer = new HashMap();&#xA;    def vesselForDischId = null;&#xA;    Date vesselATADate = null;&#xA;    Date vesselATDDate = null;&#xA;    //def emailTo = '1aktosdevteam@matson.com  //A20&#xA;    //def acctEmail = 'MChoo@matson.com,MLopez@matson.com,CKorenaga@matson.com,1TOSDevTeamHON@matson.com'  //A21&#xA;    def emailTo = '1TOSDevTeamHONprod@gmail.com'  //A20&#xA;    def acctEmail = '1TOSDevTeamHONprod@gmail.com'  //A21&#xA;&#xA;&#xA;    def trailerCnt = 0;&#xA;&#xA;    public String checkForMultipleDischarges(){&#xA;        //1. Check if unit has Multiple discharge events&#xA;        //2. if Multiple discharge then drop out of list&#xA;        //3. resort for last discharge value&#xA;        //4. Return last disch unit&#xA;    }&#xA;&#xA;    public String checkForRestowUnit(){&#xA;        //1. check if its a restow unit then drop it out of the list&#xA;    }&#xA;&#xA;    public void init(){&#xA;        inj = new GroovyInjectionBase();&#xA;        gvyEventUtil = gvyEventUtil == null ? inj.getGroovyClassInstance(&quot;GvyEventUtil&quot;) : gvyEventUtil ;&#xA;        timezone = ContextHelper.getThreadUserTimezone();&#xA;    }&#xA;&#xA;    public boolean processClientDischarge(Object eventObj, String rptType)&#xA;    {&#xA;        //1. lookup all units on Board&#xA;        //2. Fetch and Map information&#xA;        //3. Generate Report&#xA;        init() // Initialize Global variable&#xA;&#xA;        try&#xA;        {&#xA;            def visit = eventObj.getEntity();&#xA;            reportType = rptType;&#xA;            event = eventObj&#xA;&#xA;            //getEmail Grp List&#xA;            def nextFacility = visit.getFieldValue(&quot;cvdCv.cvNextFacility.fcyId&quot;)&#xA;            def facility = visit.getFieldValue(&quot;cvdCv.cvFacility.fcyId&quot;)&#xA;&#xA;            //outBoundCarrierId =  visit.cvdCv&#xA;            outBoundCarrierId = visit.vvdVessel.vesId+visit.getFieldValue(&quot;vvdObVygNbr&quot;) //A5&#xA;            //if outbound carrier is YB just return   check for client vessels if yes filter out client service&#xA;            if(outBoundCarrierId.startsWith('YB')){&#xA;                return null;&#xA;            }&#xA;            // A1 need to find method of discharge units&#xA;            List dfvUnits = findAllClientUnits(visit, rptType)&#xA;            //println(&quot;dfv Unit list &quot;+dfvUnits)&#xA;            // A2 need to find on client units&#xA;            if(dfvUnits != null &amp;&amp; dfvUnits.size() &gt; 0){&#xA;                List sortDfvUnits = sortUnitsByLineOp(dfvUnits)&#xA;                //println(&quot;sort dfv Unit list &quot;+sortDfvUnits)&#xA;                // A3 group line operators togethers&#xA;                // A4 add report creation and emailing spcecific to line operator&#xA;                procClientCntr(sortDfvUnits)&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;    /*&#xA;    * Method finds all NON-MAT Container and Add the cntrs to a list&#xA;    * Returns a List of containers&#xA;    */&#xA;    public List findAllClientUnits(Object vesVisit, String rptType)&#xA;    {&#xA;        ArrayList vesVistUnitLists = new ArrayList();&#xA;        try{&#xA;            Long lineOpGkey = LineOperator.findLineOperatorById(&quot;MAT&quot;).bzuGkey&#xA;            //Long cvGkey = vesVisit.getCvdCv().getCvGkey()&#xA;            def id = vesVisit.getCvdCv().getCvId()&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;            if('DISCHARGE'.equals(rptType)){&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, id));&#xA;            }else if ('LOAD'.equals(rptType)){&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID, id));&#xA;            }&#xA;            dq = dq.addDqPredicate(PredicateFactory.ne(UnitField.UFV_LINE_OPERATOR_GKEY, lineOpGkey)).addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY, UnitCategoryEnum.THROUGH)).addDqOrdering(Ordering.asc(UnitField.UFV_LINE_OPERATOR_GKEY));  //A17&#xA;            List vesVistUnits  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            println(&quot;dq ====&quot;+dq+&quot; unitsList ====&quot;+(vesVistUnits != null ? vesVistUnits.size() : &quot;NO RESULT&quot;));&#xA;&#xA;            if('DISCHARGE'.equals(rptType)){&#xA;                vesVistUnitLists.addAll(vesVistUnits);&#xA;            } else if ('LOAD'.equals(rptType)){&#xA;                Iterator iter = vesVistUnits.iterator();&#xA;                while(iter.hasNext()) {&#xA;                    def ufv = iter.next();&#xA;                    def transitState =  ufv.getUfvTransitState()&#xA;                    if (transitState != null) {&#xA;                        transitState = transitState != null ? transitState.getKey() : ''&#xA;                        def tState = transitState.split(&quot;_&quot;)&#xA;                        transitState = tState[1]&#xA;                    }&#xA;&#xA;                    if (transitState != null &amp;&amp; (&quot;DEPARTED&quot;.equals(transitState) || &quot;LOADED&quot;.equals(transitState) ))&#xA;                    {&#xA;                        vesVistUnitLists.add(ufv)&#xA;                    }&#xA;                }&#xA;&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return vesVistUnitLists&#xA;    }&#xA;&#xA;    //1.Maps unit Data to report file attribute&#xA;    public HashMap populateUnitData(UnitFacilityVisit ufv)&#xA;    {&#xA;        def unit = ufv.ufvUnit&#xA;        def transitState=unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;        if(ufv.ufvTimeIn == null){ //A14&#xA;            return  null;  // Would be a Through unit&#xA;        }&#xA;&#xA;        HashMap map = null;&#xA;        try&#xA;        {&#xA;            map = new HashMap();&#xA;            map.put(&quot;UnitNbr&quot;, unit.getFieldValue(&quot;unitId&quot;));&#xA;            map.put(&quot;PositionSlot&quot;, unit.unitFreightKind.name);&#xA;            map.put(&quot;POD&quot;, unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;));&#xA;            map.put(&quot;POL&quot;, unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;));&#xA;            map.put(&quot;EquipmentType&quot;, unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;));&#xA;            map.put(&quot;OutBoundCarrierId&quot;, outBoundCarrierId);&#xA;            map.put(&quot;LineOperator&quot;,unit.getFieldValue(&quot;unitLineOperator.bzuId&quot;));&#xA;            map.put(&quot;Destination&quot;,unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;));&#xA;            //A8&#xA;            if('DISCHARGE'.equals(reportType)){&#xA;                map.put(&quot;InTime&quot;,ContextHelper.formatTimestamp(ufv.ufvTimeIn, timezone));&#xA;            }else if ('LOAD'.equals(reportType)){&#xA;                map.put(&quot;InTime&quot;,ContextHelper.formatTimestamp(ufv.ufvTimeOfLastMove, timezone));&#xA;            }&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return map;&#xA;    }&#xA;    /*&#xA;    * Method sorts NON-MAT Container by Line Operator and created Individial list of each LineOperator&#xA;    * Returns List of Individual LineOperator List (example: ListOne=ALL MAE,ListTwo=ALL HCL,ListThree=ALL APL)&#xA;    */&#xA;    public List sortUnitsByLineOp(List unitList)&#xA;    {&#xA;        ArrayList listAllLineOp = new ArrayList();&#xA;        try{&#xA;            def aUfv = null;&#xA;            def prevLineOp = null;&#xA;            ArrayList listPerLineOp = null;&#xA;            Iterator itUnitList = unitList.iterator();&#xA;            while(itUnitList.hasNext()){&#xA;                aUfv = itUnitList.next();&#xA;                if(aUfv.ufvUnit.unitLineOperator.bzuId.equals(prevLineOp)){&#xA;                    listPerLineOp.add(aUfv);&#xA;                }else{&#xA;                    if(prevLineOp !=null){&#xA;                        listAllLineOp.add(listPerLineOp)&#xA;                    }&#xA;                    //First time it ill come here and createObject - Initialize new Variable&#xA;                    listPerLineOp = new ArrayList();&#xA;                    //Set new Variable&#xA;                    listPerLineOp.add(aUfv);&#xA;                } //Else Ends&#xA;                prevLineOp = aUfv.ufvUnit.unitLineOperator.bzuId&#xA;            } //While Ends&#xA;            //Add last loop values - Just incase there was only one unit and it went into the else loop&#xA;            listAllLineOp.add(listPerLineOp)&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return listAllLineOp&#xA;    }&#xA;    /*&#xA;    * Method a) Reads Each Individual LineOperator conatiner list&#xA;    * b) Populates Report data&#xA;      c) Gets Line Operator contact Information&#xA;      d) Calls Ireport code and mails report to specific LineOperator Email&#xA;    */&#xA;    public void procClientCntr(List list){&#xA;        try{&#xA;            Iterator itUnitList = list.iterator();&#xA;            def aUfv  = null;&#xA;            while(itUnitList.hasNext()){&#xA;                def contactName = null;&#xA;                HashMap fmtMap = null;&#xA;                //def contactEmail = &quot;1aktosdevteam@matson.com&quot;;&#xA;                def contactEmail = &quot;1aktosdevteam@matson.com.com&quot;;&#xA;                ArrayList rptUnitList = new ArrayList();&#xA;                ArrayList perLinOplist = itUnitList.next();&#xA;                Iterator  itperLinOp = perLinOplist.iterator();&#xA;                while(itperLinOp.hasNext()){&#xA;                    aUfv = itperLinOp.next();&#xA;                    //println(&quot;unitId=&quot;+aUfv.ufvUnit.unitId+&quot;    LineOP=&quot;+aUfv.ufvUnit.unitLineOperator.bzuId)&#xA;                    //Populate Report Data&#xA;                    fmtMap = populateUnitData(aUfv)&#xA;                    if(fmtMap != null){&#xA;                        rptUnitList.add(fmtMap)&#xA;                    }&#xA;                }//Inner While Ends&#xA;&#xA;                //Select LineOperator Contact Information&#xA;                if(aUfv != null){&#xA;                    def lineOperator = aUfv.ufvUnit.unitLineOperator&#xA;                    def contactInfo = lineOperator.bzuCtct&#xA;                    if(contactInfo != null){&#xA;                        contactName = contactInfo.ctctName&#xA;                        contactEmail = contactInfo.ctctEmailAddress&#xA;                    }//Outer While ends&#xA;&#xA;                    //Call IReport Generation Code Here&#xA;                    processRpt(rptUnitList, contactName, contactEmail)&#xA;                    //println(&quot;--------------------------------------------------&quot;)&#xA;                    //println(&quot;--------------------------------------------------&quot;)&#xA;                }// If Ends&#xA;            } //While Ends&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;    public void processRpt(List unitList, String contactName, String contactEmail){&#xA;        try{&#xA;            println(&quot;unitList :&quot;+ (unitList != null ? unitList.size() : &quot;EMPTY&quot;))&#xA;&#xA;            //Set Report Parameter&#xA;            def reportDesignName = null;&#xA;            def displayType = null;&#xA;            HashMap parameters = new HashMap();&#xA;            String strDate = ContextHelper.formatTimestamp(new Date(), timezone)&#xA;&#xA;            //println(&quot;Event Time ::&quot;+event.getEvent().getEventTime()+&quot;    TimeZone:&quot;+ContextHelper.getThreadUserTimezone()+&quot;  strDate ::&quot;+strDate)&#xA;            parameters.put(&quot;Date&quot;,strDate);&#xA;            parameters.put(&quot;recordCount&quot;,(unitList != null ? unitList.size() : 0))&#xA;&#xA;            //A7&#xA;            if(&quot;DISCHARGE&quot;.equals(reportType)){&#xA;                reportDesignName = &quot;CLIENT DISCHARGE AUDIT&quot;;&#xA;                displayType = &quot;Discharge&quot;;&#xA;&#xA;            }else if(&quot;LOAD&quot;.equals(reportType)){&#xA;                reportDesignName = &quot;CLIENT LOAD AUDIT&quot;;&#xA;                displayType = &quot;Load&quot;;&#xA;            }&#xA;&#xA;            //A401&#xA;            def gvyRptUtil = getGroovyClassInstance(&quot;ReportFieldSortUtil&quot;)&#xA;            if(unitList != null &amp;&amp; unitList.size() &gt; 0){&#xA;                unitList =  gvyRptUtil.processFieldSort(unitList,&quot;EquipmentType,UnitNbr&quot;)&#xA;                Map mapList = (Map)unitList.get(0);&#xA;                println(&quot;mapList=&quot;+mapList);&#xA;                //Create and Mail Report&#xA;                JRDataSource ds = new JRMapCollectionDataSource(unitList);&#xA;                def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;                reportRunner.emailReport(ds, parameters, reportDesignName, contactEmail, &quot;Matson Client Report - &quot; +outBoundCarrierId+&quot; &quot;+displayType, &quot;Attached is the &quot;+outBoundCarrierId+ &quot; &quot;+displayType+&quot; report&quot;);&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;    } //method ends&#xA;&#xA;    //A2 -- Starts last discharge report&#xA;    public boolean processLastDischCntrRpt(event, String rptType){&#xA;        init() // Initialize Global variable&#xA;        HashMap mapAuto = new HashMap();&#xA;        HashMap mapCyHon = new HashMap();&#xA;        HashMap mapCyOthers = new HashMap();&#xA;        //A7&#xA;        reportType = reportType == null ? rptType : reportType&#xA;        def units = null;&#xA;        println(&quot;processLastDischCntrRpt begin&quot;)&#xA;        try{&#xA;            inj = new GroovyInjectionBase();&#xA;            def visit = event.getEntity();&#xA;            def carrierId =  visit.cvdCv&#xA;&#xA;            if(&quot;BARGE&quot;.equals(visit.vvdVessel.vesVesselClass.vesclassVesselType.name)) {&#xA;                return;&#xA;            }&#xA;            units = findAllUnitsForVesVoy(visit)&#xA;&#xA;            Iterator iter = units.iterator();&#xA;            def ufv = null; def unit = null;  def dest = null; def commodity = null;&#xA;            def timeIn = null; def aibcarrierId = null;&#xA;            while(iter.hasNext()) {&#xA;                ufv = iter.next();&#xA;                unit = ufv.ufvUnit&#xA;                println(&quot;unit number is &quot;+unit.getFieldValue(&quot;unitId&quot;))&#xA;                if(unit.unitActiveUfv == null || UnitVisitStateEnum.RETIRED.equals(unit.unitActiveUfv.ufvVisitState) || UnitVisitStateEnum.ADVISED.equals(unit.unitActiveUfv.ufvVisitState)){&#xA;                    continue;&#xA;                }&#xA;                dest = unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;)&#xA;                commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;)&#xA;                commodity = commodity != null ? commodity : ''&#xA;                //A8&#xA;                if(&quot;DISCHARGE&quot;.equals(reportType)){&#xA;                    timeIn = ufv.ufvTimeIn&#xA;                }else if (&quot;LOAD&quot;.equals(reportType)){&#xA;                    timeIn = ufv.ufvTimeOfLastMove&#xA;                }&#xA;                def lkpSlot = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;                lkpSlot = lkpSlot!= null ? lkpSlot : ''&#xA;                println(&quot;unit &quot;+unit.getFieldValue(&quot;unitId&quot;)+&quot; commodity &quot;+commodity+&quot; lkpSlot&quot;+lkpSlot+&quot; dest&quot;+dest)&#xA;                def lkpSlotValue = lkpSlot.indexOf(&quot;.&quot;)== -1 ? lkpSlot : lkpSlot.substring(0,lkpSlot.indexOf(&quot;.&quot;));&#xA;                println(&quot;exception in the above unit  &quot;+lkpSlotValue);&#xA;                boolean pier29Loc = lkpSlotValue.startsWith('P29') || lkpSlotValue.startsWith('29Z') ? true : false&#xA;                println(&quot;unit &quot;+unit.getFieldValue(&quot;unitId&quot;)+&quot; commodity &quot;+commodity+&quot; timeIn &quot;+timeIn+&quot; dest &quot;+dest+&quot; pier29Loc &quot;+pier29Loc)&#xA;                if(commodity.contains('AUTO') &amp;&amp; timeIn != null) {&#xA;                    mapAuto.put(ufv, timeIn)&#xA;                }else if (!commodity.contains('AUTO') &amp;&amp; !pier29Loc &amp;&amp; 'HON'.equals(dest) &amp;&amp; timeIn != null){&#xA;                    mapCyHon.put(ufv, timeIn)&#xA;                }else if(!commodity.contains('AUTO') &amp;&amp;  !pier29Loc &amp;&amp; !'HON'.equals(dest) &amp;&amp; timeIn != null){&#xA;                    mapCyOthers.put(ufv, timeIn)&#xA;                }&#xA;&#xA;            }&#xA;            println(&quot;flow comes here ===&quot;)&#xA;            //println(&quot;  mapAuto.size() ===&quot;+ mapAuto.size()+&quot; mapCyHon.size() ===&quot;+mapCyHon.size()+&quot; mapCyOthers.size() ===&quot;+mapCyOthers.size())&#xA;            //Sort Map Object&#xA;            rptFieldSortUtil = rptFieldSortUtil != null ? rptFieldSortUtil : inj.getGroovyClassInstance(&quot;ReportFieldSortUtil&quot;);&#xA;            mapAuto = mapAuto != null &amp;&amp; mapAuto.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapAuto) : null //sort Auto&#xA;            mapCyHon = mapCyHon!= null &amp;&amp; mapCyHon.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapCyHon) : null //sort CyHon&#xA;            mapCyOthers = mapCyOthers != null &amp;&amp; mapCyOthers.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapCyOthers) : null //sort CyNonHon&#xA;&#xA;            //last Disch Units&#xA;            def ufvAuto = getLastDischUnit(mapAuto,&quot;&quot;);&#xA;            def ufvCyHon = getLastDischUnit(mapCyHon,&quot;&quot;);&#xA;            def ufvCyOthers = getLastDischUnit(mapCyOthers,&quot;&quot;);&#xA;&#xA;            println(&quot;mapDisplayLst size ==&quot;+mapDisplayLst.size())&#xA;            mapDisplayLst = mapDisplayLst.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapDisplayLst) : null&#xA;            def lstDischUfv = getLastDischUnit(mapDisplayLst,&quot;ALL&quot;);&#xA;&#xA;            println(&quot;ufvAuto=&quot;+ufvAuto+&quot; ufvCyHon=&quot;+ufvCyHon+&quot; ufvCyOthers=&quot;+ufvCyOthers+&quot;  lstDischUfv=&quot;+lstDischUfv)&#xA;            //For Report Display&#xA;&#xA;            HashMap lastUnit = null;&#xA;            ArrayList unitRptList = new ArrayList();&#xA;            unitRptList.add(populateLstDischUnit(ufvAuto, &quot;AUTO&quot;))&#xA;            unitRptList.add(populateLstDischUnit(ufvCyHon, &quot;CY-HON&quot;))&#xA;            unitRptList.add(populateLstDischUnit(ufvCyOthers, &quot;CY-OTHER&quot;))&#xA;            unitRptList.add(populateLstDischUnit(lstDischUfv, &quot;OVERALL&quot;))&#xA;&#xA;&#xA;            //Set Report Parameter&#xA;            HashMap parameters = new HashMap();&#xA;            String strDate = ContextHelper.formatTimestamp(event.getEvent().getEventTime(), timezone)&#xA;            parameters.put(&quot;Date&quot;,strDate);&#xA;&#xA;            println(&quot; unitRptList size ===&quot;+unitRptList.size())&#xA;            //Create and Mail Report&#xA;            JRDataSource ds = new JRMapCollectionDataSource(unitRptList);&#xA;            def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;            def reportDesignName = null; def displayType = null;&#xA;            //A7&#xA;            if(&quot;DISCHARGE&quot;.equals(reportType)){&#xA;                reportDesignName = &quot;DISCH REPORT FOR LAST CNTR&quot;;&#xA;                displayType = &quot;Discharge&quot;;&#xA;            }else if (&quot;LOAD&quot;.equals(reportType)){&#xA;                reportDesignName = &quot;LOAD REPORT FOR LAST CNTR&quot;;&#xA;                displayType = &quot;Load&quot;;&#xA;            }&#xA;            println(&quot;ds = &quot;+ds+&quot;   unitreportlist = &quot;+unitRptList+&quot; reportType=&quot;+reportType);&#xA;            reportRunner.emailReport(ds, parameters, &quot;DISCH REPORT FOR LAST CNTR&quot;, &quot;1TOSDevTeamHONprod@gmail.com&quot;,outBoundCarrierId+&quot; Last Container Discharge Report&quot; ,outBoundCarrierId+&quot; Last Container Discharge Report&quot;);&#xA;            //reportRunner.emailReport(ds, parameters,reportDesignName , &quot;1aktsodevteam@matson.com&quot;,outBoundCarrierId+&quot; Last Container &quot;+displayType+&quot; Report&quot; ,outBoundCarrierId+&quot; Last Container &quot;+displayType+&quot; Report&quot;);  //A20&#xA;            println(&quot;processLastDischCntrRpt end&quot;)&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;    public UnitFacilityVisit getLastDischUnit(Map map, String type)&#xA;    {&#xA;        def unit = null;&#xA;        def ufv = null;&#xA;        def timeIn = null;&#xA;        try{&#xA;            if(map == null){&#xA;                return null;&#xA;            }&#xA;&#xA;            Iterator it = map.keySet().iterator();&#xA;            while (it.hasNext()){&#xA;                ufv = it.next();&#xA;                timeIn = map.get(ufv)&#xA;            }&#xA;&#xA;            unit = ufv.getUfvUnit();&#xA;            //1. Check if Unit has multiple discharges&#xA;            EventType evntType = EventType.findEventType(&quot;UNIT_DISCH&quot;);&#xA;            EventManager eventManager = (EventManager)Roastery.getBean(&quot;eventManager&quot;);&#xA;            List events = eventManager.getEventHistory(evntType, unit);&#xA;&#xA;            if (events.size() == 2 &amp;&amp; !&quot;ALL&quot;.equals(type)) {&#xA;                def  event1 = events.get(0)&#xA;                def previousPos1 = event1.getEvntFieldChangesString();&#xA;                def note1 = previousPos1 != null ? previousPos1 : &quot;&quot;;&#xA;                boolean b1 = note1.contains(outBoundCarrierId);&#xA;&#xA;                def  event2 = events.get(1)&#xA;                def previousPos2 = event2.getEvntFieldChangesString();&#xA;                def note2 = previousPos2 != null ? previousPos2 : &quot;&quot;;&#xA;                boolean b2 = note2.contains(outBoundCarrierId)&#xA;                //Set Correct Disch Time in Unit&#xA;                if(b1){&#xA;                    println(&quot;Event Date 1=&quot;+event1.getEventTime());&#xA;                    map.remove(ufv);&#xA;                    map.put(ufv,event1.getEventTime());&#xA;                }else if(b2){&#xA;                    println(&quot;Event Date 2=&quot;+event2.getEventTime());&#xA;                    map.remove(ufv);&#xA;                    map.put(ufv,event2.getEventTime());&#xA;                }&#xA;&#xA;                rptFieldSortUtil = rptFieldSortUtil != null ? rptFieldSortUtil : getGroovyClassInstance(&quot;ReportFieldSortUtil&quot;);&#xA;                Map tempMap = map != null &amp;&amp; map.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(map) : null //sort Map Again&#xA;&#xA;                Iterator itAgain = tempMap.keySet().iterator();&#xA;                while (itAgain.hasNext()){&#xA;                    ufv = itAgain.next();&#xA;                    timeIn = tempMap.get(ufv)&#xA;                }&#xA;&#xA;            }//If Ends&#xA;&#xA;            if(ufv != null){&#xA;                mapDisplayLst.put(ufv,timeIn)&#xA;            }&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return ufv;&#xA;    }&#xA;&#xA;&#xA;    public HashMap populateLstDischUnit(UnitFacilityVisit ufv, String type)&#xA;    {&#xA;        HashMap map = new HashMap();&#xA;&#xA;        //Unit is Null&#xA;        if(ufv == null){&#xA;            map.put(&quot;type&quot;, type );&#xA;            return map;&#xA;        }&#xA;&#xA;        def unit = ufv.ufvUnit&#xA;        try&#xA;        {&#xA;            map.put(&quot;UnitNbr&quot;, unit.getFieldValue(&quot;unitId&quot;));&#xA;            map.put(&quot;PositionSlot&quot;, ufv.ufvArrivePosition.posSlot);&#xA;            map.put(&quot;OutBoundCarrierId&quot;, outBoundCarrierId);&#xA;            map.put(&quot;type&quot;, type );&#xA;            String strTimeInDate = &#x9;gvyEventUtil.formatDate(ufv.ufvTimeIn, timezone)&#xA;            String strTimeInTime = &#x9;gvyEventUtil.formatTime(ufv.ufvTimeIn, timezone)&#xA;            map.put(&quot;InTime&quot;, strTimeInTime);&#xA;            map.put(&quot;InTimeDate&quot;, strTimeInDate);&#xA;            println(&quot;PositionSlot=&quot;+ufv.ufvArrivePosition.posSlot+&quot; InTime=&quot;+strTimeInDate+&quot; ufv.ufvTimeIn=&quot;+ufv.ufvTimeIn)&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return map;&#xA;    }&#xA;&#xA;    public List findAllUnitsForVesVoy(Object vesVisit)&#xA;    {&#xA;        ArrayList vesVistUnitLists = new ArrayList();&#xA;        try{&#xA;            //Long cvGkey = vesVisit.getCvdCv().getCvGkey()&#xA;            //DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;).addDqPredicate(PredicateFactory.eq(UnitField.UFV_DECLARED_IB_CV, cvGkey)).addDqOrdering(Ordering.asc(UnitField.UFV_VISIT_STATE));&#xA;            def Id = vesVisit.getCvdCv().getCvId()&#xA;            println(&quot;Id ====&quot;+Id)&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;            if(&quot;DISCHARGE&quot;.equals(reportType)){&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, Id));&#xA;            }else if(&quot;LOAD&quot;.equals(reportType)){&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID, Id));&#xA;            }//A13&#xA;            //dq = dq.addDqPredicate(PredicateFactory.ne(UnitField.UNIT_CURRENT_UFV_VISIT_STATE, UnitVisitStateEnum.RETIRED)).dq.addDqPredicate(PredicateFactory.ne(UnitField.UNIT_CURRENT_UFV_VISIT_STATE, UnitVisitStateEnum.ADVISED));&#xA;            dq = dq.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY, UnitCategoryEnum.THROUGH)).addDqPredicate(PredicateFactory.ne(UnitField.UFV_FREIGHT_KIND, FreightKindEnum.MTY)).addDqOrdering(Ordering.asc(UnitField.UFV_VISIT_STATE));&#xA;            List vesVistUnits  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            vesVistUnitLists.addAll(vesVistUnits);&#xA;            println(&quot;vesVistUnitLists size is ===&quot;+vesVistUnitLists.size())&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return vesVistUnitLists&#xA;    }&#xA;&#xA;    //A11&#xA;    public String processDischCounts(Object vesVisit, String type)&#xA;    {&#xA;&#xA;        List onDeckList = new ArrayList();&#xA;        List belowDeckList = new ArrayList();&#xA;        String rptTitle = null;&#xA;        String vesselGkey = vesVisit.getCvdCv().getCvGkey();&#xA;&#xA;        HashSet positionSet = new HashSet();&#xA;        List robList = new ArrayList();&#xA;        List restowList = new ArrayList();&#xA;        List trailerList = new ArrayList();&#xA;        List totalDfvList = new ArrayList();&#xA;        StringBuffer buf = new StringBuffer();&#xA;        def id = vesVisit.getCvdCv().getCvId();&#xA;        def checkUnit = &quot;0000000000&quot;;&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;        dq = dq.addDqPredicate(PredicateFactory.ne(UnitField.UFV_VISIT_STATE,UnitVisitStateEnum.ADVISED)).addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S10_ADVISED)).addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S99_RETIRED));&#xA;        if(&quot;DISCHARGE&quot;.equals(type)){&#xA;            //dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, id));&#xA;            dq = dq.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY,UnitCategoryEnum.THROUGH))&#xA;&#x9;&#x9;&#x9;dq = dq.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_TYPE, &quot;VESSEL&quot;))&#xA;&#x9;&#x9;&#x9;dq = dq.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_GKEY, vesselGkey))&#xA;&#x9;&#x9;&#x9;dq = dq.addDqOrdering(Ordering.asc(UnitField.UFV_UNIT_ID));&#xA;            rptTitle = &quot;Discharge Audit Details&quot;;&#xA;        }else if(&quot;LOAD&quot;.equals(type)){&#xA;            dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID, id)).addDqPredicate(PredicateFactory.like(UnitField.UFV_POS_NAME,&quot;V%&quot;));&#xA;            rptTitle = &quot;Sail Audit Details&quot;;&#xA;        }&#xA;        dq = dq.addDqOrdering(Ordering.asc(UnitField.UFV_CATEGORY));&#xA;        List unitsList  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;        println(&quot;Load count is &quot;+unitsList.size());&#xA;        try{&#xA;            Iterator iter = unitsList.iterator();&#xA;            while(iter.hasNext()) {&#xA;                def ufv = iter.next();&#xA;                def unit = ufv.ufvUnit;&#xA;                def unitId = unit.getFieldValue(&quot;unitId&quot;)&#xA;                def equipType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;                def category =&#x9;unit.getUnitCategory();&#xA;                def deckPosition = null;&#xA;                def restow = unit.getFieldValue(&quot;unitActiveUfv.ufvRestowType&quot;);&#xA;                restow = restow != null ? restow.getKey() : ''&#xA;&#xA;                if(&quot;DISCHARGE&quot;.equals(type)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (unitId != checkUnit){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;checkUnit = unitId;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def EquipmentTypeClass = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;).getKey();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def transitState = ufv.ufvTransitState;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def transitStateKey = null;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (transitState != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;transitStateKey = transitState != null ? transitState.getKey() : ''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def tState = transitStateKey.split(&quot;_&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;transitStateKey = tState[1]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ((transitStateKey.equalsIgnoreCase(&quot;ECOUT&quot;) &amp;&amp; EquipmentTypeClass.equalsIgnoreCase(&quot;CHASSIS&quot;)) || equipType.startsWith(&quot;MG&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(unit.unitId+&quot;::&quot;+transitStateKey+&quot;::::&quot;+EquipmentTypeClass +&quot;::&quot;+equipType);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//check to exclude duplicate position for bundles and unitId does not have $&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (unitId!=null &amp;&amp; !unitId.contains(&quot;\$&quot;)) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;deckPosition = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString06&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;deckPosition is &quot;+deckPosition+&quot; for unit &quot;+unit.getFieldValue(&quot;unitId&quot;))&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//No Deck - Below Deck&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(&quot;OD&quot;.equals(deckPosition)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;onDeckList.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}else if(&quot;BD&quot;.equals(deckPosition)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;belowDeckList.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//ROB Restow and Trailer&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(UnitCategoryEnum.THROUGH.equals(category) &amp;&amp; &quot;RESTOW&quot;.equals(restow)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;restowList.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;robList.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}else if (UnitCategoryEnum.THROUGH.equals(category)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;robList.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}else if (&quot;RO&quot;.equals(deckPosition) || equipType.contains(&quot;B40&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;procTrailerCount(equipType);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}else{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;totalDfvList.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;                } else if (&quot;LOAD&quot;.equals(type)) {&#xA;                //check to exclude duplicate position for bundles and unitId does not have $&#xA;                    if (!positionSet.contains(ufv.getUfvLastKnownPosition()) &amp;&amp;&#xA;                            (unitId!=null &amp;&amp; !unitId.contains(&quot;\$&quot;))) {&#xA;&#xA;                            deckPosition = ufv.getUfvFlexString06()&#xA;                            //println(&quot;deckPosition is &quot;+deckPosition+&quot; for unit &quot;+unit.getFieldValue(&quot;unitId&quot;))&#xA;&#xA;                            //No Deck - Below Deck&#xA;                            if(&quot;OD&quot;.equals(deckPosition)){&#xA;                                onDeckList.add(unit);&#xA;                            }else if(&quot;BD&quot;.equals(deckPosition)){&#xA;                                belowDeckList.add(unit);&#xA;                            }&#xA;&#xA;&#xA;                            //ROB Restow and Trailer&#xA;                            if(UnitCategoryEnum.THROUGH.equals(category) &amp;&amp; &quot;RESTOW&quot;.equals(restow)){&#xA;                                restowList.add(unit);&#xA;                                robList.add(unit);&#xA;                            }else if (UnitCategoryEnum.THROUGH.equals(category)){&#xA;                                robList.add(unit);&#xA;                            }else if (&quot;RO&quot;.equals(deckPosition) || equipType.contains(&quot;B40&quot;)){&#xA;                                procTrailerCount(equipType);&#xA;                            }else{&#xA;                                totalDfvList.add(unit);&#xA;                            }&#xA;                    }&#xA;                    //else {&#xA;                    //println(&quot;UFV::&quot;+ufv+&quot; (&quot;+ufv.getUfvLastKnownPosition()+&quot;)&quot;);&#xA;                    //}&#xA;&#xA;                    positionSet.add(ufv.getUfvLastKnownPosition());&#xA;&#xA;                }&#xA;            }&#xA;&#xA;            rptFieldSortUtil = rptFieldSortUtil != null ? rptFieldSortUtil : inj.getGroovyClassInstance(&quot;ReportFieldSortUtil&quot;);&#xA;            mapTrailer = rptFieldSortUtil.sortMapByKey(mapTrailer);&#xA;&#xA;            // buf.append(&quot;   &quot;+rptTitle+&quot;  &quot;+eol);&#xA;            // buf.append(&quot;----------------------------&quot;+eol);&#xA;            buf.append(&quot;&quot;+eol);&#xA;            buf.append(&quot;Container : &quot;+totalDfvList.size()+eol);&#xA;            buf.append(&quot;ROB       : &quot;+robList.size()+eol);&#xA;            buf.append(&quot;Restow    : &quot;+restowList.size()+eol);&#xA;            buf.append(&quot;Trailer   : &quot;+trailerCnt+eol);&#xA;            Iterator it = mapTrailer.keySet().iterator(); //A21&#xA;            while (it.hasNext()){&#xA;                def equipSize = it.next();&#xA;                def eqCount = mapTrailer.get(equipSize)&#xA;                buf.append(&quot;  &quot;+(equipSize.length()== 3 ? equipSize+&quot; &quot; : equipSize )+&quot; : &quot;+eqCount+eol);&#xA;            }&#xA;            // buf.append(&quot;----------------------------&quot;+eol);&#xA;            //buf.append(eol+eol+eol+eol)&#xA;            //buf.append(&quot;    Deck Position Count  &quot;+eol);&#xA;            //buf.append(&quot;----------------------------&quot;+eol);&#xA;            //buf.append(&quot;OnDeck      : &quot;+onDeckList.size()+eol);&#xA;            //buf.append(&quot;BelowDeck   : &quot;+belowDeckList.size()+eol);&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;&#xA;        return buf.toString();&#xA;    }&#xA;    //A2- Ends&#xA;&#xA;    // A3 Email Confirmation Starts&#xA;&#xA;    public void discAuditConfirmationEmail(event, String type){&#xA;        inj = inj==null ? new GroovyInjectionBase(): inj;&#xA;        def sub = &quot;&quot;;  def acctSub = &quot;&quot;;&#xA;        def visit = event.getEntity();&#xA;        List acctListRpt = null;&#xA;        def reportDesignName = null;&#xA;        /*try {&#xA;&#xA;        def formatter = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#x9;&#x9;formatter.setTimeZone(TimeZone.getTimeZone(&quot;HST&quot;));&#xA;&#x9;&#x9;String vesselATA = formatter.format(visit.getFieldValue(&quot;cvdCv.cvATA&quot;));&#xA;&#x9;&#x9;String vesselATD = formatter.format(visit.getFieldValue(&quot;cvdCv.cvATD&quot;));&#xA;&#x9;&#x9;log(vesselATA+&quot;::&quot;+vesselATD);&#xA;&#x9;&#x9;DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#x9;&#x9;vesselATADate = df.parse(vesselATA);&#xA;&#x9;&#x9;vesselATDDate = df.parse(vesselATD);&#xA;&#x9;} catch (Exception e){&#xA;&#x9;println(&quot;ERRORO_WHILE_ATD_ATA ::&quot;+ e)&#xA;&#x9;}*/&#xA;&#xA;        try{&#xA;            def doer = event.event.evntAppliedBy   //Gets Doer&#xA;            doer = doer.replace('user:','')&#xA;            def carrierId = visit.cvdCv&#xA;            def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;)  // calls Email call&#xA;            if(&quot;DISCHARGE&quot;.equals(type)){&#xA;                sub = &quot;Audit Discharge for &quot;+carrierId+&quot; Pau.&quot;;    // Compose Subject String&#xA;                acctSub = &quot;Accounting Discharge Total Counts for &quot;+carrierId;&#xA;            }else if(&quot;LOAD&quot;.equals(type)){&#xA;                sub = &quot; &quot;+carrierId+&quot; Sailed.&quot;;   // Compose Subject String&#xA;                acctSub = &quot;Accounting Load Back Total Counts for &quot;+carrierId;&#xA;            }&#xA;&#xA;            def body = processDischCounts(visit,type);&#xA;&#xA;            acctListRpt = processAccoutingRpt(visit,type);&#xA;            println(&quot; acctListRpt.size() === &quot;+acctListRpt.size() )&#xA;            //  emailSender.custSendEmail(acctEmail,acctSub,body+eol); //Accounting&#xA;            if (acctListRpt!=null &amp;&amp; acctListRpt.size() &gt; 0)&#xA;            {&#xA;                JRDataSource ds = new JRMapCollectionDataSource(acctListRpt);&#xA;                // get report runner handle&#xA;                def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#xA;                //Set report parameters&#xA;                HashMap parameters = new HashMap();&#xA;                parameters.put(&quot;outboundVesVoy&quot;,visit.getCvdCv().getCvId());&#xA;                parameters.put(&quot;Date&quot;,new Date());&#xA;                // call report design of rehandle containers not loaded back to vessel report.&#xA;                if (&quot;LOAD&quot;.equals(type))&#xA;                {&#xA;                    reportDesignName = &quot;ACCT AUDIT LOAD REPORT&quot;;&#xA;                } else if (&quot;DISCHARGE&quot;.equals(type))&#xA;                {&#xA;                    reportDesignName = &quot;ACCT AUDIT DISCH REPORT&quot;;&#xA;                }&#xA;                // Emailing report&#xA;                reportRunner.emailExcelReport(ds, parameters,reportDesignName ,acctEmail,acctSub,body+eol);&#xA;            }&#xA;&#xA;&#xA;            if (&quot;LOAD&quot;.equals(type) &amp;&amp; visit.getCvdCv().getCvId().startsWith(&quot;YB&quot;)) {&#xA;                return null;&#xA;            }&#xA;            println(&quot; doer is &quot;+doer)&#xA;            if (!&quot;-jms-&quot;.equals(doer)) {&#xA;                if (&quot;LOAD&quot;.equals(type)) {&#xA;                    //emailTo = emailTo+&quot;;1aktosdevteam@matson.com&quot;;&#xA;                    emailTo = emailTo+&quot;;1TOSDevTeamHONprod@gmail.com&quot;;&#xA;                }&#xA;                emailSender.custSendEmail(emailTo,sub,&quot;Action done by &quot;+doer);  //executes Email Procedure //A18&#xA;            }&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;&#xA;    }//A3- Ends&#xA;&#xA;&#xA;    public void procTrailerCount(String wholeEquipType)&#xA;    {&#xA;        //def gvyStrUtility =  getGroovyClassInstance(&quot;GvyStringUtility&quot;)&#xA;        //def equipType = gvyStrUtility.getOnlyNumerics(wholeEquipType);&#xA;        //def equipType = wholeEquipType.substring(1,3);&#xA;        if(mapTrailer.get(wholeEquipType) != null){&#xA;            Integer count = (Integer)mapTrailer.get(wholeEquipType);&#xA;            int tempCnt = count.intValue();&#xA;            tempCnt = tempCnt+1;&#xA;            mapTrailer.put(wholeEquipType,tempCnt);&#xA;        }else{&#xA;            mapTrailer.put(wholeEquipType,new Integer(1));&#xA;        }&#xA;        trailerCnt = trailerCnt+1;&#xA;    }//Method Ends&#xA;&#xA;    public List processAccoutingRpt(Object vesVisit, String type)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;println(&quot;Calling processAccoutingRpt for &quot;+type);&#xA;&#x9;&#x9;&#x9;List resultAcctList = new ArrayList();&#xA;&#x9;&#x9;&#x9;HashSet positionSet = new HashSet();&#xA;&#x9;&#x9;&#x9;HashMap outputMap = null;&#xA;&#x9;&#x9;&#x9;List acctList = null;&#xA;&#x9;&#x9;&#x9;vesselForDischId = vesVisit.getCvdCv().getCvId();&#xA;&#x9;&#x9;&#x9;def Id = vesVisit.getCvdCv().getCvId();&#xA;&#x9;&#x9;&#x9;String vesselGkey = vesVisit.getCvdCv().getCvGkey();&#xA;&#xA;&#x9;&#x9;&#x9;if (&quot;LOAD&quot;.equals(type))&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_VISIT_STATE,UnitVisitStateEnum.ADVISED))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S10_ADVISED))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S99_RETIRED))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY,UnitCategoryEnum.THROUGH))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID, Id))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_POS_NAME,&quot;V%&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqOrdering(Ordering.asc(UnitField.UFV_CMDTY));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;acctList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;===acctList size===&quot;+acctList.size());&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iter = acctList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Unit unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unitId = unit.getFieldValue(&quot;unitId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//check to exclude duplicate position for bundles and unitId does not have $&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (!positionSet.contains(ufv.getUfvLastKnownPosition()) &amp;&amp; (unitId!=null &amp;&amp; !unitId.contains(&quot;\$&quot;))) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outputMap = populateAcctListByType(ufv,type);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;resultAcctList.add(outputMap);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;//else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;UFV::&quot;+ufv);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;positionSet.add(ufv.getUfvLastKnownPosition());&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;} else if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;&#x9;&#x9;&#x9;&#x9;log(&quot;&lt;&lt;&lt;&lt;TESTING DISCHARGE REPORT ID&gt;&gt;&gt;&gt;&quot;+Id+&quot;:::&quot;+vesselGkey);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY,UnitCategoryEnum.THROUGH))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY,UnitCategoryEnum.TRANSSHIP))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_TYPE, &quot;VESSEL&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_GKEY, vesselGkey))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S10_ADVISED))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S99_RETIRED))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S20_INBOUND))&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;.addDqOrdering(Ordering.asc(UnitField.UFV_CMDTY));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;acctList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;DomainQuery:::&quot;+dq);&#xA;&#x9;&#x9;&#x9;&#x9;log(&quot;&lt;&lt;&lt;&lt;ACCTLIST SIZE IS &gt;&gt;&gt;&gt;&quot;+acctList.size());&#xA;&#x9;&#x9;&#x9;&#x9;def checkUnit = &quot;0000000000&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iter = acctList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = iter.next()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unitId = unit.unitId;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (unitId != checkUnit){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;checkUnit = unitId;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def EquipmentTypeClass = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;).getKey();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def transitState = ufv.ufvTransitState;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def transitStateKey = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def equipType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (transitState != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;transitStateKey = transitState != null ? transitState.getKey() : ''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def tState = transitStateKey.split(&quot;_&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;transitStateKey = tState[1]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ((EquipmentTypeClass.equalsIgnoreCase(&quot;CHASSIS&quot;)) || equipType.startsWith(&quot;MG&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;log(unit.unitId+&quot;::&quot;+transitStateKey+&quot;::::&quot;+EquipmentTypeClass +&quot;::&quot;+equipType);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;outputMap = populateAcctListByType(ufv,type)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultAcctList.add(outputMap)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return resultAcctList;&#xA;    }&#xA;&#xA;    public HashMap populateAcctListByType(UnitFacilityVisit ufv, String type) {&#xA;&#xA;&#x9;        HashMap resMap = new HashMap();&#xA;&#x9;        def unit = ufv.ufvUnit&#xA;&#x9;        UnitEquipment chasEquip = unit.getUnitCarriageUe();&#xA;&#x9;        def freightkindout = unit.getFieldValue(&quot;unitFreightKind&quot;).getKey();&#xA;&#x9;        def attachedUnit = unit.getFieldValue(&quot;unitAttachedEquipIds&quot;)&#xA;&#x9;        //println(&quot;chasEquip   &quot;+chasEquip)&#xA;&#x9;        if (&quot;FCL&quot;.equals(freightkindout))&#xA;&#x9;        {&#xA;&#x9;            freightkindout = &quot;F&quot;;&#xA;&#x9;        } else if (&quot;MTY&quot;.equals(freightkindout))&#xA;&#x9;        {&#xA;&#x9;            freightkindout = &quot;E&quot;;&#xA;&#x9;        }&#xA;&#xA;&#x9;        resMap.put(&quot;Commodity&quot;,unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;));&#xA;&#x9;        resMap.put(&quot;EquipmentTypeClass&quot;,unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;).getKey());&#xA;&#x9;        resMap.put(&quot;EquipmentType&quot;,unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;))&#xA;&#x9;        resMap.put(&quot;FreightKind&quot;,freightkindout)&#xA;&#x9;        resMap.put(&quot;UnitNbr&quot;,unit.getFieldValue(&quot;unitId&quot;))&#xA;&#x9;        if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;&#x9;&#x9;&#x9;&#x9;def commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;commodity = commodity != null &amp;&amp; commodity == &quot;AUTO&quot; ? &quot;AUTO&quot; : &quot; &quot;;&#xA;&#x9;&#x9;&#x9;&#x9;resMap.put(&quot;Commodity&quot;,commodity);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;        if (attachedUnit != null &amp;&amp; chasEquip !=null)&#xA;&#x9;        {&#xA;&#x9;            resMap.put(&quot;AttachedUnits&quot;,unit.getFieldValue(&quot;unitAttachedEquipIds&quot;))&#xA;&#x9;        } else if (attachedUnit != null &amp;&amp; chasEquip == null)&#xA;&#x9;        {&#xA;&#x9;            resMap.put(&quot;AttachedUnits&quot;,null)&#xA;&#x9;        }&#xA;&#xA;&#x9;        if (&quot;LOAD&quot;.equals(type))&#xA;&#x9;        {&#xA;&#x9;            resMap.put(&quot;OutboundCarrierATA&quot;,ufv.getFieldValue(&quot;ufvActualObCv.cvATA&quot;))&#xA;&#x9;            resMap.put(&quot;OutboundCarrierATD&quot;,ufv.getFieldValue(&quot;ufvActualObCv.cvATD&quot;))&#xA;&#x9;            resMap.put(&quot;OutboundCarrierId&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;))&#xA;&#x9;            resMap.put(&quot;Destination&quot;,unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;))&#xA;&#x9;            resMap.put(&quot;UfvFlexString06&quot;,ufv.getUfvFlexString06())&#xA;&#x9;        } else if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;&#x9;            resMap.put(&quot;InboundCarrierATA&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvATA&quot;))&#xA;&#x9;            resMap.put(&quot;InboundCarrierATD&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvATD&quot;))&#xA;&#x9;            //resMap.put(&quot;InboundCarrierATA&quot;,vesselATADate)&#xA;&#x9;            //resMap.put(&quot;InboundCarrierATD&quot;,vesselATDDate)&#xA;&#x9;            //resMap.put(&quot;OPL&quot;,unit.getFieldValue(&quot;unitRouting.rtgOPL.pointId&quot;))&#xA;&#x9;            //resMap.put(&quot;InboundCarrierId&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;))&#xA;&#x9;            resMap.put(&quot;InboundCarrierId&quot;,vesselForDischId)&#xA;&#x9;            if (!vesselForDischId.contains(&quot;ALE&quot;)){&#xA;&#x9;            &#x9;resMap.put(&quot;UfvFlexString06&quot;,unit.getFieldValue(&quot;AA&quot;))&#x9;&#xA;&#x9;            }&#xA;&#x9;            else {&#xA;&#x9;            &#x9;resMap.put(&quot;UfvFlexString06&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString06&quot;))&#xA;&#x9;&#x9;    }&#x9;            &#x9;&#xA;&#x9;        }&#xA;&#x9;        //println(&quot;Result map is &quot;+resMap);&#xA;&#x9;        return resMap;&#xA;    }&#xA;&#xA;}//class ends&#xA;" />
<digital-asset id="GvyCmisEventUnitPropertyUpdate" short-description="GvyCmisEventUnitPropertyUpdate : General Notice" is-pre-deployed="N" groovy-code="/*&#xA;* Sr   Date      Doer    Change&#xA;* A1   05/25/10  GR      UNIT_ROLL Not Posting HLP to ACETS&#xA;* A2   06/08/10  GR      Consignee Change Generates DAS messages&#xA;* A3   08/19/10  GR      Acets Consignee Change Generates DAS messages&#xA;* A4   10/03/10  GR      Setting Acutal vessel,voyage and leg value for UNIT_ROLL upto acets.&#xA;* A5   10/27/10  GR      Added Condt not to pass DAS messages on UNIT_ROLL as unit roll&#xA;                         only occures on export units in N4&#xA;* A6   11/15/10  GR      Added Thread Sleep Between ULK and LNK for Posting order.&#xA;* A7   04/14/11  GR      Remove Bkg check on UNIT_ROLL Event&#xA;* A8   02/14/12  GR      Adding Event Processing Check Methods&#xA;* A9   02/27/14  RI&#x9;&#x9; Added method to capture Integration error&#xA;*/&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.atoms.ScopeEnum&#xA;import com.navis.argo.portal.context.ArgoUserContextProvider&#xA;import com.navis.argo.webservice.types.v1_0.ScopeCoordinateIdsWsType&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.context.IUserContextProvider&#xA;import com.navis.framework.portal.context.PortalApplicationContext&#xA;import com.navis.framework.util.scope.ScopeCoordinates&#xA;import com.navis.inventory.business.units.Unit&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.argo.business.model.*&#xA;&#xA;public class GvyCmisEventUnitPropertyUpdate&#xA;{&#xA;    private static final Logger LOGGER = Logger.getLogger(GvyCmisEventUnitPropertyUpdate.class);&#xA;    def prevAvailDt;&#xA;    def prevDetentionDt;&#xA;    def unit;&#xA;    boolean processAcetsMsg;&#xA;    boolean reportProcessing = false;&#xA;&#xA;    public void processUnitPropertyUpdate(Object event,Object api) {&#xA;        processUnitPropertyUpdate(event, api, Boolean.FALSE);&#xA;    }&#xA;    public void processUnitPropertyUpdate(Object event,Object api, boolean isAlwaysSendIGT)&#xA;    {&#xA;        boolean update = false, blockUpdtForIngate = false, procCmisFeed = false&#xA;&#xA;        def gvyEventUtil = api.getGroovyClassInstance(&quot;GvyEventUtil&quot;)&#xA;        String eventType =  event.event.eventTypeId&#xA;        unit = event.getEntity()&#xA;        println(&quot;:::::::::::processUnitPropertyUpdate :: Start ::::::::::&quot;);&#xA;        try&#xA;        {&#xA;            blockUpdtForIngate= gvyEventUtil.holdEventProcessing(event, 'UNIT_IN_GATE', 8)&#xA;            if(!blockUpdtForIngate)&#xA;            {&#xA;                def gvyCargoEdit = api.getGroovyClassInstance(&quot;GvyCmisUnitCargoEdit&quot;);&#xA;                def isPodUpdated = false&#xA;                if(eventType.equals('UNIT_PROPERTY_UPDATE')){ //A1&#xA;                    //Auto Roll POD if Destiantion Changed&#xA;                    gvyCargoEdit.autoRollPod(event,unit,api,gvyEventUtil);&#xA;                    isPodUpdated = gvyCargoEdit.isPodUpdated()&#xA;                }&#xA;&#xA;                if(isPodUpdated){&#xA;                    def gvyEvntcargoEdit = api.getGroovyClassInstance(&quot;GvyCmisEventUnitCargoEdit&quot;)&#xA;                    gvyEvntcargoEdit.processUnitPropertyUpdate(event,api,gvyCargoEdit)&#xA;                    reportProcessing = true;&#xA;                }else{&#xA;                    //1-Cargo Status Report Processing&#xA;                    reportProcessing = processCargoStatReport(event,gvyEventUtil,api)&#xA;                    //2-Get Previous Avail and Detntion Dt&#xA;                    update = setAvailDetnDate(event,api)&#xA;                    //3-Create Cmis Feed for Msg from Acets &amp; UI Transaction&#xA;                    println(&quot;:::::::::::Good till here::::::::::&quot;);&#xA;                    procCmisFeed = processCmisFeed(gvyEventUtil,api,update,event,isAlwaysSendIGT);&#xA;                }&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        println(&quot;AcetsMsg:&quot;+processAcetsMsg+&quot;   BlockIngate:&quot;+blockUpdtForIngate+&quot;   Report:&quot;+reportProcessing+&quot;     AvailDate:&quot;+update+&quot;   ProcCmisFeed:&quot;+procCmisFeed)&#xA;    }//Method processUnitPropertyUpdate Ends&#xA;&#xA;&#xA;    //1-Cargo Status Report Processing&#xA;    public boolean processCargoStatReport(Object event,Object gvyEventUtil,Object api)&#xA;    {&#xA;        boolean reportProcessing = false;&#xA;        def ret = null;&#xA;        try&#xA;        {&#xA;&#xA;            reportProcessing = gvyEventUtil.verfiyReportSnxProcessing(event)&#xA;            if(reportProcessing)&#xA;            {&#xA;                def cargoStatusGvy = api.getGroovyClassInstance(&quot;GvyUnitCargoStatus&quot;);&#xA;                ret = cargoStatusGvy.sendXml(&quot;CARGO_STATUS&quot;, event);&#xA;               // if(ret!=null &amp;&amp; !ret.toString().equalsIgnoreCase(&quot;NO FIELDS UPDATE - DO NOT GENERATE CS REPORT&quot;)) {&#xA;                    api.sendXml(ret)&#xA;              //  }&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;            String error = e;&#xA;            //A9&#xA;            if (error.contains(&quot;JMS&quot;) &amp;&amp; ret != null){&#xA;                println(&quot;Calling MatGetIntegrationError.createIntegrationError in CARGO_STATUS message&quot;);&#xA;                def inj = new GroovyInjectionBase();&#xA;                def unit = event.getEntity();&#xA;                String entity = &quot;Unit&quot;;&#xA;                def unitId = unit.getUnitId();&#xA;                def eventId = event.event.eventTypeId;&#xA;                def errDesc = eventId+&quot; Failed for &quot;+unitId;&#xA;&#xA;                inj.getGroovyClassInstance(&quot;MatGetIntegrationError&quot;).createIntegrationError(error,entity,unitId,eventId,errDesc,ret);&#xA;            }&#xA;        }&#xA;        return reportProcessing&#xA;    }//Method processCargoStatReport Ends&#xA;&#xA;    //2-Get Previous Avail and Detntion Dt&#xA;    public boolean setAvailDetnDate(Object event,Object api)&#xA;    {&#xA;        boolean update = false;&#xA;        try&#xA;        {&#xA;            //3- Set Avail Date&#xA;            def availLookup = api.getGroovyClassInstance(&quot;GvyAvailDate&quot;);&#xA;            update =   availLookup.setAvailDate(unit, event);&#xA;            api.log(&quot;----------&gt;Avail Update &quot;+update);&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return update&#xA;    }// Method setAvailDetnDate Ends&#xA;&#xA;    public boolean processCmisFeed(Object gvyEventUtil,Object api, boolean update,Object event) {&#xA;        processCmisFeed(gvyEventUtil, api, update, event, Boolean.FALSE);&#xA;    }&#xA;&#xA;    public boolean processCmisFeed(Object gvyEventUtil,Object api, boolean update,Object event, boolean isAlwaysSendIGT)&#xA;    {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        boolean processCmisFeed = false&#xA;        def gvyEventObj = event.getEvent()&#xA;        String eventType =  gvyEventObj.getEventTypeId()&#xA;        def doer = gvyEventObj.getEvntAppliedBy()&#xA;        try&#xA;        {&#xA;            //4-Create Cmis Feed for Msg from Acets &amp; UI Transaction&#xA;            processCmisFeed  = gvyEventUtil.verfiyCmisFeedProcessing(event)&#xA;            LOGGER.info(&quot;processCmisFeed : &quot;+processCmisFeed);&#xA;            processAcetsMsg = gvyEventUtil.acetsMesssageFilter(event)&#xA;            LOGGER.info(&quot;processAcetsMsg : &quot;+processAcetsMsg);&#xA;            def detentionDateChng = gvyEventUtil.wasFieldChanged(event,'ufvFlexDate03')&#xA;            def consigneeChng = gvyEventUtil.wasFieldChanged(event, 'gdsConsigneeAsString')&#xA;            //Print Status Checks&#xA;            if(processCmisFeed &amp;&amp; !processAcetsMsg)&#xA;            {&#xA;                //1. N4 TO CMIS data processing&#xA;                def unitDetails = api.getGroovyClassInstance(&quot;GvyCmisDataProcessor&quot;)&#xA;                def unitDtl = unitDetails.doIt(event)&#xA;                LOGGER.info(&quot;Event Type : &quot;+eventType);&#xA;                //2. SERVICE MSG CHECK&#xA;                if(eventType.equals('UNIT_ROLL'))&#xA;                {&#xA;                    LOGGER.info(&quot;DOER : &quot;+doer);&#xA;                    if(!doer.contains('ACETS')){ //A07&#xA;                        def prevBooking  = gvyEventUtil.getPreviousPropertyAsString(event, &quot;eqboNbr&quot;)&#xA;                        def gvyCmisUtil = api.getGroovyClassInstance(&quot;GvyCmisUtil&quot;)&#xA;                        //A4 -Starts&#xA;                        def vesselCd =  unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdVessel.vesId&quot;);&#xA;                        LOGGER.info(&quot;ILB-ISSUE-VESSEL CODE&quot;+vesselCd);&#xA;                        def vesVoyageNbr =  unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdObVygNbr&quot;)&#xA;                        LOGGER.info(&quot;vesVoyageNbr: &quot;+vesVoyageNbr);&#xA;                        def gvyUnitReceive = api.getGroovyClassInstance(&quot;GvyCmisEventUnitReceive&quot;);&#xA;                        unitDtl = gvyUnitReceive.processUnitRecieveFull(unitDtl,gvyCmisUtil,vesselCd,vesVoyageNbr,unit)&#xA;                        //A4 - Ends&#xA;                        LOGGER.info(&quot;unitDtl : &quot;+unitDtl);&#xA;                        def xmlGvyAcetsStr = gvyCmisUtil.eventSpecificFieldValue(unitDtl,&quot;locationStallConfig=&quot;,&quot;AO&quot;)&#xA;                        def xmlGvyUlkStr = gvyCmisUtil.eventSpecificFieldValue(xmlGvyAcetsStr,&quot;bookingNumber=&quot;,&quot;null&quot;)&#xA;                        LOGGER.info(&quot;xmlGvyUlkStr : &quot;+xmlGvyUlkStr);&#xA;                        /************************* */&#xA;                      //  UserContext uc = ContextHelper.getThreadUserContext();&#xA;&#xA;//&#xA;                     //   N4EntityScoper _scoper = (N4EntityScoper) Roastery.getBeanFactory().getBean(N4EntityScoper.BEAN_ID);&#xA;                    //    ArgoUserContextProvider _contextProvider = (ArgoUserContextProvider) PortalApplicationContext.getBean(IUserContextProvider.BEAN_ID);&#xA;                       // _scoper.getScopeCoordinates(ScopeEnum.OPERATOR, ContextHelper.getThreadOperator().getOprName());&#xA;                      //  _scoper(ScopeEnum.COMPLEX, ContextHelper.getThreadComplex().getCpxName());&#xA;                       // _scoper.getScopeCoordinates(ScopeEnum.FACILITY, ContextHelper.getthre));&#xA;                    //    ScopeCoordinates scopeCoordinates = _scoper.getScopeCoordinates(ScopeEnum.YARD, unit.getLocFacility().getActiveYard().getYrdGkey());&#xA;&#xA;//_scoper.buildScopeCoordinates(ContextHelper.getThreadOperator(),&#xA;    //    ContextHelper.getThreadComplex(),ContextHelper.getThreadFacility(),ContextHelper.getThreadYard());&#xA;&#xA;                      //  println(&quot;uc--&gt;&quot;+uc +&quot;uc.getScopeCoordinate() &quot;+uc.getScopeCoordinate().toString() +&quot; metaPropertyValues &quot;+uc.metaPropertyValues.toString() +&quot; brod sc &quot;+uc.getBroadestAllowedScope().toString());&#xA;                       // UserContext newUserContext = _contextProvider.createUserContext(uc.getUserKey(), uc.getUserId(), scopeCoordinates);&#xA;                        //set security session id for the user&#xA;                       // newUserContext.setSecuritySessionId(uc.getSecuritySessionId());&#xA;&#xA;                        /************************* */&#xA;&#xA;&#xA;&#xA;                        gvyCmisUtil.postMsgForAction(xmlGvyUlkStr,api,'ULK')&#xA;                        Thread.sleep(2000); //A6&#xA;                        gvyCmisUtil.postMsgForAction(xmlGvyAcetsStr,api,'LNK')&#xA;                    }&#xA;                    //SRV MSG&#xA;                    LOGGER.info(&quot;Calling GvyCmisSrvMsgProcessor.processServiceMessage with alwaysIGT : &quot;+isAlwaysSendIGT);&#xA;                    def gvySrvObj = api.getGroovyClassInstance(&quot;GvyCmisSrvMsgProcessor&quot;);&#xA;                    gvySrvObj.processServiceMessage(unitDtl,event,api,isAlwaysSendIGT);&#xA;                } // UnitRoll IF Ends&#xA;&#xA;                //3. Detention Msg Check&#xA;                boolean detnMsg = false  //A3&#xA;                if(!eventType.equals('UNIT_ROLL') &amp;&amp; update || detentionDateChng || consigneeChng)&#xA;                {&#xA;                    def gvyDentObj = api.getGroovyClassInstance(&quot;GvyCmisDetentionMsgProcess&quot;);&#xA;                    detnMsg = gvyDentObj.detentionProcess(unitDtl,event,api)&#xA;                }&#xA;                def gvyEvntUpdate = api.getGroovyClassInstance(&quot;GvyCmisUnitPropertyUpdate&quot;);&#xA;                def unitUpdateXml =  gvyEvntUpdate.unitUpdateProcess(unitDtl,event,api,detnMsg)&#xA;&#xA;                //4. MSG For UNIT_RECTIFY&#xA;                if(eventType.equals('UNIT_RECTIFY'))&#xA;                {&#xA;                    def gvyRectifyObj = api.getGroovyClassInstance(&quot;GvyCmisUnitRectify&quot;);&#xA;                    gvyRectifyObj.processRectify(unitDtl,event,api)&#xA;                }&#xA;            }//ProcessCmisFeed  IF Ends - ELSE IF TO PROCESS DAS TRANSACTION FOR CONSIGNEE CHANGE&#xA;            else if ((update || detentionDateChng || consigneeChng) &amp;&amp; processAcetsMsg){&#xA;                // N4 TO CMIS data processing&#xA;                def unitDetails = api.getGroovyClassInstance(&quot;GvyCmisDataProcessor&quot;)&#xA;                def unitDtl = unitDetails.doIt(event)&#xA;                //Detention Msg Check&#xA;                def gvyDentObj = api.getGroovyClassInstance(&quot;GvyCmisDetentionMsgProcess&quot;);&#xA;                gvyDentObj.detentionProcess(unitDtl,event,api)&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return processCmisFeed&#xA;    }//Method processCmisFeed ends&#xA;&#xA;    public boolean isCargoNoticeSent(){&#xA;        return reportProcessing;&#xA;    }&#xA;&#xA;    //A8 - Block Unit Property Processing triggered by internal custom events&#xA;    public boolean isCustomEvent(Object event, Object gvyEventUtil){&#xA;        boolean blockForNonBuiltInEvnts = false&#xA;        blockForNonBuiltInEvnts = gvyEventUtil.holdEventProcessing(event, 'CARGO_EDIT', 3)&#xA;        blockForNonBuiltInEvnts = blockForNonBuiltInEvnts ? blockForNonBuiltInEvnts : gvyEventUtil.holdEventProcessing(event, 'REVIEW_FOR_STOW', 3)&#xA;        return blockForNonBuiltInEvnts;&#xA;    }&#xA;&#xA;    //A8 -Block Unit Property processing for newves execution event&#xA;    public boolean suppressForNewves(Object event, Object gvyEventUtil){&#xA;        boolean isNewvesEvnt = gvyEventUtil.newVesCheck(event)&#xA;        boolean newvesSnx = gvyEventUtil.holdEventProcessing(event, 'UNIT_SNX_UPDATE', 60)&#xA;        boolean suppressEvnt = false&#xA;        if(isNewvesEvnt &amp;&amp; newvesSnx){&#xA;            suppressEvnt = true&#xA;        }&#xA;        return suppressEvnt;&#xA;    }&#xA;&#xA;    public void setDetentionDTDFields(Object event, Object unit, Object gvyEventUtil, Object api){&#xA;        //05/24/2010 - Set Misc3 in Temp field for DTD&#xA;        if(event.event.evntAppliedBy.contains('jms') || event.event.evntAppliedBy.contains('-snx-')) //Loop-1 Starts&#xA;        {&#xA;            def flexDtl = api.getGroovyClassInstance(&quot;GvyCmisFlexFieldDetail&quot;);&#xA;            def misc3 = flexDtl.getMisc3(unit, gvyEventUtil)&#xA;&#xA;            def shipmentDetails = api.getGroovyClassInstance(&quot;GvyCmisShipmentDetail&quot;)&#xA;            def availDate= unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate02&quot;)&#xA;            def lastfreeDay = unit.getFieldValue(&quot;unitActiveUfv.ufvCalculatedLastFreeDay&quot;)&#xA;            lastfreeDay =  lastfreeDay != null ? lastfreeDay.replace('!','') : lastfreeDay&#xA;            lastfreeDay = shipmentDetails.getlastFreeDate(availDate, lastfreeDay, api)&#xA;/*&#xA;&#x9;  if(misc3 != null &amp;&amp; misc3.length() &gt; 0){&#xA;&#x9;&#x9;unit.setUnitSealNbr4(misc3)&#xA;&#x9;   }&#xA;&#x9;   if(lastfreeDay != null &amp;&amp; lastfreeDay.length() &gt; 0){&#xA;&#x9;&#x9;unit.setUnitSealNbr3(lastfreeDay)&#xA;&#x9;   } */&#xA;        }//Loop-1 Ends&#xA;&#xA;    }//Method Ends&#xA;&#xA;}// Class Ends" />
<digital-asset id="GvyAvailDate" short-description="GvyAvailDate" is-pre-deployed="N" groovy-code="/*&#xA;**********************************************************************&#xA;* Srno    Date        Changer&#x9;         Change Description&#xA;* A1      02/03/09    Glenn Raposo       EditFlag null check&#xA;* A2      02/06/09&#x9;  Steven Bauer&#x9;&#x9; Change conditions to remove avail date&#xA;* A3      01/12/11    Glenn Raposo       Substract One day from  Method&#xA;                                         addBusinessDate, addCalendarDate&#xA;* A4      09/02/12    Glenn Raposo       Changed Code for TOS2.1 Upgrade issue&#xA;                                         Replaces AppCalendarUtil to ArgoCalendarUtil since navis team chaged code&#xA;* A5      29/02/12    Glenn Raposo       Added Method for NIS Coding Detention&#xA;* A6      03/20/12    Glenn Raposo       YB barge recal change&#xA;* A7      04/04/12    Glenn Raposo       Gopals Change to fix the Detention Date cal on Weekends&#xA;* A8      12/21/12    Lisa Crouch        Replaced the isReefer check with RfrType&#xA;* A9      07-24-13    Karthik Rajendran  Remove Line Operator check for setting Avail Date to allow Client Vessels&#xA;* A10     01-23-14    Raghu Iyer         Added setAvailDateClient to update avail date for client vessel units&#xA;**********************************************************************&#xA;*/&#xA;&#xA;import com.navis.argo.business.atoms.EquipRfrTypeEnum;&#xA;import com.navis.argo.business.model.CarrierVisit;&#xA;import com.navis.inventory.business.api.*;&#xA;import com.navis.inventory.business.units.*;&#xA;import com.navis.argo.business.atoms.LocTypeEnum;&#xA;import com.navis.framework.configuration.calendar.AppCalendarUtil;&#xA;import com.navis.framework.configuration.calendar.AppCalendarEventType;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.argo.business.reference.RoutingPoint;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.argo.business.atoms.BizRoleEnum;&#xA;&#xA;import com.navis.argo.ContextHelper;&#xA;import java.util.TimeZone;&#xA;import java.util.Calendar;&#xA;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.argo.ArgoRefField;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.inventory.InventoryField;&#xA;import java.util.List;&#xA;&#xA;import com.navis.argo.business.calendar.ArgoCalendarUtil;&#xA;import com.navis.argo.business.calendar.ArgoCalendarEventType;&#xA;import com.navis.argo.business.calendar.ArgoCalendar;&#xA;import com.navis.argo.business.atoms.CalendarTypeEnum;&#xA;&#xA;/** Change History&#xA; * A1 - SKB 01/21/09 Changed manual update from V to X.&#xA; *                  Also changed logic for updating det and last free&#xA; * A2 - SKB 02/06/09 Changed logic for deletion.&#xA; */&#xA;//A4 - 02/09/12 - With the TOS2.1 Upgrade navis team split the Calendar util from Framework package and Argo Package&#xA;// - causing our 1.6 code to refer to the old table (AppCalendarEvent) to new table (ArgoCalendarEvent)&#xA;public class GvyAvailDate extends GroovyInjectionBase {&#xA;&#xA;/*private static AppCalendarEventType[] exemptTypes = null;&#xA;&#xA;static {&#xA;&#x9;exemptTypes = new AppCalendarEventType[2];&#xA;&#x9;exemptTypes[0] = AppCalendarEventType.findOrCreateAppCalendarEventType(&quot;EXEMPT_DAY&quot;);&#xA;    exemptTypes[1] = AppCalendarEventType.findOrCreateAppCalendarEventType(&quot;GRATIS_DAY&quot;);&#xA;}*/&#xA;&#xA;  private static ArgoCalendarEventType[] exemptTypes = null;&#xA;&#xA;  static {&#xA;    exemptTypes = new ArgoCalendarEventType[2];&#xA;    exemptTypes[0] = ArgoCalendarEventType.findOrCreateArgoCalendarEventType(&quot;EXEMPT_DAY&quot;);&#xA;    exemptTypes[1] = ArgoCalendarEventType.findOrCreateArgoCalendarEventType(&quot;GRATIS_DAY&quot;);&#xA;  }&#xA;&#xA;&#xA;&#xA;  public boolean setAvailDate(Object unit, Object event) {&#xA;&#x9;   println(&quot;:::::::inside setAvailDate:::::&quot;);&#xA;       boolean update = false;&#xA;&#x9;   update =  setAvailDateOnUnit(unit, event, null);&#xA;&#x9;   return update&#xA;  }&#xA;&#xA;  public boolean setAvailDateClient(Object unit, Object event) {&#xA;&#x9;  println(&quot;:::::::inside setAvailDateClient:::::&quot;);&#xA;        if (event != null) {&#xA;          ContextHelper.setThreadExternalUser(event.event.evntAppliedBy);&#xA;        }&#xA;&#xA;        def editFlag = unit.getUnitFlexString11();&#xA;        boolean update = false;&#xA;&#xA;        def previousDest = null;&#xA;        def previousLineOperator = null;&#xA;        def previousCategory = null;&#xA;        def previousFreightKind = null;&#xA;&#xA;        def editDest = false;&#xA;        def editLineOperator = false;&#xA;        def editCategory = false;&#xA;        def editFreightKind = false;&#xA;&#xA;        if (event != null) {&#xA;          def pointId = event.getPreviousPropertyAsString(&quot;PODRef&quot;);&#xA;          def point = findRoutingPoint(pointId);&#xA;          if (point != null) {&#xA;            previousDest = point.pointId;&#xA;          }&#xA;          previousLineOperator = event.getPreviousPropertyAsString(&quot;LineOperator&quot;);&#xA;          previousCategory = event.getPreviousPropertyAsString(&quot;Category&quot;);&#xA;          previousFreightKind = event.getPreviousPropertyAsString(&quot;FreightKind&quot;);&#xA;&#xA;          editDest = event.wasFieldChanged(&quot;PODRef&quot;);&#xA;          editLineOperator = event.wasFieldChanged(&quot;LineOperator&quot;);&#xA;          editCategory = event.wasFieldChanged(&quot;Category&quot;);&#xA;          editFreightKind = event.wasFieldChanged(&quot;FreightKind&quot;);&#xA;        }&#xA;&#xA;        //log(&quot;PREV=&quot;+previousDest+&quot;,&quot;+previousLineOperator+&quot;,&quot;+previousCategory+&quot;,&quot;+previousFreightKind);&#xA;&#xA;&#xA;&#xA;        def dest = null;&#xA;        def category = null;&#xA;        def freightKind = null;&#xA;        def commdityCode = null;&#xA;        def zone = unit.getUnitComplex().getTimeZone();&#xA;        def MAT;&#xA;        EquipRfrTypeEnum ueRfrType = null;&#xA;&#xA;        try {&#xA;          dest = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;          category = unit.unitCategory.name;&#xA;          freightKind = unit.unitFreightKind.name;&#xA;          ueRfrType =  unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypRfrType&quot;);&#xA;          if (unit.goods != null &amp;&amp; unit.goods.gdsCommodity != null) {&#xA;            commdityCode = unit.goods.gdsCommodity.cmdyId;&#xA;          }&#xA;&#xA;        } catch (Exception e) {&#xA;          log(&quot;Exception =&quot; + e.getMessage());&#xA;        }&#xA;&#xA;        try {&#xA;          def bizScope = ScopedBizUnit.findScopedBizUnit(&quot;MAT&quot;, BizRoleEnum.LINEOP);&#xA;          MAT = bizScope.bzuGkey.toString();&#xA;        } catch (Exception e) {&#xA;&#xA;        }&#xA;&#xA;        //boolean result = (MAT == previousLineOperator);&#xA;        //String rStr = Boolean.toString(result);&#xA;        //log(&quot;Mat=&quot;+MAT+&quot; &quot;+editLineOperator+&quot; &quot;+previousLineOperator+&quot; &quot;+ rStr );&#xA;&#xA;        def lineOper = null;&#xA;        def tcn = unit.unitFlexString12;&#xA;    &#x9;println(&quot;BLNumber123456--&gt;&quot;+unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;));&#xA;        println(&quot;ueRfrType--&gt;&quot;+ueRfrType.toString());&#xA;        boolean isReefer = !EquipRfrTypeEnum.NON_RFR.equals(ueRfrType) ? true : false;&#xA;        println(&quot;isReefer--&gt;&quot;+isReefer);&#xA;        String consigneeName = unit.getFieldValue(&quot;unitGoods.gdsConsigneeAsString&quot;);&#xA;        String remarks = unit.getFieldValue(&quot;unitRemark&quot;);&#xA;&#xA;&#xA;        try {&#xA;          lineOper = unit.unitLineOperator.bzuId;&#xA;        } catch (Exception e) {&#xA;          // do nothing&#xA;        }&#xA;&#xA;        def ufv = unit.unitActiveUfv;&#xA;&#xA;        // Not active UFV, find an advised UFV.&#xA;        if (ufv == null) {&#xA;          def lookup = getGroovyClassInstance(&quot;GvyUnitLookup&quot;);&#xA;          ufv = lookup.lookupFacility(unit.primaryKey);&#xA;        }&#xA;&#xA;        // Can not update without UFV&#xA;        if (ufv == null)&#xA;          return update;&#xA;&#xA;        def availDate = ufv.getFieldValue(&quot;ufvFlexDate02&quot;);&#xA;        boolean availChange = false;&#xA;        boolean manualDate = false;&#xA;&#xA;        //log(&quot;Prev dest = &quot;+previousDest+&quot; lineOper=&quot;+lineOper+&quot; category=&quot;+category+&quot; kind=&quot;+freightKind+&quot;comm=&quot;+commdityCode);&#xA;&#xA;&#xA;        if (editFlag != null &amp;&amp; editFlag.contains(&quot;X&quot;)) {&#xA;          manualDate = true;&#xA;        }&#xA;&#xA;        if (event != null &amp;&amp; event.wasFieldChanged(&quot;UfvFlexDate02&quot;)) {&#xA;          availChange = true;&#xA;          manualDate = true;&#xA;          /*&#xA;               if(editFlag == null) {&#xA;                  unit.setFieldValue(&quot;unitFlexString11&quot;,&quot;X&quot;);&#xA;               } else if(!editFlag.contains(&quot;X&quot;)) {&#xA;                  unit.setFieldValue(&quot;unitFlexString11&quot;,editFlag+&quot;X&quot;);&#xA;               }&#xA;         */&#xA;&#xA;        }&#xA;&#xA;        if (manualDate)&#xA;          log(&quot;Manual Avail Date &quot; + availDate);&#xA;&#xA;          // println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;availDate&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitId&quot;)+&quot;::&quot;+availDate+&quot;::&quot;+manualDate+&quot;::&quot;+availChange+&quot;::&quot;+dest+&quot;::&quot;+lineOper+&quot;::&quot;+category+&quot;::&quot;+freightKind+&quot;::&quot;+commdityCode);&#xA;&#xA;        // Manual Avail Date&#xA;        if (availChange) {&#xA;          if (event == null || !event.wasFieldChanged(&quot;UfvFlexDate03&quot;)) {&#xA;            def dueDate = calcDueDate(lineOper, tcn, commdityCode, isReefer, availDate, zone);&#xA;&#xA;            if (!dueDate.equals(ufv.ufvFlexDate03)) {&#xA;              update = true;&#xA;            }&#xA;            ufv.setFieldValue(&quot;ufvFlexDate03&quot;, dueDate);&#xA;          } else {&#xA;            log(&quot;Manual dueDate &quot;);&#xA;          }&#xA;          if (event == null || !event.wasFieldChanged(&quot;LastFreeDay&quot;)) {&#xA;&#xA;            def storageDate = calcStorageDate(lineOper, tcn, consigneeName, remarks, isReefer, availDate, zone);&#xA;            log(&quot;Storgae=&quot; + storageDate);&#xA;            ufv.ufvLastFreeDay = storageDate;&#xA;          } else {&#xA;            log(&quot;Manual Last Free &quot;);&#xA;          }&#xA;&#xA;          // Avail date from the vessel&#xA;        //} else if (!manualDate &amp;&amp; &quot;HON&quot;.equals(dest) &amp;&amp; &quot;MAT&quot;.equals(lineOper) &amp;&amp; &quot;IMPRT&quot;.equals(category)&#xA;        } else if (!manualDate &amp;&amp; (&quot;ANK&quot;.equals(dest) || &quot;DUT&quot;.equals(dest) || &quot;KDK&quot;.equals(dest))  &amp;&amp; &quot;IMPRT&quot;.equals(category)&#xA;                &amp;&amp; &quot;FCL&quot;.equals(freightKind) &amp;&amp; !&quot;AUTO&quot;.equals(commdityCode) &amp;&amp; !&quot;AUTOCON&quot;.equals(commdityCode)) {&#xA;          def id = unit.getFieldValue(&quot;unitId&quot;);&#xA;          // Added Check for AdvanceVV&#xA;          def carrier = null;&#xA;&#xA;          def advanceVV = unit.getFieldValue(&quot;unitFlexString04&quot;);&#xA;          if (advanceVV != null) {&#xA;            def vesselLookup = getGroovyClassInstance(&quot;GvyVesselLookup&quot;);&#xA;            carrier = vesselLookup.getCarrierVisit(advanceVV);&#xA;          } else {&#xA;&#xA;            carrier = ufv.getUfvActualIbCv();&#xA;            if (carrier == null) {&#xA;              carrier = unit.getUnitDeclaredIbCv();&#xA;            }&#xA;&#xA;          }&#xA;&#xA;          def arriveDate = null;&#xA;          if (carrier != null &amp;&amp; carrier.getCvCarrierMode().equals(LocTypeEnum.VESSEL)) {&#xA;            //A1&#xA;            arriveDate = carrier.getCvCvd() != null ? carrier.getCvCvd().cvdTimeFirstAvailability : null;&#xA;&#xA;            //if(arriveDate == null) arriveDate = carrier.getCvATA();&#xA;            //if(arriveDate == null) arriveDate = carrier.getCvCvd().getCvdETA();&#xA;          }&#xA;&#xA;          if (arriveDate != null) {&#xA;            if (!arriveDate.equals(ufv.ufvFlexDate02)) {&#xA;              update = true;&#xA;            }&#xA;            ufv.setFieldValue(&quot;ufvFlexDate02&quot;, arriveDate);&#xA;&#xA;&#xA;            if (event == null || !event.wasFieldChanged(&quot;UfvFlexDate03&quot;)) {&#xA;              def dueDate = calcDueDate(lineOper, tcn, commdityCode, isReefer, arriveDate, zone);&#xA;              if (!dueDate.equals(ufv.ufvFlexDate03)) {&#xA;                update = true;&#xA;              }&#xA;              ufv.setFieldValue(&quot;ufvFlexDate03&quot;, dueDate);&#xA;            }&#xA;&#xA;            if (event == null || !event.wasFieldChanged(&quot;LastFreeDay&quot;)) {&#xA;              def storageDate = calcStorageDate(lineOper, tcn, consigneeName, remarks, isReefer, arriveDate, zone);&#xA;              ufv.ufvLastFreeDay = storageDate;&#xA;&#xA;            }&#xA;&#xA;          }&#xA;&#xA;        //} else if ((editDest &amp;&amp; &quot;HON&quot;.equals(previousDest)) || (editLineOperator &amp;&amp; MAT.equals(previousLineOperator)) || (editCategory &amp;&amp; &quot;IMPRT&quot;.equals(previousCategory)) || (editFreightKind &amp;&amp; &quot;FCL&quot;.equals(previousFreightKind))) {&#xA;    &#x9;  } else if ((editDest &amp;&amp; (&quot;ANK&quot;.equals(previousDest) || &quot;DUT&quot;.equals(previousDest) || &quot;KDK&quot;.equals(previousDest))) || (editCategory &amp;&amp; &quot;IMPRT&quot;.equals(previousCategory)) || (editFreightKind &amp;&amp; &quot;FCL&quot;.equals(previousFreightKind))) {&#xA;          def id = unit.getFieldValue(&quot;unitId&quot;)&#xA;&#xA;          ufv.setFieldValue(&quot;ufvFlexDate02&quot;, null);&#xA;&#xA;&#xA;&#xA;          log(&quot;date=&quot; + availDate);&#xA;&#xA;          if (availDate != null) {&#xA;            update = true;&#xA;            if (event == null || !event.wasFieldChanged(&quot;UfvFlexDate03&quot;)) {&#xA;              ufv.setFieldValue(&quot;ufvFlexDate03&quot;, null);&#xA;            }&#xA;            if (event == null || !event.wasFieldChanged(&quot;LastFreeDay&quot;)) {&#xA;              ufv.ufvLastFreeDay = null;&#xA;            }&#xA;          }&#xA;&#xA;          //A1 Null Check&#xA;          if (editFlag != null &amp;&amp; editFlag.indexOf(&quot;X&quot;) != -1) {&#xA;            unit.setFieldValue(&quot;unitFlexString11&quot;, editFlag.replace(&quot;X&quot;, &quot;&quot;));&#xA;          }&#xA;        }&#xA;&#xA;        return update;&#xA;&#xA;  }&#xA;&#xA;&#xA;  public java.util.Date calcDueDate(String lineOper, String tcn, String commodityCode, boolean isReefer, java.util.Date availDate, TimeZone zone) {&#xA;&#xA;    if (&quot;HSD&quot;.equals(lineOper) || &quot;HLC&quot;.equals(lineOper))&#xA;      return null;&#xA;&#xA;&#xA;    if (tcn != null) {&#xA;      if (isReefer) {&#xA;        return addBusinessDate(availDate, zone, 8);&#xA;      } else {&#xA;        return addBusinessDate(availDate, zone, 10);&#xA;      }&#xA;    }&#xA;&#xA;    if (commodityCode != null &amp;&amp; (commodityCode.equals(&quot;XMAS40&quot;) || commodityCode.equals(&quot;XMASTREE&quot;))) {&#xA;&#xA;      return addBusinessDate(availDate, zone, 7);&#xA;    }&#xA;&#xA;    if (isReefer) {&#xA;      return addBusinessDate(availDate, zone, 6);&#xA;    }&#xA;&#xA;    return addBusinessDate(availDate, zone, 10);&#xA;  }&#xA;&#xA;  public java.util.Date calcStorageDate(String lineOper, String tcn, String consigneeName, String remarks, boolean isReefer, java.util.Date availDate, TimeZone zone) {&#xA;    //log(&quot;lineOper=&quot;+lineOper+&quot; tcn=&quot;+tcn+&quot; isReffer=&quot;+isReefer);&#xA;    if (&quot;HSD&quot;.equals(lineOper) || &quot;HLC&quot;.equals(lineOper))&#xA;      return null;&#xA;    if (tcn != null || isReefer)&#xA;      return null;&#xA;&#xA;&#xA;    if (consigneeName != null &amp;&amp; consigneeName.toUpperCase().contains(&quot;KILLEBREW&quot;) &amp;&amp; remarks != null &amp;&amp;&#xA;            (remarks.toUpperCase().contains(&quot;PLASTERBOARD&quot;) || remarks.toUpperCase().contains(&quot;PLASTER BOARD&quot;) || remarks.toUpperCase().contains(&quot;GYPSUM&quot;) ||&#xA;                    remarks.toUpperCase().contains(&quot;WALL BOARD&quot;) || remarks.toUpperCase().contains(&quot;WALLBOARD&quot;)))&#xA;&#xA;    {&#xA;      return addCalendarDate(availDate, zone, 15);&#xA;    }&#xA;    return addCalendarDate(availDate, zone, 10);&#xA;  }&#xA;&#xA;&#xA;&#xA;  public Date addBusinessDate(Date startDate, TimeZone zone, int addDays) {&#xA;    int altdays = addDays; //A5&#xA;    //println(&quot;addBusinessDate : altdays=&quot;+altdays+&quot;   addDays=&quot;+addDays)&#xA;    //def exemptCalendarEvents = AppCalendarUtil.getEvents(exemptTypes, ContextHelper.getThreadUserContext());&#xA;    CalendarTypeEnum calendarTypeEnum = CalendarTypeEnum.getEnum(&quot;STORAGE&quot;);&#xA;    ArgoCalendar argoCal = ArgoCalendar.findDefaultCalendar(calendarTypeEnum);&#xA;    def exemptCalendarEvents = ArgoCalendarUtil.getEvents(exemptTypes, argoCal);&#xA;    Date endDate = ArgoCalendarUtil.getEndDate(startDate, zone, altdays, exemptCalendarEvents, exemptTypes);&#xA;    if (endDate != null) {&#xA;      Calendar calendar = Calendar.getInstance(zone);&#xA;      calendar.setTimeInMillis(endDate.getTime());&#xA;      calendar.add(Calendar.DAY_OF_YEAR, -1);&#xA;      endDate = calendar.getTime();&#xA;    }&#xA;    return endDate;&#xA;  }&#xA;&#xA;  public Date addCalendarDate(Date startDate, TimeZone zone, int addDays) {&#xA;    //log(&quot;Free days=&quot;+addDays);&#xA;    int altdays = addDays - 1;  //A5&#xA;    //println(&quot;addCalendarDate : altdays=&quot;+altdays+&quot;   addDays=&quot;+addDays)&#xA;    return ArgoCalendarUtil.getEndDate(startDate, zone, altdays, null, null);&#xA;  }&#xA;&#xA;&#xA;  public RoutingPoint findRoutingPoint(String inPointId) {&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(&quot;RoutingPoint&quot;).addDqPredicate(PredicateFactory.eq(ArgoRefField.POINT_GKEY, inPointId));&#xA;    return (RoutingPoint) HibernateApi.getInstance().getUniqueEntityByDomainQuery(dq);&#xA;  }&#xA;&#xA;&#xA;&#xA;&#xA;  public List getAdvancedUnits(String vv) {&#xA;    try {&#xA;      DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;);&#xA;&#xA;      dq.addDqPredicate(PredicateFactory.eq(InventoryField.UNIT_FLEX_STRING04, vv));&#xA;      def list = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;      return list;&#xA;    } catch (Exception e) {&#xA;      println(&quot;Exception in GvyAvailDate.getAdvancedUnits &quot; + e.getMessage());&#xA;      e.printStackTrace();&#xA;    }&#xA;    return null;&#xA;  }&#xA;&#xA;//A5 - Kokua NIS Coding for NIS Ports&#xA;&#xA;  public void detentionForNisBarge(Object event, Object ufv, Object beginDate)&#xA;{&#xA;    def unit = ufv.getUfvUnit();&#xA;&#x9;def dest =  null; def category = null;&#xA;&#x9;def freightKind = null; def commdityCode = null;&#xA;&#x9;def zone = unit.getUnitComplex().getTimeZone();&#xA;&#x9;def MAT;  def lineOper = null;  def tcn = null;&#xA;&#x9;boolean isReefer; String consigneeName  = null; String remarks=null;&#xA;&#x9;boolean update = false;&#xA;&#x9;def intendedObCarrId = null;&#xA;&#xA;   try{&#xA;&#x9;dest =  unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;&#x9;intendedObCarrId = ufv.getFieldValue(&quot;ufvIntendedObCv.cvId&quot;);&#xA;    intendedObCarrId = intendedObCarrId != null ? intendedObCarrId : ''&#xA;&#xA;&#x9;category = unit.unitCategory.name;&#xA;&#x9;freightKind = unit.unitFreightKind.name;&#xA;&#x9;if(unit.goods != null &amp;&amp; unit.goods.gdsCommodity != null) {&#xA;&#x9;   commdityCode = unit.goods.gdsCommodity.cmdyId;&#xA;&#x9;}&#xA;&#xA;    def bizScope = ScopedBizUnit.findScopedBizUnit( &quot;MAT&quot;, BizRoleEnum.LINEOP);&#xA;    MAT = bizScope.bzuGkey.toString();&#xA;&#xA;&#x9;tcn = unit.unitFlexString12;&#xA;&#x9;isReefer = unit.isReefer();&#xA;&#x9;consigneeName =  unit.getFieldValue(&quot;unitGoods.gdsConsigneeAsString&quot;);&#xA;&#x9;remarks = unit.getFieldValue(&quot;unitRemark&quot;);&#xA;&#xA;&#x9;lineOper = unit.unitLineOperator.bzuId;&#xA;&#x9;//ufv = unit.unitActiveUfv&#xA;&#xA;    }catch(Exception e){&#xA;&#x9;&#x9;e.printStackTrace();&#xA;    }&#xA;&#xA;    try{&#xA;&#x9;// Avail date from the vessel&#xA;&#x9;if(&quot;IMPRT&quot;.equals(category) &amp;&amp; &quot;FCL&quot;.equals(freightKind) &amp;&amp; !&quot;AUTO&quot;.equals(commdityCode) &amp;&amp; !&quot;AUTOCON&quot;.equals(commdityCode) ) {&#xA;&#x9;&#x9;def id = unit.getFieldValue(&quot;unitId&quot;);&#xA;&#x9;&#x9;  // Added Check for AdvanceVV&#xA;&#x9;&#x9;  def carrier = null;&#xA;&#x9;&#x9; /*A6 def advanceVV = unit.getFieldValue(&quot;unitFlexString04&quot;);&#xA;&#x9;&#x9;  if(advanceVV != null) {&#xA;                  &#x9;def vesselLookup = getGroovyClassInstance(&quot;GvyVesselLookup&quot;);&#xA;                  &#x9;carrier = vesselLookup.getCarrierVisit(advanceVV);&#xA;                  } else {&#xA;&#x9;&#x9;    &#x9;    carrier = intendedObCarrId.startsWith('YB') ? ufv.getUfvIntendedObCv() : ufv.getUfvActualObCv();&#xA;&#x9;&#x9;    &#x9;    if(carrier == null) {&#xA;&#x9;&#x9;    &#x9;    &#x9;carrier = unit.getUnitDeclaredObCv();&#xA;&#x9;&#x9;    &#x9;    }&#xA;&#x9;&#x9;  }*/&#xA;        carrier = intendedObCarrId.startsWith('YB') ? ufv.getUfvIntendedObCv() : ufv.getUfvActualObCv();&#xA;&#x9;&#x9;if(carrier == null) {&#xA;&#x9;&#x9; &#x9;carrier = unit.getUnitDeclaredObCv();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;def arriveDate = null;&#xA;&#x9;&#x9;if(carrier != null &amp;&amp; carrier.getCvCarrierMode().equals(LocTypeEnum.VESSEL) ) {&#xA;         //A1&#xA;&#x9;&#x9;&#x9;arriveDate = carrier.getCvCvd() != null ? beginDate : null;&#xA;&#x9;    &#x9;}&#xA;&#x9;&#x9;if(arriveDate != null ) {&#xA;&#x9;&#x9;&#x9;if(!arriveDate.equals(ufv.ufvFlexDate02) ) {&#xA;&#x9;&#x9;&#x9;   update = true;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;ufv.setFieldValue(&quot;ufvFlexDate02&quot;,arriveDate);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (event == null || !event.wasFieldChanged(&quot;UfvFlexDate03&quot;) ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def dueDate = calcDueDate(lineOper,tcn, commdityCode,isReefer, arriveDate, zone);&#xA;&#xA;&#x9;&#x9;        &#x9;&#x9;if(!dueDate.equals(ufv.ufvFlexDate03) ) {&#xA;&#x9;&#x9;&#x9;   &#x9;&#x9;&#x9;update = true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufv.setFieldValue(&quot;ufvFlexDate03&quot;,dueDate);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (event == null ||  !event.wasFieldChanged(&quot;LastFreeDay&quot;) ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def storageDate = calcStorageDate(lineOper,tcn, consigneeName,  remarks, isReefer, arriveDate, zone);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufv.ufvLastFreeDay = storageDate;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9; }//Outer if Ends&#xA;&#x9;}catch(Exception e){&#xA;&#x9;  e.printStackTrace();&#xA;    }&#xA; }//Method Ends&#xA;&#xA;&#xA; public boolean setAvailDateOnUnit(Object unit, Object event,Date beginDate) {&#xA;&#x9;  &#x9;  println(&quot;:::::::inside setAvailDateOnUnit:::::&quot;);&#xA;    if (event != null) {&#xA;      ContextHelper.setThreadExternalUser(event.event.evntAppliedBy);&#xA;    }&#xA;&#xA;    def editFlag = unit.getUnitFlexString11();&#xA;    boolean update = false;&#xA;&#xA;    def previousDest = null;&#xA;    def previousLineOperator = null;&#xA;    def previousCategory = null;&#xA;    def previousFreightKind = null;&#xA;&#xA;    def editDest = false;&#xA;    def editLineOperator = false;&#xA;    def editCategory = false;&#xA;    def editFreightKind = false;&#xA;&#xA;    if (event != null) {&#xA;      def pointId = event.getPreviousPropertyAsString(&quot;PODRef&quot;);&#xA;      def point = findRoutingPoint(pointId);&#xA;      if (point != null) {&#xA;        previousDest = point.pointId;&#xA;      }&#xA;      previousLineOperator = event.getPreviousPropertyAsString(&quot;LineOperator&quot;);&#xA;      previousCategory = event.getPreviousPropertyAsString(&quot;Category&quot;);&#xA;      previousFreightKind = event.getPreviousPropertyAsString(&quot;FreightKind&quot;);&#xA;&#xA;      editDest = event.wasFieldChanged(&quot;PODRef&quot;);&#xA;      editLineOperator = event.wasFieldChanged(&quot;LineOperator&quot;);&#xA;      editCategory = event.wasFieldChanged(&quot;Category&quot;);&#xA;      editFreightKind = event.wasFieldChanged(&quot;FreightKind&quot;);&#xA;    }&#xA;&#xA;    //log(&quot;PREV=&quot;+previousDest+&quot;,&quot;+previousLineOperator+&quot;,&quot;+previousCategory+&quot;,&quot;+previousFreightKind);&#xA;&#xA;&#xA;&#xA;    def dest = null;&#xA;    def category = null;&#xA;    def freightKind = null;&#xA;    def commdityCode = null;&#xA;    def zone = unit.getUnitComplex().getTimeZone();&#xA;    def MAT;&#xA;    EquipRfrTypeEnum ueRfrType = null;&#xA;&#xA;    try {&#xA;      dest = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;      category = unit.unitCategory.name;&#xA;      freightKind = unit.unitFreightKind.name;&#xA;      ueRfrType =  unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypRfrType&quot;);&#xA;      if (unit.goods != null &amp;&amp; unit.goods.gdsCommodity != null) {&#xA;        commdityCode = unit.goods.gdsCommodity.cmdyId;&#xA;      }&#xA;&#xA;    } catch (Exception e) {&#xA;      log(&quot;Exception =&quot; + e.getMessage());&#xA;    }&#xA;&#xA;    try {&#xA;      def bizScope = ScopedBizUnit.findScopedBizUnit(&quot;MAT&quot;, BizRoleEnum.LINEOP);&#xA;      MAT = bizScope.bzuGkey.toString();&#xA;    } catch (Exception e) {&#xA;&#xA;    }&#xA;&#xA;    //boolean result = (MAT == previousLineOperator);&#xA;    //String rStr = Boolean.toString(result);&#xA;    //log(&quot;Mat=&quot;+MAT+&quot; &quot;+editLineOperator+&quot; &quot;+previousLineOperator+&quot; &quot;+ rStr );&#xA;&#xA;    def lineOper = null;&#xA;    def tcn = unit.unitFlexString12;&#xA;    //println(&quot;ueRfrType--&gt;&quot;+ueRfrType.toString());&#xA;    boolean isReefer = !EquipRfrTypeEnum.NON_RFR.equals(ueRfrType) ? true : false;&#xA;    //println(&quot;isReefer--&gt;&quot;+isReefer);&#xA;    String consigneeName = unit.getFieldValue(&quot;unitGoods.gdsConsigneeAsString&quot;);&#xA;    String remarks = unit.getFieldValue(&quot;unitRemark&quot;);&#xA;&#xA;&#xA;    try {&#xA;      lineOper = unit.unitLineOperator.bzuId;&#xA;    } catch (Exception e) {&#xA;      // do nothing&#xA;    }&#xA;&#xA;    def ufv = unit.unitActiveUfv;&#xA;&#xA;    // Not active UFV, find an advised UFV.&#xA;    if (ufv == null) {&#xA;      def lookup = getGroovyClassInstance(&quot;GvyUnitLookup&quot;);&#xA;      ufv = lookup.lookupFacility(unit.primaryKey);&#xA;    }&#xA;&#xA;    // Can not update without UFV&#xA;    if (ufv == null)&#xA;      return update;&#xA;&#xA;    def availDate = ufv.getFieldValue(&quot;ufvFlexDate02&quot;);&#xA;    boolean availChange = false;&#xA;    boolean manualDate = false;&#xA;&#xA;    //log(&quot;Prev dest = &quot;+previousDest+&quot; lineOper=&quot;+lineOper+&quot; category=&quot;+category+&quot; kind=&quot;+freightKind+&quot;comm=&quot;+commdityCode);&#xA;&#xA;&#xA;    if (editFlag != null &amp;&amp; editFlag.contains(&quot;X&quot;)) {&#xA;      manualDate = true;&#xA;&#xA;    }&#xA;&#xA;    if (event != null &amp;&amp; event.wasFieldChanged(&quot;UfvFlexDate02&quot;)) {&#xA;      availChange = true;&#xA;      manualDate = true;&#xA;      /*&#xA;           if(editFlag == null) {&#xA;              unit.setFieldValue(&quot;unitFlexString11&quot;,&quot;X&quot;);&#xA;           } else if(!editFlag.contains(&quot;X&quot;)) {&#xA;              unit.setFieldValue(&quot;unitFlexString11&quot;,editFlag+&quot;X&quot;);&#xA;           }&#xA;     */&#xA;&#xA;    }&#xA;&#xA;    if (manualDate)&#xA;      log(&quot;Manual Avail Date &quot; + availDate);&#xA;&#xA;    // Manual Avail Date&#xA;    if (availChange) {&#xA;      if (event == null || !event.wasFieldChanged(&quot;UfvFlexDate03&quot;)) {&#xA;        def dueDate = calcDueDate(lineOper, tcn, commdityCode, isReefer, availDate, zone);&#xA;&#xA;        if (!dueDate.equals(ufv.ufvFlexDate03)) {&#xA;          update = true;&#xA;        }&#xA;        ufv.setFieldValue(&quot;ufvFlexDate03&quot;, dueDate);&#xA;      } else {&#xA;        log(&quot;Manual dueDate &quot;);&#xA;      }&#xA;      if (event == null || !event.wasFieldChanged(&quot;LastFreeDay&quot;)) {&#xA;&#xA;        def storageDate = calcStorageDate(lineOper, tcn, consigneeName, remarks, isReefer, availDate, zone);&#xA;        log(&quot;Storgae=&quot; + storageDate);&#xA;        ufv.ufvLastFreeDay = storageDate;&#xA;      } else {&#xA;        log(&quot;Manual Last Free &quot;);&#xA;      }&#xA;&#xA;      // Avail date from the vessel&#xA;&#x9;&#x9;//} else if (!manualDate &amp;&amp; &quot;HON&quot;.equals(dest) &amp;&amp; &quot;MAT&quot;.equals(lineOper) &amp;&amp; &quot;IMPRT&quot;.equals(category)&#xA;&#x9;&#x9;} else if (!manualDate &amp;&amp; (&quot;ANK&quot;.equals(dest) ||&quot;DUT&quot;.equals(dest) || &quot;KDK&quot;.equals(dest)) &amp;&amp; &quot;IMPRT&quot;.equals(category)&#xA;            &amp;&amp; &quot;FCL&quot;.equals(freightKind) &amp;&amp; !&quot;AUTO&quot;.equals(commdityCode) &amp;&amp; !&quot;AUTOCON&quot;.equals(commdityCode)) {&#xA;      def id = unit.getFieldValue(&quot;unitId&quot;);&#xA;      // Added Check for AdvanceVV&#xA;      def carrier = null;&#xA;&#xA;      def advanceVV = unit.getFieldValue(&quot;unitFlexString04&quot;);&#xA;      if (advanceVV != null) {&#xA;        def vesselLookup = getGroovyClassInstance(&quot;GvyVesselLookup&quot;);&#xA;        carrier = vesselLookup.getCarrierVisit(advanceVV);&#xA;      } else {&#xA;&#xA;        //carrier = ufv.getUfvActualIbCv(); [KRajendran-03-04-14]Do not use IB actual, bcz it will return here GEN_TRUCK, Use IB Declrd&#xA;        if (carrier == null) {&#xA;          carrier = unit.getUnitDeclaredIbCv();&#xA;        }&#xA;&#xA;      }&#xA;&#xA;      def arriveDate = null;&#xA;      if (carrier != null &amp;&amp; carrier.getCvCarrierMode().equals(LocTypeEnum.VESSEL)) {&#xA;       &#xA;&#x9;&#x9;if (beginDate !=null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;  arriveDate = beginDate;&#xA;&#x9;&#x9;} else {&#xA;              //A1&#xA;              arriveDate = carrier.getCvCvd() != null ? carrier.getCvCvd().cvdTimeFirstAvailability : null;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#xA;        //if(arriveDate == null) arriveDate = carrier.getCvATA();&#xA;        //if(arriveDate == null) arriveDate = carrier.getCvCvd().getCvdETA();&#xA;      }&#xA;&#xA;&#xA;      if (arriveDate != null) {&#xA;        if (!arriveDate.equals(ufv.ufvFlexDate02)) {&#xA;          update = true;&#xA;        }&#xA;        ufv.setFieldValue(&quot;ufvFlexDate02&quot;, arriveDate);&#xA;&#xA;&#xA;        if (event == null || !event.wasFieldChanged(&quot;UfvFlexDate03&quot;)) {&#xA;          def dueDate = calcDueDate(lineOper, tcn, commdityCode, isReefer, arriveDate, zone);&#xA;          if (!dueDate.equals(ufv.ufvFlexDate03)) {&#xA;            update = true;&#xA;          }&#xA;          ufv.setFieldValue(&quot;ufvFlexDate03&quot;, dueDate);&#xA;        }&#xA;&#xA;        if (event == null || !event.wasFieldChanged(&quot;LastFreeDay&quot;)) {&#xA;          def storageDate = calcStorageDate(lineOper, tcn, consigneeName, remarks, isReefer, arriveDate, zone);&#xA;          ufv.ufvLastFreeDay = storageDate;&#xA;&#xA;        }&#xA;&#xA;      }&#xA;&#xA;    } else if ((editDest &amp;&amp; (&quot;ANK&quot;.equals(previousDest) || &quot;DUT&quot;.equals(previousDest) || &quot;KDT&quot;.equals(previousDest))) || (editLineOperator &amp;&amp; MAT.equals(previousLineOperator)) || (editCategory &amp;&amp; &quot;IMPRT&quot;.equals(previousCategory)) || (editFreightKind &amp;&amp; &quot;FCL&quot;.equals(previousFreightKind))) {&#xA;&#xA;      def id = unit.getFieldValue(&quot;unitId&quot;)&#xA;&#xA;      ufv.setFieldValue(&quot;ufvFlexDate02&quot;, null);&#xA;&#xA;&#xA;&#xA;      log(&quot;date=&quot; + availDate);&#xA;&#xA;      if (availDate != null) {&#xA;        update = true;&#xA;        if (event == null || !event.wasFieldChanged(&quot;UfvFlexDate03&quot;)) {&#xA;          ufv.setFieldValue(&quot;ufvFlexDate03&quot;, null);&#xA;        }&#xA;        if (event == null || !event.wasFieldChanged(&quot;LastFreeDay&quot;)) {&#xA;          ufv.ufvLastFreeDay = null;&#xA;        }&#xA;      }&#xA;&#xA;      //A1 Null Check&#xA;      if (editFlag != null &amp;&amp; editFlag.indexOf(&quot;X&quot;) != -1) {&#xA;        unit.setFieldValue(&quot;unitFlexString11&quot;, editFlag.replace(&quot;X&quot;, &quot;&quot;));&#xA;      }&#xA;    }&#xA;&#xA;    return update;&#xA;&#xA;  }&#xA;&#xA;}" />
<digital-asset id="GvyCmisUnitRectify" short-description="GvyCmisUnitRectify" is-pre-deployed="N" groovy-code="public class GvyCmisUnitRectify&#xA;{&#xA;   /*&#xA;   * Scenario One : N4 Rectify ? Yard (outgate correction)&#xA;   * In N4, user will: 1. PreAdvise Empty  2. Rectify to yard.&#xA;   */&#xA;   public String processRectify(String xmlData,Object event,Object gvyBaseClass)&#xA;   {&#xA;     println(&quot;GvyCmisUnitRecity.processRectify()&quot;)&#xA;     def xmlGvyString = xmlData &#xA;     try&#xA;     {&#xA;      def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;); &#xA;      //Check if Earlier unit was PreAdvise and the Rectify&#xA;      gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,&quot;OGX&quot;)     &#xA;  &#xA;     }catch(Exception e){&#xA;        e.printStackTrace()&#xA;     }&#xA;   }//Method Process Ends&#xA;&#xA;  /*&#xA;   * Scenario One : N4 Rectify ? Yard (outgate correction)&#xA;   * In N4, user will: 1. PreAdvise Empty  2. Rectify to yard.(Auto Update Rule)&#xA;   * Scenario Two :&#xA;   * Scenario Three : &#xA;   * Scenario Four :&#xA;   * Scenario Five :&#xA;   * Scenario Six :  &#xA;   */&#xA;&#xA; }//Class Ends" />
<digital-asset id="FlushUnit" short-description="FlushUnit" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.argo.ContextHelper&#xA;&#xA;&#xA;// Flush the unit before using its ufv - to avoid deadlock&#xA;&#xA;class FlushUnit{&#xA;    public static String BEAN_ID = &quot;FlushUnit&quot;&#xA;    public void execute(TransactionAndVisitHolder dao, api) {&#xA;&#xA;&#x9;TruckTransaction tran = dao.tran&#xA;        Container ctr = tran.tranContainer&#xA;        &#xA;        if (!ctr)&#xA;&#x9;return&#xA;&#xA;        UnitFinder unitFinder = (UnitFinder) Roastery.getBean(UnitFinder.BEAN_ID)&#xA;&#x9;&#xA;        Unit unit = unitFinder.findActiveUnit(ContextHelper.getThreadComplex(), ctr)&#xA;&#xA;        if (!unit)&#xA;&#x9;unit = unitFinder.findAdvisedUnitByLandModes(ContextHelper.getThreadComplex(), ctr)&#xA;&#xA;&#x9;if (!unit)&#xA;        return&#xA;&#xA;        // update the unit's flex-string and flush it&#xA;&#x9;&#x9;&#xA;        String str = unit.getUnitFlexString15()&#xA;        if(str == null || &quot;touchUnit&quot;.equals(str)) &#xA;&#x9;    unit.setUnitFlexString15(&quot;flushUnit&quot;);&#xA;        else&#xA;&#x9;    unit.setUnitFlexString15(&quot;touchUnit&quot;);&#xA;&#xA;        Roastery.getHibernateApi().flush();        &#xA;    }&#xA;}" />
<digital-asset id="RejectTruckingCompanyExpiredLineAgreementGroovy" short-description="RejectTruckingCompanyExpiredLineAgreementGroovy" is-pre-deployed="N" groovy-code="import com.navis.argo.business.reference.Group;&#xA;import com.navis.inventory.business.units.Routing;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.road.business.adaptor.truckingcompany.RejectTruckingCompanyExpiredLineAgreement;&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder;&#xA;import java.util.ArrayList;&#xA; &#xA;public class RejectTruckingCompanyExpiredLineAgreementGroovy extends RejectTruckingCompanyExpiredLineAgreement {&#xA;    public void execute(TransactionAndVisitHolder dao, api) {&#xA;        Unit unit = dao.getTran().getTranUnit();&#xA;        String groupId = getGroupId(unit);&#xA; &#xA;        if (!GROUP_IDS.contains(groupId)) {&#xA;            execute(dao);&#xA;        }&#xA; &#xA;    }&#xA; &#xA;    private String getGroupId(Unit unit) {&#xA;        Routing routing = unit.getUnitRouting();&#xA;        if (routing == null) {&#xA;            return null;&#xA;        }&#xA; &#xA;        Group group = routing.getRtgGroup();&#xA;        if (group == null) {&#xA;            return null;&#xA;        }&#xA; &#xA;        return group.getGrpId();&#xA;    }&#xA; &#xA;    private static final ArrayList GROUP_IDS = [&quot;YB&quot;,&quot;XFER-SI&quot;,&quot;XFER-WO&quot;,&quot;XFER-P2&quot;];&#xA;}&#xA;" />
<digital-asset id="ReadAccessoryGroovy" short-description="ReadAccessoryGroovy" is-pre-deployed="N" groovy-code="import com.navis.road.business.adaptor.accessory.ReadAccessory;&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder;&#xA;&#xA;&#xA;public class ReadAccessoryGroovy extends ReadAccessory {&#xA;    public void execute(TransactionAndVisitHolder dao, api) {&#xA;        execute(dao);&#xA;    }&#xA;}" />
<digital-asset id="StuffManager" short-description="StuffManager" is-pre-deployed="N" groovy-code="import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.api.ServicesManager;&#xA;import com.navis.argo.business.atoms.*;&#xA;import com.navis.argo.business.extract.ChargeableUnitEvent;&#xA;import com.navis.argo.business.model.LocPosition;&#xA;import com.navis.argo.business.reference.Container;&#xA;import com.navis.argo.business.reference.Equipment;&#xA;import com.navis.framework.business.BaseSessionPea;&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.portal.FieldChanges;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.framework.util.BizViolation;&#xA;import com.navis.inventory.InventoryBizMetafield;&#xA;import com.navis.inventory.InventoryPropertyKeys;&#xA;import com.navis.inventory.business.api.*;&#xA;import com.navis.inventory.business.atoms.*;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.rules.EventType;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;import com.navis.inventory.business.units.*;&#xA;&#xA;public class StuffManager extends BaseSessionPea&#xA;{&#xA;&#xA;    public StuffManager()&#xA;    {&#xA;    }&#xA;&#xA;    &#xA;    public UnitFacilityVisit coreStuffUfv(UnitFacilityVisit inEmptyUfv, UnitFacilityVisit inBbkUfv)&#xA;        throws BizViolation&#xA;    {&#xA;        Unit emptyUnit = inEmptyUfv.getUfvUnit();&#xA;        Unit bbkUnit = inBbkUfv != null ? inBbkUfv.getUfvUnit() : null;&#xA;        ServicesManager srvcMgr = (ServicesManager)Roastery.getBean(&quot;servicesManager&quot;);&#xA;        String emptyUnitId = emptyUnit.getHumanReadableKey();&#xA;        BizViolation bv = null;&#xA;        if(!UfvTransitStateEnum.S40_YARD.equals(inEmptyUfv.getUfvTransitState()))&#xA;            bv = BizViolation.create(InventoryPropertyKeys.NOT_INYARD, bv, EventEnum.UNIT_STUFF.getId(), emptyUnitId);&#xA;        if(FreightKindEnum.FCL.equals(emptyUnit.getUnitFreightKind()))&#xA;            bv = BizViolation.createFieldViolation(InventoryPropertyKeys.TRANSLOAD_TO_NOT_EMPTY, bv, InventoryBizMetafield.UNIT_TRANSLOAD_TO_ID, emptyUnitId);&#xA;        Equipment eq = emptyUnit.getPrimaryEq();&#xA;        if(eq == null || !EquipClassEnum.CONTAINER.equals(eq.getEqClass()))&#xA;            bv = BizViolation.create(InventoryPropertyKeys.TRANSLOAD_NOT_CONTAINERIZED, bv, emptyUnitId);&#xA;        if(bv != null)&#xA;            throw bv;&#xA;        bv = srvcMgr.verifyEventAllowed(EventEnum.UNIT_STUFF, emptyUnit);&#xA;        if(bv != null)&#xA;            throw bv;&#xA;        emptyUnit.makeRetired();&#xA;        inEmptyUfv.setUfvTimeOut(inEmptyUfv.getUfvTimeComplete());&#xA;        UnitEventExtractManager.updateStorageEventEndTime(inEmptyUfv, ChargeableUnitEventTypeEnum.STORAGE);&#xA;        _hibernateApi.flush();&#xA;       com.navis.argo.business.model.Facility facility = inEmptyUfv.getUfvFacility();&#xA;         String slot = inEmptyUfv.getUfvLastKnownPosition().getPosSlot();&#xA;        if(inBbkUfv == null)&#xA;        {&#xA;            UnitFacilityVisit fullUfv = getMgr().createYardBornUnit( eq, inEmptyUfv.getUfvLastKnownPosition(), &quot;stuffed&quot;);&#xA;          //  System.out.println(&quot;fullUfv=&quot;+fullUfv.properties);&#xA;          //  System.out.println(&quot;pos=&quot;+ inEmptyUfv.getUfvLastKnownPosition());&#xA;            Unit fullUnit = fullUfv.getUfvUnit();&#xA;            fullUnit.setUnitCategory(UnitCategoryEnum.EXPORT);&#xA;            fullUnit.setUnitDeckRqmnt(VslDeckRqmntEnum.EITHER);&#xA;            fullUnit.setUnitFreightKind(FreightKindEnum.FCL);&#xA;            fullUnit.setUnitWeightToTareWeight();&#xA;            fullUnit.setUnitLineOperator(emptyUnit.getUnitLineOperator());&#xA;            return fullUfv;&#xA;        } else&#xA;        {&#xA;            bbkUnit.setUnitFreightKind(FreightKindEnum.FCL);&#xA;            UnitEquipment ue = bbkUnit.attachEquipment(eq, EqUnitRoleEnum.PRIMARY, false);&#xA;            _hibernateApi.save(ue);&#xA;            double tareKg = eq.getEqTareWeightKg().doubleValue();&#xA;            double bbkKg = bbkUnit.getUnitGoodsAndCtrWtKg() != null ? bbkUnit.getUnitGoodsAndCtrWtKg().doubleValue() : 0.0D;&#xA;            double weight = bbkKg + tareKg;&#xA;            bbkUnit.setUnitGoodsAndCtrWtKg(new Double(weight));&#xA;            return inBbkUfv;&#xA;        }&#xA;    }&#xA;&#xA;&#xA;    private UnitManager getMgr()&#xA;    {&#xA;        return (UnitManager)Roastery.getBean(&quot;unitManager&quot;);&#xA;    }&#xA;&#xA;    private UnitFinder getFndr()&#xA;    {&#xA;        return (UnitFinder)Roastery.getBean(&quot;unitFinder&quot;);&#xA;    }&#xA;}" />
<digital-asset id="MatReportMtyGateConsists" short-description="MatReportMtyGateConsists" is-pre-deployed="N" groovy-code="/*&#xA;*  A1   GR &amp; Raghu Iyer  04/13/2012     Created Initial version for MTY gate consist reports  &#xA;*                                       This report will fetch the data for all MAT container&#xA;*                                       which are created in past 6 weeks and group the data&#xA;*                                       based on equipment type for each day(Mon to Sun)&#xA;*/&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.road.business.model.*;&#xA;import com.navis.road.RoadField;&#xA;import java.util.Calendar;&#xA;&#xA;&#xA;&#xA;public class MatReportMtyGateConsists extends GroovyInjectionBase&#xA;{&#xA;    private final String emailTo = &quot;1aktosdevteam@matson.com;&quot;;&#xA;&#x9;//private final String emailTo = &quot;1aktosdevteam@matson.com&quot;; &#xA;    def inj = null;&#xA;&#x9;String tranType = null;&#xA;&#xA;    &#xA;    public boolean execute(Map params)&#xA;    {&#xA;        try&#xA;        {&#xA;            inj = new GroovyInjectionBase();&#xA;    &#xA;            ArrayList trkTransList = new ArrayList();&#xA;            List trkTrans = getGateTrans()&#xA;            if(trkTrans == null){&#xA;                println(&quot;------------- NO REC ------------------&quot;)&#xA;                return;&#xA;            }    &#xA;            //println(&quot;No of rows =-------------&quot; + trkTrans)&#xA;            Iterator iter = trkTrans.iterator();&#xA;            while(iter.hasNext()) {&#xA;                //println(&quot;Inside loop&quot;)&#xA;                def aTrans = iter.next();&#xA;                HashMap trkTransDataMap = populateUnitData(aTrans)&#xA;                if(trkTransDataMap != null) {&#xA;                    trkTransList.add(trkTransDataMap);&#xA;                }&#xA;            }&#xA;            println(&quot;trkTransList -------------------- :&quot;+ (trkTransList != null ? trkTransList.size() : &quot;EMPTY&quot;))   &#xA;            //Set Report Parameter&#xA;            HashMap parameters = new HashMap();&#xA;        &#xA;            //Create and Mail Report &#xA;            JRDataSource ds = new JRMapCollectionDataSource(trkTransList);&#xA;            def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;            reportRunner.emailExcelReport(ds, parameters, &quot;MTYGATECONSISTS&quot;, emailTo, &quot;6 Weeks MTY Gate Containers&quot; ,&quot;Attached report for MTY Gate Consists 6 weeks average&quot;);&#xA;            println(&quot;trkTransList ------- Success&quot;) &#x9;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;            }&#xA;    }&#xA;&#xA;&#xA;    //1.Maps unit Data to report file attribute&#xA;    public HashMap populateUnitData(Object truckTrans)&#xA;    {&#xA;        HashMap map = null;&#xA;        try&#xA;        {&#xA;&#xA;&#xA;&#x9;Integer day = 0&#xA;&#x9;String frightKind = null;&#xA;&#x9;if (null != truckTrans.getTranCtrFreightKind())&#xA;&#x9;{&#xA;&#x9;&#x9;frightKind = truckTrans.getTranCtrFreightKind().getKey()&#xA;&#x9;}&#xA;&#x9;day =  truckTrans.tranCreated.getDay();&#xA; &#x9;&#xA; &#x9;map = new HashMap();&#xA;&#x9;&#xA;&#x9;//map.put(&quot;TranCtrNbr&quot;, truckTrans.tranCtrNbr +&quot;,&quot;);&#x9;&#xA;&#x9;//map.put(&quot;TranCreated&quot;, truckTrans.tranCreated); &#xA;&#x9;//map.put(&quot;TranCtrOwnerId&quot;, &quot;,&quot;+truckTrans.tranLineId+&quot;,&quot;); &#xA;&#x9;//map.put(&quot;TranCtrTypeId&quot;, truckTrans.tranCtrTypeId+&quot;,&quot;); &#xA;                     //map.put(&quot;TranTypeShort&quot;,truckTrans.getTranSubType().getKey()+&quot;,&quot;); &#xA;&#x9;//map.put(&quot;StageId&quot;, &quot;,&quot;+truckTrans.tranStageId+&quot;,&quot;); &#xA;&#x9;//map.put(&quot;TranStatus&quot;, truckTrans.getTranStatus().getKey()); &#xA;&#xA;//println(&quot;truckTrans.getTranSubType() &quot; + truckTrans.getTranSubType() + truckTrans.getTranStatus() + truckTrans.getTranCtrFreightKind() + frightKind)&#xA;tranType = truckTrans.getTranSubType().getKey();&#xA;&#xA;if (tranType==&quot;DM&quot;) {&#xA;&#x9;tranType = &quot;OG&quot;;&#xA;}&#xA;else if (tranType==&quot;RM&quot; || tranType==&quot;DC&quot;) {&#xA;&#x9;tranType = &quot;IG&quot;;&#xA;}&#xA;&#xA;&#x9;map.put(&quot;TranCtrNbr&quot;, truckTrans.tranCtrNbr);&#x9;&#xA;&#x9;map.put(&quot;TranCreated&quot;, truckTrans.tranCreated); &#xA;&#x9;map.put(&quot;TranCtrOwnerId&quot;,truckTrans.tranLineId); &#xA;&#x9;map.put(&quot;TranCtrTypeId&quot;, truckTrans.tranCtrTypeId); &#xA;&#x9;map.put(&quot;TranTypeShort&quot;,tranType); &#xA;&#x9;map.put(&quot;TranType&quot;, truckTrans.getTranSubType().getKey()); &#xA;&#x9;map.put(&quot;StageId&quot;,truckTrans.tranStageId); &#xA;&#x9;map.put(&quot;TranStatus&quot;, truckTrans.getTranStatus().getKey()); &#xA;&#x9;map.put(&quot;TranSeqNbr&quot;,day); &#xA;&#x9;map.put(&quot;TranCtrFreightKind&quot;,frightKind);//truckTrans.getTranCtrFreightKind().getKey()); &#xA;&#xA;&#xA;        }catch(Exception e){&#xA;          e.printStackTrace();&#xA;            }&#xA;        return map;&#xA;    }&#xA;&#xA;    public List getGateTrans()&#xA;    {&#xA;   /* //Date Manipulation - Minus 3 days from curent day&#xA;&#x9;&#x9;Date startDate = new Date()&#xA;&#x9;&#x9;String startDateT = '2012-09-24'&#xA;&#x9;&#x9;startDate = new Date().parse('yyyy-MM-dd', startDateT)&#xA;&#x9;&#x9;println(&quot;StartDate ===&gt;&quot; + startDate);&#xA;&#x9;&#x9;String trimDate = '2012-09-24'&#xA;&#x9;&#x9;//String trimDate = new Date().format('yyyy-MM-dd')&#xA;        Date endDate = new Date().parse('yyyy-MM-dd', trimDate)&#xA;        //int days = new Date().getDay();&#xA;&#x9;&#x9;int days = 1;&#xA;        days = days - 1;&#xA;        days = days + 42 * -1;&#xA;        println(&quot;day &quot;+ days);&#xA;        Calendar c = Calendar.getInstance();     &#xA;        c.setTime(startDate);     &#xA;        c.add(Calendar.DATE,days);  &#xA;        startDate.setTime( c.getTime().getTime() ); */&#xA;&#xA;&#xA;&#x9;&#x9;Date startDate = new Date()&#xA;&#x9;&#x9;println(&quot;StartDate ===&gt;&quot; + startDate);&#xA;&#x9;&#x9;String trimDate = new Date().format('yyyy-MM-dd')&#xA;        Date endDate = new Date().parse('yyyy-MM-dd', trimDate)&#xA;        int days = new Date().getDay();&#xA;        days = days - 1;&#xA;        days = days + 42 * -1;&#xA;        println(&quot;day &quot;+ days);&#xA;        Calendar c = Calendar.getInstance();     &#xA;        c.setTime(startDate);     &#xA;        c.add(Calendar.DATE,days);  &#xA;        startDate.setTime( c.getTime().getTime() ); &#xA;&#xA;&#x9;trimDate = startDate.format('yyyy-MM-dd')&#xA;&#x9;startDate = startDate.parse('yyyy-MM-dd', trimDate)&#xA;&#x9;&#xA;        println(&quot;trimDate &quot;+ trimDate);&#x9;&#xA;        println(&quot;startDate &quot;+ startDate);&#xA;        println(&quot;endDate &quot;+ endDate);&#xA;        println(&quot;Day &quot;+ days);&#xA;              &#xA;&#xA;        List gateTranUnits = null; &#xA;        try&#xA;        {&#xA;            Long facilityGkey = ContextHelper.getThreadFacility().getFcyGkey();&#xA;            //println(&quot;YB OBCarrId ::&quot;+visit.getCvdCv()+&quot; YBGKEY :&quot;+cvGkey)&#xA;            println(&quot;ContextHelper.getThreadFacility().getFcyGkey() : &quot;+ContextHelper.getThreadFacility().getFcyGkey())&#xA;&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;TruckTransaction&quot;).addDqPredicate(PredicateFactory.ge(RoadField.TRAN_CREATED, startDate)).addDqPredicate(PredicateFactory.lt(RoadField.TRAN_CREATED, endDate)).addDqPredicate(PredicateFactory.eq(RoadField.TRAN_LINE_ID, &quot;MAT&quot;))&#xA;.addDqPredicate(PredicateFactory.in(RoadField.TRAN_SUB_TYPE, &quot;RM&quot;,&quot;DM&quot;,&quot;DC&quot;)).addDqPredicate(PredicateFactory.eq(RoadField.TRAN_FACILITY, facilityGkey))&#xA;.addDqPredicate(PredicateFactory.in(RoadField.TRAN_STATUS, &quot;COMPLETE&quot;));&#xA;            println(&quot;dq---------------&quot;+dq);&#xA;            gateTranUnits  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            println(&quot;Query executed&quot;);&#xA;            println(&quot;gateTranUnits ::&quot;+gateTranUnits != null ? gateTranUnits.size() : 0) &#xA;        }catch(Exception e){&#xA;          e.printStackTrace()&#xA;            }&#xA;        return gateTranUnits;&#xA;    }&#xA;&#xA;    }&#xA;" />
<digital-asset id="ReportRunner" short-description="ReportRunner" is-pre-deployed="N" groovy-code="import com.navis.argo.business.reports.ReportDesign;&#xA;import net.sf.jasperreports.engine.*;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import net.sf.jasperreports.engine.design.JasperDesign;&#xA;import net.sf.jasperreports.engine.export.*;&#xA;&#xA;import java.io.ByteArrayInputStream;&#xA;import java.io.InputStream;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;import org.apache.commons.lang.StringUtils;&#xA;import com.navis.framework.email.*;&#xA;import com.navis.framework.business.Roastery;&#xA;import org.springframework.core.io.ByteArrayResource;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.argo.ContextHelper;&#xA;import java.io.Serializable;&#xA;import com.navis.framework.util.scope.ScopeCoordinates;&#xA;import com.navis.framework.portal.context.UserContextUtils;&#xA;import com.navis.framework.portal.UserContext;&#xA;import com.navis.argo.business.atoms.ScopeEnum;&#xA;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.argo.ArgoReportsField;&#xA;import com.navis.argo.ContextHelper&#xA;import java.io.ByteArrayOutputStream;&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;&#xA;&#xA;/*&#xA;* A1 01/08/2010  GR   Added Code to lookup Report Design for JMS Msg&#xA;                      Grouped common code together&#xA;* 08/16/11 2.1 Updated Email Method&#xA;* A1  GR   10/25/11  Removed Weblogic API&#xA;* A2  GR   11/10/11  TOS2.1 Get Environment Variable&#xA;*/&#xA;&#xA;class ReportRunner extends GroovyInjectionBase {&#xA;    private static final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;    private static final String errorEmailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;    private static final String emailFrom = &quot;1aktosdevteam@matson.com&quot;;&#xA;    GroovyApi groovyApi = new GroovyApi();&#xA;    String userId = null;&#xA;&#xA;&#xA;    public byte[] generateReport(JRDataSource ds,  String reportDefinitionName) {&#xA;        return generateReport(list, reportDefinitionName);&#xA;    }&#xA;&#xA;&#xA;    public byte[] generateReport(JRDataSource ds, Map parameters, String reportDefinitionName) {&#xA;        String xml = null;&#xA;        //Created for JMS to Direclty Lookup Report Design and ByPasses N4 User Visibility Checks&#xA;        if(&quot;-jms-&quot;.equals(userId)){&#xA;            xml = findExistingDesignName(reportDefinitionName).getRepdesXmlContent();&#xA;        }else{&#xA;            xml =  ReportDesign.findReportDesign(reportDefinitionName,com.navis.argo.business.atoms.ScopeEnum.YARD).getRepdesXmlContent();&#xA;        }&#xA;        InputStream inputStream = new ByteArrayInputStream(xml.getBytes());&#xA;        return createJaperReport(inputStream, ds, parameters);&#xA;    }&#xA;&#xA;&#xA;    public byte[] createJaperReport(InputStream inputStream, JRDataSource ds, Map parameters ){&#xA;&#xA;        JasperReport report = JasperCompileManager.compileReport(inputStream);&#xA;        JasperPrint print = JasperFillManager.fillReport(report, parameters, ds);&#xA;        ByteArrayOutputStream pdfByteArray = new ByteArrayOutputStream();&#xA;        JRPdfExporter exporterPDF = new JRPdfExporter();&#xA;        exporterPDF.setParameter(JRExporterParameter.JASPER_PRINT,print);&#xA;        exporterPDF.setParameter(JRExporterParameter.OUTPUT_STREAM,pdfByteArray);&#xA;        exporterPDF.exportReport();&#xA;        return pdfByteArray.toByteArray();&#xA;    }&#xA;&#xA;    public void emailReport( JRDataSource ds , Map parameters, String reportDefinitionName, String emailTo, String subject, String body) {&#xA;        try{&#xA;            userId = ContextHelper.getThreadUserId()&#xA;            ByteArrayResource bar = new ByteArrayResource(generateReport(ds,parameters, reportDefinitionName));&#xA;            testComposeEmail(reportDefinitionName, emailTo, subject, body, bar);&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;    public void composeEmail(String reportDefinitionName, String emailTo, String subject, String body, ByteArrayResource barAttachment){&#xA;        EmailMessage msg = new EmailMessage(ContextHelper.getThreadUserContext());&#xA;        msg.setTo(StringUtils.split(emailTo, &quot;;,&quot;));&#xA;        msg.setSubject(getEnvVersion()+subject);&#xA;        msg.setText(body);&#xA;        msg.setReplyTo(emailFrom);&#xA;        msg.setFrom(emailFrom);&#xA;        DefaultAttachment attach = new DefaultAttachment();&#xA;        attach.setAttachmentContents(barAttachment);&#xA;        attach.setAttachmentName(reportDefinitionName+&quot;.pdf&quot;);&#xA;        attach.setContentType(&quot;application/octet-stream&quot;);&#xA;        msg.addAttachment(attach);&#xA;        def  emailManager = Roastery.getBean(&quot;emailManager&quot;);&#xA;        EmailManager mng = new EmailManager();&#xA;        emailManager.sendEmail(msg);&#xA;    }&#xA;&#xA;    public void testComposeEmail(String reportDefinitionName, String emailTo, String subject, String body, ByteArrayResource barAttachment){&#xA;        try{&#xA;            EmailMessage msg = new EmailMessage(ContextHelper.getThreadUserContext());&#xA;            msg.setTo(StringUtils.split(emailTo, &quot;;,&quot;));&#xA;            msg.setSubject(getEnvVersion()+subject);&#xA;            msg.setText(body);&#xA;            msg.setReplyTo(emailFrom);&#xA;            msg.setFrom(emailFrom);&#xA;            DefaultAttachment attach = new DefaultAttachment();&#xA;            attach.setAttachmentContents(barAttachment);&#xA;            attach.setAttachmentName(reportDefinitionName+&quot;.pdf&quot;);&#xA;            attach.setContentType(&quot;application/octet-stream&quot;);&#xA;            msg.addAttachment(attach);&#xA;            def  emailManager = Roastery.getBean(&quot;emailManager&quot;);&#xA;            EmailManager mng = new EmailManager();&#xA;            emailManager.sendEmail(msg);&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;&#xA;&#xA;    //Method To Lookup Report Design&#xA;    public ReportDesign findExistingDesignName(String inRepdesName)&#xA;    {&#xA;        DomainQuery query = QueryUtils.createDomainQuery(&quot;ReportDesign&quot;).addDqPredicate(PredicateFactory.eq(ArgoReportsField.REPDES_NAME, inRepdesName));&#xA;        List repDes = Roastery.getHibernateApi().findEntitiesByDomainQuery(query);&#xA;        for (i in repDes) {&#xA;            ReportDesign oldReportDesign = (ReportDesign)i;&#xA;            return oldReportDesign&#xA;        }&#xA;    }&#xA;&#xA;    public void testReport() {&#xA;        HashMap map = new HashMap();&#xA;        ArrayList list = new ArrayList();&#xA;        map.put(&quot;UnitNbr&quot;, &quot;1&quot;);&#xA;        map.put(&quot;Destination&quot;, &quot;test&quot;);&#xA;        map.put(&quot;DepartureOrderNo&quot;, &quot;123&quot;);&#xA;        map.put(&quot;HazardItemUNNumber&quot;, &quot;1921&quot;);&#xA;        map.put(&quot;HazardItemProperName&quot;, &quot;Hazard&quot;);&#xA;        map.put(&quot;HazardItemProperName&quot;, &quot;Hazard&quot;);&#xA;        map.put(&quot;GoodsShipperName&quot;, &quot;shipper&quot;);&#xA;        map.put(&quot;HazardItemImdgClass&quot;, &quot;1.1&quot;);&#xA;        list.add(map);&#xA;        map = new HashMap();&#xA;        map.put(&quot;UnitNbr&quot;, &quot;2&quot;);&#xA;        map.put(&quot;Destination&quot;, &quot;test 2&quot;);&#xA;        map.put(&quot;DepartureOrderNo&quot;, &quot;999&quot;);&#xA;        map.put(&quot;HazardItemUNNumber&quot;, &quot;1921&quot;);&#xA;        map.put(&quot;HazardItemProperName&quot;, &quot;Hazard&quot;);&#xA;        map.put(&quot;HazardItemProperName&quot;, &quot;Hazard&quot;);&#xA;        map.put(&quot;GoodsShipperName&quot;, &quot;Steve co&quot;);&#xA;        map.put(&quot;HazardItemImdgClass&quot;, &quot;1.2&quot;);&#xA;        list.add(map);&#xA;        HashMap parameters = new HashMap();&#xA;        parameters.put(&quot;NAME&quot;,&quot;Steve&quot;);&#xA;        JRDataSource ds = new JRMapCollectionDataSource(list);&#xA;        emailReport(ds, parameters, &quot;BMR DCM TEST&quot;, emailTo, &quot;Test Email DCM&quot;, &quot;This is a test&quot;);&#xA;    }&#xA;&#xA;&#xA;    public  String getEnvVersion()  {&#xA;        String envType = groovyApi.getReferenceValue(&quot;ENV&quot;, &quot;ENVIRONMENT&quot;, null, null, 1)&#xA;        if(&quot;PRODUCTION&quot;.equals(envType)){&#xA;            return &quot;&quot;;&#xA;        }&#xA;        return envType+&quot; &quot;;&#xA;    }&#xA;&#xA;&#xA;    // the below code is to email excel report.&#xA;&#xA;    public void emailExcelReport( JRDataSource ds , Map parameters, String reportDefinitionName, String emailTo, String subject, String body) {&#xA;        try{&#xA;            println(&quot;calling emailExcelReport&quot;);&#xA;            userId = ContextHelper.getThreadUserId()&#xA;            ByteArrayResource bar = new ByteArrayResource(generateExcelReport(ds,parameters, reportDefinitionName));&#xA;            testComposeXlEmail(reportDefinitionName, emailTo, subject, body, bar);&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;    public byte[] generateExcelReport(JRDataSource ds, Map parameters, String reportDefinitionName) {&#xA;&#xA;        println(&quot;calling generateExcelReport&quot;);&#xA;        String xml = null;&#xA;        //Created for JMS to Direclty Lookup Report Design and ByPasses N4 User Visibility Checks&#xA;        if(&quot;-jms-&quot;.equals(userId)){&#xA;            xml = findExistingDesignName(reportDefinitionName).getRepdesXmlContent();&#xA;        }else{&#xA;            xml =  ReportDesign.findReportDesign(reportDefinitionName,com.navis.argo.business.atoms.ScopeEnum.YARD).getRepdesXmlContent();&#xA;        }&#xA;        InputStream inputStream = new ByteArrayInputStream(xml.getBytes());&#xA;        return createExcelReport(inputStream, ds, parameters);&#xA;    }&#xA;&#xA;    public byte[] createExcelReport(InputStream inputStream, JRDataSource ds, Map parameters ){&#xA;        println(&quot;calling createExcelReport&quot;);&#xA;        JasperReport report = JasperCompileManager.compileReport(inputStream);&#xA;        JasperPrint jasperPrint = JasperFillManager.fillReport(report, parameters, ds);&#xA;&#xA;        println(&quot;before instantiating JRXlsExporter&quot;);&#xA;        JRXlsExporter exporter = new JRXlsExporter();&#xA;        println(&quot;after instantiating JRXlsExporter&quot;);&#xA;&#xA;        ByteArrayOutputStream pdfByteArray = new ByteArrayOutputStream();&#xA;&#xA;        Map imagesMap = new HashMap();&#xA;        exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);&#xA;        exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, pdfByteArray);&#xA;        exporter.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.FALSE);&#xA;        exporter.setParameter(JRXlsExporterParameter.IS_DETECT_CELL_TYPE, Boolean.TRUE);&#xA;        exporter.setParameter(JRXlsExporterParameter.IS_WHITE_PAGE_BACKGROUND, Boolean.FALSE);&#xA;        exporter.setParameter(JRXlsExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS, Boolean.TRUE);&#xA;        exporter.exportReport();&#xA;        return pdfByteArray.toByteArray();&#xA;    }&#xA;&#xA;    public byte[] generateCsvReport(JRDataSource ds, Map parameters, String reportDefinitionName) {&#xA;&#xA;        println(&quot;calling generateCsvReport&quot;);&#xA;        String xml = null;&#xA;        //Created for JMS to Direclty Lookup Report Design and ByPasses N4 User Visibility Checks&#xA;        if(&quot;-jms-&quot;.equals(userId)){&#xA;            xml = findExistingDesignName(reportDefinitionName).getRepdesXmlContent();&#xA;        }else{&#xA;            xml =  ReportDesign.findReportDesign(reportDefinitionName,com.navis.argo.business.atoms.ScopeEnum.YARD).getRepdesXmlContent();&#xA;        }&#xA;        InputStream inputStream = new ByteArrayInputStream(xml.getBytes());&#xA;        return createCsvReport(inputStream, ds, parameters);&#xA;    }&#xA;&#xA;    public byte[] createCsvReport(InputStream inputStream, JRDataSource ds, Map parameters ){&#xA;        println(&quot;calling createCsvReport&quot;);&#xA;&#xA;        parameters.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);&#xA;&#xA;        JasperReport report = JasperCompileManager.compileReport(inputStream);&#xA;        JasperPrint jasperPrint = JasperFillManager.fillReport(report, parameters, ds);&#xA;&#xA;        println(&quot;before instantiating JRCsvExporter&quot;);&#xA;        JRCsvExporter exporterCsv = new JRCsvExporter();&#xA;        println(&quot;after instantiating JRCsvExporter&quot;);&#xA;&#xA;        ByteArrayOutputStream output = new ByteArrayOutputStream();&#xA;&#xA;        exporterCsv.setParameter(JRCsvExporterParameter.JASPER_PRINT, jasperPrint);&#xA;        exporterCsv.setParameter(JRCsvExporterParameter.OUTPUT_STREAM, output);&#xA;        exporterCsv.exportReport();&#xA;&#xA;        return output.toByteArray();&#xA;    }&#xA;&#xA;    public void testComposeXlEmail(String reportDefinitionName, String emailTo, String subject, String body, ByteArrayResource barAttachment){&#xA;        try{&#xA;            EmailMessage msg = new EmailMessage(ContextHelper.getThreadUserContext());&#xA;            msg.setTo(StringUtils.split(emailTo, &quot;;,&quot;));&#xA;            msg.setSubject(getEnvVersion()+subject);&#xA;            msg.setText(body);&#xA;            msg.setReplyTo(emailFrom);&#xA;            msg.setFrom(emailFrom);&#xA;            DefaultAttachment attach = new DefaultAttachment();&#xA;            attach.setAttachmentContents(barAttachment);&#xA;            attach.setAttachmentName(reportDefinitionName+&quot;.xls&quot;);&#xA;            attach.setContentType(&quot;application/octet-stream&quot;);&#xA;            msg.addAttachment(attach);&#xA;            def  emailManager = Roastery.getBean(&quot;emailManager&quot;);&#xA;            EmailManager mng = new EmailManager();&#xA;            emailManager.sendEmail(msg);&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;    /*&#xA;        Created By : Raghu Iyer&#xA;        Created On : 10:01:2012&#xA;        Comments   : This method is used to send the multiple attachments with single mail&#xA;    */&#xA;    public void emailReports( Map resultMap ,Map parameters, String emailTo, String subject, String body) {&#xA;        try{&#xA;            println(&quot;Inside the email Class &quot; + resultMap);&#xA;            String design = null;&#xA;            JRDataSource ds = null;&#xA;&#xA;            EmailMessage msg = new EmailMessage(ContextHelper.getThreadUserContext());&#xA;            msg.setTo(StringUtils.split(emailTo, &quot;;,&quot;));&#xA;            msg.setSubject(getEnvVersion()+subject);&#xA;            msg.setText(body);&#xA;            msg.setReplyTo(emailFrom);&#xA;            msg.setFrom(emailFrom);&#xA;&#xA;            Iterator resultMapItr = resultMap.entrySet().iterator();&#xA;            while (resultMapItr.hasNext())&#xA;            {&#xA;                DefaultAttachment attach = new DefaultAttachment();&#xA;&#xA;                Map.Entry reportMap = (Map.Entry) resultMapItr.next();&#xA;                design = reportMap.getKey();&#xA;                ds = reportMap.getValue();&#xA;                println(&quot;Design = &quot; + design);&#xA;                println(&quot;Value = &quot; + ds);&#xA;&#xA;                ByteArrayResource bar = new ByteArrayResource(generateReport(ds,parameters,design));&#xA;                attach.setAttachmentContents(bar);&#xA;                attach.setAttachmentName(design+&quot;.pdf&quot;);&#xA;                attach.setContentType(&quot;application/octet-stream&quot;);&#xA;                msg.addAttachment(attach);&#xA;&#xA;                println(&quot;Attachment Added&quot;);&#xA;            }&#xA;            def  emailManager = Roastery.getBean(&quot;emailManager&quot;);&#xA;            EmailManager mng = new EmailManager();&#xA;            emailManager.sendEmail(msg);&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;    &#xA;     public void emailXLSReports( Map resultMap ,Map parameters, String emailTo, String subject, String body) {&#xA;            try{&#xA;                println(&quot;Inside the email Class &quot; + resultMap);&#xA;                String design = null;&#xA;                JRDataSource ds = null;&#xA;    &#xA;                EmailMessage msg = new EmailMessage(ContextHelper.getThreadUserContext());&#xA;                msg.setTo(StringUtils.split(emailTo, &quot;;,&quot;));&#xA;                msg.setSubject(getEnvVersion()+subject);&#xA;                msg.setText(body);&#xA;                msg.setReplyTo(emailFrom);&#xA;                msg.setFrom(emailFrom);&#xA;    &#xA;                Iterator resultMapItr = resultMap.entrySet().iterator();&#xA;                while (resultMapItr.hasNext())&#xA;                {&#xA;                    DefaultAttachment attach = new DefaultAttachment();&#xA;    &#xA;                    Map.Entry reportMap = (Map.Entry) resultMapItr.next();&#xA;                    design = reportMap.getKey();&#xA;                    ds = reportMap.getValue();&#xA;                    println(&quot;Design = &quot; + design);&#xA;                    println(&quot;Value = &quot; + ds);&#xA;&#xA;    &#xA;                    ByteArrayResource bar = new ByteArrayResource(generateExcelReport(ds,parameters,design));&#xA;                    attach.setAttachmentContents(bar);&#xA;                    attach.setAttachmentName(design+&quot;.XLS&quot;);&#xA;                    attach.setContentType(&quot;application/octet-stream&quot;);&#xA;                    msg.addAttachment(attach);&#xA;    &#xA;                    println(&quot;Attachment Added&quot;);&#xA;                }&#xA;                def  emailManager = Roastery.getBean(&quot;emailManager&quot;);&#xA;                EmailManager mng = new EmailManager();&#xA;                emailManager.sendEmail(msg);&#xA;    &#xA;            }catch(Exception e){&#xA;                e.printStackTrace();&#xA;            }&#xA;    }&#xA;    &#xA;    &#xA;    /**&#xA;     * Author&#x9;&#x9;: Karthik Rajendran&#xA;     * Description &#x9;: This method is used to generate the PDF report as an email attachment.&#xA;     * Created &#x9;&#x9;: 7/30/2013&#xA;     *&#xA;     * @param designName&#xA;     * @param dataSource&#xA;     * @param parameters&#xA;     * @param attachFileName&#xA;     * @return&#xA;     */&#xA;    public DefaultAttachment generateReportAttachment(String designName, JRDataSource dataSource, Map parameters, String attachFileName)&#xA;    {&#xA;        DefaultAttachment attachment = null&#xA;        try {&#xA;            attachment = new DefaultAttachment()&#xA;            ByteArrayResource bar = new ByteArrayResource(generateReport(dataSource,parameters,designName))&#xA;            attachment.setAttachmentContents(bar)&#xA;            attachment.setAttachmentName(attachFileName+&quot;.pdf&quot;)&#xA;            attachment.setContentType(&quot;application/octet-stream&quot;)&#xA;        } catch(Exception e) {&#xA;            attachment = null&#xA;            e.printStackTrace()&#xA;        }&#xA;        //&#xA;        return attachment&#xA;    }&#xA;    /**&#xA;     * Author &#x9;&#x9;: Karthik Rajendran&#xA;     * Description &#x9;: This method is used to send email with the provided email attachments.&#xA;     * Created &#x9;&#x9;: 7/30/2013&#xA;     *&#xA;     * @param attachments&#xA;     * @param fromId&#xA;     * @param toId&#xA;     * @param subject&#xA;     * @param message&#xA;     */&#xA;    public void emailReportAttachments(ArrayList&lt;DefaultAttachment&gt; attachments, String fromId, String toId, String subject, String message)&#xA;    {&#xA;        try {&#xA;            EmailMessage msg = new EmailMessage(ContextHelper.getThreadUserContext())&#xA;            msg.setTo(StringUtils.split(toId, &quot;;,&quot;))&#xA;            msg.setSubject(getEnvVersion()+subject)&#xA;            msg.setText(message)&#xA;            msg.setReplyTo(fromId)&#xA;            msg.setFrom(fromId)&#xA;            if(attachments!=null &amp;&amp; attachments.size()&gt;0)&#xA;            {&#xA;                for(int i=0; i&lt;attachments.size(); i++)&#xA;                {&#xA;                    msg.addAttachment(attachments.get(i))&#xA;                }&#xA;            }&#xA;            else&#xA;            {&#xA;                println(&quot;No attachments&quot;)&#xA;            }&#xA;            def  emailManager = Roastery.getBean(&quot;emailManager&quot;)&#xA;            EmailManager mng = new EmailManager()&#xA;            emailManager.sendEmail(msg)&#xA;        }catch(Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;&#xA;    /*&#xA;        Created By : Lisa Crouch&#xA;        Created On : 06:28:2013&#xA;        Comments   : This method is used to send the PDF/CSV attachments with single mail&#xA;    */&#xA;    public void emailCsvPDFReports(ArrayList reportUnitList, Map parameters,String design, String emailTo, String subject, String body) {&#xA;        try{&#xA;            println(&quot;Inside the email Class &quot;);&#xA;            /*&#xA;            Need to create two datasources, one for each attachment&#xA;             */&#xA;            JRDataSource pdfDS = new JRMapCollectionDataSource(reportUnitList);&#xA;            JRDataSource excelDS = new JRMapCollectionDataSource(reportUnitList);&#xA;&#xA;&#xA;            EmailMessage msg = new EmailMessage(ContextHelper.getThreadUserContext());&#xA;            msg.setTo(StringUtils.split(emailTo, &quot;;,&quot;));&#xA;            msg.setSubject(getEnvVersion()+subject);&#xA;            msg.setText(body);&#xA;            msg.setReplyTo(emailFrom);&#xA;            msg.setFrom(emailFrom);&#xA;&#xA;&#xA;            DefaultAttachment attach = new DefaultAttachment();&#xA;            ByteArrayResource bar = new ByteArrayResource(generateReport(pdfDS, parameters, design));&#xA;            attach.setAttachmentContents(bar);&#xA;            attach.setAttachmentName(design+&quot;.pdf&quot;);&#xA;            attach.setContentType(&quot;application/octet-stream&quot;);&#xA;            msg.addAttachment(attach);&#xA;&#xA;            println(&quot;Attachment Added&quot;);&#xA;&#xA;&#xA;            DefaultAttachment attach2 = new DefaultAttachment();&#xA;            ByteArrayResource xlsbar = new ByteArrayResource(generateCsvReport(excelDS, parameters, design));&#xA;            attach2.setAttachmentContents(xlsbar);&#xA;            attach2.setAttachmentName(design+&quot;.csv&quot;);&#xA;            attach2.setContentType(&quot;application/octet-stream&quot;);&#xA;            msg.addAttachment(attach2);&#xA;&#xA;            println(&quot;Attachment Added&quot;);&#xA;&#xA;            def  emailManager = Roastery.getBean(&quot;emailManager&quot;);&#xA;            EmailManager mng = new EmailManager();&#xA;            emailManager.sendEmail(msg);&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;    // Added by Raghu Iyer on 10/10/2012 to emailReportWithoutAttachment sebd the report without attachment&#xA;    public void emailReportWithoutAttachment( JRDataSource ds , Map parameters, String reportDefinitionName, String emailTo, String subject, String body) {&#xA;        try{&#xA;            userId = ContextHelper.getThreadUserId()&#xA;            ByteArrayResource bar = new ByteArrayResource(generateReport(ds,parameters, reportDefinitionName));&#xA;            composeEmailWithoutAttachment(reportDefinitionName, emailTo, subject, body, bar);&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;    public void composeEmailWithoutAttachment(String reportDefinitionName, String emailTo, String subject, String body, ByteArrayResource barAttachment){&#xA;        try{&#xA;            EmailMessage msg = new EmailMessage(ContextHelper.getThreadUserContext());&#xA;            msg.setTo(StringUtils.split(emailTo, &quot;;,&quot;));&#xA;            msg.setSubject(getEnvVersion()+subject);&#xA;            msg.setText(body);&#xA;            msg.setReplyTo(emailFrom);&#xA;            msg.setFrom(emailFrom);&#xA;            def  emailManager = Roastery.getBean(&quot;emailManager&quot;);&#xA;            EmailManager mng = new EmailManager();&#xA;            emailManager.sendEmail(msg);&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;}" />
<digital-asset id="RejectCarrierVisitPhaseNotActive" short-description="RejectCarrierVisitPhaseNotActive" is-pre-deployed="N" groovy-code="import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.atoms.CarrierVisitPhaseEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.LineOperator&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.framework.util.internationalization.PropertyKey&#xA;import com.navis.framework.util.internationalization.PropertyKeyFactory&#xA;import com.navis.framework.util.message.MessageLevel&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.api.UnitReroutePoster&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;&#xA;&#xA;public class RejectCarrierVisitPhaseNotActive extends GroovyInjectionBase  {&#xA;&#xA;    public static String BEAN_ID = &quot;rejectCarrierVisitPhaseNotActive&quot;&#xA;    // {0} vessel visit id&#xA;    public static PropertyKey VESSEL_VISIT_NOT_ACTIVE = PropertyKeyFactory.valueOf(&quot;gate.vessel_visit_not_active&quot;)&#xA;    // {0} service id&#xA;    public static PropertyKey NEXT_VESSEL_VISIT_NOT_FOUND = PropertyKeyFactory.valueOf(&quot;gate.next_vessel_visit_not_found&quot;)&#xA;&#xA;&#xA;&#xA;&#xA;    public void execute(TransactionAndVisitHolder dao, api) {&#xA;        TruckTransaction tran = dao.tran&#xA;        Unit unit = tran.tranUnit&#xA;&#xA;        CarrierVisit obcv = getOutboundCarrierVisit(unit)&#xA;        if (!obcv) {&#xA;            api.log(&quot;RejectCarrierVisitPhaseNotActive: No outbound carrier visit for unit ${unit.unitId}.&quot;)&#xA;            return&#xA;        }&#xA;&#xA;        CarrierVisitPhaseEnum phase = obcv.cvVisitPhase&#xA;        if (ACTIVE_VESSEL_VISIT_PHASES.contains(phase))&#xA;            return&#xA;&#xA;        // Vessel visit phase not active, check the roll late container (auto-roll) flag.&#xA;        // If the flag is set, then in the service find the next vessel visit whose phase is active.&#xA;        // If next vessel visit can be found, reroute the unit to the next vessel visit.&#xA;        // If no next vessel visit can be found, display an error message and prevent the container to go through the gate.&#xA;&#xA;        LineOperator lineOp = tran.tranLine&#xA;        if (lineOp.getLineopRollLateCtr()) {&#xA;            CarrierVisit nextCv = findNextCarrierVisit(obcv)&#xA;            if (nextCv) {&#xA;                UnitFacilityVisit ufv = unit.getUfvForFacilityNewest(ContextHelper.getThreadFacility())&#xA;&#xA;                FieldChanges fcs = new FieldChanges()&#xA;                fcs.setFieldChange(InventoryField.UFV_INTENDED_OB_CV, nextCv.getPrimaryKey())&#xA;&#xA;                UnitReroutePoster unitReroutePoster = (UnitReroutePoster) Roastery.getBean(UnitReroutePoster.BEAN_ID);&#xA;                unitReroutePoster.updateRouting([ufv.getPrimaryKey()] as Serializable[], fcs)&#xA;            } else {&#xA;                def srvcId = obcv.cvCvd?.cvdService?.srvcId&#xA;                RoadBizUtil.appendMessage(MessageLevel.SEVERE, NEXT_VESSEL_VISIT_NOT_FOUND, srvcId)&#xA;            }&#xA;        } else {&#xA;            def cvId = obcv.cvId&#xA;            // Roll late container flag not set, display an error message.&#xA;            RoadBizUtil.appendMessage(MessageLevel.SEVERE, VESSEL_VISIT_NOT_ACTIVE, cvId)&#xA;        }&#xA;    }&#xA;&#xA;    def CarrierVisit getOutboundCarrierVisit(Unit unit) {&#xA;        UnitFacilityVisit ufv = unit.getUfvForFacilityNewest(ContextHelper.getThreadFacility());&#xA;&#xA;        ufv ? (ufv.ufvActualObCv ? ufv.ufvActualObCv : ufv.ufvIntendedObCv) : null&#xA;    }&#xA;&#xA;    def CarrierVisit findNextCarrierVisit(CarrierVisit currentCarrierVisit) {&#xA;        def cvd = currentCarrierVisit.cvCvd&#xA;        def currentVvd = (VesselVisitDetails) HibernateApi.getInstance().downcast(cvd, VesselVisitDetails.class)&#xA;        def nextVvds = currentVvd.findNextVisitsForService()&#xA;        // Find the next active vessel visit for the service.&#xA;        def nextVvd = nextVvds.find {vvd -&gt; ACTIVE_VESSEL_VISIT_PHASES.contains(vvd?.cvdCv?.cvVisitPhase) }&#xA;        nextVvd.cvdCv&#xA;    }&#xA;&#xA;    def ACTIVE_VESSEL_VISIT_PHASES = [&#xA;            CarrierVisitPhaseEnum.CREATED,&#xA;            CarrierVisitPhaseEnum.INBOUND,&#xA;            CarrierVisitPhaseEnum.ARRIVED,&#xA;            CarrierVisitPhaseEnum.WORKING&#xA;    ]&#xA;    &#xA;    &#xA;    &#xA;    &#xA;    &#xA;    &#xA;    &#xA;    // Added by SKB, Version to invoke from LNK&#xA;    &#xA;    public void executeForLnk(Unit unit, LineOperator lineOp) {    &#xA;            try {&#xA;            CarrierVisit obcv = getOutboundCarrierVisit(unit)&#xA;            if (!obcv) {&#xA;                api.log(&quot;RejectCarrierVisitPhaseNotActive: No outbound carrier visit for unit ${unit.unitId}.&quot;)&#xA;                return&#xA;            }&#xA;    &#xA;            CarrierVisitPhaseEnum phase = obcv.cvVisitPhase&#xA;            if (ACTIVE_VESSEL_VISIT_PHASES.contains(phase))&#xA;                return&#xA;    &#xA;            // Vessel visit phase not active, check the roll late container (auto-roll) flag.&#xA;            // If the flag is set, then in the service find the next vessel visit whose phase is active.&#xA;            // If next vessel visit can be found, reroute the unit to the next vessel visit.&#xA;            // If no next vessel visit can be found, display an error message and prevent the container to go through the gate.&#xA;    &#xA;            if (lineOp.getLineopRollLateCtr()) {&#xA;                CarrierVisit nextCv = findNextCarrierVisit(obcv)&#xA;                if (nextCv) {&#xA;                    UnitFacilityVisit ufv = unit.getUfvForFacilityNewest(ContextHelper.getThreadFacility())&#xA;    &#xA;                    FieldChanges fcs = new FieldChanges()&#xA;                    fcs.setFieldChange(InventoryField.UFV_INTENDED_OB_CV, nextCv.getPrimaryKey())&#xA;    &#xA;                    UnitReroutePoster unitReroutePoster = (UnitReroutePoster) Roastery.getBean(UnitReroutePoster.BEAN_ID);&#xA;                    unitReroutePoster.updateRouting([ufv.getPrimaryKey()] as Serializable[], fcs)&#xA;                } else {&#xA;                    def srvcId = obcv.cvCvd?.cvdService?.srvcId&#xA;                    RoadBizUtil.appendMessage(MessageLevel.SEVERE, NEXT_VESSEL_VISIT_NOT_FOUND, srvcId)&#xA;                }&#xA;            } else {&#xA;                def cvId = obcv.cvId&#xA;                // Roll late container flag not set, display an error message.&#xA;                RoadBizUtil.appendMessage(MessageLevel.SEVERE, VESSEL_VISIT_NOT_ACTIVE, cvId)&#xA;            }&#xA;           } catch (Exception e) {&#xA;&#x9;log(&quot;Could not update vv for &quot;+unit.unitId);&#xA;           }&#xA;    }&#xA;}&#xA;" />
<digital-asset id="GvyCmisEventFieldUpdateFilter" short-description="GvyCmisEventFieldUpdateFilter" is-pre-deployed="N" groovy-code="/*&#xA;*  Srno Doer  Date         Change  &#xA;*  A1   GR    04/30/2010   commented UNIT_PROPERTY_UPDATE for DAS as need to passing Vesvoy&#xA;*  A2   GR    04/30/2010   Added CLI_MAT event &#xA;*  A3   GR    05/21/2010   commented SIT Evnt for DAS as we need to passing Vesvoy&#xA;*  A4   GR    111/03/10    Added UNIT_SNX_UPDATE to vesvoy filter for NV direct post to Gems &#xA;*  A5   GR    10/30/11     TOS2.1 : ADDED UNIT_DISCH_COMEPLTED &#xA;*  A6   GR    01/03/12     TOS2.1 : YB CHANGE&#xA;*  A7   GR    03/01/12     NIS Event Change&#xA;*/&#xA;&#xA;public class GvyCmisEventFieldUpdateFilter&#xA;{&#xA;     public boolean evntFilterOnPositionFldChng(Object eventType)&#xA;    {&#xA;        boolean evntFldChange = false;&#xA;        try&#xA;        {&#xA;             ArrayList evntArrList = new ArrayList();&#xA;&#x9;&#x9;&#x9; evntArrList.add(&quot;UNIT_SNX_UPDATE&quot;); //A4&#xA;&#x9;&#x9;&#x9; evntArrList.add(&quot;NIS_CODING_COMPLETE_BARGE&quot;); //A7&#xA; &#x9;&#x9;&#x9; evntArrList.add(&quot;NIS_DETENTION&quot;); &#xA;  &#x9;&#x9;&#x9; evntArrList.add(&quot;NIS_TRUCKER_ASSIGN&quot;); &#xA;             //evntArrList.add(&quot;UNIT_PROPERTY_UPDATE&quot;);&#xA;             evntArrList.add(&quot;CLI_MAT&quot;); &#xA;             evntArrList.add(&quot;UNIT_DISMOUNT&quot;);&#xA;             evntArrList.add(&quot;UNIT_MOUNT&quot;);  &#xA;             evntArrList.add(&quot;TRANSFER_TO_P2&quot;); &#xA;             evntArrList.add(&quot;TRANSFER_TO_SI&quot;); &#xA;             evntArrList.add(&quot;TRANSFER_CANCEL&quot;);&#xA;             evntArrList.add(&quot;TRANSFER_TO_WO&quot;);&#xA;             //evntArrList.add(&quot;SIT_ASSIGN&quot;);&#xA;             //evntArrList.add(&quot;SIT_UNASSIGN&quot;);&#xA;             evntArrList.add(&quot;YB_ASSIGN&quot;);&#xA;             evntArrList.add(&quot;YB_UNASSIGN&quot;);&#xA;             evntArrList.add(&quot;TAG_STRIP_ASSIGN&quot;);&#xA;             evntArrList.add(&quot;TAG_STRIP_UNASSIGN&quot;);&#xA;             evntArrList.add(&quot;COMMUNITY_SERVICE_ASSIGN&quot;);&#xA;             evntArrList.add(&quot;COMMUNITY_SERVICE_UNASSIGN&quot;);&#xA;             evntArrList.add(&quot;OVER_ROAD_ASSIGN&quot;); &#xA;             evntArrList.add(&quot;OVER_ROAD_UNASSIGN&quot;);&#xA;             evntArrList.add(&quot;OFF_LEASE_ASSIGN&quot;); &#xA;             evntArrList.add(&quot;OFF_LEASE_UNASSIGN&quot;);&#xA;             evntArrList.add(&quot;MDA_ASSIGN&quot;); &#xA;             evntArrList.add(&quot;MDA_UNASSIGN&quot;); &#xA;             evntArrList.add(&quot;RETURN_TO_CUSTOMER_ASSIGN&quot;); &#xA;             evntArrList.add(&quot;RETURN_TO_CUSTOMER_UNASSIGN&quot;);&#xA;             evntArrList.add(&quot;PASSPASS_ASSIGN (SHOW)&quot;);&#xA;             evntArrList.add(&quot;PASSPASS_UNASSIGN&quot;); &#xA;             evntArrList.add(&quot;PASSPASS_ASSIGN (OTR)&quot;);&#xA;             evntArrList.add(&quot;SHIPPER_REHANDLE&quot;);&#xA;             evntArrList.add(&quot;SHIPPER_REHANDLE_CANCEL&quot;);&#xA;             evntArrList.add(&quot;BDA&quot;);&#xA;             evntArrList.add(&quot;BDB&quot;);&#xA;             //Removed as it can pass Anyfield&#xA;             //evntArrList.add(&quot;LNK&quot;);&#xA;             evntArrList.add(&quot;ULK&quot;); &#xA;&#xA;             for(evnt in evntArrList)&#xA;             {&#xA;                   if(eventType.equals(evnt)){&#xA;&#x9;//println(&quot;eventType :&quot;+evnt+&quot;  ArrayValue :&quot;+evntArrList);&#xA;&#x9;evntFldChange= true;&#x9;&#xA;                   }&#xA;               }&#xA;        }catch(Exception e){&#xA;             e.printStackTrace();&#xA;        }&#xA;      return evntFldChange;&#xA;   }&#xA;&#xA;  //Method Returns the Event Value for DSC&#xA;   public String evntFilterOnDscFldChng(Object eventType)&#xA;  {&#xA;    def dsc = '%';&#xA;    try&#xA;    { &#xA;       ArrayList evntFldList = new ArrayList();&#xA;       evntFldList.add(&quot;TRANSFER_CANCEL&quot;);&#xA;       evntFldList.add(&quot;SIT_UNASSIGN&quot;);&#xA;       evntFldList.add(&quot;YB_UNASSIGN&quot;);&#xA;       evntFldList.add(&quot;TAG_STRIP_UNASSIGN&quot;);&#xA;       evntFldList.add(&quot;COMMUNITY_SERVICE_UNASSIGN&quot;);&#xA;       evntFldList.add(&quot;OVER_ROAD_UNASSIGN&quot;);&#xA;       evntFldList.add(&quot;OFF_LEASE_UNASSIGN&quot;);&#xA;       evntFldList.add(&quot;MDA_UNASSIGN&quot;); &#xA;       evntFldList.add(&quot;RETURN_TO_CUSTOMER_UNASSIGN&quot;);&#xA;       evntFldList.add(&quot;PASSPASS_UNASSIGN&quot;); &#xA;       evntFldList.add(&quot;SHIPPER_REHANDLE_CANCEL&quot;);&#xA;       evntFldList.add(&quot;UNIT_RECEIVE&quot;);&#xA;       evntFldList.add(&quot;UNIT_IN_GATE&quot;);&#xA;       evntFldList.add(&quot;UNIT_DISCH&quot;);&#xA;&#x9;   evntFldList.add(&quot;UNIT_DISCH_COMPLETE&quot;); //A5&#xA;&#x9;   evntFldList.add(&quot;SIT_DIRECT_TO_YB&quot;); //A5&#xA;&#xA;        for(evnt in evntFldList)&#xA;       {&#xA;             if(evnt.equals(eventType))&#xA;            {&#xA;               dsc=&quot;null&quot;&#xA;             }&#xA;        }&#xA;&#xA;    }catch(Exception e){&#xA;         e.printStackTrace();&#xA;    }&#xA;     return dsc;&#xA; }&#xA;&#xA;}" />
<digital-asset id="GvyCmisUnitDataRefresh" short-description="GvyCmisUnitDataRefresh" is-pre-deployed="N" groovy-code="import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.inventory.business.api.UnitField;&#xA;import com.navis.inventory.business.api.UnitFinder;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.security.business.user.BaseUser&#xA;import com.navis.framework.persistence.BaseFinder&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.argo.business.atoms.EquipClassEnum;&#xA;&#xA;public class GvyCmisUnitDataRefresh&#xA;{&#xA;    def unitFinder = null;&#xA;    ServicesManager sm = null;&#xA;    def complex = null;&#xA;    ArrayList activeUnits = new ArrayList()&#xA;    Set departedUnits = new HashSet()&#xA;    ArrayList vesVistUnitLists = new ArrayList();&#xA;&#xA;    public void processUnitDataExtraction()&#xA;    {&#xA;        try&#xA;        {&#xA;            unitFinder = (UnitFinder)Roastery.getBean(&quot;unitFinder&quot;);&#xA;            complex = ContextHelper.getThreadComplex();&#xA;&#xA;            //List all units&#xA;            getAllUnits()&#xA;&#xA;            println(&quot;activeUnits ::-------&quot;+activeUnits.size()+&quot; Departed units ::--------&quot;+departedUnits.size())&#xA;            //Read and Posting Events for Active and Departed Units&#xA;/*    for(aUnit in activeUnits){&#xA;          //def inUnit = unitFinder.findUnitByHostKey(complex, aUnit)&#xA;          postLastRecoredEvent(aUnit)&#xA;       }&#xA;       for(deptUnit in departedUnits){&#xA;          postLastRecoredEvent(deptUnit)&#xA;       }&#xA; */&#xA;            println(&quot;After Posting Unit Events&quot;)&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;    // For New Ves Client Vessel&#xA;    public void processCmisDataRefreshByVesVoy(Object api, Object event, String vesVoy)&#xA;    {&#xA;        try&#xA;        {&#xA;            //List all units&#xA;            getAllUnits(vesVoy);&#xA;            println(&quot;Starting CMIS_DATA_REFRESH - Client Vessel Completed&quot;)&#xA;            //Read and Posting Events for Active and Departed Units&#xA;&#xA;            for(aUnit in vesVistUnitLists){&#xA;&#xA;                Object inUnit = aUnit.getUfvUnit();&#xA;                api.getGroovyClassInstance(&quot;GvySnxUpdateProcessor&quot;).procCmisDataRefresh(api,event,inUnit);&#xA;                println(&quot;Unit ::-------&quot;+aUnit);&#xA;            }&#xA;&#xA;            println(&quot;After CMIS_DATA_REFRESH - Client Vessel Completed&quot;)&#xA;&#xA;        }catch(Exception e){&#xA;            api.log(&quot;Exception in GvyCmisUnitDataRefresh.processCmisDataRefreshByVesVoy() &quot; + e);&#xA;        }&#xA;    }&#xA;&#xA;// For LH new vessel Vessel&#xA;    public void processCmisDataRefreshByVesVoyNV(Object api, Object event, String vesVoy)&#xA;    {&#xA;        try&#xA;        {&#xA;            //List all units&#xA;            getAllUnitsNewvess(vesVoy);&#xA;            println(&quot;Starting CMIS_DATA_REFRESH - LH New Vessel Completed&quot;)&#xA;            //Read and Posting Events for Active and Departed Units&#xA;&#xA;            for(aUnit in vesVistUnitLists){&#xA;&#xA;                Object inUnit = aUnit.getUfvUnit();&#xA;                api.getGroovyClassInstance(&quot;GvySnxUpdateProcessor&quot;).procCmisDataRefresh(api,event,inUnit);&#xA;                println(&quot;Unit ::-------&quot;+aUnit);&#xA;            }&#xA;&#xA;            println(&quot;After CMIS_DATA_REFRESH - LH New  Vessel Completed&quot;)&#xA;&#xA;        }catch(Exception e){&#xA;            api.log(&quot;Exception in GvyCmisUnitDataRefresh.processCmisDataRefreshByVesVoy() &quot; + e);&#xA;        }&#xA;    }&#xA;&#xA;&#xA;    /*&#xA;    * Method Fetches a list of all the units in N4&#xA;    * 1] Fetches a list of all Active units in Facility HON&#xA;    * 2] Fetches a list of all Departed units [last Departed unit in Facility HON]&#xA;    */&#xA;    public void getAllUnits()&#xA;    {&#xA;        try&#xA;        {&#xA;            BaseFinder baseFinder = new BaseFinder()&#xA;            List unitList = baseFinder.findAll(&quot;Unit&quot;)&#xA;            println(&quot;unit List ::--------&quot;+unitList.size())&#xA;&#xA;            if(unitList != null) {&#xA;                Iterator iter = unitList.iterator();&#xA;                while(iter.hasNext()) {&#xA;                    def unit = iter.next();&#xA;                    def eqTypeClass =  unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;                    if(unit.getFieldValue(&quot;unitVisitState&quot;).equals(UnitVisitStateEnum.ACTIVE) &amp;&amp; eqTypeClass.equals(EquipClassEnum.CONTAINER)) {&#xA;                        activeUnits.add(unit)&#xA;                    }else if(unit.getFieldValue(&quot;unitVisitState&quot;).equals(UnitVisitStateEnum.DEPARTED) &amp;&amp; eqTypeClass.equals(EquipClassEnum.CONTAINER)) {&#xA;                        unit = getLastDepartedUnit(unit)&#xA;                        if(unit != null){&#xA;                            departedUnits.add(unit)&#xA;                        }&#xA;                    }&#xA;                } //While&#xA;            }//outer If&#xA;            //  List unitFacilityList = baseFinder.findAll(&quot;UnitFacilityVisit&quot;)&#xA;            //  println(&quot;unitFacilityList  ::-------------&quot;+unitFacilityList.size())&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;    }//Method ends&#xA;&#xA;    /*&#xA;    * Method Fetches a list of all the units in N4 by VesVoy&#xA;    * For New Ves Client Vessel&#xA;    */&#xA;    public void getAllUnits(String vesVoy)&#xA;    {&#xA;        GroovyApi api = new GroovyApi();&#xA;        try&#xA;        {&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;            dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, vesVoy));&#xA;            List unitList  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            println(&quot;dq ====&quot;+dq+&quot; unitsList ====&quot;+(unitList != null ? unitList.size() : &quot;NO RESULT&quot;));&#xA;&#xA;            if(unitList != null) {&#xA;                vesVistUnitLists.addAll(unitList);&#xA;            }//outer If&#xA;        }catch(Exception e){&#xA;            api.log(&quot;Exception in GvyCmisUnitDataRefresh.getAllUnits() &quot; + e);&#xA;        }&#xA;    }//Method ends&#xA;&#xA;    public void getAllUnitsNewvess(String vesVoy)&#xA;    {&#xA;        GroovyApi api = new GroovyApi();&#xA;        try&#xA;        {&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;            dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_DECLARED_IB_ID, vesVoy));&#xA;            List unitList  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            println(&quot;dq ====&quot;+dq+&quot; unitsList ====&quot;+(unitList != null ? unitList.size() : &quot;NO RESULT&quot;));&#xA;&#xA;            if(unitList != null) {&#xA;                vesVistUnitLists.addAll(unitList);&#xA;            }//outer If&#xA;        }catch(Exception e){&#xA;            api.log(&quot;Exception in GvyCmisUnitDataRefresh.getAllUnits() &quot; + e);&#xA;        }&#xA;    }//Method ends&#xA;&#xA;/*&#xA; * Method Fetches the Last Departed unit in N4 and Post event&#xA; */&#xA;    public Object getLastDepartedUnit(Object unit)&#xA;    {&#xA;        def deptUnit = null&#xA;        try&#xA;        {&#xA;            def unitId = unit.getFieldValue(&quot;unitId&quot;)&#xA;            def inEquipment = Equipment.loadEquipment(unitId);&#xA;            deptUnit = unitFinder.findDepartedUnit(complex, inEquipment)&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return deptUnit&#xA;    }//Method Ends&#xA;&#xA;/*&#xA; *  Execute last event from event history&#xA;    so as to rewrite the appropriate unit state in cmis.&#xA; */&#xA;    public void postLastRecoredEvent(Object inUnit)&#xA;    {&#xA;        try&#xA;        {&#xA;            sm = (ServicesManager)Roastery.getBean(&quot;servicesManager&quot;);&#xA;            List eventList = sm.getEventHistory(inUnit);&#xA;            //def lastEvent = eventList.get(1).getEventTypeId()&#xA;            //println(&quot;Last Event on Unit ::&quot;+lastEvent)&#xA;            //Do Not post Event Refresh Again&#xA;            for(aEvent in eventList )&#xA;            {&#xA;                def lastEvent = aEvent.getEventTypeId()&#xA;                if(!lastEvent.equals(&quot;CMIS_REFRESH_SELECTED&quot;))&#xA;                {&#xA;                    GroovyEvent event = new GroovyEvent( null, inUnit);&#xA;                    // event.postNewEvent(lastEvent, &quot;Cmis Refresh : Unit Correction Executed&quot;);&#xA;                    println(&quot;INSDIE THE REFRESH LOOP : &quot;+lastEvent)&#xA;                    break;&#xA;                }else{&#xA;                    println(&quot;DO NOT POST CMIS REFRESH IF ITS THE LAST EVENT : &quot;+aEvent)&#xA;                }&#xA;            }&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;    }//Method End&#xA;&#xA;&#xA;&#xA;}//Class" />
<digital-asset id="RejectReeferTempNotValid" short-description="RejectReeferTempNotValid" is-pre-deployed="N" groovy-code="/*&#xA;*  Change   Changer  Date       Desc&#xA;*  A1       GR       12/16/11   Updated Reefer Variable for navis case#89220&#xA;*  A2       GR       02/17/12   TOS2.1 : Updt Field unitFlexString07 to UfvFlexString07&#xA;*  A3       LC       07/20/12   Create Temp discrepancy report on Dray-In&#xA;*  A4       LC       04/16/13   Check for the Receive Export Ingate, copies booking req temp to unit req temp&#xA;*  A5       LC       09/25/13   Get the trans booking temp required&#xA;*/&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.atoms.EquipRfrTypeEnum&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.framework.metafields.Metafield&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.framework.util.internationalization.ITranslationContext&#xA;import com.navis.framework.util.internationalization.PropertyKey&#xA;import com.navis.framework.util.internationalization.PropertyKeyFactory&#xA;import com.navis.framework.util.internationalization.TranslationUtils&#xA;import com.navis.framework.util.message.MessageLevel&#xA;import com.navis.framework.util.unit.TemperatureUnit&#xA;import com.navis.framework.util.unit.UnitUtils&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import org.apache.commons.lang.StringUtils&#xA;import com.navis.road.business.atoms.TranSubTypeEnum&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.framework.util.DateUtil;&#xA;&#xA;/**&#xA; * Validates and applies the reefer temperature entered in the gate screen. The reefer temperature is captured in a unit flex field.&#xA; * The validation rules will result in an error if any of the conditions below is true:&#xA; * 1) Non-reefer equipment and reefer temperature is entered.&#xA; * 2) Reefer equipment and reefer temperature is not entered.&#xA; * 3) Reefer equipment and reefer temperature is not &quot;AMB&quot; or a numerical value.&#xA; */&#xA;public class RejectReeferTempNotValid {&#xA;&#xA;    public static String BEAN_ID = &quot;applyReeferTempToTranTempSetting&quot;&#xA;    // {0} translated field name&#xA;    // {1} equipment type&#xA;    public static PropertyKey REEFER_TEMP_NOT_ALLOWED = PropertyKeyFactory.valueOf(&quot;gate.reefer_temp_not_allowed&quot;)&#xA;    // {0} translated field name&#xA;    // {1} equipment type&#xA;    public static PropertyKey REEFER_TEMP_REQUIRED = PropertyKeyFactory.valueOf(&quot;gate.reefer_temp_required&quot;)&#xA;    // {0} translated field name&#xA;    public static PropertyKey REEFER_TEMP_INVALID = PropertyKeyFactory.valueOf(&quot;gate.reefer_temp_invalid&quot;)&#xA;&#xA;    public static String REEFER_TEMP_FLEX_FIELD = &quot;ufvFlexString07&quot; //A2&#xA;    public static String VALID_REEFER_TEMP_STRING = &quot;AMB&quot;&#xA;&#xA;    public static String EMAIL_FROM = &quot;1aktosdevteam@matson.com&quot;&#xA;    public static String EMAIL_TO = &quot;1aktosdevteam@matson.com&quot;&#xA;    public static String SUBJECT = &quot;Dray-In Temp. Discrepancy&quot;&#xA;&#xA;    public void execute(TransactionAndVisitHolder dao, api) {&#xA;&#xA;        def gvyBaseClass = new GroovyInjectionBase()&#xA;&#xA;        TruckTransaction tran = dao.tran&#xA;        Container container = tran.tranContainer&#xA;&#xA;        if (container == null) {&#xA;            return&#xA;        }&#xA;        EquipRfrTypeEnum rfrType = container.eqRfrType&#xA;        String value = tran.getFieldString(getFlexFieldMetafieldId(REEFER_TEMP_FLEX_FIELD))&#xA;&#xA;        String fieldName = getFlexFieldTranslatedName(REEFER_TEMP_FLEX_FIELD)&#xA;        String eqTypeId = container.eqEquipType.eqtypId&#xA;        String ctrNbr = tran.getFieldValue(&quot;tranCtrNbr&quot;);&#xA;        String dest = tran.getFieldValue(&quot;tranDestination&quot;);&#xA;&#xA;        // Non-reefer equipment types are not allowed to have a value in the &quot;Reefer Temp&quot; flex field.&#xA;        if (EquipRfrTypeEnum.NON_RFR.equals(rfrType) &amp;&amp; StringUtils.isNotEmpty(value)) {&#xA;            RoadBizUtil.appendMessage(MessageLevel.SEVERE, REEFER_TEMP_NOT_ALLOWED, fieldName, eqTypeId)&#xA;        }&#xA;        // Reefer equipment types must have a value in the &quot;Reefer Temp&quot; flex field.&#xA;        if (!EquipRfrTypeEnum.NON_RFR.equals(rfrType) &amp;&amp; StringUtils.isEmpty(value)) {&#xA;            RoadBizUtil.appendMessage(MessageLevel.SEVERE, REEFER_TEMP_REQUIRED, fieldName, eqTypeId)&#xA;        }&#xA;        // Non-reefer equipment type and empty temp value, ignore.&#xA;        if (StringUtils.isEmpty(value)) {&#xA;            return&#xA;        }&#xA;        // Reefer equipment type and non-empty temp value.&#xA;        double reeferTempC = 0.0&#xA;        double reeferTempF = 0.0&#xA;        try {&#xA;            GroovyApi gvyApi = new GroovyApi();&#xA;            reeferTempC = UnitUtils.convertTo(value, TemperatureUnit.C, TemperatureUnit.F)&#xA;            reeferTempF = celsiusToFahrenheit(reeferTempC);&#xA;            //gvyApi.logWarn(&quot;reeferTempC:&quot;+reeferTempC);&#xA;            //gvyApi.logWarn(&quot;reeferTempF:&quot;+reeferTempF);&#xA;            // Copy the temp value entered to the tranTempSetting field on the transaction so that CreateContainerVisit will create a ReeferRecord&#xA;            // with this value in the rfrecSetPointTmp field.&#xA;            TranSubTypeEnum tranType = tran.getTranSubType(); //A1&#xA;            //For DrayIn Set TempRequired for RE set TempSetting&#xA;            if(TranSubTypeEnum.RI.equals(tranType)){&#xA;                Unit unit = tran.getTranUnit();&#xA;                //gets the unit temp to check for temp discrepancy&#xA;                if (unit != null &amp;&amp; unit.getUnitGoods() != null &amp;&amp; unit.getUnitGoods().getGdsReeferRqmnts() != null) {&#xA;                    Double tempRequiredC = unit.getUnitGoods().getGdsReeferRqmnts().getRfreqTempRequiredC();&#xA;                    double tempRequiredF = celsiusToFahrenheit(tempRequiredC);&#xA;                    def blNbr = unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;)&#xA;                    int comparisonVal = 0;&#xA;                    if (tempRequiredF != null &amp;&amp; (tempRequiredF.compareTo(reeferTempF)!= 0)) {&#xA;                        gvyApi.logWarn(&quot;Sending email to notify discrepancy in temperature&quot;);&#xA;                        def sitTemp = tempRequiredF != null ? tempRequiredF : &quot;--&quot;&#xA;                        def gateTemp = reeferTempF != null ? reeferTempF : &quot;--&quot;&#xA;                        String body = generateReport(ctrNbr, blNbr, gateTemp, sitTemp, dest, &quot;Gate&quot;);&#xA;                        def gvyEmailSender = gvyBaseClass.getGroovyClassInstance(&quot;EmailSender&quot;);&#xA;//Moved to UNIT_DRAY_IN General Notice                        &#xA;//gvyEmailSender.custSendEmail(EMAIL_TO, SUBJECT, body)&#xA;                    }&#xA;                }&#xA;                tran.tranTempRequired = reeferTempC&#xA;            }else{&#xA;                tran.tranTempSetting = reeferTempC&#xA;&#xA;                if(TranSubTypeEnum.RE.equals(tranType)){&#xA;                    //for RE - copy unit's booking temp required&#xA;                    def tranBooking;&#xA;                    def tranBookingTemp;&#xA;                    if(tran != null &amp;&amp; tran.getTranEqoItem()!=null)  {&#xA;                        tranBooking = tran.getTranEqoNbr();  //get the booking number at the ingate&#xA;                        gvyApi.logWarn(&quot;Booking Number:&quot;+tranBooking);&#xA;                        tranBookingTemp = tran.getTranEqoItem().getEqoiTempRequired(); //get the temp req from booking&#xA;                        gvyApi.logWarn(&quot;tranTempRequired----&gt;&quot;+tranBookingTemp);&#xA;                    }&#xA;                    tran.tranTempRequired =  tranBookingTemp;&#xA;&#xA;                    gvyApi.logWarn(&quot;Copied from booking temp to tran.tranTempRequired:&quot;+tranBookingTemp);&#xA;                }&#xA;&#xA;            }&#xA;        } catch (NumberFormatException e) {&#xA;            if (!VALID_REEFER_TEMP_STRING.equals(value)) {&#xA;                RoadBizUtil.appendMessage(MessageLevel.SEVERE, REEFER_TEMP_INVALID, fieldName)&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    // Returns the MetafieldId of the flex field on the truck transaction.&#xA;    private MetafieldId getFlexFieldMetafieldId(String idString) {&#xA;        MetafieldIdFactory.valueOf(&quot;tran${idString[0].toUpperCase()}${idString[1..-1]}&quot;)&#xA;    }&#xA;&#xA;    // Returns the user-friendly name for the flex field.&#xA;    private String getFlexFieldTranslatedName(String idString) {&#xA;        MetafieldId fieldId = MetafieldIdFactory.valueOf(idString)&#xA;        ITranslationContext translator = TranslationUtils.getTranslationContext(ContextHelper.getThreadUserContext())&#xA;        Metafield metafield = translator.getIMetafieldDictionary().findMetafield(fieldId)&#xA;&#xA;        return translator.getMessageTranslator().getMessage(metafield.getLongLabelKey())&#xA;    }&#xA;&#xA;    public double fahrenheitToCelsius(Double fahrenheit)&#xA;    {&#xA;        double fahr = (fahrenheit - 32) * 5/9;&#xA;        double result = new BigDecimal(&quot;&quot;+fahr).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();&#xA;        return result;&#xA;    }&#xA;&#xA;    public double celsiusToFahrenheit(Double celsius)&#xA;    {&#xA;        double fahr = (celsius * 9/5) + 32;&#xA;        double result = new BigDecimal(&quot;&quot;+fahr).setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue();&#xA;        return result;&#xA;    }&#xA;&#xA;    public String generateReport(String ctrNbr, String blNbr, Object gateTemp, Object sitTemp, String dest, String noticeFrom) {&#xA;        def timezone = ContextHelper.getThreadUserTimezone();&#xA;        def eventTime = DateUtil.convertDateToLocalTime(new Date(), timezone);&#xA;        StringBuffer header = new StringBuffer();&#xA;        header.append(&quot;    Date:&quot;+eventTime);&#xA;        header.append(&quot;\n\n\n                       MATSON TERMINALS - CONTAINER YARD     &quot;);&#xA;        header.append(&quot;\n\n\n    From    : &quot;+noticeFrom);&#xA;        header.append(&quot;\n    Subject : Dray-In Temperature Discrepancy&quot;);&#xA;        header.append(&quot;\n\n\n    Container: &quot;+ctrNbr+&quot;   Booking # : &quot;+blNbr+&quot;   Gate Temp: &quot;+gateTemp+&quot;   SIT Temp: &quot;+sitTemp+&quot;   Port: &quot;+dest);&#xA;        header.append(&quot;\n\n\n\n&quot;);&#xA;        return header.toString();&#xA;    }&#xA;&#xA;&#xA;}&#xA;" />
<digital-asset id="GvyCmisEventYbEbDone" short-description="GvyCmisEventYbEbDone" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.api.UnitManager;&#xA;import com.navis.inventory.business.api.RectifyParms;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.business.api.UnitFinder;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;&#xA;/*&#xA;* Class Departs all the UFV Units and sets the Master Visit State Departed &#xA;*/&#xA;public class GvyCmisEventYbEbDone &#xA;{&#xA;&#xA;   //Method Set all the Complex Level Active units to Departed &#xA;   public String processNLT(Object unit)&#xA;  {&#xA;     println(&quot;GvyInjNLTProcess.execute(inparameters)&quot;)&#xA;     try&#xA;    {&#xA;      //Processing One unit at a time &#xA;      def unitId = unit.getFieldValue(&quot;unitId&quot;);&#xA;      processUnit(unit)   &#xA;&#xA;     }catch(Exception e){&#xA;       e.printStackTrace()&#xA;    }&#xA;&#xA;  }//Method execute Ends&#xA;&#xA;   public void processUnit(Object unit)&#xA;   {&#xA;      try&#xA;      {&#xA;         //Set ufvSet = findVisitStateActiveUnit(unit)&#xA;          Set ufvSet = unit != null ? unit.getUnitUfvSet() : null; &#xA;         for(aUfv in ufvSet)&#xA;         {&#xA;            if (!UnitVisitStateEnum.DEPARTED.equals(aUfv.getUfvVisitState())) {&#xA;               RectifyParms rparms = new RectifyParms();&#xA;               rparms.setUfvTransitState(UfvTransitStateEnum.S70_DEPARTED);&#xA;               rparms.setUnitVisitState(UnitVisitStateEnum.DEPARTED)&#xA;               aUfv.rectify(rparms);&#xA;               println(&quot;Executed DEPARTED on NLT Unit: &quot;+unit.getFieldValue(&quot;unitId&quot;)) &#xA;            }//If Ends&#xA;         }&#xA;      &#xA;       }catch(Exception e){&#xA;           e.printStackTrace()&#xA;       }&#xA;   }&#xA;&#xA;&#xA;  // Method returns a Set of Complex Level Master State Active Units &#xA;  public Set findVisitStateActiveUnit(Object unitId)&#xA;  {&#xA;    Set unitUfvSet = null  &#xA;    try{&#xA;     def injBase = new GroovyInjectionBase() &#xA;     def unitFinder = injBase.getUnitFinder()&#xA;     def complex = ContextHelper.getThreadComplex();&#x9;&#xA;     def inEquipment = Equipment.loadEquipment(unitId);&#xA;     def inUnit = unitFinder.findActiveUnit(complex,inEquipment)&#xA;     unitUfvSet = inUnit != null ? inUnit.getUnitUfvSet() : null; &#xA;    }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    }   &#xA;    return unitUfvSet&#xA;  }&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyInjRemoveHazards" short-description="GvyInjRemoveHazards" is-pre-deployed="N" groovy-code="/*&#xA;* Sr   Doer Date      Change &#xA;* A1   GR   08/03/11  added method to handel Haz gems posting&#xA;*/&#xA;import java.util.Map;&#xA;import java.util.ArrayList;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.argo.business.reference.Equipment;&#xA;import com.navis.argo.ContextHelper;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;&#xA;class GvyInjRemoveHazards extends GroovyInjectionBase {&#xA;   public String execute(Map inParameters) {&#xA;&#x9; try{&#xA;       def fileName = (String)inParameters.get(&quot;fileName&quot;);          &#xA;&#x9;   if(fileName != null &amp;&amp; fileName.endsWith(&quot;INS.TXT&quot;)){&#xA;&#x9;&#x9;&#x9;reconcileHazToGems(inParameters);&#xA;       }else if (fileName != null &amp;&amp; fileName.endsWith(&quot;LT.TXT&quot;)){&#xA;&#x9;&#x9;   cancelHazards(inParameters);&#xA;       }&#xA;&#x9; }catch(Exception e){&#xA;&#x9;&#x9; e.printStackTrace();&#xA;     }&#xA;   &#x9;&#xA;   }&#xA;&#xA;&#xA;   public void cancelHazards(Map inParameters){&#xA;&#xA;   &#x9;def vesvoy = (String)inParameters.get(&quot;vesvoy&quot;);&#xA;&#x9;def unitStr = (String)inParameters.get(&quot;units&quot;);&#xA;&#x9;// List of units&#xA;&#x9;ArrayList units = (ArrayList)unitStr.split(&quot;,&quot;);&#xA;&#xA;   &#x9;def lookup = getGroovyClassInstance(&quot;GvyVesselLookup&quot;);&#xA;   &#x9;def availLookup = getGroovyClassInstance(&quot;GvyAvailDate&quot;);&#xA;   &#x9;def unitFinder = getUnitFinder();&#xA;   &#x9;&#xA;   &#x9;def cv = lookup.getCarrierVisit(vesvoy);&#xA;&#x9;def list = unitFinder.findAllUnitsByDeclaredIbCarrier(cv);&#xA;&#x9;def iter = list.iterator();&#xA;&#x9;&#xA;&#xA;&#x9;while(iter.hasNext()) {&#xA;&#x9;    try {&#xA;&#x9;       def unit = iter.next();&#xA;                            def unitName = unit.unitId;&#xA;&#x9;       if(units.contains(unitName)) continue;&#xA;&#x9;       if(unit.getGoods() != null) unit.getGoods().attachHazards(null);&#xA;&#x9;       &#xA;&#x9;    } catch (Exception e) {&#xA;&#x9;&#x9;java.io.StringWriter w = new StringWriter();&#xA;&#x9;&#x9;java.io.PrintWriter pw = new java.io.PrintWriter(w);&#xA;&#x9;&#x9;e.printStackTrace(pw);&#xA;&#x9;&#x9;log(w.toString());&#xA;&#x9;    }&#xA;&#x9; }&#xA;&#x9; &#xA;&#x9;// Now update advanced vessels.&#xA;&#x9;list = availLookup.getAdvancedUnits(vesvoy);&#xA;&#x9;iter = list.iterator();&#xA;&#x9;while(iter.hasNext()) {&#xA;&#x9;    try {&#xA;&#x9;       def unit = iter.next();&#xA;&#x9;       def unitName = unit.unitId;&#xA;&#x9;       if(units.contains(unitName)) continue;&#xA;&#x9;       if(unit.getGoods() != null) unit.getGoods().attachHazards(null);&#xA;&#x9;       &#xA;&#x9;    } catch (Exception e) {&#xA;&#x9;&#x9;java.io.StringWriter w = new StringWriter();&#xA;&#x9;&#x9;java.io.PrintWriter pw = new java.io.PrintWriter(w);&#xA;&#x9;&#x9;e.printStackTrace(pw);&#xA;&#x9;&#x9;log(w.toString());&#xA;&#x9;    }&#xA; &#x9;}&#xA;&#xA;   }//Method Ends&#xA;   &#xA;&#xA;   public void reconcileHazToGems(Map inParameters){&#xA;&#x9; try{&#xA;      def transitState = null;&#xA;      def unitFinder = getUnitFinder();&#xA;      def complex = ContextHelper.getThreadComplex();&#xA;&#x9;  def unitStr = (String)inParameters.get(&quot;units&quot;);&#xA;&#x9;  ArrayList units = (ArrayList)unitStr.split(&quot;,&quot;);&#xA;      Thread.sleep(10000) //Added Sleep for unit posting&#xA;      def iter = units.iterator();&#xA;&#x9;  while(iter.hasNext()) {&#xA;       def unit = iter.next();&#xA;       def inEquipment = Equipment.loadEquipment(unit);&#xA;       def inUnit = unitFinder.findActiveUnit(complex,inEquipment);&#xA;&#x9;   transitState = inUnit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;&#x9;   Boolean isHaz = inUnit.getFieldValue(&quot;unitGoods.gdsIsHazardous&quot;)&#xA;&#x9;    if(isHaz != null &amp;&amp; isHaz.booleanValue() &amp;&amp; !UfvTransitStateEnum.S70_DEPARTED.equals(transitState) &#xA;&#x9;&#x9;   &amp;&amp; !UfvTransitStateEnum.S99_RETIRED.equals(transitState)){&#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;   def event = new GroovyEvent( null, inUnit);&#xA;  &#x9;       event.postNewEvent( &quot;HAZ_UPDATE&quot;, &quot;HazInsProc&quot;);&#xA;&#x9;&#x9;   println(&quot;HAZ_UPDATE -------------&quot;)&#xA;        } &#xA;        Thread.sleep(3000) //Sleep after each unit posting&#xA;&#x9;  }&#xA;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;}&#xA;&#xA;   }//Method Ends&#xA;&#xA;}" />
<digital-asset id="GvyReportManifestNis" short-description="GvyReportManifestNis" is-pre-deployed="N" groovy-code="/*&#xA;*  A1   GR   02/08/2010     Updt Report Sorting for KAH port&#xA;*  A2   GR   03/09/2012     Updt Sorting for NAW port&#xA;*  A3   PS    01/11/2013     Added Buzz to KAH email dist list&#xA;*  A4   LC   08/08/2013      Added fix for departed unit with YB OB Actual Carrier&#xA;*  A5   KR   12/30/2013      Exclude RETIRED units from reporting&#xA;*/&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;&#xA;&#xA;public class GvyReportManifestNis&#xA;{&#xA;    String emailTo = null;&#xA;    private String reportStatus = &quot;Final&quot;&#xA;    private String outBoundCarrierId = null&#xA;    private HashSet unitSet = new HashSet();&#xA;    def inj = null;&#xA;&#xA;&#x9;private static final String hilKhiEmailList = &quot;1aktosdevteam@matson.com&quot;;&#xA;    private static final String  kahEmailList =  &quot;1aktosdevteam@matson.com&quot;;&#xA;    private static final String nawEmailList = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#xA;   public boolean processManifest(Object event)&#xA;   {&#xA;      //1. lookup all units on Board&#xA;      //2. Fetch and Map information&#xA;      //3. Generate Report&#xA;&#xA;      try&#xA;     {&#xA;       inj = new GroovyInjectionBase();&#xA;       def visit = event.getEntity();&#xA;&#xA;       //getEmail Grp List&#xA;       emailTo = formatProdEmailList(visit)&#xA;&#xA;       def phase = event.getPropertyAsString(&quot;VisitPhase&quot;);&#xA;       if( phase.equals(&quot;40WORKING&quot;) || phase.equals(&quot;50COMPLETE&quot;)) {&#xA;            reportStatus = &quot;Preliminary&quot;&#xA;       }&#xA;&#xA;      def nextFacility = visit.getFieldValue(&quot;cvdCv.cvNextFacility.fcyId&quot;)&#xA;      def facility = visit.getFieldValue(&quot;cvdCv.cvFacility.fcyId&quot;)&#xA;&#xA;      def status  =  reportStatus&#xA;      reportStatus = reportStatus+&quot;:&quot;+facility+&quot; to &quot;+nextFacility&#xA;&#xA;&#xA;       ArrayList unitList = new ArrayList();&#xA;&#x9;   List units = null;&#xA;       outBoundCarrierId =  &quot;&quot;+visit.cvdCv&#xA;       println(&quot;YB OBCarrierId ::&quot;+outBoundCarrierId)&#xA;&#xA;       if(outBoundCarrierId.startsWith('YB')){&#xA;        try{&#xA;           //Replace once Navis Error is fixed&#xA;           //units = getYbRtgUnitsOnVesVoy(visit)&#xA;&#xA;         //A15 This Code should be removed after the Navis Issue with Vesvisit lookup on unit Reoute is fixed&#xA;         units = getYbRtgUnitsForAllVesVoy(outBoundCarrierId)&#xA;         //A15 - Ends&#xA;          }catch(Exception e){&#xA;            e.printStackTrace()&#xA;          }&#xA;       }else{&#xA;         units = inj.getUnitFinder().findAllUfvOnBoard(visit.cvdCv);&#xA;       }&#xA;       //println(&quot;units -------------&quot;+units)&#xA;       if(units == null || emailTo == null){&#xA;          return false;&#xA;       }else if(units != null &amp;&amp; units.size() == 0){&#xA;            HashMap noUnitMap = new HashMap()&#xA;            noUnitMap.put(&quot;OutboundCarrierId&quot;, outBoundCarrierId);&#xA;            noUnitMap.put(&quot;reportStatus&quot;,&quot;NO DATA TO DISPLAY&quot;);&#xA;            unitList.add(noUnitMap);&#xA;       }&#xA;&#xA;        Iterator iter = units.iterator();&#xA;        while(iter.hasNext()) {&#xA;           def ufv = iter.next();&#xA;           HashMap unitDataMap = populateUnitData(ufv)&#xA;            if(unitDataMap != null) {&#xA;                unitList.add(unitDataMap);&#xA;             }&#xA;        }&#xA;&#xA;        //Sorting By Field&#xA;        def gvyRptUtil = inj.getGroovyClassInstance(&quot;ReportFieldSortUtil&quot;)&#xA;        if(unitList != null &amp;&amp; unitList.size() &gt; 0){&#xA;           if(nextFacility.equals('HIL') || nextFacility.equals('KHI') || nextFacility.equals('NAW')){&#xA;              unitList =  gvyRptUtil.processFieldSort(unitList,&quot;UnitNbr&quot;)&#xA;&#x9;&#x9;   }else if(nextFacility.equals('KAH')){&#xA;               unitList =  gvyRptUtil.processFieldSort(unitList,&quot;GoodsConsigneeName,UnitNbr&quot;)&#xA;&#x9;&#x9;   }else{&#xA;              unitList =  gvyRptUtil.processFieldSort(unitList,&quot;DeclaredIbCarrierId,UnitNbr&quot;)&#xA;&#x9;&#x9;   }&#xA;        }&#xA;&#xA;        println(&quot;unitList :&quot;+ (unitList != null ? unitList.size() : &quot;EMPTY&quot;))&#xA;        //Set Report Parameter&#xA;        HashMap parameters = new HashMap();&#xA;        String strDate = ContextHelper.formatTimestamp(event.getEvent().getEventTime(), ContextHelper.getThreadUserTimezone())&#xA;&#xA;        println(&quot;Event Time ::&quot;+event.getEvent().getEventTime()+&quot;    TimeZone:&quot;+ContextHelper.getThreadUserTimezone()+&quot;  strDate ::&quot;+strDate)&#xA;&#xA;        parameters.put(&quot;Date&quot;,strDate);&#xA;&#x9;&#x9;parameters.put(&quot;recordCount&quot;,(unitList != null &amp;&amp; unitList.size() &gt; 1 ? unitList.size() : 0))&#xA;       // parameters.put(&quot;MATSONLOGO&quot;,DigitalAsset.findImage(&quot;MATSONLOGO&quot;));&#xA;&#xA;        //Create and Mail Report&#xA;        JRDataSource ds = new JRMapCollectionDataSource(unitList);&#xA;        def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;        reportRunner.emailReport(ds, parameters, &quot;MANIFEST NIS&quot;, emailTo, outBoundCarrierId+&quot; &quot;+status+&quot; Manifest : &quot; + facility + &quot; to &quot; + nextFacility ,outBoundCarrierId+&quot; &quot;+status+&quot; Manifest : &quot; + facility + &quot; to &quot; + nextFacility);&#xA;&#xA;     }catch(Exception e){&#xA;          e.printStackTrace()&#xA;      }&#xA;   }&#xA;&#xA;&#xA;   //1.Maps unit Data to report file attribute&#xA;   public HashMap populateUnitData(UnitFacilityVisit ufv)&#xA;   {&#xA;     def unit = ufv.ufvUnit&#xA;     def transitState=unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;     println(unit.getFieldValue(&quot;unitId&quot;)+&quot; UFVTRANSITSTATE=&quot;+transitState+&quot;, UnitVisitState=&quot;+unit.getFieldValue(&quot;UnitVisitState&quot;)) // A5&#xA;     if((UnitVisitStateEnum.DEPARTED.equals(unit.getFieldValue(&quot;UnitVisitState&quot;))||UnitVisitStateEnum.RETIRED.equals(unit.getFieldValue(&quot;UnitVisitState&quot;))) &amp;&amp; (outBoundCarrierId!= unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;))) //A5&#xA;&#x9; {&#xA;&#xA;       println(&quot;***** OB Actual Carrier for unit (&quot;+unit+&quot;)::&quot;+unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;));&#xA;&#xA;       return null;&#xA;     }&#xA;     if(outBoundCarrierId.startsWith('YB') &amp;&amp; unitSet.contains(unit.unitId)){&#xA;       return null;&#xA;     }&#xA;&#xA;     HashMap map = null;&#xA;&#xA;      try&#xA;      {&#xA;        if(outBoundCarrierId.startsWith('YB') &amp;&amp; ( UfvTransitStateEnum.S70_DEPARTED.equals(transitState) || UfvTransitStateEnum.S60_LOADED.equals(transitState)) &amp;&amp; getRecentUnit(unit) == null)&#xA;       {&#xA;         setUnitId(unit);&#xA;        map = new HashMap();&#xA;        map.put(&quot;UnitNbr&quot;, unit.getFieldValue(&quot;unitId&quot;));&#xA;        map.put(&quot;GoodsConsigneeName&quot;, unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;));&#xA;        map.put(&quot;PositionSlot&quot;, unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;));&#xA;        map.put(&quot;Commodity&quot;, unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;));&#xA;       // map.put(&quot;POD&quot;, unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;));&#xA;        map.put(&quot;POD&quot;, unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;));&#xA;        map.put(&quot;POL&quot;, unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;));&#xA;        def dIbcarrierId = null;&#xA;        def dIbcarrierMode= unit.getFieldValue(&quot;unitDeclaredIbCv.cvCarrierMode&quot;)&#xA;        dIbcarrierMode = dIbcarrierMode != null ? dIbcarrierMode.getKey() : ''&#xA;        if(dIbcarrierMode.equals('TRUCK')){&#xA;           dIbcarrierId = &quot;T-&quot;+unit.getFieldValue(&quot;unitDeclaredIbCv.carrierOperatorId&quot;)&#xA;         }else{&#xA;          dIbcarrierId=unit.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;)&#xA;        }&#xA;        map.put(&quot;DeclaredIbCarrierId&quot;, dIbcarrierId);&#xA;        map.put(&quot;GrossWeightKgValue&quot;, unit.getFieldValue(&quot;unitGoodsAndCtrWtKg&quot;));&#xA;        map.put(&quot;EquipmentIdFull&quot;, unit.getFieldValue(&quot;unitCarriageUe.ueEquipment.eqIdFull&quot;));&#xA;        map.put(&quot;EquipmentType&quot;, unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;));&#xA;        map.put(&quot;OutboundCarrierId&quot;, outBoundCarrierId);&#xA;        map.put(&quot;AttachedUnits&quot;, unit.getFieldValue(&quot;unitAttachedPayloadEquipIds&quot;));&#xA;        map.put(&quot;UfvSparcsNotes&quot;,reportStatus);&#xA;      }&#xA;     else if(!outBoundCarrierId.startsWith('YB')){&#xA;         setUnitId(unit);&#xA;        map = new HashMap();&#xA;        map.put(&quot;UnitNbr&quot;, unit.getFieldValue(&quot;unitId&quot;));&#xA;        map.put(&quot;GoodsConsigneeName&quot;, unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;));&#xA;        map.put(&quot;PositionSlot&quot;, unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;));&#xA;        map.put(&quot;Commodity&quot;, unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;));&#xA;       // map.put(&quot;POD&quot;, unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;));&#xA;        map.put(&quot;POD&quot;, unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;));&#xA;        map.put(&quot;POL&quot;, unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;));&#xA;        def dIbcarrierId = null;&#xA;        def dIbcarrierMode= unit.getFieldValue(&quot;unitDeclaredIbCv.cvCarrierMode&quot;)&#xA;        dIbcarrierMode = dIbcarrierMode != null ? dIbcarrierMode.getKey() : ''&#xA;        if(dIbcarrierMode.equals('TRUCK')){&#xA;           dIbcarrierId = &quot;T-&quot;+unit.getFieldValue(&quot;unitDeclaredIbCv.carrierOperatorId&quot;)&#xA;         }else{&#xA;          dIbcarrierId=unit.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;)&#xA;        }&#xA;        map.put(&quot;DeclaredIbCarrierId&quot;, dIbcarrierId);&#xA;        map.put(&quot;GrossWeightKgValue&quot;, unit.getFieldValue(&quot;unitGoodsAndCtrWtKg&quot;));&#xA;        map.put(&quot;EquipmentIdFull&quot;, unit.getFieldValue(&quot;unitCarriageUe.ueEquipment.eqIdFull&quot;));&#xA;        map.put(&quot;EquipmentType&quot;, unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;));&#xA;        map.put(&quot;OutboundCarrierId&quot;, outBoundCarrierId);&#xA;        map.put(&quot;AttachedUnits&quot;, unit.getFieldValue(&quot;unitAttachedPayloadEquipIds&quot;));&#xA;        map.put(&quot;UfvSparcsNotes&quot;,reportStatus);&#xA;       }&#xA;&#xA;       }catch(Exception e){&#xA;          e.printStackTrace();&#xA;      }&#xA;     return map;&#xA;   }&#xA;&#xA;&#xA;   public String formatProdEmailList(Object visit)&#xA;   {&#xA;     def facilityEmailList = null&#xA;     try{&#xA;      def nextFacility = visit.getFieldValue(&quot;cvdCv.cvNextFacility.fcyId&quot;)&#xA;         if(nextFacility.equals('HIL') || nextFacility.equals('KHI')){&#xA;               facilityEmailList = hilKhiEmailList&#xA;         }else if (nextFacility.equals('KAH')){&#xA;                facilityEmailList = kahEmailList&#xA;           }else if (nextFacility.equals('NAW')){&#xA;                facilityEmailList = nawEmailList&#xA;          }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;       return facilityEmailList&#xA;   }&#xA;&#xA;&#xA;  public List getCarrierVisits(String id) {&#xA;      DomainQuery dq = QueryUtils.createDomainQuery(&quot;CarrierVisit&quot;);&#xA;      dq.addDqPredicate(PredicateFactory.eq(ArgoField.CV_ID,id ));&#xA;      def list = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;      if(list != null &amp;&amp; list.size() &gt; 0) {&#xA;          println(&quot;YB VV list Size :&quot;+list.size())&#xA;          return list&#xA;      }&#xA;      return null;&#xA;   }&#xA;&#xA;   public List getYbRtgUnitsOnVesVoy(Object visit)&#xA;   {&#xA;     List ufvYbUnits = null;&#xA;     try&#xA;    {&#xA;       Long facilityGkey = ContextHelper.getThreadFacility().getFcyGkey();&#xA;       Long cvGkey = visit.getCvdCv().getCvGkey()&#xA;       println(&quot;YB OBCarrId ::&quot;+visit.getCvdCv()+&quot; YBGKEY :&quot;+cvGkey)&#xA;       println(&quot;ContextHelper.getThreadFacility().getFcyGkey() : &quot;+ContextHelper.getThreadFacility().getFcyGkey())&#xA;       DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;).addDqPredicate(PredicateFactory.eq(UnitField.UFV_FACILITY, facilityGkey)).addDqPredicate(PredicateFactory.eq(UnitField.UFV_INTENDED_OB_CV, cvGkey)).addDqOrdering(Ordering.asc(UnitField.UFV_VISIT_STATE));;&#xA;       //DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;).addDqPredicate(PredicateFactory.eq(UnitField.UFV_FACILITY, facilityGkey)).addDqPredicate(PredicateFactory.eq(UnitField.UFV_INTENDED_OB_CVD, 7531607)).addDqOrdering(Ordering.asc(UnitField.UFV_VISIT_STATE));&#xA;       //println(&quot;Domain Query ::&quot;+dq)&#xA;       ufvYbUnits  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;       println(&quot;unitUfvYB ::&quot;+ufvYbUnits != null ? ufvYbUnits.size() : 0)&#xA;      }catch(Exception e){&#xA;          e.printStackTrace()&#xA;      }&#xA;     return ufvYbUnits;&#xA;   }&#xA;&#xA;&#xA;   public List getYbRtgUnitsForAllVesVoy(String YbVesVoyId)&#xA;   {&#xA;     ArrayList vesVistUnitLists = new ArrayList();&#xA;     try&#xA;    {&#xA;      List vesVisitList = getCarrierVisits(YbVesVoyId)&#xA;     for(aVesVisit in vesVisitList){&#xA;        Long cvGkey = aVesVisit.getCvGkey()&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;).addDqPredicate(PredicateFactory.eq(UnitField.UFV_INTENDED_OB_CV, cvGkey)).addDqOrdering(Ordering.asc(UnitField.UFV_VISIT_STATE));&#xA;        //println(&quot;Domain Query ::&quot;+dq)&#xA;        List vesVistUnits  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;        vesVistUnitLists.addAll(vesVistUnits);&#xA;        println(&quot;YB_OBCarrId :&quot;+YbVesVoyId+&quot;  YB_GKEY :&quot;+cvGkey+&quot;  NbrOfUnits :&quot;+(vesVistUnits != null ? vesVistUnits.size() : 0))&#xA;       }&#xA;     }catch(Exception e){&#xA;          e.printStackTrace();&#xA;     }&#xA;     return vesVistUnitLists&#xA;   }&#xA;&#xA;   private void setUnitId(Object unit){&#xA;      unitSet.add(unit.getUnitId());&#xA;   }&#xA;&#xA;   //Added Method Lookup to Resolve SIT cancel Condition&#xA;   private Object getRecentUnit(Object unit)&#xA;   {&#xA;     def ufv = null;&#xA;     try{&#xA;       def equiClass = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;       def equiClassKey = equiClass != null ? equiClass.getKey() : ''&#xA;       if(equiClassKey.equals('CONTAINER')){&#xA;            ufv = inj.findActiveUfv(unit.getUnitId())&#xA;            if(ufv != null &amp;&amp; ufv.ufvTransitState.equals(UfvTransitStateEnum.S60_LOADED)){&#xA;                 ufv = null;&#xA;            }&#xA;        }else{&#xA;          ufv = unit&#xA;        }&#xA;     }catch(Exception e){&#xA;         e.printStackTrace();&#xA;     }&#xA;     return ufv;&#xA;   }&#xA;&#xA;}&#xA;" />
<digital-asset id="NowToN4ChasMessageProcessor" short-description="NowToN4ChasMessageProcessor" is-pre-deployed="N" groovy-code="/*&#xA;*  Handeled&#xA;*  Now sends Mount Message and In N4 chassis is on Active unit then Dismount from Active unit&#xA;*  Retire Active bare Chassis before Mount&#xA;*  Chassis with and without wildChar Lookup&#xA;*  Chassis Creation&#xA;   05/05/2010&#xA;*  A1 - Change to Pass Messages on 1. UTR &amp; Chassis marriage  2.Bare Chassis Update&#xA;*  A1 - Lookup Active unit of chassis checkdigit (X and valid number) and then&#xA;   A1 - Add Bare chassis Position Check&#xA;   05/11&#xA;   A2 - Lookup active unit with Master State&#xA;   A2 - Comment out dismounting for Load back chassis&#xA;   A2 - Handel Correct chassis lookup&#xA;   05/13&#xA;   A3 - Planned position chekc for stacks&#xA;   A3 - Create bare Chassis Active InYard Chassis only for Valid yard position&#xA;   05/14&#xA;   A4 - Commented Dismount&#xA;   A4 - Auto UNIT_LOAD for the ALE&#xA;   A4 - Dismount Cntr on bare chassis update from valid position.&#xA;   05/18&#xA;   A5 - Dismount existing chassis before mounting new chassis.&#xA;        issue : as now we are creating chassis only on valid positions&#xA;   05/28&#xA;   A6  - Swipe existing chassis before mounting new chassis in Unit on VESSEL&#xA;   06/07/10&#xA;   A7 - Add code to fix incorrect attached unit on the gateActiveChassis lookup.&#xA;        This fix would avoid error UNITS__EQUIP_ALREADY_ACTIVE&#xA;   06/10/2010&#xA;   A8 - Add Position TRUCK check before Dismount chassis&#xA;        Removed the Swipe Code to added dismount method.&#xA;   06/14/10&#xA;   A9 - Dismount Chassis from Other Facility and make Attached unit=NULL in Current Facility.&#xA;   06/18/10&#xA;   A10- Adding DVI chassis Notification&#xA;   06/29/10 - Removed DVI notification Method&#xA;   A11- Roll Over MG on Mount action&#xA;        Owner and Operator of New Chassis&#xA;&#x9;&#x9;Stop Creating Facility Visit for BombCart Chassis&#xA;   A12 - Return Code for Containers with NO ACTIVE UFV&#xA;   A13 - ALE attach Chassis Check added on unit LOAD. TT#8408&#xA;   A14 - TT#11271 Attached unit Method lookup changed&#xA;   A15 - TT#12428 Handel Obsolete Chassis&#xA;   A16 - 05/24/11 - TT#  Stop Creating Chassis&#xA;   A17 - 05/25/11 - TT#12502 Suppress Bare chas moves on Vessel&#xA;   A18 - 05/25/11 - Post Email Alerts only for Valid Yard Position&#xA;   A19 - 08/12/11 - Added F&amp;M to chassis Email&#xA;   A20 - 08/15/11 - Added Yard Check and Suppressed Email&#xA;   * 08/16/11 2.1 Updated Email Method&#xA;   A21 - 04/05/2012  Suppressed Dismount Bare chassis as not N4 take care of it&#xA;*/&#xA;&#xA;import com.navis.argo.business.model.Facility&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.model.Yard&#xA;&#xA;// Peter Seiler replace Position with LocPosition&#xA;&#xA;import com.navis.argo.business.model.LocPosition&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.reference.Equipment;&#xA;import com.navis.inventory.business.units.UnitEquipment;&#xA;import com.navis.argo.business.reference.Chassis&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;import com.navis.argo.business.atoms.LocTypeEnum;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.argo.business.atoms.DataSourceEnum;&#xA;import com.navis.argo.business.atoms.CarrierModeEnum;&#xA;import com.navis.inventory.business.api.UnitManager;&#xA;import com.navis.argo.business.atoms.FreightKindEnum;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.argo.ArgoBizMetafield;&#xA;import com.navis.argo.business.api.ILocationLoader;&#xA;import com.navis.argo.business.model.ILocation;&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;&#xA;import java.util.List;&#xA;import java.util.Map&#xA;import com.navis.argo.business.atoms.EquipClassEnum&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;&#xA;import javax.jms.JMSException;&#xA;import javax.naming.Context;&#xA;import javax.naming.InitialContext;&#xA;import javax.jms.*;&#xA;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.argo.ArgoRefField;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.business.atoms.LifeCycleStateEnum;&#xA;&#xA;/**&#xA; *&#xA; * Patch Matson N4 Groovy for 2.1/2.6 upgrade&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 6 July 2014&#xA; * JIRA: ARGO-59892&#xA; * SFDC: None&#xA; * Called from: Unkown&#xA; *&#xA; */&#xA;&#xA;public class NowToN4ChasMessageProcessor extends GroovyInjectionBase{&#xA;&#xA;    UnitFinder unitFinder = null;&#xA;    boolean isDismount = false&#xA;    def emailSender = null;&#xA;    private static final String chasErrorEmail = '1aktosdevteam@matson.com,1aktosdevteam@matson.com';&#xA;    private static final String emailTo = '1aktosdevteam@matson.com'&#xA;    private static final String emailfrom = '1aktosdevteam@matson.com'&#xA;    //private static final String emailTo = '1aktosdevteam@matson.com'&#xA;    private static final String eol = &quot;\r\n&quot;;&#xA;    private static final String tab = &quot;\t&quot;;&#xA;    List chassisEquipList = null;  def equipPrimary = null; def equipSecondary = null;&#xA;    def position = null; def note = null;&#xA;    def complex = null;  Facility facility = null;&#xA;    GroovyApi gvyApi = new GroovyApi();&#xA;&#xA;    public String execute(Map inParameters) {&#xA;&#xA;        equipPrimary = (String) inParameters.get(&quot;equipPrimary&quot;);&#xA;        equipSecondary = (String) inParameters.get(&quot;equipSecondary&quot;);&#xA;        position = (String) inParameters.get( &quot;position&quot;);&#xA;        note = (String) inParameters.get(&quot;note&quot;);&#xA;        def recorder = (String) inParameters.get(&quot;recorder&quot;);&#xA;        def count = (String) inParameters.get(&quot;count&quot;);&#xA;        int counter = count == null ? 0 : Integer.parseInt(count);&#xA;&#xA;        position = manipulatePosition(position)&#xA;&#xA;        complex = ContextHelper.getThreadComplex();&#xA;        facility = ContextHelper.getThreadFacility()&#xA;        ContextHelper.setThreadExternalUser(&quot;now&quot;);&#xA;&#xA;        def temp = null;&#xA;        Equipment chasEq = null;&#xA;        String chasEquipId = null;&#xA;        Equipment acryEquip = null;&#xA;        try&#xA;        {&#xA;            //Get primaryEquipment unit&#xA;            unitFinder = (UnitFinder)Roastery.getBean(&quot;unitFinder&quot;);&#xA;&#xA;            //1 - IF Equipment Cntr &amp; Chas not null&#xA;            if(equipPrimary != null &amp;&amp; equipSecondary != null)&#xA;            {&#xA;                //A11 - Code for Chassis Lookup&#xA;                chasEquipId = findorCreateChassis(equipSecondary.replace(' ',''))&#xA;                if(chasEquipId == null){&#xA;                    fail( &quot;ERR_GVY_NowToN4_01 Cannot Find or Create Chassis Equipment :&quot;+equipSecondary);&#xA;                }&#xA;&#xA;                //1.1 Get Active ufv and Mount Chas&#xA;                def ufv = null;&#xA;                try{&#xA;                    ufv = findActiveUfv(equipPrimary);&#xA;                }catch(Exception e){&#xA;                    println('Container With NO ACTIVE UFV ='+equipPrimary)&#xA;                    return;&#xA;                }&#xA;&#xA;                if(ufv == null){ return; }&#xA;&#xA;                //1.2 Auto Load TO ALE Vessel&#xA;                if('VESSEL'.equals(position)){  //Auto Load Code for ALE&#xA;                    if(equipSecondary == null){&#xA;                        return;&#xA;                    } //A17&#xA;                    autoUnitLoad(position, ufv, equipSecondary)&#xA;                    return;&#xA;                }&#xA;&#xA;                Unit dismountedUnit = null;&#xA;                def attachedUnit = null;&#xA;                def map =  getActiveChassis(chassisEquipList,equipPrimary, complex, unitFinder) //101&#xA;                if(map != null){&#xA;                    Iterator it = map.keySet().iterator();&#xA;                    while (it.hasNext()){&#xA;                        def aEquipMap = it.next();&#xA;                        chasEquipId = aEquipMap   //101&#xA;                        attachedUnit = map.get(aEquipMap)&#xA;                    }&#xA;                }&#xA;                Equipment eq = Equipment.findEquipment(chasEquipId);&#xA;&#xA;                def attachedUnitId = ''&#xA;                if(attachedUnit != null){&#xA;                    attachedUnitId = attachedUnit.unitId&#xA;                }else{&#xA;                    println(&quot;Attacehd unit is null maybe mount at ingate equipPrimary=&quot;+equipPrimary+&quot; equipSecondary=&quot;+equipSecondary)&#xA;                }&#xA;                //1.3 Dismount Attached unit if not current unit passed by now&#xA;                if(attachedUnit != null &amp;&amp; !equipPrimary.equals(attachedUnitId)&#xA;                        &amp;&amp; 'CONTAINER'.equals(attachedUnit.unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass.key)){&#xA;                    dismountChassis(attachedUnit,eq,unitFinder);&#xA;                    println(&quot;Dismounted N4 Chassis=&quot;+equipSecondary+&quot;  attachedUnitId&quot;+attachedUnitId)&#xA;                }&#xA;                //1.4 If there are active bare chassis in the Yard then Retire those&#xA;                def equipId  = dismountedUnit != null ? dismountedUnit.unitId : chasEquipId&#xA;                if(equipId != null &amp;&amp; !equipId.contains('swiped')){&#xA;                    println(&quot;equipId=&quot;+equipId+&quot; dismount=&quot;+(dismountedUnit != null ? dismountedUnit.unitId : &quot;NO-DISMOUNT&quot;))&#xA;                    acryEquip = retireBareChassis(equipId, complex, unitFinder)&#xA;                }&#xA;                //1.5 Compare UFV to update Position&#xA;                if(equipPrimary.equals(attachedUnitId)){&#xA;                    println(&quot;SAME UNIT Check for Position update :equipPrimary=&quot;+equipPrimary+&quot; attachedUnit=&quot;+attachedUnitId)&#xA;                    def updatePosUnit = ufv.getUfvUnit()&#xA;                    def slot = ufv.ufvLastKnownPosition.posSlot&#xA;                    if((slot != null &amp;&amp; !slot.equals(position)) &amp;&amp;&#xA;                            !ufv.ufvLastKnownPosition.posLocType.equals(LocTypeEnum.VESSEL) &amp;&amp; !position.startsWith('TR-')){ //A1&#xA;                        updatePosition(updatePosUnit, position, complex, unitFinder)&#xA;                    }&#xA;                }else if(!equipPrimary.equals(attachedUnitId)){&#xA;                    def mountUnitUfv = findActiveUfv(equipPrimary);&#xA;                    def mountUnit = mountUnitUfv.getUfvUnit()&#xA;&#xA;                    //Dismount chassis if there is a chassis attached&#xA;                    dismountChassis(mountUnit,eq,unitFinder);&#xA;&#xA;                    mountChassis(mountUnitUfv,chasEquipId,acryEquip)&#xA;&#xA;                    def slot = mountUnitUfv.ufvLastKnownPosition.posSlot&#xA;                    if((slot != null &amp;&amp; !slot.equals(position)) &amp;&amp;&#xA;                            !mountUnitUfv.ufvLastKnownPosition.posLocType.equals(LocTypeEnum.VESSEL) &amp;&amp; !position.startsWith('TR-')){ //A1&#xA;                        //println(&quot;slot=&quot;+slot+&quot; mountUnit=&quot;+mountUnit)&#xA;                        updatePosition(mountUnit, position, complex, unitFinder)&#xA;                    }&#xA;                }&#xA;&#xA;            }else if(equipPrimary != null &amp;&amp; equipSecondary == null){&#xA;&#xA;                if('VESSEL'.equals(position)){  //A17 - Auto Load Code for ALE&#xA;                    return;&#xA;                }&#xA;                //Get Chassis FullId&#xA;                chasEquipId = findorCreateChassis(equipPrimary.replace(' ',''))&#xA;                Unit attachedUnit = null;&#xA;                def map =  getActiveChassis(chassisEquipList,equipPrimary, complex, unitFinder)&#xA;                if(map != null){&#xA;                    Iterator it = map.keySet().iterator();&#xA;                    while (it.hasNext()){&#xA;                        def aEquipMap = it.next();&#xA;                        chasEquipId = aEquipMap&#xA;                        attachedUnit = map.get(aEquipMap)&#xA;                    }&#xA;                }&#xA;&#xA;                if(chasEquipId == null){&#xA;                    fail( &quot;ERR_GVY_NowToN4_02 Cannot Find or Create Chassis Equipment :&quot;+equipPrimary);&#xA;                }&#xA;&#xA;                //Handel UfvVisit=Departed and UnitVisit=ACTIVE condition&#xA;                Unit oldUnitAttached =  attachedUnit;&#xA;                if(attachedUnit != null &amp;&amp; !UnitVisitStateEnum.ACTIVE.equals(attachedUnit.unitActiveUfv.ufvVisitState)){&#xA;                    //A21  dismountChassis(attachedUnit); //A8&#xA;                    attachedUnit = null;&#xA;                }//Find Unit on Vessel&#xA;&#xA;                //Find attached unit for chassis &amp; check if its in the same facility&#xA;                //def attachedUnit = findAttachedUnit(chasEquipId,complex,unitFinder)&#xA;                def attchEquipClass = null;&#xA;&#xA;                if(attachedUnit != null){&#xA;                    attchEquipClass = getEquipClass(attachedUnit)&#xA;                    def facilityId = attachedUnit.getFieldValue(&quot;unitActiveUfv.ufvFacility.fcyId&quot;)&#xA;                    if(facilityId != null &amp;&amp; !facilityId.equals(ContextHelper.getThreadFacility().getFcyId())){&#xA;                        //fail( &quot;Attached unit is not in the Current Facility&quot;);&#xA;                        println(&quot;Attached unit not in the Current Facility : Dismounted&quot;)&#xA;                        //A21  dismountChassis(attachedUnit)&#xA;                        attachedUnit = null;   attchEquipClass=null;&#xA;                    }&#xA;                }&#xA;&#xA;                println(&quot;chasEquipId=&quot;+chasEquipId+&quot;attachedUnit=&quot;+attachedUnit+&quot;  attchEquipClass=&quot;+attchEquipClass)&#xA;                //To Handel New Chassis Equipment Created&#xA;                if(attachedUnit == null || (attachedUnit != null &amp;&amp; 'CHASSIS'.equals(attchEquipClass))){ //Bare Chassis psition update&#xA;                    def activeBareChas = findActiveUnit(chasEquipId, complex, unitFinder)&#xA;                    println(&quot;activeBareChas=&quot;+activeBareChas)&#xA;                    if(activeBareChas == null &amp;&amp; !position.startsWith('TR-') &amp;&amp; !chasEquipId.startsWith('YC89')){&#xA;                        def equipment = Equipment.loadEquipment(chasEquipId);&#xA;                        try {&#xA;                            gvyApi.getGroovyClassInstance(&quot;DetachChassisFromUnitInComplex&quot;).detachChassisFromDepartedUnit(oldUnitAttached, gvyApi);&#xA;                        } catch (Exception e) {&#xA;                            //&#xA;                        }&#xA;                        UnitFacilityVisit chasUfv = getMgr().createYardBornUnit(facility, equipment, position, &quot;Now posted New Chassis&quot;)&#xA;                        def chasUnit = chasUfv.ufvUnit&#xA;                        println(&quot;Now posted New Chassis=&quot;+chasEquipId)&#xA;&#xA;                        chasUnit.setUnitLineOperator(LineOperator.findLineOperatorById('MAT'))&#xA;                        chasUnit.setUnitFreightKind(FreightKindEnum.MTY);&#xA;                        if(!position.startsWith('TR-')){&#xA;                            updatePosition(chasUnit, position, complex, unitFinder)&#xA;                        }&#xA;                    }&#xA;&#xA;                    if(attachedUnit != null &amp;&amp; activeBareChas != null &amp;&amp; !position.startsWith('TR-') &amp;&amp; 'CHASSIS'.equals(attchEquipClass)){&#xA;                        //2 - Update Chassis Position&#xA;                        updatePosition(attachedUnit, position, complex, unitFinder)&#xA;                    }&#xA;&#xA;                }else if(note.contains('nowborn') &amp;&amp; attchEquipClass.equals('CONTAINER')){ //Mount //3 - Now Born Message&#xA;                    mountChassis(attachedUnit.unitActiveUfv,chasEquipId,acryEquip)&#xA;                    // compare ufv position to position recieved from messages&#xA;                    def slot = attachedUnit.unitActiveUfv.ufvLastKnownPosition.posSlot&#xA;                    if(slot == null || !slot.equals(position) &amp;&amp; !position.startsWith('TR-')){&#xA;                        updatePosition(attachedUnit, position, complex, unitFinder)&#xA;                    }&#xA;                    println(&quot;nowborn mounted Cntr=&quot;+attachedUnit.unitId)&#xA;                }//4 - Dismount&#xA;                else if(!note.contains('nowborn') &amp;&amp; attchEquipClass.equals('CONTAINER')) { //Dismount&#xA;                    if(!position.startsWith('TR-') &amp;&amp; attachedUnit != null ){&#xA;                        def dismountedUnit = null; //A21  dismountChassis(attachedUnit)//A4&#xA;                        if(dismountedUnit != null){&#xA;                            updatePosition(dismountedUnit, position, complex, unitFinder)&#xA;                            println(&quot;Dismounted Cntr for valid bare Chas Position =&quot;+dismountedUnit.unitId)&#xA;                        }&#xA;                    }&#xA;                }else{&#xA;                    //Else Throw a failed maessage back&#xA;                    fail( &quot;Bad Messages Type : Now Message Didnt Process&quot;);&#xA;                }&#xA;&#xA;            }//Else If Ends&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;            if(e.getMessage() != null &amp;&amp; !e.getMessage().contains(&quot;NO_EMAIL&quot;)){ //A18&#xA;                emailSender = emailSender != null ? emailSender : getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;                emailSender.custSendEmail(emailTo, &quot;NowToN4:&quot;+equipPrimary+&quot; Message Processing Error &quot;, e.getMessage());&#xA;            }//If Ends&#xA;        }//Catch Ends&#xA;    }//Method process Ends&#xA;&#xA;    public Equipment retireBareChassis(String equipId, Object complex, UnitFinder uf){&#xA;        def inEquipment = null;&#xA;        def activeUnit = null&#xA;&#xA;        inEquipment = Equipment.loadEquipment(equipId);&#xA;        activeUnit = uf.findActiveUnit(complex, inEquipment)&#xA;        println('inEquipment='+inEquipment+'  activeUnit='+activeUnit)&#xA;&#xA;        if(activeUnit == null){&#xA;            return;&#xA;        }&#xA;&#xA;        //A12 - Accessory&#xA;        UnitEquipment acryUnitEquip = activeUnit.getAccessoryOnChs();&#xA;        Equipment acryEq = acryUnitEquip != null ? acryUnitEquip.getUeEquipment() : null&#xA;        def equipmentClass = getEquipClass(activeUnit)&#xA;&#xA;        //IF Bare active Chassis&#xA;        if(equipmentClass.equals('CHASSIS')){&#xA;            activeUnit.makeRetired()&#xA;            println(&quot;After Retiring Chas=&quot;+equipId)&#xA;        }&#xA;        return acryEq;&#xA;    }&#xA;&#xA;&#xA;    public void updatePosition(Unit unit, String inYardSlot,Object complex, Object unitFinderObj){&#xA;        try{&#xA;            if(unit == null){&#xA;                fail( &quot;NowToN4_GroovyError_02 Cannot Update Position as Unit value is Null&quot;);&#xA;            }&#xA;            def inUfv = null;&#xA;            def inFacility = ContextHelper.getThreadFacility()&#xA;            inUfv = unit.unitActiveUfv&#xA;&#xA;            Yard inYard =  Yard.findYard(&quot;SI&quot;, inFacility)&#xA;&#xA;            // Peter Seiler replace Position with LocPosition&#xA;&#xA;            LocPosition pos = LocPosition.createYardPosition(inYard, inYardSlot, null, unit.getBasicLength(), true);&#xA;            inUfv.move(pos, null);&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;            fail( &quot;NowToN4_GroovyError_03 Error Updating the Chassis Position =&quot;+inYardSlot);&#xA;        }&#xA;    }&#xA;&#xA;&#xA;    public void mountChassis(Object activeUfv, String chasEquipId, Object acryEquip){&#xA;        def inEquipment = Equipment.loadEquipment(chasEquipId);&#xA;        def unit = activeUfv.getUfvUnit()&#xA;        unit.attachCarriage(inEquipment)&#xA;        //A12 Mount accessory to Chassis Marriage unit&#xA;        if(acryEquip != null){ unit.attachAccessoryOnChassis(acryEquip) }&#xA;    }&#xA;&#xA;    public String getEquipClass(Object unit){&#xA;        def equiClass = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;        def equipmentClass = equiClass != null ? equiClass.getKey() : equiClass&#xA;        return equipmentClass&#xA;    }&#xA;&#xA;    public Object findActiveUnit(String equipId, Object complex, UnitFinder uf){&#xA;        def inEquipment = Equipment.loadEquipment(equipId);&#xA;        def unit = uf.findActiveUnit(complex, inEquipment)&#xA;    }&#xA;&#xA;    /* public  Object findAttachedUnit(String equipId,Object complex, UnitFinder uf){ //105 Issue&#xA;&#xA;       def inEquipment = Equipment.loadEquipment(equipId);&#xA;       def attachedUnit = uf.findAttachedUnit(complex,inEquipment)  //MayBe use this findActiveUeUsingEqInAnyRole&#xA;       //Additional Level for Checking as under some instances findAttachedUnit is not returning the Attacehd unit&#xA;       if(attachedUnit == null){&#xA;           println(&quot;Second Level Check:&quot;+equipId)&#xA;           UnitEquipment unitEq = uf.findActiveUeUsingEqInAnyRole(null, complex, inEquipment)&#xA;           attachedUnit = unitEq != null ? unitEq.ueUnit : null ;&#xA;       }&#xA;       println(&quot;GET ACTIVE UNIT =&quot;+(attachedUnit != null ? attachedUnit.getFieldValue(&quot;UnitVisitState&quot;) : ''))&#xA;       if(attachedUnit != null &amp;&amp; UnitVisitStateEnum.ACTIVE.equals(attachedUnit.getFieldValue(&quot;UnitVisitState&quot;))){&#xA;           return attachedUnit&#xA;       }&#xA;       return null;&#xA;    }*/&#xA;    //A14&#xA;    public Object findActiveUeUsingEquipmentInAnyRole(String equipId,Object complex, UnitFinder uf){ //107 Issue&#xA;&#xA;        def inEquipment = Equipment.loadEquipment(equipId);&#xA;        UnitEquipment unitEq = uf.findActiveUeUsingEqInAnyRole(null, complex, inEquipment)&#xA;        def attachedUnit = unitEq != null ? unitEq.ueUnit : null ;&#xA;&#xA;        println(&quot;findActiveUeUsingEquipmentInAnyRole =&quot;+attachedUnit+&quot;  STATE&quot;+(attachedUnit != null ? attachedUnit.getFieldValue(&quot;UnitVisitState&quot;) : ''))&#xA;&#xA;        if(attachedUnit != null &amp;&amp; UnitVisitStateEnum.ACTIVE.equals(attachedUnit.getFieldValue(&quot;UnitVisitState&quot;))){&#xA;            return attachedUnit&#xA;        }&#xA;        return null;&#xA;    }&#xA;&#xA;&#xA;    //Strips out zero from single position Stalls(example C1409 to C149)&#xA;    //NSS to PKZ heap&#xA;    public String manipulatePosition(String position){&#xA;        def pos = position&#xA;        if(position != null &amp;&amp; position.length() &gt;= 5 &amp;&amp; position.charAt(3) == '0'){&#xA;            pos = position.substring(0,3)+position.substring(4)&#xA;        }else if(position != null &amp;&amp; position.equals('NSS')){&#xA;            pos = 'MIA'&#xA;        }&#xA;        return pos&#xA;    }&#xA;&#xA;&#xA;    /*&#xA;    * 1. Method finds Chassis FullId or Pad's CheckDigit for lookup&#xA;    * 2. IF Not Chas Equipment found then Create a Chassis&#xA;    */&#xA;    public String findCreateFullIdOrPadCheckDigit(String inChsId) {&#xA;        String chsIdFull = null;&#xA;        Chassis chs = Chassis.findChassis(inChsId);&#xA;        if(chs != null &amp;&amp; LifeCycleStateEnum.OBSOLETE.equals(chs.eqLifeCycleState)){ //A15&#xA;            emailSender = emailSender != null ? emailSender : getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;            emailSender.custSendEmail(&quot;1aktosdevteam@matson.com&quot;, &quot;Chassis:&quot;+chs.getEqIdFull()+&quot; Is Obsolete&quot;, &quot;ChasRfid:&quot;+chs.getEqIdFull()+&quot; Is Obsolete&quot;);&#xA;            chs = null;&#xA;        }&#xA;&#xA;        if(chs != null){&#xA;            chassisEquipList = new ArrayList();&#xA;            chassisEquipList.add(chs);&#xA;            chsIdFull = chs.getEqIdFull();&#xA;            chs = null;&#xA;        }&#xA;        //println(&quot;inChsId=&quot;+inChsId+&quot; chs=&quot;+chs)&#xA;        if (chs == null) {&#xA;            if (inChsId.length() &lt;= 11) { //A15&#xA;                DomainQuery dq = QueryUtils.createDomainQuery(&quot;Chassis&quot;).addDqPredicate(PredicateFactory.like(ArgoRefField.EQ_ID_FULL, (new StringBuilder()).append(inChsId).append(&quot;_&quot;).toString())).addDqPredicate(PredicateFactory.ne(ArgoRefField.EQ_LIFE_CYCLE_STATE,LifeCycleStateEnum.OBSOLETE)) ;&#xA;                List eqs = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;                //chassisEquipList = eqs;&#xA;                if(eqs != null &amp;&amp; eqs.size() &gt;= 1){&#xA;                    chassisEquipList = new ArrayList();&#xA;                    chassisEquipList.addAll(eqs)&#xA;                }&#xA;                if (eqs != null &amp;&amp; eqs.size() &gt;= 1) {&#xA;                    def temp = null;&#xA;                    for(aEq in eqs)&#xA;                    {&#xA;                        chs = (Chassis)aEq;&#xA;                        //chsIdFull = chs.getEqIdFull();&#xA;                        if(temp == null){&#xA;                            temp = chs.getEqIdFull()&#xA;                        }else if(temp != null &amp;&amp; temp.toUpperCase().endsWith(&quot;X&quot;) &amp;&amp; !temp.equals(chs.getEqIdFull())){&#xA;                            temp = chs.getEqIdFull()&#xA;                        }&#xA;                    }&#xA;                    chsIdFull = temp&#xA;                }else if ((eqs == null || eqs.size() == 0) &amp;&amp; (chassisEquipList == null || chassisEquipList.size() == 0)){&#xA;                    String temp = &quot;&quot;;&#xA;                    if(inChsId.length() == 11){&#xA;                        temp = &quot;BAD CHASSIS TAG - CHASSIS TAGGED WITH CHECKDIGIT =&quot;+inChsId+&quot;  YARD_POSITION=&quot;+position;&#xA;                    }else{&#xA;                        temp = &quot;CREATE CHASSIS CALL=&quot;+inChsId+&quot;    YARD_POSITION=&quot;+position; //A101&#xA;                        //chsIdFull = createChassis(inChsId)&#xA;                    }&#xA;&#xA;                    if(!temp.contains(&quot;YARD_POSITION=TR-&quot;)){ //A19&#xA;                        emailSender = emailSender != null ? emailSender : getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;                        emailSender.custSendEmail(chasErrorEmail, inChsId+&quot;: NEW CHASSIS READ &quot;, temp); //A101&#xA;                    }&#xA;                    throw new Exception(&quot;NO_EMAIL&quot;);&#xA;                }&#xA;            }&#xA;        } else {&#xA;            chsIdFull = chs.getEqIdFull();&#xA;        }&#xA;        return chsIdFull;&#xA;    }&#xA;&#xA;&#xA;    /*&#xA;    * 1. IF New Id length is greater than ID recieved then return=NEWID&#xA;    * 2. IF newId Ends with a Checkdigit X and newId and Recieved Id have same lengths then do nothing&#xA;    * 3. IF Recived Id is less then newId then Skip Renumber&#xA;    * 4.&#xA;    */&#xA;    public String findorCreateChassis(String id)&#xA;    {&#xA;        String newId = findCreateFullIdOrPadCheckDigit(id);&#xA;        println(&quot;New = &quot;+newId+&quot; recieved=&quot;+id);&#xA;        try&#xA;        {&#xA;            if(newId == null){&#xA;                throw new Exception(&quot;Tos Warning for check digit lookup &quot;+id+&quot; system has no match&quot;);&#xA;            }&#xA;&#xA;            if(!newId.equals(id)) {&#xA;                //println(&quot;Tos Warning for check digit lookup &quot;+id+&quot; system has &quot;+newId);&#xA;                if(newId.length() &gt; id.length()+1) {&#xA;                    newId = id;&#xA;                }&#xA;                else if( id.toUpperCase().endsWith(&quot;X&quot;) &amp;&amp;  id.length() == newId.length()) {&#xA;                    //println(&quot;Skipping renum for &quot;+id+ &quot; id found = &quot;+newId);&#xA;                }&#xA;                else if(id.length() &lt; newId.length()) {&#xA;                    //println(&quot;Skipping renum for &quot;+id+ &quot; id found = &quot;+newId);&#xA;                } else {&#xA;                    //This code Might never be reached&#xA;                    String renumString = &quot; Renum[&quot;+newId+&quot;|&quot;+id+&quot;]&quot;;&#xA;                    def gvyRenum = getGroovyClassInstance(&quot;GvyRenumberUnit&quot;)&#xA;                    gvyRenum.renumber(renumString)&#xA;                }&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;            throw e;&#xA;        }&#xA;        return newId;&#xA;    }&#xA;&#xA;    public String createChassis(String chasEquipId){&#xA;        if(chasEquipId == null) return null;&#xA;        //Chassis Being Created with space&#xA;        chasEquipId = chasEquipId.replace(' ','')&#xA;        def equipId = chasEquipId.length() &lt; 11 ? chasEquipId+'X' : chasEquipId&#xA;        Chassis newChas = Chassis.createChassis(equipId, 'C40', DataSourceEnum.SNX)&#xA;        ScopedBizUnit bizOwner = ScopedBizUnit.findEquipmentOwner('MATU')&#xA;        ScopedBizUnit bizOperator = ScopedBizUnit.findEquipmentOperator('MAT')&#xA;        newChas.setFieldValue(ArgoBizMetafield.EQUIPMENT_OWNER, bizOwner.bzuGkey)&#xA;        newChas.setFieldValue(ArgoBizMetafield.EQUIPMENT_OPERATOR, bizOperator.bzuGkey)&#xA;        String chasId = newChas.getEqIdFull();&#xA;        def cntrNbr = equipSecondary != null ? equipPrimary : 'N/A'&#xA;        emailSender = emailSender != null ? emailSender : getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;        emailSender.custSendEmail(emailTo, chasId+&quot; New Chassis Equipment Created in N4.&quot;, +chasId+&quot; Chassis has been Created.&quot;+&quot;\nContainer: &quot;+cntrNbr+&quot;\nStall: &quot;+position);&#xA;&#xA;        return  chasId&#xA;    }&#xA;&#xA;    private UnitManager getMgr()&#xA;    {&#xA;        return (UnitManager)Roastery.getBean(&quot;unitManager&quot;);&#xA;    }&#xA;&#xA;    private Map getActiveChassis(Object chassisEquipList,String equipPrimary, Object complex, Object unitFinder){&#xA;        def attachedUnit = null;&#xA;        def chasEquipId = '';&#xA;        def chasAttachedUnit = null; //A7&#xA;&#xA;        if(chassisEquipList == null || chassisEquipList.size() == 0){&#xA;            return null;&#xA;        }&#xA;        try&#xA;        {&#xA;            //Dismount case: Check if chassis is attached to another equipment&#xA;            for(aEquip in chassisEquipList){&#xA;                Chassis chs = (Chassis)aEquip&#xA;                def tempChs = chs.getEqIdFull()&#xA;                //A14 - attachedUnit = findAttachedUnit(tempChs,complex,unitFinder) //101&#xA;                attachedUnit = findActiveUeUsingEquipmentInAnyRole(tempChs,complex,unitFinder)&#xA;                //println('aEquip in chassisEquipList='+tempChs+&quot;  attachedUnit=&quot;+attachedUnit)&#xA;                if(attachedUnit != null &amp;&amp; 'CONTAINER'.equals(attachedUnit.unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass.key)&#xA;                        &amp;&amp; equipPrimary.equals(attachedUnit.unitId)){&#xA;                    chasEquipId = tempChs&#xA;                    chasAttachedUnit = attachedUnit&#xA;                    break;&#xA;                }else if(tempChs.endsWith(&quot;X&quot;) &amp;&amp; !tempChs.equals(chs.getEqIdFull())){&#xA;                    chasEquipId = tempChs&#xA;                    chasAttachedUnit = attachedUnit&#xA;                }else if(tempChs.length() == chasEquipId.length()+1){&#xA;                    chasEquipId = tempChs&#xA;                    chasAttachedUnit = attachedUnit&#xA;                }else{&#xA;                    chasEquipId = chasEquipId.length() == 0 ? tempChs : chasEquipId&#xA;                    chasAttachedUnit = chasAttachedUnit == null ? attachedUnit : chasAttachedUnit&#xA;                }&#xA;            }//For Ends&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;            throw e;&#xA;        }&#xA;        println(&quot;chasEquipId=&quot;+chasEquipId+&quot;  attachedUnit=&quot;+chasAttachedUnit)&#xA;        Map map = new HashMap();&#xA;        map.put(chasEquipId,chasAttachedUnit);&#xA;        return map;&#xA;    }&#xA;&#xA;    public void autoUnitLoad(String position, Object unitfacilityvisit, String equipSecondary){&#xA;&#xA;        def posObj = unitfacilityvisit.getFinalPlannedPosition();&#xA;&#xA;        Boolean hasChassis = equipSecondary != null ? Boolean.valueOf(true) : Boolean.valueOf(false);&#xA;&#xA;        if(posObj == null){ return; } // No Planned Position for Vessel&#xA;&#xA;        def slot = posObj.getPosSlot()&#xA;        def loc = posObj.getPosLocId()&#xA;        def strPlannedPos = posObj != null ? &quot;&quot;+posObj : ''&#xA;        if(strPlannedPos.startsWith('V-ALE')){&#xA;            ILocationLoader cl = (ILocationLoader)Roastery.getBean(&quot;carrierLoader&quot;);&#xA;            ILocation carrierVisit = cl.loadCarrierByGkey(posObj.getPosLocType(), posObj.getPosLocGkey());&#xA;            if(carrierVisit != null){&#xA;                getMgr().loadUnitToOutboundVisit(unitfacilityvisit, carrierVisit, null, slot, null, hasChassis);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    public Object dismountChassis(Object unit,Equipment eq, UnitFinder uf){&#xA;        def carriage = unit.getFieldValue(&quot;unitCarriageUe.ueEquipment.eqIdFull&quot;)&#xA;        if(carriage == null){ return null }&#xA;        def unitPosition = unit.unitActiveUfv.ufvLastKnownPosition.posSlot&#xA;        def dismountedUnit = null;&#xA;        try {&#xA;            gvyApi.getGroovyClassInstance(&quot;DetachChassisFromUnitInComplex&quot;).detachChassisFromDepartedUnit(unit, gvyApi);&#xA;        } catch (Exception e) {&#xA;            //&#xA;        }&#xA;        if(!LocTypeEnum.YARD.equals(unit.unitActiveUfv.ufvLastKnownPosition.posLocType) || !UnitVisitStateEnum.ACTIVE.equals(unit.unitActiveUfv.ufvVisitState)){ //A8&#xA;&#xA;            unit.swipeChsByOwnersChs()&#xA;            /*  unitPosition = &quot;PKZ&quot; // Default value for position swipe updates&#xA;         def equipment = Equipment.loadEquipment(carriage);&#xA;         UnitFacilityVisit chasUfv = getMgr().createYardBornUnit(facility, equipment, unitPosition, &quot;Now posted New Chassis&quot;)&#xA;         def chasUnit = chasUfv.ufvUnit&#xA;         println(&quot;swipeChsByOwnersChs and Create New Chassis=&quot;+chasEquipId)&#xA;         chasUnit.setUnitLineOperator(LineOperator.findLineOperatorById('MAT'))&#xA;         chasUnit.setUnitFreightKind(FreightKindEnum.MTY);&#xA;         updatePosition(chasUnit, unitPosition, complex, unitFinder) //Position Update */&#xA;            //emailSender = emailSender != null ? emailSender : getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;            //emailSender.custSendEmail('1aktosdevteam@matson.com',&quot;ChassisRfid : Swiped Chassis&quot;+carriage+&quot; From CNTR &quot;+unit.unitId,&quot;ChassisRfid : Swiped Chassis&quot;+carriage+&quot; From CNTR &quot;+unit.unitId);&#xA;&#xA;        }else if(LocTypeEnum.YARD.equals(unit.unitActiveUfv.ufvLastKnownPosition.posLocType)){&#xA;            dismountedUnit = unit.dismount();&#xA;            updatePosition(dismountedUnit, unitPosition, complex, unitFinder) //Position Update&#xA;            //println(&quot;Dismounted chassis of Unit =&quot;+unit.unitId);&#xA;        }&#xA;        // The flush is required to synchronize memory state of the unit with database state of the unit&#xA;        HibernateApi.getInstance().flush()&#xA;        return dismountedUnit&#xA;    }&#xA;&#xA;} //Class Ends" />
<digital-asset id="GvyInjAulk" short-description="ACETS ULK Process" is-pre-deployed="N" groovy-code="/*&#xA;**********************************************************************&#xA;* Srno   Date&#x9;             Changer&#x9; Change Description&#xA;* A1     12/29/08       Glenn Raposo&#x9; Unit Field Tracker code Added&#xA;* A2     04/29/09       Steven Bauer     Added reroute on return to storage.&#xA;* A3&#x9; 05/26/09&#x9;Steven Bauer&#x9; Look unit at complex level.&#xA;* A4     06/02/09&#x9;Steven Bauer&#x9; 403 - Supress all updates before GetNV&#xA;* A5   GR   12/13/11  Update HOLD FOR LNK&#xA;**********************************************************************&#xA;*/&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.argo.business.atoms.*;&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.orders.business.eqorders.EquipmentOrderManagerPea&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.argo.ContextHelper;&#xA;import com.navis.argo.business.model.CarrierVisit;&#xA;import com.navis.argo.business.api.ServicesManager;&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.argo.business.api.GroovyApi&#xA;&#xA;&#xA;&#xA;class GvyInjAulk extends GroovyInjectionBase {&#xA;&#x9;public String execute(Map inParameters) {&#xA;&#x9;&#x9;com.navis.argo.ContextHelper.setThreadExternalUser(&quot;ACETS&quot;);&#xA;&#xA;&#x9;&#x9;final String  emailFrom = '1aktosdevteam@matson.com'&#xA;  &#x9;&#x9;final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;def note = &quot;\n\nPlease fix either the booking or unit and review the routing after correction&quot;;&#xA;&#xA;&#x9;&#x9;def inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;);&#xA;&#xA;&#x9;&#x9;def ctrId = (String) inParameters.get(&quot;equipment-id&quot;);&#xA;&#x9;&#x9;def recorder = (String) inParameters.get(&quot;recorder&quot;);&#xA;&#xA;&#x9;&#x9;// find the unit&#xA;&#x9;&#x9;def ufv;&#xA;&#x9;&#x9;def unit;&#xA;&#x9;&#x9;//A1- tracker&#xA;&#x9;    &#x9;def tracker;&#xA;        &#x9;GroovyApi gvyApi = new GroovyApi();&#xA;                def unitLookup = gvyApi.getGroovyClassInstance(&quot;GvyUnitLookup&quot;);&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;//ufv = findActiveUfv(ctrId);&#xA;&#x9;&#x9;&#x9;//A6&#xA;&#x9;&#x9;&#x9;ufv = unitLookup.getUfvActiveInComplex(ctrId);&#xA;&#x9;&#x9;&#x9;if(ufv == null) {&#xA;&#x9;&#x9;&#x9;    throw new Exception(&quot;Could not find active unit&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;unit = ufv.getUfvUnit();&#xA;&#x9;&#x9;&#x9;//A1- Tracker Change&#xA;            def gvyUnitFldTracker = gvyApi.getGroovyClassInstance(&quot;GvyUnitFieldTracker&quot;);&#xA;            tracker = gvyUnitFldTracker.createFieldChangeTracker(unit)&#xA;&#x9;&#x9;} catch ( Exception ex) {&#xA;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo,&quot; ULK error for Unit &quot; +ctrId ,&quot;Could not find active unit: &quot; + ctrId+note);&#xA;&#x9;&#x9;&#x9;fail(&quot;ERR_GVY_ULK_001. Could not find active unit: &quot; + ctrId);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if ( unit == null) {&#xA;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo,&quot; ULK error for Unit &quot; +ctrId ,&quot;Could not find active unit: &quot; + ctrId+note);&#xA;&#x9;&#x9;&#x9;fail(&quot;ERR_GVY_ULK_001. Could not find active unit: &quot; + ctrId);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;//A4&#xA;&#x9;&#x9;if(isStowplan(unit)) return;&#xA;&#xA;&#x9;&#x9;def transitState = ufv.getUfvTransitState();&#xA; &#x9;&#x9;def obCarrierMode = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCarrierMode&quot;);&#xA;&#x9;&#x9;def obCarrier = unit.getFieldValue( &quot;unitActiveUfv.ufvActualObCv.cvId&quot;);&#xA;&#x9;&#x9;log( &quot;obCarrierMode = &quot; + obCarrierMode);&#xA;&#x9;&#x9;log( &quot;obCarrier = &quot; + obCarrier);&#xA;&#xA;&#x9;&#x9;if ( !(transitState.equals( UfvTransitStateEnum.S50_ECOUT) ||&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;transitState.equals( UfvTransitStateEnum.S30_ECIN) ||&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;transitState.equals( UfvTransitStateEnum.S20_INBOUND) ||&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;transitState.equals( UfvTransitStateEnum.S40_YARD))) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ( ((transitState.equals( UfvTransitStateEnum.S70_DEPARTED) ||&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;transitState.equals( UfvTransitStateEnum.S60_LOADED)) &amp;&amp;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;!isBarge( obCarrier))) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo,&quot; ULK error for Unit &quot; +ctrId ,&quot;The unit: &quot; + ctrId +&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; TransitState is not in DEPARTURED or LOAD and OB Carrier is not barge.&quot; +&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; And TransitState is not in YARD or INBOUND or EC/In or EC/out.&quot;+note);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;fail( &quot;ERR_GVY_ULK_002. The unit: &quot; + ctrId +&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; TransitState is not in DEPARTURED or LOAD and OB Carrier is not barge.&quot; +&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; And TransitState is not in YARD or INBOUND or EC/In or EC/out.&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;if ( transitState.equals( UfvTransitStateEnum.S60_LOADED) &amp;&amp; LocTypeEnum.VESSEL.equals( obCarrierMode)) {&#xA;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo,&quot; TransitState is LOADED and OB Carrier is VESSEL.&quot;+note);&#xA;&#x9;&#x9;&#x9;fail( &quot;ERR_GVY_ULK_003. The unit: &quot; + ctrId + &quot; TransitState is LOADED and OB Carrier is VESSEL.&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if ( UnitCategoryEnum.EXPORT.equals(unit.getUnitCategory())) {&#xA;&#x9;&#x9;&#x9;// find booking&#xA;&#x9;&#x9;&#x9;if(unit.unitFreightKind.name.equals(&quot;MTY&quot;)) {&#xA;&#x9;&#x9;&#x9;        // Save a reroute mty.&#xA;&#x9;&#x9;&#x9;        def declaredCv = null;&#xA;&#x9;&#x9;&#x9;        def intendedCv = null;&#xA;&#x9;&#x9;&#x9;        def actualCv = null;&#xA;&#x9;&#x9;&#x9;        def pol = null;&#xA;&#x9;&#x9;&#x9;        def opl = null;&#xA;&#xA;&#x9;&#x9;&#x9;        if(unit.unitRouting != null) {&#xA;&#x9;&#x9;&#x9;           declaredCv = unit.unitRouting.getRtgDeclaredCv();&#xA;&#x9;&#x9;&#x9;           pol =  unit.unitRouting.rtgPOL;&#xA;&#x9;&#x9;&#x9;           opl =  unit.unitRouting.rtgOPL;&#xA;&#x9;&#x9;&#x9;        }&#xA;&#x9;&#x9;&#x9;&#x9;if(unit.unitActiveUfv != null) {&#xA;&#x9;&#x9;&#x9;&#x9;   intendedCv = unit.unitActiveUfv.ufvIntendedObCv;&#xA;&#x9;&#x9;&#x9;           actualCv   = unit.unitActiveUfv.ufvActualObCv;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;        def servicesMgr = (ServicesManager)Roastery.getBean(&quot;servicesManager&quot;);&#xA;                                servicesMgr.applyGuardedPermission( &quot;RTN_TO_STORAGE&quot;, unit, null, null, &quot;ULK release&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;unit.returnToStorageUnit();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if(declaredCv != null) unit.unitRouting.setRtgDeclaredCv(declaredCv);&#xA;&#x9;&#x9;&#x9;&#x9;if(intendedCv != null) unit.unitActiveUfv.ufvIntendedObCv = intendedCv;&#xA;&#x9;&#x9;&#x9;&#x9;if(actualCv   != null) unit.unitActiveUfv.ufvActualObCv = actualCv;&#xA;&#x9;&#x9;&#x9;&#x9;if(pol != null) unit.unitRouting.rtgPOL = pol;&#xA;&#x9;&#x9;&#x9;&#x9;if(opl != null) unit.unitRouting.rtgOPL = opl;&#xA;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;def servicesMgr = (ServicesManager)Roastery.getBean(&quot;servicesManager&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;servicesMgr.applyHold(&quot;HOLD FOR LNK&quot;, unit, null, null, &quot;ULK BKG hold&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsBlNbr&quot;, &quot;CSR_ACTION_REQUIRED&quot;);&#xA;&#xA;&#x9;&#x9;def shipper = ScopedBizUnit.findOrCreateScopedBizUnit( &quot;CSACTION&quot;, BizRoleEnum.SHIPPER);&#xA;&#x9;&#x9;//unit.getUnitGoods().updateShipper( shipper);&#xA;&#xA;&#x9;&#x9;//unit.setFieldValue(&quot;unitGoods.gdsDestination&quot;, ContextHelper.getThreadFacility().getFcyId());&#xA;&#xA;&#x9;&#x9;Routing rtg = unit.getUnitRouting();&#xA;&#xA;&#x9;&#x9;if ( rtg == null) {&#xA;&#x9;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo,&quot; Can not find routing info for unit: &quot; + ctrId +note);&#xA;&#x9;&#x9;&#x9;&#x9;fail( &quot;ERR_GVY_ULK_007. Can not find routing info for unit: &quot; + ctrId);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;def rtgPoint = RoutingPoint.findRoutingPoint( ContextHelper.getThreadFacility().getFcyId());&#xA;&#x9;&#x9;//rtg.setRtgPOD1( rtgPoint);&#xA;&#xA;    &#x9;&#x9;//unit.setFieldValue(&quot;unitRemark&quot;, &quot;ACETS: &quot; + recorder);&#xA;&#x9;&#x9;def event = new GroovyEvent( null, unit);&#xA;&#x9;&#x9;//A1 - Tracker Change&#xA;       def changes = tracker.getChanges(unit);&#xA;       if(changes != null &amp;&amp; changes.getFieldChangeCount() != 0) {&#xA;        unit.recordUnitEvent(com.navis.argo.business.atoms.EventEnum.UNIT_PROPERTY_UPDATE,changes , &quot;Field Updated ULK Data&quot;);&#xA;       }&#xA;&#x9;&#x9;event.postNewEvent( &quot;ULK&quot;, &quot;ACETS: &quot; + recorder);&#xA;&#x9;}&#xA;&#xA;&#x9;private boolean isBarge( String vesvoy) {&#xA;&#x9;&#x9;&#x9;//def gvyBaseClass = new GroovyInjectionBase()&#xA;&#x9;  &#x9;def gvyUtil = getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;&#x9;  &#x9;def vType = gvyUtil.getVesselClassType( vesvoy);&#xA;&#x9;  &#x9;return vType == &quot;BARGE&quot; ? true : false;&#xA;&#x9;}&#xA;&#xA;     private boolean isStowplan(unit) {&#xA;        def remark = unit.unitRemark;&#xA;        if(remark == null) return false;&#xA;        return remark.startsWith(&quot;Stowplan Data&quot;);&#xA;    }&#xA;&#xA;}" />
<digital-asset id="GvyCmisPositionProcessDetail" short-description="GvyCmisPositionProcessDetail" is-pre-deployed="N" groovy-code="/*&#xA;* Srno Doer Date       Change&#xA;* A1   GR   06/25/10   Added Check to Overwrite misc1=% Only for LH vessels&#xA;* A2   GR   08/24/10   Added GEN_TRUCK &amp; BARGE to vesvoy=BLANK section&#xA;* A3   GR   08/30/10   Misc1 - value check for IB VygNbr&#xA;* A4   GR   09/13/10   vesvoy condition for SIT (YB units)&#xA;* A5   GR   08/26/10   Added BARGE to misc1=BLANK section&#xA;* A6   GR   09/17/10   Add Reroute criteria to set vesvoy for DAS&#xA;                       if POD updated and its HON or NIS then compute vesvoy for DAS&#xA;* A7   GR   10/03/10   Added null to actual veseel and voyage and compute for unit roll&#xA;* A8   GR   11/17/10   TRUCK value being set to Vessel under else condition&#xA;* A9   LC   03/26/13   Add doCmisDataRefresh method to separate event&#xA;*/&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.vessel.business.operation.VesselClass&#xA;import com.navis.vessel.business.operation.VesselClassHbr&#xA;import com.navis.vessel.business.atoms.VesselTypeEnum&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;&#xA;public class GvyCmisPositionProcessDetail {&#xA;&#xA;//MISC1&#xA;    def misc1Value = ''&#xA;    def aibcarrierMode = ''&#xA;&#xA;    public String doIt(Object u, Object gvyTxtMsgFmt, String eventType, Object event) {&#xA;        def positionProFldAttr = ''&#xA;        try {&#xA;            def gvyBaseClass = new GroovyInjectionBase()&#xA;            def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;            def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;&#xA;            def obcarrierChng = gvyEventUtil.wasFieldChanged(event, &quot;ufvIntendedObCv&quot;)&#xA;            obcarrierChng = obcarrierChng != null ? obcarrierChng : ''&#xA;            //A6&#xA;            //def podChng = gvyEventUtil.wasFieldChanged(event, &quot;rtgPOD1&quot;)&#xA;            //podChng = podChng != null ? podChng : ''&#xA;&#xA;            def previousDischPort = gvyEventUtil.getPreviousPropertyAsString(event, &quot;rtgPOD1&quot;);&#xA;            def gvyDomQueryObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisDomainQueryUtil&quot;)&#xA;            previousDischPort = gvyDomQueryObj.lookupRtgPOD(previousDischPort)&#xA;            previousDischPort = previousDischPort != null ? previousDischPort : &quot;&quot;&#xA;            def category = u.getFieldValue(&quot;unitCategory&quot;);&#xA;&#xA;            def currentDischPort = u.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;            /*def isHawaiiPort = UnitCategoryEnum.IMPORT.equals(category) &amp;&amp;&#xA;                    (&quot;HON&quot;.equals(previousDischPort) || gvyCmisUtil.isNISPort(previousDischPort)) ||&#xA;                    (&quot;HON&quot;.equals(currentDischPort) || gvyCmisUtil.isNISPort(currentDischPort))*/&#xA;            //A6 Ends&#xA;            //Verify Event Notes for unitRefersh&#xA;            def gvyEventObj = event.getEvent()&#xA;            def eventNotes = gvyEventObj.getEventNote()&#xA;            eventNotes = eventNotes != null ? eventNotes : &quot;&quot;&#xA;&#xA;            //Verifying if the event Changes the position Field&#xA;            def gvyFldUpdtObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventFieldUpdateFilter&quot;);&#xA;            boolean evntUpdatesFlg = gvyFldUpdtObj.evntFilterOnPositionFldChng(eventType)&#xA;            if (!eventNotes.contains(&quot;Unit Correction&quot;) &amp;&amp; evntUpdatesFlg&#xA;                    || ((eventType.equals('UNIT_REROUTE') /*&amp;&amp; !isHawaiiPort*/) &amp;&amp; (eventType.equals('UNIT_REROUTE') &amp;&amp; obcarrierChng.equals(Boolean.FALSE)))) {&#xA;                positionProFldAttr = positionPercentageValue(gvyTxtMsgFmt)&#xA;                return positionProFldAttr&#xA;            }&#xA;&#xA;            def lkpLocType = u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;            def lkpLocTypeKey = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;&#xA;            def lkpCarrierId = u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocId&quot;)&#xA;&#xA;            def _category = u.getFieldValue(&quot;unitCategory&quot;)&#xA;            def categoryKey = _category != null ? _category.getKey() : ''&#xA;&#xA;            def _transitState = u.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;            def transitStateKey = _transitState != null ? _transitState.getKey() : ''&#xA;&#xA;            def _drayStatus = u.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;            def drayStatusKey = _drayStatus != null ? _drayStatus.getKey() : _drayStatus&#xA;&#xA;            def _freightkind = u.getFieldValue(&quot;unitFreightKind&quot;)&#xA;            def freightkind = _freightkind != null ? _freightkind.getKey() : ''&#xA;&#xA;            def dischPort = u.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;            dischPort = dischPort != null ? dischPort : ''&#xA;&#xA;            def ibVesselType = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;            def ibVesselTypeKey = ibVesselType != null ? ibVesselType.getKey() : gvyCmisUtil.getVesClassTypeWithNoVisitEntry(u)&#xA;&#xA;            def obVesselType = u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;            def obVesselTypeKey = obVesselType != null ? obVesselType.getKey() : ''&#xA;&#xA;            //ReArrange Fields Used by VESVOY / TRUCK / MISC&#xA;            aibcarrierMode = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCarrierMode&quot;)&#xA;            aibcarrierMode = aibcarrierMode != null ? aibcarrierMode.getKey() : ''&#xA;            def inBoundCarrier = aibcarrierMode.equals('VESSEL') ? (ibVesselTypeKey.trim().length() &gt; 1 ? ibVesselTypeKey : 'GEN_VESSEL') : aibcarrierMode&#xA;&#xA;            def aobcarrierMode = u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCarrierMode&quot;)&#xA;            aobcarrierMode = aobcarrierMode != null ? aobcarrierMode.getKey() : ''&#xA;            def outBoundCarrier = aobcarrierMode.equals('VESSEL') ? (obVesselTypeKey.trim().length() &gt; 1 ? obVesselTypeKey : 'GEN_VESSEL') : aobcarrierMode&#xA;&#xA;            def aibcarrierId = ''&#xA;            def aibcarrierOperatorId = ''&#xA;            def aobcarrierId = ''&#xA;&#xA;            //A11 - Change Made for Truck Code and TruckId switch on IB and OB carrier&#xA;            if (aibcarrierMode.equals('TRUCK')) {&#xA;                aibcarrierId = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.carrierOperatorId&quot;)&#xA;                aibcarrierOperatorId = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;)&#xA;            } else {&#xA;                aibcarrierId = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;)&#xA;                aibcarrierOperatorId = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.carrierOperatorId&quot;)&#xA;            }&#xA;            if (aobcarrierMode.equals('TRUCK')) {&#xA;                aobcarrierId = u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.carrierOperatorId&quot;)&#xA;            } else {&#xA;                aobcarrierId = u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;)&#xA;            }&#xA;&#xA;            //A11 - def aibcarrierId=u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;)&#xA;            //A11 - def aibcarrierOperatorId=u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.carrierOperatorId&quot;)&#xA;            def dibcarrierId = u.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;)&#xA;            //A11- def aobcarrierId=u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;)&#xA;            def intdObCarrierId = u.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;)&#xA;            def dobcarrierId = u.getFieldValue(&quot;unitRouting.rtgDeclaredCv.cvId&quot;)&#xA;&#xA;            //VESVOY&#xA;            def idOBCarrierId = intdObCarrierId != null ? intdObCarrierId : dobcarrierId&#xA;            def adIBCarrierId = aibcarrierId != null ? aibcarrierId : dibcarrierId&#xA;&#xA;            //IB_VYG_NBR&#xA;            def ibVygNbr = ''&#xA;            def facility = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.cvdCv.cvFacility.fcyId&quot;)&#xA;            def facilityId = ContextHelper.getThreadFacility()!=null?&#xA;                    ContextHelper.getThreadFacility().getFcyId():null;&#xA;            if(facilityId==null &amp;&amp;  u!=null){&#xA;                Unit unit = u as Unit;&#xA;                facilityId=unit.getLocFacility()!=null?unit.getLocFacility().getFcyId():null;&#xA;            }&#xA;&#xA;            if (facility != null &amp;&amp; facilityId!=null &amp;&amp; facility.equals(facilityId)) {&#xA;                def vesId = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdVessel.vesId&quot;)&#xA;                def VygNbr = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdIbVygNbr&quot;)&#xA;                if (VygNbr != null) {&#xA;                    if (vesId != null) {&#xA;                        if (VygNbr.contains(vesId)) {&#xA;&#xA;                        } else {&#xA;                            ibVygNbr += vesId;&#xA;                        }&#xA;                    }&#xA;                    ibVygNbr += VygNbr;&#xA;                }&#xA;                //ibVygNbr = VygNbr != null &amp;&amp; vesId != null &amp;&amp; VygNbr.contains(vesId) ? VygNbr : vesId + VygNbr  //A4&#xA;                //println(&quot;facility ::&quot;+facility+&quot;  IbVygNbr::::&quot;+ibVygNbr)&#xA;            }&#xA;&#xA;            def vesvoy = getVesVoy(lkpLocTypeKey, lkpCarrierId, categoryKey, transitStateKey, idOBCarrierId, aibcarrierId, dibcarrierId, freightkind, aibcarrierMode, u, gvyCmisUtil, dischPort)&#xA;            def vesvoyAttr = gvyTxtMsgFmt.doIt('vesvoy', vesvoy)&#xA;            //println('VESVOY : '+vesvoy)&#xA;&#xA;            //TRUCK&#xA;            def truckValue = ''&#xA;            def aiObCarrierId = aobcarrierId != null ? aobcarrierId : intdObCarrierId&#xA;            truckValue = getTruck(lkpLocTypeKey, drayStatusKey, transitStateKey, aiObCarrierId, aibcarrierId, u, gvyCmisUtil, dischPort, lkpCarrierId, outBoundCarrier)&#xA;&#xA;            //Ship to Ship&#xA;            println('IB_CARRIER :' + inBoundCarrier + '  OB_CARRIER: ' + outBoundCarrier)&#xA;            println('LKP_LOC_TYPE:' + lkpLocTypeKey + 'LKP_CARRIER_ID:' + lkpCarrierId)&#xA;            def aidObCarrierId = aobcarrierId != null ? aobcarrierId : (intdObCarrierId != null ? intdObCarrierId : dobcarrierId)&#xA;            if (inBoundCarrier.equals('CELL') &amp;&amp; outBoundCarrier.equals('CELL')) {&#xA;                misc1Value = getShipToShip(lkpLocTypeKey, lkpCarrierId, aibcarrierId, aobcarrierId, aidObCarrierId, adIBCarrierId, gvyCmisUtil, dischPort, categoryKey)&#xA;                println('MISC1_1 : ' + misc1Value)&#xA;            }&#xA;            //Ship to Barge&#xA;            else if (inBoundCarrier.equals('CELL') &amp;&amp; outBoundCarrier.equals('BARGE')) {&#xA;                ArrayList arrList = getShipToBarge(lkpLocTypeKey, lkpCarrierId, aobcarrierId, aidObCarrierId)&#xA;                misc1Value = arrList.get(0)&#xA;                println('MISC1_2 : ' + misc1Value)&#xA;                truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;                println('truckValue_2 : ' + truckValue)&#xA;            }&#xA;            //Barge to Ship&#xA;            else if (inBoundCarrier.equals('BARGE') &amp;&amp; outBoundCarrier.equals('CELL')) {&#xA;                ArrayList arrList = getBargeToShip(lkpLocTypeKey, lkpCarrierId, adIBCarrierId, ibVygNbr)&#xA;                misc1Value = arrList.get(0)&#xA;                println('MISC1_3 : ' + misc1Value)&#xA;                truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;                println('truckValue_3 : ' + truckValue)&#xA;            }&#xA;            //Barge to Barge&#xA;            else if (inBoundCarrier.equals('BARGE') &amp;&amp; outBoundCarrier.equals('BARGE')) {&#xA;                ArrayList arrList = getBargeToBarge(lkpLocTypeKey, lkpCarrierId, aibcarrierId, aobcarrierId, aidObCarrierId, adIBCarrierId, ibVygNbr)&#xA;                misc1Value = arrList.get(0)&#xA;                println('MISC1_4 : ' + misc1Value)&#xA;                truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;                println('truckValue_4 : ' + truckValue)&#xA;            }&#xA;            //Barge to AnyOtherCarrier&#xA;            else if (inBoundCarrier.equals('BARGE') &amp;&amp; (outBoundCarrier.equals('TRUCK') || outBoundCarrier.equals('UNKNOWN') || outBoundCarrier.equals('GEN_VESSEL'))) {&#xA;                ArrayList arrList = getBargeToOtherCarriers(lkpLocTypeKey, lkpCarrierId, aibcarrierId, ibVygNbr)&#xA;                misc1Value = arrList.get(0)&#xA;                println('MISC1_5 : ' + misc1Value)&#xA;                truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;                println('truckValue_5 : ' + truckValue)&#xA;            }&#xA;            //TRUCK to BARGE&#xA;            else if (inBoundCarrier.equals('TRUCK') &amp;&amp; outBoundCarrier.equals('BARGE')) {&#xA;                ArrayList arrList = getTruckToBarge(lkpLocTypeKey, lkpCarrierId, aidObCarrierId, aobcarrierId, idOBCarrierId)&#xA;                misc1Value = arrList.get(0)&#xA;                println('MISC1_6 : ' + misc1Value)&#xA;                truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;                println('truckValue_6 : ' + truckValue)&#xA;            }&#xA;            //REMOVE - Last Truck Check - (Put of the Ingate I think)&#xA;            /*  if(aibcarrierMode.equals('TRUCK')){&#xA;                      println('aibcarrierMode &gt;&gt;&gt;'+aibcarrierMode+&quot;     aibcarrierOperatorId &gt;&gt;&gt;&quot;+aibcarrierOperatorId)&#xA;                      truckValue = aibcarrierOperatorId&#xA;              } */&#xA;            if (truckValue.equals('GEN_TRUCK') || truckValue.equals('GEN_VESSEL')&#xA;                    || truckValue.equals('GEN_CARRIER')) {&#xA;                truckValue = ''&#xA;            }&#xA;            /* if('BARGE'.equals(misc1Value)){ //A3&#xA;                 misc1Value = ''&#xA;             }*/&#xA;&#xA;            def truckAttr = gvyTxtMsgFmt.doIt('truck', truckValue)&#xA;            def vesClassType = getVesselClassType(lkpCarrierId) //A1&#xA;            println(&quot;vesClassType : &quot;+vesClassType);&#xA;            //MISC1-Override misc1 value for Long haul vessel to NIS&#xA;            def misc1Attr = ''&#xA;            if (transitStateKey.equals(&quot;S60_LOADED&quot;) &amp;&amp; !'BARGE'.equals(vesClassType)) { //A1&#xA;                misc1Attr = gvyTxtMsgFmt.doIt('misc1', '%')&#xA;            } else {&#xA;                misc1Attr = gvyTxtMsgFmt.doIt('misc1', misc1Value)&#xA;            }&#xA;            println('FINAL_TRUCK :' + truckValue + '  FINAL_MISC1:' + misc1Value)&#xA;&#xA;            //LOAD PORT &amp; DPORT&#xA;            def loadPort = u.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;)&#xA;            def dischargePort = u.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;&#xA;            //ACTUAL VESSEL,ACTUAL VOYAGE,LEG&#xA;            def actualVessel = '%'&#xA;            def actualVoyage = '%'&#xA;            def leg = '%'&#xA;            if (lkpLocTypeKey.equals('VESSEL') &amp;&amp; 'BARGE'.equals(vesClassType)) {&#xA;                actualVessel = misc1Value.length() &gt; 5 ? misc1Value.substring(0, 3) : 'null'  //A7&#xA;                actualVoyage = misc1Value.length() &gt; 5 ? misc1Value.substring(3, 6) : 'null'&#xA;                //leg value for barge is coming as null -D032146&#xA;                //leg = misc1Value.length() &gt; 6 ? misc1Value.substring(6) : 'null'&#xA;                leg = loadPort + '_' + dischargePort&#xA;            } else if (lkpLocTypeKey.equals('VESSEL') &amp;&amp; 'CELL'.equals(vesClassType)) {&#xA;                actualVessel = lkpCarrierId.length() &gt; 5 ? lkpCarrierId.substring(0, 3) : 'null'&#xA;                actualVoyage = lkpCarrierId.length() &gt; 5 ? lkpCarrierId.substring(3) : 'null'&#xA;                leg = loadPort + '_' + dischargePort&#xA;            }&#xA;            def actualVesselAttr = gvyTxtMsgFmt.doIt('actualVessel', actualVessel)&#xA;            def actualVoyageAttr = gvyTxtMsgFmt.doIt('actualVoyage', actualVoyage)&#xA;            def legAttr = gvyTxtMsgFmt.doIt('leg', leg)&#xA;            println('ACTUAL VESSEL : ' + actualVessel + ' ACTUAL VOYAGE: ' + actualVoyage + ' leg : ' + leg)&#xA;&#xA;            positionProFldAttr = vesvoyAttr + truckAttr + misc1Attr + actualVesselAttr + actualVoyageAttr + legAttr&#xA;            println('positionProFldAttr : ' + positionProFldAttr)&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;&#xA;        return positionProFldAttr&#xA;&#xA;&#xA;    }//Method doit() Ends&#xA;&#xA;    public String doCmisDataRefresh(Object u, Object gvyTxtMsgFmt, String eventType, Object event) {&#xA;        def positionProFldAttr = ''&#xA;        def gvyBaseClass = new GroovyInjectionBase()&#xA;        try {&#xA;&#xA;            def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;            def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;&#xA;            def obcarrierChng = gvyEventUtil.wasFieldChanged(event, &quot;ufvIntendedObCv&quot;)&#xA;            obcarrierChng = obcarrierChng != null ? obcarrierChng : ''&#xA;            //A6&#xA;            //def podChng = gvyEventUtil.wasFieldChanged(event, &quot;rtgPOD1&quot;)&#xA;            //podChng = podChng != null ? podChng : ''&#xA;&#xA;            def previousDischPort = gvyEventUtil.getPreviousPropertyAsString(event, &quot;rtgPOD1&quot;);&#xA;            def gvyDomQueryObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisDomainQueryUtil&quot;)&#xA;            previousDischPort = gvyDomQueryObj.lookupRtgPOD(previousDischPort)&#xA;            previousDischPort = previousDischPort != null ? previousDischPort : &quot;&quot;&#xA;            def category = u.getFieldValue(&quot;unitCategory&quot;);&#xA;&#xA;            def currentDischPort = u.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;            /*def isHawaiiPort = UnitCategoryEnum.IMPORT.equals(category) &amp;&amp;&#xA;                    (&quot;HON&quot;.equals(previousDischPort) || gvyCmisUtil.isNISPort(previousDischPort)) ||&#xA;                    (&quot;HON&quot;.equals(currentDischPort) || gvyCmisUtil.isNISPort(currentDischPort))*/&#xA;            //A6 Ends&#xA;            //Verify Event Notes for unitRefersh&#xA;            def gvyEventObj = event.getEvent()&#xA;            def eventNotes = gvyEventObj.getEventNote()&#xA;            eventNotes = eventNotes != null ? eventNotes : &quot;&quot;&#xA;&#xA;            //Verifying if the event Changes the position Field&#xA;            def gvyFldUpdtObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventFieldUpdateFilter&quot;);&#xA;            boolean evntUpdatesFlg = gvyFldUpdtObj.evntFilterOnPositionFldChng(eventType)&#xA;            if (!eventNotes.contains(&quot;Unit Correction&quot;) &amp;&amp; evntUpdatesFlg&#xA;                    || ((eventType.equals('UNIT_REROUTE') /*&amp;&amp; !isHawaiiPort*/) &amp;&amp; (eventType.equals('UNIT_REROUTE') &amp;&amp; obcarrierChng.equals(Boolean.FALSE)))) {&#xA;                positionProFldAttr = positionPercentageValue(gvyTxtMsgFmt)&#xA;                return positionProFldAttr&#xA;            }&#xA;&#xA;            def lkpLocType = u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;            def lkpLocTypeKey = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;&#xA;            def lkpCarrierId = u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocId&quot;)&#xA;&#xA;            def _category = u.getFieldValue(&quot;unitCategory&quot;)&#xA;            def categoryKey = _category != null ? _category.getKey() : ''&#xA;&#xA;            def _transitState = u.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;            def transitStateKey = _transitState != null ? _transitState.getKey() : ''&#xA;&#xA;            def _drayStatus = u.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;            def drayStatusKey = _drayStatus != null ? _drayStatus.getKey() : _drayStatus&#xA;&#xA;            def _freightkind = u.getFieldValue(&quot;unitFreightKind&quot;)&#xA;            def freightkind = _freightkind != null ? _freightkind.getKey() : ''&#xA;&#xA;            def dischPort = u.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;            dischPort = dischPort != null ? dischPort : ''&#xA;&#xA;            def ibVesselType = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;            def ibVesselTypeKey = ibVesselType != null ? ibVesselType.getKey() : gvyCmisUtil.getVesClassTypeWithNoVisitEntry(u)&#xA;&#xA;            def obVesselType = u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;            def obVesselTypeKey = obVesselType != null ? obVesselType.getKey() : ''&#xA;&#xA;            //ReArrange Fields Used by VESVOY / TRUCK / MISC&#xA;            aibcarrierMode = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCarrierMode&quot;)&#xA;            aibcarrierMode = aibcarrierMode != null ? aibcarrierMode.getKey() : ''&#xA;            def inBoundCarrier = aibcarrierMode.equals('VESSEL') ? (ibVesselTypeKey.trim().length() &gt; 1 ? ibVesselTypeKey : 'GEN_VESSEL') : aibcarrierMode&#xA;&#xA;            def aobcarrierMode = u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCarrierMode&quot;)&#xA;            aobcarrierMode = aobcarrierMode != null ? aobcarrierMode.getKey() : ''&#xA;            def outBoundCarrier = aobcarrierMode.equals('VESSEL') ? (obVesselTypeKey.trim().length() &gt; 1 ? obVesselTypeKey : 'GEN_VESSEL') : aobcarrierMode&#xA;&#xA;            def aibcarrierId = ''&#xA;            def aibcarrierOperatorId = ''&#xA;            def aobcarrierId = ''&#xA;&#xA;            //A11 - Change Made for Truck Code and TruckId switch on IB and OB carrier&#xA;            if (aibcarrierMode.equals('TRUCK')) {&#xA;                aibcarrierId = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.carrierOperatorId&quot;)&#xA;                aibcarrierOperatorId = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;)&#xA;            } else {&#xA;                aibcarrierId = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;)&#xA;                aibcarrierOperatorId = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.carrierOperatorId&quot;)&#xA;            }&#xA;            if (aobcarrierMode.equals('TRUCK')) {&#xA;                aobcarrierId = u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.carrierOperatorId&quot;)&#xA;            } else {&#xA;                aobcarrierId = u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;)&#xA;            }&#xA;&#xA;            //A11 - def aibcarrierId=u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;)&#xA;            //A11 - def aibcarrierOperatorId=u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.carrierOperatorId&quot;)&#xA;            def dibcarrierId = u.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;)&#xA;            //A11- def aobcarrierId=u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;)&#xA;            def intdObCarrierId = u.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;)&#xA;            def dobcarrierId = u.getFieldValue(&quot;unitRouting.rtgDeclaredCv.cvId&quot;)&#xA;&#xA;            //VESVOY&#xA;            def idOBCarrierId = intdObCarrierId != null ? intdObCarrierId : dobcarrierId&#xA;            def adIBCarrierId = aibcarrierId != null ? aibcarrierId : dibcarrierId&#xA;&#xA;            //IB_VYG_NBR&#xA;            def ibVygNbr = ''&#xA;            def facility = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.cvdCv.cvFacility.fcyId&quot;)&#xA;            if (facility != null &amp;&amp; facility.equals('HON')) {&#xA;                def vesId = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdVessel.vesId&quot;)&#xA;                def VygNbr = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdIbVygNbr&quot;)&#xA;                ibVygNbr = VygNbr != null &amp;&amp; VygNbr.contains(vesId) ? VygNbr : vesId + VygNbr  //A4&#xA;                //println(&quot;facility ::&quot;+facility+&quot;  IbVygNbr::::&quot;+ibVygNbr)&#xA;            }&#xA;&#xA;            def vesvoy = getVesVoy(lkpLocTypeKey, lkpCarrierId, categoryKey, transitStateKey, idOBCarrierId, aibcarrierId, dibcarrierId, freightkind, aibcarrierMode, u, gvyCmisUtil, dischPort)&#xA;            def vesvoyAttr = gvyTxtMsgFmt.doIt('vesvoy', vesvoy)&#xA;            //println('VESVOY : '+vesvoy)&#xA;&#xA;            //TRUCK&#xA;            def truckValue = ''&#xA;            def aiObCarrierId = aobcarrierId != null ? aobcarrierId : intdObCarrierId&#xA;            truckValue = getTruck(lkpLocTypeKey, drayStatusKey, transitStateKey, aiObCarrierId, aibcarrierId, u, gvyCmisUtil, dischPort, lkpCarrierId, outBoundCarrier)&#xA;&#xA;            //Ship to Ship&#xA;            println('IB_CARRIER :' + inBoundCarrier + '  OB_CARRIER: ' + outBoundCarrier)&#xA;            println('LKP_LOC_TYPE:' + lkpLocTypeKey + 'LKP_CARRIER_ID:' + lkpCarrierId)&#xA;            def aidObCarrierId = aobcarrierId != null ? aobcarrierId : (intdObCarrierId != null ? intdObCarrierId : dobcarrierId)&#xA;            if (inBoundCarrier.equals('CELL') &amp;&amp; outBoundCarrier.equals('CELL')) {&#xA;                misc1Value = getShipToShip(lkpLocTypeKey, lkpCarrierId, aibcarrierId, aobcarrierId, aidObCarrierId, adIBCarrierId, gvyCmisUtil, dischPort, categoryKey)&#xA;                println('MISC1_1 : ' + misc1Value)&#xA;            }&#xA;            //Ship to Barge&#xA;            else if (inBoundCarrier.equals('CELL') &amp;&amp; outBoundCarrier.equals('BARGE')) {&#xA;                ArrayList arrList = getShipToBarge(lkpLocTypeKey, lkpCarrierId, aobcarrierId, aidObCarrierId)&#xA;                misc1Value = arrList.get(0)&#xA;                println('MISC1_2 : ' + misc1Value)&#xA;                truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;                println('truckValue_2 : ' + truckValue)&#xA;            }&#xA;            //Barge to Ship&#xA;            else if (inBoundCarrier.equals('BARGE') &amp;&amp; outBoundCarrier.equals('CELL')) {&#xA;                ArrayList arrList = getBargeToShip(lkpLocTypeKey, lkpCarrierId, adIBCarrierId, ibVygNbr)&#xA;                misc1Value = arrList.get(0)&#xA;                println('MISC1_3 : ' + misc1Value)&#xA;                truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;                println('truckValue_3 : ' + truckValue)&#xA;            }&#xA;            //Barge to Barge&#xA;            else if (inBoundCarrier.equals('BARGE') &amp;&amp; outBoundCarrier.equals('BARGE')) {&#xA;                ArrayList arrList = getBargeToBarge(lkpLocTypeKey, lkpCarrierId, aibcarrierId, aobcarrierId, aidObCarrierId, adIBCarrierId, ibVygNbr)&#xA;                misc1Value = arrList.get(0)&#xA;                println('MISC1_4 : ' + misc1Value)&#xA;                truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;                println('truckValue_4 : ' + truckValue)&#xA;            }&#xA;            //Barge to AnyOtherCarrier&#xA;            else if (inBoundCarrier.equals('BARGE') &amp;&amp; (outBoundCarrier.equals('TRUCK') || outBoundCarrier.equals('UNKNOWN') || outBoundCarrier.equals('GEN_VESSEL'))) {&#xA;                ArrayList arrList = getBargeToOtherCarriersRefresh(lkpLocTypeKey, lkpCarrierId, aibcarrierId, ibVygNbr)&#xA;                misc1Value = arrList.get(0)&#xA;                println('MISC1_5 : ' + misc1Value)&#xA;                truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;                println('truckValue_5 : ' + truckValue)&#xA;            }&#xA;            //TRUCK to BARGE&#xA;            else if (inBoundCarrier.equals('TRUCK') &amp;&amp; outBoundCarrier.equals('BARGE')) {&#xA;                ArrayList arrList = getTruckToBarge(lkpLocTypeKey, lkpCarrierId, aidObCarrierId, aobcarrierId, idOBCarrierId)&#xA;                misc1Value = arrList.get(0)&#xA;                println('MISC1_6 : ' + misc1Value)&#xA;                truckValue = arrList.get(1).trim().length() &gt; 1 ? arrList.get(1) : truckValue&#xA;                println('truckValue_6 : ' + truckValue)&#xA;            }&#xA;            //REMOVE - Last Truck Check - (Put of the Ingate I think)&#xA;            /*  if(aibcarrierMode.equals('TRUCK')){&#xA;                   println('aibcarrierMode &gt;&gt;&gt;'+aibcarrierMode+&quot;     aibcarrierOperatorId &gt;&gt;&gt;&quot;+aibcarrierOperatorId)&#xA;                   truckValue = aibcarrierOperatorId&#xA;           } */&#xA;            if (truckValue.equals('GEN_TRUCK') || truckValue.equals('GEN_VESSEL')&#xA;                    || truckValue.equals('GEN_CARRIER')) {&#xA;                truckValue = ''&#xA;            }&#xA;            /* if('BARGE'.equals(misc1Value)){ //A3&#xA;                misc1Value = ''&#xA;            }*/&#xA;&#xA;            def truckAttr = gvyTxtMsgFmt.doIt('truck', truckValue)&#xA;            def vesClassType = getVesselClassType(lkpCarrierId) //A1&#xA;            //MISC1-Override misc1 value for Long haul vessel to NIS&#xA;            def misc1Attr = ''&#xA;            if (transitStateKey.equals(&quot;S60_LOADED&quot;) &amp;&amp; !'BARGE'.equals(vesClassType)) { //A1&#xA;                misc1Attr = gvyTxtMsgFmt.doIt('misc1', '%')&#xA;            } else {&#xA;                misc1Attr = gvyTxtMsgFmt.doIt('misc1', misc1Value)&#xA;            }&#xA;            println('FINAL_TRUCK :' + truckValue + '  FINAL_MISC1:' + misc1Value)&#xA;&#xA;            //LOAD PORT &amp; DPORT&#xA;            def loadPort = u.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;)&#xA;            def dischargePort = u.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;&#xA;            //ACTUAL VESSEL,ACTUAL VOYAGE,LEG&#xA;            def actualVessel = '%'&#xA;            def actualVoyage = '%'&#xA;            def leg = '%'&#xA;            if (lkpLocTypeKey.equals('VESSEL') &amp;&amp; 'BARGE'.equals(vesClassType)) {&#xA;                actualVessel = misc1Value.length() &gt; 5 ? misc1Value.substring(0, 3) : 'null'  //A7&#xA;                actualVoyage = misc1Value.length() &gt; 5 ? misc1Value.substring(3, 6) : 'null'&#xA;                leg = misc1Value.length() &gt; 6 ? misc1Value.substring(6) : 'null'&#xA;            } else if (lkpLocTypeKey.equals('VESSEL') &amp;&amp; 'CELL'.equals(vesClassType)) {&#xA;                actualVessel = lkpCarrierId.length() &gt; 5 ? lkpCarrierId.substring(0, 3) : 'null'&#xA;                actualVoyage = lkpCarrierId.length() &gt; 5 ? lkpCarrierId.substring(3) : 'null'&#xA;                leg = loadPort + '_' + dischargePort&#xA;            }&#xA;            def actualVesselAttr = gvyTxtMsgFmt.doIt('actualVessel', actualVessel)&#xA;            def actualVoyageAttr = gvyTxtMsgFmt.doIt('actualVoyage', actualVoyage)&#xA;            def legAttr = gvyTxtMsgFmt.doIt('leg', leg)&#xA;            println('ACTUAL VESSEL : ' + actualVessel + ' ACTUAL VOYAGE: ' + actualVoyage + ' leg : ' + leg)&#xA;&#xA;            positionProFldAttr = vesvoyAttr + truckAttr + misc1Attr + actualVesselAttr + actualVoyageAttr + legAttr&#xA;            println('positionProFldAttr : ' + positionProFldAttr)&#xA;&#xA;        } catch (Exception e) {&#xA;            gvyBaseClass.log(&quot;Exception in GvyCmisPositionProcessDetail.doCmisDataRefresh()&quot; + e);&#xA;        }&#xA;&#xA;        return positionProFldAttr&#xA;&#xA;&#xA;    }//Method doCmisDataRefresh() Ends&#xA;&#xA;    private ArrayList getTruckToBarge(String lkpLocTypeKy, String lkpCarrId, String aidObCarrId, String aobcarrId, String idOBCarrId) {&#xA;        def misc1 = ''&#xA;        def truck = ''&#xA;        def bargeCode = ''&#xA;        ArrayList arrLst = new ArrayList()&#xA;        try {&#xA;            if (lkpLocTypeKy.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrId).equals('BARGE')) {&#xA;                misc1 = aidObCarrId&#xA;                bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0, 3) : ''&#xA;                truck = '9' + bargeCode&#xA;            } else if (lkpLocTypeKy.equals('TRUCK')) {&#xA;                misc1 = aobcarrId&#xA;            } else if (lkpLocTypeKy.equals('YARD')) {&#xA;                misc1 = idOBCarrId&#xA;            }&#xA;            arrLst.add(misc1)&#xA;            arrLst.add(truck)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return arrLst&#xA;    }&#xA;&#xA;    private ArrayList getBargeToOtherCarriers(String lkpLocTypeKy, String lkpCarrId, String aibcarrId, String IbVygNbr) {&#xA;        def misc1 = ''&#xA;        def truck = ''&#xA;        def bargeCode = ''&#xA;        ArrayList arrLst = new ArrayList()&#xA;        try {&#xA;            if (lkpLocTypeKy.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrId).equals('BARGE')) {&#xA;                misc1 = aibcarrId&#xA;                bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0, 3) : ''&#xA;                truck = '9' + bargeCode&#xA;            }&#xA;            if (lkpLocTypeKy.equals('YARD')) {&#xA;                //A12-  misc1 = adIBCarrId&#xA;                misc1 = IbVygNbr&#xA;            }&#xA;            arrLst.add(misc1)&#xA;            arrLst.add(truck)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return arrLst&#xA;    }&#xA;&#xA;    private ArrayList getBargeToOtherCarriersRefresh(String lkpLocTypeKy, String lkpCarrId, String aibcarrId, String IbVygNbr) {&#xA;        def misc1 = ''&#xA;        def truck = ''&#xA;        def bargeCode = ''&#xA;        ArrayList arrLst = new ArrayList()&#xA;        try {&#xA;            if (lkpLocTypeKy.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrId).equals('BARGE')) {&#xA;                misc1 = aibcarrId&#xA;                bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0, 3) : ''&#xA;                truck = '9' + bargeCode&#xA;            }&#xA;            if (lkpLocTypeKy.equals('VESSEL') || lkpLocTypeKy.equals('YARD')) {&#xA;                //A12-  misc1 = adIBCarrId&#xA;                misc1 = IbVygNbr&#xA;            }&#xA;            arrLst.add(misc1)&#xA;            arrLst.add(truck)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return arrLst&#xA;    }&#xA;&#xA;    private ArrayList getBargeToBarge(String lkpLocTypeKy, String lkpCarrId, String aibcarrId, String aobcarrId, String aidObCarrId, String adIBCarrId, String IbVygNbr) {&#xA;        def misc1 = ''&#xA;        def truck = ''&#xA;        def bargeCode = ''&#xA;        ArrayList arrLst = new ArrayList()&#xA;        try {&#xA;            if (lkpLocTypeKy.equals('VESSEL')) {&#xA;                if (lkpCarrId.equals(aibcarrId)) {&#xA;                    misc1 = adIBCarrId&#xA;                    bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0, 3) : ''&#xA;                    truck = '9' + bargeCode&#xA;                } else if (lkpCarrId.equals(aobcarrId)) {&#xA;                    misc1 = aidObCarrId&#xA;                    bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0, 3) : ''&#xA;                    truck = '9' + bargeCode&#xA;                }&#xA;            }&#xA;            if (lkpLocTypeKy.equals('YARD')) {&#xA;                //A12-  misc1 = adIBCarrId&#xA;                misc1 = IbVygNbr&#xA;            }&#xA;            arrLst.add(misc1)&#xA;            arrLst.add(truck)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return arrLst&#xA;    }&#xA;&#xA;    private ArrayList getBargeToShip(String lkpLocTypeKy, String lkpCarrId, String adIBCarrId, String IbVygNbr) {&#xA;        def misc1 = ''&#xA;        def truck = ''&#xA;        ArrayList arrLst = new ArrayList()&#xA;        try {&#xA;            if (lkpLocTypeKy.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrId).equals('BARGE')) {&#xA;                def bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0, 3) : ''&#xA;                truck = '9' + bargeCode&#xA;            }&#xA;            if (lkpLocTypeKy.equals('VESSEL') || lkpLocTypeKy.equals('YARD')) {&#xA;                //A12 - misc1 = adIBCarrId&#xA;                misc1 = IbVygNbr&#xA;            }&#xA;            arrLst.add(misc1)&#xA;            arrLst.add(truck)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return arrLst&#xA;    }&#xA;&#xA;    private ArrayList getShipToBarge(String lkpLocTypeKy, String lkpCarrId, String aobcarrId, String aidObCarrId) {&#xA;        def misc1 = ''&#xA;        def truck = ''&#xA;        ArrayList arrLst = new ArrayList()&#xA;        try {&#xA;            if (lkpLocTypeKy.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrId).equals('CELL')) {&#xA;                misc1 = aidObCarrId&#xA;            } else if (lkpLocTypeKy.equals('VESSEL') &amp;&amp; getVesselClassType(lkpCarrId).equals('BARGE')) {&#xA;                misc1 = aidObCarrId&#xA;                def bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0, 3) : ''&#xA;                truck = '9' + bargeCode&#xA;            } else if (lkpLocTypeKy.equals('YARD')) {&#xA;                misc1 = aidObCarrId&#xA;            } else if (lkpLocTypeKy.equals('TRUCK')) {&#xA;                misc1 = aobcarrId&#xA;            }&#xA;            arrLst.add(misc1)&#xA;            arrLst.add(truck)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return arrLst&#xA;    }&#xA;&#xA;    private String getShipToShip(String lkpLocTypeKy, String lkpCarrId, String aibcarrId, String aobcarrId, String aidObCarrId, String adIBCarrId, Object gvyCmisUtil, String dischPort, String categoryKey) {&#xA;        def misc1 = ''&#xA;        try {&#xA;            if (lkpLocTypeKy.equals('VESSEL')) {&#xA;                /* REMOVE - LH NIS   if(gvyCmisUtil.isNISPort(dischPort)){&#xA;                            misc1 = aidObCarrId&#xA;                            def bargeCode = misc1 != null &amp;&amp; misc1.length() &gt; 2 ? misc1.substring(0,3) : ''&#xA;                            truck = '9'+bargeCode&#xA;                          } */&#xA;                if (lkpCarrId.equals(aibcarrId)) {&#xA;                    misc1 = aidObCarrId&#xA;                } else if (lkpCarrId.equals(aobcarrId)) {&#xA;                    misc1 = adIBCarrId&#xA;                }&#xA;            }&#xA;            if (lkpLocTypeKy.equals('YARD')) {&#xA;                misc1 = adIBCarrId&#xA;            }//Condition For SHIP-SHIP Through&#xA;            if (categoryKey.equals('THRGH') &amp;&amp; aibcarrId.equals(aobcarrId)) {&#xA;                misc1 = ''&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return misc1&#xA;    }&#xA;&#xA;    private String getTruck(String lkpLocTypeKy, String drayStatusKy, String transitStateKy, String obCarrierId, String ibCarrierId, Object unit, Object gvyCmisUtil, String dischPort, String lkpCarrierId, Object aobcarrierMode) {&#xA;        def truck = ''&#xA;        try {&#xA;            if (lkpLocTypeKy.equals('TRUCK')) {&#xA;                if (drayStatusKy.equals('TRANSFER') &amp;&amp; transitStateKy.equals('S70_DEPARTED')) {&#xA;                    truck = 'YBUU'&#xA;                } else if (transitStateKy.equals('S30_ECIN') || transitStateKy.equals('S10_ADVISED')) {&#xA;                    truck = ibCarrierId&#xA;                } else {//A8 - If OBCarrierId is a VESSEL then dont set truck keep value NULL&#xA;                    if ('BARGE'.equals(aobcarrierMode)) {&#xA;                        def bargeCode = obCarrierId.substring(0, 3)&#xA;                        truck = '9' + bargeCode&#xA;                    } else if ('CELL'.equals(aobcarrierMode)) {&#xA;                        truck = 'null';&#xA;                    } else {&#xA;                        truck = obCarrierId;&#xA;                    }&#xA;                }&#xA;            } else if (lkpLocTypeKy.equals('VESSEL') || lkpLocTypeKy.equals('YARD')) {&#xA;                truck = unit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;            }&#xA;            println('Setting For GetTrucker :' + truck)&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return truck&#xA;    }&#xA;&#xA;    private String getVesVoy(String lkpLocTypeKy, String lkpCarrId, String categoryKy, String transitStateKy, String obCarrierId, String actIbCarrierId, String decIbCarrierId, String freightkind, String aibcarrierMode, Object u, Object gvyCmisUtil, String dischPort) {&#xA;        def vesVoy = ''&#xA;        def dIbcarrierMode = u.getFieldValue(&quot;unitDeclaredIbCv.cvCarrierMode&quot;)&#xA;        dIbcarrierMode = dIbcarrierMode != null ? dIbcarrierMode.getKey() : &quot;&quot;&#xA;&#xA;        try {&#xA;            if (lkpLocTypeKy.equals('VESSEL') &amp;&amp; (getVesselClassType(lkpCarrId).equals('CELL'))) {&#xA;                vesVoy = lkpCarrId&#xA;            } else if (lkpLocTypeKy.equals('YARD') || lkpLocTypeKy.equals('TRUCK') ||&#xA;                    (lkpLocTypeKy.equals('VESSEL') &amp;&amp; (getVesselClassType(lkpCarrId).equals('BARGE')))) {&#xA;                if (categoryKy.equals('EXPRT') || categoryKy.equals('THRGH')) {&#xA;                    vesVoy = obCarrierId&#xA;                } else if (categoryKy.equals('IMPRT') &amp;&amp; lkpLocTypeKy.equals('YARD')) {&#xA;                    //A5 - FOR SIT UNITS&#xA;                    if (dIbcarrierMode.equals('VESSEL') &amp;&amp; aibcarrierMode.equals('TRUCK')) {&#xA;                        println(&quot;dIbcarrierMode :&quot; + dIbcarrierMode + &quot;  aibcarrierMode:&quot; + aibcarrierMode)&#xA;                        vesVoy = decIbCarrierId&#xA;                    } else if (aibcarrierMode.equals('TRUCK')) {&#xA;                        vesVoy = '%'&#xA;                    } else {&#xA;                        vesVoy = actIbCarrierId&#xA;                    }&#xA;                } else if (categoryKy.equals('IMPRT') &amp;&amp; (lkpLocTypeKy.equals('TRUCK') || (lkpLocTypeKy.equals('VESSEL')))) {&#xA;                    if (freightkind.equals('MTY') || (aibcarrierMode.equals('TRUCK') &amp;&amp; dIbcarrierMode.equals('TRUCK'))) {&#xA;                        vesVoy = ''&#xA;                    } else {&#xA;                        vesVoy = decIbCarrierId&#xA;                    }&#xA;                } else if (categoryKy.equals('TRSHP') &amp;&amp; transitStateKy.equals('S20_INBOUND')) {&#xA;                    vesVoy = actIbCarrierId != null ? actIbCarrierId : decIbCarrierId&#xA;                } else if (categoryKy.equals('TRSHP') &amp;&amp; transitStateKy.trim().length() &gt; 0) {&#xA;                    vesVoy = obCarrierId&#xA;                }&#xA;            }&#xA;&#xA;            //Check for Client Vessel&#xA;            /*      def vesselLineOperator = gvyCmisUtil.getVesselLineOperator(u)&#xA;                  if(vesselLineOperator != null &amp;&amp; !vesselLineOperator.equals('MAT'))&#xA;                  {&#xA;                    def islandPort = gvyCmisUtil.isNISPort(dischPort)&#xA;                    if (islandPort || lkpLocTypeKy.equals('YARD')){&#xA;                      def intIbVesId = u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdVessel.vesId&quot;)&#xA;                      def intIbVygNbr =u.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdIbVygNbr&quot;)&#xA;                      vesVoy  = intIbVesId+intIbVygNbr&#xA;                    }&#xA;                    else&#xA;                    {&#xA;                       def obVesId = u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdVessel.vesId&quot;)&#xA;                       def obVygNbr =u.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdObVygNbr&quot;)&#xA;                       vesVoy  = obVesId+obVygNbr&#xA;                    }&#xA;                  } */&#xA;&#xA;            //Check for GEN_CARRIER&#xA;            if (vesVoy.equals('GEN_CARRIER') || vesVoy.equals('GEN_VESSEL') || vesVoy.equals('GEN_TRUCK') || 'BARGE'.equals(vesVoy)) {&#xA;                //A2&#xA;                vesVoy = ''&#xA;            }&#xA;            //Check for Setting VesVoy for Only LongHaul Vessels&#xA;            if (!(vesVoy.equals('%') || vesVoy.length() == 0) &amp;&amp; (getVesselClassType(vesVoy).equals('BARGE'))) {&#xA;                vesVoy = ''&#xA;            }&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return vesVoy&#xA;    }&#xA;&#xA;    private String getVesselClassType(String vesselId) {&#xA;        def vesselType = ''&#xA;        try {&#xA;            def vesselClassId = vesselId != null &amp;&amp; vesselId.length() &gt; 3 ? vesselId.substring(0, 3) : null&#xA;            if (vesselClassId != null) {&#xA;                VesselClass vesselClass = new VesselClass()&#xA;                vesselClass = vesselClass.findVesselClassById(vesselClassId)&#xA;                VesselTypeEnum vesselTypeEnum = vesselClass != null ? vesselClass.getVesclassVesselType() : null&#xA;                vesselType = vesselTypeEnum != null ? vesselTypeEnum.getKey() : ''&#xA;            }&#xA;            // println('VESSEL TYPE :'+vesselType)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return vesselType&#xA;    }&#xA;&#xA;    public String positionPercentageValue(Object gvyTxtMsgFmt) {&#xA;        def positionProFldAttr = ''&#xA;        def vesvoy = '%', truckValue = '%', misc1Value = '%', actualVessel = '%', actualVoyage = '%', leg = '%'&#xA;        def vesvoyAttr = gvyTxtMsgFmt.doIt('vesvoy', vesvoy)&#xA;        def truckAttr = gvyTxtMsgFmt.doIt('truck', truckValue)&#xA;        def misc1Attr = gvyTxtMsgFmt.doIt('misc1', misc1Value)&#xA;        def actualVesselAttr = gvyTxtMsgFmt.doIt('actualVessel', actualVessel)&#xA;        def actualVoyageAttr = gvyTxtMsgFmt.doIt('actualVoyage', actualVoyage)&#xA;        def legAttr = gvyTxtMsgFmt.doIt('leg', leg)&#xA;&#xA;        positionProFldAttr = vesvoyAttr + truckAttr + misc1Attr + actualVesselAttr + actualVoyageAttr + legAttr&#xA;&#xA;        return positionProFldAttr&#xA;    }&#xA;&#xA;}&#xA;" />
<digital-asset id="GvyCmisEventUnitStrip" short-description="GvyCmisEventUnitStrip" is-pre-deployed="N" groovy-code="/*&#xA;* srno  Doer  Date       Change&#xA;* A1    GR    01-30- 10  added action AMTX&#xA;* A2    GR    08/22/10   Added depndMtxActionForSn4Q() to post action DTD,HZD,OVD (SN4Q change)&#xA;* A3    GR    09/01/10   Loc Format (SN4Q change)&#xA;* A4    GR    01/11/10   NullPointer patch and HazF set to NULL for HZD&#xA;* A5    GR    02/11/10   Replaced api Exception and Commented out Detention call&#xA;* A6    GR    02/16/11   #011016 - OVD,HZD to be suppress as Gems Doesnt need&#xA;* A7    GR    04/05/11   #012223 - Suppress MTX msg for fructose event&#xA;* A8    GR    04/07/11   #012223 - Suppress EDT&#xA;* A9    GR    04/13/11   #Opened MTX that was commented as fix for A8&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.services.business.event.Event&#xA;&#xA;public class GvyCmisEventUnitStrip&#xA;{&#xA;    def gvyCmisUtil = null;&#xA;    def gvyBaseClass = null;&#xA;&#xA;    public void stripUnit(Object event)&#xA;    {&#xA;        def gvyStripXml = ''&#xA;        try&#xA;        {&#xA;            gvyBaseClass = new GroovyInjectionBase()&#xA;            gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;            Event gvyEventObj = event.getEvent()&#xA;            def doer = gvyEventObj.getEvntAppliedBy()&#xA;            def eventNotes = gvyEventObj.getEventNote()&#xA;            eventNotes = eventNotes != null ? eventNotes : ''&#xA;            def unit = event.getEntity()&#xA;&#xA;            /* Set Avail Date */&#xA;            def availLookup = gvyBaseClass.getGroovyClassInstance(&quot;GvyAvailDate&quot;);&#xA;            boolean update = availLookup.setAvailDate(unit, event);&#xA;            if(eventNotes.startsWith('Gvy MTY'))&#xA;            {&#xA;                //A2 - Dependant MTX action for Sn4Q and Acets&#xA;                depndMtxActionForSn4Q(event,unit, gvyBaseClass)&#xA;&#xA;                /* --- Call To get Strip values --- */&#xA;                gvyStripXml = processUnitStrip(unit, eventNotes,gvyEventObj)&#xA;&#xA;                //Detention Msg Check - GR-11/02/10 I dont think this is called&#xA;                if(update){&#xA;                    //def gvyDentObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisDetentionMsgProcess&quot;);&#xA;                    // gvyDentObj.detentionProcess(gvyStripXml,event,gvyBaseClass)&#xA;                }&#xA;&#xA;                //gvyBaseClass.sendXml(gvyStripXml) - Maybe this is the EDT A8&#xA;            }&#xA;            /* --- Check and Create Release ACETS Msg before Stripping the Unit -- */&#xA;&#xA;            def notesObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisCommentNotesField&quot;)&#xA;            if(!eventNotes.startsWith('Gvy MTY'))&#xA;            {&#xA;                def holds = notesObj.getUnitActiveHolds(unit)&#xA;                if(holds != null &amp;&amp; holds.length() &gt; 1 &amp;&amp; !doer.contains('ACETS')){&#xA;                    processHoldsReleaseStrip(event,holds,doer,unit)&#xA;                }&#xA;&#xA;                //A2 - Dependant MTX action for Sn4Q and Acets&#xA;                depndMtxActionForSn4Q(event,unit, gvyBaseClass)&#xA;&#xA;                /* --- Call To get Strip values --- */&#xA;                gvyStripXml = processUnitStrip(unit, eventNotes, gvyEventObj)&#xA;&#xA;                //Detention Msg Check&#xA;                if(update){  // GR-11/02/10 I dont think this is called&#xA;                    // def gvyDentObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisDetentionMsgProcess&quot;);&#xA;                    // gvyDentObj.detentionProcess(gvyStripXml,event,gvyBaseClass)&#xA;                }&#xA;                gvyBaseClass.sendXml(gvyStripXml)  //A9 - Opened This For MTX&#xA;                // The Above messages is for ULD, for MTX&#xA;                def mtxString = null;&#xA;                //println(&quot;Before MTX, available message is    &quot; + gvyStripXml);&#xA;                //println('Evaluating for MTX message');&#xA;                mtxString = getMTXMessage(unit, eventNotes, gvyEventObj, gvyStripXml);&#xA;                if (mtxString != null) {&#xA;                    println(&quot;mtxString before sending to gems&quot; + mtxString);&#xA;                   // gvyBaseClass.sendXml(mtxString);&#xA;                }&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;    public String getMTXMessage(Object unit, String eventNotes, Object gvyEventObj, String inGvyStripXml) {&#xA;        def groovyXml = inGvyStripXml;&#xA;        try {&#xA;            def u = unit&#xA;            def gvyTxtMsgFmt = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisTxtMsgFormatter&quot;);&#xA;            def actionObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisActionDetail&quot;);&#xA;            def actionAttributes = actionObj.doIt(gvyTxtMsgFmt, gvyEventObj, gvyBaseClass, u);&#xA;            def doer = gvyCmisUtil.getFieldValues(actionAttributes, &quot;doer=&quot;)&#xA;            println('doer   ' + doer);&#xA;            if (doer != null &amp;&amp; !doer.contains('ACETS')) {&#xA;                println('Setting AMTX as event Specific Values')&#xA;                groovyXml = gvyCmisUtil.eventSpecificFieldValue(groovyXml, &quot;action=&quot;, &quot;MTX&quot;);&#xA;                groovyXml = gvyCmisUtil.eventSpecificFieldValue(groovyXml, &quot;lastAction=&quot;, &quot;MTX&quot;);&#xA;                return groovyXml;&#xA;            } else {&#xA;                return null;&#xA;            }&#xA;&#xA;        }&#xA;        catch (Exception ex) {&#xA;            ex.printStackTrace();&#xA;        }&#xA;        return null;&#xA;    }&#xA;    &#xA;    public String processUnitStrip(Object unit, String eventNotes, Object gvyEventObj)&#xA;    {&#xA;        def groovyXml = ''&#xA;        try&#xA;        {&#xA;            //Calling Msg Formater class&#xA;            def gvyTxtMsgFmt = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisTxtMsgFormatter&quot;);&#xA;            //Unit&#xA;            def u = unit&#xA;&#xA;            String eventType = &quot;UNIT_STRIP&quot;&#xA;            if(eventNotes.startsWith('Gvy MTY')){&#xA;                eventType = &quot;FRUCTOSE_MTY&quot;&#xA;            }&#xA;            //MSGTYPE&#xA;            def eventTypeAttr = gvyTxtMsgFmt.doIt('msgType',eventType)&#xA;&#xA;            // EQUIP CLASS&#xA;            def equiClass = u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;            def equiClassKey = equiClass != null ? equiClass.getKey() : equiClass&#xA;            def unitClassAttr = gvyTxtMsgFmt.doIt('unitClass', equiClassKey)&#xA;&#xA;            //CTRNO &amp; CHECK DIGIT&#xA;            def ctrNo = ''&#xA;            def checkDigit = ''&#xA;            def unitIdVal=u.getFieldValue(&quot;unitId&quot;)&#xA;            print('unitId ::'+unitIdVal)&#xA;            if(equiClassKey.equals('CONTAINER') &amp;&amp; unitIdVal.startsWith('MATU')){&#xA;                ctrNo = unitIdVal.substring(4,unitIdVal.length()-1)&#xA;                checkDigit = unitIdVal.substring(unitIdVal.length()-1)&#xA;            }else if(equiClass.equals('ACCESSORY')){&#xA;                ctrNo = unitIdVal&#xA;                checkDigit = ''&#xA;            }else{&#xA;                ctrNo =unitIdVal.substring(0,unitIdVal.length()-1)&#xA;                checkDigit = unitIdVal.substring(unitIdVal.length()-1)&#xA;            }&#xA;            def ctrNoAttr = gvyTxtMsgFmt.doIt('ctrNo',ctrNo)&#xA;            def checkDigitAttr = gvyTxtMsgFmt.doIt('checkDigit',checkDigit)&#xA;&#xA;            //SRV&#xA;            def gvyEquiObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEquiDetail&quot;);&#xA;            def srv = gvyEquiObj.getSrv(unit,gvyBaseClass)&#xA;            def srvAttr = gvyTxtMsgFmt.doIt('srv',srv)&#xA;&#xA;            //LOC&#xA;            def lkpSlot=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;            lkpSlot = lkpSlot!= null ? lkpSlot : ''&#xA;            def lkpSlotValue = lkpSlot.indexOf(&quot;.&quot;)== -1 ? lkpSlot : lkpSlot.substring(0,lkpSlot.indexOf(&quot;.&quot;));&#xA;            def lkpLocType=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;            def lkpLocTypeKey = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;            /*def loc = lkpLocTypeKey.equals('YARD') ? lkpSlotValue : ''&#xA;            //A4&#xA;            //def gvyPosition = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisPositionDetail&quot;);&#xA;            //loc = gvyPosition.formatYardPosition(loc)&#xA;            if(loc == null || 'null'.equals(loc)){&#xA;                        loc='%'&#xA;            } */ //A9&#xA;            def locAttr = gvyTxtMsgFmt.doIt('loc','%')&#xA;&#xA;            //OWNER&#xA;            def equiOwner =u.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOwner.bzuId&quot;)&#xA;            def ownerAttr = gvyTxtMsgFmt.doIt('owner',equiOwner)&#xA;&#xA;            //CWEIGHT &amp; TAREWEIGHT&#xA;            def equiTareKg= u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqTareWeightKg&quot;)&#xA;            def equiTareLB = equiTareKg != null ? Math.round(equiTareKg * 2.20462262 ) : ''&#xA;            def cWeightAttr = gvyTxtMsgFmt.doIt('cWeight',equiTareLB)&#xA;            def tareWeightAttr = gvyTxtMsgFmt.doIt('tareWeight',equiTareLB)&#xA;&#xA;            //RET_PORT&#xA;            def retport = u.getFieldValue(&quot;unitRouting.rtgReturnToLocation&quot;);&#xA;            def retportAttr = gvyTxtMsgFmt.doIt('retPort',retport)&#xA;&#xA;            //STRENGTH CODE&#xA;            def equiStrengthCode=u.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqStrengthCode&quot;)&#xA;            def strengthAttr = gvyTxtMsgFmt.doIt('strength', equiStrengthCode)&#xA;&#xA;            //HARDCODED VALUES&#xA;            def dirAttr =  gvyTxtMsgFmt.doIt('dir', 'MTY')&#xA;            def dPortAttr =  gvyTxtMsgFmt.doIt('dPort', 'OPT')&#xA;            def dischargePortAttr = gvyTxtMsgFmt.doIt('dischargePort', 'OPT')&#xA;            def locationRunAttr = gvyTxtMsgFmt.doIt('locationRun', 'NO')&#xA;            def orientationAttr = gvyTxtMsgFmt.doIt('orientation', 'E')&#xA;&#xA;            //Location Status&#xA;            def _transitState=u.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;            def transitStateKey = _transitState != null ? _transitState.getKey() : ''&#xA;&#xA;            def _category=u.getFieldValue(&quot;unitCategory&quot;)&#xA;            def categoryKey = _category != null ? _category.getKey() : ''&#xA;&#xA;            def dischPort = u.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;            def loadPort = u.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;)&#xA;           def loadPortAttr = gvyTxtMsgFmt.doIt('loadPort', loadPort)&#xA;           //def loadPortAttr = gvyTxtMsgFmt.doIt('loadPort', 'null')&#xA;          &#xA;            def facility = ContextHelper.getThreadFacility().getFcyRoutingPoint().getPointId();&#xA;&#xA;            def facilityAttr = gvyTxtMsgFmt.doIt('facility', facility)&#xA;          &#xA;            def _drayStatus=u.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;            def drayStatusKey = _drayStatus!= null ? _drayStatus.getKey() : _drayStatus&#xA;&#xA;            def lkpCarrierId=u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocId&quot;)&#xA;            def positionObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisPositionDetail&quot;);&#xA;            def locationType = positionObj.getLocationStatus(lkpLocTypeKey,lkpCarrierId,transitStateKey,gvyCmisUtil,categoryKey,dischPort)&#xA;            def locationStatusAttr = gvyTxtMsgFmt.doIt('locationStatus',locationType)&#xA;&#xA;            //DAMAGE_CODE&#xA;            def damageCode = u.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsDamageSeverity&quot;)&#xA;            damageCode = damageCode != null ? damageCode.getKey() : damageCode&#xA;            def dmgCodeFmt = damageCode.equals('MAJOR') ? 'H' : (damageCode.equals('MINOR') ? 'L' : '')&#xA;            def damageCodeAttr = gvyTxtMsgFmt.doIt('damageCode',dmgCodeFmt)&#xA;&#xA;            //LOCATION ROW&#xA;            def lineOperator=u.getFieldValue(&quot;unitLineOperator.bzuId&quot;)&#xA;            def locationRowAttr =  gvyTxtMsgFmt.doIt('locationRow',lineOperator)&#xA;&#xA;            //ACTION INFORMATION&#xA;            def actionObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisActionDetail&quot;);&#xA;            def actionAttributes = actionObj.doIt(gvyTxtMsgFmt,gvyEventObj,gvyBaseClass,u)&#xA;&#xA;            def commodity =  getCommodityAuto(unit);&#xA;            def commodityAttr =  gvyTxtMsgFmt.doIt('commodity',commodity)&#xA;            def doer = gvyCmisUtil.getFieldValues(actionAttributes,&quot;doer=&quot;)&#xA;&#xA;            if (doer != null &amp;&amp; doer.contains('ACETS')) {&#xA;                actionAttributes = gvyCmisUtil.eventSpecificFieldValue(actionAttributes, &quot;lastAction=&quot;, 'AULD')&#xA;                actionAttributes = gvyCmisUtil.eventSpecificFieldValue(actionAttributes, &quot;action=&quot;, 'AULD')&#xA;            } else {&#xA;                actionAttributes = actionAttributes.replace(&quot;lastAction='null'&quot;, &quot;lastAction='ULD'&quot;)&#xA;                actionAttributes = actionAttributes.replace(&quot;action='null'&quot;, &quot;action='ULD'&quot;)&#xA;            }&#xA;           /* println(&quot;Evaluating     isForMTX    &quot; + isForMTX + &quot;    doer    &quot; + doer);&#xA;            if (isForMTX) {&#xA;                if (doer != null &amp;&amp; !doer.contains('ACETS')) {&#xA;                    actionAttributes = gvyCmisUtil.eventSpecificFieldValue(actionAttributes, &quot;lastAction=&quot;, 'AMTX')&#xA;                    actionAttributes = gvyCmisUtil.eventSpecificFieldValue(actionAttributes, &quot;action=&quot;, 'AMTX')&#xA;                } else {&#xA;                    actionAttributes = actionAttributes.replace(&quot;lastAction='null'&quot;, &quot;lastAction='MTX'&quot;)&#xA;                    actionAttributes = actionAttributes.replace(&quot;action='null'&quot;, &quot;action='MTX'&quot;)&#xA;                }&#xA;            }*/&#xA;&#xA;            //LEG&#xA;            def legAttr = gvyTxtMsgFmt.doIt('leg','null')&#xA;&#xA;            //TYPE CODE / HEIGHT&#xA;            def typeCodeAttr = gvyTxtMsgFmt.doIt('typeCode','%')&#xA;            def hgtAttr = gvyTxtMsgFmt.doIt('hgt','%')&#xA;&#xA;            //Passing List&#xA;            def stripAttributes = eventTypeAttr + unitClassAttr + ctrNoAttr + checkDigitAttr + srvAttr + locAttr + ownerAttr + cWeightAttr + tareWeightAttr + retportAttr + strengthAttr + dirAttr + dPortAttr + dischargePortAttr + loadPortAttr + facilityAttr + locationRunAttr + orientationAttr + locationStatusAttr + damageCodeAttr + locationRowAttr + ' ' + actionAttributes + legAttr + typeCodeAttr + hgtAttr + commodityAttr&#xA;&#xA;            groovyXml = gvyTxtMsgFmt.createGroovyXml(stripAttributes)&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return groovyXml&#xA;    }//Method Ends&#xA;&#xA;    public String getCommodityAuto(Object unit)&#xA;    {&#xA;        def commodity = ''&#xA;        try&#xA;        {&#xA;            //set commodity value&#xA;            def commodityId=unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;)&#xA;            commodity = commodityId != null ? commodityId : ''&#xA;            if(commodity.equals('AUTO')){&#xA;                commodity='MTYAUT'&#xA;            }else if(commodity.equals('AUTOCON')){&#xA;                commodity='MTYCFS'&#xA;            }&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return commodity&#xA;    }&#xA;&#xA;    //Generate Release Records for ACETS before Stripping the unit&#xA;    public void processHoldsReleaseStrip(Object event, String holds,String evntDoer,Object unit)&#xA;    {&#xA;        try{&#xA;            def unitProcessor = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisDataProcessor&quot;)&#xA;            def appendObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;)&#xA;            def evntFldChngProcess = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEvntFldChngProcessor&quot;)&#xA;            def unitXml = unitProcessor.doIt(event)&#xA;            def xmlGvyString = unitXml&#xA;&#xA;            def unitHolds = holds != null ? holds : ''&#xA;            def holdsList = unitHolds.split(' ')&#xA;            def cmisAction = 'ALT';&#xA;            for(aHold in holdsList)&#xA;            {&#xA;                if(!evntDoer.contains('ACETS'))&#xA;                {&#xA;                    xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;msgType=&quot;,aHold+'_RELEASE',null,null,null)&#xA;                    xmlGvyString = stripHoldOfField(appendObj,xmlGvyString,&quot;crStatus=&quot;,aHold)&#xA;                    xmlGvyString = stripHoldOfField(appendObj,xmlGvyString,&quot;comments=&quot;,aHold)&#xA;                    xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;loc=&quot;,&quot;%&quot;,null,null,null) //A9&#xA;&#xA;                    // To Pass back acets Messages&#xA;                    def postAcetsMsg = evntFldChngProcess.postHoldReleaseAcetsMsg(unit,gvyBaseClass,gvyCmisUtil)&#xA;                    if(postAcetsMsg){&#xA;                        gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,'HLR')&#xA;                    }&#xA;&#xA;                    cmisAction = 'ALT'&#xA;                    xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;lastAction=&quot;,cmisAction,null,null,null)&#xA;                    xmlGvyString =  appendObj.addEventSpecificFldValue(xmlGvyString,&quot;action=&quot;,cmisAction,null,null,null)&#xA;                    gvyBaseClass.sendXml(xmlGvyString)&#xA;                }&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;    //Strip of Hold from CrStatus and Comments&#xA;    public String stripHoldOfField(Object utilObj, String xmlGvyData, String field, String aHold)&#xA;    {&#xA;        def xmlGvyString = xmlGvyData&#xA;        try&#xA;        {&#xA;            def  fieldValue = utilObj.getFieldValues(xmlGvyString, field)&#xA;            def fieldNew = fieldValue.replace(aHold,'')&#xA;            fieldNew = fieldNew != null &amp;&amp; fieldNew.trim().length() &gt; 0  ? fieldNew.trim() : 'null'&#xA;            xmlGvyString = utilObj.addEventSpecificFldValue(xmlGvyString,field,fieldNew,null,null,null);&#xA;        }&#xA;        catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return xmlGvyString&#xA;    }&#xA;&#xA;    //Method Check only to Pass one UNIT_STRIP&#xA;    public boolean checkAcetsStrip(Object event)&#xA;    {&#xA;        try&#xA;        {&#xA;            def doer = event.event.evntAppliedBy&#xA;            def evntNotes = event.event.evntNote&#xA;            evntNotes = evntNotes != null ? evntNotes : ''&#xA;            if(doer.contains('ACETS') &amp;&amp; evntNotes.contains('Stripped')){&#xA;                return false;&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return true;&#xA;    }&#xA;&#xA;    /* A2 - Method post Strip MTX dependent actions on the SN4Q */&#xA;    public void depndMtxActionForSn4Q(Object event,Object unit, Object gvyBaseClass){&#xA;        try{&#xA;            def unitProcessor = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisDataProcessor&quot;)&#xA;            def unitXml = unitProcessor.doIt(event)&#xA;&#xA;            def inComplex = unit.getFieldValue(&quot;unitComplex.cpxGkey&quot;)&#xA;            def equiGKey = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.ueGkey&quot;)&#xA;            def inFacility = com.navis.argo.ContextHelper.getThreadFacility()&#xA;&#xA;            def gateData = gvyBaseClass.getGroovyClassInstance(&quot;GvyUnitUtility&quot;)&#xA;            def retiredUfv = gateData.findRetiredUfvUnit(inFacility, equiGKey)&#xA;            //Previous misc value&#xA;            def retiredUnit = retiredUfv.ufvUnit&#xA;            def misc3 = retiredUnit.unitSealNbr4&#xA;            misc3 = misc3 != null ? misc3 : ''&#xA;            def dischPort = retiredUnit.unitRouting.rtgPOD1 != null ?  retiredUnit.unitRouting.rtgPOD1.pointId : ''  //A4&#xA;            //DTD Messages&#xA;            if (ContextHelper.getThreadFacility().getFcyId().equals(dischPort) &amp;&amp; misc3.length() &gt; 6) {&#xA;                gvyCmisUtil.postMsgForAction(unitXml,gvyBaseClass,'DTD')&#xA;            }&#xA;&#xA;            //HZD and OVD messages out here&#xA;            //-- A6 postMsgHzdOvd(unitXml,retiredUnit,gvyBaseClass,event)&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;    /*  public void postMsgHzdOvd(String xmlData,Object unit,Object gvyBaseClass,Object event)&#xA;      {&#xA;         def xmlGvyString = xmlData&#xA;         def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;         def isHazardous=unit.getFieldValue(&quot;unitGoods.gdsIsHazardous&quot;)&#xA;         def outOfGauge  = unit.getFieldValue(&quot;unitIsOog&quot;);&#xA;         def msgType = gvyCmisUtil.getFieldValues(xmlGvyString,&quot;msgType=&quot;)&#xA;&#xA;         if(isHazardous)&#xA;         {&#xA;           HazardItem hazardIt = null; def imdg = null; def hzrdItemNbrType = null;  def mostHazNum=null;&#xA;           def hazDesc= null; def hazRegs = null;&#xA;&#xA;           def gdsBase= unit.getUnitGoods()&#xA;           Hazards hazards = gdsBase.getGdsHazards();&#xA;           Iterator it = hazards.getHazardItemsIteratorOrderedBySeverity()&#xA;           while (it.hasNext()) {&#xA;             hazardIt = (HazardItem) it.next();&#xA;             imdg = hazardIt.hzrdiImdgClass.key&#xA;             hzrdItemNbrType = hazardIt.hzrdiNbrType.key&#xA;             mostHazNum = hazardIt.hzrdiUNnum&#xA;             hazDesc = hazardIt.getDescription()&#xA;             if(hazDesc != null){&#xA;               hazDesc = hazDesc.indexOf(' ') != -1 ? hazDesc.substring(hazDesc.indexOf(' ')+1) : null&#xA;             }&#xA;             hazRegs = hazDesc != null ? (hazDesc.contains('Liquid') ? 'DOT' : 'IMO') : ''&#xA;&#xA;             xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;hazImdg=&quot;,imdg)&#xA;             xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;flex01=&quot;,hzrdItemNbrType)&#xA;             xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;hazUnNum=&quot;,mostHazNum)&#xA;             xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;hazDesc=&quot;,hazDesc)&#xA;             xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;hazRegs=&quot;,hazRegs)&#xA;             xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;hazF=&quot;,&quot;null&quot;)&#xA;&#xA;            def xmlGvyHazStr = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;msgType=&quot;,&quot;UNIT_HAZARDS_DELETE&quot;)&#xA;            gvyCmisUtil.postMsgForAction(xmlGvyHazStr,gvyBaseClass,&quot;HZD&quot;)&#xA;&#xA;           }//While Ends&#xA;&#xA;         }&#xA;         if(outOfGauge) //A6&#xA;         {&#xA;           def xmlGvyOvuStr = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;msgType=&quot;,&quot;UNIT_OVERDIMENSIONS_DELETE&quot;)&#xA;           gvyCmisUtil.postMsgForAction(xmlGvyOvuStr,gvyBaseClass,&quot;OVD&quot;)&#xA;         }&#xA;      }  */&#xA;}" />
<digital-asset id="GvyTruckerCorrection" short-description="GvyTruckerCorrection" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.api.UnitManager;&#xA;import com.navis.inventory.business.api.RectifyParms;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.business.api.UnitFinder;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.road.business.model.TruckingCompany&#xA;&#xA;public class GvyTruckerCorrection extends GroovyInjectionBase &#xA;{&#xA;&#xA;   public String execute(Map inParameters)&#xA;  {&#xA;     try&#xA;    {&#xA;&#xA;      //Processing One unit at a time &#xA;      def unitId = (String) inParameters.get(&quot;unitId&quot;);&#xA;      def truckCd = (String) inParameters.get(&quot;truck&quot;); &#xA;&#xA;      def unit =  findVisitStateActiveUnit(unitId)&#xA;      if(unit != null) &#xA;     {&#xA;         def truck = unit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;) &#xA;     &#xA;         def lkpLocType=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;         def lkpLocTypeKey = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;         println(&quot;UNIT :&quot;+unitId+&quot;  truck : &quot;+truck+&quot;   truckCD ::&quot;+truckCd+&quot;  lkpLocTypeKey ::&quot;+lkpLocTypeKey)&#xA;          if(lkpLocTypeKey.equals('YARD') || lkpLocTypeKey.equals('VESSEL')){&#xA;      &#xA;           def trkc = TruckingCompany.findTruckingCompany(truckCd)&#xA;           unit.getUnitRouting().setRtgTruckingCompany(trkc);&#xA;           println(&quot;Unit : &quot;+unitId+&quot;  Set Trucker :&quot;+truckCd)&#xA;       } else{&#xA;           println(&quot;Trucker Code does not need to be set&quot;)&#xA;          }&#xA;      }&#xA;     }catch(Exception e){&#xA;       e.printStackTrace()&#xA;    }&#xA;&#xA;  }//Method execute Ends&#xA;&#xA;&#xA;  // Method returns a Set of Complex Level Master State Active Units &#xA;  public Object findVisitStateActiveUnit(String unitId)&#xA;  {&#xA;    def inUnit = null;&#xA;    try{&#xA;     def unitFinder = getUnitFinder()&#xA;     def complex = ContextHelper.getThreadComplex();&#xA;     def inEquipment = Equipment.loadEquipment(unitId);&#xA;     if(inEquipment != null){&#xA;        inUnit = unitFinder.findActiveUnit(complex,inEquipment)&#xA;      }&#xA;    println(&quot;unitId Lookup for Equipment :::&quot;+unitId+&quot;unitId Lookup for Object :::&quot;+inUnit) &#xA;    }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    }   &#xA;    return inUnit&#xA;  }&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyCmisTrade" short-description="GvyCmisTrade" is-pre-deployed="N" groovy-code="/*&#xA;* Srno Doer  Date      Change&#xA;* A1   GR    08/30/10  Trade logic Classs&#xA;*A2    RP    05/20/2013    trade logic is changed to calculate eastbound trades correctly&#xA;* A3    KR  07/13/2015      Alaska Changes&#xA;*/&#xA;&#xA;public class GvyCmisTrade {&#xA;&#xA;    public String processTrade(Object unit, Object srv) {&#xA;        def trade = ''&#xA;        def loadPort = unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;)&#xA;        def dischargePort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;        def destination = unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;)&#xA;        try {&#xA;            if ('MAT'.equals(srv) || 'CRX'.equals(srv)) {&#xA;                trade = 'A'&#xA;            } else { // may need change for 'MSK' carrier, so else is left&#xA;                trade = 'A'&#xA;            }&#xA;            println(&quot;trade::after:&quot; + trade);&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;        return trade;&#xA;    }&#xA;&#xA;    public static Map ports = new HashMap();&#xA;    static {&#xA;&#xA;        ports.put('AUC', 'C')&#xA;        ports.put('BRI', 'C')&#xA;        ports.put('MEL', 'C')&#xA;        ports.put('NUK', 'C')&#xA;        ports.put('PAP', 'C')&#xA;        ports.put('SFO', 'C')&#xA;        ports.put('SUV', 'C')&#xA;        ports.put('SYD', 'C')&#xA;        ports.put('SYD', 'C')&#xA;        ports.put('WEL', 'C')&#xA;        ports.put('WLG', 'C')&#xA;        ports.put('HAK', 'F')&#xA;        ports.put('KAO', 'F')&#xA;        ports.put('KEEL', 'F')&#xA;        ports.put('KOB', 'F')&#xA;        ports.put('portsH', 'F')&#xA;        ports.put('MOJ', 'F')&#xA;        ports.put('NAH', 'F')&#xA;        ports.put('NGB', 'F')&#xA;        ports.put('NGO', 'F')&#xA;        ports.put('OSA', 'F')&#xA;        ports.put('PUS', 'F')&#xA;        ports.put('SHA', 'F')&#xA;        ports.put('TSI', 'F')&#xA;        ports.put('XMN', 'F')&#xA;        ports.put('YOK', 'F')&#xA;        ports.put('YTN', 'F')&#xA;        ports.put('API', 'G')&#xA;        ports.put('APW', 'G')&#xA;        ports.put('GUM', 'G')&#xA;        ports.put('KMI', 'G')&#xA;        ports.put('PAG', 'G')&#xA;        ports.put('PNP', 'G')&#xA;        ports.put('PPT', 'G')&#xA;        ports.put('PUX', 'G')&#xA;        ports.put('RTA', 'G')&#xA;        ports.put('SPN', 'G')&#xA;        ports.put('TIN', 'G')&#xA;        ports.put('TMGU', 'G')&#xA;        ports.put('UUK', 'G')&#xA;        ports.put('YAP', 'G')&#xA;        ports.put('HIL', 'H')&#xA;        ports.put('HNC', 'H')&#xA;        ports.put('HON', 'H')&#xA;        ports.put('HUHI', 'H')&#xA;        ports.put('KAH', 'H')&#xA;        ports.put('KAHI', 'H')&#xA;        ports.put('KHI', 'H')&#xA;        ports.put('KKHI', 'H')&#xA;        ports.put('LAX', 'H')&#xA;        ports.put('LNI', 'H')&#xA;        ports.put('MIX', 'H')&#xA;        ports.put('MOL', 'H')&#xA;        ports.put('NAW', 'H')&#xA;        ports.put('NAX', 'H')&#xA;        ports.put('OAC', 'H')&#xA;        ports.put('OAK', 'H')&#xA;        ports.put('PCHI', 'H')&#xA;        ports.put('PDX', 'H')&#xA;        ports.put('PRL', 'H')&#xA;        ports.put('RCH', 'H')&#xA;        ports.put('SEA', 'H')&#xA;        ports.put('UEHI', 'H')&#xA;        ports.put('EBY', 'M')&#xA;        ports.put('JIS', 'M')&#xA;        ports.put('KWJ', 'M')&#xA;        ports.put('MAJ', 'M')&#xA;        ports.put('WAK', 'M')&#xA;    }&#xA;&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyCmisEventUnitReroute" short-description="General Notice: UnitReroute" is-pre-deployed="N" groovy-code="/*&#xA;**************************************************************************************&#xA;* Srno   Date&#x9;        Changer&#x9;         Change Description&#xA;* A1     01/13/08       Glenn Raposo&#x9; Pulled out the Storage change for xps:CHNG_REROUTE&#xA;* A2     01/28/10       GR               Handeled Null Exception in Creating Groovy Class&#xA;* A3     08/19/10       GR               Acets detentionDateChng Added&#xA;* A4     04/15/11       GR               Adding the Service message Check For UNIT_REROUTE EVENT&#xA;* A5     06/15/11       GR               Post LTV for Routing Done on Emptys after Load to pass leg correctly&#xA;* A6     02/27/14       RI&#x9;&#x9; &#x9;     Added method to capture Integration error&#xA;*****************************************************************************************&#xA;*/&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;&#xA;public class GvyCmisEventUnitReroute {&#xA;  def gvyBaseClass;&#xA;  def ret = null;&#xA;  def eventId = null;&#xA;&#xA;  public void processUnitReroute(Object unit, Object event, Object api) {&#xA;    try&#xA;    {&#xA;     gvyBaseClass = api;&#xA;     def gvyEventUtil = api.getGroovyClassInstance(&quot;GvyEventUtil&quot;)&#xA;     def gvyCmisUtil = api.getGroovyClassInstance(&quot;GvyCmisUtil&quot;)&#xA;&#xA;&#x9; postLTVForRtgEmpty(unit, event, gvyEventUtil) //A5&#xA;     setOBCarrierOnPODChng(unit,gvyEventUtil,gvyCmisUtil,event)&#xA;     updateDestinationAfterPodReroute(unit, event, api);&#xA;     imprtToExportFlipRemoveBookingNum(event, api, unit, gvyEventUtil);&#xA;    }catch(Exception e){&#xA;      e.printStackTrace();&#xA;      println(&quot;Error :::::::::::::::::::::::::::&quot;+e)&#xA;    }&#xA;&#xA;  } // processUnitReroute End&#xA;&#xA;  /**&#xA;   *  Cargo Status&#xA;   *  changing export to import we want to&#xA;   *  set (export) booking number to null for&#xA;   *  Unit_reroute event type&#xA;   */&#xA;  private void imprtToExportFlipRemoveBookingNum(Object event, Object api, Object unit,Object gvyEventUtil) {&#xA;&#xA;   try&#xA;      {&#xA;      /* Set Avail Date */&#xA;      def availLookup = api.getGroovyClassInstance(&quot;GvyAvailDate&quot;);&#xA;      boolean update =   availLookup.setAvailDate(unit, event);&#xA;&#xA;      //Filter for Category=Import&#xA;       def  reportProcessing = gvyEventUtil.verfiyReportSnxProcessing(event)&#xA;       if(reportProcessing)&#xA;       {&#xA;         try{&#xA;         &#x9;def mtyFructoseGvy = api.getGroovyClassInstance(&quot;GvyUnitCargoStatus&quot;);&#xA;         &#x9;ret = mtyFructoseGvy.sendXml(&quot;CARGO_STATUS&quot;, event);&#xA;&#x9;&#x9; &#x9;api.sendXml(ret)&#xA;&#x9; &#x9;}catch (Exception e){&#xA;&#x9;&#x9;&#x9;String error = e;&#xA;&#x9;&#x9;&#x9;//A6&#xA;&#x9;&#x9;&#x9;if (error.contains(&quot;JMS&quot;) &amp;&amp; ret != null){&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Calling MatGetIntegrationError.createIntegrationError&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String entity = &quot;Unit&quot;;&#xA;&#x9;&#x9;&#x9;  &#x9;def unitId = unit.getUnitId();&#xA;&#x9;&#x9;&#x9;  &#x9;def errDesc = &quot;CARGO_STATUS Failed for &quot;+unitId;&#xA;&#x9;&#x9;&#x9;  &#x9;eventId = event.event.eventTypeId;&#xA;&#x9;&#x9;&#x9;  &#x9;def inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;&#x9;  &#x9;inj.getGroovyClassInstance(&quot;MatGetIntegrationError&quot;).createIntegrationError(error,entity,unitId,eventId,errDesc,ret);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;       }&#xA;&#xA;      /*&#xA;       * 1]  N4 TO CMIS data processing&#xA;       * 2]  Check for Msg from Acets i) Dont Create Cmis Feed&#xA;       * 3]  XPS:CHNG_RTNG - i) Set POD to DestPort   ii) Dont Create Cmis Feed&#xA;       */&#xA;      boolean processCmisFeed  = gvyEventUtil.verfiyCmisFeedProcessing(event)&#xA;&#xA;&#xA;      //XPS:CHNG_RTNG -  ii)  Dont Create Cmis Feed Filter&#xA;      def xpsChngRtng  = gvyEventUtil.nonProcessingXpsAction(event,'CHNG_RTNG')&#xA;&#xA;      //Acets Message Filter&#xA;      boolean processAcetsMsg = gvyEventUtil.acetsMesssageFilter(event)&#xA;      def detentionDateChng =  gvyEventUtil.wasFieldChanged(event,'ufvFlexDate03')&#xA;      //added for Detention to get the DTD/DTAs on the unit_reroute&#xA;      def updtdischPort =  gvyEventUtil.wasFieldChanged(event,'rtgPOD1');&#xA;&#x9;  &#xA;&#x9;  println(&quot;processCmisFeed:&quot;+processCmisFeed +&quot;xpsChngRtng--&gt;&quot;+xpsChngRtng +&quot;processAcetsMsg&quot;+processAcetsMsg);&#xA;&#x9;  &#xA;      if(processCmisFeed &amp;&amp; xpsChngRtng &amp;&amp; !processAcetsMsg)&#xA;      {&#xA;         def unitDetails = api.getGroovyClassInstance(&quot;GvyCmisDataProcessor&quot;)&#xA;         def unitDtlXml = unitDetails.doIt(event)&#xA;&#xA;        //SRV MSG - A4&#xA;        def gvySrvObj = api.getGroovyClassInstance(&quot;GvyCmisSrvMsgProcessor&quot;);&#xA;        gvySrvObj.processServiceMessage(unitDtlXml,event,api)&#xA;&#xA;&#xA;         //Detention Msg Check&#xA;         boolean detnMsg = false&#xA;         if(update || detentionDateChng || updtdischPort){&#xA;             def gvyDentObj = api.getGroovyClassInstance(&quot;GvyCmisDetentionMsgProcess&quot;);&#xA;             detnMsg = gvyDentObj.detentionProcess(unitDtlXml,event,api)&#xA;         }&#xA;&#xA;         def rerouteEvntFeed = api.getGroovyClassInstance(&quot;GvyCmisEventFeedUnitReroute&quot;)&#xA;         rerouteEvntFeed.processUnitRerouteCmisFeed(unitDtlXml, api, event, unit, null, detnMsg )&#xA;      }&#xA;     else if ((update|| detentionDateChng || updtdischPort) &amp;&amp; processAcetsMsg) //A3&#xA;      {&#xA;            // N4 TO CMIS data processing&#xA;            def unitDetails = api.getGroovyClassInstance(&quot;GvyCmisDataProcessor&quot;)&#xA;            def unitDtl = unitDetails.doIt(event)&#xA;&#xA;            //Detention Msg Check&#xA;            if(update || detentionDateChng){&#xA;               def gvyDentObj = api.getGroovyClassInstance(&quot;GvyCmisDetentionMsgProcess&quot;);&#xA;               boolean detnMsg = gvyDentObj.detentionProcess(unitDtl,event,api)&#xA;            }&#xA;      }&#xA;    println(&quot;Avail Date:&quot;+update+&quot;   processCmisFeed:&quot;+processCmisFeed+&quot; xpsChngRtng:&quot;+xpsChngRtng+&quot; processAcetsMsg:&quot;+processAcetsMsg+&quot;  detentionDateChng:&quot;+detentionDateChng  )&#xA;    } catch(Exception e) {&#xA;      e.printStackTrace();&#xA;    }&#xA;&#xA;  } // imprtToExportFlipRemoveBookingNum end&#xA;&#xA;  /**&#xA;   * This method is used on a unit_reroute event.&#xA;   * If initiated by SPARCS, then the destination must&#xA;   * be updated to match the POD just changed by SPARCS.&#xA;   */&#xA;  private void updateDestinationAfterPodReroute(Object unit, Object event, Object api) {&#xA;    /* Pre-Conditions:&#xA;     *  1. Event created by XPS&#xA;     *  2. Event created by XPS for &quot;CHNG_RTNG&quot; (change routing)&#xA;     *  3. Category is storage&#xA;     *  4. Freight-kind is empty&#xA;     *  5. Destination is optional&#xA;     *  6. POD was changed&#xA;     */&#xA;    try{&#xA;    def recorder = event.getEvent().getFieldValue(&quot;evntAppliedBy&quot;);&#xA;&#xA;    if (recorder.indexOf(&quot;xps&quot;) &gt;= 0&#xA;        &amp;&amp; recorder.indexOf(&quot;CHNG_RTNG&quot;) &gt;= 0&#xA;        &amp;&amp; unit.getFieldValue(&quot;unitFreightKind&quot;) == com.navis.argo.business.atoms.FreightKindEnum.MTY&#xA;      //  &amp;&amp; unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;).equals(&quot;OPT&quot;)&#xA;        &amp;&amp; event.wasFieldChanged(&quot;POD&quot;) ) {&#xA;&#xA;      /* Preform Update:&#xA;       * 1. Set destination to match POD&#xA;       */&#xA;      unit.setFieldValue(&quot;unitGoods.gdsDestination&quot;, unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;));&#xA;    }&#xA;   }catch(Exception e){&#xA;     e.printStackTrace();&#xA;   }&#xA;  } // updateDestinationAfterPodReroute end&#xA;&#xA;/*&#xA;  1] Set OBCarreir as GEN_VESSEL if POD is chnaged to NIS&#xA;  2] Set OBCarreir as GEN_TRUCK if POD is chnaged to HON&#xA;  3] Set only if POD changed and unit is not Departed&#xA;*/&#xA; public void setOBCarrierOnPODChng(Object unit, Object gvyEventUtil,Object  gvyCmisUtil,Object event)&#xA; {&#xA;   try&#xA;   {&#xA;    def updtdischPort = gvyEventUtil.wasFieldChanged(event,'rtgPOD1')&#xA;    def transitState=unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;    transitState = transitState != null ? transitState.getKey() : ''&#xA;&#xA;    if(!updtdischPort){&#xA;        return;&#xA;    }else if (updtdischPort &amp;&amp; transitState.equals(&quot;S70_DEPARTED&quot;)){&#xA;       return;&#xA;    }&#xA;&#xA;    def visit = &quot;&quot;&#xA;    def complex = com.navis.argo.ContextHelper.getThreadComplex();&#xA;    gvyBaseClass = gvyBaseClass == null ? new GroovyInjectionBase() : gvyBaseClass&#xA;    def prevDischPort =  gvyEventUtil.getPreviousPropertyAsString(event, &quot;rtgPOD1&quot;);&#xA;&#x9;def gvyDomQueryObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisDomainQueryUtil&quot;)&#xA;&#x9;prevDischPort = gvyDomQueryObj.lookupRtgPOD(prevDischPort)&#xA;    prevDischPort = prevDischPort != null ? prevDischPort : &quot;&quot;&#xA;&#xA;    def curDischPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;    curDischPort = curDischPort != null ? curDischPort : &quot;&quot;&#xA;&#xA;   def intdObCarrierId = unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;)&#xA;   intdObCarrierId = intdObCarrierId != null ? intdObCarrierId : &quot;&quot;&#xA;&#xA;    boolean ObcarrierFlag = intdObCarrierId.equals(&quot;GEN_TRUCK&quot;) || intdObCarrierId.equals(&quot;GEN_VESSEL&quot;) || intdObCarrierId.equals(&quot;GEN_CARRIER&quot;) ? true : false&#xA;&#xA;    boolean ObcarrierFlagHon = intdObCarrierId.equals(&quot;BARGE&quot;) || intdObCarrierId.equals(&quot;GEN_VESSEL&quot;) || intdObCarrierId.equals(&quot;GEN_CARRIER&quot;) ? true : false&#xA;&#xA;    /*if(gvyCmisUtil.isNISPort(curDischPort) &amp;&amp; !gvyCmisUtil.isNISPort(prevDischPort) &amp;&amp; ObcarrierFlag){&#xA;      //visit = com.navis.argo.business.model.CarrierVisit.getGenericVesselVisit(complex);&#xA;      //SET IT TO BARGE&#xA;     visit = com.navis.argo.business.model.CarrierVisit.findOrCreateVesselVisit(com.navis.argo.ContextHelper.getThreadFacility(), &quot;BARGE&quot;)&#xA;     unit.getUfvForFacilityNewest(com.navis.argo.ContextHelper.getThreadFacility()).setUfvIntendedObCv(visit);&#xA;     unit.getUfvForFacilityNewest(com.navis.argo.ContextHelper.getThreadFacility()).setUfvActualObCv(visit);&#xA;&#xA;    }else*/ if(curDischPort.equals(ContextHelper.getThreadFacility().getFcyId()) &amp;&amp; !prevDischPort.equals(ContextHelper.getThreadFacility().getFcyId()) &amp;&amp; ObcarrierFlagHon){&#xA;      visit = com.navis.argo.business.model.CarrierVisit.getGenericTruckVisit(complex);&#xA;      unit.getUfvForFacilityNewest(com.navis.argo.ContextHelper.getThreadFacility()).updateObCv(visit);&#xA;    }&#xA;   }catch(Exception e){&#xA;        e.printStackTrace()&#xA;   }&#xA;&#xA; }//Method Ends&#xA;&#xA; //A5 - FreightKind-Emtpy, ObcarrierMode-vessel, TState-loaded, Booking-no booking,&#xA; // Previous POD changing OPT to valid port then Generate a UNIT_LOAD&#xA; public void postLTVForRtgEmpty(Object unit, Object event, Object gvyEventUtil){&#xA;  try{&#xA;    def freightkind= unit.getFieldValue(&quot;unitFreightKind&quot;).getKey();&#xA;    def transitState = unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;).getKey();&#xA;    def bkgNbr = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;);&#xA;    def aobcarrierMode = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCarrierMode&quot;);&#xA;    aobcarrierMode = aobcarrierMode != null ? aobcarrierMode.getKey() : &quot;&quot;;&#xA;    def previousDischPort =  gvyEventUtil.getPreviousPropertyAsString(event, &quot;rtgPOD1&quot;);&#xA;&#xA;    if('S60_LOADED'.equals(transitState) &amp;&amp; aobcarrierMode.equals('VESSEL') &amp;&amp; freightkind.equals('MTY') &amp;&amp; bkgNbr == null &amp;&amp; ('OPT'.equals(previousDischPort) || previousDischPort == null)){&#xA;           event.postNewEvent( &quot;UNIT_LOAD&quot;, &quot;Created by Unit Reroute on vessel&quot;);&#xA;    }&#xA;&#xA;  }catch(Exception e){ e.printStackTrace(); }&#xA; }//Method Ends&#xA;&#xA;}" />
<digital-asset id="MATBargeYBDepartUnits" short-description="MATBargeYBDepartUnits" is-pre-deployed="N" groovy-code="import com.navis.inventory.InventoryEntity&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.atoms.EquipMaterialEnum&#xA;import com.navis.argo.business.atoms.FlagStatusEnum&#xA;import com.navis.argo.business.atoms.FreightKindEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.services.business.rules.ServiceImpediment&#xA;import org.apache.log4j.Logger&#xA;import java.text.SimpleDateFormat&#xA;import javax.jms.JMSException&#xA;import javax.jms.Session&#xA;import javax.jms.ConnectionFactory&#xA;import javax.jms.MessageProducer&#xA;import javax.jms.Destination&#xA;import javax.jms.TextMessage&#xA;import javax.jms.*&#xA;&#xA;import com.navis.inventory.business.units.Routing;&#xA;import org.apache.activemq.ActiveMQConnectionFactory;&#xA;&#xA;import java.text.DateFormat&#xA;&#xA;/*&#xA;&#xA;&#x9;Date Written: 07/06/2012&#xA;&#x9;Author: Siva Raja&#xA;&#x9;Description: Groovy to extract unit details based on ane event recorded and send xml data to MNS application using JMS.&#xA;&#x9;  */&#xA;&#xA;&#x9;public class  MATBargeYBDepartUnits extends GroovyApi {&#xA;&#xA;&#x9;  UserContext context = ContextHelper.getThreadUserContext();&#xA;&#x9;  Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#xA;  &#x9;private static final String XML_OVERRIDE = &quot;\&quot;&quot;;&#xA;  &#x9;private static final String threadFacility = ContextHelper.getThreadFacility().getFcyId();&#xA;  &#x9;private static final String XML_END_ELEMENT = &quot;/&gt;&quot;;&#xA;  &#x9;private static final String queueName =&quot;&quot;;// &quot;jms.tos.newvess.inbound&quot;;&#xA;  &#x9;private static final String topicName =&quot;&quot;;// &quot;jms.topic.tdp.newVesselHon&quot;;&#xA;&#x9;private static final String url = &quot;&quot;;//&quot;tcp://10.201.1.79:61616&quot;;//production&#xA;&#x9;private String addNode = &quot;Y&quot;;&#xA;&#xA;&#x9;//  public void execute()&#xA;&#x9;public boolean getBargeUnits(String carrierId, String isBarge, String facility, String nextFacility)&#xA;&#x9;  {&#xA;&#x9;&#x9;LOGGER.warn(&quot;MATBargeYBDepartUnits started&quot; + timeNow);&#xA;&#x9;&#x9;println(&quot;MATBargeYBDepartUnits getBargeUnits started&quot; + timeNow);&#xA;&#x9;&#x9;println(&quot;Parameters------------------&gt;&quot;+carrierId +&quot; &quot;+facility+&quot; &quot;+ nextFacility+&quot; &quot;+isBarge)&#xA;&#x9;&#x9;//String cv = &quot;ALE252A&quot;;&#xA;&#x9;&#x9;String cv =carrierId;&#xA;&#x9;&#x9;if (isBarge == &quot;BARGE&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if ((facility == &quot;HON&quot;) &amp;&amp; ((nextFacility == &quot;KHI&quot;)||(nextFacility == &quot;KAH&quot;)||(nextFacility == &quot;NAW&quot;)||&#xA;&#x9;&#x9;&#x9;(nextFacility == &quot;LNI&quot;) || (nextFacility == &quot;MOL&quot;) || (nextFacility == &quot;MIX&quot;) || (nextFacility == &quot;HIL&quot;))&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;List units = getActiveUnits(cv)&#xA;&#x9;&#x9;&#x9;&#x9;UnitFacilityVisit ufv = null;&#xA;&#x9;&#x9;&#x9;&#x9;Iterator unitIterator = units.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(unitIterator.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = unitIterator.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(unit.getUnitId());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ufv = unit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;:::::::UFV::::::::::::::&quot;+ufv);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//UnitFacilityVisit ufv = unit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;&#x9;&#x9;//if (ufv == null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//LOGGER.warn (&quot; Unit facility is null&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//return;&#xA;&#x9;&#x9;&#x9;&#x9;//}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;def carrierMode = LocTypeEnum.getEnum(&quot;VESSEL&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;println(carrierMode);&#xA;&#x9;&#x9;&#x9;&#x9;def obCarrierVisit = CarrierVisit.findCarrierVisit(ContextHelper.getThreadFacility(), carrierMode, cv);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//CarrierVisit cv1 = ufv.getInboundCarrierVisit();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//Facility fcy = Facility.findFacility(&quot;HON&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;&#x9;&#x9;&#x9;&#x9;CarrierVisit cv1 =  CarrierVisit.findVesselVisit(fcy,cv)&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;obCarrierVisit&quot;+obCarrierVisit+&quot; &quot;+cv1);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;List unitList = this.getActiveUnits(cv);&#xA;&#x9;&#x9;&#x9;&#x9;//if (unitList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//LOGGER.warn (&quot;No Units in CV&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;//return;&#xA;&#x9;&#x9;&#x9;&#x9;//}&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;buildXmlElement Start &quot; + cv);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;buildXmlElement Start &quot; + cv);&#xA;&#x9;&#x9;&#x9;&#x9;if (unitList.size() &gt; 0 ){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;StringBuffer xml = this.buildXmlElement(unitList, cv1);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(xml.toString());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(xml.toString());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//Send the Complete XML string to MNS application using JMS queue.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.send(xml.toString());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.topicSend(xml.toString());&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;}&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;MATBargeYBDepartUnits ended&quot; + timeNow);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;MATBargeYBDepartUnits ended&quot; + timeNow);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;println(&quot;Carrier &quot; + carrierId +&quot; is a &quot;+ isBarge)&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;  }&#xA;&#xA;&#x9;//  public void execute()&#xA;&#x9;public boolean execute(Map  params)&#xA;&#x9;  {&#xA;&#x9;&#x9;LOGGER.warn(&quot;MATBargeYBDepartUnitsTest started&quot; + timeNow);&#xA;&#x9;&#x9;println(&quot;MATBargeYBDepartUnitsTest started&quot; + timeNow);&#xA;&#x9;&#x9;String cv = &quot;YB3413A&quot;;&#xA;&#xA;&#x9;&#x9;List units = getActiveUnits(cv)&#xA;&#x9;&#x9;UnitFacilityVisit ufv = null;&#xA;&#x9;&#x9;Iterator unitIterator = units.iterator();&#xA;&#x9;&#x9;while(unitIterator.hasNext())&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;def unit = unitIterator.next();&#xA;&#x9;&#x9;&#x9;println(unit.getUnitId());&#xA;&#x9;&#x9;&#x9;ufv = unit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;&#x9;println(&quot;:::::::UFV::::::::::::::&quot;+ufv);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;//UnitFacilityVisit ufv = unit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;//if (ufv == null){&#xA;&#x9;&#x9;&#x9;//LOGGER.warn (&quot; Unit facility is null&quot;);&#xA;&#x9;&#x9;&#x9;//return;&#xA;&#x9;&#x9;//}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;def carrierMode = LocTypeEnum.getEnum(&quot;VESSEL&quot;);&#xA;&#x9;&#x9;println(carrierMode);&#xA;&#x9;&#x9;def obCarrierVisit = CarrierVisit.findCarrierVisit(ContextHelper.getThreadFacility(), carrierMode, cv);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;//CarrierVisit cv1 = ufv.getInboundCarrierVisit();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;//Facility fcy = Facility.findFacility(&quot;HON&quot;);&#xA;&#x9;&#x9;def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;&#x9;&#x9;CarrierVisit cv1 =  CarrierVisit.findVesselVisit(fcy,cv)&#xA;&#x9;&#x9;println(&quot;obCarrierVisit&quot;+obCarrierVisit+&quot; &quot;+cv1);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;List unitList = this.getActiveUnits(cv);&#xA;&#x9;&#x9;//if (unitList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;//LOGGER.warn (&quot;No Units in CV&quot;);&#xA;&#x9;&#x9;&#x9;//return;&#xA;&#x9;&#x9;//}&#xA;&#x9;&#x9;LOGGER.warn(&quot;buildXmlElement Start &quot; + cv);&#xA;&#x9;&#x9;println(&quot;buildXmlElement Start &quot; + cv);&#xA;&#x9;&#x9;StringBuffer xml = this.buildXmlElement(unitList, cv1);&#xA;&#x9;&#x9;LOGGER.warn(xml.toString());&#xA;&#x9;&#x9;println(xml.toString());&#xA;&#x9;&#x9;LOGGER.warn(&quot;MATBargeYBDepartUnitsTest ended&quot; + timeNow);&#xA;&#x9;&#x9;println(&quot;MATBargeYBDepartUnitsTest ended&quot; + timeNow);&#xA;&#x9;  }&#xA;&#xA;&#x9;public List getActiveUnits(String vesVoy)&#xA;&#x9;{&#xA;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if(vesVoy.startsWith('YB')) {&#xA;&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_INTENDED_OB_ID,vesVoy));&#xA;&#xA;            &#x9;}  else {&#xA;&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID,vesVoy));&#xA;&#xA;            &#x9;}&#xA;&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;  println(dq);&#xA;&#x9;&#x9;&#x9;&#x9;  def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;&#x9;  println(&quot;After unitList&quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;&#x9;  if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(unit.getFieldValue(&quot;unitVisitState&quot;).equals(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; def ufvFcy = unit.getUfvForFacilityCompletedOnly(fcy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if (ufvFcy != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; units.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;  }&#xA;&#x9;&#x9;&#x9;&#x9;  println(&quot;unitsSize&quot; + units.size);&#xA;&#x9;&#x9;&#x9;&#x9;return units;&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;&#x9;   }&#xA;&#xA;&#x9;  public void send(String msg) throws JMSException, Exception {&#xA;&#xA;&#x9;        LOGGER.warn (&quot; in send message &quot;);&#xA;&#x9;        Session                &#x9;session    = null;&#xA;&#x9;        javax.jms.Connection&#x9;connection = null;&#xA;&#x9;        ConnectionFactory      &#x9;cf         = null;&#xA;&#x9;        MessageProducer        &#x9;mp         = null;&#xA;&#x9;        Destination&#x9;&#x9;&#x9;&#x9;destination = null;&#xA;    &#x9;&#x9;println( &quot;Calling MATBargeYBDepartUnits.send using ActiveMQConnectionFactory&quot;);&#xA;&#x9;        try {&#xA;&#x9;          LOGGER.warn( &quot;Getting Connection Factory&quot;);&#xA;&#x9;          cf = new ActiveMQConnectionFactory(url);&#xA;&#x9;          LOGGER.warn( &quot;Getting Queue&quot;);&#xA;&#x9;          LOGGER.warn( &quot;Getting Connection for Queue &quot; + cf);&#xA;&#x9;          connection = cf.createConnection();&#xA;&#x9;          LOGGER.warn( &quot;staring the connection&quot;);&#xA;&#x9;          connection.start();&#xA;&#x9;          LOGGER.warn( &quot;creating session&quot;);&#xA;&#x9;          session = connection.createSession(false, 1);&#xA;&#x9;          LOGGER.warn( &quot;creating messageProducer&quot;);&#xA;&#x9;    &#x9;  destination = session.createQueue(queueName);&#xA;&#x9;          mp = session.createProducer(destination);&#xA;&#x9;    &#x9;  LOGGER.warn( &quot;creating TextMessage&quot;);&#xA;&#x9;          TextMessage outMessage = session.createTextMessage( msg);&#xA;&#x9;          LOGGER.warn( &quot;sending Message to queue: &quot; + queueName);&#xA;&#x9;          mp.send(outMessage);&#xA;&#x9;          mp.close();&#xA;&#x9;    &#x9;  session.close();&#xA;&#x9;          connection.close();&#xA;&#x9;        }&#xA;&#x9;        catch (Exception je)&#xA;&#x9;        {&#xA;&#x9;          LOGGER.warn(&quot;Exception in send:&quot; + je )&#xA;&#x9;        }&#xA;&#x9;      }&#xA;&#xA;&#x9;     public void topicSend(String msg) throws JMSException, Exception {&#xA;&#x9;     &#x9;LOGGER.warn (&quot; in topicSend message &quot;);&#xA;&#x9;    &#x9;TopicSession&#x9;&#x9;&#x9;session    = null;&#xA;&#x9;    &#x9;TopicConnection&#x9;&#x9;&#x9;connection = null;&#xA;&#x9;    &#x9;TopicConnectionFactory&#x9;cf         = null;&#xA;&#x9;    &#x9;MessageProducer        &#x9;mp         = null;&#xA;&#x9;    &#x9;Destination&#x9;&#x9;&#x9;&#x9;destination = null;&#xA;    &#x9;&#x9;println( &quot;Calling MATBargeYBDepartUnits.topicSend using ActiveMQConnectionFactory&quot;);&#xA;&#x9;    &#x9;try {&#xA;&#xA;&#x9;    &#x9;&#x9;LOGGER.warn (&quot;Getting Connection Factory&quot;);&#xA;&#x9;    &#x9;&#x9;cf = new ActiveMQConnectionFactory(url);&#xA;&#xA;&#x9;    &#x9;&#x9;LOGGER.warn(&quot;Getting Connection for Topic&quot;);&#xA;&#x9;    &#x9;&#x9;connection = cf.createTopicConnection();&#xA;&#xA;&#x9;    &#x9;&#x9;LOGGER.warn( &quot;staring the connection&quot;);&#xA;&#x9;    &#x9;&#x9;connection.start();&#xA;&#xA;&#x9;    &#x9;&#x9;LOGGER.warn( &quot;creating session&quot;);&#xA;&#x9;    &#x9;&#x9;session = connection.createTopicSession(false, 1);&#xA;&#x9;    &#x9;&#x9;destination = session.createTopic(topicName);&#xA;&#xA;&#x9;    &#x9;&#x9;LOGGER.warn( &quot;creating messageProducer&quot;);&#xA;&#x9;    &#x9;&#x9;mp = session.createProducer(destination);&#xA;&#xA;&#x9;    &#x9;&#x9;LOGGER.warn( &quot;creating TextMessage&quot;);&#xA;&#x9;    &#x9;&#x9;TextMessage outMessage = session.createTextMessage( msg);&#xA;&#xA;&#x9;    &#x9;&#x9;LOGGER.warn( &quot;sending Message to topic: &quot; + topicName);&#xA;&#x9;    &#x9;&#x9;mp.send(outMessage);&#xA;&#xA;&#x9;    &#x9;&#x9;mp.close();&#xA;&#x9;    &#x9;&#x9;session.close();&#xA;&#x9;    &#x9;&#x9;connection.close();&#xA;&#x9;        }&#xA;&#x9;        catch (Exception je)&#xA;&#x9;        {&#xA;&#x9;    &#x9;LOGGER.warn(&quot;Exception in topicSend:&quot; + je )&#xA;&#x9;        }&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;  private List&lt;Unit&gt; getUnitListInCv(CarrierVisit inCv){&#xA;&#x9;&#x9;println (&quot;getUnitListInCv Start&quot;)&#xA;&#x9;&#x9;ArrayList vesVistUnitLists = new ArrayList();&#xA;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(ArgoField.UFV_ACTUAL_IB_CV, inCv.getCvGkey()))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.in(UnitField.UNIT_VISIT_STATE, &quot;S70_DEPARTED&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.in(UnitField.UNIT_ID, &quot;MATU2275002&quot;));&#xA;&#x9;&#x9;println(&quot;dq============&quot;+dq)&#xA;&#x9;&#x9;HibernateApi hibernate = HibernateApi.getInstance();&#xA;&#x9;&#x9;List unitList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;println(&quot;unitList list Size :&quot;+unitList.size())&#xA;&#x9;&#x9;println (&quot;getUnitListInCv End&quot;)&#xA;&#x9;&#x9;return unitList;&#xA;&#x9;&#x9;//}&#xA;&#xA;&#x9;  }&#xA;&#xA;&#x9;  private StringBuffer buildXmlElement(List inUnitList, CarrierVisit inCv){&#xA;&#x9;&#x9;StringBuffer elementList = new StringBuffer();&#xA;&#x9;&#x9;//Build the XML Root Elements&#xA;&#x9;&#x9;elementList.append(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot; standalone=\&quot;yes\&quot;?&gt;&quot;);&#xA;&#x9;&#x9;elementList.append(&quot;&lt;ns2:snx xmlns:ns2=\&quot;http://www.navis.com/argo\&quot;&gt;&quot;);&#xA;&#x9;&#x9;// Build the XML Shipper Consignee Elements&#xA;&#x9;&#x9;println(&quot;Here:inUnitList.size()&quot;+inUnitList.size());&#xA;&#x9;&#x9;for (int k=0; k &lt; inUnitList.size(); k++){&#xA;&#x9;&#x9;  //for (int k=0; k &lt; 5; k++){&#xA;&#x9;&#x9;  Unit unit = (Unit) inUnitList.get(k);&#xA;&#x9;&#x9;  this.getShipperConsigneeDetails(unit,elementList);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;// Build the XML Vessel Visit Detail element&#xA;&#x9;&#x9;this.getVesselVisitDetails(inCv,elementList);&#xA;&#x9;&#x9;// Build the XML Unit detail elements&#xA;&#x9;&#x9;try{&#xA;&#x9;&#x9; int lastElement = inUnitList.size() - 1  ;&#xA;&#x9;&#x9;for (int i=0; i &lt; inUnitList.size(); i++){&#xA;&#x9;&#x9;  Unit unit = (Unit) inUnitList.get(i);&#xA;&#x9;&#x9;  if (i.equals(lastElement)){&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;LAST ELEMENT:&quot; + i);&#xA;&#x9;&#x9;&#x9;this.getLastUnitDetails(unit, elementList, inUnitList.size());&#xA;&#x9;&#x9;  }else{&#xA;&#x9;&#x9;   this.getUnitDetails(unit, elementList);&#xA;&#x9;&#x9;  }&#xA;&#x9;&#x9;  try&#xA;&#x9;&#x9;  {&#xA;&#x9;&#x9;  elementList = this.getEquipmentDetails(unit, elementList);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getPositionDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getRoutingDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getCarrierDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getHazard(unit, elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getOog(unit, elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getBookingNbr(unit, elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getReefer(unit, elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getHandlingDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getContentsDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getUnitEtc(unit, elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getFlagDetails(unit,elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getUnitFlexDetails(unit,elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getUfvDetails(unit,elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.geTimeStamp(unit,elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList.append(&quot;&lt;/unit&gt;&quot;);&#xA;&#x9;&#x9;  } catch (Exception e){&#xA;&#x9;&#x9;     println(&quot;Exception for Unit : &quot;+ unit.unitId +&quot; ::&quot;+e)&#xA;&#x9;&#x9;  }&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;elementList.append(&quot;&lt;/ns2:snx&gt;&quot;);&#xA;&#x9;&#x9;return elementList;&#xA;&#x9;  }catch (Exception e){&#xA;&#x9;&#x9;LOGGER.warn (&quot;Exception in prining xml&quot; + e);&#xA;&#x9;  }&#xA;&#x9;  }&#xA;&#xA;&#x9;  public StringBuffer getShipperConsigneeDetails(Unit inUnit, StringBuffer inElementList){&#xA;&#xA;&#x9;&#x9;GoodsBase goods = inUnit.getUnitGoods();&#xA;&#x9;&#x9;String shipperName = &quot;&quot;;&#xA;&#x9;&#x9;String shipperId = &quot;&quot;;&#xA;&#x9;&#x9;String consigneeName = &quot;&quot;;&#xA;&#x9;&#x9;String consigneeId = &quot;&quot;;&#xA;&#xA;&#x9;&#x9;ScopedBizUnit shipper = goods.getGdsShipperBzu();&#xA;&#x9;&#x9;if (shipper != null){&#xA;&#x9;&#x9; try{&#xA;&#x9;&#x9;&#x9;shipperName = shipper.getBzuName();&#xA;&#x9;&#x9;&#x9;shipperName = removeDoubleQuotes(shipperName);&#xA;&#x9;&#x9;&#x9;shipperId = shipper.getBzuId();&#xA;&#x9;&#x9;&#x9;shipperId = removeDoubleQuotes(shipperId);&#xA;&#xA;&#x9;&#x9;  String shipConOpenAttr = &quot;&lt;shipper-consignee&quot;;&#xA;&#x9;&#x9;  String shipperNameAttr = &quot; name=&quot;;&#xA;&#x9;&#x9;  String shipperNameValue = XML_OVERRIDE+shipperName+XML_OVERRIDE;&#xA;&#x9;&#x9;  String shipperIdAttr = &quot; id=&quot;;&#xA;&#x9;&#x9;  String shipperIdValue =  XML_OVERRIDE+shipperId+XML_OVERRIDE;&#xA;&#x9;&#x9;  String shipperString = shipConOpenAttr + shipperNameAttr+ shipperNameValue + shipperIdAttr + shipperIdValue + XML_END_ELEMENT;&#xA;&#x9;&#x9;  shipperString = this.stripInvalidXmlCharacters(shipperString);&#xA;&#x9;&#x9;  inElementList.append(shipperString);&#xA;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;  LOGGER.warn (&quot;Exception in getting Shipper Info&quot; + e);&#xA;&#x9;&#x9;}&#xA;&#x9;  }&#xA;&#xA;&#x9;&#x9;ScopedBizUnit consignee = goods.getGdsConsigneeBzu();&#xA;&#x9;&#x9;if (consignee != null){&#xA;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;consigneeName = consignee.getBzuName();&#xA;&#x9;&#x9;&#x9;consigneeName = removeDoubleQuotes(consigneeName);&#xA;&#x9;&#x9;&#x9;consigneeId = consignee.getBzuId();&#xA;&#x9;&#x9;&#x9;consigneeId = removeDoubleQuotes(consigneeId);&#xA;&#xA;&#x9;&#x9;  String shipConOpenAttr = &quot;&lt;shipper-consignee&quot;;&#xA;&#x9;&#x9;  String shipperNameAttr = &quot; name=&quot;;&#xA;&#x9;&#x9;  String consigneeNameValue = XML_OVERRIDE+consigneeName+XML_OVERRIDE;&#xA;&#x9;&#x9;  String shipperIdAttr = &quot; id=&quot;;&#xA;&#x9;&#x9;  String consigneeIdValue =  XML_OVERRIDE+consigneeId+XML_OVERRIDE;&#xA;&#x9;&#x9;  String consigneeString = shipConOpenAttr + shipperNameAttr+ consigneeNameValue + shipperIdAttr + consigneeIdValue + XML_END_ELEMENT;&#xA;&#x9;&#x9;  consigneeString = this.stripInvalidXmlCharacters(consigneeString);&#xA;&#x9;&#x9;  inElementList.append(consigneeString);&#xA;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;  LOGGER.warn (&quot;Exception in getting Consignee info&quot;+ e);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;&#x9;  public StringBuffer getVesselVisitDetails(CarrierVisit inCv, StringBuffer inElementList){&#xA;&#xA;&#x9;&#x9;def vvd = VesselVisitDetails.resolveVvdFromCv(inCv);&#xA;&#x9;&#x9;Date timeFirstAvailable = vvd.getCvdTimeFirstAvailability();&#xA;&#x9;&#x9;String timeFa = &quot;&quot;;&#xA;&#x9;&#x9;if (timeFirstAvailable != null){&#xA;&#x9;&#x9;  timeFa = this.formatDate(timeFirstAvailable);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;String vvOpenAttr = &quot;&lt;vessel-visit&quot;;&#xA;&#x9;&#x9;String vvFirstTimeAvailabilityAttr = &quot; time-first-availability=&quot;;&#xA;&#x9;&#x9;String vvFirstTimeAvailabilityValue = XML_OVERRIDE+timeFa+XML_OVERRIDE;&#xA;&#x9;&#x9;String vvIdAttr = &quot; id=&quot;;&#xA;&#x9;&#x9;String vvIdValue = XML_OVERRIDE+inCv.getCvId()+XML_OVERRIDE;&#xA;&#x9;&#x9;String vesselVisitString = vvOpenAttr+vvFirstTimeAvailabilityAttr+vvFirstTimeAvailabilityValue+vvIdAttr+vvIdValue+ XML_END_ELEMENT;&#xA;&#x9;&#x9;inElementList.append(vesselVisitString);&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;  public StringBuffer getLastUnitDetails(Unit inUnit, StringBuffer inElementList, int inUnitCount){&#xA;&#xA;    //unit snx-update-note=&quot;NewVes Completed Holds:(RM) unitCnt=1136 facility=HON rdsDtTime=05/01/2012 10:08:48&quot;&#xA;    // line=&quot;ANL&quot; freight-kind=&quot;FCL&quot; category=&quot;IMPORT&quot; id=&quot;UNIU5027989&quot;&gt;&#xA;&#xA;    String unitOpenAttr = &quot;&lt;unit snx-update-note=&quot;;&#xA;    String unitOpenValue = XML_OVERRIDE+&quot;NewVes Detention Completed&quot;+&quot; unitCnt=&quot;+ inUnitCount.toString()+ &quot; facility=&quot;+ threadFacility + &quot; rdsDtTime=&quot;+&#xA;                           this.formatRdsDate(timeNow) + XML_OVERRIDE;&#xA;    String lineAttr = &quot; line=&quot;;&#xA;    String freightKindAttr = &quot; freight-kind=&quot;;&#xA;    String idAttr = &quot; id=&quot;;&#xA;    String categoryAttr = &quot; category=&quot;;&#xA;    String freightKindValue = this.findUnitFreightKind(inUnit);&#xA;    String idValue = this.findUnitNbr(inUnit);&#xA;    String categoryValue = this.findUnitCategory(inUnit);&#xA;    ScopedBizUnit lineOp = inUnit.getUnitLineOperator();&#xA;    String lineValue = XML_OVERRIDE+lineOp.getBzuId()+XML_OVERRIDE;&#xA;    String unitString = unitOpenAttr + unitOpenValue+ lineAttr + lineValue + freightKindAttr + freightKindValue + categoryAttr + categoryValue + idAttr + idValue + &quot;&gt;&quot;;&#xA;    unitString = this.stripInvalidXmlCharacters(unitString);&#xA;    unitString = this.ModifyEscapeChar(unitString);&#xA;&#x9;inElementList.append(unitString);&#xA;    return inElementList;&#xA;  }&#xA;&#xA;public StringBuffer getUnitDetails(Unit inUnit, StringBuffer inElementList){&#xA;&#xA;    List unitImpediments = this.getUnitImpediments(inUnit);&#xA;    String holds = &quot;&quot;;&#xA;    String unitOpenValue;&#xA;&#x9;addNode = &quot;N&quot;;&#xA;    if (!unitImpediments.isEmpty()) {&#xA;     for (int k=0; k &lt; unitImpediments.size(); k++){&#xA;     ServiceImpediment imp = (ServiceImpediment) unitImpediments.get(k);&#xA;      def status = imp.getStatus();&#xA;      if (FlagStatusEnum.ACTIVE.equals(status) || FlagStatusEnum.REQUIRED.equals(status)) {&#xA;        String holdId = imp.getFlagType().getId();&#xA;&#x9;&#x9;String flgtypPurpose = imp.getFlagType().getPurpose().getKey();&#xA;        println (&quot;holdId &quot;+ holdId +&quot; flgtypPurpose &quot;+flgtypPurpose);&#xA;&#x9;&#x9;if (flgtypPurpose != &quot;PERMISSION&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;addNode = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;if (k == 0){&#xA;&#x9;&#x9;&#x9;holds = holds + holdId;&#xA;&#x9;&#x9;&#x9;}else {&#xA;&#x9;&#x9;&#x9;holds = holds + &quot;,&quot;+ holdId;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;      }&#xA;     }&#xA;&#x9;}&#xA;&#x9;if (addNode == &quot;Y&quot;)&#xA;&#x9;{&#xA;      unitOpenValue = XML_OVERRIDE+&quot;NewVes Detention Holds:(&quot;+holds+&quot;)&quot;+XML_OVERRIDE;&#xA;    } else {&#xA;      unitOpenValue = XML_OVERRIDE+&quot;NewVes Detention&quot;+XML_OVERRIDE;&#xA;    }&#xA;     String unitOpenAttr = &quot;&lt;unit snx-update-note=&quot;;&#xA;    String lineAttr = &quot; line=&quot;;&#xA;    String freightKindAttr = &quot; freight-kind=&quot;;&#xA;    String idAttr = &quot; id=&quot;;&#xA;    String categoryAttr = &quot; category=&quot;;&#xA;    String freightKindValue = this.findUnitFreightKind(inUnit);&#xA;    String idValue = this.findUnitNbr(inUnit);&#xA;    String categoryValue = this.findUnitCategory(inUnit);&#xA;    ScopedBizUnit lineOp = inUnit.getUnitLineOperator();&#xA;    String lineValue = XML_OVERRIDE+lineOp.getBzuId()+XML_OVERRIDE;&#xA;    String unitString = unitOpenAttr + unitOpenValue+ lineAttr + lineValue + freightKindAttr + freightKindValue + categoryAttr + categoryValue + idAttr + idValue + &quot;&gt;&quot;;&#xA;    unitString = this.stripInvalidXmlCharacters(unitString);&#xA;&#x9;unitString = this.ModifyEscapeChar(unitString);&#xA;&#x9;inElementList.append(unitString);&#xA;    return inElementList;&#xA;  }&#xA;&#xA;&#x9;public StringBuffer getEquipmentDetails(Unit inUnit, StringBuffer inElementList){&#xA;&#x9;try&#xA;&#x9;{&#xA;&#x9;Equipment eq = inUnit.getPrimaryEq();&#xA;&#xA;&#x9;def unitEquipment = inUnit.getUnitPrimaryUe()&#xA;    def ueEquipmentState = unitEquipment.getUeEquipmentState()&#xA;    def equipFlex01 = ueEquipmentState != null ? ueEquipmentState.getEqsFlexString01() : ''&#xA;&#xA;    String equipmentOpenAttr = &quot;&lt;equipment&quot;;&#xA;    String equipmentRoleAttr = &quot; role=&quot;;&#xA;    String equipmentRoleValue = XML_OVERRIDE+&quot;PRIMARY&quot;+XML_OVERRIDE;&#xA;    String equipmentFlex01Attr = &quot; eq-flex-01=&quot;;&#xA;    String equipmentFlex01Value = XML_OVERRIDE+equipFlex01+XML_OVERRIDE;&#xA;    String equipmentMaterialAttr = &quot; material=&quot;;&#xA;    String equipmentMaterialValue = this.findEquipmentMaterial(eq);&#xA;    String equipmentOperatorAttr = &quot; operator=&quot;&#xA;    String equipmentOperatorValue=XML_OVERRIDE+eq.getEquipmentOperatorId()+XML_OVERRIDE;&#xA;    String equipmentOwnerAttr = &quot; owner=&quot;&#xA;    String equipmentOwnerValue=XML_OVERRIDE+eq.getEquipmentOwnerId()+XML_OVERRIDE;&#xA;    String equipmentStrengthCodeAttr = &quot; strength-code=&quot;;&#xA;    String equipmentStrengthCodeValue = XML_OVERRIDE+eq.getEqStrengthCode()+XML_OVERRIDE;&#xA;    String equipmentHeightMmAttr = &quot; height-mm=&quot;;&#xA;    String equipmentHeightMmValue = XML_OVERRIDE+eq.getEqHeightMm().toString()+XML_OVERRIDE;&#xA;    String equipmentTareWeightKgAttr = &quot; tare-kg=&quot;;&#xA;    String equipmentTareWeightKgValue = XML_OVERRIDE+eq.getEqTareWeightKg().toString()+XML_OVERRIDE;&#xA;    String equipmentTypeAttr = &quot; type=&quot;;&#xA;    String equipmentTypeValue = XML_OVERRIDE+eq.getEqEquipType().eqtypId+XML_OVERRIDE;&#xA;    String equipmentClassAttr = &quot; class=&quot;;&#xA;&#x9;String equipClass = eq.getEqClass().getKey();&#xA;&#x9;equipClass = equipClass = &quot;CONTAINER&quot;?&quot;CTR&quot;:eq.getEqClass().getKey()&#xA;    String equipmentClassValue = XML_OVERRIDE+equipClass+XML_OVERRIDE&#xA;    String equipmentIdAttr = &quot; eqid=&quot;;&#xA;    String equipmentIdValue = this.findUnitNbr(inUnit);&#xA;&#xA;    String equipmentString = equipmentOpenAttr + equipmentRoleAttr+ equipmentRoleValue + equipmentFlex01Attr +&#xA;                             equipmentFlex01Value + equipmentMaterialAttr + equipmentMaterialValue+equipmentOperatorAttr+equipmentOperatorValue+&#xA;                             equipmentOwnerAttr+equipmentOwnerValue+equipmentStrengthCodeAttr+equipmentStrengthCodeValue+&#xA;                             equipmentHeightMmAttr+equipmentHeightMmValue+equipmentTareWeightKgAttr+equipmentTareWeightKgValue+&#xA;                             equipmentTypeAttr+equipmentTypeValue+equipmentClassAttr+equipmentClassValue+equipmentIdAttr+equipmentIdValue+ &quot;&gt;&quot;;&#xA;    equipmentString = this.stripInvalidXmlCharacters(equipmentString)&#xA;&#x9;equipmentString = this.ModifyEscapeChar(equipmentString);&#xA;&#x9;inElementList.append(equipmentString);&#xA;&#xA;&#x9;String grade = ueEquipmentState != null ? ueEquipmentState.getEqsGradeID() : ''&#xA;&#x9;if (grade != null)&#xA;&#x9;{&#xA;&#x9;&#x9;grade = grade.replace(&quot;EquipGrade Id:&quot;,&quot;&quot;)&#xA;&#x9;}&#xA;&#x9;String physicalOpenAttr = &quot;&lt;physical&quot;;&#xA;    String gradeAttr = &quot; grade=&quot;;&#xA;&#x9;if (grade!= null)&#xA;&#x9;{&#xA;&#x9;&#x9;String physicalString = physicalOpenAttr + gradeAttr+ XML_OVERRIDE+grade+XML_OVERRIDE +XML_END_ELEMENT&#xA;&#x9;&#x9;inElementList.append(physicalString);&#xA;&#x9;}&#xA;    //inElementList.append(&quot;&lt;damages&quot;);&#xA;&#xA;&#x9;String damageOpenAttr = &quot;&lt;damages&quot;;&#xA;&#x9;String damageSevAttr = &quot; severity=&quot;&#xA;&#x9;def eqsDamageSev = inUnit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsDamageSeverity&quot;);&#xA;&#x9;String damageSev = null;&#xA;&#x9;if (eqsDamageSev !=null)&#xA;&#x9;{&#xA;&#x9;&#x9;damageSev = eqsDamageSev.getKey();&#xA;&#x9;}&#xA;&#xA;&#x9;String damageString = null;&#xA;&#x9;if (damageSev != &quot;NONE&quot; &amp;&amp; damageSev!= null)&#xA;&#x9;{&#xA;&#x9;&#x9;damageString = damageOpenAttr+damageSevAttr+XML_OVERRIDE+damageSev+XML_OVERRIDE+XML_END_ELEMENT;&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;damageString = damageOpenAttr+XML_END_ELEMENT;&#xA;&#x9;}&#xA;&#xA;&#x9;//println(&quot;damageString &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+damageString)&#xA;&#x9;inElementList.append(damageString);&#xA;&#xA;&#xA;    inElementList.append(&quot;&lt;/equipment&gt;&quot;);&#xA;&#x9;}&#xA;&#x9;catch (e)&#xA;&#x9;{&#xA;&#x9;&#x9;println(&quot;Exception &quot;+e)&#xA;&#x9;}&#xA;&#xA;    return inElementList;&#xA;  }&#xA;&#xA;  public StringBuffer getPositionDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;    String  positionLocationValue = &quot;&quot;;&#xA;    String positionLocTypeValue = &quot;&quot;;&#xA;    if (inCv != null){&#xA;      positionLocationValue = XML_OVERRIDE + inCv.getCvId()+XML_OVERRIDE;&#xA;      positionLocTypeValue = XML_OVERRIDE+ &quot;VESSEL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    String positionOpenAttr = &quot;&lt;position&quot;&#xA;    String positionSlotAttr = &quot; slot=&quot;;&#xA;    String positionSlotValue = XML_OVERRIDE+inUnit.getUnitArrivePositionSlot()+XML_OVERRIDE;&#xA;    String positionLocationAttr = &quot; location=&quot;;&#xA;    String positionLocTypeAttr = &quot; loc-type=&quot;;&#xA;&#xA;&#xA;    String positionString = positionOpenAttr+positionSlotAttr+positionSlotValue+positionLocationAttr+positionLocationValue+&#xA;                            positionLocTypeAttr+positionLocTypeValue+XML_END_ELEMENT;&#xA;&#x9;positionString = this.stripInvalidXmlCharacters(positionString)&#xA;&#x9;positionString = this.ModifyEscapeChar(positionString);&#xA;&#x9;inElementList.append(positionString);&#xA;&#xA;    return inElementList;&#xA;  }&#xA;&#xA;&#x9;public StringBuffer getRoutingDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;String group = null;&#xA;&#x9;&#x9;String disc=&quot;&quot;;&#xA;&#x9;&#x9;String pod2=null;&#xA;&#x9;&#x9;String opl=&quot;&quot;;&#xA;&#x9;&#x9;String pol=&quot;&quot;;&#xA;&#x9;&#x9;String destination=&quot;&quot;;&#xA;&#x9;&#x9;String designatedTrucker=null;&#xA;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;designatedTrucker=inUnit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (te)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Exception in getting trucker details &quot; + te);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//try{&#xA;&#xA;&#x9;&#x9;Routing routing = inUnit.getUnitRouting();&#xA;&#xA;&#x9;&#x9;if (routing != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;String rtgGroup = routing.getRtgGroup();&#xA;&#x9;&#x9;&#x9;&#x9;group = rtgGroup.replace(&quot;Group Id:&quot;,&quot;&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;catch (e)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;RoutingPoint point = inUnit.getUnitRouting().getRtgPOD1();&#xA;&#x9;&#x9;RoutingPoint point2 = inUnit.getUnitRouting().getRtgPOD2();&#xA;&#x9;&#x9;RoutingPoint pointOpl = inUnit.getUnitRouting().getRtgOPL();&#xA;&#x9;&#x9;RoutingPoint pointPol = inUnit.getUnitRouting().getRtgPOL();&#xA;&#x9;&#x9;if (point != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;disc = point.getPointId();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (point2 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;pod2 = point2.getPointId();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (pointOpl != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;opl = pointOpl.getPointId();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (pointPol != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;pol = pointPol.getPointId();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;destination = inUnit.getUnitGoods().getGdsDestination();&#xA;&#x9;&#x9;//} catch (Exception e){&#xA;&#x9;&#x9;  //LOGGER.warn(&quot;Exception in getting routing details &quot; + e);&#xA;&#x9;&#x9;//}&#xA;&#x9;&#x9;String rtgOpenAttr = &quot;&lt;routing&quot;&#xA;&#x9;&#x9;String groupAttr = &quot; group=&quot;&#xA;&#x9;&#x9;String groupValue = XML_OVERRIDE+group+XML_OVERRIDE;&#xA;&#x9;&#x9;String designatedTruckerAttr = &quot; designated-trucker=&quot;&#xA;&#x9;&#x9;String designatedTruckerValue = XML_OVERRIDE+designatedTrucker+XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgDestAttr = &quot; destination=&quot;;&#xA;&#x9;&#x9;String rtgDestValue = XML_OVERRIDE+destination+XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgOplAttr = &quot; opl=&quot;;&#xA;&#x9;&#x9;String rtgOplValue = XML_OVERRIDE+ opl +XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgPod1Attr = &quot; pod-1=&quot;;&#xA;&#x9;&#x9;String rtgPod2Attr = &quot; pod-2=&quot;;&#xA;&#x9;&#x9;String rtgPod1Value = XML_OVERRIDE+ disc +XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgPod2Value = XML_OVERRIDE+ pod2 +XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgPolAttr = &quot; pol=&quot;;&#xA;&#x9;&#x9;String rtgPolValue = XML_OVERRIDE+ pol +XML_OVERRIDE;&#xA;&#x9;&#x9;String routingString = null;&#xA;&#xA;&#xA;&#x9;&#x9;if (designatedTrucker!= null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;routingString = designatedTruckerAttr+designatedTruckerValue+rtgDestAttr+rtgDestValue+rtgOplAttr+rtgOplValue+rtgPod1Attr+rtgPod1Value+&#xA;&#x9;&#x9;&#x9;&#x9;rtgPolAttr+rtgPolValue;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;routingString = rtgDestAttr+rtgDestValue+rtgOplAttr+rtgOplValue+rtgPod1Attr+rtgPod1Value+&#xA;&#x9;&#x9;&#x9;&#x9;rtgPolAttr+rtgPolValue;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (pod2 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;//println(&quot;pod2&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot;+pod2);&#xA;&#x9;&#x9;routingString = routingString+rtgPod2Attr+rtgPod2Value&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (group != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;routingString = rtgOpenAttr + groupAttr + groupValue + routingString&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;  {&#xA;&#x9;&#x9;&#x9;routingString = rtgOpenAttr + routingString&#xA;&#x9;  }&#xA;&#x9;&#x9;routingString = routingString + &quot;&gt;&quot;&#xA;&#x9;&#x9;routingString = this.stripInvalidXmlCharacters(routingString);&#xA;&#x9;&#x9;routingString = this.ModifyEscapeChar(routingString);&#xA;&#x9;&#x9;inElementList.append(routingString);&#xA;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;&#x9;  public StringBuffer getCarrierDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#x9;&#x9;def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;&#x9;&#x9;def ufv = inUnit.getUfvForFacilityCompletedOnly(fcy);&#xA;&#x9;&#x9;//UnitFacilityVisit ufv = inUnit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;println(&quot;getCarrierDetails &quot;+ufv+inUnit.unitId);&#xA;&#x9;&#x9;if (ufv != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;CarrierVisit declaredIbCv = inUnit.getUnitDeclaredIbCv();&#xA;&#x9;&#x9;String declaredIbCvMode = this.findCarrierVisitMode(declaredIbCv);&#xA;&#x9;&#x9;CarrierVisit actualIbCv = ufv.getInboundCarrierVisit();&#xA;&#x9;&#x9;String actualIbCvMode = this.findCarrierVisitMode(actualIbCv);&#xA;&#x9;&#x9;CarrierVisit declaredObCv = inUnit.getUnitRouting().getRtgDeclaredCv();&#xA;&#x9;&#x9;String declaredObCvMode = this.findCarrierVisitMode(declaredObCv);&#xA;&#x9;&#x9;CarrierVisit actualObCv = ufv.getUfvObCv();&#xA;&#x9;&#x9;String actualObCvMode = this.findCarrierVisitMode(actualObCv);&#xA;&#xA;&#x9;&#x9;String cvOpenAttr = &quot;&quot;;&#xA;&#x9;&#x9;String cvIdAttr = &quot;&quot;;&#xA;&#x9;&#x9;String cvIdValue = &quot;&quot;;&#xA;&#x9;&#x9;String cvFacilityAttr = &quot;&quot;;&#xA;&#x9;&#x9;String cvFacilityValue = &quot;&quot;;&#xA;&#x9;&#x9;String cvModeAttr = &quot;&quot;;&#xA;&#x9;&#x9;String cvModeValue = &quot;&quot;;&#xA;&#x9;&#x9;String cvQualifierAttr = &quot;&quot;;&#xA;&#x9;&#x9;String cvQualiferValue = &quot;&quot;;&#xA;&#x9;&#x9;String cvDirectionAttr = &quot;&quot;;&#xA;&#x9;&#x9;String cvDirectionValue = &quot;&quot;;&#xA;&#x9;&#x9;// Declared IB CV Details Block&#xA;&#x9;&#x9;cvOpenAttr = &quot;&lt;carrier &quot;&#xA;&#x9;&#x9;cvIdAttr = &quot; id=&quot;;&#xA;&#x9;&#x9;String dclrdCarrierIbCv = declaredIbCv;&#xA;&#xA;&#x9;&#x9;if (dclrdCarrierIbCv.length() &gt; 6)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;dclrdCarrierIbCv = dclrdCarrierIbCv.substring(0,6)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;println (&quot;dclrdCarrierIbCv &quot;+ dclrdCarrierIbCv)&#xA;&#xA;&#xA;&#x9;&#x9;cvIdValue = XML_OVERRIDE+dclrdCarrierIbCv+XML_OVERRIDE;&#xA;&#x9;&#x9;cvFacilityAttr = &quot; facility=&quot;;&#xA;&#x9;&#x9;cvFacilityValue = XML_OVERRIDE+ threadFacility +XML_OVERRIDE;&#xA;&#x9;&#x9;cvModeAttr = &quot; mode=&quot;;&#xA;&#x9;&#x9;cvModeValue = XML_OVERRIDE+ declaredIbCvMode +XML_OVERRIDE;&#xA;&#x9;&#x9;cvQualifierAttr = &quot; qualifier=&quot;;&#xA;&#x9;&#x9;cvQualiferValue = XML_OVERRIDE+ &quot;DECLARED&quot; +XML_OVERRIDE;&#xA;&#x9;&#x9;cvDirectionAttr = &quot; direction=&quot;;&#xA;&#x9;&#x9;cvDirectionValue = XML_OVERRIDE+ &quot;IB&quot; +XML_OVERRIDE;&#xA;&#xA;&#x9;&#x9;String cvDeclaredIbString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;&#x9;&#x9;&#x9;&#x9;cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;&#x9;&#x9;cvDeclaredIbString = this.stripInvalidXmlCharacters(cvDeclaredIbString);&#xA;&#x9;&#x9;inElementList.append(cvDeclaredIbString);&#xA;&#xA;&#x9;&#x9;String actlCarrierIbCv = actualIbCv;&#xA;&#xA;&#x9;&#x9;if (actlCarrierIbCv.length() &gt; 6)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;actlCarrierIbCv = actlCarrierIbCv.substring(0,6)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;println (&quot;actlCarrierIbCv &quot;+ actlCarrierIbCv)&#xA;&#xA;&#xA;&#x9;&#x9;// Actual IB CV Details Block&#xA;&#x9;&#x9;cvOpenAttr = &quot;&lt;carrier &quot;&#xA;&#x9;&#x9;cvIdAttr = &quot; id=&quot;;&#xA;&#x9;&#x9;cvIdValue = XML_OVERRIDE+actlCarrierIbCv+XML_OVERRIDE;&#xA;&#x9;&#x9;cvFacilityAttr = &quot; facility=&quot;;&#xA;&#x9;&#x9;cvFacilityValue = XML_OVERRIDE+ threadFacility +XML_OVERRIDE;&#xA;&#x9;&#x9;cvModeAttr = &quot; mode=&quot;;&#xA;&#x9;&#x9;cvModeValue = XML_OVERRIDE+ actualIbCvMode +XML_OVERRIDE;&#xA;&#x9;&#x9;cvQualifierAttr = &quot; qualifier=&quot;;&#xA;&#x9;&#x9;cvQualiferValue = XML_OVERRIDE+ &quot;ACTUAL&quot; +XML_OVERRIDE;&#xA;&#x9;&#x9;cvDirectionAttr = &quot; direction=&quot;;&#xA;&#x9;&#x9;cvDirectionValue = XML_OVERRIDE+ &quot;IB&quot; +XML_OVERRIDE;&#xA;&#xA;&#x9;&#x9;String cvActualIbString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;&#x9;&#x9;&#x9;&#x9;cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;&#x9;&#x9;cvActualIbString = this.stripInvalidXmlCharacters(cvActualIbString);&#xA;&#x9;&#x9;inElementList.append(cvActualIbString);&#xA;&#xA;&#x9;&#x9;// Declared Ob CV Details Block&#xA;&#x9;&#x9;cvOpenAttr = &quot;&lt;carrier &quot;&#xA;&#x9;&#x9;cvIdAttr = &quot; id=&quot;;&#xA;&#x9;&#x9;cvIdValue = XML_OVERRIDE+declaredObCv+XML_OVERRIDE;&#xA;&#x9;&#x9;cvFacilityAttr = &quot; facility=&quot;;&#xA;&#x9;&#x9;cvFacilityValue = XML_OVERRIDE+ threadFacility +XML_OVERRIDE;&#xA;&#x9;&#x9;cvModeAttr = &quot; mode=&quot;;&#xA;&#x9;&#x9;cvModeValue = XML_OVERRIDE+ declaredObCvMode +XML_OVERRIDE;&#xA;&#x9;&#x9;cvQualifierAttr = &quot; qualifier=&quot;;&#xA;&#x9;&#x9;cvQualiferValue = XML_OVERRIDE+ &quot;DECLARED&quot; +XML_OVERRIDE;&#xA;&#x9;&#x9;cvDirectionAttr = &quot; direction=&quot;;&#xA;&#x9;&#x9;cvDirectionValue = XML_OVERRIDE+ &quot;OB&quot; +XML_OVERRIDE;&#xA;&#xA;&#x9;&#x9;String cvDeclaredObString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;&#x9;&#x9;&#x9;&#x9;cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;&#x9;&#x9;cvDeclaredObString = this.stripInvalidXmlCharacters(cvDeclaredObString);&#xA;&#x9;&#x9;inElementList.append(cvDeclaredObString);&#xA;&#xA;&#x9;&#x9;// Actual Ob CV Details Block&#xA;&#x9;&#x9;cvOpenAttr = &quot;&lt;carrier &quot;&#xA;&#x9;&#x9;cvIdAttr = &quot; id=&quot;;&#xA;&#x9;&#x9;cvIdValue = XML_OVERRIDE+actualObCv+XML_OVERRIDE;&#xA;&#x9;&#x9;cvFacilityAttr = &quot; facility=&quot;;&#xA;&#x9;&#x9;cvFacilityValue = XML_OVERRIDE+ threadFacility +XML_OVERRIDE;&#xA;&#x9;&#x9;cvModeAttr = &quot; mode=&quot;;&#xA;&#x9;&#x9;cvModeValue = XML_OVERRIDE+ actualObCvMode +XML_OVERRIDE;&#xA;&#x9;&#x9;cvQualifierAttr = &quot; qualifier=&quot;;&#xA;&#x9;&#x9;cvQualiferValue = XML_OVERRIDE+ &quot;ACTUAL&quot; +XML_OVERRIDE;&#xA;&#x9;&#x9;cvDirectionAttr = &quot; direction=&quot;;&#xA;&#x9;&#x9;cvDirectionValue = XML_OVERRIDE+ &quot;OB&quot; +XML_OVERRIDE;&#xA;&#xA;&#x9;&#x9;String cvActualObString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;&#x9;&#x9;&#x9;&#x9;cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;&#x9;&#x9;cvActualObString = this.stripInvalidXmlCharacters(cvActualObString);&#xA;&#x9;&#x9;if (cvActualObString != null){&#xA;&#x9;&#x9;&#x9;inElementList.append(cvActualObString);&#xA;&#x9;&#x9;&#x9;inElementList.append(&quot;&lt;/routing&gt;&quot;);&#xA;&#x9;&#x9;}&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#x9;  }&#xA;&#xA;&#x9;public StringBuffer getHazard(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;&#x9;&#x9;def ufv = inUnit.getUfvForFacilityCompletedOnly(fcy);&#xA;&#xA;&#x9;&#x9;if (ufv != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;if (ufv.ufvUnit.getUnitGoods() != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;def haz = ufv.ufvUnit.getUnitGoods().getGdsHazards();&#xA;&#x9;&#x9;//println(&quot;hazard&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+haz)&#xA;&#xA;&#x9;&#x9;if (haz != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;String hazardsAttrOpn = &quot;&lt;hazards&gt;&quot;;&#xA;&#x9;&#x9;&#x9;String addtag = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;def hazardAttrOpn = &quot;&lt;hazard&quot;&#xA;&#x9;&#x9;&#x9;def hazardString = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;Iterator hazardIter = ufv.ufvUnit.getUnitGoods().getGdsHazards().getHazardItemsIterator();&#xA;&#x9;&#x9;&#x9;while(hazardIter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;def hazard = hazardIter.next();&#xA;&#x9;&#x9;&#x9;&#x9;def imdgClass = hazard.getHzrdiImdgCode() != null ? hazard.getHzrdiImdgCode().getKey() : null&#xA;&#x9;&#x9;&#x9;&#x9;def nbrType = hazard.getHzrdiNbrType() != null ? hazard.getHzrdiNbrType().getKey() : null&#xA;&#x9;&#x9;&#x9;&#x9;def qty = hazard.hzrdiQuantity;&#xA;&#x9;&#x9;&#x9;&#x9;def packageType = hazard.hzrdiPackageType;&#xA;&#x9;&#x9;&#x9;&#x9;def weight = hazard.hzrdiWeight;&#xA;&#x9;&#x9;&#x9;&#x9;String properName = hazard.hzrdiProperName;&#xA;&#x9;&#x9;&#x9;&#x9;String techName   = hazard.hzrdiTechName;&#xA;&#x9;&#x9;&#x9;&#x9;String imdgclass  = hazard.hzrdiImdgClass.name;&#xA;&#x9;&#x9;&#x9;&#x9;def im01 = hazard.hzrdiSecondaryIMO1;&#xA;&#x9;&#x9;&#x9;&#x9;def im02 = hazard.hzrdiSecondaryIMO2;&#xA;&#x9;&#x9;&#x9;&#x9;String un  = hazard.hzrdiUNnum;&#xA;&#x9;&#x9;&#x9;&#x9;def pkg = hazard.hzrdiPackingGroup;&#xA;&#x9;&#x9;&#x9;&#x9;if (pkg != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;pkg = pkg.getKey();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;def flashPoint = hazard.hzrdiFlashPoint;&#xA;&#x9;&#x9;&#x9;&#x9;def limited = hazard.hzrdiLtdQty ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;def marine = hazard.hzrdiMarinePollutants ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;def phone = hazard.hzrdiEmergencyTelephone;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiNotes = hazard.hzrdiNotes;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiInhalationZone = hazard.hzrdiInhalationZone;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiPageNumber = hazard.hzrdiPageNumber;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiEMSNumber = hazard.hzrdiEMSNumber;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiMFAG = hazard.hzrdiMFAG;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiHazIdUpper = hazard.hzrdiHazIdUpper;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiSubstanceLower = hazard.hzrdiSubstanceLower;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiPlannerRef = hazard.hzrdiPlannerRef;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiMoveMethod = hazard.hzrdiMoveMethod;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiExplosiveClass = hazard.hzrdiExplosiveClass;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiDcLgRef = hazard.hzrdiDcLgRef;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiDeckRestrictions = hazard.hzrdiDeckRestrictions;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + hazardAttrOpn;&#xA;&#x9;&#x9;&#x9;&#x9;if (nbrType != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; haz-nbr-type=&quot; + XML_OVERRIDE + nbrType + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiNotes != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hzrdiNotes = this.stripInvalidXmlCharacters(hzrdiNotes);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hzrdiNotes = this.removeDoubleQuotes(hzrdiNotes);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; notes=&quot; +XML_OVERRIDE + hzrdiNotes + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (phone != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; emergency-telephone=&quot; +XML_OVERRIDE + phone + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (marine == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; marine-pollutants=&quot; +XML_OVERRIDE + marine + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (im01 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; secondary-imo-1=&quot; +XML_OVERRIDE + im01 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (im02 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; secondary-imo-2=&quot; +XML_OVERRIDE + im02 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (qty != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; quantity=&quot; +XML_OVERRIDE + qty + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (weight != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; weight-kg=&quot; +XML_OVERRIDE + weight + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (pkg != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; packing-group=&quot; +XML_OVERRIDE + pkg + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (properName != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;properName = this.stripInvalidXmlCharacters(properName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;properName = this.removeDoubleQuotes(properName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; proper-name=&quot; +XML_OVERRIDE + properName + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (techName != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;techName = this.stripInvalidXmlCharacters(techName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;techName = this.removeDoubleQuotes(techName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; tech-name=&quot; +XML_OVERRIDE + techName + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (flashPoint != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; flash-point=&quot; +XML_OVERRIDE + flashPoint + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (packageType != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; package-type=&quot; +XML_OVERRIDE + packageType + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (limited == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; ltd-qty-flag=&quot; +XML_OVERRIDE + limited + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (un != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; un=&quot; +XML_OVERRIDE + un + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (imdgClass != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; imdg=&quot; +XML_OVERRIDE + imdgClass + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiInhalationZone != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; inhalation-zone=&quot; +XML_OVERRIDE + hzrdiInhalationZone + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiExplosiveClass != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; explosive-class=&quot; +XML_OVERRIDE + hzrdiExplosiveClass + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiEMSNumber != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; ems-nbr=&quot; +XML_OVERRIDE + hzrdiEMSNumber + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiMFAG != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; mfag=&quot; +XML_OVERRIDE + hzrdiMFAG + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiHazIdUpper != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; haz-id-upper=&quot; +XML_OVERRIDE + hzrdiHazIdUpper + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiSubstanceLower != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; substance-lower=&quot; +XML_OVERRIDE + hzrdiSubstanceLower + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiPlannerRef != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; planner-ref=&quot; +XML_OVERRIDE + hzrdiPlannerRef + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiMoveMethod != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; move-method=&quot; +XML_OVERRIDE + hzrdiMoveMethod + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiDeckRestrictions != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; deck-restrictions=&quot; +XML_OVERRIDE + hzrdiDeckRestrictions + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiDcLgRef != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; dc-lg-ref=&quot; +XML_OVERRIDE + hzrdiDcLgRef + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiPageNumber != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; page-number=&quot; +XML_OVERRIDE + hzrdiPageNumber + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (addtag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (addtag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;hazardsAttrOpn = hazardsAttrOpn + hazardString + &quot;&lt;/hazards&gt;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;hazardsAttrOpn = this.stripInvalidXmlCharacters(hazardsAttrOpn);&#xA;&#x9;&#x9;&#x9;&#x9;hazardsAttrOpn = this.ModifyEscapeChar(hazardsAttrOpn);&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(hazardsAttrOpn);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;}&#xA;&#x9;return inElementList;&#xA;}&#xA;&#xA;&#x9;public StringBuffer getOog(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;{&#xA;&#x9;&#x9;if (inUnit.getFieldValue(&quot;unitIsOog&quot;))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;String backCm = inUnit.getFieldValue(&quot;unitOogBackCm&quot;);&#xA;&#x9;&#x9;&#x9;String frontCm = inUnit.getFieldValue(&quot;unitOogFrontCm&quot;) ;&#xA;&#x9;&#x9;&#x9;String leftCm = inUnit.getFieldValue(&quot;unitOogLeftCm&quot;);&#xA;&#x9;&#x9;&#x9;String rightCm = inUnit.getFieldValue(&quot;unitOogRightCm&quot;);&#xA;&#x9;&#x9;&#x9;String topCm = inUnit.getFieldValue(&quot;unitOogTopCm&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;backCm = backCm !=null ? backCm:0;&#xA;&#x9;&#x9;&#x9;frontCm = frontCm !=null ? frontCm:0;&#xA;&#x9;&#x9;&#x9;leftCm = leftCm !=null ? leftCm:0;&#xA;&#x9;&#x9;&#x9;rightCm = rightCm !=null ? rightCm:0;&#xA;&#x9;&#x9;&#x9;topCm = topCm !=null ? topCm:0;&#xA;&#xA;&#x9;&#x9;&#x9;String oogAttrOpn = &quot;&lt;oog&quot;;&#xA;&#x9;&#x9;&#x9;String oogString = oogAttrOpn&#xA;&#x9;&#x9;&#x9;if (rightCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; right-cm=&quot; + XML_OVERRIDE + rightCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (leftCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; left-cm=&quot; + XML_OVERRIDE + leftCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (backCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; back-cm=&quot; + XML_OVERRIDE + backCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (frontCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; front-cm=&quot; + XML_OVERRIDE + frontCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (topCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; top-cm=&quot; + XML_OVERRIDE + topCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;oogString = oogString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;inElementList.append(oogString);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;&#x9;public StringBuffer getBookingNbr(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;String bookingId = null;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;bookingId = inUnit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (be)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Exception in getting routing details &quot; + be);&#xA;&#x9;&#x9;&#x9;println(&quot;Exception in getting routing details &quot; + be);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;String unitBkngOpenAttr = &quot;&lt;booking &quot;&#xA;&#x9;&#x9;String unitBkngAttr = &quot;id=&quot;;&#xA;&#x9;&#x9;if (bookingId != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;bookingId = XML_OVERRIDE+bookingId+XML_OVERRIDE&#xA;&#x9;&#x9;&#x9;String unitBkngString = unitBkngOpenAttr+unitBkngAttr+bookingId+XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;unitBkngString = this.stripInvalidXmlCharacters(unitBkngString);&#xA;&#x9;&#x9;&#x9;unitBkngString = this.ModifyEscapeChar(unitBkngString);&#xA;&#x9;&#x9;&#x9;inElementList.append(unitBkngString);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;&#x9;public StringBuffer getReefer(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;&#x9;def tempReq = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempRequiredC&quot;);&#xA;&#x9;&#x9;&#x9;def tempMax = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempLimitMaxC&quot;);&#xA;&#x9;&#x9;&#x9;def tempMin = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempLimitMinC&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM1 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor1&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM2 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor2&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM3 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor3&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM4 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor4&quot;);&#xA;&#x9;&#x9;&#x9;def tempPwrOnTime = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqLatestOnPowerTime&quot;);&#xA;&#x9;&#x9;&#x9;def tempCo2Pct = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqCO2Pct&quot;);&#xA;&#x9;&#x9;&#x9;def tempHmdtyPct = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqHumidityPct&quot;);&#xA;&#x9;&#x9;&#x9;def tempO2Pct = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqO2Pct&quot;);&#xA;&#x9;&#x9;&#x9;def tempVentReq = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqVentRequired&quot;);&#xA;&#x9;&#x9;&#x9;def tempVentUnit = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqVentUnit&quot;);&#xA;&#x9;&#x9;&#x9;def tempShowFahrenhiet = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempShowFahrenheit&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;tempShowFahrenhiet = tempShowFahrenhiet ? &quot;F&quot; : &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;String reeferAttrOpn = &quot;&lt;reefer&quot;;&#xA;&#x9;&#x9;&#x9;String reeferString = reeferAttrOpn;&#xA;&#x9;&#x9;&#x9;String addtag = &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;if (tempShowFahrenhiet == &quot;F&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-display-unit=&quot; + XML_OVERRIDE + tempShowFahrenhiet + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempReq !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-reqd-c=&quot; + XML_OVERRIDE + tempReq + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempO2Pct !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; o2-pct=&quot; + XML_OVERRIDE + tempO2Pct + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempCo2Pct !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; co2-pct=&quot; + XML_OVERRIDE + tempCo2Pct + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempHmdtyPct !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; humidity-pct=&quot; + XML_OVERRIDE + tempHmdtyPct + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempVentReq !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; vent-required-value=&quot; + XML_OVERRIDE + tempVentReq + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempVentUnit !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; vent-required-unit=&quot; + XML_OVERRIDE + tempVentUnit + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempMin !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-min-c=&quot; + XML_OVERRIDE + tempMin + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempMax !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-max-c=&quot; + XML_OVERRIDE + tempMax + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempPwrOnTime !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-latest-on-power=&quot; + XML_OVERRIDE + tempPwrOnTime + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM1 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-1=&quot; + XML_OVERRIDE + tempTM1 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM2 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-2=&quot; + XML_OVERRIDE + tempTM2 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM3 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-3=&quot; + XML_OVERRIDE + tempTM3 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM4 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-4=&quot; + XML_OVERRIDE + tempTM4 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;//println(&quot;reeferString &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot; + addtag +&quot;  :   &quot;+reeferString)&#xA;&#xA;&#x9;&#x9;&#x9;if (addtag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;//println(&quot;Here reeferString &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot; + addtag +&quot;  :   &quot;+reeferString)&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = this.stripInvalidXmlCharacters(reeferString);&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = this.ModifyEscapeChar(reeferString);&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(reeferString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return inElementList;&#xA;&#x9;&#x9;}&#xA;&#xA;  public StringBuffer getHandlingDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;&#x9;def ufv = inUnit.getUfvForFacilityCompletedOnly(fcy);&#xA;&#xA;&#x9;String lastfreeDay = null;&#xA;    String handlingOpenAttr = &quot;&lt;handling&quot;&#xA;&#x9;String handlingString = handlingOpenAttr;&#xA;&#x9;String lastfreeDayAttr = &quot; last-free-day=&quot;;&#xA;    String handlingRemarkAttr = &quot; remark=&quot;;&#xA;    String handlingRemark = inUnit.getUnitRemark();&#xA;&#x9;if (ufv !=null)&#xA;&#x9;{&#xA;&#x9;&#x9;lastfreeDay = ufv.getFieldValue(&quot;ufvCalculatedLastFreeDay&quot;);&#xA;&#x9;&#x9;if (lastfreeDay != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;lastfreeDay = lastfreeDay.replace(&quot;!&quot;,&quot;&quot;)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;addNode = &quot;N&quot;;&#xA;&#x9;if (lastfreeDay != null)&#xA;&#x9;{&#xA;&#x9;&#x9;addNode = &quot;Y&quot;;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Date date = new SimpleDateFormat(&quot;yyyy-MMM-dd&quot;, Locale.ENGLISH).parse(lastfreeDay);&#xA;&#x9;&#x9;&#x9;DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#x9;&#x9;&#x9;lastfreeDay = df.format(date);&#xA;&#x9;&#x9;}&#xA;&#x9;catch (Exception de){&#xA;      LOGGER.warn (&quot;Exception in while converting date &quot;+ lastfreeDay+&quot;:&quot;+de);&#xA;&#x9;  lastfreeDay = null;&#xA;&#x9;  addNode = &quot;N&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;if (addNode == &quot;Y&quot;)&#xA;&#x9;{&#xA;&#x9;&#x9;lastfreeDay=XML_OVERRIDE+lastfreeDay+XML_OVERRIDE;&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;addNode = &quot;N&quot;;&#xA;&#x9;}&#xA;&#xA;    if (handlingRemark != null)&#xA;&#x9;{&#xA;&#x9;&#x9;handlingRemark = removeDoubleQuotes(handlingRemark);&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;handlingRemark = &quot; &quot;&#xA;&#x9;}&#xA;&#x9;if (addNode == &quot;Y&quot; )&#xA;&#x9;{&#xA;&#x9;&#x9;handlingString = handlingString + lastfreeDayAttr + lastfreeDay;&#xA;&#x9;}&#xA;&#xA;&#x9;String handlingRemarkValue = XML_OVERRIDE+handlingRemark+XML_OVERRIDE;&#xA;    handlingString = handlingString+handlingRemarkAttr+handlingRemarkValue+ XML_END_ELEMENT;&#xA;&#x9;handlingString = this.stripInvalidXmlCharacters(handlingString);&#xA;&#x9;handlingString = this.ModifyEscapeChar(handlingString);&#xA;&#x9;inElementList.append(handlingString);&#xA;&#xA;    return inElementList;&#xA;  }&#xA;&#xA;&#x9;public StringBuffer getContentsDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;GoodsBase goods = inUnit.getUnitGoods();&#xA;&#x9;&#x9;String blNbr =  goods.getGdsBlNbr();&#xA;&#x9;&#x9;ScopedBizUnit shipper = goods.getGdsShipperBzu();&#xA;&#x9;&#x9;String shipperName = &quot;&quot;;&#xA;&#x9;&#x9;String shipperId = &quot;&quot;;&#xA;&#x9;&#x9;String consigneeName = &quot;&quot;;&#xA;&#x9;&#x9;String consigneeId = &quot;&quot; ;&#xA;&#x9;&#x9;String contentsShipperNameAttr = &quot; shipper-name=&quot;;&#xA;&#x9;&#x9;String contentsShipperIdAttr = &quot; shipper-id=&quot;;&#xA;&#x9;&#x9;String contentsConsigneeNameAttr = &quot; consignee-name=&quot;;&#xA;&#x9;&#x9;String contentsConsigneeIdAttr = &quot; consignee-id=&quot;;&#xA;&#x9;&#x9;String contentsConsigneeNameValue = &quot;&quot;;&#xA;&#x9;&#x9;String contentsConsigneeIdValue = &quot;&quot;;&#xA;&#x9;&#x9;String contentsShipperNameValue = &quot;&quot;;&#xA;&#x9;&#x9;String contentsShipperIdValue = &quot;&quot;;&#xA;&#xA;&#x9;&#x9;ScopedBizUnit consignee = goods.getGdsConsigneeBzu();&#xA;&#x9;&#x9;if (consignee != null){&#xA;&#x9;&#x9;  try{&#xA;&#x9;&#x9;&#x9;consigneeName = consignee.getBzuName();&#xA;&#x9;&#x9;&#x9;consigneeName = removeDoubleQuotes(consigneeName);&#xA;&#x9;&#x9;&#x9;consigneeId = consignee.getBzuId();&#xA;&#x9;&#x9;&#x9;consigneeId = removeDoubleQuotes(consigneeId);&#xA;&#xA;&#x9;&#x9;&#x9;contentsConsigneeNameValue = XML_OVERRIDE+consigneeName+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;contentsConsigneeIdValue =  XML_OVERRIDE+consigneeId+XML_OVERRIDE;&#xA;&#x9;&#x9;  } catch (Exception e){&#xA;&#x9;&#x9;&#x9;LOGGER.warn (&quot;Exception in getting Consignee info&quot;+ e);&#xA;&#x9;&#x9;  }&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (blNbr == null || blNbr.startsWith(&quot;DO NOT EDIT&quot;)){&#xA;&#x9;&#x9;  blNbr = &quot;&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;String gdsWeight = inUnit.getUnitGoodsAndCtrWtKg().toString();&#xA;&#x9;&#x9;String contentsOpenAttr = &quot;&lt;contents&quot;;&#xA;&#x9;&#x9;String contentsCommodityNameAttr = &quot; commodity-name=&quot;;&#xA;&#x9;&#x9;String commodity = inUnit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;&#x9;String commodityName = inUnit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyShortName&quot;)&#xA;&#x9;&#x9;String contentsCommodityNameValue = XML_OVERRIDE+commodityName+XML_OVERRIDE;&#xA;&#x9;&#x9;String contentsCommodityIdAttr = &quot; commodity-id=&quot;;&#xA;&#x9;&#x9;String contentsCommodityIdValue = XML_OVERRIDE+commodity+XML_OVERRIDE;&#xA;&#x9;&#x9;String contentsBlNbrAttr = &quot; bl-nbr=&quot;;&#xA;&#x9;&#x9;String contentsBlNbrValue = XML_OVERRIDE+blNbr+XML_OVERRIDE;&#xA;&#x9;&#x9;String contentsWeightKgAttr = &quot; weight-kg=&quot;;&#xA;&#x9;&#x9;String contentsWeightKgValue = XML_OVERRIDE+gdsWeight+XML_OVERRIDE;&#xA;&#xA;&#x9;&#x9;if (shipper != null){&#xA;&#x9;&#x9;  try{&#xA;&#x9;&#x9;&#x9;shipperName = shipper.getBzuName();&#xA;&#x9;&#x9;&#x9;shipperName = removeDoubleQuotes(shipperName);&#xA;&#x9;&#x9;&#x9;shipperId = shipper.getBzuId();&#xA;&#x9;&#x9;&#x9;shipperId = removeDoubleQuotes(shipperId);&#xA;&#xA;&#x9;&#x9;&#x9;contentsShipperNameValue = XML_OVERRIDE+shipperName+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;contentsShipperIdValue =  XML_OVERRIDE+shipperId+XML_OVERRIDE;&#xA;&#x9;&#x9;  } catch (Exception e){&#xA;&#x9;&#x9;&#x9;LOGGER.warn (&quot;Exception in getting Shipper Info&quot; + e);&#xA;&#x9;&#x9;  }&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;String handlingString = contentsOpenAttr+contentsCommodityNameAttr+contentsCommodityNameValue+contentsCommodityIdAttr+contentsCommodityIdValue;&#xA;&#x9;&#x9;if (shipper != null){&#xA;&#x9;&#x9;  handlingString = handlingString+contentsShipperNameAttr+contentsShipperNameValue+contentsShipperIdAttr+contentsShipperIdValue;&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (consignee != null){&#xA;&#x9;&#x9;  handlingString = handlingString+contentsConsigneeNameAttr+contentsConsigneeNameValue+contentsConsigneeIdAttr+contentsConsigneeIdValue;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//if (blNbr !=null){&#xA;&#x9;&#x9;  handlingString = handlingString+contentsBlNbrAttr+contentsBlNbrValue;&#xA;&#x9;&#x9;//}&#xA;&#x9;&#x9;if (gdsWeight != null){&#xA;&#x9;&#x9;  handlingString = handlingString+contentsWeightKgAttr+contentsWeightKgValue;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9; handlingString = handlingString+XML_END_ELEMENT;&#xA;&#x9;&#x9; handlingString = this.stripInvalidXmlCharacters(handlingString);&#xA;&#x9;&#x9; inElementList.append(handlingString);&#xA;&#x9;&#x9; //Add Seal Element&#xA;&#x9;&#x9;String sealsOpenAttr = &quot;&lt;seals&quot;;&#xA;&#x9;&#x9;String seals1Attr = &quot; seal-1=&quot;;&#xA;&#x9;&#x9;String seals1Value = XML_OVERRIDE+inUnit.getUnitSealNbr1()+XML_OVERRIDE;&#xA;&#x9;&#x9;if (inUnit.getUnitSealNbr1() != null){&#xA;&#x9;&#x9;  String sealsString = sealsOpenAttr+seals1Attr+seals1Value+XML_END_ELEMENT;&#xA;&#x9;&#x9;  inElementList.append(sealsString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;public StringBuffer getUnitEtc(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;def drayStatus = inUnit.getFieldValue(&quot;unitDrayStatus&quot;);&#xA;&#x9;&#x9;if (drayStatus != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;drayStatus = drayStatus.getKey();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;String requiredPower = inUnit.getFieldValue(&quot;unitRequiresPower&quot;) ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;String etcAttrOpn = &quot;&lt;unit-etc&quot;;&#xA;&#x9;&#x9;String etcString = etcAttrOpn;&#xA;&#x9;&#x9;if (requiredPower == &quot;Y&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;etcString = etcString + &quot; requires-power=&quot; + XML_OVERRIDE + requiredPower + XML_OVERRIDE;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (drayStatus !=null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;etcString = etcString + &quot; dray-status=&quot; + XML_OVERRIDE + drayStatus + XML_OVERRIDE;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (drayStatus != null || requiredPower == &quot;Y&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;etcString = etcString + XML_END_ELEMENT;&#xA;&#x9;&#x9;inElementList.append(etcString);&#xA;&#x9;&#x9;}&#xA;&#x9;return inElementList;&#xA;&#x9;}&#xA;&#xA;public getFlagDetails = {Unit inUnit, StringBuffer inElementList, CarrierVisit inCv -&gt;&#xA;&#xA;    String flagOpenCloseAttr = &quot;&lt;flags/&gt;&quot;;&#xA;    String flagOpenAttr = &quot;&lt;flags&gt;&quot;;&#xA;    String flagCloseAttr = &quot;&lt;/flags&gt;&quot;;&#xA;&#x9;String holdIdValue = &quot;&quot;;&#xA;&#x9;String holdString = &quot;&quot;;&#xA;&#x9;addNode = &quot;N&quot;;&#xA;    List unitImpediments = this.getUnitImpediments(inUnit);&#xA;&#xA;    if (unitImpediments.isEmpty()) {&#xA;      return inElementList;&#xA;    }&#xA;    for (ServiceImpediment imp : unitImpediments) {&#xA;      def status = imp.getStatus();&#xA;      if (FlagStatusEnum.ACTIVE.equals(status) || FlagStatusEnum.REQUIRED.equals(status)) {&#xA;        String holdOpenAttr = &quot;&lt;hold&quot;;&#xA;        String holdIdAttr = &quot; id=&quot;;&#xA;        String holdId = imp.getFlagType().getId();&#xA;&#x9;&#x9;String flgtypPurpose = imp.getFlagType().getPurpose().getKey();&#xA;&#x9;&#x9;println (&quot;holdId &quot;+ holdId +&quot; flgtypPurpose &quot;+flgtypPurpose);&#xA;&#x9;&#x9;if (flgtypPurpose != &quot;PERMISSION&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;addNode = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;holdIdValue = XML_OVERRIDE + holdId + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;holdString = holdString + holdOpenAttr + holdIdAttr + holdIdValue + XML_END_ELEMENT;&#xA;&#x9;&#x9;}&#xA;&#x9;  }&#xA;    }&#xA;&#xA;&#x9;if (addNode == &quot;Y&quot;)&#xA;&#x9;{&#xA;&#x9;&#x9;holdString = this.stripInvalidXmlCharacters(holdString);&#xA;&#x9;&#x9;holdString = this.ModifyEscapeChar(holdString);&#xA;&#x9;&#x9;holdString = flagOpenAttr + holdString + flagCloseAttr&#xA;&#x9;&#x9;inElementList.append(holdString);&#xA;&#x9;}&#xA;&#xA;&#x9;return inElementList;&#xA;  }&#xA;&#xA;  private List getUnitImpediments (Unit inUnit){&#xA;&#xA;    ServicesManager serviceManager = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;    List unitImpediments = serviceManager.getImpedimentsForEntity(inUnit);&#xA;    return unitImpediments;&#xA;  }&#xA;&#xA;  private String formatDate(Date inDate) {&#xA;    SimpleDateFormat yyyyMMdd = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;    SimpleDateFormat hhmmss = new SimpleDateFormat(&quot;HH:mm:ss.SSS&quot;);&#xA;    String sDate = yyyyMMdd.format(inDate) + &quot;T&quot; + hhmmss.format(inDate);&#xA;    return sDate&#xA;  }&#xA;&#xA;  private String formatRdsDate(Date inDate) {&#xA;    SimpleDateFormat yyyyMMdd = new SimpleDateFormat(&quot;MM/dd/yyyy&quot;);&#xA;    SimpleDateFormat hhmmss = new SimpleDateFormat(&quot;HH:mm:ss&quot;);&#xA;    String rdsDate = yyyyMMdd.format(inDate) + &quot; &quot; + hhmmss.format(inDate);&#xA;    return rdsDate&#xA;  }&#xA;&#xA;public String findCarrierVisitMode (CarrierVisit inCv){&#xA;&#xA;    final LocTypeEnum carrierMode = inCv.getCvCarrierMode();&#xA;    if (carrierMode.equals(LocTypeEnum.VESSEL)){&#xA;      return &quot;VESSEL&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.TRUCK)){&#xA;      return &quot;TRUCK&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.TRAIN)){&#xA;      return &quot;TRAIN&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.YARD)){&#xA;      return &quot;YARD&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.RAILCAR)){&#xA;      return &quot;TRAIN&quot;;&#xA;    }&#xA;&#x9;else{&#xA;      return &quot;UNKNOWN&quot;;&#xA;    }&#xA;  }&#xA;&#xA;  public String findEquipmentMaterial(Equipment inEq){&#xA;&#xA;    String material=&quot;&quot;;&#xA;    if ((EquipMaterialEnum.ALUMINUM.equals(inEq.getEqMaterial()))){&#xA;      material = XML_OVERRIDE+&quot;ALUMINUM&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((EquipMaterialEnum.STEEL.equals(inEq.getEqMaterial()))){&#xA;      material = XML_OVERRIDE+&quot;STEEL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((EquipMaterialEnum.UNKNOWN.equals(inEq.getEqMaterial()))){&#xA;      material = XML_OVERRIDE+&quot;UNKNOWN&quot;+XML_OVERRIDE;&#xA;    }&#xA;    return material;&#xA;  }&#xA;&#xA;  public String findUnitNbr(Unit inUnit){&#xA;&#xA;    Equipment eq = inUnit.getPrimaryEq();&#xA;    String  equipId = eq.getEqIdFull();&#xA;    equipId = XML_OVERRIDE+equipId+XML_OVERRIDE;&#xA;    return equipId;&#xA;   }&#xA;&#xA;  public String findUnitCategory(Unit inUnit){&#xA;&#xA;    String category=&quot;&quot;;&#xA;    if ((UnitCategoryEnum.EXPORT.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;EXPORT&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((UnitCategoryEnum.IMPORT.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;IMPORT&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((UnitCategoryEnum.THROUGH.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;THROUGH&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((UnitCategoryEnum.TRANSSHIP.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;TRANSSHIP&quot;+XML_OVERRIDE;&#xA;    }&#xA;&#xA;&#x9;if (category == &quot;&quot;)&#xA;&#x9;{&#xA;&#x9;&#x9;def categoryOther = inUnit.getUnitCategory();&#xA;&#x9;&#x9;categoryOther = categoryOther != null ? categoryOther.getKey() : &quot;&quot;&#xA;&#x9;&#x9;categoryOther = categoryOther == &quot;STRGE&quot; ? &quot;STORAGE&quot; : &quot;&quot;&#xA;&#x9;&#x9;category = XML_OVERRIDE+categoryOther+XML_OVERRIDE;&#xA;&#x9;}&#xA;&#xA;    return category;&#xA;  }&#xA;&#xA;  public String findUnitFreightKind(Unit inUnit){&#xA;&#xA;    String freightKind=&quot;&quot;;&#xA;    if ((FreightKindEnum.MTY.equals(inUnit.getUnitFreightKind()))){&#xA;      freightKind = XML_OVERRIDE+&quot;MTY&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((FreightKindEnum.LCL.equals(inUnit.getUnitFreightKind()))){&#xA;      freightKind = XML_OVERRIDE+&quot;LCL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((FreightKindEnum.FCL.equals(inUnit.getUnitFreightKind()))){&#xA;      freightKind = XML_OVERRIDE+&quot;FCL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    return freightKind;&#xA;  }&#xA;&#xA;&#x9;public String getTimeFormat(String inDate)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;String outDate = null;&#xA;&#x9;&#x9;DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#xA;&#x9;&#x9;if (inDate != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Date date = new SimpleDateFormat(&quot;EEE MMM dd hh:mm:ss zzz yyyy&quot;, Locale.ENGLISH).parse(inDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outDate = df.format(date);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;catch (de)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Date date = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;, Locale.ENGLISH).parse(inDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outDate = df.format(date);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;outDate = outDate + &quot;T00:00:00.000&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;return outDate;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;public StringBuffer getUfvDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;&#x9;def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;&#x9;&#x9;&#x9;def ufv = inUnit.getUfvForFacilityCompletedOnly(fcy);&#xA;&#x9;&#x9;&#x9;DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;if (ufv != null){&#xA;&#x9;&#x9;&#x9;&#x9;String addTag = &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate1 = ufv.getFieldValue(&quot;ufvFlexDate01&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate2 = ufv.getFieldValue(&quot;ufvFlexDate02&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate3 = ufv.getFieldValue(&quot;ufvFlexDate03&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate4 = ufv.getFieldValue(&quot;ufvFlexDate04&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate5 = ufv.getFieldValue(&quot;ufvFlexDate05&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate6 = ufv.getFieldValue(&quot;ufvFlexDate06&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate7 = ufv.getFieldValue(&quot;ufvFlexDate07&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate8 = ufv.getFieldValue(&quot;ufvFlexDate08&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexString1 = ufv.getFieldValue(&quot;ufvFlexString1&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString1&quot;)) : null;&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexString2 = ufv.getFieldValue(&quot;ufvFlexString2&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString2&quot;)) : null;&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexString3 = ufv.getFieldValue(&quot;ufvFlexString3&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString3&quot;)) : null;&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexString4 = ufv.getFieldValue(&quot;ufvFlexString4&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString4&quot;)) : null;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String date1Attr = &quot; ufv-flex-date-1=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String date2Attr = &quot; ufv-flex-date-2=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String date3Attr = &quot; ufv-flex-date-3=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String date4Attr = &quot; ufv-flex-date-4=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String date5Attr = &quot; ufv-flex-date-5=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String date6Attr = &quot; ufv-flex-date-6=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String date7Attr = &quot; ufv-flex-date-7=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String date8Attr = &quot; ufv-flex-date-8=&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String string1Attr = &quot; uvf-flex-1=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String string2Attr = &quot; uvf-flex-2=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String string3Attr = &quot; uvf-flex-3=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String string4Attr = &quot; uvf-flex-4=&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String string1Value = XML_OVERRIDE+ufvflexString1+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;String string2Value = XML_OVERRIDE+ufvflexString2+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;String string3Value = XML_OVERRIDE+ufvflexString3+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;String string4Value = XML_OVERRIDE+ufvflexString4+XML_OVERRIDE;&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String ufvFlexOpenAttr = &quot;&lt;ufv-flex&quot;&#xA;&#x9;&#x9;&#x9;&#x9;String ufvFlexString = ufvFlexOpenAttr;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate8 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate8 = this.getTimeFormat(ufvflexdate8)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date8Value = XML_OVERRIDE+ufvflexdate8+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date8Attr+date8Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate7 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate7 = this.getTimeFormat(ufvflexdate7)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date7Value = XML_OVERRIDE+ufvflexdate7+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date7Attr+date7Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate6 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate6 = this.getTimeFormat(ufvflexdate6)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date6Value = XML_OVERRIDE+ufvflexdate6+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date6Attr+date6Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate5 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate5 = this.getTimeFormat(ufvflexdate5)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date5Value = XML_OVERRIDE+ufvflexdate5+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date5Attr+date5Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate4 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate4 = this.getTimeFormat(ufvflexdate4)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date4Value = XML_OVERRIDE+ufvflexdate4+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date4Attr+date4Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate3 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate3 = this.getTimeFormat(ufvflexdate3)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date3Value = XML_OVERRIDE+ufvflexdate3+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date3Attr+date3Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate2 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate2 = this.getTimeFormat(ufvflexdate2)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date2Value = XML_OVERRIDE+ufvflexdate2+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date2Attr+date2Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate1 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate1 = this.getTimeFormat(ufvflexdate1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date1Value = XML_OVERRIDE+ufvflexdate1+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date1Attr+date1Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexString1 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = this.removeDoubleQuotes(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string1Attr+string1Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexString2 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string2Attr+string2Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexString3 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string3Attr+string3Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexString4 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string4Attr+string4Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = this.stripInvalidXmlCharacters(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (addTag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//fvFlexString = this.stripInvalidXmlCharacters(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = this.ModifyEscapeChar(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;inElementList.append(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return inElementList;&#xA;&#x9;&#x9;  }&#xA;&#xA;&#x9;public StringBuffer getUnitFlexDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;&#x9;String  unitflexString1 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString2 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString3 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String  unitflexString4 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString5 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString6 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String  unitflexString7 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString8 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString9 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString10 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString12 = &quot;&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;unitflexString1 = inUnit.getFieldValue(&quot;unitFlexString01&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString01&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString2 = inUnit.getFieldValue(&quot;unitFlexString02&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString02&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString3 = inUnit.getFieldValue(&quot;unitFlexString03&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString03&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString4 = inUnit.getFieldValue(&quot;unitFlexString04&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString04&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString5 = inUnit.getFieldValue(&quot;unitFlexString05&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString05&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString6 = inUnit.getFieldValue(&quot;unitFlexString06&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString06&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString7 = inUnit.getFieldValue(&quot;unitFlexString07&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString07&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString8 = inUnit.getFieldValue(&quot;unitFlexString08&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString08&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString9 = inUnit.getFieldValue(&quot;unitFlexString09&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString09&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString10 = inUnit.getFieldValue(&quot;unitFlexString10&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString10&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString12 = inUnit.getFieldValue(&quot;unitFlexString12&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString12&quot;)): null;&#xA;&#xA;&#x9;&#x9;&#x9;String unitFlexOpenAttr = &quot;&lt;unit-flex&quot;&#xA;&#x9;&#x9;&#x9;String string1Attr = &quot; unit-flex-1=&quot;;&#xA;&#x9;&#x9;&#x9;String string2Attr = &quot; unit-flex-2=&quot;;&#xA;&#x9;&#x9;&#x9;String string3Attr = &quot; unit-flex-3=&quot;;&#xA;&#x9;&#x9;&#x9;String string4Attr = &quot; unit-flex-4=&quot;;&#xA;&#x9;&#x9;&#x9;String string5Attr = &quot; unit-flex-5=&quot;;&#xA;&#x9;&#x9;&#x9;String string6Attr = &quot; unit-flex-6=&quot;;&#xA;&#x9;&#x9;&#x9;String string7Attr = &quot; unit-flex-7=&quot;;&#xA;&#x9;&#x9;&#x9;String string8Attr = &quot; unit-flex-8=&quot;;&#xA;&#x9;&#x9;&#x9;String string9Attr = &quot; unit-flex-9=&quot;;&#xA;&#x9;&#x9;&#x9;String string10Attr = &quot; unit-flex-10=&quot;;&#xA;&#x9;&#x9;&#x9;String string12Attr = &quot; unit-flex-12=&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;String string1Value = XML_OVERRIDE+unitflexString1+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string2Value = XML_OVERRIDE+unitflexString2+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string3Value = XML_OVERRIDE+unitflexString3+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string4Value = XML_OVERRIDE+unitflexString4+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string5Value = XML_OVERRIDE+unitflexString5+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string6Value = XML_OVERRIDE+unitflexString6+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string7Value = XML_OVERRIDE+unitflexString7+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string8Value = XML_OVERRIDE+unitflexString8+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string9Value = XML_OVERRIDE+unitflexString9+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string10Value = XML_OVERRIDE+unitflexString10+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string12Value = XML_OVERRIDE+unitflexString12+XML_OVERRIDE;&#xA;&#x9;try {&#xA;&#xA;&#x9;&#x9;&#x9;//unitflexString6 = &quot;\&quot;MCMILLON, STEVEN &amp; P\&quot;&quot;;&#xA;&#x9;&#x9;&#x9;//unitflexString6 = removeDoubleQuotes(unitflexString6);&#xA;&#x9;&#x9;&#x9;//string6Value = XML_OVERRIDE+unitflexString6+XML_OVERRIDE;&#xA;&#xA;&#x9;&#x9;&#x9;String unitFlexString = unitFlexOpenAttr;&#xA;&#xA;&#x9;&#x9;&#x9;if (unitflexString12 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string12Attr+string12Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString10 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string10Attr+string10Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString9 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string9Attr+string9Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (unitflexString8 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string8Attr+string8Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString7 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string7Attr+string7Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;//LOGGER.warn(&quot;unitflexString6::::::&quot; + unitflexString6);&#xA;&#x9;&#x9;&#x9;if (unitflexString6 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string6Attr+string6Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString5 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string5Attr+string5Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString4 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string4Attr+string4Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString3 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string3Attr+string3Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString2 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string2Attr+string2Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString1 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string1Attr+string1Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (unitflexString1 != null || unitflexString2 != null || unitflexString3 != null || unitflexString4 != null || unitflexString5 != null || unitflexString6 != null&#xA;&#x9;&#x9;&#x9;&#x9;|| unitflexString7 != null || unitflexString8 != null || unitflexString9 != null || unitflexString10 != null || unitflexString12 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;//unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.ModifyEscapeChar(unitFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;catch (e){&#xA;&#xA;&#x9;LOGGER.warn(&quot;unitFlexString Error ::::::&quot; + e);&#xA;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;public StringBuffer geTimeStamp(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;{&#xA;&#xA;&#x9;&#x9;def ufv = inUnit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;if (ufv !=null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;String timeIn = ufv.ufvTimeIn;&#xA;&#x9;&#x9;&#x9;String timeOut = ufv.ufvTimeOut;&#xA;&#x9;&#x9;&#x9;String timeLoad = ufv.ufvTimeOfLoading;&#xA;&#xA;&#x9;&#x9;    String timeStampAttrOpn = &quot;&lt;timestamps&quot;;&#xA;&#x9;&#x9;&#x9;String timeStampString = timeStampAttrOpn;&#xA;&#x9;&#x9;&#x9;if (timeIn !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + &quot; time-in=&quot; + XML_OVERRIDE + timeIn + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (timeOut !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + &quot; time-out=&quot; + XML_OVERRIDE + timeOut + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (timeLoad !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + &quot; time-load=&quot; + XML_OVERRIDE + timeLoad + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (timeIn != null || timeOut != null || timeLoad != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(timeStampString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;&#xA;public String stripInvalidXmlCharacters(String input){&#xA;    String specialCharacter = &quot;&amp;&quot;;&#xA;    try {&#xA;    if (input.contains(specialCharacter)) {&#xA;       input = input.replaceAll(&quot;&amp;&quot;, &quot;&amp;amp; &quot;);&#xA;       //LOGGER.warn(&quot;sb:&quot; + input);&#xA;    }&#xA;&#xA;&#x9;if (input.contains(&quot;null&quot;)) {&#xA;       input = input.replaceAll(&quot;null&quot;, &quot; &quot;);&#xA;       //LOGGER.warn(&quot;sb:&quot; + input);&#xA;    }&#xA;    }&#xA;    catch (e){&#xA;&#xA;    }&#xA;    return input;&#xA;  }&#xA;&#xA; public String removeDoubleQuotes(String input){&#xA;    String specialCharacter = &quot;&amp;&quot;;&#xA;    try {&#xA;    if (input.contains(&quot;\&quot;&quot;)) {&#xA;       input = input.replaceAll(&quot;\&quot;&quot;, &quot;#quot;&quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;&lt;&quot;)) {&#xA;       input = input.replaceAll(&quot;&lt;&quot;, &quot;#lt; &quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;&gt;&quot;)) {&#xA;       input = input.replaceAll(&quot;&gt;&quot;, &quot;#gt; &quot;);&#xA;    }&#xA;    }&#xA;    catch (e){&#xA;&#xA;    }&#xA;    return input;&#xA;  }&#xA;&#xA; public String ModifyEscapeChar(String input){&#xA;    try {&#xA;    if (input.contains(&quot;#quot&quot;)) {&#xA;       input = input.replaceAll(&quot;#quot;&quot;, &quot;&amp;quot;&quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;#lt&quot;)) {&#xA;       input = input.replaceAll(&quot;#lt;&quot;, &quot;&amp;lt; &quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;#gt&quot;)) {&#xA;       input = input.replaceAll(&quot;#gt;&quot;, &quot;&amp;gt; &quot;);&#xA;    }&#xA;    }&#xA;    catch (e){&#xA;&#xA;    }&#xA;    return input;&#xA;  }&#xA;&#xA;&#x9;&#x9;private static final Logger LOGGER = Logger.getLogger(MATBargeYBDepartUnits.class);&#xA;&#x9;}" />
<digital-asset id="GvyCmisCargoEditDetention" short-description="GvyCmisCargoEditDetention" is-pre-deployed="N" groovy-code="/*&#xA;* Srno   Doer   Date      Change&#xA;* A1     GR     04/30/10  Added Consignee Fix to Detention&#xA;* A2     GR     05/19/10  Change for DTD&#xA;* A3     GR     07/08/10  DTD - Added consignee for builtin&#xA;* A4     GR     01/27/11  Commodity XMAS Tree to port DTD,DTA&#xA;*/&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.reference.Shipper&#xA;&#xA;public class GvyCmisCargoEditDetention {&#xA;    def cmisActnList = '';&#xA;    def misc3 = '';&#xA;    def dir = '';&#xA;    def dischPort = '';&#xA;    def locationStatus = '';&#xA;    def detnMsg = false;&#xA;    boolean freightkindChng = false;&#xA;    boolean categoryChng = false;&#xA;    boolean consigneeChng = false;&#xA;    boolean updtdischPort = false;&#xA;    boolean lineOperatorChng = false;&#xA;&#xA;    def unit = null;&#xA;    def commodity = null;&#xA;    boolean commodityChng = false; //A4&#xA;&#xA;    //A2 Change For DTD&#xA;    Map _mapPrevField = null;&#xA;    def gvyCmisUtil = null;&#xA;    def gvyEventUtil = null;&#xA;&#xA;    //Initialize class for Global use&#xA;    public void init(Object gvyBaseClass) {&#xA;        gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;        gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;        cmisActnList = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisListAction&quot;);&#xA;    }&#xA;&#xA;&#xA;    public boolean detentionProcess(String xmlData, Object event, Object gvyBaseClass, String prevDischPort) {&#xA;        try {&#xA;            def xmlGvyString = xmlData&#xA;            unit = event.getEntity()&#xA;            def gvyEventObj = event.getEvent()&#xA;            String eventType = gvyEventObj.getEventTypeId()&#xA;            def previousDischPort = prevDischPort != null ? prevDischPort : ''&#xA;&#xA;            dischPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;&#xA;            def equiClass = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;            def equiClassKey = equiClass != null ? equiClass.getKey() : equiClass&#xA;            if (!equiClassKey.equals('CONTAINER')) {&#xA;                return false;&#xA;            }&#xA;&#xA;            init(gvyBaseClass)&#xA;&#xA;            if (!gvyEventObj.getEvntEventType().getEvnttypeIsBuiltInEvent() || eventType.equals('UNIT_PROPERTY_UPDATE')) {&#xA;                setEvntFieldChngNonBuiltEvnt(event, gvyEventUtil, gvyBaseClass, previousDischPort)&#xA;            }&#xA;&#xA;            //A8&#xA;            commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;)&#xA;            commodity = commodity != null ? commodity : ''&#xA;&#xA;            misc3 = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;misc3=&quot;)&#xA;            dir = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;dir=&quot;)&#xA;            locationStatus = getlocationStatus(unit, gvyCmisUtil)&#xA;            //println('detentionProcess : misc3:'+misc3+'  dir:'+dir+'   locationStatus:'+locationStatus+'freightkindChng :'+freightkindChng+'  consigneeChng:'+consigneeChng+'   updtdischPort:'+updtdischPort)&#xA;&#xA;            if (updtdischPort) {&#xA;                detentionDischPortMsg(gvyCmisUtil, gvyEventUtil, event, gvyBaseClass, unit, previousDischPort)&#xA;            } else if (freightkindChng) {&#xA;                detentionFreightMsg(gvyCmisUtil, gvyEventUtil, event, unit, freightkindChng)&#xA;            } else if (consigneeChng) {&#xA;                detentionConsigneeMsg(gvyCmisUtil, gvyEventUtil, event, unit)&#xA;            } else if (categoryChng) {&#xA;                detentionForCategory(unit)&#xA;            } else if (lineOperatorChng) {&#xA;                cmisActnList.setActionList(&quot;DTD&quot;)&#xA;                cmisActnList.setActionList(&quot;DTA&quot;)&#xA;                detnMsg = true&#xA;            } else if (commodityChng &amp;&amp; (_mapPrevField.get('commodity') != null &amp;&amp; _mapPrevField.get('commodity').contains('XMAS')) ||&#xA;                    commodity.contains('XMAS')) //A4&#xA;            {&#xA;                cmisActnList.setActionList(&quot;DTD&quot;)&#xA;                cmisActnList.setActionList(&quot;DTA&quot;)&#xA;                detnMsg = true&#xA;            }&#xA;&#xA;            //DetentionAcetsMessage Check Do not Append EDT &amp; FREE&#xA;            if (!detentionAcetsMsgFilter(gvyEventObj)) {&#xA;                appendMsgOnEvent(eventType)&#xA;            }&#xA;&#xA;            //Post Detention MSG Action&#xA;            LinkedHashSet actionList = cmisActnList.getActionList();&#xA;            for (aAction in actionList) {&#xA;                if ('DTD'.equals(aAction)) {&#xA;                    String reFmtDtdXml = reformatDTDwithPrevValues(xmlGvyString, gvyCmisUtil)&#xA;                    gvyCmisUtil.postMsgForAction(reFmtDtdXml, gvyBaseClass, aAction)&#xA;                } else {&#xA;                    gvyCmisUtil.postMsgForAction(xmlGvyString, gvyBaseClass, aAction)&#xA;                }&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;&#xA;        return detnMsg&#xA;    }&#xA;&#xA;/*&#xA;* Method set the Detention Cmis action for Destination change&#xA;*/&#xA;&#xA;    public void detentionDischPortMsg(Object gvyCmisUtil, Object gvyEventUtil, Object event, Object gvyBaseClass, Object unit, Object previousDischPort) {&#xA;        try {&#xA;            //latest Code Updt Starts&#xA;            def prevDischPortVal = previousDischPort&#xA;&#xA;            def freightKind = unit.getFieldValue(&quot;unitFreightKind&quot;)&#xA;            freightKind = freightKind != null ? freightKind.getKey() : ''&#xA;            //latest Code Updt Ends&#xA;&#xA;            cmisActnList.setActionList(&quot;DTD&quot;)&#xA;            detnMsg = true&#xA;            if (misc3.length() &gt; 6) {&#xA;                cmisActnList.setActionList(&quot;DTA&quot;)&#xA;            }&#xA;&#xA;            /* def prevPortNis = gvyCmisUtil.isNISPort(prevDischPortVal)&#xA;             def updtPortNis = gvyCmisUtil.isNISPort(dischPort)&#xA;&#xA;             //println('prevDischPortVal::'+prevDischPortVal+'  updtPortNis ::'+updtPortNis+'   Detention NIS - prevPortNis: '+prevPortNis)&#xA;             if(freightKind.equals('FCL') &amp;&amp; ((prevDischPortVal.equals(ContextHelper.getThreadFacility().getFcyId()) ) || ( locationStatus.equals('7'))))&#xA;             {&#xA;                 cmisActnList.setActionList(&quot;DTD&quot;)&#xA;                 detnMsg = true&#xA;              }&#xA;              else&#xA;             {&#xA;                  cmisActnList.setActionList(&quot;DTD&quot;)&#xA;                if(misc3.length() &gt; 6 || updtPortNis ){&#xA;                  cmisActnList.setActionList(&quot;DTA&quot;)&#xA;                }&#xA;                detnMsg = true&#xA;             }*///else Ends&#xA;            // }//If ends&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;/*&#xA;* Method set the Detention Cmis action for FreightKind and consignee change&#xA;*/&#xA;&#xA;    public void detentionFreightMsg(Object gvyCmisUtil, Object gvyEventUtil, Object event, Object unit, boolean freightkindChng) {&#xA;        try {&#xA;            def currFreightKind = unit.getFieldValue(&quot;unitFreightKind&quot;)&#xA;            currFreightKind = currFreightKind != null ? currFreightKind.getKey() : ''&#xA;            def prevFreightKind = currFreightKind&#xA;            if (freightkindChng) {&#xA;                prevFreightKind = gvyEventUtil.getPreviousPropertyAsString(event, &quot;unitFreightKind&quot;)&#xA;                prevFreightKind = prevFreightKind != null ? prevFreightKind : ''&#xA;            }&#xA;&#xA;            //def dischPortNis = gvyCmisUtil.isNISPort(dischPort)&#xA;            if (dischPort.equals(ContextHelper.getThreadFacility().getFcyId()) &amp;&amp; prevFreightKind.equals('FCL')) {&#xA;                cmisActnList.setActionList(&quot;DTD&quot;)&#xA;                detnMsg = true&#xA;            } else if (dischPort.equals(ContextHelper.getThreadFacility().getFcyId()) &amp;&amp; currFreightKind.equals('FCL')) {&#xA;                if (misc3.length() &gt; 6) {&#xA;                    cmisActnList.setActionList(&quot;DTA&quot;)&#xA;                    detnMsg = true&#xA;                }&#xA;            } else if (/*dischPortNis &amp;&amp;*/ locationStatus.equals('7') &amp;&amp; prevFreightKind.equals('FCL')) {&#xA;                cmisActnList.setActionList(&quot;DTD&quot;)&#xA;                detnMsg = true&#xA;            } else if (/*dischPortNis &amp;&amp;*/ locationStatus.equals('7') &amp;&amp; currFreightKind.equals('FCL')) {&#xA;                cmisActnList.setActionList(&quot;DTA&quot;)&#xA;                detnMsg = true&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;//A1&#xA;    public void detentionConsigneeMsg(Object gvyCmisUtil, Object gvyEventUtil, Object event, Object unit) {&#xA;        try {&#xA;            def currFreightKind = unit.getFieldValue(&quot;unitFreightKind&quot;)&#xA;            currFreightKind = currFreightKind != null ? currFreightKind.getKey() : ''&#xA;            def prevFreightKind = currFreightKind&#xA;&#xA;            //def dischPortNis = gvyCmisUtil.isNISPort(dischPort)&#xA;            if (dischPort.equals(ContextHelper.getThreadFacility().getFcyId()) &amp;&amp; currFreightKind.equals('FCL')) {&#xA;                cmisActnList.setActionList(&quot;DTD&quot;)&#xA;                if (misc3.length() &gt; 6) {&#xA;                    cmisActnList.setActionList(&quot;DTA&quot;)&#xA;                }&#xA;                detnMsg = true&#xA;            } else if ( locationStatus.equals('7') &amp;&amp; currFreightKind.equals('FCL')) {&#xA;                cmisActnList.setActionList(&quot;DTD&quot;)&#xA;                cmisActnList.setActionList(&quot;DTA&quot;)&#xA;                detnMsg = true&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;    public void appendMsgOnEvent(String eventType) {&#xA;&#xA;        // if(availDateChng || detentionDateChng)&#xA;        if (!(eventType.equals('UNIT_PROPERTY_UPDATE') || eventType.equals('UNIT_REROUTE') || eventType.equals('CARGO_EDIT') || eventType.equals('REVIEW_FOR_STOW') || eventType.equals('SIT_ASSIGN') || eventType.equals('SIT_UNASSIGN'))) {&#xA;            //Passing Detention Msg&#xA;            if (detnMsg) {&#xA;                cmisActnList.setActionList(&quot;FREE&quot;)&#xA;                cmisActnList.setActionList(&quot;EDT&quot;)&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    public boolean detentionAcetsMsgFilter(Object gvyEventObj) {&#xA;        try {&#xA;            //DOER&#xA;            def doer = gvyEventObj.getEvntAppliedBy();&#xA;            def eventNotes = gvyEventObj.getEventNote()&#xA;            eventNotes = eventNotes != null ? eventNotes : ''&#xA;            CharSequence acetsMsg = &quot;ACETS&quot;;&#xA;            boolean acetsRecorder = doer.contains(acetsMsg);&#xA;            boolean evntNotes = eventNotes.contains(acetsMsg);&#xA;&#xA;            if (acetsRecorder || evntNotes) {&#xA;                return true&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return false&#xA;    }&#xA;&#xA;    public void detentionForCategory(Object unit) {&#xA;        try {&#xA;            def category = unit.getFieldValue(&quot;unitCategory&quot;)&#xA;            category = category != null ? category.getKey() : ''&#xA;&#xA;            if (category.equals('EXPRT')) {&#xA;                cmisActnList.setActionList(&quot;DTD&quot;)&#xA;                cmisActnList.setActionList(&quot;DTA&quot;)&#xA;                detnMsg = true&#xA;            } else if (category.equals('IMPRT')) {&#xA;                cmisActnList.setActionList(&quot;DTA&quot;)&#xA;                detnMsg = true&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;    }//Method Ends&#xA;&#xA;    public void getlocationStatus(Object unit, Object gvyCmisUtil) {&#xA;        try {&#xA;            def lkpLocType = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;            lkpLocType = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;            def lkpCarrierId = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocId&quot;)&#xA;            locationStatus = lkpLocType.equals('VESSEL') &amp;&amp; gvyCmisUtil.getVesselClassType(lkpCarrierId).equals('BARGE') ? '7' : ''&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;&#xA;    public void setEvntFieldChngNonBuiltEvnt(Object event, Object gvyEventUtil, Object gvyBaseClass, String previousDischPort) {&#xA;        //Reads and Maps Event Updated Field value&#xA;        Map mapEvntField = gvyEventUtil.eventFieldChangedValues(event, gvyBaseClass)&#xA;        _mapPrevField = new HashMap();&#xA;&#xA;        String fieldArr = [&quot;gdsDestination&quot;, &quot;gdsConsigneeBzu&quot;, &quot;unitFreightKind&quot;, &quot;unitCategory&quot;, &quot;unitLineOperator&quot;, &quot;gdsShipperBzu&quot;, &quot;gdsConsigneeAsString&quot;, &quot;gdsCommodity&quot;]&#xA;        try {&#xA;            Iterator it = mapEvntField.keySet().iterator();&#xA;            while (it.hasNext()) {&#xA;                def aField = it.next();&#xA;                if (!fieldArr.contains(aField)) {&#xA;                    continue;&#xA;                }&#xA;&#xA;                //Fetch Event Updated Field : current and Previous value&#xA;                def aEvntFieldObj = mapEvntField.get(aField)&#xA;                def fieldname = aEvntFieldObj.getFieldName()&#xA;                def previousValue = aEvntFieldObj.getpreviousValue()&#xA;                previousValue = previousValue != null ? previousValue : ''&#xA;                def currentValue = aEvntFieldObj.getCurrentValue()&#xA;                currentValue = currentValue != null ? currentValue : ''&#xA;&#xA;                //println('aField :'+aField+'  fieldname ::'+fieldname+'  previousValue::'+previousValue+'   currentValue::'+currentValue)&#xA;                if (aField.equals(&quot;gdsDestination&quot;) &amp;&amp; (!previousDischPort.equals(dischPort))) {&#xA;                    updtdischPort = true;&#xA;                    _mapPrevField.put('dischargePort', previousValue)&#xA;                    _mapPrevField.put('dPort', previousValue)&#xA;                } else if (!currentValue.equals(previousValue)) {&#xA;                    if (aField.equals(&quot;gdsConsigneeBzu&quot;)) {&#xA;                        consigneeChng = true&#xA;                        _mapPrevField.put('consignee', previousValue)&#xA;                    } else if (aField.equals(&quot;gdsConsigneeAsString&quot;)) {&#xA;                        consigneeChng = true&#xA;                        _mapPrevField.put('consignee', previousValue)&#xA;                    } else if (aField.equals(&quot;unitFreightKind&quot;)) {&#xA;                        freightkindChng = true&#xA;                        _mapPrevField.put('orientation', previousValue)&#xA;                    } else if (aField.equals(&quot;unitCategory&quot;)) {&#xA;                        categoryChng = true&#xA;                        _mapPrevField.put('category', previousValue)&#xA;                    } else if (aField.equals(&quot;unitLineOperator&quot;)) {&#xA;                        lineOperatorChng = true&#xA;                        _mapPrevField.put('locationRow', previousValue)&#xA;                    } else if (aField.equals(&quot;gdsShipperBzu&quot;)) {&#xA;                        _mapPrevField.put('shipper', previousValue)&#xA;                    } else if (aField.equals(&quot;gdsCommodity&quot;)) { //A4&#xA;                        commodityChng = true&#xA;                        //def gvyCmisEventSIT =  gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventSIT&quot;);&#xA;                        //def preCommodity  = gvyCmisEventSIT.lookupCommodity(previousValue)&#xA;                        //println(&quot;previousValue==================&quot;+previousValue)&#xA;                        _mapPrevField.put('commodity', previousValue)&#xA;                    }&#xA;                }//Inner If&#xA;            }//While Ends&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;    //Method Reformats the messages with previous values&#xA;    public String reformatDTDwithPrevValues(String xmlGvyString, Object gvyCmisUtil) {&#xA;        String reformattedXmlStr = xmlGvyString&#xA;        try {&#xA;            if (_mapPrevField == null) {&#xA;                return;&#xA;            }&#xA;            Iterator it = _mapPrevField.keySet().iterator();&#xA;            while (it.hasNext()) {&#xA;                def aKey = it.next();&#xA;                def prevalue = _mapPrevField.get(aKey)&#xA;                if ('consignee'.equals(aKey)) {&#xA;                    reformattedXmlStr = gvyCmisUtil.eventSpecificFieldValue(reformattedXmlStr, &quot;cneeCode=&quot;, prevalue)&#xA;                    def shipper = Shipper.findShipper(prevalue)&#xA;                    if (shipper != null) {&#xA;                        prevalue = shipper != null ? shipper.bzuName : &quot;&quot;&#xA;                        //println('consignee prevalue = '+prevalue+' shipper='+shipper+' shipper.bzuName='+shipper.bzuName)&#xA;                    }&#xA;                    //Add code to Overwrite Shipper &amp; Consignee Id&#xA;                } else if ('shipper'.equals(aKey)) {&#xA;                    reformattedXmlStr = gvyCmisUtil.eventSpecificFieldValue(reformattedXmlStr, &quot;shipperId=&quot;, prevalue)&#xA;                    def shipper = Shipper.findShipper(prevalue)&#xA;                    prevalue = shipper != null ? shipper.bzuName : ''&#xA;                } else if ('orientation'.equals(aKey)) {&#xA;                    prevalue = 'MTY'.equals(prevalue) ? 'E' : (prevalue.length() &gt; 1 ? 'F' : '')&#xA;                }&#xA;                reformattedXmlStr = gvyCmisUtil.eventSpecificFieldValue(reformattedXmlStr, aKey + &quot;=&quot;, prevalue)&#xA;&#xA;            }&#xA;&#xA;            //Set DTD misc3 value&#xA;            def prevMisc3 = getPreviousMisc3(reformattedXmlStr);&#xA;            reformattedXmlStr = gvyCmisUtil.eventSpecificFieldValue(reformattedXmlStr, &quot;misc3=&quot;, prevMisc3)&#xA;&#xA;            //Set last Free Date&#xA;            def prevlastFreeDay = getPrevLastFreeDay(reformattedXmlStr)&#xA;            reformattedXmlStr = gvyCmisUtil.eventSpecificFieldValue(reformattedXmlStr, &quot;locationCategory=&quot;, prevlastFreeDay)&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;        return reformattedXmlStr&#xA;    }&#xA;&#xA;    public String getPreviousMisc3(String xmlGvyString) {&#xA;        def currMisc3 = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;misc3=&quot;)&#xA;        def pervMis3 = unit.getFieldValue(&quot;unitSealNbr4&quot;)&#xA;&#xA;        //println('currMisc3='+currMisc3+'   pervMis3='+pervMis3)&#xA;        if (currMisc3 == null || !currMisc3.equals(pervMis3)) {&#xA;            unit.setUnitSealNbr4(currMisc3)&#xA;        }&#xA;        return pervMis3&#xA;    }&#xA;&#xA;&#xA;    public String getPrevLastFreeDay(String xmlGvyString) {&#xA;        def currFreeDay = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;locationCategory=&quot;)&#xA;        def pervLastFreeDay = unit.getFieldValue(&quot;unitSealNbr3&quot;)&#xA;&#xA;        //println('currFreeDay='+currFreeDay+'   pervLastFreeDay='+pervLastFreeDay)&#xA;        if (currFreeDay == null || !currFreeDay.equals(pervLastFreeDay)) {&#xA;            unit.setUnitSealNbr3(currFreeDay)&#xA;        }&#xA;        return pervLastFreeDay&#xA;    }&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyCmisEventFeedUnitReroute" short-description="GvyCmisEventFeedUnitReroute" is-pre-deployed="N" groovy-code="package com.matson.tos.groovies&#xA;&#xA;/*&#xA;* Sr doer  Date      change&#xA;* A1 GR    08/22/10  Uncommenting BDC for acets (SN4Q change)&#xA;* A2 GR    10/08/10  Gems : Uptd message posting method to Incorporate&#xA;                     Message specific field updates(example : AVL)&#xA;&#x9;&#x9;&#x9;         Depending Class GvyCmisUtil&#xA;* A3 GR&#x9;   10/29/10&#x9; SN4Q: BDC=AO for AVL where OBcarreir Is Updated&#xA;* A4 GR&#x9;   01/06/12&#x9; Oracle Patch fix&#xA;* A5 RI    10/18/13  Added locationStatus=4 for Inbound for CMIS to get the correct Barge vesvoy&#xA;* A6 KR    07/09/15  Alaska Ports&#xA;*/&#xA;&#xA;&#xA;import com.navis.argo.business.reference.RoutingPoint;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.argo.ArgoRefField;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.argo.ContextHelper;&#xA;&#xA;&#xA;public class GvyCmisEventFeedUnitReroute&#xA;{&#xA;    def updtcategory = ''&#xA;    def prevCategory = ''&#xA;    def locationStatus = ''&#xA;&#xA;    public Object processUnitRerouteCmisFeed(String xmlGvyData, Object gvyBaseClass, Object event, Object unit, Object cmisActionList, boolean detnMsg)&#xA;    {&#xA;        def xmlGvyString = xmlGvyData&#xA;        def processCall = ''&#xA;        def cmisActnList = ''&#xA;        try&#xA;        {&#xA;            def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;            def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;&#xA;            def updtDportFlag = gvyEventUtil.wasFieldChanged(event, &quot;gdsDestination&quot;)&#xA;            def updtObCarrierFlag = gvyEventUtil.wasFieldChanged(event, &quot;ufvIntendedObCv&quot;)&#xA;            def updtChasTypeReqFlag = gvyEventUtil.wasFieldChanged(event,&quot;UfvFlexString02&quot;)&#xA;            def updtReleaseToPartyFlag = gvyEventUtil.wasFieldChanged(event, &quot;UnitFlexString02&quot;)&#xA;            def updtdischPort = gvyEventUtil.wasFieldChanged(event,'rtgPOD1')&#xA;&#xA;            def updateUCCFlag = gvyEventUtil.wasFieldChanged(event, &quot;UnitFlexString15&quot;);&#xA;            def updateECCFlag = gvyEventUtil.wasFieldChanged(event,&quot;UfvFlexString08&quot;);&#xA;&#xA;&#xA;            updtcategory = gvyEventUtil.wasFieldChanged(event, &quot;unitCategory&quot;)&#xA;            prevCategory = gvyEventUtil.getPreviousPropertyAsString(event, &quot;unitCategory&quot;)&#xA;&#xA;            def intdObCarrierId=unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;)&#xA;            intdObCarrierId = intdObCarrierId != null ? intdObCarrierId : ''&#xA;            boolean postObCarrierMsg =  (intdObCarrierId.equals('GEN_TRUCK') || intdObCarrierId.equals('GEN_VESSEL')&#xA;                    || intdObCarrierId.equals('GEN_CARRIER')) ? false : true&#xA;&#xA;            locationStatus = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;locationStatus=&quot;)&#xA;            //def destination = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;dPort=&quot;)&#xA;            //Changed the Destination to Discharge Port&#xA;            def dischPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;            dischPort = dischPort != null ? dischPort : ''&#xA;&#xA;            println('locationStatus ::'+locationStatus+'     dischPort::'+dischPort)&#xA;&#xA;            //Check to see if UNIT_PROPERTY_UPDATE call&#xA;            if(cmisActionList != null){&#xA;                processCall=&quot;UNIT_PROPERTY_UPDATE&quot;&#xA;                cmisActnList = cmisActionList&#xA;            }else{&#xA;                processCall=&quot;UNIT_REROUTE&quot;&#xA;                cmisActnList = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisListAction&quot;);&#xA;            }&#xA;&#xA;            //Check For Detention Msg&#xA;            println(&quot;Detention MSG :::&quot;+detnMsg)&#xA;            if(detnMsg)&#xA;            {&#xA;                cmisActnList.setActionList(&quot;FREE&quot;)&#xA;                //cmisActnList.setActionList(&quot;EDT&quot;)&#xA;            }&#xA;&#xA;            //1] processOBCarrierChange 2] processDischPortChange 3] processChasTypeReqChange 4] processReleaseToParty&#xA;            if(updtdischPort)&#xA;            {&#xA;                //DestPort Changes&#xA;                xmlGvyString = processDischPortChange(xmlGvyString,gvyBaseClass,event,unit,gvyEventUtil,gvyCmisUtil,dischPort,locationStatus,cmisActnList)&#xA;            }&#xA;            else if(updtReleaseToPartyFlag || updtcategory || updateECCFlag || updateUCCFlag)&#xA;            {&#xA;                cmisActnList.setActionList(&quot;EDT&quot;)&#xA;            }&#xA;            //DISCH_PORT=HON and LOCSTAT=7&#xA;            if(updtdischPort &amp;&amp; dischPort.equals(ContextHelper.getThreadFacility().getFcyId()) &amp;&amp; locationStatus.equals('7'))&#xA;            {&#xA;                //SED RECORD&#xA;                cmisActnList.setActionList(&quot;SED&quot;)&#xA;            }&#xA;            if(updtObCarrierFlag &amp;&amp; postObCarrierMsg)&#xA;            {&#xA;                // OBCarrier Changes&#xA;                xmlGvyString = processOBCarrierChange(xmlGvyString, gvyBaseClass,gvyCmisUtil,cmisActnList)&#xA;            }&#xA;            if(updtChasTypeReqFlag)&#xA;            {&#xA;                //ACTION PMD - Updt Chassis Type&#xA;                cmisActnList.setActionList(&quot;PMR&quot;)&#xA;            }&#xA;            if(updtDportFlag){&#xA;                processDestinationPortChange(xmlGvyData,gvyBaseClass,gvyCmisUtil,locationStatus,cmisActnList)&#xA;            }&#xA;&#xA;            //Post Unit Reroute messages appending cmis action&#xA;            if(processCall.equals(&quot;UNIT_REROUTE&quot;))&#xA;            {&#xA;                //Post Cmis msg after appending the required action&#xA;                LinkedHashSet actionList = cmisActnList.getActionList();&#xA;                println(&quot;Inside of GvyCmisEventFeedUnitReroute.processUnitRerouteCmisFeed &quot;);&#xA;                println(&quot;Number of action to send in message is &quot;+actionList.size());&#xA;                println(&quot;actionList :::::&quot;+actionList.size())&#xA;                for(aAction in actionList)&#xA;                {&#xA;                    println(&quot;UNIT_REROUTE_ACTION_MSG_POSTING ::&quot;+aAction);&#xA;                    //gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,aAction)   //A2&#xA;                    gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,aAction, unit, event,gvyEventUtil)&#xA;                }&#xA;            }&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;    public String processOBCarrierChange(String xmlGvyData, Object gvyBaseClass,Object gvyCmisUtil, Object cmisActnList)&#xA;    {&#xA;        def xmlGvyString = xmlGvyData&#xA;        try&#xA;        {&#xA;            //OBCarrier Cmis Action   //A3&#xA;            cmisActnList.setActionList(&quot;AVL&quot;)&#xA;            //A5&#xA;            if(locationStatus.equals('1') || locationStatus.equals('6') || locationStatus.equals('4') ){&#xA;                cmisActnList.setActionList(&quot;BDC&quot;)&#xA;                xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;locationStallConfig=&quot;,&quot;AO&quot;)&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return xmlGvyString&#xA;    }&#xA;&#xA;    public void processDestinationPortChange(String xmlGvyData, Object gvyBaseClass,Object gvyCmisUtil,String locationStatus, Object cmisActnList)&#xA;    {&#xA;        def xmlGvyString = xmlGvyData&#xA;        try&#xA;        {&#xA;            cmisActnList.setActionList(&quot;BDC&quot;)&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;&#xA;    public String processDischPortChange(String xmlGvyData, Object gvyBaseClass, Object event, Object unit, Object gvyEventUtil, Object gvyCmisUtil,String dischargePort, String locationStatus,Object cmisActnList)&#xA;    {&#xA;        def xmlGvyString = xmlGvyData&#xA;        try&#xA;        {&#xA;            cmisActnList.setActionList(&quot;EDT&quot;)&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return xmlGvyString&#xA;    }//Method processDportChange Ends&#xA;&#xA;&#xA;    public static RoutingPoint findRoutingPoint(String inPointId)&#xA;    {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(&quot;RoutingPoint&quot;).addDqPredicate(PredicateFactory.eq(com.navis.argo.ArgoRefField.POINT_GKEY, inPointId)); //A4&#xA;        return (RoutingPoint)HibernateApi.getInstance().getUniqueEntityByDomainQuery(dq);&#xA;    }&#xA;}&#xA;" />
<digital-asset id="GvyCmisSrvMsgProcessor" short-description="GvyCmisSrvMsgProcessor" is-pre-deployed="N" groovy-code="import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.IServiceEventFieldChange&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.framework.util.ValueObject&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;&#xA;/*&#xA;* Sr  Doer Date        Chagne&#xA;* A1  GR   08/18/2010  SN4Q Change:IGT truck=ZZZZ&#xA;* A2  GR   08/21/2010  SN4Q Change:OGC truck=ZZZ,LS=3,pdisp=A&#xA;* A3  GR   08/30/2010  SN$Q Change:DAS(DTA) messages for ADD (SN4Q Change)&#xA;* A5  GR   09/02/10 -  Bad Condition on processEquiSrvCmisMsg() vesselLineOptr is never CLIENT(11/01/10)&#xA;* A6  GR   11/08/10    Pulling out Extra EDT from (clientToMatsonSrvMsg &amp; matsonToClientSrvMsg)&#xA;* A7  GR   12/10/10    Update OPL to POL&#xA;* A8  GR   04/15/11    Added UNIT_REROUTE to the SRV msg list&#xA;* A9  GR   09/18/11    ON CLIENT INGATE Set vesvoy to OB vessel TT#12857&#xA;* A10  GR  10/30/11   TOS2.1 Overwrite UNIT_DISCH_COMPLETE with UNIT_DISCH&#xA;* A11  GR  01/03/12   Fixed setVesvoyFields Method&#xA;* A101 KR   11/02/16  clientToMatsonSrvMsg to use Booking and Event data for vessel, voyage, leg&#xA;*/&#xA;&#xA;public class GvyCmisSrvMsgProcessor {&#xA;    private static final Logger LOGGER = Logger.getLogger(GvyCmisSrvMsgProcessor.class);&#xA;    def equipFlex01 = '';&#xA;    def vesselLineOptr = '';&#xA;    boolean edtMsgFlag = false;&#xA;    def locationStatus = ''&#xA;&#xA;    /* Method Processes the Service msg on the following events OUT_GATE_MESSAGE,UNIT_IN_GATE,UNIT_ROLL&#xA;     * The Service messages is generateed if the OB LineOperator and Equi Operator do not match on these events.&#xA;    */&#xA;&#xA;    public boolean processServiceMessage(String xmlData, Object event, Object gvyBaseClass) {&#xA;        processServiceMessage(xmlData, event, gvyBaseClass, Boolean.FALSE);&#xA;    }&#xA;&#xA;    public boolean processServiceMessage(String xmlData, Object event, Object gvyBaseClass, boolean isAlwaysSendIGT) {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        def xmlGvyString = xmlData&#xA;        try {&#xA;            def unit = event.getEntity()&#xA;            def gvyEventObj = event.getEvent()&#xA;            String eventType = gvyEventObj.getEventTypeId()&#xA;            LOGGER.info(&quot;EventType  &quot;+eventType+&quot;   isAlwaysSendIGT &quot;+isAlwaysSendIGT);&#xA;            def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;&#xA;            def freightkind = unit.getFieldValue(&quot;unitFreightKind&quot;)&#xA;            freightkind = freightkind != null ? freightkind.getKey() : ''&#xA;&#xA;            def unitBkgNbr = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;)&#xA;            unitBkgNbr = unitBkgNbr != null ? unitBkgNbr : ''&#xA;&#xA;            def portOfLoad = unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;);   //A7&#xA;            portOfLoad = portOfLoad != null ? portOfLoad : ''&#xA;            //def isNisLoadPort = gvyCmisUtil.isNISPort(portOfLoad)&#xA;&#xA;            //Get Equi SRV&#xA;            def unitEquipment = unit.getUnitPrimaryUe()&#xA;            def ueEquipmentState = unitEquipment.getUeEquipmentState()&#xA;            equipFlex01 = ueEquipmentState != null ? ueEquipmentState.getEqsFlexString01() : ''&#xA;            /**&#xA;             * Preserving old values in old tag for&#xA;             */&#xA;&#xA;            def oldEquipFlex01 = equipFlex01;&#xA;            def oldPortOfLoad = portOfLoad;&#xA;            def oldUnitBkgNbr = unitBkgNbr;&#xA;&#xA;            if (eventType.equals('UNIT_ROLL')) {&#xA;                Booking booking = findBookingFromEventChanges(gvyEventObj, unit);&#xA;                if (booking != null) {&#xA;                    equipFlex01 = getNewEqFlexString01(booking);&#xA;                    portOfLoad = booking.getEqoPol().getPointId();&#xA;                    unitBkgNbr = booking.getEqboNbr();&#xA;                }&#xA;                //freightkind is not changed, as the ROLL should not change it&#xA;                LOGGER.info(&quot;For UNIT_ROLL ueEquipmentState.getEqsFlexString01() value from event is &quot; + equipFlex01);&#xA;            }&#xA;&#xA;            //set location status value&#xA;            getLocationStatus(unit)&#xA;&#xA;            //Departed unit Obj&#xA;            def deptUnit = getDepartedUnit(gvyBaseClass, unit)&#xA;            def deptUnitBkgnbr = getDepartedUnitBkgNum(gvyBaseClass, unit, deptUnit)&#xA;            def deptUnitPOD = deptUnit != null ? deptUnit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;) : ''&#xA;            //def deptUnitIsNisPOD = gvyCmisUtil.isNISPort(deptUnitPOD)&#xA;&#xA;            /*  if(eventType.equals('UNIT_DELIVER') &amp;&amp; freightkind.equals('MTY') &amp;&amp; unitBkgNbr != null)&#xA;              {&#xA;                processEquiSrvCmisMsg(xmlGvyString,gvyCmisUtil,unit,event,gvyBaseClass,eventType)&#xA;              } */&#xA;            //Ckeck Client Unit for MTY Freight Kind and Last Departed unit Dport as NIS&#xA;            LOGGER.info(&quot;Event type : &quot;+eventType + &quot;, equipFlex01 : &quot; + equipFlex01 + &quot;, freightkind : &quot; +freightkind);&#xA;            if (eventType.equals('UNIT_IN_GATE') &amp;&amp; equipFlex01.startsWith(&quot;CLI&quot;) &amp;&amp; freightkind.equals('MTY') /*&amp;&amp; deptUnitIsNisPOD*/) {&#xA;                def xmlGvyCliString = gvyCmisUtil.eventSpecificFieldValue(xmlData, &quot;locationStallConfig=&quot;, &quot;AO&quot;)&#xA;                gvyCmisUtil.postMsgForAction(xmlGvyCliString, gvyBaseClass, &quot;DEL&quot;)&#xA;                //A7 -- gvyCmisUtil.postMsgForAction(xmlGvyCliString,gvyBaseClass,&quot;EDT&quot;)&#xA;                edtMsgFlag = true&#xA;            }&#xA;            //else if(eventType.equals('UNIT_IN_GATE') &amp;&amp; !unitBkgNbr.equals(deptUnitBkgnbr))&#xA;            else if (eventType.equals('UNIT_IN_GATE')) {&#xA;                if (freightkind.equals('MTY') &amp;&amp; equipFlex01.startsWith(&quot;CLI&quot;) &amp;&amp; (!portOfLoad.equals(ContextHelper.getThreadFacility().getFcyId()) /*&amp;&amp; isNisLoadPort*/)) {&#xA;                    processEquiSrvClientUnit(xmlGvyString, gvyCmisUtil, unit, event, gvyBaseClass, eventType)&#xA;                } else {&#xA;                    processEquiSrvCmisMsg(xmlGvyString, gvyCmisUtil, unit, event, gvyBaseClass, eventType)&#xA;                }&#xA;            } else if (eventType.equals('UNIT_ROLL') || eventType.equals('UNIT_REROUTE')) //A4&#xA;            {&#xA;                /**&#xA;                 * for UNIT_ROLL this part of code to use old values (same for UNIT_REROUTE)&#xA;                 */&#xA;                LOGGER.info(&quot;Triggering &quot;+eventType+&quot; with isAlwaysSendIGT as &quot;+isAlwaysSendIGT);&#xA;                LOGGER.info(&quot;FreighKind &quot;+freightkind+&quot; oldEquipFlex01 &quot;+oldEquipFlex01+&quot; oldPortOfLoad &quot;+oldPortOfLoad);&#xA;                if (freightkind.equals('MTY') &amp;&amp; oldEquipFlex01.startsWith(&quot;CLI&quot;) &amp;&amp; (!oldPortOfLoad.equals(ContextHelper.getThreadFacility().getFcyId()) /*&amp;&amp; isNisLoadPort*/)) {&#xA;                    processEquiSrvClientUnit(xmlGvyString, gvyCmisUtil, unit, event, gvyBaseClass, eventType)&#xA;                } else {&#xA;                    LOGGER.info(eventType+&quot; triggering ingate with isAlwaysSendIGT as &quot;+isAlwaysSendIGT);&#xA;                    processEquiSrvCmisMsg(xmlGvyString, gvyCmisUtil, unit, event, gvyBaseClass, eventType, isAlwaysSendIGT)&#xA;                }&#xA;            } else if (eventType.equals('UNIT_DISCH_COMPLETE')) {&#xA;                if (freightkind.equals('MTY') &amp;&amp; equipFlex01.startsWith(&quot;CLI&quot;) &amp;&amp; (!portOfLoad.equals(ContextHelper.getThreadFacility().getFcyId()) /*&amp;&amp; isNisLoadPort*/)) {&#xA;                    processEquiSrvClientUnit(xmlGvyString, gvyCmisUtil, unit, event, gvyBaseClass, eventType)&#xA;                }&#xA;            }&#xA;            println(&quot;SrvEventType:&quot; + eventType + &quot;  Freight Kind1:&quot; + freightkind + &quot;  unitBkgNbr:&quot; + unitBkgNbr + &quot;   deptUnitBkgnbr :&quot; + deptUnitBkgnbr + &quot;  Port of Load:&quot; + portOfLoad + &quot;   equipFlex01:&quot; + equipFlex01 + &quot;   vesselLineOptr:&quot; + vesselLineOptr + &quot; locationstatus  :&quot; + locationStatus + &quot; deptUnitPOD::&quot; + deptUnitPOD/*+&quot;   /*deptUnitIsNisPOD::&quot;+deptUnitIsNisPOD*/)&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return edtMsgFlag;&#xA;&#xA;    }//Process Method Ends&#xA;&#xA;    public void processEquiSrvCmisMsg(String xmlData, Object gvyCmisUtil, Object unit, Object event, Object gvyBaseClass, String eventType) {&#xA;        processEquiSrvCmisMsg(xmlData, gvyCmisUtil, unit, event, gvyBaseClass, eventType, Boolean.FALSE);&#xA;    }&#xA;    //Method generates Service messages if the OB LineOperator and Equi Operator do not match.&#xA;    public void processEquiSrvCmisMsg(String xmlData, Object gvyCmisUtil, Object unit, Object event, Object gvyBaseClass, String eventType, boolean  isAlwaysSendIGT) {&#xA;        try {&#xA;            def obLineOptChnged = null;&#xA;&#xA;            if (&quot;UNIT_ROLL&quot;.equals(eventType)) {&#xA;                verifyEqSrvObLineOperator(unit, eventType, event, gvyBaseClass);&#xA;            } else {&#xA;                verifyEqSrvObLineOperator(unit, eventType);&#xA;            }&#xA;            LOGGER.warn(&quot;obLineOptChnged : &quot;+obLineOptChnged);&#xA;            LOGGER.warn(&quot;isAlwaysSendIGT : &quot;+isAlwaysSendIGT);&#xA;            //If OB line Operator does not match the Equi Srv field&#xA;            if (obLineOptChnged || isAlwaysSendIGT) {&#xA;                //Client(EquiFlex01) to MAT(OB line Operator)&#xA;                LOGGER.warn(&quot;processEquiSrvCmisMsg==&gt; equipFlex01 : &quot;+equipFlex01 + &quot;, vesselLineOptr : &quot;+vesselLineOptr);&#xA;                if (equipFlex01.startsWith(&quot;CLI&quot;) &amp;&amp; vesselLineOptr.equals('MAT')) {&#xA;                    clientToMatsonSrvMsg(xmlData, gvyCmisUtil, unit, event, gvyBaseClass)&#xA;                }//MAT(OB line Operator) to Client(EquiFlex01)&#xA;                else if (equipFlex01.equals(&quot;MAT&quot;) &amp;&amp; vesselLineOptr.trim().length() &gt; 0 &amp;&amp; !vesselLineOptr.equals('MAT')) {&#xA;                    //A5&#xA;                    matsonToClientSrvMsg(xmlData, gvyCmisUtil, gvyBaseClass, unit)&#xA;                } else if (equipFlex01.equals(&quot;MAT&quot;) &amp;&amp; isAlwaysSendIGT) {&#xA;                    clientToMatsonSrvMsg(xmlData, gvyCmisUtil, unit, event, gvyBaseClass, Boolean.TRUE);&#xA;                } else {&#xA;                    println(&quot;IB/OB CARARIER IS SAME&quot;)&#xA;                    // gvyCmisUtil.postMsgForAction(xmlData,gvyBaseClass,&quot;EDT&quot;)&#xA;                }&#xA;            }/*else if((equipFlex01.equals(&quot;MAT&quot;) &amp;&amp; vesselLineOptr.equals('MAT')) || (equipFlex01.equals(&quot;CLIENT&quot;) &amp;&amp; vesselLineOptr.equals('CLIENT'))){&#xA;           //If OB line Operator equals Equi Srv field&#xA;          println(&quot;ELSE IF IB/OB CARARIER IS SAME&quot;)&#xA;           gvyCmisUtil.postMsgForAction(xmlData,gvyBaseClass,&quot;EDT&quot;)&#xA;       }*/&#xA;            println(&quot;obLineOptChnged :&quot; + obLineOptChnged + &quot;   equipFlex01:&quot; + equipFlex01 + &quot;   vesselLineOptr:&quot; + vesselLineOptr)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;    }//Method processEquiSrvCmisMsg Ends&#xA;&#xA;    //1] Verifies OB LineOperator and Equi Operator match.&#xA;    //2] Sets the EquiFlex01 and VesselLineOptr as class variables&#xA;    public boolean verifyEqSrvObLineOperator(Object unit, String eventType) {&#xA;        boolean srvChanged = false&#xA;        try {&#xA;&#xA;            if (eventType.equals('UNIT_DELIVER')) {&#xA;                vesselLineOptr = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqoVesselVisit.cvCvd.vvdBizu.bzuId&quot;)&#xA;            } else if (eventType.equals('UNIT_DISCH_COMPLETE')) {&#xA;                vesselLineOptr = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdBizu.bzuId&quot;)&#xA;            } else {&#xA;                vesselLineOptr = unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvCvd.vvdBizu.bzuId&quot;)&#xA;            }&#xA;            vesselLineOptr = vesselLineOptr != null ? vesselLineOptr : ''&#xA;            //SRV Check&#xA;            LOGGER.warn(&quot;equipFlex01: &quot;+equipFlex01 + &quot;, vesselLineOptr : &quot;+vesselLineOptr);&#xA;            if (!equipFlex01.equals(vesselLineOptr)) {&#xA;                srvChanged = true&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        LOGGER.warn(&quot;Service Changed : &quot;+srvChanged);&#xA;        return srvChanged&#xA;    }//Method srvMessageCheck&#xA;&#xA;    public boolean verifyEqSrvObLineOperator(Object unit, String eventType, GroovyEvent event, Object gvyBaseClass) {&#xA;        boolean srvChanged = false&#xA;        try {&#xA;            LOGGER.info(&quot;Finding vessel line operator in Event : &quot;+eventType);&#xA;            if (eventType.equals('UNIT_DELIVER')) {&#xA;                vesselLineOptr = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqoVesselVisit.cvCvd.vvdBizu.bzuId&quot;)&#xA;            } else if (eventType.equals('UNIT_DISCH_COMPLETE')) {&#xA;                vesselLineOptr = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCvd.vvdBizu.bzuId&quot;)&#xA;            } else {&#xA;                //def bookingGroovy = gvyBaseClass.getGroovyClassInstance(&quot;MATSyncUnitFlexWithBooking&quot;);&#xA;                LOGGER.info(&quot;Finding vessel line operator : &quot;+event);&#xA;                if (event != null &amp;&amp; event.getEvent() != null) {&#xA;                    Booking booking = findBookingFromEventChanges(event.getEvent(), unit);&#xA;                    LOGGER.info(&quot;Booking from Srv processor : &quot;+booking);&#xA;                    if (booking != null) {&#xA;                        vesselLineOptr = booking.getEqoVesselVisit().getCarrierOperator().getBzuId();&#xA;                        LOGGER.info(&quot;Found line Operator : &quot; + vesselLineOptr);&#xA;                    } else if (booking == null) {&#xA;                        vesselLineOptr = unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvCvd.vvdBizu.bzuId&quot;);&#xA;                        LOGGER.info(&quot;No booking found, setting line operator to &quot; + vesselLineOptr);&#xA;                    }&#xA;                }&#xA;            }&#xA;            vesselLineOptr = vesselLineOptr != null ? vesselLineOptr : ''&#xA;            //SRV Check&#xA;            LOGGER.warn(&quot;equipFlex01: &quot;+equipFlex01 + &quot;, vesselLineOptr : &quot;+vesselLineOptr);&#xA;            if (!equipFlex01.equals(vesselLineOptr)) {&#xA;                srvChanged = true&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        LOGGER.warn(&quot;Service Changed : &quot;+srvChanged);&#xA;        return srvChanged&#xA;    }&#xA;&#xA;    public void clientToMatsonSrvMsg(String xmlData, Object gvyCmisUtil, Object unit, Object event, Object gvyBaseClass, Boolean isComputeFromBooking) {&#xA;        LOGGER.info(&quot;Execute only if IGT true&quot;);&#xA;        def xmlGvyString = xmlData&#xA;        try {&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;srv=&quot;, &quot;MAT&quot;)&#xA;            //def locationStatus = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;locationStatus=&quot;)&#xA;            def xmlSrvCmisMsg = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;locationStallConfig=&quot;, &quot;AO&quot;)&#xA;            xmlSrvCmisMsg = gvyCmisUtil.eventSpecificFieldValue(xmlSrvCmisMsg, &quot;truck=&quot;, &quot;ZZZZ&quot;)&#xA;&#xA;            LOGGER.info(&quot;locationStatus : &quot; + locationStatus);&#xA;            if (locationStatus.equals(&quot;1&quot;)) {&#xA;                xmlSrvCmisMsg = gvyCmisUtil.eventSpecificFieldValue(xmlSrvCmisMsg, &quot;locationStatus=&quot;, &quot;3&quot;)&#xA;                gvyCmisUtil.postMsgForAction(xmlSrvCmisMsg, gvyBaseClass, &quot;ADD&quot;)&#xA;                LOGGER.info(&quot;event.event.eventTypeId : &quot; + event.event.eventTypeId);&#xA;                if (!'UNIT_IN_GATE'.equals(event.event.eventTypeId)) {&#xA;                    xmlSrvCmisMsg = gvyCmisUtil.eventSpecificFieldValue(xmlSrvCmisMsg, &quot;locationStatus=&quot;, &quot;1&quot;)&#xA;                    //A9 -- FOR CLI VESSEL&#xA;&#xA;                    def carrierId = unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;)&#xA;                    def obVesClass = unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;                    obVesClass = obVesClass != null ? obVesClass.getKey() : ''&#xA;&#xA;                    def bookingNumber = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;);&#xA;                    def freightkind = unit.getFieldValue(&quot;unitFreightKind&quot;);&#xA;                    def vesselCd = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdVessel.vesId&quot;);&#xA;                    freightkind = freightkind != null ? freightkind.getKey() : ''&#xA;                    Booking booking = null;&#xA;                    if (isComputeFromBooking) {&#xA;                        booking = findBookingFromEventChanges(event.getEvent(), unit);&#xA;                        if (booking != null) {&#xA;                        carrierId = booking.getEqoVesselVisit().getCvId();&#xA;                        obVesClass = booking.getEqoVesselVisit().getCarrierVesselClassType();&#xA;                        obVesClass = obVesClass != null ? obVesClass.getKey() : ''&#xA;                        bookingNumber = booking.getEqboNbr();&#xA;                            /**&#xA;                             * Override the consignee and shippper&#xA;                             */&#xA;                            def consignee = booking.getConsigneeAsString();&#xA;                            def cneeCode = booking.getEqoConsignee().getBzuId();&#xA;                            if (consignee != null)&#xA;                                xmlSrvCmisMsg = gvyCmisUtil.eventSpecificFieldValue(xmlSrvCmisMsg, 'consignee', consignee);&#xA;                            if (cneeCode != null)&#xA;                                xmlSrvCmisMsg = gvyCmisUtil.eventSpecificFieldValue(xmlSrvCmisMsg, 'cneeCode', cneeCode);&#xA;&#xA;                        }&#xA;                    }&#xA;                    /**&#xA;                     * This is where we're setting vessel, voyage,  leg as first point&#xA;                     */&#xA;                    xmlSrvCmisMsg = gvyCmisUtil.setVesvoyFields(unit, xmlSrvCmisMsg, carrierId, obVesClass) //A11&#xA;                    if (bookingNumber != null &amp;&amp; carrierId != null &amp;&amp; freightkind != null &amp;&amp; (freightkind.equals('MTY'))) {&#xA;                        def vesVoyageNbr = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdObVygNbr&quot;)&#xA;                        if(isComputeFromBooking){&#xA;                            VesselVisitDetails vvd = VesselVisitDetails.resolveVvdFromCv(booking.getEqoVesselVisit());&#xA;                            vesVoyageNbr = vvd.getVvdObVygNbr();&#xA;                            vesselCd = vvd.getVvdVessel().getVesId();&#xA;                        }&#xA;                        def unitReceiveObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventUnitReceive&quot;);&#xA;                        if (isComputeFromBooking){&#xA;                            // the value for actual vessel, voyage, leg set by  gvyCmisUtil.setVesvoyFields(unit, xmlSrvCmisMsg, carrierId, obVesClass) is overridden here based on booking&#xA;                            xmlSrvCmisMsg = unitReceiveObj.processUnitRecieveFull(xmlSrvCmisMsg, gvyCmisUtil, vesselCd, vesVoyageNbr, unit, booking,isComputeFromBooking);&#xA;                        }&#xA;                        else&#xA;                            xmlSrvCmisMsg = unitReceiveObj.processUnitRecieveFull(xmlSrvCmisMsg, gvyCmisUtil, carrierId, vesVoyageNbr, unit);&#xA;                    }&#xA;&#xA;                    LOGGER.warn(&quot;Triggering IGT now&quot;);&#xA;                    gvyCmisUtil.postMsgForAction(xmlSrvCmisMsg, gvyBaseClass, &quot;IGT&quot;) //A1 For unitRoll&#xA;                }&#xA;            } else {&#xA;                gvyCmisUtil.postMsgForAction(xmlSrvCmisMsg, gvyBaseClass, &quot;ADD&quot;)&#xA;            }&#xA;&#xA;            //A3&#xA;            def dischPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;            dischPort = dischPort != null ? dischPort : ''&#xA;            def ds = gvyCmisUtil.getFieldValues(xmlSrvCmisMsg, &quot;ds=&quot;);&#xA;&#xA;            if (&quot;CY&quot;.equals(ds) &amp;&amp; ContextHelper.getThreadFacility().getFcyId().equals(dischPort)) {&#xA;                gvyCmisUtil.postMsgForAction(xmlSrvCmisMsg, gvyBaseClass, &quot;DTA&quot;)&#xA;            }&#xA;            //getAllActive Holds and Recreate the Holds Records with ALT &amp; HLR&#xA;            def gvyCommentsObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisCommentNotesField&quot;)&#xA;            def gvyStripObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventUnitStrip&quot;)&#xA;            def holds = gvyCommentsObj.getUnitActiveHolds(unit)&#xA;            def unitHolds = holds != null ? holds : ''&#xA;            def holdsList = unitHolds.length() &gt; 0 ? unitHolds.split(' ') : []&#xA;            for (aHold in holdsList) {&#xA;                println(&quot;aHold &gt;&gt;&gt;&gt;&quot; + aHold)&#xA;                if (aHold.equals('CG') || aHold.equals('RD')) {&#xA;                    aHold = aHold.equals('CG') ? 'CG_INSP' : (aHold.equals('RD') ? 'OUTGATE' : aHold)&#xA;                }&#xA;                def xmlGvyHold = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;msgType=&quot;, aHold + '_HOLD')&#xA;                gvyCmisUtil.postMsgForAction(xmlGvyHold, gvyBaseClass, &quot;HLP&quot;)&#xA;                gvyCmisUtil.postMsgForAction(xmlGvyHold, gvyBaseClass, &quot;ALT&quot;)&#xA;            }&#xA;            //EDT&#xA;            //-A7 gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,&quot;EDT&quot;)&#xA;            edtMsgFlag = true&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;    //Client to Matson Service Cmis Messages also cerating the Release events on active Holds&#xA;    public void clientToMatsonSrvMsg(String xmlData, Object gvyCmisUtil, Object unit, Object event, Object gvyBaseClass) {&#xA;        clientToMatsonSrvMsg(xmlData,gvyCmisUtil,unit,event,gvyBaseClass,Boolean.FALSE);&#xA;    }&#xA;&#xA;    //Matson to Client Service Cmis Messages&#xA;    public void matsonToClientSrvMsg(String xmlData, Object gvyCmisUtil, Object gvyBaseClass, Object unit) {&#xA;        def xmlGvyString = xmlData&#xA;        try {&#xA;            //MAT to Client&#xA;            def unitLineOperator = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOperator.bzuId&quot;)&#xA;            unitLineOperator = unitLineOperator != null ? unitLineOperator : ''&#xA;&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;srv=&quot;, unitLineOperator)&#xA;            def xmlSrvCmisMsg = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;locationStallConfig=&quot;, &quot;AO&quot;)&#xA;&#xA;            if (locationStatus.equals(&quot;1&quot;)) {&#xA;                //A2&#xA;                xmlSrvCmisMsg = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;truck=&quot;, &quot;ZZZZ&quot;)&#xA;                xmlSrvCmisMsg = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;locationStatus=&quot;, &quot;3&quot;)&#xA;                xmlSrvCmisMsg = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;planDisp=&quot;, &quot;A&quot;)&#xA;                gvyCmisUtil.postMsgForAction(xmlSrvCmisMsg, gvyBaseClass, &quot;PDU&quot;)&#xA;                gvyCmisUtil.postMsgForAction(xmlSrvCmisMsg, gvyBaseClass, &quot;OGC&quot;)&#xA;                //A7-gvyCmisUtil.postMsgForAction(xmlSrvCmisMsg,gvyBaseClass,&quot;EDT&quot;)&#xA;                edtMsgFlag = true&#xA;            } else {&#xA;                gvyCmisUtil.postMsgForAction(xmlSrvCmisMsg, gvyBaseClass, &quot;DEL&quot;)&#xA;                //A7-- gvyCmisUtil.postMsgForAction(xmlSrvCmisMsg,gvyBaseClass,&quot;EDT&quot;)&#xA;                edtMsgFlag = true&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;    //Method Returns the Departed units Booking Number&#xA;    public String getDepartedUnitBkgNum(Object gvyBaseClass, Object unit, Object departedUnit) {&#xA;        def deptUnitBkgNbr = ''&#xA;        try {&#xA;            if (departedUnit != null) {&#xA;                def deptUnitLocType = departedUnit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;                deptUnitLocType = deptUnitLocType != null ? deptUnitLocType.getKey() : ''&#xA;&#xA;                if (deptUnitLocType.equals('TRUCK')) {&#xA;                    deptUnitBkgNbr = departedUnit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;)&#xA;                }&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return deptUnitBkgNbr&#xA;    }//Method Ends&#xA;&#xA;//  def def updtObCarrFlag = gvyEventUtil.wasFieldChanged(event, &quot;ufvIntendedObCv&quot;)&#xA;&#xA;//UNIT_DISCH CONDITION&#xA;&#xA;//Method generates Service messages if the OB LineOperator and Equi Operator do not match.&#xA;    public void processEquiSrvClientUnit(String xmlData, Object gvyCmisUtil, Object unit, Object event, Object gvyBaseClass, String eventType) {&#xA;        try {&#xA;            def obLineOptChnged = verifyEqSrvObLineOperator(unit, eventType)&#xA;            //If OB line Operator does not match the Equi Srv field&#xA;            if (obLineOptChnged) {&#xA;                //Client(EquiFlex01) to MAT(OB line Operator)&#xA;                def xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlData, &quot;locationStallConfig=&quot;, &quot;AO&quot;)&#xA;                if (equipFlex01.startsWith(&quot;CLI&quot;) &amp;&amp; vesselLineOptr.equals('MAT')) {&#xA;                    xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;srv=&quot;, &quot;MAT&quot;)&#xA;                    gvyCmisUtil.postMsgForAction(xmlGvyString, gvyBaseClass, &quot;DEL&quot;)&#xA;                    gvyCmisUtil.postMsgForAction(xmlGvyString, gvyBaseClass, &quot;EDT&quot;)&#xA;                    edtMsgFlag = true&#xA;                }//MAT(OB line Operator) to Client(EquiFlex01)&#xA;            }&#xA;            /*  else if (equipFlex01.equals(&quot;CLIENT&quot;) &amp;&amp; vesselLineOptr.equals('CLIENT'))&#xA;              {&#xA;                  gvyCmisUtil.postMsgForAction(xmlData,gvyBaseClass,&quot;EDT&quot;)&#xA;                  edtMsgFlag = true&#xA;               } */&#xA;            println(&quot;processEquiSrvClientUnit :: obLineOptChnged:&quot; + obLineOptChnged + &quot;   equipFlex01:&quot; + equipFlex01 + &quot;   vesselLineOptr:&quot; + vesselLineOptr)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;    }//Method processEquiSrvCmisMsg Ends&#xA;&#xA;    public void getLocationStatus(Object unit) {&#xA;        def lkpLocType = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;        def transitState = unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;        transitState = transitState != null ? transitState.getKey() : ''&#xA;        lkpLocType = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;        locationStatus = lkpLocType.equals('YARD') || (lkpLocType.equals('TRUCK') &amp;&amp; transitState.equals('S30_ECIN')) ? '1' : ''&#xA;    }&#xA;&#xA;    public Object getDepartedUnit(Object gvyBaseClass, Object unit) {&#xA;        def departedUnit = null;&#xA;        try {&#xA;            //Depparted Unit&#xA;            def gvyGateObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisGateData&quot;);&#xA;            departedUnit = gvyGateObj.getDepatedUnit(unit)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return departedUnit&#xA;    }&#xA;&#xA;    public Booking findBookingFromEventChanges(Event event, Unit ThisUnit) {&#xA;        Booking  booking = null;&#xA;        Iterator fcIt = event.getFieldChanges().iterator();&#xA;        String eqboNbr = null;&#xA;        String eqboVisit = null;&#xA;        String eqboDclrdVisit = null;&#xA;        while(fcIt.hasNext()) {&#xA;            IServiceEventFieldChange fc = (IServiceEventFieldChange)fcIt.next();&#xA;            MetafieldId metafieldId = MetafieldIdFactory.valueOf(fc.getMetafieldId());&#xA;            /*fcVao.setFieldValue(ArgoBizMetafield.EVENT_FIELD_CHANGE_METAFIELD_ID, metafieldId);&#xA;            fcVao.setFieldValue(ArgoBizMetafield.EVENT_FIELD_CHANGE_PREV_VALUE, ThisEvent.getFieldChangeValue(metafieldId, fc.getPrevVal()));&#xA;            fcVao.setFieldValue(ArgoBizMetafield.EVENT_FIELD_CHANGE_NEW_VALUE, ThisEvent.getFieldChangeValue(metafieldId, fc.getNewVal()));*/&#xA;&#xA;            if (InventoryField.EQBO_NBR.equals(metafieldId)) {&#xA;                eqboNbr = event.getFieldChangeValue(metafieldId, fc.getNewVal()).toString();&#xA;            }&#xA;            if (InventoryField.UFV_INTENDED_OB_CV.equals(metafieldId)) {&#xA;                eqboVisit = event.getFieldChangeValue(metafieldId, fc.getNewVal()).toString();&#xA;            }&#xA;            if (InventoryField.RTG_DECLARED_CV.equals(metafieldId)) {&#xA;                eqboDclrdVisit = event.getFieldChangeValue(metafieldId, fc.getNewVal()).toString();&#xA;            }&#xA;        }&#xA;        if (eqboVisit == null) {&#xA;            eqboVisit = eqboDclrdVisit;&#xA;        }&#xA;        if (eqboNbr != null &amp;&amp; eqboVisit != null) {&#xA;            LOGGER.info(&quot;eqboNBR : &quot;+eqboNbr + &quot; // eqboVisit : &quot;+eqboVisit);&#xA;            CarrierVisit cv = CarrierVisit.findVesselVisit(ContextHelper.getThreadFacility(), eqboVisit);&#xA;            booking = Booking.findBooking(eqboNbr, ThisUnit.getUnitLineOperator(), cv);&#xA;            if (booking == null) {&#xA;                try {&#xA;                    booking = Booking.findBookingWithoutLine(eqboNbr, cv);&#xA;                } catch (Exception e) {&#xA;                    LOGGER.error(&quot;Couldnt find the booking with eqboNbr and Visit&quot;);&#xA;                }&#xA;            }&#xA;            if (booking == null) {&#xA;                try {&#xA;                    booking = Booking.findBookingsByNbr(eqboNbr);&#xA;                } catch (Exception e) {&#xA;                    LOGGER.error(&quot;Couldnt find the booking only with eqboNbr&quot;);&#xA;                }&#xA;            }&#xA;        }&#xA;        return booking;&#xA;    }&#xA;    /**&#xA;     * Called only by UNIT_ROLL Logic to determine new EqFlexString01&#xA;     * @param thisBooking&#xA;     * @return&#xA;     */&#xA;    public String getNewEqFlexString01(Booking thisBooking) {&#xA;&#xA;        String VesselLineOperator = thisBooking.getEqoVesselVisit().getCarrierOperator().getBzuId();&#xA;        if (VesselLineOperator != null) {&#xA;            if ('MAT'.equalsIgnoreCase(VesselLineOperator))&#xA;                return 'MAT';&#xA;            else&#xA;                return 'CLI';&#xA;        } else&#xA;            return 'CLI';&#xA;&#xA;    }&#xA;&#xA;}// Class Ends" />
<digital-asset id="GvyCmisCargoEditUnitReroute" short-description="GvyCmisCargoEditUnitReroute" is-pre-deployed="N" groovy-code="/*&#xA;* A1   KR    07/09/15  Alaska Ports&#xA;*/&#xA;&#xA;&#xA;public class GvyCmisCargoEditUnitReroute {&#xA;    @SuppressWarnings(&quot;GroovyUnusedAssignment&quot;)&#xA;    public Object processUnitRerouteCmisFeed(String xmlGvyData, Object gvyBaseClass, Object event, Object unit, Object cmisActionList, boolean detnMsg, String prevDischPort) {&#xA;        def xmlGvyString = xmlGvyData&#xA;        def processCall = ''&#xA;        def cmisActnList = ''&#xA;        try {&#xA;            def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;            def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;&#xA;            def updtDportFlag = false; def updtdischPort = false;&#xA;            def destination = unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;)&#xA;            destination = destination != null ? destination : ''&#xA;            def dischPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;            dischPort = dischPort != null ? dischPort : ''&#xA;&#xA;            def lkpLocType = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;            def lkpLocTypeKey = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;&#xA;            def lkpCarrierId = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocId&quot;)&#xA;            lkpCarrierId = lkpCarrierId != null ? lkpCarrierId : ''&#xA;&#xA;            def _transitState = unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;            def transitStateKey = _transitState != null ? _transitState.getKey() : ''&#xA;&#xA;            def _category = unit.getFieldValue(&quot;unitCategory&quot;)&#xA;            def categoryKey = _category != null ? _category.getKey() : ''&#xA;&#xA;            def prevDest = gvyEventUtil.getPreviousPropertyAsString(event, &quot;gdsDestination&quot;)&#xA;            if (!destination.equals(prevDest)) {&#xA;                updtDportFlag = true;&#xA;            }&#xA;&#xA;            if (!dischPort.equals(prevDischPort)) {&#xA;                updtdischPort = true;&#xA;            }&#xA;&#xA;            def gvyPositionDetail = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisPositionDetail&quot;);&#xA;            def locationStatus = gvyPositionDetail.getLocationStatus(lkpLocTypeKey, lkpCarrierId, transitStateKey, gvyCmisUtil, categoryKey, dischPort)&#xA;            println('destination ::' + destination + '   locationStatus ::' + locationStatus + '    dischPort::' + dischPort)&#xA;&#xA;            //Check to see if UNIT_PROPERTY_UPDATE call&#xA;            if (cmisActionList != null) {&#xA;                processCall = &quot;CARGO_EDIT&quot;&#xA;                cmisActnList = cmisActionList&#xA;            }&#xA;&#xA;            //Check For Detention Msg&#xA;            println(&quot;Detention MSG :::&quot; + detnMsg)&#xA;            if (detnMsg) {&#xA;                cmisActnList.setActionList(&quot;FREE&quot;)&#xA;                //cmisActnList.setActionList(&quot;EDT&quot;)&#xA;            }&#xA;&#xA;            //1] processOBCarrierChange 2] processDischPortChange 3] processChasTypeReqChange 4] processReleaseToParty&#xA;            if (updtdischPort) {&#xA;                //DestPort Changes&#xA;                xmlGvyString = processDischPortChange(xmlGvyString, gvyBaseClass, event, unit, gvyEventUtil, gvyCmisUtil, dischPort, locationStatus, cmisActnList, prevDischPort)&#xA;            }&#xA;&#xA;            //DISCH_PORT=HON and LOCSTAT=7&#xA;            /*if(updtdischPort &amp;&amp; dischPort.equals('HON') &amp;&amp; locationStatus.equals('7'))&#xA;            {&#xA;             //SED RECORD&#xA;             cmisActnList.setActionList(&quot;SED&quot;)&#xA;            }*/&#xA;            if (updtDportFlag) {&#xA;                processDestinationPortChange(xmlGvyData, gvyBaseClass, gvyCmisUtil, locationStatus, cmisActnList)&#xA;            }&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;&#xA;    public void processDestinationPortChange(String xmlGvyData, Object gvyBaseClass, Object gvyCmisUtil, String locationStatus, Object cmisActnList) {&#xA;        def xmlGvyString = xmlGvyData&#xA;        try {&#xA;            cmisActnList.setActionList(&quot;BDC&quot;)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;&#xA;    public String processDischPortChange(String xmlGvyData, Object gvyBaseClass, Object event, Object unit, Object gvyEventUtil, Object gvyCmisUtil, String dischargePort, String locationStatus, Object cmisActnList, String previousDischPort) {&#xA;        try {&#xA;            cmisActnList.setActionList(&quot;EDT&quot;)&#xA;        }&#xA;        catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;        return xmlGvyString&#xA;    }//Method processDportChange Ends&#xA;&#xA;}" />
<digital-asset id="MatReportGateHourly" short-description="MatReportGateHourly" is-pre-deployed="N" groovy-code="/*&#xA;*  A1   GR &amp; Raghu Iyer  04/13/2012     Created Initial version for MTY gate consist reports&#xA;*                                       This report will fetch the data for all MAT container&#xA;*                                       which are created in past 6 weeks and group the data&#xA;*                                       based on equipment type for each day(Mon to Sun)&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.argo.ContextHelper;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.road.RoadField;&#xA;import com.navis.road.business.model.*;&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;&#xA;import java.text.DateFormat;&#xA;import java.text.SimpleDateFormat;&#xA;import java.util.Date;&#xA;import java.util.HashMap;&#xA;&#xA;&#xA;public class MatReportGateHourly extends GroovyInjectionBase&#xA;{&#xA;    //private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;    private String outBoundCarrierId = null&#xA;    def inj = null;&#xA;&#x9;String creater = null;&#xA;&#x9;HashMap classMap = new HashMap();&#xA;&#xA;&#x9;String startTime = null;&#xA;&#x9;String startDateHST = null;&#xA;&#x9;String endDateHST = null;&#xA;&#x9;String formattedDate = null;&#xA;&#x9;Date date = new Date();&#xA;&#xA;&#x9;String tranType = null;&#xA;&#x9;String printPier2Rpt = &quot;N&quot;;&#xA;    String printSIRpt = &quot;N&quot;;&#xA;&#x9;String subject = &quot;Attached report for Gate hourly transactions&quot;;&#xA;&#x9;String Pier2GateSubject = &quot; &quot;;&#xA;    String SIGateSubject = &quot; &quot;;&#xA;&#xA;&#xA;    public boolean execute(Map params)&#xA;    {&#xA;        try&#xA;        {&#xA;            println (&quot;Here : execute&quot;)&#xA;&#x9;&#x9;&#x9;//readGateHourSpreadsheet()&#xA;&#x9;&#x9;&#x9;println (&quot;Here : After excel read&quot;);&#xA;&#x9;&#x9;&#x9;inj = new GroovyInjectionBase();&#xA;&#xA;&#x9;&#x9;&#x9;println (&quot;Print Report&quot;)&#xA;&#x9;&#x9;    ArrayList Pier2GateList = new ArrayList();&#xA;            ArrayList SIGateList = new ArrayList();&#xA;&#x9;&#x9;&#x9;HashMap reportDesignsmap = new HashMap();&#xA;&#xA;            List trkTrans = getGateTrans();&#xA;            if(trkTrans == null){&#xA;                println(&quot;------------- NO REC ------------------&quot;);&#xA;                return;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;            Iterator iter = trkTrans.iterator();&#xA;&#xA;            while(iter.hasNext()) {&#xA;                def aTrans = iter.next();&#xA;                HashMap Pier2GateDataMap = populatePier2gateData(aTrans);&#xA;                if(Pier2GateDataMap != null) {&#xA;                    Pier2GateList.add(Pier2GateDataMap);&#xA;                }&#xA;            }&#xA;            println(&quot;Pier2GateList -------------------- :&quot;+ (Pier2GateList != null ? Pier2GateList.size() : &quot;EMPTY&quot;));&#xA;            iter = trkTrans.iterator();&#xA;            while(iter.hasNext()) {&#xA;                def aTrans = iter.next();&#xA;                HashMap SIGateDataMap = populateSIGateData(aTrans);&#xA;                if(SIGateDataMap != null) {&#xA;                    SIGateList.add(SIGateDataMap);&#xA;                }&#xA;            }&#xA;            println(&quot;SIGateList -------------------- :&quot;+ (SIGateList != null ? SIGateList.size() : &quot;EMPTY&quot;));&#xA;&#xA;            //Set Report Parameter&#xA;            HashMap parameters = new HashMap();&#xA;&#x9;&#x9;&#x9;println (&quot;printPier2Rpt &quot; + printPier2Rpt);&#xA;&#xA;&#x9;&#x9;&#x9;if (printPier2Rpt == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;            //Create and Mail Report&#xA;            JRDataSource ds = new JRMapCollectionDataSource(Pier2GateList);&#xA;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;PIER2 GATE HOURLY&quot;,ds);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Pier2GateSubject  = &quot;Note : No Pier2 Gate transaction found&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Pier2 Report Status ------- Nothing to report for this Hour&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#xA;            if (printSIRpt == &quot;Y&quot;)&#xA;            {&#xA;                //Create and Mail Report&#xA;                JRDataSource ds = new JRMapCollectionDataSource(SIGateList);&#xA;                reportDesignsmap.put(&quot;SI GATE HOURLY&quot;,ds);&#xA;            }&#xA;            else&#xA;            {&#xA;                SIGateSubject  = &quot;Note : No SI Gate transaction found&quot;;&#xA;                println(&quot;SI Report Status ------- Nothing to report for this Hour&quot;);&#xA;            }&#xA;&#xA;&#x9;&#x9;&#x9;if (printPier2Rpt == &quot;Y&quot; ||printSIRpt == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;&#x9;subject = subject + &quot;\n \n&quot; + Pier2GateSubject + &quot;\n \n&quot; + SIGateSubject;&#xA;&#x9;&#x9;&#x9;println (&quot;subject&quot; + subject);&#xA;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;            reportRunner.emailReports(reportDesignsmap, parameters,emailTo, &quot;Gate Hourly Activity Report&quot; ,subject);&#xA;&#x9;&#x9;&#x9;println(&quot;Report Status ------- Success&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Report Status ------- Nothing to report for this Hour&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;            e.printStackTrace();&#xA;            }&#xA;    }&#xA;&#xA;    //Maps the Pier2 gate data for the report&#xA;    public HashMap populateSIGateData(Object truckTrans)&#xA;    {&#xA;        HashMap map = null;&#xA;        try&#xA;        {&#xA;&#xA;            creater = truckTrans.tranCreator.toUpperCase();&#xA;&#xA;            if ((creater==&quot;GATE1&quot; || creater==&quot;GATE2&quot; || creater==&quot;GATE3&quot; || creater==&quot;GATE4&quot; || creater==&quot;GATE5&quot; || creater==&quot;GATE6&quot;) &amp;&amp;&#xA;                    (truckTrans.tranCtrTypeId != null))&#xA;            {&#xA;                if (truckTrans.tranCtrTypeId.substring(0,1) != &quot;C&quot;)&#xA;                {&#xA;&#xA;                    Date tranDate = truckTrans.tranCreated;&#xA;&#xA;                    DateFormat formatter = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);&#xA;                    formatter.setTimeZone(TimeZone.getTimeZone(&quot;HST&quot;));&#xA;&#xA;                    String Hour =formatter.format(tranDate).substring(11,13);&#xA;                    String currHour = formatter.format(date).substring(11,13);&#xA;                    String currMin = formatter.format(date).substring(14,16);&#xA;                    String reportHour = &quot;00:00 to &quot;+currHour+&quot;:&quot;+currMin ;&#xA;                    String currHourDisplay = currHour+&quot;:00 to &quot;+currHour+&quot;:59&quot;;&#xA;                    String FreightKind = null;&#xA;&#xA;                    if (Hour == currHour )&#xA;                    {&#xA;                        printSIRpt = &quot;Y&quot;;&#xA;                    }&#xA;&#xA;                    tranType = truckTrans.getTranSubType().getKey();&#xA;&#xA;                    if (tranType==&quot;DE&quot; || tranType==&quot;DI&quot;) {&#xA;                        tranType = &quot;OUTGATE LOAD&quot;;&#xA;                    }&#xA;                    else if (tranType==&quot;RE&quot; || tranType==&quot;RI&quot;) {&#xA;                        tranType = &quot;INGATE LOAD&quot;;&#xA;                    }&#xA;                    else if (tranType==&quot;DM&quot;) {&#xA;                        tranType = &quot;OUTGATE EMPTY&quot;;&#xA;                    }&#xA;                    else if (tranType==&quot;RM&quot; || tranType==&quot;DC&quot;) {&#xA;                        tranType = &quot;INGATE EMPTY&quot;;&#xA;                    }&#xA;                    Hour = Hour+&quot;:00 to &quot;+Hour+&quot;59&quot;;&#xA;&#xA;                    map = new HashMap();&#xA;&#xA;                    map.put(&quot;TranUnitId&quot;, truckTrans.tranCtrNbr);&#xA;                    map.put(&quot;TranCreated&quot;, truckTrans.tranCreated);&#xA;                    map.put(&quot;TranCtrFreightKind&quot;,FreightKind);&#xA;                    map.put(&quot;StageId&quot;, truckTrans.tranStageId);&#xA;                    map.put(&quot;TranCtrTypeId&quot;, truckTrans.tranCtrTypeId);&#xA;                    map.put(&quot;TranUnitFlexString01&quot;, Hour);&#xA;                    map.put(&quot;TranUnitFlexString02&quot;, formatter.format(tranDate).substring(11,13));&#xA;                    map.put(&quot;TranUnitFlexString03&quot;,currHourDisplay);&#xA;                    map.put(&quot;TranUnitFlexString04&quot;,currHour);&#xA;                    map.put(&quot;TranUnitFlexString05&quot;,reportHour);&#xA;                    map.put(&quot;TranUnitFlexString06&quot;,tranType);&#xA;                    map.put(&quot;TranUnitFlexString07&quot;,currHour+&quot;:&quot;+currMin);&#xA;                    map.put(&quot;TranUnitFlexString08&quot;,creater);&#xA;                    map.put(&quot;TranUnitFlexString09&quot;,truckTrans.tranLineId);&#xA;                    map.put(&quot;TranUnitFlexString10&quot;,truckTrans.getTranStatus().getKey());&#xA;&#xA;                }&#xA;            }&#xA;&#xA;        }catch(Exception e){&#xA;            println(&quot;Error in the report&quot;);&#xA;            e.printStackTrace();&#xA;        }&#xA;        return map;&#xA;    }&#xA;&#xA;//Maps the Pier2 gate data for the report&#xA;public HashMap populatePier2gateData(Object truckTrans)&#xA;    {&#xA;        HashMap map = null;&#xA;        try&#xA;        {&#xA;&#xA;creater = truckTrans.tranCreator.toUpperCase();&#xA;&#xA;  if ((creater==&quot;PIER2&quot;) &amp;&amp; &#x9;(truckTrans.tranCtrTypeId != null))&#xA;&#x9;{&#xA;&#x9;if (truckTrans.tranCtrTypeId.substring(0,1) != &quot;C&quot;)&#xA;&#x9;&#x9;{&#xA;&#xA;Date tranDate = truckTrans.tranCreated;&#xA;&#xA;DateFormat formatter = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);&#xA;formatter.setTimeZone(TimeZone.getTimeZone(&quot;HST&quot;));&#xA;&#xA;String Hour =formatter.format(tranDate).substring(11,13);&#xA;String currHour = formatter.format(date).substring(11,13);&#xA;String currMin = formatter.format(date).substring(14,16);&#xA;String reportHour = &quot;00:00 to &quot;+currHour+&quot;:&quot;+currMin;&#xA;String currHourDisplay = currHour+&quot;:00 to &quot;+currHour+&quot;:59&quot;;&#xA;String FreightKind = null;&#xA;&#xA;if (Hour == currHour )&#xA;{&#xA;&#x9;printPier2Rpt = &quot;Y&quot;;&#xA;}&#xA;&#xA;tranType = truckTrans.getTranSubType().getKey();&#xA;&#xA;if (tranType==&quot;DE&quot; || tranType==&quot;DI&quot;) {&#xA;&#x9;tranType = &quot;OUTGATE LOAD&quot;;&#xA;}&#xA;else if (tranType==&quot;RE&quot; || tranType==&quot;RI&quot;) {&#xA;&#x9;tranType = &quot;INGATE LOAD&quot;;&#xA;}&#xA;else if (tranType==&quot;DM&quot;) {&#xA;&#x9;tranType = &quot;OUTGATE EMPTY&quot;;&#xA;}&#xA;else if (tranType==&quot;RM&quot; || tranType==&quot;DC&quot;) {&#xA;&#x9;tranType = &quot;INGATE EMPTY&quot;;&#xA;}&#xA;&#x9;Hour = Hour+&quot;:00 to &quot;+Hour+&quot;59&quot;;&#xA;&#xA;&#x9;map = new HashMap();&#xA;&#xA;            map.put(&quot;TranUnitId&quot;, truckTrans.tranCtrNbr);&#xA;            map.put(&quot;TranCreated&quot;, truckTrans.tranCreated);&#xA;            map.put(&quot;TranCtrFreightKind&quot;,FreightKind);&#xA;            map.put(&quot;StageId&quot;, truckTrans.tranStageId);&#xA;            map.put(&quot;TranCtrTypeId&quot;, truckTrans.tranCtrTypeId);&#xA;            map.put(&quot;TranUnitFlexString01&quot;, Hour);&#xA;            map.put(&quot;TranUnitFlexString02&quot;, formatter.format(tranDate).substring(11,13));&#xA;            map.put(&quot;TranUnitFlexString03&quot;,currHourDisplay);&#xA;            map.put(&quot;TranUnitFlexString04&quot;,currHour);&#xA;            map.put(&quot;TranUnitFlexString05&quot;,reportHour);&#xA;            map.put(&quot;TranUnitFlexString06&quot;,tranType);&#xA;            map.put(&quot;TranUnitFlexString07&quot;,currHour+&quot;:&quot;+currMin);&#xA;            map.put(&quot;TranUnitFlexString08&quot;,creater);&#xA;            map.put(&quot;TranUnitFlexString09&quot;,truckTrans.tranLineId);&#xA;            map.put(&quot;TranUnitFlexString10&quot;,truckTrans.getTranStatus().getKey());&#xA;&#xA;&#x9;}&#xA;}&#xA;&#xA;        }catch(Exception e){&#xA;&#x9;&#x9;println(&quot;Error in the report&quot;);&#xA;          e.printStackTrace();&#xA;            }&#xA;        return map;&#xA;}&#xA;&#xA;public List getGateTrans()&#xA;{&#xA;&#xA;println(&quot; Inside DB Query &quot; + date);&#xA;&#xA;formattedDate = date.format('MM/dd/yyyy');&#xA;&#xA;startDateHST = formattedDate +&quot; &quot;+&quot;00:00:00 HST&quot;;//2012-07-19 00:00:00 HST&quot;;&#xA;endDateHST = formattedDate +&quot; &quot;+&quot;23:59:59 HST&quot;;//&quot;2012-07-19 23:59:59 HST&quot;;&#xA;&#xA;Date startDate = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss z&quot;, Locale.ENGLISH).parse(startDateHST);&#xA;println (&quot;PDT Start date time &quot; + startDate);&#xA;Date endDate = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss z&quot;, Locale.ENGLISH).parse(endDateHST);&#xA;println (&quot;PDT End date time &quot; + endDate);&#xA;&#xA;&#x9;&#x9;List ufvYbUnits = null;&#xA;        try&#xA;        {&#xA;            Long facilityGkey = ContextHelper.getThreadFacility().getFcyGkey();&#xA;            println(&quot;ContextHelper.getThreadFacility().getFcyGkey() : &quot;+ContextHelper.getThreadFacility().getFcyGkey())&#xA;&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;TruckTransaction&quot;).addDqPredicate(PredicateFactory.ge(RoadField.TRAN_CREATED, startDate)).addDqPredicate(PredicateFactory.le(RoadField.TRAN_CREATED, endDate)).addDqPredicate(PredicateFactory.eq(RoadField.TRAN_FACILITY, facilityGkey));&#xA;            println(&quot;dq---------------&quot;+dq);&#xA;            ufvYbUnits  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            println(&quot;Query executed&quot;);&#xA;            println(&quot;unitUfvYB ::&quot;+ufvYbUnits != null ? ufvYbUnits.size() : 0);&#xA;        }catch(Exception e){&#xA;          e.printStackTrace();&#xA;            }&#xA;        return ufvYbUnits;&#xA;    }&#xA;&#xA;    }&#xA;" />
<digital-asset id="MatGetAllEvents" short-description="MatGetAllEvents" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.road.business.model.*;&#xA;import java.util.Calendar;&#xA;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.ServicesField;&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;&#xA;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;import java.util.HashMap&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;import com.navis.argo.business.atoms.FreightKindEnum;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.api.EventManager&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;&#xA;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 09/19/2012&#xA;* Description: This groovy is used to generate the Stowplan/Manifest Discrepancies after Stowplan and Manifest process&#xA;*/&#xA;&#xA;public class MatGetAllEvents extends GroovyInjectionBase&#xA;&#x9;{&#xA;&#x9;&#x9;def inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;//String vessel = &quot;MHI285&quot;;&#xA;&#x9;&#x9;//def vesselGkey = &quot;130043692&quot;;&#xA;&#x9;&#x9;//String vessel = &quot;MHI295&quot;;&#xA;&#x9;&#x9;//def vesselGkey = &quot;141859481&quot;;&#xA;&#xA;&#x9;&#x9;private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;private final String  emailFrom = '1aktosdevteam@matson.com';&#xA;&#x9;&#x9;//public boolean execute(Map params)&#xA;&#x9;&#x9;public void execute(String vessel, String vesselGkey)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;String replaceVes = &quot;V-&quot;+vessel+&quot;-&quot;;&#xA;&#x9;&#x9;&#x9;println(&quot;inside MatGetAllEvents.execute&quot;);&#xA;&#x9;&#x9;&#x9;def gvyEventUtil = inj.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;&#x9;&#x9;&#x9;HashMap reportDesignsmap = new HashMap();&#xA;&#x9;&#x9;&#x9;String subject = vessel+&quot; Last Container Discharge Report&quot;;&#xA;&#x9;&#x9;&#x9;String p2Subject = &quot; &quot;;&#xA;&#x9;&#x9;&#x9;String siSubject = &quot; &quot;;&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;ArrayList unitRptList = new ArrayList();&#xA;&#x9;&#x9;&#x9;println(&quot;Started : MatGetAllEvents&quot;);&#xA;&#x9;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;&#x9;List events = getAllDischEvents(vessel);&#xA;&#x9;&#x9;&#x9;&#x9;ArrayList dischUnits = new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;Iterator dischItr = events.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;List acctList = null;&#xA;&#x9;&#x9;&#x9;&#x9;def type = &quot;DISCHARGE&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;HashMap outputMap = null;&#xA;&#x9;&#x9;&#x9;&#x9;List resultAcctList = new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;while(dischItr.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Event disch = dischItr.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def creator = disch.evntCreator;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (creator == &quot;-xps-&quot;){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unitId = disch.evntAppliedToNaturalKey;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def changes = disch.evntFieldChangesString;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY,UnitCategoryEnum.THROUGH))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_TYPE, &quot;VESSEL&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_GKEY, vesselGkey))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID,unitId))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//.addDqOrdering(Ordering.asc(UnitField.UFV_CMDTY));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;acctList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;dq====&quot;+dq);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator unitIter = acctList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;while(unitIter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = unitIter.next()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;outputMap = populateAcctListByType(ufv,type,vessel)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultAcctList.add(outputMap)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;dischUnits.add(disch);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;println (&quot;resultAcctList.size  &quot;+resultAcctList.size);&#xA;&#x9;&#x9;&#x9;&#x9;JRDataSource reportDs = new JRMapCollectionDataSource(resultAcctList);&#xA; &#x9;&#x9;&#x9;&#x9;def runReport = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//Set report parameters&#xA;&#x9;&#x9;&#x9;&#x9;HashMap reportParameters = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;reportParameters.put(&quot;outboundVesVoy&quot;,&quot;MHI285&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;reportParameters.put(&quot;Date&quot;,new Date());&#xA;&#x9;&#x9;&#x9;&#x9;// call report design of rehandle containers not loaded back to vessel report.&#xA;&#x9;&#x9;&#x9;&#x9;def reportDesignName = &quot;ACCT AUDIT DISCH REPORT&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;// Emailing report&#xA;&#x9;&#x9;&#x9;&#x9;runReport.emailExcelReport(reportDs, reportParameters,reportDesignName ,&quot;1aktosdevteam@matson.com&quot;,&quot;ACCT AUDIT DISCH REPORT-&quot;+vessel,&quot;ACCT AUDIT DISCH REPORT&quot;);&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;dischUnits.size ::: &quot; + dischUnits.size);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;ArrayList siUnits = new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;ArrayList p2Units = new ArrayList();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Iterator itr = events.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(itr.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Event disch = itr.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def changes = disch.evntFieldChangesString;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (!changes.contains(&quot;P2&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;siUnits.add(disch);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (changes.contains(&quot;P2&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;p2Units.add(disch);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;List siList = generateReport(siUnits,vessel);&#xA;&#x9;&#x9;&#x9;&#x9;List p2List = generateReport(p2Units,vessel);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;Date startDate = new Date();&#xA;&#x9;&#x9;&#x9;&#x9;String strDate = startDate.format('MM/dd/yyyy')&#xA;            &#x9;parameters.put(&quot;Date&quot;,strDate);&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (siList.size &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource ds = new JRMapCollectionDataSource(siList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;TEST REPORT&quot;,ds);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;siSubject  = &quot;Note : No SI Gate discharges found&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;            if (p2List.size &gt; 0)&#xA;&#x9;            {&#xA;&#x9;                //Create and Mail Report&#xA;&#x9;                JRDataSource ds1 = new JRMapCollectionDataSource(p2List);&#xA;&#x9;                reportDesignsmap.put(&quot;TEST REPORT1&quot;,ds1);&#xA;&#x9;            }&#xA;&#x9;            else&#xA;&#x9;            {&#xA;&#x9;                p2Subject  = &quot;Note : No P2 Gate discharges found&quot;;&#xA;&#x9;            }&#xA;&#x9;&#x9;&#x9;&#x9;subject = subject + &quot;\n \n&quot; + p2Subject + &quot;\n \n&quot; + siSubject;&#xA;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReports(reportDesignsmap, parameters,emailTo, &quot;Last Container Discharge for-&quot;+vessel ,subject);&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Exception in getAllDischEvents &quot;+e);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public List generateReport(List events, String vessel)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;def gvyEventUtil = inj.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;&#x9;&#x9;&#x9;String replaceVes = &quot;V-&quot;+vessel+&quot;-&quot;;&#xA;&#x9;&#x9;&#x9;ArrayList unitRptList = new ArrayList();&#xA;&#xA;&#x9;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;&#x9;Iterator itr = events.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(itr.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Event disch = itr.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def changes = disch.evntFieldChangesString;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println (&quot;1 :::&quot;+disch.evntAppliedToNaturalKey+&quot;::&quot;+changes+&quot;::&quot;+disch.evntAppliedDate+&quot;::&quot;+disch.evntAppliedBy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;changes = changes.replace(replaceVes,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def lkpSlotValue = changes.indexOf(&quot;-&quot;)== -1 ? changes : changes.substring(0,changes.indexOf(&quot;-&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;lkpSlotValue &quot;+lkpSlotValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap map = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def dischDate = disch.evntAppliedDate;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitNbr&quot;, disch.evntAppliedToNaturalKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;PositionSlot&quot;, lkpSlotValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;OutBoundCarrierId&quot;, vessel);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;type&quot;, &quot;OVERALL&quot; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;InTime&quot;, disch.evntAppliedDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;InTimeDate&quot;, disch.evntAppliedDate);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitRptList.add(map);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Iterator cyHon = events.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(cyHon.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Event disch = cyHon.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def changes = disch.evntFieldChangesString;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String cyHonFlg = getCyHonUnit(disch.evntAppliedToNaturalKey,vessel);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (cyHonFlg == &quot;Y&quot;){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println (&quot;2 :::&quot;+disch.evntAppliedToNaturalKey+&quot;::&quot;+changes+&quot;::&quot;+disch.evntAppliedDate+&quot;::&quot;+disch.evntAppliedBy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;changes = changes.replace(replaceVes,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def lkpSlotValue = changes.indexOf(&quot;-&quot;)== -1 ? changes : changes.substring(0,changes.indexOf(&quot;-&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;lkpSlotValue &quot;+lkpSlotValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap map = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitNbr&quot;, disch.evntAppliedToNaturalKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;PositionSlot&quot;, lkpSlotValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;OutBoundCarrierId&quot;, vessel);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;type&quot;, &quot;CY-HON&quot; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;InTime&quot;, disch.evntAppliedDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;InTimeDate&quot;, disch.evntAppliedDate);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitRptList.add(map);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Iterator auto = events.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(auto.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Event disch = auto.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def changes = disch.evntFieldChangesString;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String autoFlg = getAutoUnit(disch.evntAppliedToNaturalKey,vessel);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (autoFlg == &quot;Y&quot;){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println (&quot;3 :::&quot;+disch.evntAppliedToNaturalKey+&quot;::&quot;+changes+&quot;::&quot;+disch.evntAppliedDate+&quot;::&quot;+disch.evntAppliedBy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;changes = changes.replace(replaceVes,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def lkpSlotValue = changes.indexOf(&quot;-&quot;)== -1 ? changes : changes.substring(0,changes.indexOf(&quot;-&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;lkpSlotValue &quot;+lkpSlotValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap map = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitNbr&quot;, disch.evntAppliedToNaturalKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;PositionSlot&quot;, lkpSlotValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;OutBoundCarrierId&quot;, vessel);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;type&quot;, &quot;AUTO&quot; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;InTime&quot;, disch.evntAppliedDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;InTimeDate&quot;, disch.evntAppliedDate);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitRptList.add(map);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Iterator cy = events.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(cy.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Event disch = cy.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def changes = disch.evntFieldChangesString;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String cyFlg = getCyUnit(disch.evntAppliedToNaturalKey,vessel);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;Auto :::&quot;+auto);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (cyFlg == &quot;Y&quot;){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println (&quot;4 :::&quot;+disch.evntAppliedToNaturalKey+&quot;::&quot;+changes+&quot;::&quot;+disch.evntAppliedDate+&quot;::&quot;+disch.evntAppliedBy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;changes = changes.replace(replaceVes,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def lkpSlotValue = changes.indexOf(&quot;-&quot;)== -1 ? changes : changes.substring(0,changes.indexOf(&quot;-&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;lkpSlotValue &quot;+lkpSlotValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap map = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitNbr&quot;, disch.evntAppliedToNaturalKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;PositionSlot&quot;, lkpSlotValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;OutBoundCarrierId&quot;, vessel);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;type&quot;, &quot;CY-OTHER&quot; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;InTime&quot;, disch.evntAppliedDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;InTimeDate&quot;, disch.evntAppliedDate);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitRptList.add(map);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;return unitRptList;&#xA;&#x9;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Exception in getAllDischEvents &quot;+e);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public boolean execute(Map params)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Started : MatGetAllEvents&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def MatGetUpdatedConsignee = inj.getGroovyClassInstance(&quot;MatGetUpdatedConsignee&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Calling MatGetUpdatedConsignee.generateReport()&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MatGetUpdatedConsignee.generateReport();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Error while calling MatGetUpdatedConsignee&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap map = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList reportYBList =  new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList reportGenTruckList =  new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList reportSATList =  new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList reportCONList =  new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList reportCATList =  new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList reportYBSERList =  new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList reportMASList =  new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList reportPORTList =  new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList reportRECONList =  new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList reportSitUnAssignList =  new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;List events = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;events = getAllEvents();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator eventsIterator = events.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while(eventsIterator.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Event event = eventsIterator.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def changes = event.evntFieldChangesString;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (changes.contains(&quot;YB-&quot;)){&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString06&quot;, event.evntAppliedToNaturalKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString01&quot;, event.evntEventType.evnttypeId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString02&quot;, event.evntNote);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString03&quot;, event.evntAppliedBy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString04&quot;, event.evntCreator);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString05&quot;, event.evntFieldChangesString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString07&quot;, event.evntFacility.fcyId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate01&quot;, event.evntAppliedDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate02&quot;, event.evntCreated);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(map != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportYBList.add(map);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (changes.contains(&quot;GEN_TRUCK&quot;)){&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString06&quot;, event.evntAppliedToNaturalKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString01&quot;, event.evntEventType.evnttypeId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString02&quot;, event.evntNote);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString03&quot;, event.evntAppliedBy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString04&quot;, event.evntCreator);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString05&quot;, event.evntFieldChangesString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString07&quot;, event.evntFacility.fcyId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate01&quot;, event.evntAppliedDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate02&quot;, event.evntCreated);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(map != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportGenTruckList.add(map);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (changes.contains(&quot;YB_&quot;)){&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString06&quot;, event.evntAppliedToNaturalKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString01&quot;, event.evntEventType.evnttypeId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString02&quot;, event.evntNote);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString03&quot;, event.evntAppliedBy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString04&quot;, event.evntCreator);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString05&quot;, event.evntFieldChangesString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString07&quot;, event.evntFacility.fcyId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate01&quot;, event.evntAppliedDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate02&quot;, event.evntCreated);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(map != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportYBSERList.add(map);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (changes.contains(&quot;SAT&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString06&quot;, event.evntAppliedToNaturalKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString01&quot;, event.evntEventType.evnttypeId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString02&quot;, event.evntNote);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString03&quot;, event.evntAppliedBy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString04&quot;, event.evntCreator);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString05&quot;, event.evntFieldChangesString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString07&quot;, event.evntFacility.fcyId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate01&quot;, event.evntAppliedDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate02&quot;, event.evntCreated);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(map != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportSATList.add(map);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (changes.contains(&quot;UNAPPROVED VARIANCE&quot;) || changes.contains(&quot;REQUIRES&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString06&quot;, event.evntAppliedToNaturalKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString01&quot;, event.evntEventType.evnttypeId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString02&quot;, event.evntNote);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString03&quot;, event.evntAppliedBy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString04&quot;, event.evntCreator);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString05&quot;, event.evntFieldChangesString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString07&quot;, event.evntFacility.fcyId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate01&quot;, event.evntAppliedDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate02&quot;, event.evntCreated);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(map != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportCONList.add(map);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (changes.contains(&quot;Import&quot;) || changes.contains(&quot;Export&quot;) || changes.contains(&quot;Transship&quot;) || changes.contains(&quot;Through&quot;) || changes.contains(&quot;Storage&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString06&quot;, event.evntAppliedToNaturalKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString01&quot;, event.evntEventType.evnttypeId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString02&quot;, event.evntNote);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString03&quot;, event.evntAppliedBy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString04&quot;, event.evntCreator);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString05&quot;, event.evntFieldChangesString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString07&quot;, event.evntFacility.fcyId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate01&quot;, event.evntAppliedDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate02&quot;, event.evntCreated);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(map != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportCATList.add(map);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (changes.contains(&quot;Departed&quot;) || changes.contains(&quot;Active&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString06&quot;, event.evntAppliedToNaturalKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString01&quot;, event.evntEventType.evnttypeId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString02&quot;, event.evntNote);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString03&quot;, event.evntAppliedBy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString04&quot;, event.evntCreator);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString05&quot;, event.evntFieldChangesString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString07&quot;, event.evntFacility.fcyId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate01&quot;, event.evntAppliedDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate02&quot;, event.evntCreated);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(map != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportMASList.add(map);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (changes.contains(ContextHelper.getThreadFacility().getFcyId()+&quot;-&gt;&quot;) || changes.contains(&quot;-&gt;&quot;+ContextHelper.getThreadFacility().getFcyId())){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString06&quot;, event.evntAppliedToNaturalKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString01&quot;, event.evntEventType.evnttypeId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString02&quot;, event.evntNote);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString03&quot;, event.evntAppliedBy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString04&quot;, event.evntCreator);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString05&quot;, event.evntFieldChangesString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString07&quot;, event.evntFacility.fcyId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate01&quot;, event.evntAppliedDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate02&quot;, event.evntCreated);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(map != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportPORTList.add(map);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (changes.contains(&quot;RECON&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString06&quot;, event.evntAppliedToNaturalKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString01&quot;, event.evntEventType.evnttypeId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString02&quot;, event.evntNote);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString03&quot;, event.evntAppliedBy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString04&quot;, event.evntCreator);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString05&quot;, event.evntFieldChangesString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString07&quot;, event.evntFacility.fcyId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate01&quot;, event.evntAppliedDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate02&quot;, event.evntCreated);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(map != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportRECONList.add(map);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;List sitUnAssign = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sitUnAssign = getAllSitUnassignEvents();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator sitIterator = sitUnAssign.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while(sitIterator.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Event sits = sitIterator.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map = new HashMap();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString06&quot;, sits.evntAppliedToNaturalKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString01&quot;, sits.evntEventType.evnttypeId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString02&quot;, sits.evntNote);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString03&quot;, sits.evntAppliedBy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString04&quot;, sits.evntCreator);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString05&quot;, sits.evntFieldChangesString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString07&quot;, sits.evntFacility.fcyId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate01&quot;, sits.evntAppliedDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate02&quot;, sits.evntCreated);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(map != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportSitUnAssignList.add(map);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap reportDesignsmap = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String printRpt = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportYBList.size() &quot;+reportYBList.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportGenTruckList.size() &quot;+reportGenTruckList.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportYBSERList.size() &quot;+reportYBSERList.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportSATList.size() &quot;+reportSATList.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportCONList.size() &quot;+reportCONList.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportCATList.size() &quot;+reportCATList.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportMASList.size() &quot;+reportMASList.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportPORTList.size() &quot;+reportPORTList.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportRECONList.size() &quot;+reportRECONList.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportSitUnAssignList.size() &quot;+reportSitUnAssignList.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (reportYBList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource dsYb = new JRMapCollectionDataSource(reportYBList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;ALL EVENTS YB&quot;,dsYb);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;printRpt = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (reportGenTruckList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource dsGt = new JRMapCollectionDataSource(reportGenTruckList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;ALL EVENTS GEN TRUCK&quot;,dsGt);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;printRpt = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (reportYBSERList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource dsYbSer = new JRMapCollectionDataSource(reportYBSERList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;ALL EVENTS YB_SER&quot;,dsYbSer);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;printRpt = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (reportSATList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource dsSat = new JRMapCollectionDataSource(reportSATList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;ALL EVENTS SAT&quot;,dsSat);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;printRpt = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (reportCONList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource dsCon = new JRMapCollectionDataSource(reportCONList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;ALL EVENTS CON&quot;,dsCon);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;printRpt = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (reportCATList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource dsCat = new JRMapCollectionDataSource(reportCATList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;ALL EVENTS CATEGORY&quot;,dsCat);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;printRpt = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (reportMASList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource dsMas = new JRMapCollectionDataSource(reportMASList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;ALL EVENTS MASTER&quot;,dsMas);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;printRpt = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (reportPORTList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource dsPort = new JRMapCollectionDataSource(reportPORTList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;ALL EVENTS ROUTING&quot;,dsPort);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;printRpt = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (reportRECONList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource dsRecon = new JRMapCollectionDataSource(reportRECONList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;ALL EVENTS RECON&quot;,dsRecon);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;printRpt = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (reportSitUnAssignList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource dsSit = new JRMapCollectionDataSource(reportSitUnAssignList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;ALL EVENTS SIT UNASSIGN&quot;,dsSit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;printRpt = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (&quot;Y&quot;.equals(printRpt)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailXLSReports(reportDesignsmap,parameters, emailTo, &quot;All Events - UNIT_SNX_UPDATE&quot;,&quot;Attached All events for UNIT_SNX_UPDATE &quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportYBList ------- Success&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}catch (Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;No design &quot;+ e);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo, &quot;ALL EVENTS&quot;,&quot;No Changes are reported&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportYBList ------- No data to print&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(e)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;private List getAllEvents()&#xA;&#x9;{&#xA;&#xA;&#x9;&#x9;try{&#xA;&#xA;&#x9;&#x9;&#x9;Calendar cal = Calendar.getInstance();&#xA;&#x9;&#x9;&#x9;cal.setTime(new Date());&#xA;&#x9;&#x9;&#x9;cal.add(Calendar.HOUR_OF_DAY, -3);&#xA;    &#x9;&#x9;Date startDate = cal.getTime();&#xA;&#x9;&#x9;&#x9;println(&quot;startDate &quot;+ startDate);&#xA;&#xA;&#xA;       &#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Event&quot;)&#xA;    &#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ge(ServicesField.EVNT_APPLIED_DATE, startDate))&#xA;    &#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.le(ServicesField.EVNT_APPLIED_DATE, endDate))&#xA;    &#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(ServicesField.EVNT_NOTE, &quot;Sup%&quot;))&#xA;    &#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(ServicesField.EVNT_EVENT_TYPE, &quot;3708255&quot;))&#xA;    &#x9;&#x9;&#x9;.addDqOrdering(Ordering.desc(ServicesField.EVNT_APPLIED_DATE));&#xA;    &#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.eq(ServicesField.EVNT_APPLIED_TO_NATURAL_KEY, &quot;TRIU8585980&quot;));&#xA;&#xA;    &#x9;&#x9;println (dq);&#xA;&#xA;    &#x9;&#x9;//dq.setMaxResults(1);&#xA;&#x9;&#x9;&#x9;List events = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println (&quot;events.size()&quot; + events.size());&#xA;&#xA;&#x9;&#x9;&#x9;return events;&#xA;&#xA;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;&#x9;println(&quot;Error while getting events:::&quot;+e)&#xA;&#x9;&#x9;}&#xA;  &#x9;}&#xA;&#xA;&#x9;private List getAllSitUnassignEvents()&#xA;&#x9;{&#xA;&#xA;&#x9;&#x9;try{&#xA;&#xA;&#x9;&#x9;&#x9;Calendar cal = Calendar.getInstance();&#xA;&#x9;&#x9;&#x9;cal.setTime(new Date());&#xA;&#x9;&#x9;&#x9;cal.add(Calendar.HOUR_OF_DAY, -3);&#xA;    &#x9;&#x9;&#x9;Date startDate = cal.getTime();&#xA;&#x9;&#x9;&#x9;println(&quot;startDate &quot;+ startDate);&#xA;&#xA;       &#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Event&quot;)&#xA;    &#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ge(ServicesField.EVNT_APPLIED_DATE, startDate))&#xA;    &#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(ServicesField.EVNT_EVENT_TYPE, &quot;3053232&quot;))&#xA;    &#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.eq(ServicesField.EVNT_APPLIED_TO_NATURAL_KEY, &quot;MATU3701946&quot;))&#xA;    &#x9;&#x9;&#x9;.addDqOrdering(Ordering.desc(ServicesField.EVNT_APPLIED_DATE));&#xA;&#xA;&#xA;    &#x9;&#x9;println (dq);&#xA;&#xA;    &#x9;&#x9;//dq.setMaxResults(1);&#xA;&#x9;&#x9;&#x9;List events = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println (&quot;events.size()&quot; + events.size());&#xA;&#xA;&#x9;&#x9;&#x9;return events;&#xA;&#xA;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;&#x9;println(&quot;Error while getting events:::&quot;+e)&#xA;&#x9;&#x9;}&#xA;  &#x9;}&#xA;&#xA;private List getAllDischEvents(String vessel)&#xA;&#x9;{&#xA;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;Date startDate = new Date() -8;&#xA;&#x9;&#x9;&#x9;Date endDate = startDate + 4;&#xA;&#x9;&#x9;&#x9;String trimDate = startDate.format('yyyy-MM-dd')&#xA;&#x9;&#x9;&#x9;startDate = startDate.parse('yyyy-MM-dd', trimDate);&#xA;&#x9;&#x9;&#x9;ArrayList eventList = new ArrayList();&#xA;&#xA;       &#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Event&quot;)&#xA;    &#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ge(ServicesField.EVNT_APPLIED_DATE, startDate))&#xA;    &#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(ServicesField.EVNT_EVENT_TYPE, &quot;2753837&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqOrdering(Ordering.desc(ServicesField.EVNT_APPLIED_DATE));&#xA;    &#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.eq(ServicesField.EVNT_APPLIED_TO_NATURAL_KEY, &quot;MATU3701946&quot;));&#xA;&#xA;    &#x9;&#x9;println (dq);&#xA;&#xA;    &#x9;&#x9;//dq.setMaxResults(1);&#xA;&#x9;&#x9;&#x9;List events = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println (&quot;events.size()&quot; + events.size());&#xA;&#xA;&#x9;&#x9;&#x9;Iterator itr = events.iterator();&#xA;&#x9;&#x9;&#x9;while(itr.hasNext())&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Event disch = itr.next();&#xA;&#x9;&#x9;&#x9;&#x9;def changes = disch.evntFieldChangesString;&#xA;&#x9;&#x9;&#x9;&#x9;if (changes.contains(vessel)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;eventList.add(disch);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;println(&quot;eventList ::&quot;+eventList.size());&#xA;&#x9;&#x9;&#x9;return eventList;&#xA;&#xA;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;&#x9;println(&quot;Error while getting events:::&quot;+e)&#xA;&#x9;&#x9;}&#xA;  &#x9;}&#xA;&#xA; public String getAutoUnit(String containerId, String vessel)&#xA;&#x9;{&#xA;&#xA;&#x9;try {&#xA;&#x9;&#x9;&#x9;String auto = &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID,containerId));&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID,vessel));&#xA;&#x9;&#x9;&#x9;def unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;if (unitList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;commodity = commodity != null ? commodity : &quot;NO&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;commodity :::&quot;+ commodity);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (commodity.contains(&quot;AUTO&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;auto = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;return auto;&#xA;&#x9;}catch (Exception e){&#xA;&#x9;&#x9;println(&quot;Error &quot;+ e);&#xA;&#x9;}&#xA;}&#xA;&#xA; public String getCyHonUnit(String containerId , String vessel)&#xA;&#x9;{&#xA;&#xA;&#x9;try {&#xA;&#x9;&#x9;&#x9;String cyHon = &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID,containerId));&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID,vessel));&#xA;&#x9;&#x9;&#x9;def unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;if (unitList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;commodity = commodity != null ? commodity : &quot;NO&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def pod = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;commodity :::&quot;+ commodity);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (!commodity.contains(&quot;AUTO&quot;) &amp;&amp; pod == ContextHelper.getThreadFacility().getFcyId()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cyHon = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;return cyHon;&#xA;&#x9;}catch (Exception e){&#xA;&#x9;&#x9;println(&quot;Error &quot;+ e);&#xA;&#x9;}&#xA;}&#xA;&#xA; public String getCyUnit(String containerId , String vessel)&#xA;&#x9;{&#xA;&#xA;&#x9;try {&#xA;&#x9;&#x9;&#x9;String cy = &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID,containerId));&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID,vessel));&#xA;&#x9;&#x9;&#x9;def unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;if (unitList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;commodity = commodity != null ? commodity : &quot;NO&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def pod = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (!commodity.contains(&quot;AUTO&quot;) &amp;&amp; pod != ContextHelper.getThreadFacility().getFcyId()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cy = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;return cy;&#xA;&#x9;}catch (Exception e){&#xA;&#x9;&#x9;println(&quot;Error &quot;+ e);&#xA;&#x9;}&#xA;}&#xA;&#xA;public HashMap populateAcctListByType(UnitFacilityVisit ufv, String type, String vessel) {&#xA;&#xA;&#x9;        HashMap resMap = new HashMap();&#xA;&#x9;        def unit = ufv.ufvUnit&#xA;&#x9;        UnitEquipment chasEquip = unit.getUnitCarriageUe();&#xA;&#x9;        def freightkindout = unit.getFieldValue(&quot;unitFreightKind&quot;).getKey();&#xA;&#x9;        def attachedUnit = unit.getFieldValue(&quot;unitAttachedEquipIds&quot;)&#xA;&#x9;        if (&quot;FCL&quot;.equals(freightkindout))&#xA;&#x9;        {&#xA;&#x9;            freightkindout = &quot;F&quot;;&#xA;&#x9;        } else if (&quot;MTY&quot;.equals(freightkindout))&#xA;&#x9;        {&#xA;&#x9;            freightkindout = &quot;E&quot;;&#xA;&#x9;        }&#xA;&#xA;&#x9;        resMap.put(&quot;Commodity&quot;,unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;));&#xA;&#x9;        resMap.put(&quot;EquipmentTypeClass&quot;,unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;).getKey());&#xA;&#x9;        resMap.put(&quot;EquipmentType&quot;,unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;))&#xA;&#x9;        resMap.put(&quot;FreightKind&quot;,freightkindout)&#xA;&#x9;        resMap.put(&quot;UnitNbr&quot;,unit.getFieldValue(&quot;unitId&quot;))&#xA;&#x9;        if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;&#x9;&#x9;&#x9;&#x9;def commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;commodity = commodity != null &amp;&amp; commodity == &quot;AUTO&quot; ? &quot;AUTO&quot; : &quot; &quot;;&#xA;&#x9;&#x9;&#x9;&#x9;resMap.put(&quot;Commodity&quot;,commodity);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;        if (attachedUnit != null &amp;&amp; chasEquip !=null)&#xA;&#x9;        {&#xA;&#x9;            resMap.put(&quot;AttachedUnits&quot;,unit.getFieldValue(&quot;unitAttachedEquipIds&quot;))&#xA;&#x9;        } else if (attachedUnit != null &amp;&amp; chasEquip == null)&#xA;&#x9;        {&#xA;&#x9;            resMap.put(&quot;AttachedUnits&quot;,null)&#xA;&#x9;        }&#xA;&#xA;&#x9;&#x9;&#x9;if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;&#x9;            resMap.put(&quot;InboundCarrierATA&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvATA&quot;))&#xA;&#x9;            resMap.put(&quot;InboundCarrierATD&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvATD&quot;))&#xA;&#x9;            resMap.put(&quot;InboundCarrierId&quot;,vessel)&#xA;&#x9;            resMap.put(&quot;UfvFlexString06&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString06&quot;))&#xA;&#x9;        }&#xA;&#x9;        return resMap;&#xA;    }&#xA;&#xA;}&#xA;&#xA;" />
<digital-asset id="MatGetIntegrationError" short-description="MatGetIntegrationError" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.argo.ArgoRefField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.road.business.model.*;&#xA;import java.util.Calendar;&#xA;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;&#xA;import com.navis.road.RoadField;&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;&#xA;import com.navis.argo.ArgoConfig;&#xA;import com.navis.argo.ArgoPropertyKeys;&#xA;import com.navis.argo.ArgoRefField;&#xA;import com.navis.argo.business.reference.AgentRepresentation;&#xA;import com.navis.argo.business.atoms.BizRoleEnum;&#xA;import com.navis.argo.business.reference.Agent;&#xA;import com.navis.road.business.model.TruckingCompany&#xA;import java.lang.*;&#xA;import com.navis.argo.business.model.GeneralReference;&#xA;//import com.navis.framework.ulc.server.application.controller.form.ShowDeleteFormCommand;&#xA;import com.navis.argo.business.reference.Chassis;&#xA;import com.navis.framework.business.atoms.LifeCycleStateEnum;&#xA;import com.navis.inventory.business.atoms.EqDamageSeverityEnum;&#xA;&#xA;import com.navis.argo.business.integration.IntegrationError;&#xA;import com.navis.argo.ArgoIntegrationField;&#xA;import com.navis.argo.business.atoms.IntegrationActionStatusEnum;&#xA;import com.navis.argo.business.atoms.IntegrationTypeEnum;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.ServicesField;&#xA;import com.navis.framework.persistence.HibernateApi&#xA;&#xA;import com.navis.argo.business.reference.RoutingPoint;&#xA;&#xA;import com.navis.framework.business.atoms.NodeStatusTypeEnum;&#xA;import com.navis.framework.portal.context.PortalApplicationContext;&#xA;import com.navis.framework.portal.context.server.IServerContext;&#xA;import com.navis.framework.portal.context.server.IServerConfig;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 09/19/2012&#xA;* Description: This groovy is used to generate the Stowplan/Manifest Discrepancies after Stowplan and Manifest process&#xA;*/&#xA;&#xA;public class MatGetIntegrationError extends GroovyInjectionBase&#xA;&#x9;{&#xA;&#x9;&#x9;public boolean execute(Map params)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA; &#x9;&#x9;&#x9;&#x9;IServerContext application = (IServerContext)PortalApplicationContext.getBean(&quot;serverContext&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;application :::::::::::::::::::::::::&quot;+application);&#xA;&#x9;&#x9;&#x9;&#x9;def status = application.getNodeStatus();&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Node Status :::::::::::::::::::::::::&quot;+status);&#xA;&#x9;&#x9;&#x9;&#x9;IServerConfig serverConfig = application.getServerConfig();&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;serverConfig :::::::::::::::::::::::::&quot;+serverConfig);&#xA;&#x9;&#x9;&#x9;&#x9;def node = serverConfig.getNodeName();&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Node Name :::::::::::::::::::::::::&quot;+node);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//getIntegrationError();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList ------- Success&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(e)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;public void createIntegrationError(String exception, String entity, String bizKey,String event, String errDesc, String messageBody )&#xA;&#x9;{&#xA;&#x9;try {&#xA;&#x9;&#x9;&#x9;println(&quot;Inside createIntegrationError&quot;);&#xA;&#x9;&#x9;&#x9;Facility facility = Facility.findFacility(ContextHelper.getThreadFacility().getFcyId());&#xA;&#x9;&#x9;&#x9;IntegrationTypeEnum type = IntegrationTypeEnum.JMS_OUTBOUND_TEXT&#xA;&#x9;&#x9;&#x9;IntegrationActionStatusEnum status = IntegrationActionStatusEnum.ERROR;&#xA;&#x9;&#x9;&#x9;IServerContext application = (IServerContext)PortalApplicationContext.getBean(&quot;serverContext&quot;);&#xA;&#x9;&#x9;&#x9;IServerConfig serverConfig = application.getServerConfig();&#xA;&#x9;&#x9;&#x9;def node = serverConfig.getNodeName();&#xA;&#x9;&#x9;&#x9;Date firstRecorded = new Date();&#xA;&#x9;&#x9;&#x9;exception = exception.substring(1,2000);&#xA;&#xA;&#x9;&#x9;&#x9;EventType eventType = EventType.findEventType(event);&#xA;&#x9;&#x9;&#x9;String eventTypekey = eventType.getEvnttypeGkey();&#xA;&#x9;&#x9;&#x9;def eventkey = null;&#xA;&#x9;&#x9;&#x9;List events = null;&#xA;&#x9;&#x9;&#x9;events = getAllEvents(eventTypekey, bizKey);&#xA;&#x9;&#x9;&#x9;Iterator eventsIterator = events.iterator();&#xA;&#x9;&#x9;&#x9;while(eventsIterator.hasNext())&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Event eventItr = eventsIterator.next();&#xA;&#x9;&#x9;&#x9;&#x9;eventkey = eventItr.getEvntGkey();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;IntegrationError newErr = new IntegrationError();&#xA;&#xA;&#x9;&#x9;&#x9;byte[] messageArray = messageBody.getBytes(&quot;UTF-16&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrIntegrationType(type);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrIntegrationStatus(status);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrNode(node);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrException(exception);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrExceptionLog(exception);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrEntityName(entity);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrBusinessKey(bizKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrEventId(event);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrEventGkey(eventkey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrDescription(errDesc);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrMessageBody(messageBody);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//newErr.setIerrMessageByteArray(messageArray);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrErrorFirstRecorded(firstRecorded);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrFacility(facility);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def gkey = newErr.getPrimaryKey();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Gkey is ::::::::::::::::::::::::::::::::::::::&quot;+gkey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;::::::::after insert Here::::::::::::&quot;+ type+&quot;::&quot;+status+&quot;::&quot;+node+&quot;::&quot;+entity+&quot;::&quot;+eventkey+&quot;::&quot;+messageBody+&quot;::&quot;+firstRecorded+&quot;::&quot;+facility);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;newErr ::::::::::::::::::::::::::&quot;+newErr);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Roastery.getHibernateApi().save(newErr);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;gkey = newErr.getPrimaryKey();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Gkey after save::::::::::::::::::::::::::::::::::::::&quot;+gkey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def fulshMode = HibernateApi.getInstance().getFlushMode();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;fulshMode :::::::::::&quot;+fulshMode);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (gkey != null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HibernateApi.getInstance().flush();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Error in createIntegrationError HibernateApi.getInstance().flush() ::&quot;+e);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;}catch (Exception e){&#xA;&#x9;&#x9;println(&quot;Error :::&quot; + e);&#xA;&#x9;}&#xA;}&#xA;&#xA;public void getIntegrationError()&#xA;&#x9;{&#xA;&#x9;try {&#xA;&#x9;&#x9;&#x9;println(&quot;Inside getIntegrationError&quot;);&#xA;&#x9;&#x9;&#x9;ArrayList errors = new ArrayList();&#xA;&#x9;&#x9;&#x9;String containerId = &quot;SUDU7362382&quot;;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;IntegrationError&quot;);&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(ArgoIntegrationField.IERR_BUSINESS_KEY,containerId));&#xA;&#x9;&#x9;&#x9;println(&quot;errors &quot;+dq);&#xA;&#x9;&#x9;&#x9;def errorList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println(&quot;After errorList&quot;+errorList.size());&#xA;&#x9;&#x9;&#x9;if (errorList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterErrorList = errorList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterErrorList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def err = iterErrorList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;IntegrationError newErr = new IntegrationError();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;    //def type = err.getIerrIntegrationType();&#xA;&#x9;&#x9;&#x9;&#x9;   // def status = err.getIerrIntegrationStatus();&#xA;&#x9;&#x9;&#x9;&#x9;    def node = err.getIerrNode();&#xA;&#x9;&#x9;&#x9;&#x9;    def exception = err.getIerrException();&#xA;&#x9;&#x9;&#x9;&#x9;    def expLog = err.getIerrExceptionLog();&#xA;&#x9;&#x9;&#x9;&#x9;    //def entity = err.getIerrEntityName();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def bizKey = err.getIerrBusinessKey();&#xA;&#x9;&#x9;&#x9;&#x9;    def event = err.getIerrEventId();&#xA;&#x9;&#x9;&#x9;&#x9;    //def eventkey = err.getIerrEventGkey();&#xA;&#x9;&#x9;&#x9;&#x9;    def errDesc = err.getIerrDescription();&#xA;&#x9;&#x9;&#x9;&#x9;    def messageBody = err.getIerrMessageBody();&#xA;&#x9;&#x9;&#x9;&#x9;    //def messageArray = err.getIerrMessageByteArray();&#xA;&#x9;&#x9;&#x9;&#x9;    def firstRec = err.getIerrErrorFirstRecorded();&#xA;&#x9;&#x9;&#x9;&#x9;    def lastRetry = err.getIerrLastRetry();&#xA;&#x9;&#x9;&#x9;&#x9;    //def facility = err.getIerrFacility();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//byte[] messageArray = [&quot;jfygsdkfjhdfcjkzdcbvkzdgakfacjckjacvajga&quot;];&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EventType eventType = EventType.findEventType(event);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;:::::::::::::eventType::::::::::&quot;+eventType+&quot;::&quot;+event);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String eventTypekey = eventType.getEvnttypeGkey();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;:::::::::::::eventTypekey::::::::::&quot;+eventTypekey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def entity = &quot;Unit&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String str = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def eventkey = getAllEvents(eventTypekey, bizKey)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;byte[] messageArray = [&quot;jfygsdkfjhdfcjkzdcbvkzdgakfacjckjacvajga&quot;];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}catch (Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(e);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;str = e;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//String str = e;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;byte[] messageArray = str.getBytes(&quot;UTF-16&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//byte[] messageArray = DatatypeConverter.parseHexBinary(str);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Facility facility = Facility.findFacility(ContextHelper.getThreadFacility().getFcyId());&#xA;&#x9;&#x9;&#x9;&#x9;    println(&quot;::::::::Here::::::::::::&quot;+ bizKey + &quot;::&quot;+facility);&#xA;&#x9;&#x9;&#x9;&#x9;    IntegrationTypeEnum type = IntegrationTypeEnum.JMS_OUTBOUND_TEXT&#xA;&#x9;&#x9;&#x9;&#x9;    IntegrationActionStatusEnum status = IntegrationActionStatusEnum.ERROR;&#xA;&#x9;&#x9;&#x9;&#x9;    println(&quot;::::::::Here::::::::::::&quot;+ status);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrIntegrationType(type);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrIntegrationStatus(status);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrNode(node);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//newErr.setIerrException(str);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrExceptionLog(str);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrEntityName(entity);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrBusinessKey(bizKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrEventId(event);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrEventGkey(eventkey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//newErr.setIerrDescription(errDesc);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrMessageBody(messageBody);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//newErr.setIerrMessageByteArray(messageArray);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrErrorFirstRecorded(new Date());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//newErr.setIerrLastRetry(lastRetry);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newErr.setIerrFacility(facility);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Roastery.getHibernateApi().save(newErr);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;::::::::after insert Here::::::::::::&quot;+ type+&quot;::&quot;+status+&quot;::&quot;+node+&quot;::&quot;+entity+&quot;::&quot;+eventkey+&quot;::&quot;+errDesc+&quot;::&quot;+messageBody+&quot;::&quot;+firstRec+&quot;::&quot;+facility);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;}catch (Exception e){&#xA;&#x9;&#x9;println(&quot;Error :::&quot; + e);&#xA;&#x9;}&#xA;}&#xA;&#xA;private List getAllEvents(String eventType, String unitId)&#xA;&#x9;{&#xA;&#x9;&#x9;try{&#xA;&#xA;&#x9;&#x9;&#x9;Calendar cal = Calendar.getInstance();&#xA;&#x9;&#x9;&#x9;cal.setTime(new Date());&#xA;&#x9;&#x9;&#x9;cal.add(Calendar.HOUR_OF_DAY, -1);&#xA;    &#x9;&#x9;Date startDate = cal.getTime();&#xA;&#x9;&#x9;&#x9;println(&quot;startDate &quot;+ startDate);&#xA;&#xA;&#xA;       &#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Event&quot;)&#xA;    &#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ge(ServicesField.EVNT_APPLIED_DATE, startDate))&#xA;    &#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(ServicesField.EVNT_EVENT_TYPE, eventType))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(ServicesField.EVNT_APPLIED_TO_NATURAL_KEY, unitId))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqOrdering(Ordering.desc(ServicesField.EVNT_APPLIED_DATE));&#xA;&#xA;    &#x9;&#x9;dq.setMaxResults(1);&#xA;&#x9;&#x9;&#x9;List events = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println (&quot;events.size()&quot; + events.size());&#xA;&#xA;&#x9;&#x9;&#x9;return events;&#xA;&#xA;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;&#x9;println(&quot;Error while getting events:::&quot;+e)&#xA;&#x9;&#x9;}&#xA;  &#x9;}&#xA;&#xA;}" />
<digital-asset id="MatCheckGatesMessage" short-description="MatCheckGatesMessage" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;&#xA;&#xA;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.ServicesField;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.api.EventManager;&#xA;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 01/05/2014&#xA;* Description: This groovy is used to check the GATES connectivity from TOS by checking the messages.&#xA;*/&#xA;&#xA;public class MatCheckGatesMessage extends GroovyInjectionBase&#xA;&#x9;{&#xA;&#x9;&#x9;def inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;int hours = -1;&#xA;&#xA;&#x9;&#x9;private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public boolean execute(Map params)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;println(&quot;Started : MatRaghuTest&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;List events = getAllEvents();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (events.size() &gt; 0) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator eventsIterator = events.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;while(eventsIterator.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Event event = eventsIterator.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (event.evntAppliedBy.contains(&quot;jms&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Details ----------&gt; &quot;+ event.evntGkey + &quot; :: &quot;+event.evntAppliedBy+&quot; :: &quot;+event.evntCreated+&quot; :: &quot;+event.evntEventType.evnttypeId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Send alert email&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def emailSender = getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailTo,&quot;GATES Connectivity issue - Please check&quot;,&quot;No GATES messages received in past &quot;+Math.abs(hours)+&quot; hour/s. Please check the connectivity \n\nThanks&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(e)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;private List getAllEvents()&#xA;&#x9;{&#xA;&#xA;&#x9;&#x9;try{&#xA;&#xA;&#x9;&#x9;&#x9;Calendar cal = Calendar.getInstance();&#xA;&#x9;&#x9;&#x9;cal.setTime(new Date());&#xA;&#x9;&#x9;&#x9;cal.add(Calendar.HOUR_OF_DAY, hours);&#xA;    &#x9;&#x9;&#x9;Date startDate = cal.getTime();&#xA;&#x9;&#x9;&#x9;println(&quot;startDate &quot;+ startDate);&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;EventType eventType = EventType.findEventType(&quot;BOOKING_CREATE&quot;)&#xA;&#x9;&#x9;&#x9;def bkngCreate = eventType.getEvnttypeGkey();&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;eventType = EventType.findEventType(&quot;BOOKING_PROPERTY_UPDATE&quot;)&#xA;&#x9;&#x9;&#x9;def bkngUpdt = eventType.getEvnttypeGkey();&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;eventType = EventType.findEventType(&quot;LNK&quot;)&#xA;&#x9;&#x9;&#x9;def lnk = eventType.getEvnttypeGkey();&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;eventType = EventType.findEventType(&quot;ULK&quot;)&#xA;&#x9;&#x9;&#x9;def ulk = eventType.getEvnttypeGkey();&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;eventType = EventType.findEventType(&quot;BDB&quot;)&#xA;&#x9;&#x9;&#x9;def bdb = eventType.getEvnttypeGkey();&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;eventType = EventType.findEventType(&quot;BDA&quot;)&#xA;&#x9;&#x9;&#x9;def bda = eventType.getEvnttypeGkey();&#xA;&#x9;&#x9;&#x9;&#xA;&#xA;       &#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Event&quot;)&#xA;    &#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ge(ServicesField.EVNT_APPLIED_DATE, startDate))&#xA;    &#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.in(ServicesField.EVNT_EVENT_TYPE, bkngCreate,bkngUpdt,lnk,ulk,bdb,bda))&#xA;    &#x9;&#x9;&#x9;.addDqOrdering(Ordering.desc(ServicesField.EVNT_APPLIED_DATE));&#xA;&#xA;    &#x9;&#x9;println (dq);&#xA;&#xA;    &#x9;&#x9;//dq.setMaxResults(1);&#xA;&#x9;&#x9;&#x9;List events = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println (&quot;events.size()&quot; + events.size());&#xA;&#xA;&#x9;&#x9;&#x9;return events;&#xA;&#xA;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;&#x9;println(&quot;Error while getting events:::&quot;+e)&#xA;&#x9;&#x9;}&#xA;  &#x9;}&#xA;&#xA;}&#xA;&#xA;" />
<digital-asset id="MatGetStowplanTrankey" short-description="MatGetStowplanTrankey" is-pre-deployed="N" groovy-code="import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.edi.business.entity.EdiSession&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.edi.business.atoms.EdiMessageDirectionEnum&#xA;import com.navis.edi.business.entity.EdiBatch&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.edi.EdiEntity;&#xA;import com.navis.edi.EdiField&#xA;import com.navis.edi.business.entity.EdiTransaction&#xA;import com.navis.edi.business.entity.EdiError;&#xA;import com.navis.edi.business.atoms.EdiStatusEnum;&#xA;import com.navis.edi.business.api.EdiFinder;&#xA;&#xA;import com.navis.argo.ArgoBizMetafield;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.framework.persistence.HibernatingEntity;&#xA;import com.navis.framework.portal.FieldChanges;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField;&#xA;import com.navis.inventory.business.api.UnitFinder;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.InventoryField;&#xA;&#xA;&#xA;/*&#xA;* Copyright (c) 2010 Zebra Technologies Corp. All Rights Reserved.&#xA;*  AUTHOR: Siva Raja&#xA;*  Date Written: 04/20/2011&#xA;*  Requirements: For every 350 US CUstoms batches which are in error status&#xA;   with error message &quot;vessel.encoding_not_found&quot;. Such batch status will be updated to Cancelled status. This groovy is run as Groovy Plugin based on&#xA;   General Notices event EDI_POST_FAILED.&#xA;&#xA;* Modified By : Raghu Iyer&#xA;* Date        : 09-26-2012&#xA;* Change Desc : Getting the container number after EDI_POST to get the vesvoy. using this vesvoy Import discrapancies report will be gererated.&#xA;&#xA;*/&#xA; &#xA;public class MatGetStowplanTrankey extends GroovyApi{&#xA; &#xA;   public String execute(GroovyEvent ipEvent, Object api){&#xA;    Thread.sleep(2500);&#xA;    UserContext context = ContextHelper.getThreadUserContext();&#xA;    Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;    System.out.println(&quot;MatGetStowplanTrankey Started !&quot; + timeNow);&#xA;&#x9;String containerId = null;&#xA;&#x9;String vesVoy = null;&#xA;&#x9;&#xA;&#x9;EdiSession session = (EdiSession) ipEvent.getEntity();&#xA;    Serializable inSessionGkey = (Serializable) session.getEdisessGkey();&#xA;    EdiMessageDirectionEnum ediDirection = EdiMessageDirectionEnum.R;&#xA;    EdiBatch currentEdiBatch = this.getLatestEdiBatch(inSessionGkey, ediDirection);&#xA;    if (currentEdiBatch == null){&#xA;       println (&quot; No EDI Batches found&quot;);&#xA;       println(&quot;MatGetStowplanTrankey Ended !&quot; + timeNow);&#xA;       return;&#xA;    } else {&#xA;       println (&quot;*********************************************************&quot;)&#xA;       println(&quot;Batch Number:&quot; + currentEdiBatch.getEdibatchNbr().toString());&#xA;       println (&quot;Batch Transaction Count:&quot; + currentEdiBatch.getTransactionCount().toString());&#xA;       List&lt;EdiTransaction&gt; tranList = this.getEdiFndr().findTxnForBatch(currentEdiBatch);&#xA;       if (tranList.size() == 0) {&#xA;         println (&quot;Batch has no transaction;&quot;)&#xA;         return;&#xA;       }&#xA;       EdiTransaction trans = tranList.get(0);&#xA;       Serializable tranGkey = trans.getEditranGkey();&#xA;&#x9;   containerId = trans.getEditranPrimaryKeywordValue();&#xA;&#x9;   println(&quot;tranList  &quot; + tranList.size() +&quot; &quot;+tranList +&quot; tranGkey &quot; + tranGkey); &#xA;       println (&quot;Transaction Primary KeyWord:&quot; + trans.getEditranPrimaryKeywordValue()+&quot; containerId &quot;+containerId);&#xA;&#xA;&#x9;   Iterator unitList = tranList.iterator();&#xA;&#x9;   println(&quot;unitList &quot;+unitList)&#xA;&#x9;&#x9;while (unitList.hasNext()) {&#xA;&#x9;&#x9;&#x9;def unit = unitList.next();&#xA;&#x9;&#x9;&#x9;def UnitId = unit.getEditranPrimaryKeywordValue();&#xA;&#x9;&#x9;&#x9;println (&quot;unitList KeyWord:&quot; + UnitId)&#xA;&#x9;&#x9;&#x9;vesVoy = attachStowplanEvent(UnitId);&#xA;&#x9;&#x9;&#x9;println(&quot;vesVoy&quot; + vesVoy);&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;return vesVoy;&#xA;   }&#xA;    println(&quot;MatGetStowplanTrankey Ended !&quot; + timeNow);&#xA;    }&#xA; &#xA;  public static EdiBatch getLatestEdiBatch(Serializable inSessionGkey, EdiMessageDirectionEnum inDirection) {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(EdiEntity.EDI_BATCH)&#xA;                .addDqPredicate(PredicateFactory.eq(EdiField.EDIBATCH_SESSION, inSessionGkey))&#xA;                .addDqPredicate(PredicateFactory.eq(EdiField.EDIBATCH_DIRECTION, inDirection))&#xA;                .addDqOrdering(Ordering.desc(EdiField.EDIBATCH_CREATED));&#xA;        List batches = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA; &#xA;        return batches != null &amp;&amp; !batches.isEmpty() ? (EdiBatch) batches.get(0) : null;&#xA;    }&#xA; &#xA;  private EdiFinder getEdiFndr() {&#xA;        return (EdiFinder) Roastery.getBean(EdiFinder.BEAN_ID);&#xA;    }&#xA; &#xA;private boolean findtranErrorMessage(Serializable inTranGkey){&#xA; &#xA;   List&lt;EdiTransaction&gt; transaction = this.findEdiTransaction(inTranGkey);&#xA;   //It is assumed that US Customs Batch always has just 1 transaction.&#xA;   boolean returnValue = false;&#xA;   EdiTransaction trans = (EdiTransaction) transaction[0];&#xA;   println (&quot;Transaction Number:&quot; + trans.getEditranControlNbr().toString());&#xA;   println(&quot; Transaction KeyWord:&quot; + trans.getEditranPrimaryKeywordValue());&#xA;   List&lt;EdiError&gt; errors =  this.findEdiError(trans);&#xA;   errors.each { EdiError error -&gt;&#xA;     println (&quot;Error Message:&quot; + error.getEdierrMessage().getMessageKey().getKey());&#xA;     if (error.getEdierrMessage().getMessageKey().getKey() == &quot;vessel.encoding_not_found&quot;){&#xA;       println (&quot; Return Value: &quot; + &quot;true&quot;);&#xA;       returnValue = true;&#xA;     }else{&#xA;       println (&quot; Return Value:&quot; + &quot;false&quot;);&#xA;       returnValue = false;&#xA;     }&#xA;   }&#xA;   return returnValue;&#xA;  }&#xA; &#xA;  private static List&lt;EdiTransaction&gt; findEdiTransaction (Serializable inTranGkey){&#xA; &#xA;      DomainQuery dq = QueryUtils.createDomainQuery(EdiEntity.EDI_TRANSACTION)&#xA;                .addDqPredicate(PredicateFactory.in(EdiField.EDITRAN_GKEY, inTranGkey));&#xA; &#xA;     return HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;    }&#xA; &#xA; &#xA;  private boolean updateBatchStatus(EdiBatch inEdiBatch){&#xA;     if (inEdiBatch == null){&#xA;       println (&quot;inEdiBatch is Null&quot;);&#xA;       return;&#xA;     }&#xA;     try{&#xA;        inEdiBatch.setEdibatchStatus(EdiStatusEnum.CANCELLED);&#xA;        HibernateApi.getInstance().saveOrUpdate(this);&#xA;     } catch (Exception e){&#xA;        println (&quot; Exception in Updating Edi Batch&quot; + e);&#xA;     }&#xA;  }&#xA; &#xA;  public static List&lt;EdiError&gt; findEdiError(EdiTransaction inTransaction){&#xA;               DomainQuery dq = QueryUtils.createDomainQuery(EdiEntity.EDI_ERROR)&#xA;                .addDqPredicate(PredicateFactory.eq(EdiField.EDIERR_TRANSACTION,inTransaction.getEditranGkey()));&#xA;        return HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;   }&#xA;  &#xA;public String attachStowplanEvent(containerId)&#xA;&#x9;&#x9;   {&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;println(&quot;Inside getUnit&quot;);&#xA;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;);&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(InventoryField.UNIT_ID,containerId)); &#xA;&#xA;&#x9;&#x9;&#x9;println(&quot;getUnit &quot;+dq);&#xA;&#x9;&#x9;&#x9;def unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println(&quot;After unitList&quot;+unitList.size());&#xA;&#xA;&#x9;&#x9;&#x9;def itemUnit = unitList.get(0);&#xA;&#xA;&#x9;&#x9;&#x9;String VesVoy = itemUnit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;String stowEventType = &quot;EDI_STOWPLAN&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;EventManager sem = (EventManager) Roastery.getBean(EventManager.BEAN_ID);&#xA;&#x9;&#x9;&#x9;EventType eventType = EventType.findEventType(stowEventType);&#xA;&#x9;&#x9;&#x9;FieldChanges fld = new FieldChanges();&#xA;&#x9;&#x9;&#x9;fld.setFieldChange(ArgoBizMetafield.EVENT_APPLIED_TO_NATURAL_KEY,  itemUnit.getUnitId());&#xA;&#x9;&#x9;&#x9;fld.setFieldChange(ArgoBizMetafield.EVENT_APPLIED_TO_GKEY, itemUnit.getPrimaryKey());&#xA;&#x9;&#x9;&#x9;fld.setFieldChange(ArgoBizMetafield.EVENT_APPLIED_TO_CLASS, itemUnit.getClass());&#xA;&#x9;&#x9;&#x9;itemUnit.recordUnitEvent(eventType, fld, null);&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;return VesVoy;&#xA;&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;   }&#xA;&#xA;}" />
<digital-asset id="GvyPPIngate" short-description="GvyPPIngate" is-pre-deployed="N" groovy-code="import com.navis.argo.business.reference.Group;&#xA;import com.navis.inventory.business.units.Routing;&#xA;&#xA;/**&#xA; * Created with IntelliJ IDEA.&#xA; * User: lcrouch&#xA; * Date: 1/9/13&#xA; * Time: 2:41 PM&#xA; * To change this template use File | Settings | File Templates.&#xA; */&#xA;public class GvyPPIngate {&#xA;&#xA;    /** If commodity code is SIT reapply DRAY status&#xA;     */&#xA;    public void setDray(Object unit) {&#xA;        println(&quot;PassPass Gate set dray&quot;);&#xA;        if(unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;).equals(&quot;SIT&quot;)) {&#xA;            unit.setFieldValue(&quot;unitDrayStatus&quot;,com.navis.argo.business.atoms.DrayStatusEnum.OFFSITE);&#xA;        }&#xA;    }&#xA;&#xA;    /** Adds group id to unit for auto-update-rule&#xA;     *  to filter from changing SIT to SAT&#xA;     */&#xA;    public void setGroup(Object unit) {&#xA;        final String GROUP_ID = &quot;PASSPASS&quot;;&#xA;        Routing routing = unit.getUnitRouting();&#xA;        if (routing == null) {&#xA;            println(&quot;PassPass Gate unitRouting is null&quot;);&#xA;        }&#xA;        Group group = routing.getRtgGroup();&#xA;        if (group == null) {&#xA;            routing.setRtgGroup(Group.findOrCreateGroup(GROUP_ID));&#xA;            println(&quot;PassPass Gate set group code to &quot;+GROUP_ID);&#xA;        } else {&#xA;            println(&quot;PassPass Gate group is already set to &quot;+group.toString());&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;" />
<digital-asset id="GvyCmisActionDetailForNewVes" short-description="GvyCmisActionDetailForNewVes" is-pre-deployed="N" groovy-code="/*&#xA;*  Change   Changer  Date       Desc&#xA;*  A1       GR       08/30/10   Commented out HazOpenCloseFlag&#xA;*  A2       GR       09/01/10   Added Additional Blank Fields for Acets (SN4Q change)&#xA;*  A3       GR       09/15/10   DUE Date Formatted&#xA;*  A4       GR       10/15/10   Added last Free Date value &amp; formatting&#xA;*           RI       05/28/13   Hardcoaded values '-snx-' for doer and lastdoer&#xA;*/&#xA;import java.text.DateFormat;&#xA;&#xA;public class GvyCmisActionDetailForNewVes {&#xA;  def gvyEventUtil = null;&#xA;&#xA;  public String doIt(Object gvyTxtMsgFmt, Object event, Object gvyBaseClass, Object unit)&#xA;  {&#xA;      String eventType =  event.getEventTypeId()&#xA;      try&#xA;     {&#xA;        println(&quot;In Class GvyCmisActionDetail.doIt()&quot;)&#xA;        //ACTION&#xA;        def action = ''&#xA;        def actionAttr = gvyTxtMsgFmt.doIt('action',action)&#xA;&#xA;        //Event Type&#xA;&#xA;        //DATE &amp; TIME&#xA;        def evtAppliedDt = event.getEvntAppliedDate()&#xA;        def zone =  unit.getUnitComplex().getTimeZone();&#xA;        gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;        def aDate  = gvyEventUtil.formatDate(evtAppliedDt,zone)&#xA;        def aTime = gvyEventUtil.formatTime(evtAppliedDt,zone)&#xA;        def aDateAttr = gvyTxtMsgFmt.doIt('aDate',aDate)&#xA;        def aTimeAttr = gvyTxtMsgFmt.doIt('aTime',aTime)&#xA;&#xA;       //DOER&#xA;       def doer = &quot;-snx-&quot;;&#xA;       /*def doer = event.getEvntAppliedBy()&#xA;       try&#xA;      {&#xA;         String[] doerArr = doer.split(&quot;:&quot;);&#xA;         if(doerArr != null)&#xA;        {&#xA;              if(doerArr.length == 1){&#xA; &#x9;doer = doerArr[0] ;&#xA;               }&#xA;               else if(doerArr.length == 2){&#xA;                     doer = doerArr[1];&#xA;                }&#xA;               else if(doerArr.length == 3){&#xA;                   doer = doerArr[1];&#xA;                }&#xA;                else if(doerArr.length &gt; 3 ){&#xA;                   doer = doerArr[2];&#xA;                 }&#xA;          }&#xA;         println(&quot;doer &gt;&gt;&quot;+doer);&#xA;         if(eventType.equals('UNIT_IN_GATE') || eventType.equals('UNIT_DELIVER'))&#xA;         {&#xA;            doer = getGateLaneIdDoer(doer,unit,gvyBaseClass,eventType)&#xA;         }&#xA;&#xA;       }catch(Exception e){&#xA;          e.printStackTrace()&#xA;       }*/&#xA;       def doerAttr = gvyTxtMsgFmt.doIt('doer',doer)&#xA;&#xA;      //SECTION CODE - Currently hardcoded&#xA;     def sectionCode = '%'&#xA;     def equiClass =unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;     def equiClassKey = equiClass != null ? equiClass.getKey() : equiClass&#xA;      if(!equiClassKey.equals('CHASSIS')){&#xA;           sectionCode = 'Z'&#xA;      }&#xA;      def sectionCodeAttr = gvyTxtMsgFmt.doIt('sectionCode',sectionCode)&#xA;&#xA;     //LAST ACTION&#xA;     def lastAction = ''&#xA;     def lastActionAttr = gvyTxtMsgFmt.doIt('lastAction',lastAction)&#xA;&#xA;     //LAST ADATE&#xA;     def lastADate = aDate&#xA;     def lastADateAttr = gvyTxtMsgFmt.doIt('lastADate',lastADate)&#xA;&#xA;     //LAST ATIME&#xA;     def lastATime = aTime&#xA;     def lastATimeAttr = gvyTxtMsgFmt.doIt('lastATime',lastATime)&#xA;&#xA;     //LAST DOER&#xA;     def lastDoer = doer&#xA;     def lastDoerAttr = gvyTxtMsgFmt.doIt('lastDoer',lastDoer)&#xA;&#xA;    //Cmis BLANK FIELDS&#xA;    def blankFieldAttr = blankFields(gvyTxtMsgFmt)&#xA;&#xA;    //Gems Blank Fields&#xA;&#x9;def gemsBlankFldAttr = gemsAdditionalFields(unit,event,gvyTxtMsgFmt,gvyBaseClass)&#xA;&#xA;    def  actionFieldAttr = actionAttr+aDateAttr+aTimeAttr+doerAttr+sectionCodeAttr+lastActionAttr+lastADateAttr+lastATimeAttr+lastDoerAttr+blankFieldAttr+gemsBlankFldAttr&#xA;&#xA;     // println('actionFieldAttr : '+actionFieldAttr)&#xA;&#xA;    return  actionFieldAttr&#xA;&#xA;     }catch(Exception e){&#xA;     e.printStackTrace()&#xA;   }&#xA;&#xA; }&#xA;&#xA;  //Appending Blank Fields For Cmis Processing  (Not Req in CMIS)&#xA;  public String blankFields(Object gvyTxtMsgFmt)&#xA; {&#xA;      //HAZFLAG OPEN/CLOSE&#xA;   /*  def hazOpenCloseFlag=''&#xA;     def hazOpenCloseFlagAttr=gvyTxtMsgFmt.doIt('hazOpenCloseFlag',hazOpenCloseFlag)*/&#xA;&#xA;    //AEI&#xA;    def aei = ''&#xA;    def aeiAttr = gvyTxtMsgFmt.doIt('aei',aei)&#xA;&#xA;    //DSS&#xA;    def _dss = '%'&#xA;    def dssAttr = gvyTxtMsgFmt.doIt('dss',_dss)&#xA;&#xA;    //ERF&#xA;    def erf = ''&#xA;    def erfAttr = gvyTxtMsgFmt.doIt('erf',erf)&#xA;&#xA;    def blankFields = aeiAttr+dssAttr+erfAttr&#xA;&#xA;     return blankFields&#xA;  }&#xA;&#xA;  public String getGateLaneIdDoer(String evntDoer, Object unit, Object gvyBaseClass,String eventType)&#xA;  {&#xA;    def doer = evntDoer&#xA;    def laneId = ''&#xA;&#xA;    def groupCode = unit.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;);&#xA;    groupCode = groupCode != null ? groupCode : ''&#xA;&#xA;    def ibCarrierVisitGkey = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvdGkey&quot;)&#xA;    def obCarrierVisitGkey = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvdGkey&quot;)&#xA;    def gvyGateObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisGateData&quot;);&#xA;    def ingateId = ibCarrierVisitGkey != null ? gvyGateObj.getGateId(ibCarrierVisitGkey) : ''&#xA;    def outgateId = obCarrierVisitGkey != null ? gvyGateObj.getGateId(obCarrierVisitGkey) : ''&#xA;&#xA;     if(doer.equals('passpass')){&#xA;             doer = '8'+doer&#xA;     }&#xA;     else if(ingateId.equals('PIER2') &amp;&amp; eventType.equals('UNIT_IN_GATE')){&#xA;             doer = '7'+doer&#xA;      }&#xA;      else if(outgateId.equals('PIER2') &amp;&amp; eventType.equals('UNIT_DELIVER')){&#xA;             doer = '9'+doer&#xA;      }&#xA;      else if(ingateId.equals('WO GATE') &amp;&amp; eventType.equals('UNIT_IN_GATE')){&#xA;              doer = '10'+doer&#xA;       }&#xA;       else if(outgateId.equals('WO GATE') &amp;&amp; eventType.equals('UNIT_DELIVER')){&#xA;              doer = '11'+doer&#xA;       }&#xA;       else if(eventType.equals('UNIT_IN_GATE')){&#xA;           laneId = gvyGateObj.getEntryLaneId(ibCarrierVisitGkey)&#xA;           doer = laneId+doer&#xA;        }&#xA;        else if(eventType.equals('UNIT_DELIVER')){&#xA;            println(&quot;doer on unit deliver ::&quot;+doer)&#xA;            laneId = gvyGateObj.getExitLaneId(obCarrierVisitGkey)&#xA;           doer = laneId+doer&#xA;        }&#xA;       return doer&#xA;  }&#xA;&#xA;  //Added Additional Fields for Gems&#xA;  public String gemsAdditionalFields(Object unit,Object event,Object gvyTxtMsgFmt,Object gvyBaseClass)&#xA;  {&#xA;&#x9;  def gemsFldAttr = '';&#xA;   try{&#xA;&#x9;def dtnAvailDt = 'null'&#xA;&#x9;def dtnDueDt = 'null'&#xA;&#x9;def lastFreeStgDt = 'null'&#xA;&#x9;def OldVesvoy = '%'&#xA;&#x9;def lineTime = '%'&#xA;&#x9;def tractorNbr = '%'&#xA;&#x9;def vNumber = '%'&#xA;&#x9;def chassAei = '%'&#xA;&#x9;def mgAei = '%'&#xA;&#x9;def chasdamageCode='%'&#xA;    def dtnAvailDtAttr=null&#xA;    def dtnDueDtAttr=null&#xA;    def lastFreeStgDtAttr=null;&#xA;   println(&quot;DATES BEFORE FIFTH &quot;+dtnAvailDt+&quot; - &quot;+&quot; - &quot;+dtnDueDt+&quot; - &quot;+lastFreeStgDt);&#xA;   dtnAvailDt = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate02&quot;)&#xA;   dtnAvailDt = gvyEventUtil.dateFormat(dtnAvailDt,'MM/dd/yyyy') //A3&#xA;   println(&quot;dtnAvailDt AFTER &quot;+dtnAvailDt)&#xA;   if (dtnAvailDt!=null &amp;&amp; !'null'.equals(dtnAvailDt)) {&#xA;&#x9;      dtnAvailDtAttr =  gvyTxtMsgFmt.doIt('availDt',dtnAvailDt)&#xA;   }&#xA;&#xA;&#xA;   dtnDueDt = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate03&quot;)&#xA;   dtnDueDt = gvyEventUtil.dateFormat(dtnDueDt,'MM/dd/yyyy') //A3&#xA;   println(&quot;dtnDueDt AFTER &quot;+dtnDueDt)&#xA;   if (dtnDueDt!=null &amp;&amp; !'null'.equals(dtnDueDt)) {&#xA;&#x9;&#x9;dtnDueDtAttr =  gvyTxtMsgFmt.doIt('dtnDueDt',dtnDueDt)&#xA;   }&#xA;&#xA;   def lastfreeDayStr = unit.getFieldValue(&quot;unitActiveUfv.ufvCalculatedLastFreeDay&quot;);&#xA;   Date lastfreeDate = getlastFreeDate(dtnAvailDt, lastfreeDayStr, gvyBaseClass)&#xA;   lastFreeStgDt = lastfreeDate != null ? gvyEventUtil.dateFormat(lastfreeDate,'MM/dd/yyyy') : lastfreeDate&#xA;   println(&quot;lastFreeStgDt AFTER &quot;+lastFreeStgDt)&#xA;   lastFreeStgDtAttr =  gvyTxtMsgFmt.doIt('lastFreeStgDt',lastFreeStgDt)&#xA;  // if (lastFreeStgDt!=null &amp;&amp; !'null'.equals(lastFreeStgDt)) {&#xA;&#x9;  // lastFreeStgDtAttr =  gvyTxtMsgFmt.doIt('lastFreeStgDt',lastFreeStgDt)&#xA;  // }&#xA;&#xA;&#xA;  // if (dtnAvailDt!=null &amp;&amp; !'null'.equals(dtnAvailDt) &amp;&amp; dtnDueDt!=null &amp;&amp; !'null'.equals(dtnDueDt) &amp;&amp; lastFreeStgDt!=null &amp;&amp; !'null'.equals(lastFreeStgDt) ) {&#xA;     if (dtnAvailDt!=null &amp;&amp; !'null'.equals(dtnAvailDt) &amp;&amp; dtnDueDt!=null &amp;&amp; !'null'.equals(dtnDueDt)) {&#xA;  &#x9;     println(&quot;IF OTHER ATTRIBUTES in ACTION DETAILS&quot;)&#xA;&#x9;     def OldVesvoyAttr =  gvyTxtMsgFmt.doIt('oldVesvoy',OldVesvoy)&#xA;&#x9;&#x9; def lineTimeAttr =  gvyTxtMsgFmt.doIt('lineTime',lineTime)&#xA;&#x9;&#x9; def tractorNbrAttr =  gvyTxtMsgFmt.doIt('tractorNbr',tractorNbr)&#xA;&#x9;&#x9; def vNumberAttr =  gvyTxtMsgFmt.doIt('vNumber',vNumber)&#xA;&#x9;&#x9; def chassAeiAttr =  gvyTxtMsgFmt.doIt('chassAei',chassAei)&#xA;         def mgAeiAttr =  gvyTxtMsgFmt.doIt('mgAei',mgAei)&#xA;         def chsDmgCodeAttr =  gvyTxtMsgFmt.doIt('chasdamageCode',chasdamageCode)&#xA;&#x9;     gemsFldAttr =  dtnAvailDtAttr+dtnDueDtAttr+lastFreeStgDtAttr+OldVesvoyAttr+lineTimeAttr+tractorNbrAttr+vNumberAttr+chassAeiAttr+mgAeiAttr+chsDmgCodeAttr&#xA;   } else {&#xA;&#x9;     println(&quot;ELSE OTHER ATTRIBUTES in ACTION DETAILS&quot;)&#xA;   }&#xA;&#xA;&#xA;   }catch(Exception e){&#xA;&#x9;   e.printStackTrace()&#xA;&#x9;&#x9;   println(&quot;Error in gemsFldAttr    &quot;+e)&#xA;   }&#xA;&#xA;&#x9;   println(&quot;gemsFldAttr:::::::::::::::&quot;+gemsFldAttr)&#xA;   return gemsFldAttr&#xA;}&#xA;&#xA;&#xA;public Date getlastFreeDate(Object availDate, String lastfreeDay, Object gvyBaseClass)&#xA;{&#xA;  Date lastFreeDate = null;&#xA;&#xA;  if(availDate == null){&#xA;     lastFreeDate = null&#xA;  }&#xA;  else if (lastfreeDay != null &amp;&amp; lastfreeDay.indexOf(&quot;no&quot;) == -1)&#xA;  {&#xA;      def gvyUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;      DateFormat formatter = new java.text.SimpleDateFormat(&quot;yyyy-MMM-dd&quot;);&#xA;      lastFreeDate = (Date)formatter.parse(lastfreeDay);&#xA;  }else if (lastfreeDay != null &amp;&amp; lastfreeDay.indexOf(&quot;no&quot;) != -1) {&#xA;       lastFreeDate = null&#xA;  }&#xA;   return lastFreeDate&#xA;}&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyCmisShipmentDetailNewVes" short-description="GvyCmisShipmentDetailNewVes" is-pre-deployed="N" groovy-code="/*&#xA;* Srno  Change Date        Desc&#xA;* A1    GR     01/29/2010  If No Avail Date the Dont pass last Free Date&#xA;* A2    GR     03/17/2010  Added ShipperId Field for DAS&#xA;* A3    GR     05/19/10    Added method for lastfreeDay to reuse in Detention Code&#xA;* A4    GR     07/13/10    Add to Fields HazDesc,HazRegs and Nbr&#xA;*/&#xA;import com.navis.inventory.business.imdg.ImdgClass&#xA;import com.navis.inventory.business.imdg.HazardItem;&#xA;import com.navis.inventory.business.imdg.Hazards;&#xA;import com.navis.inventory.business.units.GoodsBase;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;&#xA;public class GvyCmisShipmentDetailNewVes {&#xA;&#xA;public String doIt(Object gvyTxtMsgFmt, Object unit, String eventMsg, Object gvyBaseClass, Object event, Object isUnitObj)&#xA;{&#xA;  println(&quot;In Class GvyCmisShipmentDetail.doIt()&quot;)&#xA;&#xA;&#xA;   def shipmentFieldAttr = ''&#xA;   try&#xA;   {&#xA;    //BOOKING NUMBER&#xA;    def bookingNbr = getBookingNumber(unit, eventMsg)&#xA;    def bookingNbrAttr = gvyTxtMsgFmt.doIt('bookingNumber',bookingNbr)&#xA;&#xA;    //ARRDATE&#xA;    def arrDate = ''&#xA;    def arrDateAttr = gvyTxtMsgFmt.doIt('arrDate',arrDate)&#xA;&#xA;   //CONSIGNEE&#xA;   def consignee=getConsigneeValue(unit,eventMsg)&#xA;   def consigneeAttr = gvyTxtMsgFmt.doIt('consignee',consignee)&#xA;&#xA;   //SHIPPER&#xA;   def shipper = ''&#xA;   if(eventMsg.equals('COMMUNITY_SERVICE_ASSIGN')){&#xA;      shipper='COMMUNITY SERVICE'&#xA;   }else{&#xA;     shipper=unit.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuName&quot;)&#xA;     shipper = shipper != null ? shipper : unit.getFieldValue(&quot;unitGoods.gdsShipperAsString&quot;)&#xA;   }&#xA;   def shipperAttr = gvyTxtMsgFmt.doIt('shipper',shipper)&#xA;&#xA;    //SHIPPER ID&#xA;   def shipperId=unit.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuId&quot;)&#xA;   def shipperIdAttr = gvyTxtMsgFmt.doIt('shipperId',shipperId)&#xA;&#xA;   //CNEE CODE&#xA;   def consigneeId=unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuId&quot;);&#xA;   def cneeCodeAttr = gvyTxtMsgFmt.doIt('cneeCode',consigneeId)&#xA;&#xA;   //HAZF&#xA;   def isHazardous=unit.getFieldValue(&quot;unitGoods.gdsIsHazardous&quot;)&#xA;   isHazardous = isHazardous == true ? 'Y' : ''&#xA;   def hazfAttr = gvyTxtMsgFmt.doIt('hazF',isHazardous)&#xA;&#xA;   //HAZ IMDG&#xA;   def hazItem = getMostHazItem(unit)&#xA;   def mostHazItem =  hazItem != null ? hazItem.hzrdiImdgClass.key : null&#xA;   mostHazItem = mostHazItem != null &amp;&amp; mostHazItem.equals('X') ? 'HAZ' : mostHazItem&#xA;   def hazImdgAttr = gvyTxtMsgFmt.doIt('hazImdg',mostHazItem)&#xA;&#xA;   //HAZ NBR Type&#xA;   def hzrdItemNbrType = hazItem != null ? hazItem.hzrdiNbrType.key : null&#xA;   def hzrdItemNbrTypeAttr = gvyTxtMsgFmt.doIt('flex01',hzrdItemNbrType)&#xA;&#xA;   //HAZ UNNUM&#xA;   def mostHazNum = hazItem != null ? hazItem.hzrdiUNnum : ''&#xA;   def hazUnNumAttr = gvyTxtMsgFmt.doIt('hazUnNum',mostHazNum)&#xA;&#xA;   //HazDesc&#xA;   def hazardItemDesc = hazItem != null ? hazItem.getDescription() : null&#xA;   def hazardItemDescAttr = gvyTxtMsgFmt.doIt('hazDesc',hazardItemDesc)&#xA;   if(hazardItemDesc != null){&#xA;      hazardItemDesc = hazardItemDesc.indexOf(' ') != -1 ? hazardItemDesc.substring(hazardItemDesc.indexOf(' ')+1) : null&#xA;   }&#xA;   //HazReg&#xA;   def hazardItemRegs = hazardItemDesc != null ? (hazardItemDesc.contains('Liquid') ? 'DOT' : 'IMO') : ''&#xA;   def hazardItemRegsAttr = gvyTxtMsgFmt.doIt('hazRegs',hazardItemRegs)&#xA;&#xA;&#xA;   //LOCATION CATEGORY - LAST FREE DATE - YY DOY&#xA;  def lastfreeDay = unit.getFieldValue(&quot;unitActiveUfv.ufvCalculatedLastFreeDay&quot;);&#xA;  def availDate=unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate02&quot;) //A1&#xA;  lastfreeDay = getlastFreeDate(availDate, lastfreeDay, gvyBaseClass)&#xA;  def locationCategoryAttr = gvyTxtMsgFmt.doIt('locationCategory',lastfreeDay)&#xA;&#xA;    //CONSIGNEE PO&#xA;    def consigneePo=unit.getFieldValue(&quot;unitFlexString01&quot;)&#xA;    def consigneePoAttr = gvyTxtMsgFmt.doIt('consigneePo',consigneePo)&#xA;&#xA;     //RESTOW&#xA;     def restow = unit.getFieldValue(&quot;unitActiveUfv.ufvRestowType&quot;)&#xA;     restow = restow != null ? restow.getKey() : ''&#xA;     def restowAttr = gvyTxtMsgFmt.doIt('restow',restow)&#xA;&#xA;   shipmentFieldAttr = bookingNbrAttr+consigneeAttr+shipperAttr+cneeCodeAttr+hazfAttr+hazImdgAttr+hazUnNumAttr+locationCategoryAttr+arrDateAttr+consigneePoAttr+restowAttr+shipperIdAttr+hazardItemDescAttr+hazardItemRegsAttr&#xA;  }catch(Exception e){&#xA;    e.printStackTrace()&#xA;  }&#xA;  //println('shipmentFieldAttr : '+shipmentFieldAttr)&#xA;&#xA;  return shipmentFieldAttr;&#xA;&#xA;}&#xA;&#xA; public String getlastFreeDate(Object availDate, String lastfreeDay, Object gvyBaseClass){&#xA;&#xA;  if(availDate == null){&#xA;     lastfreeDay = ''&#xA;  }&#xA;  else if (lastfreeDay != null &amp;&amp; lastfreeDay.indexOf(&quot;no&quot;) == -1)&#xA;  {&#xA;      def gvyUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;      lastfreeDay = formatDate(lastfreeDay)&#xA;      lastfreeDay =  gvyUtil.convertToJulianDate(lastfreeDay)&#xA;  }else if (lastfreeDay != null &amp;&amp; lastfreeDay.indexOf(&quot;no&quot;) != -1) {&#xA;       lastfreeDay = ''&#xA;  }&#xA;   return lastfreeDay&#xA; }&#xA;&#xA; //Retrieves the Consignee Value&#xA; public String getConsigneeValue(Object unit, String eventMsg)&#xA; {&#xA;   def fmtConsigneeVal = ''&#xA;   try&#xA;   {&#xA;   def consignee=unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzunit.bzuName&quot;)&#xA;   consignee  = consignee != null ? consignee : unit.getFieldValue(&quot;unitGoods.gdsConsigneeAsString&quot;)&#xA;   consignee = consignee != null ? consignee : &quot;&quot;&#xA;  def releaseToParty = unit.getFieldValue(&quot;unitFlexString02&quot;)&#xA;//  releaseToParty  =  releaseToParty != null ? (releaseToParty.length() &gt;10 ? //releaseToParty.substring(0,10) : releaseToParty) : &quot;&quot;&#xA;   releaseToParty  =  releaseToParty != null ? releaseToParty : &quot;&quot;&#xA;&#xA;   if(eventMsg.equals('COMMUNITY_SERVICE_ASSIGN')){&#xA;      consignee= releaseToParty&#xA;   }&#xA;  else if(consignee.startsWith(&quot;PACIFIC TRANSPORTATION LINES&quot;) &amp;&amp; releaseToParty.length() &gt; 0){&#xA;         consignee= releaseToParty.length() &gt; 0 ? &quot;PAC TRAN LINES%&quot;+releaseToParty :&#xA;&#x9; &quot;PAC TRAN LINES&quot;&#xA;   }&#xA;   else{&#xA;       consignee= releaseToParty.length() &gt; 0 ? consignee+&quot;%&quot;+releaseToParty : consignee&#xA;   }&#xA;   fmtConsigneeVal = formatConsigneeSize(consignee);&#xA;   }catch(Exception e){&#xA;        e.printStackTrace();&#xA;   }&#xA;   return fmtConsigneeVal;&#xA;&#xA; }&#xA;&#xA;  private String formatConsigneeSize(String _consignee)&#xA;  {&#xA;    String consigneeVal = null;&#xA;    try&#xA;    {&#xA;      String consignee = _consignee;&#xA;      if(consignee != null &amp;&amp; consignee.length() &gt; 35)&#xA;      {&#xA;          int conLength = consignee.length();&#xA;          int perIndex = consignee.indexOf(&quot;%&quot;);&#xA;          int stripIndex = conLength - 35;&#xA;          if(perIndex &gt; 0 &amp;&amp; perIndex - stripIndex &gt; 0){&#xA;             consigneeVal = consignee.substring(0, perIndex - stripIndex)+consignee.substring(perIndex);&#xA;           }else{&#xA;              consigneeVal =  consignee.substring(0,35);&#xA;            }&#xA;        }else{&#xA;           consigneeVal =  consignee;&#xA;        }&#xA;     }catch(Exception e){&#xA;         e.printStackTrace();&#xA;     }&#xA;  return consigneeVal;&#xA; }&#xA;&#xA; //Method formats date to yyyy-MM-dd&#xA;  public static String formatDate(String str_date)&#xA;  {&#xA;       java.text.DateFormat formatter = null ; Date date = null;  String finalDate = null;&#xA;        try&#xA;        {&#xA;            formatter = new java.text.SimpleDateFormat(&quot;yyyy-MMM-dd&quot;);&#xA;            date = (Date)formatter.parse(str_date);&#xA;            def reqformat = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;            finalDate = reqformat.format(date);&#xA;        }catch(Exception e){&#xA;             e.printStackTrace();&#xA;        }&#xA;        return finalDate;&#xA;    }&#xA;&#xA;&#xA;  public String getBookingNumber(Object unit, String eventMsg){&#xA;   def bookingNbr = ''&#xA;   try{&#xA;    //BOOKING NUMBER&#xA;    bookingNbr = unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;)&#xA;    bookingNbr = bookingNbr != null ? bookingNbr : ''&#xA;    def equiOperator=unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOperator.bzuId&quot;)&#xA;    equiOperator = equiOperator != null ? equiOperator : ''&#xA;    if((eventMsg.equals(&quot;UNIT_IN_GATE&quot;) || eventMsg.equals(&quot;UNIT_RECEIVE&quot;)) &amp;&amp; equiOperator.equals('MAT')){&#xA;       bookingNbr = bookingNbr.length() &gt; 7 ? bookingNbr.substring(0,7) : bookingNbr&#xA;     }&#xA;   }&#xA;   catch(Exception e){&#xA;      e.printStackTrace()&#xA;   }&#xA;    return bookingNbr&#xA; }&#xA;&#xA;&#xA;public HazardItem getMostHazItem(Object unit)&#xA;{&#xA;  HazardItem hazardIt = null;&#xA;  try&#xA;  {&#xA;    Hazards hazards = unit.getUnitGoods().getGdsHazards();&#xA;    int count = 0;&#xA;    if (hazards != null)&#xA;    {&#xA;      Iterator iterator = hazards.getHazardItemsIteratorOrderedBySeverity();&#xA;      for (aHazItem in iterator) {&#xA;        hazardIt = (HazardItem)aHazItem;&#xA;&#x9;&#x9;return hazardIt;&#xA;      }&#xA;    }&#xA;   }catch(Exception e){&#xA;      e.printStackTrace()&#xA;   }&#xA;   return hazardIt&#xA; }&#xA;&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyNizComplete" short-description="GvyNizComplete" is-pre-deployed="N" groovy-code="/**&#xA; * Srno  date       doer    change&#xA; * A1   03/19/2014  KR      Send NIZ_COMPLETE message to Gems&#xA; * A2   03/21/2014&#x9;RI      Send NIZ_COMPLETE message to MNS and send notifications&#xA; *&#xA; */&#xA;import com.navis.argo.business.atoms.CarrierVisitPhaseEnum;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;import com.navis.framework.util.DateUtil;&#xA;import com.navis.argo.business.atoms.DrayStatusEnum&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.road.business.model.TruckingCompany&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.argo.ContextHelper;&#xA;import org.apache.log4j.Logger&#xA;&#xA;public class GvyNizComplete extends GroovyInjectionBase {&#xA;    public void sendNizComplete(Object event, Object api) {&#xA;        LOGGER.warn(&quot;BEGIN : GvyNizComplete.sendNizComplete()&quot;)&#xA;        def emailSender = api.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;        LOGGER.warn(&quot;Waiting....&quot;)&#xA;        Thread.sleep(5000)&#xA;        def unit = event.getEntity();&#xA;        def visitId = null;   def vesClass = null;&#xA;        def fcy = null; def ufv = null; def isYBbarge = false;  def nextFacility = null;&#xA;        def availDate = null;&#xA;        try {&#xA;            fcy = ContextHelper.getThreadFacility();&#xA;            ufv = unit.getUfvForFacilityCompletedOnly(fcy); //If Departed get facility ufv&#xA;            if(ufv == null){&#xA;                ufv = unit.unitActiveUfv; //Assign ufv from Facility Active unit&#xA;            }&#xA;            if(event.event.eventTypeId.equals(&quot;NIS_CODING_COMPLETE_LH&quot;)){&#xA;                visitId = ufv.getFieldValue(&quot;ufvActualIbCv.cvId&quot;)&#xA;                vesClass = ufv.getFieldValue(&quot;ufvActualIbCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;                vesClass = vesClass != null ? vesClass.getKey() : ''&#xA;            }else{&#xA;                visitId = ufv.getFieldValue(&quot;ufvActualObCv.cvId&quot;)&#xA;                vesClass = ufv.getFieldValue(&quot;ufvActualObCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;                vesClass = vesClass != null ? vesClass.getKey() : ''&#xA;                nextFacility = ufv.getFieldValue(&quot;ufvActualObCv.cvNextFacility.fcyId&quot;)&#xA;&#xA;                //YB Code&#xA;                def visitIntId = ufv.getFieldValue(&quot;ufvIntendedObCv.cvId&quot;)&#xA;                if(visitIntId != null &amp;&amp; visitIntId.startsWith('YB')){&#xA;                    isYBbarge = true;&#xA;                    nextFacility = ufv.getFieldValue(&quot;ufvIntendedObCv.cvNextFacility.fcyId&quot;);&#xA;                    def aobcarrierMode=ufv.getFieldValue(&quot;ufvActualObCv.cvCarrierMode&quot;)&#xA;                    aobcarrierMode = aobcarrierMode != null ? aobcarrierMode.getKey() : ''&#xA;                    def intVesClass = ufv.getFieldValue(&quot;ufvIntendedObCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;                    intVesClass = intVesClass != null ? intVesClass.getKey() : ''&#xA;                    //if('TRUCK'.equals(aobcarrierMode)){ // Always use OB Intended for YB barges&#xA;                        visitId = visitIntId;&#xA;                        vesClass = intVesClass;&#xA;                    //}&#xA;                }&#xA;            }//Else Ends&#xA;            def port = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;            port = 'KHI'.equals(port) ? 'HIL' : port&#xA;            GroovyInjectionBase gvybase = new GroovyInjectionBase()&#xA;            def evtAppliedDt = event.event.getEvntAppliedDate()&#xA;            def zone = com.navis.argo.ContextHelper.getThreadUserTimezone()&#xA;            def gvyEventUtil =  gvybase.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;            def aDate  = gvyEventUtil.formatDate(evtAppliedDt,zone)&#xA;            def aTime = gvyEventUtil.formatTime(evtAppliedDt,zone)&#xA;            String dateFormat = &quot;yyyy-MM-dd'T'HH:mm:ss&quot;;&#xA;            String mnsDate = gvyEventUtil.formatDateTime(evtAppliedDt, zone, dateFormat)&#xA;&#xA;            String gemsMsg = &quot;&lt;GroovyMsg vesvoy='&quot;+visitId+&quot;' action='NIZ' aTime='&quot;+aTime+&quot;' doer='TOS' aDate='&quot;+aDate+&quot;' msgType='NIZ_COMPLETE'  dPort='&quot;+port+&quot;' /&gt;&quot;&#xA;&#x9;&#x9;&#x9;String mnsMsg = &quot;&lt;new-vessel source-system='TOS' vvd='&quot;+visitId+&quot;' port-code='&quot;+port+&quot;' date-time='&quot;+mnsDate+&quot;' status='COMPLETE' /&gt;&quot;;&#xA;&#xA;            //3. Post Direct to MNS&#xA;            def jmsQueueSender = api.getGroovyClassInstance(&quot;JMSQueueSender&quot;)&#xA;            LOGGER.warn( &quot;Posting to jms/queue/oceanevent/newvess/ni/inbound&quot;);&#xA;            jmsQueueSender.setMnsQueue(&quot;jms/queue/oceanevent/newvess/ni/inbound&quot;);&#xA;            jmsQueueSender.send(mnsMsg);&#xA;&#xA;            //Post Direct to Gems&#xA;            jmsQueueSender.setMnsQueue(&quot;n4.gems.eq.events&quot;);&#xA;            jmsQueueSender.send(gemsMsg);&#xA;&#xA;&#x9;&#x9;&#x9;//Success Email&#xA;&#x9;&#x9;&#x9;//def sub = &quot;Trucker coding sucessfully completed for &quot;+visitId;&#xA;&#x9;&#x9;&#x9;//def portToEmail = getEmialId(nextFacility);&#xA;           // emailSender.custSendEmail(portToEmail, sub, sub);&#xA;&#xA;            LOGGER.warn(&quot;GemsNIZMsg=&quot;+gemsMsg);&#xA;            LOGGER.warn(&quot;MnsNIZMsg=&quot;+mnsMsg);&#xA;        }&#xA;        catch(Exception ex) {&#xA;            ex.printStackTrace();&#xA;            log(ex.getMessage());&#xA;        }&#xA;        LOGGER.warn(&quot;END : GvyNizComplete.sendNizComplete()&quot;)&#xA;    }&#xA;&#xA;    public String getEmialId(String port){&#xA;&#xA;        String emailId = getReferenceValue(&quot;TRCK_CODING_&quot;+port, &quot;TRCK_CODING_&quot;+port, null, null, 1)  //A16&#xA;        if(emailId == null){ return &quot;1tosdevteamhon@gmail.com&quot; }&#xA;        return emailId&#xA;    }&#xA;&#xA;    private static final Logger LOGGER = Logger.getLogger(GvyNizComplete.class);&#xA;&#xA;}&#xA;" />
<digital-asset id="GvyAuditDischargeCompleteTestUnits" short-description="GvyAuditDischargeCompleteTestUnits" is-pre-deployed="N" groovy-code="/*&#xA;*  A1   KM   02/10/2011     Initial groovyPlugins for vessel (long haul/barges) discharge audit&#xA;*                           Sends out Client discharge report&#xA;*  A2   GR                  Last container discharge report&#xA;*  A3   PS                  Sends out confirmation notice that discharge audit is complete&#xA;*  A4   GR                  Altered Query last DFV Rpt(no through cntr,no mty cntr,no pier29 cntr)&#xA;                            changed query to lookup on actual IB visit&#xA;*  A5   GR                  Changed Obcarrier to vessel visit IBvesvoy&#xA;*  A6   GR                  Check line operator split&#xA;*  A7   GR   05/02/11       Made Code Generic to Handel Load and Discharge function&#xA;*  A8   GR   05/02/11       For Load units change sorting by timeOut&#xA;*  A9   GR   05/02/11       For Load units change sort by last moved&#xA;*  A10  GR   05/04/11       Set Client unit Timezone, Hardcode HON as Facilty, Status=FreightKind&#xA;*  A11  GR   05/20/11       Adding rob,dfv COUNTS&#xA;*  A12  GR   05/23/11       OnDeck, Below Deck addition&#xA;*  A13  GR   05/24/11       Defect picking up Retired unit. Added Filter&#xA;*  A14  GR   05/25/11       Check Nullpointer Exception&#xA;*  A15  GR   05/26/11       FIX Replaced TimeIn with UfvFlexDate4 a)Correct Discharge b) Client Restow unit&#xA;*  A16  GR   06/15/11       Filter out Through Contianers from Client Cntr report&#xA;*  A17  GR   06/28/11       Trailer Report to Accouting&#xA;*  A18  KM   07/08/11       Split email audit pau and trailer report&#xA;*  A19&#x9;GR   07/12/11       Set OBcarrier for Client Reports&#xA;*  A20  KM   09/12/11       Updated prod emails addresses&#xA;* 08/16/11 2.1 Updated Email Method&#xA;* 08/14/2013 Fix the ROB list count to include all THROUGHs, remove the DEPARTED or LOADED condition&#xA;* 08/16/2013 Add filter to query for advised, retired&#xA;* 08/20/2013 Add filters for Discharge, fix ROB list count&#xA;*/&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;import java.util.HashMap&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;import com.navis.argo.business.atoms.FreightKindEnum;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.api.EventManager&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;&#xA;&#xA;public class GvyAuditDischargeCompleteTestUnits extends GroovyInjectionBase&#xA;{&#xA;    private String outBoundCarrierId = null&#xA;    def inj = null;&#xA;    def gvyEventUtil = null;&#xA;    HashMap mapDisplayLst = new HashMap(); //A2&#xA;    def reportType = null;&#xA;    def timezone = null;&#xA;    List totalUnitList = null;&#xA;    private static final String eol = &quot;\r\n&quot;;&#xA;    def rptFieldSortUtil = null;&#xA;    def event = null;&#xA;    HashMap mapTrailer = new HashMap();&#xA;    def emailTo = '1TOSDevTeamHONProd@gmail.com'  //A20&#xA;    def acctEmail = '1TOSDevTeamHONProd@gmail.com'&#xA;    def trailerCnt = 0;&#xA;    def vesselForDischId = null;&#xA;&#xA;    public String checkForMultipleDischarges(){&#xA;        //1. Check if unit has Multiple discharge events&#xA;        //2. if Multiple discharge then drop out of list&#xA;        //3. resort for last discharge value&#xA;        //4. Return last disch unit&#xA;    }&#xA;&#xA;    public String checkForRestowUnit(){&#xA;        //1. check if its a restow unit then drop it out of the list&#xA;    }&#xA;&#xA;    public void init(){&#xA;        inj = new GroovyInjectionBase();&#xA;        gvyEventUtil = gvyEventUtil == null ? inj.getGroovyClassInstance(&quot;GvyEventUtil&quot;) : gvyEventUtil ;&#xA;        timezone = ContextHelper.getThreadUserTimezone();&#xA;    }&#xA;&#xA;    public boolean processClientDischarge(Object eventObj, String rptType)&#xA;    {&#xA;        //1. lookup all units on Board&#xA;        //2. Fetch and Map information&#xA;        //3. Generate Report&#xA;        init() // Initialize Global variable&#xA;&#xA;        try&#xA;        {&#xA;            def visit = eventObj.getEntity();&#xA;            reportType = rptType;&#xA;            event = eventObj&#xA;&#xA;            //getEmail Grp List&#xA;            def nextFacility = visit.getFieldValue(&quot;cvdCv.cvNextFacility.fcyId&quot;)&#xA;            def facility = visit.getFieldValue(&quot;cvdCv.cvFacility.fcyId&quot;)&#xA;&#xA;            //outBoundCarrierId =  visit.cvdCv&#xA;            outBoundCarrierId = visit.vvdVessel.vesId+visit.getFieldValue(&quot;vvdObVygNbr&quot;) //A5&#xA;            //if outbound carrier is YB just return   check for client vessels if yes filter out client service&#xA;            if(outBoundCarrierId.startsWith('YB')){&#xA;                return null;&#xA;            }&#xA;            // A1 need to find method of discharge units&#xA;            List dfvUnits = findAllClientUnits(visit, rptType)&#xA;            //println(&quot;dfv Unit list &quot;+dfvUnits)&#xA;            // A2 need to find on client units&#xA;            if(dfvUnits != null &amp;&amp; dfvUnits.size() &gt; 0){&#xA;                List sortDfvUnits = sortUnitsByLineOp(dfvUnits)&#xA;                //println(&quot;sort dfv Unit list &quot;+sortDfvUnits)&#xA;                // A3 group line operators togethers&#xA;                // A4 add report creation and emailing spcecific to line operator&#xA;                procClientCntr(sortDfvUnits)&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;    /*&#xA;    * Method finds all NON-MAT Container and Add the cntrs to a list&#xA;    * Returns a List of containers&#xA;    */&#xA;    public List findAllClientUnits(Object vesVisit, String rptType)&#xA;    {&#xA;        ArrayList vesVistUnitLists = new ArrayList();&#xA;        try{&#xA;            Long lineOpGkey = LineOperator.findLineOperatorById(&quot;MAT&quot;).bzuGkey&#xA;            //Long cvGkey = vesVisit.getCvdCv().getCvGkey()&#xA;            def id = vesVisit.getCvdCv().getCvId()&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;            if('DISCHARGE'.equals(rptType)){&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, id));&#xA;            }else if ('LOAD'.equals(rptType)){&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID, id));&#xA;            }&#xA;            dq = dq.addDqPredicate(PredicateFactory.ne(UnitField.UFV_LINE_OPERATOR_GKEY, lineOpGkey)).addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY, UnitCategoryEnum.THROUGH)).addDqOrdering(Ordering.asc(UnitField.UFV_LINE_OPERATOR_GKEY));  //A17&#xA;            List vesVistUnits  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            println(&quot;dq ====&quot;+dq+&quot; unitsList ====&quot;+(vesVistUnits != null ? vesVistUnits.size() : &quot;NO RESULT&quot;));&#xA;&#xA;            if('DISCHARGE'.equals(rptType)){&#xA;                vesVistUnitLists.addAll(vesVistUnits);&#xA;            } else if ('LOAD'.equals(rptType)){&#xA;                Iterator iter = vesVistUnits.iterator();&#xA;                while(iter.hasNext()) {&#xA;                    def ufv = iter.next();&#xA;                    def transitState =  ufv.getUfvTransitState()&#xA;                    if (transitState != null) {&#xA;                        transitState = transitState != null ? transitState.getKey() : ''&#xA;                        def tState = transitState.split(&quot;_&quot;)&#xA;                        transitState = tState[1]&#xA;                    }&#xA;&#xA;                    if (transitState != null &amp;&amp; (&quot;DEPARTED&quot;.equals(transitState) || &quot;LOADED&quot;.equals(transitState) ))&#xA;                    {&#xA;                        vesVistUnitLists.add(ufv)&#xA;                    }&#xA;                }&#xA;&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return vesVistUnitLists&#xA;    }&#xA;&#xA;    //1.Maps unit Data to report file attribute&#xA;    public HashMap populateUnitData(UnitFacilityVisit ufv)&#xA;    {&#xA;        def unit = ufv.ufvUnit&#xA;        def transitState=unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;        if(ufv.ufvTimeIn == null){ //A14&#xA;            return  null;  // Would be a Through unit&#xA;        }&#xA;&#xA;        HashMap map = null;&#xA;        try&#xA;        {&#xA;            map = new HashMap();&#xA;            map.put(&quot;UnitNbr&quot;, unit.getFieldValue(&quot;unitId&quot;));&#xA;            map.put(&quot;PositionSlot&quot;, unit.unitFreightKind.name);&#xA;            map.put(&quot;POD&quot;, unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;));&#xA;            map.put(&quot;POL&quot;, unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;));&#xA;            map.put(&quot;EquipmentType&quot;, unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;));&#xA;            map.put(&quot;OutBoundCarrierId&quot;, outBoundCarrierId);&#xA;            map.put(&quot;LineOperator&quot;,unit.getFieldValue(&quot;unitLineOperator.bzuId&quot;));&#xA;            map.put(&quot;Destination&quot;,unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;));&#xA;            //A8&#xA;            if('DISCHARGE'.equals(reportType)){&#xA;                map.put(&quot;InTime&quot;,ContextHelper.formatTimestamp(ufv.ufvTimeIn, timezone));&#xA;            }else if ('LOAD'.equals(reportType)){&#xA;                map.put(&quot;InTime&quot;,ContextHelper.formatTimestamp(ufv.ufvTimeOfLastMove, timezone));&#xA;            }&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return map;&#xA;    }&#xA;    /*&#xA;    * Method sorts NON-MAT Container by Line Operator and created Individial list of each LineOperator&#xA;    * Returns List of Individual LineOperator List (example: ListOne=ALL MAE,ListTwo=ALL HCL,ListThree=ALL APL)&#xA;    */&#xA;    public List sortUnitsByLineOp(List unitList)&#xA;    {&#xA;        ArrayList listAllLineOp = new ArrayList();&#xA;        try{&#xA;            def aUfv = null;&#xA;            def prevLineOp = null;&#xA;            ArrayList listPerLineOp = null;&#xA;            Iterator itUnitList = unitList.iterator();&#xA;            while(itUnitList.hasNext()){&#xA;                aUfv = itUnitList.next();&#xA;                if(aUfv.ufvUnit.unitLineOperator.bzuId.equals(prevLineOp)){&#xA;                    listPerLineOp.add(aUfv);&#xA;                }else{&#xA;                    if(prevLineOp !=null){&#xA;                        listAllLineOp.add(listPerLineOp)&#xA;                    }&#xA;                    //First time it ill come here and createObject - Initialize new Variable&#xA;                    listPerLineOp = new ArrayList();&#xA;                    //Set new Variable&#xA;                    listPerLineOp.add(aUfv);&#xA;                } //Else Ends&#xA;                prevLineOp = aUfv.ufvUnit.unitLineOperator.bzuId&#xA;            } //While Ends&#xA;            //Add last loop values - Just incase there was only one unit and it went into the else loop&#xA;            listAllLineOp.add(listPerLineOp)&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return listAllLineOp&#xA;    }&#xA;    /*&#xA;    * Method a) Reads Each Individual LineOperator conatiner list&#xA;    * b) Populates Report data&#xA;      c) Gets Line Operator contact Information&#xA;      d) Calls Ireport code and mails report to specific LineOperator Email&#xA;    */&#xA;    public void procClientCntr(List list){&#xA;        try{&#xA;            Iterator itUnitList = list.iterator();&#xA;            def aUfv  = null;&#xA;            while(itUnitList.hasNext()){&#xA;                def contactName = null;&#xA;                HashMap fmtMap = null;&#xA;                def contactEmail = &quot;1TOSDevTeamHONProd@gmail.com&quot;;&#xA;                ArrayList rptUnitList = new ArrayList();&#xA;                ArrayList perLinOplist = itUnitList.next();&#xA;                Iterator  itperLinOp = perLinOplist.iterator();&#xA;                while(itperLinOp.hasNext()){&#xA;                    aUfv = itperLinOp.next();&#xA;                    //println(&quot;unitId=&quot;+aUfv.ufvUnit.unitId+&quot;    LineOP=&quot;+aUfv.ufvUnit.unitLineOperator.bzuId)&#xA;                    //Populate Report Data&#xA;                    fmtMap = populateUnitData(aUfv)&#xA;                    if(fmtMap != null){&#xA;                        rptUnitList.add(fmtMap)&#xA;                    }&#xA;                }//Inner While Ends&#xA;&#xA;                //Select LineOperator Contact Information&#xA;                if(aUfv != null){&#xA;                    def lineOperator = aUfv.ufvUnit.unitLineOperator&#xA;                    def contactInfo = lineOperator.bzuCtct&#xA;                    if(contactInfo != null){&#xA;                        contactName = contactInfo.ctctName&#xA;                        contactEmail = contactInfo.ctctEmailAddress&#xA;                    }//Outer While ends&#xA;&#xA;                    //Call IReport Generation Code Here&#xA;                    processRpt(rptUnitList, contactName, contactEmail)&#xA;                    //println(&quot;--------------------------------------------------&quot;)&#xA;                    //println(&quot;--------------------------------------------------&quot;)&#xA;                }// If Ends&#xA;            } //While Ends&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;    public void processRpt(List unitList, String contactName, String contactEmail){&#xA;        try{&#xA;            println(&quot;unitList :&quot;+ (unitList != null ? unitList.size() : &quot;EMPTY&quot;))&#xA;&#xA;            //Set Report Parameter&#xA;            def reportDesignName = null;&#xA;            def displayType = null;&#xA;            HashMap parameters = new HashMap();&#xA;            HashMap parametersUnits = new HashMap();&#xA;            String strDate = ContextHelper.formatTimestamp(new Date(), timezone)&#xA;&#xA;            //println(&quot;Event Time ::&quot;+event.getEvent().getEventTime()+&quot;    TimeZone:&quot;+ContextHelper.getThreadUserTimezone()+&quot;  strDate ::&quot;+strDate)&#xA;            parameters.put(&quot;Date&quot;,strDate);&#xA;            parameters.put(&quot;recordCount&quot;,(unitList != null ? unitList.size() : 0))&#xA;&#xA;            //A7&#xA;            if(&quot;DISCHARGE&quot;.equals(reportType)){&#xA;                reportDesignName = &quot;CLIENT DISCHARGE AUDIT&quot;;&#xA;                displayType = &quot;Discharge&quot;;&#xA;&#xA;            }else if(&quot;LOAD&quot;.equals(reportType)){&#xA;                reportDesignName = &quot;CLIENT LOAD AUDIT&quot;;&#xA;                displayType = &quot;Load&quot;;&#xA;            }&#xA;&#xA;            //A401&#xA;            def gvyRptUtil = getGroovyClassInstance(&quot;ReportFieldSortUtil&quot;)&#xA;            if(unitList != null &amp;&amp; unitList.size() &gt; 0){&#xA;                unitList =  gvyRptUtil.processFieldSort(unitList,&quot;EquipmentType,UnitNbr&quot;)&#xA;                Map mapList = (Map)unitList.get(0);&#xA;                println(&quot;mapList=&quot;+mapList);&#xA;                //Create and Mail Report&#xA;                JRDataSource ds = new JRMapCollectionDataSource(unitList);&#xA;                def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;                reportRunner.emailReport(ds, parameters, reportDesignName, contactEmail, &quot;Matson Client Report - &quot; +outBoundCarrierId+&quot; &quot;+displayType, &quot;Attached is the &quot;+outBoundCarrierId+ &quot; &quot;+displayType+&quot; report&quot;);&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;    } //method ends&#xA;&#xA;    //A2 -- Starts last discharge report&#xA;    public boolean processLastDischCntrRpt(event, String rptType){&#xA;        init() // Initialize Global variable&#xA;        HashMap mapAuto = new HashMap();&#xA;        HashMap mapCyHon = new HashMap();&#xA;        HashMap mapCyOthers = new HashMap();&#xA;        //A7&#xA;        reportType = reportType == null ? rptType : reportType&#xA;        def units = null;&#xA;        println(&quot;processLastDischCntrRpt begin&quot;)&#xA;        try{&#xA;            inj = new GroovyInjectionBase();&#xA;            def visit = event.getEntity();&#xA;            def carrierId =  visit.cvdCv&#xA;&#xA;            if(&quot;BARGE&quot;.equals(visit.vvdVessel.vesVesselClass.vesclassVesselType.name)) {&#xA;                return;&#xA;            }&#xA;            units = findAllUnitsForVesVoy(visit)&#xA;&#xA;            Iterator iter = units.iterator();&#xA;            def ufv = null; def unit = null;  def dest = null; def commodity = null;&#xA;            def timeIn = null; def aibcarrierId = null;&#xA;            while(iter.hasNext()) {&#xA;                ufv = iter.next();&#xA;                unit = ufv.ufvUnit&#xA;                println(&quot;unit number is &quot;+unit.getFieldValue(&quot;unitId&quot;))&#xA;                if(unit.unitActiveUfv == null || UnitVisitStateEnum.RETIRED.equals(unit.unitActiveUfv.ufvVisitState) || UnitVisitStateEnum.ADVISED.equals(unit.unitActiveUfv.ufvVisitState)){&#xA;                    continue;&#xA;                }&#xA;                dest = unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;)&#xA;                commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;)&#xA;                commodity = commodity != null ? commodity : ''&#xA;                //A8&#xA;                if(&quot;DISCHARGE&quot;.equals(reportType)){&#xA;                    timeIn = ufv.ufvTimeIn&#xA;                }else if (&quot;LOAD&quot;.equals(reportType)){&#xA;                    timeIn = ufv.ufvTimeOfLastMove&#xA;                }&#xA;                def lkpSlot = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;                lkpSlot = lkpSlot!= null ? lkpSlot : ''&#xA;                println(&quot;unit &quot;+unit.getFieldValue(&quot;unitId&quot;)+&quot; commodity &quot;+commodity+&quot; lkpSlot&quot;+lkpSlot+&quot; dest&quot;+dest)&#xA;                def lkpSlotValue = lkpSlot.indexOf(&quot;.&quot;)== -1 ? lkpSlot : lkpSlot.substring(0,lkpSlot.indexOf(&quot;.&quot;));&#xA;                println(&quot;exception in the above unit  &quot;+lkpSlotValue);&#xA;                boolean pier29Loc = lkpSlotValue.startsWith('P29') || lkpSlotValue.startsWith('29Z') ? true : false&#xA;                println(&quot;unit &quot;+unit.getFieldValue(&quot;unitId&quot;)+&quot; commodity &quot;+commodity+&quot; timeIn &quot;+timeIn+&quot; dest &quot;+dest+&quot; pier29Loc &quot;+pier29Loc)&#xA;                if(commodity.contains('AUTO') &amp;&amp; timeIn != null) {&#xA;                    mapAuto.put(ufv, timeIn)&#xA;                }else if (!commodity.contains('AUTO') &amp;&amp; !pier29Loc &amp;&amp; 'HON'.equals(dest) &amp;&amp; timeIn != null){&#xA;                    mapCyHon.put(ufv, timeIn)&#xA;                }else if(!commodity.contains('AUTO') &amp;&amp;  !pier29Loc &amp;&amp; !'HON'.equals(dest) &amp;&amp; timeIn != null){&#xA;                    mapCyOthers.put(ufv, timeIn)&#xA;                }&#xA;&#xA;            }&#xA;            println(&quot;flow comes here ===&quot;)&#xA;            //println(&quot;  mapAuto.size() ===&quot;+ mapAuto.size()+&quot; mapCyHon.size() ===&quot;+mapCyHon.size()+&quot; mapCyOthers.size() ===&quot;+mapCyOthers.size())&#xA;            //Sort Map Object&#xA;            rptFieldSortUtil = rptFieldSortUtil != null ? rptFieldSortUtil : inj.getGroovyClassInstance(&quot;ReportFieldSortUtil&quot;);&#xA;            mapAuto = mapAuto != null &amp;&amp; mapAuto.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapAuto) : null //sort Auto&#xA;            mapCyHon = mapCyHon!= null &amp;&amp; mapCyHon.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapCyHon) : null //sort CyHon&#xA;            mapCyOthers = mapCyOthers != null &amp;&amp; mapCyOthers.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapCyOthers) : null //sort CyNonHon&#xA;&#xA;            //last Disch Units&#xA;            def ufvAuto = getLastDischUnit(mapAuto,&quot;&quot;);&#xA;            def ufvCyHon = getLastDischUnit(mapCyHon,&quot;&quot;);&#xA;            def ufvCyOthers = getLastDischUnit(mapCyOthers,&quot;&quot;);&#xA;&#xA;            println(&quot;mapDisplayLst size ==&quot;+mapDisplayLst.size())&#xA;            mapDisplayLst = mapDisplayLst.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapDisplayLst) : null&#xA;            def lstDischUfv = getLastDischUnit(mapDisplayLst,&quot;ALL&quot;);&#xA;&#xA;            println(&quot;ufvAuto=&quot;+ufvAuto+&quot; ufvCyHon=&quot;+ufvCyHon+&quot; ufvCyOthers=&quot;+ufvCyOthers+&quot;  lstDischUfv=&quot;+lstDischUfv)&#xA;            //For Report Display&#xA;&#xA;            HashMap lastUnit = null;&#xA;            ArrayList unitRptList = new ArrayList();&#xA;            unitRptList.add(populateLstDischUnit(ufvAuto, &quot;AUTO&quot;))&#xA;            unitRptList.add(populateLstDischUnit(ufvCyHon, &quot;CY-HON&quot;))&#xA;            unitRptList.add(populateLstDischUnit(ufvCyOthers, &quot;CY-OTHER&quot;))&#xA;            unitRptList.add(populateLstDischUnit(lstDischUfv, &quot;OVERALL&quot;))&#xA;&#xA;&#xA;            //Set Report Parameter&#xA;            HashMap parameters = new HashMap();&#xA;            String strDate = ContextHelper.formatTimestamp(event.getEvent().getEventTime(), timezone)&#xA;            parameters.put(&quot;Date&quot;,strDate);&#xA;&#xA;            println(&quot; unitRptList size ===&quot;+unitRptList.size())&#xA;            //Create and Mail Report&#xA;            JRDataSource ds = new JRMapCollectionDataSource(unitRptList);&#xA;            def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;            def reportDesignName = null; def displayType = null;&#xA;            //A7&#xA;            if(&quot;DISCHARGE&quot;.equals(reportType)){&#xA;                reportDesignName = &quot;DISCH REPORT FOR LAST CNTR&quot;;&#xA;                displayType = &quot;Discharge&quot;;&#xA;            }else if (&quot;LOAD&quot;.equals(reportType)){&#xA;                reportDesignName = &quot;LOAD REPORT FOR LAST CNTR&quot;;&#xA;                displayType = &quot;Load&quot;;&#xA;            }&#xA;            println(&quot;ds = &quot;+ds+&quot;   unitreportlist = &quot;+unitRptList+&quot; reportType=&quot;+reportType);&#xA;            //   reportRunner.emailReport(ds, parameters, &quot;DISCH REPORT FOR LAST CNTR&quot;, &quot;1aktosdevteam@matson.com&quot;,outBoundCarrierId+&quot; Last Container Discharge Report&quot; ,outBoundCarrierId+&quot; Last Container Discharge Report&quot;);&#xA;            reportRunner.emailReport(ds, parameters,reportDesignName , &quot;1TOSDevTeamHONProd@gmail.com&quot;,outBoundCarrierId+&quot; Last Container &quot;+displayType+&quot; Report&quot; ,outBoundCarrierId+&quot; Last Container &quot;+displayType+&quot; Report&quot;);  //A20&#xA;            println(&quot;processLastDischCntrRpt end&quot;)&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;    public UnitFacilityVisit getLastDischUnit(Map map, String type)&#xA;    {&#xA;        def unit = null;&#xA;        def ufv = null;&#xA;        def timeIn = null;&#xA;        try{&#xA;            if(map == null){&#xA;                return null;&#xA;            }&#xA;&#xA;            Iterator it = map.keySet().iterator();&#xA;            while (it.hasNext()){&#xA;                ufv = it.next();&#xA;                timeIn = map.get(ufv)&#xA;            }&#xA;&#xA;            unit = ufv.getUfvUnit();&#xA;            //1. Check if Unit has multiple discharges&#xA;            EventType evntType = EventType.findEventType(&quot;UNIT_DISCH&quot;);&#xA;            EventManager eventManager = (EventManager)Roastery.getBean(&quot;eventManager&quot;);&#xA;            List events = eventManager.getEventHistory(evntType, unit);&#xA;&#xA;            if (events.size() == 2 &amp;&amp; !&quot;ALL&quot;.equals(type)) {&#xA;                def  event1 = events.get(0)&#xA;                def previousPos1 = event1.getEvntFieldChangesString();&#xA;                def note1 = previousPos1 != null ? previousPos1 : &quot;&quot;;&#xA;                boolean b1 = note1.contains(outBoundCarrierId);&#xA;&#xA;                def  event2 = events.get(1)&#xA;                def previousPos2 = event2.getEvntFieldChangesString();&#xA;                def note2 = previousPos2 != null ? previousPos2 : &quot;&quot;;&#xA;                boolean b2 = note2.contains(outBoundCarrierId)&#xA;                //Set Correct Disch Time in Unit&#xA;                if(b1){&#xA;                    println(&quot;Event Date 1=&quot;+event1.getEventTime());&#xA;                    map.remove(ufv);&#xA;                    map.put(ufv,event1.getEventTime());&#xA;                }else if(b2){&#xA;                    println(&quot;Event Date 2=&quot;+event2.getEventTime());&#xA;                    map.remove(ufv);&#xA;                    map.put(ufv,event2.getEventTime());&#xA;                }&#xA;&#xA;                rptFieldSortUtil = rptFieldSortUtil != null ? rptFieldSortUtil : getGroovyClassInstance(&quot;ReportFieldSortUtil&quot;);&#xA;                Map tempMap = map != null &amp;&amp; map.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(map) : null //sort Map Again&#xA;&#xA;                Iterator itAgain = tempMap.keySet().iterator();&#xA;                while (itAgain.hasNext()){&#xA;                    ufv = itAgain.next();&#xA;                    timeIn = tempMap.get(ufv)&#xA;                }&#xA;&#xA;            }//If Ends&#xA;&#xA;            if(ufv != null){&#xA;                mapDisplayLst.put(ufv,timeIn)&#xA;            }&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;        return ufv;&#xA;    }&#xA;&#xA;&#xA;    public HashMap populateLstDischUnit(UnitFacilityVisit ufv, String type)&#xA;    {&#xA;        HashMap map = new HashMap();&#xA;&#xA;        //Unit is Null&#xA;        if(ufv == null){&#xA;            map.put(&quot;type&quot;, type );&#xA;            return map;&#xA;        }&#xA;&#xA;        def unit = ufv.ufvUnit&#xA;        try&#xA;        {&#xA;            map.put(&quot;UnitNbr&quot;, unit.getFieldValue(&quot;unitId&quot;));&#xA;            map.put(&quot;PositionSlot&quot;, ufv.ufvArrivePosition.posSlot);&#xA;            map.put(&quot;OutBoundCarrierId&quot;, outBoundCarrierId);&#xA;            map.put(&quot;type&quot;, type );&#xA;            String strTimeInDate = &#x9;gvyEventUtil.formatDate(ufv.ufvTimeIn, timezone)&#xA;            String strTimeInTime = &#x9;gvyEventUtil.formatTime(ufv.ufvTimeIn, timezone)&#xA;            map.put(&quot;InTime&quot;, strTimeInTime);&#xA;            map.put(&quot;InTimeDate&quot;, strTimeInDate);&#xA;            println(&quot;PositionSlot=&quot;+ufv.ufvArrivePosition.posSlot+&quot; InTime=&quot;+strTimeInDate+&quot; ufv.ufvTimeIn=&quot;+ufv.ufvTimeIn)&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return map;&#xA;    }&#xA;&#xA;    public List findAllUnitsForVesVoy(Object vesVisit)&#xA;    {&#xA;        ArrayList vesVistUnitLists = new ArrayList();&#xA;        try{&#xA;            //Long cvGkey = vesVisit.getCvdCv().getCvGkey()&#xA;            //DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;).addDqPredicate(PredicateFactory.eq(UnitField.UFV_DECLARED_IB_CV, cvGkey)).addDqOrdering(Ordering.asc(UnitField.UFV_VISIT_STATE));&#xA;            def Id = vesVisit.getCvdCv().getCvId()&#xA;            println(&quot;Id ====&quot;+Id)&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;            if(&quot;DISCHARGE&quot;.equals(reportType)){&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, Id));&#xA;            }else if(&quot;LOAD&quot;.equals(reportType)){&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID, Id));&#xA;            }//A13&#xA;            //dq = dq.addDqPredicate(PredicateFactory.ne(UnitField.UNIT_CURRENT_UFV_VISIT_STATE, UnitVisitStateEnum.RETIRED)).dq.addDqPredicate(PredicateFactory.ne(UnitField.UNIT_CURRENT_UFV_VISIT_STATE, UnitVisitStateEnum.ADVISED));&#xA;            dq = dq.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY, UnitCategoryEnum.THROUGH)).addDqPredicate(PredicateFactory.ne(UnitField.UFV_FREIGHT_KIND, FreightKindEnum.MTY)).addDqOrdering(Ordering.asc(UnitField.UFV_VISIT_STATE));&#xA;            List vesVistUnits  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            vesVistUnitLists.addAll(vesVistUnits);&#xA;            println(&quot;vesVistUnitLists size is ===&quot;+vesVistUnitLists.size())&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return vesVistUnitLists&#xA;    }&#xA;&#xA;    //A11&#xA;    public String processDischCounts(Object vesVisit, String type)&#xA;    {&#xA;&#xA;        List onDeckList = new ArrayList();&#xA;        List belowDeckList = new ArrayList();&#xA;        String rptTitle = null;&#xA;&#xA;        HashSet positionSet = new HashSet();&#xA;        List robList = new ArrayList();&#xA;        List restowList = new ArrayList();&#xA;        List trailerList = new ArrayList();&#xA;        List totalDfvList = new ArrayList();&#xA;        StringBuffer buf = new StringBuffer();&#xA;        def id = vesVisit.getCvdCv().getCvId();&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;        if(&quot;DISCHARGE&quot;.equals(type)){&#xA;            //dq = dq.addDqPredicate(PredicateFactory.ne(UnitField.UFV_VISIT_STATE,UnitVisitStateEnum.ADVISED)).addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S10_ADVISED)).addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S99_RETIRED));&#xA;            dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, id));&#xA;            rptTitle = &quot;Discharge Audit Details&quot;;&#xA;        }else if(&quot;LOAD&quot;.equals(type)){&#xA;            dq = dq.addDqPredicate(PredicateFactory.ne(UnitField.UFV_VISIT_STATE,UnitVisitStateEnum.ADVISED)).addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S10_ADVISED)).addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S99_RETIRED));&#xA;            dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID, id)).addDqPredicate(PredicateFactory.like(UnitField.UFV_POS_NAME,&quot;V%&quot;));&#xA;            rptTitle = &quot;Sail Audit Details&quot;;&#xA;        }&#xA;        dq = dq.addDqOrdering(Ordering.asc(UnitField.UFV_CATEGORY));&#xA;        List unitsList  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;        println(&quot;Load count is &quot;+unitsList.size());&#xA;        try{&#xA;            Iterator iter = unitsList.iterator();&#xA;            while(iter.hasNext()) {&#xA;                UnitFacilityVisit ufv = iter.next();&#xA;                def unit = ufv.ufvUnit;&#xA;                def unitId = unit.getFieldValue(&quot;unitId&quot;)&#xA;                def equipType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;                def category =&#x9;unit.getUnitCategory();&#xA;                def deckPosition = null;&#xA;                def restow = unit.getFieldValue(&quot;unitActiveUfv.ufvRestowType&quot;);&#xA;                restow = restow != null ? restow.getKey() : ''&#xA;&#xA;                if(&quot;DISCHARGE&quot;.equals(type)) {&#xA;                    //check to exclude duplicate position for bundles and unitId does not have $&#xA;                    if (unitId!=null &amp;&amp; !unitId.contains(&quot;\$&quot;) &amp;&amp; !equipType.startsWith('C')) {&#xA;&#xA;                        deckPosition = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString06&quot;)&#xA;                        //println(&quot;deckPosition is &quot;+deckPosition+&quot; for unit &quot;+unit.getFieldValue(&quot;unitId&quot;))&#xA;&#xA;                        //No Deck - Below Deck&#xA;                        if(&quot;OD&quot;.equals(deckPosition)){&#xA;                            onDeckList.add(unit);&#xA;                        }else if(&quot;BD&quot;.equals(deckPosition)){&#xA;                            belowDeckList.add(unit);&#xA;                        }&#xA;&#xA;&#xA;                        //ROB Restow and Trailer&#xA;                        if(UnitCategoryEnum.THROUGH.equals(category) &amp;&amp; &quot;RESTOW&quot;.equals(restow)){&#xA;                            restowList.add(unit);&#xA;                            robList.add(unit);&#xA;                        }else if (UnitCategoryEnum.THROUGH.equals(category)){&#xA;                            robList.add(unit);&#xA;                        }else if (&quot;RO&quot;.equals(deckPosition) || equipType.contains(&quot;B40&quot;)){&#xA;                            procTrailerCount(equipType);&#xA;                        }else{&#xA;                                totalDfvList.add(unit);&#xA;                        }&#xA;                    }&#xA;                } else if (&quot;LOAD&quot;.equals(type)) {&#xA;                    //check to exclude duplicate position for bundles and unitId does not have $&#xA;                    if (!positionSet.contains(ufv.getUfvLastKnownPosition()) &amp;&amp;&#xA;                            (unitId!=null &amp;&amp; !unitId.contains(&quot;\$&quot;))) {&#xA;&#xA;                        deckPosition = ufv.getUfvFlexString06()&#xA;                        //println(&quot;deckPosition is &quot;+deckPosition+&quot; for unit &quot;+unit.getFieldValue(&quot;unitId&quot;))&#xA;&#xA;                        //No Deck - Below Deck&#xA;                        if(&quot;OD&quot;.equals(deckPosition)){&#xA;                            onDeckList.add(unit);&#xA;                        }else if(&quot;BD&quot;.equals(deckPosition)){&#xA;                            belowDeckList.add(unit);&#xA;                        }&#xA;&#xA;&#xA;                        //ROB Restow and Trailer&#xA;                        if(UnitCategoryEnum.THROUGH.equals(category) &amp;&amp; &quot;RESTOW&quot;.equals(restow)){&#xA;                            restowList.add(unit);&#xA;                            robList.add(unit);&#xA;                        }else if (UnitCategoryEnum.THROUGH.equals(category)){&#xA;                            robList.add(unit);&#xA;                        }else if (&quot;RO&quot;.equals(deckPosition) || equipType.contains(&quot;B40&quot;)){&#xA;                            procTrailerCount(equipType);&#xA;                        }else{&#xA;                            totalDfvList.add(unit);&#xA;                        }&#xA;                    }&#xA;                    //else {&#xA;                    //println(&quot;UFV::&quot;+ufv+&quot; (&quot;+ufv.getUfvLastKnownPosition()+&quot;)&quot;);&#xA;                    //}&#xA;&#xA;                    positionSet.add(ufv.getUfvLastKnownPosition());&#xA;&#xA;                }&#xA;            }&#xA;&#xA;            rptFieldSortUtil = rptFieldSortUtil != null ? rptFieldSortUtil : inj.getGroovyClassInstance(&quot;ReportFieldSortUtil&quot;);&#xA;            mapTrailer = rptFieldSortUtil.sortMapByKey(mapTrailer);&#xA;&#xA;            // buf.append(&quot;   &quot;+rptTitle+&quot;  &quot;+eol);&#xA;            // buf.append(&quot;----------------------------&quot;+eol);&#xA;            buf.append(&quot;&quot;+eol);&#xA;            buf.append(&quot;Container : &quot;+totalDfvList.size()+eol);&#xA;            buf.append(&quot;ROB       : &quot;+robList.size()+eol);&#xA;            buf.append(&quot;Restow    : &quot;+restowList.size()+eol);&#xA;            buf.append(&quot;Trailer   : &quot;+trailerCnt+eol);&#xA;            Iterator it = mapTrailer.keySet().iterator(); //A21&#xA;            while (it.hasNext()){&#xA;                def equipSize = it.next();&#xA;                def eqCount = mapTrailer.get(equipSize)&#xA;                buf.append(&quot;  &quot;+(equipSize.length()== 3 ? equipSize+&quot; &quot; : equipSize )+&quot; : &quot;+eqCount+eol);&#xA;            }&#xA;            // buf.append(&quot;----------------------------&quot;+eol);&#xA;            //buf.append(eol+eol+eol+eol)&#xA;            //buf.append(&quot;    Deck Position Count  &quot;+eol);&#xA;            //buf.append(&quot;----------------------------&quot;+eol);&#xA;            //buf.append(&quot;OnDeck      : &quot;+onDeckList.size()+eol);&#xA;            //buf.append(&quot;BelowDeck   : &quot;+belowDeckList.size()+eol);&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;&#xA;        return buf.toString();&#xA;    }&#xA;    //A2- Ends&#xA;&#xA;    // A3 Email Confirmation Starts&#xA;&#xA;     public void discAuditConfirmationEmail(event, String type){&#xA;            inj = inj==null ? new GroovyInjectionBase(): inj;&#xA;            def sub = &quot;&quot;;  def acctSub = &quot;&quot;;&#xA;            def visit = event.getEntity();&#xA;            List acctListRpt = null;&#xA;            List unitListRpt = null;&#xA;            def reportDesignName = null;&#xA;            def reportDesignNameUnits = null;&#xA;            try{&#xA;                def doer = event.event.evntAppliedBy   //Gets Doer&#xA;                doer = doer.replace('user:','')&#xA;                def carrierId = visit.cvdCv&#xA;                def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;)  // calls Email call&#xA;                if(&quot;DISCHARGE&quot;.equals(type)){&#xA;                    sub = &quot;Audit Discharge for &quot;+carrierId+&quot; Pau.&quot;;    // Compose Subject String&#xA;                    acctSub = &quot;Accounting Discharge Total Counts for &quot;+carrierId;&#xA;                }else if(&quot;LOAD&quot;.equals(type)){&#xA;                    sub = &quot; &quot;+carrierId+&quot; Sailed.&quot;;   // Compose Subject String&#xA;                    acctSub = &quot;Accounting Load Back Total Counts for &quot;+carrierId;&#xA;                }&#xA;&#xA;                def body = processDischCounts(visit,type);&#xA;&#xA;                acctListRpt = processAccoutingRpt(visit,type);&#xA;                unitListRpt = processAccoutingUnitsRpt(visit,type);&#xA;&#xA;                log(&quot; Units acctListRpt.size() === &quot;+acctListRpt.size() )&#xA;                //  emailSender.custSendEmail(acctEmail,acctSub,body+eol); //Accounting&#xA;                if (acctListRpt!=null &amp;&amp; acctListRpt.size() &gt; 0)&#xA;                {&#xA;                    JRDataSource ds = new JRMapCollectionDataSource(acctListRpt);&#xA;                    JRDataSource ds1 = new JRMapCollectionDataSource(unitListRpt);&#xA;                    // get report runner handle&#xA;                    def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#xA;                    //Set report parameters&#xA;                    HashMap parameters = new HashMap();&#xA;                    HashMap parametersUnits = new HashMap();&#xA;                    parameters.put(&quot;Date&quot;,new Date());&#xA;                    parametersUnits.put(&quot;Date&quot;,new Date());&#xA;&#xA;&#x9;&#x9;    println(&quot;Sending UNIT_DETAILS&quot;);&#xA;&#x9;&#x9;    reportDesignNameUnits = &quot;UNIT_DETAILS&quot;;&#xA;&#x9;&#x9;    reportRunner.emailExcelReport(ds1, parametersUnits,reportDesignNameUnits ,acctEmail,&quot;UNITS &quot;+type+&quot; LIST FOR &quot;+ carrierId ,&quot;Report attached&quot;);&#xA;&#xA;                    // call report design of rehandle containers not loaded back to vessel report.&#xA;                    if (&quot;LOAD&quot;.equals(type))&#xA;                    {&#xA;                        reportDesignName = &quot;ACCT AUDIT LOAD REPORT&quot;;&#xA;                        parameters.put(&quot;outboundVesVoy&quot;,visit.getCvdCv().getCvId());&#xA;                    } else if (&quot;DISCHARGE&quot;.equals(type))&#xA;                    {&#xA;                        println(&quot;Sending ACCT AUDIT DISCH REPORT TEST&quot;);&#xA;                        reportDesignName = &quot;ACCT AUDIT DISCH REPORT&quot;;&#xA;                        parameters.put(&quot;inboundVesVoy&quot;,visit.getCvdCv().getCvId());&#xA;                    }&#xA;                    // Emailing report&#xA;                    //reportRunner.emailExcelReport(ds, parameters,reportDesignName ,acctEmail,acctSub,body+eol);&#xA;                }&#xA;&#xA;&#xA;                if (&quot;LOAD&quot;.equals(type) &amp;&amp; visit.getCvdCv().getCvId().startsWith(&quot;YB&quot;)) {&#xA;                    return null;&#xA;                }&#xA;                println(&quot; doer is &quot;+doer)&#xA;                if (!&quot;-jms-&quot;.equals(doer)) {&#xA;                    if (&quot;LOAD&quot;.equals(type)) {&#xA;                        emailTo = emailTo;&#xA;                    }&#xA;                    emailSender.custSendEmail(emailTo,sub,&quot;Action done by &quot;+doer);  //executes Email Procedure //A18&#xA;                }&#xA;&#xA;            }catch(Exception e){&#xA;                e.printStackTrace();&#xA;        }&#xA;&#xA;    }//A3- Ends&#xA;&#xA;&#xA;    public void procTrailerCount(String wholeEquipType)&#xA;    {&#xA;        //def gvyStrUtility =  getGroovyClassInstance(&quot;GvyStringUtility&quot;)&#xA;        //def equipType = gvyStrUtility.getOnlyNumerics(wholeEquipType);&#xA;        //def equipType = wholeEquipType.substring(1,3);&#xA;        if(mapTrailer.get(wholeEquipType) != null){&#xA;            Integer count = (Integer)mapTrailer.get(wholeEquipType);&#xA;            int tempCnt = count.intValue();&#xA;            tempCnt = tempCnt+1;&#xA;            mapTrailer.put(wholeEquipType,tempCnt);&#xA;        }else{&#xA;            mapTrailer.put(wholeEquipType,new Integer(1));&#xA;        }&#xA;        trailerCnt = trailerCnt+1;&#xA;    }//Method Ends&#xA;&#xA;public List processAccoutingUnitsRpt(Object vesVisit, String type)&#xA;&#x9;{&#xA;&#x9;&#x9;println(&quot;Calling processAccoutingUnitsRpt for :: &quot; + type);&#xA;&#x9;&#x9;List resultAcctList = new ArrayList();&#xA;&#x9;&#x9;List resultUnitList = new ArrayList();&#xA;&#x9;&#x9;HashSet positionSet = new HashSet();&#xA;&#x9;&#x9;HashMap outputMap = null;&#xA;&#x9;&#x9;HashMap outputUnitMap = null;&#xA;&#x9;&#x9;List acctList = null;&#xA;&#x9;&#x9;vesselForDischId = vesVisit.getCvdCv().getCvId();&#xA;&#x9;&#x9;def Id = vesVisit.getCvdCv().getCvId();&#xA;&#x9;&#x9;String vesselGkey = vesVisit.getCvdCv().getCvGkey();&#xA;&#xA;&#x9;&#x9;if (&quot;LOAD&quot;.equals(type))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_VISIT_STATE,UnitVisitStateEnum.ADVISED))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S10_ADVISED))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S99_RETIRED))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY,UnitCategoryEnum.THROUGH))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID, Id))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_POS_NAME,&quot;V%&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqOrdering(Ordering.asc(UnitField.UFV_CMDTY));&#xA;&#xA;&#x9;&#x9;&#x9;acctList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println(&quot;===acctList size===&quot;+acctList.size());&#xA;&#x9;&#x9;&#x9;Iterator iter = acctList.iterator();&#xA;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;Unit unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;def unitId = unit.getFieldValue(&quot;unitId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;//check to exclude duplicate position for bundles and unitId does not have $&#xA;&#x9;&#x9;&#x9;&#x9;if (!positionSet.contains(ufv.getUfvLastKnownPosition()) &amp;&amp; (unitId!=null &amp;&amp; !unitId.contains(&quot;\$&quot;))) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outputUnitMap = populateUnitListByType(ufv,type)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;resultUnitList.add(outputUnitMap)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;//else {&#xA;&#x9;&#x9;&#x9;&#x9;//println(&quot;UFV::&quot;+ufv);&#xA;&#x9;&#x9;&#x9;&#x9;//}&#xA;&#xA;&#x9;&#x9;&#x9;positionSet.add(ufv.getUfvLastKnownPosition());&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;&#x9;&#x9;&#x9;log(&quot;&lt;&lt;&lt;&lt;TESTING DISCHARGE REPORT ID For UNIT LIST&gt;&gt;&gt;&gt;&quot;+Id);&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY,UnitCategoryEnum.THROUGH))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_TYPE, &quot;VESSEL&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_GKEY, vesselGkey))&#xA;&#x9;&#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S10_ADVISED))&#xA;&#x9;&#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S99_RETIRED))&#xA;&#x9;&#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID,&quot;MATU2575205&quot;))&#xA; &#x9;&#x9;&#x9;&#x9;.addDqOrdering(Ordering.asc(UnitField.UFV_CMDTY));&#xA;&#xA;&#x9;&#x9;&#x9;acctList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;log(&quot;&lt;&lt;&lt;&lt;ACCTLIST SIZE IS &gt;&gt;&gt;&gt;&quot;+acctList.size());&#xA;&#x9;&#x9;&#x9;Iterator iter = acctList.iterator();&#xA;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;def ufv = iter.next()&#xA;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;def transitState = unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;transitState = transitState != null ? transitState.getKey() : null&#xA;&#x9;&#x9;&#x9;&#x9;def tState = transitState!=null ? transitState.split(&quot;_&quot;) : null&#xA;&#x9;&#x9;&#x9;&#x9;transitState = tState != null ? tState[1] : null&#xA;&#x9;&#x9;&#x9;&#x9;//LOGGER.warn(&quot; DISCHARGE transitState is &quot;+transitState+&quot;for unit &quot;+unit.getFieldValue(&quot;unitId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;outputUnitMap = populateUnitListByType(ufv,type)&#xA;&#x9;&#x9;&#x9;&#x9;resultUnitList.add(outputUnitMap)&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resultUnitList;&#xA;    }&#xA;&#xA;&#x9;public List processAccoutingRpt(Object vesVisit, String type)&#xA;&#x9;{&#xA;&#x9;&#x9;println(&quot;Calling processAccoutingRpt&quot;);&#xA;&#x9;&#x9;List resultAcctList = new ArrayList();&#xA;&#x9;&#x9;HashSet positionSet = new HashSet();&#xA;&#x9;&#x9;HashMap outputMap = null;&#xA;&#x9;&#x9;List acctList = null;&#xA;&#x9;&#x9;vesselForDischId = vesVisit.getCvdCv().getCvId();&#xA;&#x9;&#x9;def Id = vesVisit.getCvdCv().getCvId();&#xA;&#x9;&#x9;String vesselGkey = vesVisit.getCvdCv().getCvGkey();&#xA;&#xA;&#x9;&#x9;if (&quot;LOAD&quot;.equals(type))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_VISIT_STATE,UnitVisitStateEnum.ADVISED))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S10_ADVISED))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S99_RETIRED))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY,UnitCategoryEnum.THROUGH))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID, Id))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_POS_NAME,&quot;V%&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqOrdering(Ordering.asc(UnitField.UFV_CMDTY));&#xA;&#xA;&#x9;&#x9;&#x9;acctList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println(&quot;===acctList size===&quot;+acctList.size());&#xA;&#x9;&#x9;&#x9;Iterator iter = acctList.iterator();&#xA;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;Unit unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;def unitId = unit.getFieldValue(&quot;unitId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;//check to exclude duplicate position for bundles and unitId does not have $&#xA;&#x9;&#x9;&#x9;&#x9;if (!positionSet.contains(ufv.getUfvLastKnownPosition()) &amp;&amp; (unitId!=null &amp;&amp; !unitId.contains(&quot;\$&quot;))) {&#xA;&#x9;&#x9;&#x9;&#x9;outputMap = populateAcctListByType(ufv,type);&#xA;&#x9;&#x9;&#x9;&#x9;resultAcctList.add(outputMap);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;//else {&#xA;&#x9;&#x9;&#x9;&#x9;//println(&quot;UFV::&quot;+ufv);&#xA;&#x9;&#x9;&#x9;&#x9;//}&#xA;&#xA;&#x9;&#x9;&#x9;positionSet.add(ufv.getUfvLastKnownPosition());&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;&#x9;&#x9;&#x9;log(&quot;&lt;&lt;&lt;&lt;TESTING DISCHARGE REPORT ID&gt;&gt;&gt;&gt;&quot;+Id+&quot;:::&quot;+vesselGkey);&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY,UnitCategoryEnum.THROUGH))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_TYPE, &quot;VESSEL&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_GKEY, vesselGkey))&#xA;&#x9;&#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S10_ADVISED))&#xA;&#x9;&#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S99_RETIRED))&#xA; &#x9;&#x9;&#x9;&#x9;.addDqOrdering(Ordering.asc(UnitField.UFV_CMDTY));&#xA;&#xA;&#x9;&#x9;&#x9;acctList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println(&quot;DomainQuery:::&quot;+dq);&#xA;&#x9;&#x9;&#x9;log(&quot;&lt;&lt;&lt;&lt;ACCTLIST SIZE IS &gt;&gt;&gt;&gt;&quot;+acctList.size());&#xA;&#x9;&#x9;&#x9;Iterator iter = acctList.iterator();&#xA;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;def ufv = iter.next()&#xA;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;def transitState = unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;transitState = transitState != null ? transitState.getKey() : null&#xA;&#x9;&#x9;&#x9;&#x9;def tState = transitState!=null ? transitState.split(&quot;_&quot;) : null&#xA;&#x9;&#x9;&#x9;&#x9;transitState = tState != null ? tState[1] : null&#xA;&#x9;&#x9;&#x9;&#x9;//LOGGER.warn(&quot; DISCHARGE transitState is &quot;+transitState+&quot;for unit &quot;+unit.getFieldValue(&quot;unitId&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;outputMap = populateAcctListByType(ufv,type)&#xA;&#x9;&#x9;&#x9;&#x9;resultAcctList.add(outputMap)&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resultAcctList;&#xA;    }&#xA;&#xA;/*    public List processAccoutingRpt(Object vesVisit, String type)&#xA;    {&#xA;        List resultAcctList = new ArrayList();&#xA;        HashSet positionSet = new HashSet();&#xA;        HashMap outputMap = null;&#xA;        List acctList = null;&#xA;        def Id = vesVisit.getCvdCv().getCvId()&#xA;        if (&quot;LOAD&quot;.equals(type))&#xA;        {&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;                    .addDqPredicate(PredicateFactory.ne(UnitField.UFV_VISIT_STATE,UnitVisitStateEnum.ADVISED))&#xA;                    .addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S10_ADVISED))&#xA;                    .addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S99_RETIRED))&#xA;                    .addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY,UnitCategoryEnum.THROUGH))&#xA;                    .addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID, Id))&#xA;                    .addDqPredicate(PredicateFactory.like(UnitField.UFV_POS_NAME,&quot;V%&quot;))&#xA;                    .addDqOrdering(Ordering.asc(UnitField.UFV_CMDTY));&#xA;&#xA;            acctList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            println(&quot;===acctList size===&quot;+acctList.size());&#xA;            Iterator iter = acctList.iterator();&#xA;            while(iter.hasNext()) {&#xA;                def ufv = iter.next();&#xA;                Unit unit = ufv.ufvUnit;&#xA;                def unitId = unit.getFieldValue(&quot;unitId&quot;);&#xA;                //check to exclude duplicate position for bundles and unitId does not have $&#xA;                if (!positionSet.contains(ufv.getUfvLastKnownPosition()) &amp;&amp; (unitId!=null &amp;&amp; !unitId.contains(&quot;\$&quot;))) {&#xA;                    outputMap = populateAcctListByType(ufv,type);&#xA;                    resultAcctList.add(outputMap);&#xA;                }&#xA;                //else {&#xA;                //println(&quot;UFV::&quot;+ufv);&#xA;                //}&#xA;&#xA;                positionSet.add(ufv.getUfvLastKnownPosition());&#xA;&#xA;&#xA;            }&#xA;        } else if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;                    //.addDqPredicate(PredicateFactory.ne(UnitField.UFV_VISIT_STATE,UnitVisitStateEnum.ADVISED))&#xA;                    //.addDqPredicate(PredicateFactory.ne(UnitField.UFV_VISIT_STATE,UnitVisitStateEnum.RETIRED))&#xA;                    .addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY,UnitCategoryEnum.THROUGH))&#xA;                    .addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, Id))&#xA;                    .addDqOrdering(Ordering.asc(UnitField.UFV_CMDTY));&#xA;&#xA;            acctList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            Iterator iter = acctList.iterator();&#xA;            while(iter.hasNext()) {&#xA;                def ufv = iter.next();&#xA;                Unit unit = ufv.ufvUnit;&#xA;                def unitId = unit.getFieldValue(&quot;unitId&quot;);&#xA;                def equipType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;                //check to exclude duplicate position for bundles and unitId does not have $&#xA;                if (unitId!=null &amp;&amp; !unitId.contains(&quot;\$&quot;) &amp;&amp; !equipType.startsWith('C')) {&#xA;                    outputMap = populateAcctListByType(ufv,type);&#xA;                    resultAcctList.add(outputMap);&#xA;                }&#xA;&#xA;            }&#xA;&#xA;        }&#xA;        return resultAcctList;&#xA;    }&#xA;*/&#xA;public HashMap populateUnitListByType(UnitFacilityVisit ufv, String type) {&#xA;&#x9;println(&quot;Calling populateUnitListByType for ::&quot;+type);&#xA;&#xA;        HashMap resMap = new HashMap();&#xA;        def unit = ufv.ufvUnit&#xA;        UnitEquipment chasEquip = unit.getUnitCarriageUe();&#xA;        def freightkindout = unit.getFieldValue(&quot;unitFreightKind&quot;).getKey();&#xA;        def attachedUnit = unit.getFieldValue(&quot;unitAttachedEquipIds&quot;)&#xA;        //println(&quot;chasEquip   &quot;+chasEquip)&#xA;        if (&quot;FCL&quot;.equals(freightkindout))&#xA;        {&#xA;            freightkindout = &quot;F&quot;;&#xA;        } else if (&quot;MTY&quot;.equals(freightkindout))&#xA;        {&#xA;            freightkindout = &quot;E&quot;;&#xA;        }&#xA;&#xA;        resMap.put(&quot;Commodity&quot;,unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;));&#xA;        resMap.put(&quot;UfvFlexString01&quot;,unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;).getKey());&#xA;        resMap.put(&quot;EquipmentType&quot;,unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;))&#xA;        resMap.put(&quot;FreightKind&quot;,freightkindout)&#xA;        resMap.put(&quot;UnitNbr&quot;,unit.getFieldValue(&quot;unitId&quot;))&#xA;        if (attachedUnit != null &amp;&amp; chasEquip !=null)&#xA;        {&#xA;            resMap.put(&quot;AttachedUnits&quot;,unit.getFieldValue(&quot;unitAttachedEquipIds&quot;))&#xA;        } else if (attachedUnit != null &amp;&amp; chasEquip == null)&#xA;        {&#xA;            resMap.put(&quot;AttachedUnits&quot;,null)&#xA;        }&#xA;        def _category = unit.getFieldValue(&quot;unitCategory&quot;);&#xA;        def categoryKey = _category != null ? _category.getKey() : &quot;&quot;;&#xA;        //println(&quot;TransitState:::::::::::::::::&quot;+ufv.ufvTransitState);&#xA;&#x9;&#x9;def transitState = ufv.ufvTransitState;&#xA;&#x9;&#x9;def transitStateKey = null;&#xA;&#x9;&#x9;if (transitState != null) {&#xA;&#x9;&#x9;&#x9;&#x9;transitStateKey = transitState != null ? transitState.getKey() : ''&#xA;&#x9;&#x9;&#x9;&#x9;def tState = transitStateKey.split(&quot;_&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;transitStateKey = tState[1]&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//log(&quot;Unit Details:::&quot;+unit.getFieldValue(&quot;unitId&quot;)+&quot;::&quot;+transitState+&quot;::&quot;+transitStateKey);&#xA;        if (&quot;LOAD&quot;.equals(type))&#xA;        {&#xA;            resMap.put(&quot;UfvFlexDate01&quot;,ufv.getFieldValue(&quot;ufvActualObCv.cvATA&quot;))&#xA;            resMap.put(&quot;UfvFlexDate02&quot;,ufv.getFieldValue(&quot;ufvActualObCv.cvATD&quot;))&#xA;            resMap.put(&quot;OutboundCarrierId&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;))&#xA;            resMap.put(&quot;POL&quot;,unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;))&#xA;            resMap.put(&quot;UfvFlexString06&quot;,ufv.getUfvFlexString06());&#xA;            resMap.put(&quot;Category&quot;,categoryKey)&#xA;            resMap.put(&quot;TransitState&quot;,transitStateKey)&#xA;        } else if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;            resMap.put(&quot;UfvFlexDate01&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvATA&quot;))&#xA;            resMap.put(&quot;UfvFlexDate02&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvATD&quot;))&#xA;            resMap.put(&quot;POL&quot;,unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;))&#xA;            resMap.put(&quot;Category&quot;,categoryKey)&#xA;            resMap.put(&quot;TransitState&quot;,transitStateKey)&#xA;            resMap.put(&quot;ArrivalPositionFull&quot;,ufv.ufvArrivePosition.posName);&#xA;            resMap.put(&quot;UfvFlexString06&quot;,ufv.getUfvFlexString06())&#xA;        }&#xA;&#xA;        return resMap;&#xA;    }&#xA;&#xA;    public HashMap populateAcctListByType(UnitFacilityVisit ufv, String type) {&#xA;&#xA;        HashMap resMap = new HashMap();&#xA;        def unit = ufv.ufvUnit&#xA;        UnitEquipment chasEquip = unit.getUnitCarriageUe();&#xA;        def freightkindout = unit.getFieldValue(&quot;unitFreightKind&quot;).getKey();&#xA;        def attachedUnit = unit.getFieldValue(&quot;unitAttachedEquipIds&quot;)&#xA;        //println(&quot;chasEquip   &quot;+chasEquip)&#xA;        if (&quot;FCL&quot;.equals(freightkindout))&#xA;        {&#xA;            freightkindout = &quot;F&quot;;&#xA;        } else if (&quot;MTY&quot;.equals(freightkindout))&#xA;        {&#xA;            freightkindout = &quot;E&quot;;&#xA;        }&#xA;&#xA;        resMap.put(&quot;Commodity&quot;,unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;));&#xA;        resMap.put(&quot;EquipmentTypeClass&quot;,unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;).getKey());&#xA;        resMap.put(&quot;EquipmentType&quot;,unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;))&#xA;        resMap.put(&quot;FreightKind&quot;,freightkindout)&#xA;        resMap.put(&quot;UnitNbr&quot;,unit.getFieldValue(&quot;unitId&quot;))&#xA;        if (attachedUnit != null &amp;&amp; chasEquip !=null)&#xA;        {&#xA;            resMap.put(&quot;AttachedUnits&quot;,unit.getFieldValue(&quot;unitAttachedEquipIds&quot;))&#xA;        } else if (attachedUnit != null &amp;&amp; chasEquip == null)&#xA;        {&#xA;            resMap.put(&quot;AttachedUnits&quot;,null)&#xA;        }&#xA;&#xA;        if (&quot;LOAD&quot;.equals(type))&#xA;        {&#xA;            resMap.put(&quot;OutboundCarrierATA&quot;,ufv.getFieldValue(&quot;ufvActualObCv.cvATA&quot;))&#xA;            resMap.put(&quot;OutboundCarrierATD&quot;,ufv.getFieldValue(&quot;ufvActualObCv.cvATD&quot;))&#xA;            resMap.put(&quot;OutboundCarrierId&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;))&#xA;            resMap.put(&quot;Destination&quot;,unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;))&#xA;            resMap.put(&quot;UfvFlexString06&quot;,ufv.getUfvFlexString06())&#xA;        } else if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;            resMap.put(&quot;InboundCarrierATA&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvATA&quot;))&#xA;            resMap.put(&quot;InboundCarrierATD&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvATD&quot;))&#xA;            resMap.put(&quot;OPL&quot;,unit.getFieldValue(&quot;unitRouting.rtgOPL.pointId&quot;))&#xA;            //resMap.put(&quot;InboundCarrierId&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;))&#xA;            resMap.put(&quot;InboundCarrierId&quot;,vesselForDischId)&#xA;            resMap.put(&quot;UfvFlexString06&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString06&quot;))&#xA;        }&#xA;        //println(&quot;Result map is &quot;+resMap);&#xA;        return resMap;&#xA;    }&#xA;&#xA;&#xA;&#xA;}//class ends&#xA;" />
<digital-asset id="MatUpdateBkngUnitIso" short-description="MatUpdateBkngUnitIso" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import com.navis.inventory.business.units.Unit;&#xA;&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.services.business.api.EventManager&#xA;import com.navis.services.business.rules.EventType&#xA;&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery;&#xA;&#xA;import com.navis.orders.business.eqorders.Booking;&#xA;import com.navis.orders.business.eqorders.EquipmentOrderItem;&#xA;import com.navis.argo.business.reference.EquipType;&#xA;&#xA;import com.navis.argo.ArgoPropertyKeys;&#xA;import com.navis.argo.ArgoRefField;&#xA;&#xA;&#xA;&#xA;class MatUpdateBkngUnitIso{&#xA;&#xA;    public boolean execute(Map params){&#xA;        try {&#xA;            String bkngGkey = &quot;131462476&quot;&#xA;            setEquipSeries(bkngGkey);&#xA;&#xA;        }&#xA;        catch (Exception e2) {&#xA;            println(&quot;Exception  &quot; + e2);&#xA;        }&#xA;    }&#xA;&#xA;    public void setEquipSeries(String bkngGkey)&#xA;    {&#xA;&#xA;        try {&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;EquipmentOrderItem&quot;)&#xA;                    .addDqPredicate(PredicateFactory.eq(InventoryField.EQBOI_ORDER,bkngGkey));&#xA;            println(&quot;dq:::::::::&quot;+dq)&#xA;&#xA;            def itemList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            println(&quot;After itemList :::: &quot;+itemList.size());&#xA;            def equipType = null;&#xA;            if(itemList != null) {&#xA;                println(&quot;Here&quot;);&#xA;                Iterator iter = itemList.iterator();&#xA;                while(iter.hasNext()) {&#xA;                    def eqoItem = iter.next();&#xA;                    println(&quot;Inside loop&quot;);&#xA;                    def equipSeries = eqoItem.getFieldValue(&quot;eqoiSerialRanges&quot;);&#xA;                    def eqoiEqIsoGroup = eqoItem.getFieldValue(&quot;eqoiEqIsoGroup&quot;);&#xA;                    def eqoiEqSize = eqoItem.getFieldValue(&quot;eqoiEqSize&quot;);&#xA;                    def eqoiEqHeight = eqoItem.getFieldValue(&quot;eqoiEqHeight&quot;);&#xA;                    def eqoiEqIsoGroupKey = eqoiEqIsoGroup.getKey();&#xA;                    def eqoiEqHeightKey = eqoiEqHeight.getKey();&#xA;                    def eqoiEqSizeKey = eqoiEqSize.getKey();&#xA;&#xA;                    println(&quot;equipSeries:::&quot;+eqoiEqIsoGroupKey+eqoiEqHeightKey+&quot;::&quot;+eqoiEqSizeKey+&quot;::::&quot;+equipSeries);&#xA;                    /*if (eqoiEqSizeKey == &quot;NOM20&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM86&quot;){&#xA;                        equipSeries = &quot;MATU 2072010-2082009&quot;&#xA;                        equipType = &quot;D20&quot;&#xA;&#xA;                    }&#xA;                    else if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM86&quot;){&#xA;                        equipSeries = &quot;MATU 2265060-2275059&quot;&#xA;                        equipType = &quot;D40&quot;&#xA;                    }&#xA;                    else if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM96&quot;){&#xA;                        equipSeries = &quot;MATU 2459510-2504509&quot;&#xA;                        equipType = &quot;D40H&quot;&#xA;                    }*/&#xA;                    equipSeries = &quot;MATU 2072010-2082009, MATU 2265060-2275059, MATU 2459510-2504509&quot;&#xA;                    println(&quot;equipSeries:::&quot;+equipType+&quot;::::&quot;+equipSeries);&#xA;&#xA;                    eqoItem.setEqoiSerialRanges(equipSeries);&#xA;                }&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;            println(e.getMessage());&#xA;        }&#xA;    }&#xA;&#xA;    public void getBooking(String bkngGkey, Object booking)&#xA;    {&#xA;        def bkgNotes = booking.getEqoNotes()&#xA;        bkgNotes = bkgNotes==null?&quot;&quot;:bkgNotes;&#xA;        boolean isScrap = false;&#xA;        if(bkgNotes.contains(&quot;METAL SCRAP&quot;)||bkgNotes.contains(&quot;SCRAP METAL&quot;)) {&#xA;            isScrap = true;&#xA;        }&#xA;        try {&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;EquipmentOrderItem&quot;)&#xA;                    .addDqPredicate(PredicateFactory.eq(InventoryField.EQBOI_ORDER,bkngGkey));&#xA;            println(&quot;dq:::::::::&quot;+dq)&#xA;&#xA;            def itemList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            println(&quot;After itemList :::: &quot;+itemList.size());&#xA;&#xA;            if(itemList != null) {&#xA;                Iterator iter = itemList.iterator();&#xA;                while(iter.hasNext()) {&#xA;&#xA;                    def eqoItem = iter.next();&#xA;                    def gkey = eqoItem.getFieldValue(&quot;eqboiGkey&quot;);&#xA;                    def EqboiOrder = eqoItem.getFieldValue(&quot;eqboiOrder&quot;);&#xA;                    def eqoiEqSize = eqoItem.getFieldValue(&quot;eqoiEqSize&quot;);&#xA;                    def eqoiEqHeight = eqoItem.getFieldValue(&quot;eqoiEqHeight&quot;);&#xA;                    def eqoiEqIsoGroup = eqoItem.getFieldValue(&quot;eqoiEqIsoGroup&quot;);&#xA;                    def eqoiQty = eqoItem.getFieldValue(&quot;eqoiQty&quot;);&#xA;                    def eqtypId = eqoItem.getFieldValue(&quot;eqoiSampleEquipType.eqtypId&quot;);&#xA;                    def assignType = null;&#xA;&#xA;                    println(&quot;eqtypId for the Booking Item :::: &quot;+eqtypId);&#xA;&#xA;                    if (eqtypId == null){&#xA;&#xA;                        def eqoiEqIsoGroupKey = eqoiEqIsoGroup.getKey();&#xA;                        def eqoiEqHeightKey = eqoiEqHeight.getKey();&#xA;                        def eqoiEqSizeKey = eqoiEqSize.getKey();&#xA;                        println(&quot;Booking Item attributes ::: &quot;+eqoiEqIsoGroupKey +&quot;::&quot;+eqoiEqHeightKey+&quot;::&quot;+eqoiEqSizeKey);&#xA;&#xA;                        if (eqoiEqIsoGroupKey == &quot;BU&quot;){&#xA;                            if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM90&quot;){&#xA;                                assignType = &quot;V48&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM42&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM90&quot;){&#xA;                                assignType = &quot;L48&quot;&#xA;                            }&#xA;                        }&#xA;&#xA;                        else if (eqoiEqIsoGroupKey == &quot;CH&quot;){&#xA;                            if (eqoiEqSizeKey == &quot;NOM20&quot;){&#xA;                                assignType = &quot;C20&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM24&quot;){&#xA;                                assignType = &quot;C24&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM40&quot;){&#xA;                                assignType = &quot;C40&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM45&quot;){&#xA;                                assignType = &quot;C45&quot;&#xA;                            }&#xA;                        }&#xA;&#xA;                        else if (eqoiEqIsoGroupKey == &quot;GP&quot;){&#xA;                            if (eqoiEqSizeKey == &quot;NOM20&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM86&quot;){&#xA;                                assignType = &quot;D20&quot;&#xA;                                if(isScrap)&#xA;                                    eqoItem.setEqoiSerialRanges(&quot;MATU 207201-208200&quot;)&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM20&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM80&quot;){&#xA;                                assignType = &quot;D20L&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM20&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM96&quot;){&#xA;                                assignType = &quot;D20H&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM24&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM86&quot;){&#xA;                                assignType == &quot;D24&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM24&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM96&quot;){&#xA;                                assignType == &quot;D24H&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM114&quot;){&#xA;                                assignType = &quot;A40L&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM130&quot;){&#xA;                                assignType = &quot;A40&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM40&quot;){&#xA;                                assignType = &quot;F40K&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM86&quot;){&#xA;                                assignType = &quot;D40&quot;&#xA;                                if(isScrap)&#xA;                                    eqoItem.setEqoiSerialRanges(&quot;MATU 226506-227505&quot;)&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM90&quot;){&#xA;                                assignType = &quot;G40&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM90&quot;){&#xA;                                assignType = &quot;G40&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM96&quot;){&#xA;                                assignType = &quot;D40H&quot;&#xA;                                if(isScrap)&#xA;                                    eqoItem.setEqoiSerialRanges(&quot;MATU 245951-250450&quot;)&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM45&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM86&quot;){&#xA;                                assignType = &quot;D45&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM45&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM96&quot;){&#xA;                                assignType = &quot;D45H&quot;&#xA;                            }&#xA;                        }&#xA;&#xA;                        else if (eqoiEqIsoGroupKey == &quot;PF&quot;){&#xA;                            if (eqoiEqSizeKey == &quot;NOM20&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM86&quot;){&#xA;                                assignType = &quot;F20&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM24&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM86&quot;){&#xA;                                assignType = &quot;F24&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM24&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM96&quot;){&#xA;                                assignType = &quot;F24H&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM86&quot;){&#xA;                                assignType = &quot;F40&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM96&quot;){&#xA;                                assignType = &quot;F40H&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM43&quot;){&#xA;                                assignType = &quot;F40L&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM130&quot;){&#xA;                                assignType = &quot;F40M&quot;&#xA;                            }&#xA;                        }&#xA;                        else if (eqoiEqIsoGroupKey == &quot;PL&quot;){&#xA;                            if (eqoiEqSizeKey == &quot;NOM45&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM96&quot;){&#xA;                                assignType = &quot;F45H&quot;&#xA;                            }&#xA;                        }&#xA;                        else if (eqoiEqIsoGroupKey == &quot;RE&quot;){&#xA;                            if (eqoiEqSizeKey == &quot;NOM20&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM86&quot;){&#xA;                                assignType = &quot;R20&quot;&#xA;                            }&#xA;                            if (eqoiEqSizeKey == &quot;NOM20&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM80&quot;){&#xA;                                assignType = &quot;R20L&quot;&#xA;                            }&#xA;                            if (eqoiEqSizeKey == &quot;NOM24&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM86&quot;){&#xA;                                assignType == &quot;R24&quot;&#xA;                            }&#xA;                            if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM86&quot;){&#xA;                                assignType = &quot;R40&quot;&#xA;                            }&#xA;                            if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM96&quot;){&#xA;                                assignType = &quot;R40H&quot;&#xA;                            }&#xA;                            if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM80&quot;){&#xA;                                assignType = &quot;R40L&quot;&#xA;                            }&#xA;                        }&#xA;                        else if (eqoiEqIsoGroupKey == &quot;TG&quot;){&#xA;                            if (eqoiEqSizeKey == &quot;NOM22&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM86&quot;){&#xA;                                assignType = &quot;V24&quot;&#xA;                            }&#xA;                        }&#xA;                        else if (eqoiEqIsoGroupKey == &quot;TN&quot;){&#xA;                            if (eqoiEqSizeKey == &quot;NOM20&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM80&quot;){&#xA;                                assignType = &quot;T20L&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM20&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM86&quot;){&#xA;                                assignType = &quot;T20&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM24&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM86&quot;){&#xA;                                assignType = &quot;T24&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM86&quot;){&#xA;                                assignType = &quot;T40&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM96&quot;){&#xA;                                assignType = &quot;T40H&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM43&quot;){&#xA;                                assignType = &quot;T40L&quot;&#xA;                            }&#xA;                        }&#xA;                        else if (eqoiEqIsoGroupKey == &quot;UT&quot;){&#xA;                            if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM80&quot;){&#xA;                                assignType = &quot;D40O&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM86&quot;){&#xA;                                assignType = &quot;O40&quot;&#xA;                            }&#xA;                            else if (eqoiEqSizeKey == &quot;NOM40&quot; &amp;&amp; eqoiEqHeightKey == &quot;NOM90&quot;){&#xA;                                assignType = &quot;F45&quot;&#xA;                            }&#xA;                        }&#xA;&#xA;                        println(&quot;assignType :::&quot;+assignType);&#xA;                        if (assignType != null) {&#xA;                            def equipType = EquipType.findEquipType(assignType);&#xA;                            eqoItem.setEqoiSampleEquipType(equipType);&#xA;                        }&#xA;                    }&#xA;&#xA;                    eqtypId = eqoItem.getFieldValue(&quot;eqoiSampleEquipType.eqtypId&quot;);&#xA;                    println(gkey + &quot;:&quot;+EqboiOrder+&quot;:&quot;+eqoiEqSize +&quot;:&quot;+ eqoiEqIsoGroup +&quot;:&quot;+ eqoiEqHeight +&quot;:&quot;+ eqoiQty+&quot;:&quot;+eqtypId)&#xA;                }&#xA;            }&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;            println(e.getMessage());&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;" />
<digital-asset id="GvyCmisProcessEditFlagBkp" short-description="GvyCmisProcessEditFlagBkp" is-pre-deployed="N" groovy-code="/*&#xA;*  Srno  Changer Date        Desc&#xA;*  A1    GR      08/09/10    Added Supplemental Check for EditFlag Update  &#xA;*  A2    GR      11/23/10    Commented print Statement  &#xA;*  A3    GR      01/05/11    Newves Fix After Adding Direct posting EDT/BDC to Gems  &#xA;*  A4    GR      09/02/11    SIT unassign to set misc2=S&#xA;*/&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.reference.Shipper&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import java.text.SimpleDateFormat;&#xA;&#xA;public class GvyCmisProcessEditFlagBkp {&#xA;&#xA;public String processEditFlag(Object event, String eventType, Object unit, Object gvyBaseClass)&#xA;{&#xA; //MISC2 Field &#xA; def editFlag = ''&#xA;&#xA; try&#xA; {&#xA;    def gvyEvnt = event.getEvent()&#xA;&#x9;def eventNotes = gvyEvnt.getEventNote()&#xA;    eventNotes = eventNotes != null ? eventNotes : ''&#xA;&#xA;     //Get Flag value  //A3 - Newves Fix After Adding Direct posting EDT/BDC to Gems &#xA;     editFlag = unit.getUnitFlexString11();&#xA;&#x9; if(eventNotes != null &amp;&amp; (eventNotes.startsWith('Supplemental') || eventNotes.startsWith('NewVes') || eventNotes.startsWith('NIS Load'))){&#xA;&#x9;&#x9; return editFlag;&#xA;     }&#xA;    &#xA;     Map fieldMap = getEditFieldMap(); &#xA;     &#xA;      //Reads and Maps Event Updated Field value&#xA;     def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;); &#xA;     Map mapEvntFld = gvyEventUtil.eventFieldChangedValues(event, gvyBaseClass)&#xA;&#xA;      //Read Fields and stores values into StringBuffer Objects for processing&#xA;     editFlag = readEventChangedFields(mapEvntFld, fieldMap, event, editFlag) &#xA;     editFlag = processEventEditFlag(eventType, editFlag);&#xA;&#xA;  }catch(Exception e){&#xA;      e.printStackTrace()&#xA;  }&#xA;  return editFlag&#xA;&#xA;}&#xA;&#xA;&#xA;// Set's EditFlag for Hold/Release Events&#x9;&#xA;public static String processEventEditFlag(String eventType, String editFlagVal)&#xA;{&#xA;  String editFlagHld = ''&#xA;  try&#xA; {&#xA;    editFlagHld = editFlagVal;&#xA;&#x9;&#xA;    if(eventType.equals(&quot;HP_HOLD&quot;) || eventType.equals(&quot;HP_RELEASE&quot;)&#xA;       ||eventType.equals(&quot;CC_HOLD&quot;) || eventType.equals(&quot;CC_RELEASE&quot;))&#xA;    {&#xA;      editFlagHld = appendValue(editFlagHld,&quot;M&quot;);&#xA;     }&#xA;     else if(eventType.equals(&quot;AG_HOLD&quot;) || eventType.equals(&quot;AG_RELEASE&quot;) &#xA;&#x9;   || eventType.equals(&quot;XT_HOLD&quot;) || eventType.equals(&quot;XT_RELEASE&quot;))&#xA;     {&#xA;        editFlagHld = appendValue(editFlagHld,&quot;A&quot;);&#xA;      }&#xA;      else if(eventType.equals(&quot;INB_HOLD&quot;) || eventType.equals(&quot;INB_RELEASE&quot;) &#xA;&#x9;|| eventType.equals(&quot;CUS_HOLD&quot;) || eventType.equals(&quot;CUS_RELEASE&quot;))&#xA;     {&#xA;        editFlagHld  = appendValue(editFlagHld,&quot;B&quot;); &#xA;      }&#xA;      else if(eventType.equals(&quot;ON_HOLD&quot;) || eventType.equals(&quot;ON_RELEASE&quot;))&#xA;     {&#xA;       editFlagHld = appendValue(editFlagHld,&quot;O&quot;); &#xA;     }&#xA;   }catch(Exception e){&#xA;      e.printStackTrace()&#xA;   }&#xA;   return editFlagHld;&#xA;}&#xA;&#xA;//Appends EditFlag value from the Right (10Char max)&#x9;&#xA;public static String appendValue(String edtFlag, String fldEditFlag)&#xA;{   &#xA;  String editFlagValue = &quot;&quot;;&#xA;  try&#xA;  {&#xA;     if(edtFlag != null &amp;&amp; edtFlag.length() == 10){&#xA;       String stripFirstChar = edtFlag.substring(1, edtFlag.length());&#xA;       editFlagValue = stripFirstChar+fldEditFlag;&#xA;        //A2- println('editFlagValue=:::'+editFlagValue+' stripFirstChar :'+stripFirstChar+'    fldEditFlag:'+fldEditFlag) &#xA;     }else{&#xA;         if(edtFlag == null || edtFlag.trim().length() == 0){&#x9;&#xA;             editFlagValue = fldEditFlag;&#xA;             //A2- println('editFlagValue IF :::'+editFlagValue+'   fldEditFlag:::'+fldEditFlag)&#xA;         }else{&#xA;            editFlagValue = edtFlag+fldEditFlag;&#x9;&#xA;          //A2- println('editFlagValue ELSE :::'+editFlagValue+'   fldEditFlag:::'+fldEditFlag)&#xA;         }&#xA;      }&#xA;   }catch(Exception e){&#xA;      e.printStackTrace()&#xA;   }&#xA;   //A2 - println('editFlagValue :::'+editFlagValue)&#xA;  return editFlagValue; &#xA;}&#xA;&#xA;&#xA; public Map getEditFieldMap(){&#xA;&#xA;     Map fieldMap = new HashMap();&#xA;     fieldMap.put(&quot;gdsConsigneeAsString&quot;, &quot;C&quot;); fieldMap.put(&quot;gdsDestination&quot;,&quot;P&quot;);&#xA;     fieldMap.put(&quot;unitFreightKind&quot;,&quot;D&quot;); fieldMap.put(&quot;gdsCommodity&quot;,&quot;D&quot;);&#xA;     fieldMap.put(&quot;unitDrayStatus&quot;,&quot;S&quot;); fieldMap.put(&quot;unitRemark&quot;,&quot;R&quot;);&#xA;     fieldMap.put(&quot;gdsBlNbr&quot;,&quot;K&quot;);&#xA;     fieldMap.put(&quot;gdsConsigneeBzu&quot;, &quot;C&quot;);  // Added for non-BuiltIn Evnts&#xA;     &#xA;     // Added for avail Dates.&#xA;     fieldMap.put(&quot;ufvFlexDate02&quot;,&quot;X&quot;);&#xA;&#xA;     //Added for Release To party&#xA;     fieldMap.put(&quot;unitFlexString02&quot;,&quot;C&quot;);&#xA;&#xA;     return fieldMap&#xA; }&#xA;&#xA;&#xA;   /*&#xA;   * Method reads the Updated field values from the object  &#xA;   * and stores the values in a string buffer for processing&#xA;   */&#xA;   public String readEventChangedFields(Object mapEvntField, Object fieldMap,Object event, String editFlagVal)&#xA;   {&#xA;      def processFlag = false;&#xA;      def fldvalue = &quot;&quot;;&#xA;     def editFlagFld = editFlagVal;&#xA;      try&#xA;      {&#xA;        Iterator it = mapEvntField.keySet().iterator();&#xA;        while (it.hasNext()) &#xA;        {&#xA;             def aField = it.next();&#xA;             if(fieldMap.get(aField) == null) { &#xA;                  continue;&#xA;             }&#xA;&#xA;              //Fetch Field Map : Key,Value &#xA;             fldvalue = fieldMap.get(aField) &#xA;&#xA;             //Fetch Event Updated Field : current and Previous value  &#xA;             def aEvntFieldObj = mapEvntField.get(aField)    &#xA;             def fieldname = aEvntFieldObj.getFieldName()&#xA;             def previousValue = aEvntFieldObj.getpreviousValue()&#xA;              previousValue = previousValue != null ? previousValue : ''&#xA;             def currentValue = aEvntFieldObj.getCurrentValue()&#xA;             currentValue = currentValue != null ? currentValue : ''  &#xA;&#xA;             //println('TEST ---- aField :'+aField+'    fldvalue:'+fldvalue+'  fieldname ::'+fieldname+'  previousValue::'+previousValue+'   currentValue::'+currentValue)&#xA;             //Validating Field Change and Setting Edit Flag &#xA;             if(!currentValue.equals(previousValue))&#xA;             {&#xA;                 if(aField.equals(&quot;gdsCommodity&quot;) &amp;&amp; currentValue.equals(&quot;AUTOMOBILE&quot;) || currentValue.equals(&quot;AUTO&quot;)){&#xA;                    editFlagFld = appendValue(editFlagFld,fldvalue);&#xA;                 }&#xA;                 else if(aField.equals(&quot;unitDrayStatus&quot;) &amp;&amp; (currentValue.equals(&quot;DRAYIN&quot;) || currentValue.equals(&quot;OFFSITE&quot;) || currentValue.equals(&quot;Dray Out and Back&quot;) || previousValue.equals(&quot;OFFSITE&quot;) || previousValue.equals(&quot;Dray Out and Back&quot;))){&#xA;                   editFlagFld = appendValue(editFlagFld,fldvalue);&#xA;                 }&#xA;                 else if (!(aField.equals(&quot;gdsCommodity&quot;) || aField.equals(&quot;unitDrayStatus&quot;)))&#xA;                 {&#xA;                    editFlagFld = appendValue(editFlagFld,fldvalue);&#xA;                 }&#x9; &#xA;             }//Inner If&#xA;         }//While Ends&#xA;     }catch(Exception e){&#xA;        e.printStackTrace()&#xA;     }&#xA;&#x9;return editFlagFld;&#xA;   }//Method readEventChangedFields Ends&#xA;&#xA;&#xA;}" />
<digital-asset id="TestFldChanges" short-description="TestFldChanges" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.atoms.EquipRfrTypeEnum&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.framework.metafields.Metafield&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.framework.util.internationalization.ITranslationContext&#xA;import com.navis.framework.util.internationalization.PropertyKey&#xA;import com.navis.framework.util.internationalization.PropertyKeyFactory&#xA;import com.navis.framework.util.internationalization.TranslationUtils&#xA;import com.navis.framework.util.message.MessageLevel&#xA;import com.navis.framework.util.unit.TemperatureUnit&#xA;import com.navis.framework.util.unit.UnitUtils&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import org.apache.commons.lang.StringUtils&#xA;import com.navis.road.business.atoms.TranSubTypeEnum&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.framework.util.DateUtil;&#xA;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.framework.portal.FieldChanges&#xA;&#xA;import com.navis.argo.business.atoms.BizRoleEnum;&#xA;import com.navis.argo.ArgoRefField;&#xA;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.road.business.model.TruckingCompany;&#xA;import com.navis.road.business.model.TruckingCompanyLine;&#xA;&#xA;import com.navis.framework.business.atoms.LifeCycleStateEnum;&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.road.RoadField;&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;import com.navis.road.business.atoms.TrkcStatusEnum;&#xA;import com.navis.argo.UserArgoField;&#xA;import com.navis.argo.business.security.ArgoUser;&#xA;import com.navis.security.SecurityField;&#xA;import com.navis.inventory.*&#xA;&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.persistence.HibernatingEntity&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.services.business.api.EventManager&#xA;import com.navis.services.business.rules.EventType&#xA;&#xA;import org.apache.log4j.Logger&#xA;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 09/15/2014&#xA;* Description: This groovy is used to update&#xA;*/&#xA;&#xA;public class TestFldChanges extends GroovyInjectionBase&#xA;&#x9;{&#xA;&#x9;def inj = new GroovyInjectionBase();&#xA;&#xA;public void getEventChanges(Object event)&#xA;&#x9;{&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Calling TestFldChanges.getEventChanges :: &quot; + event.event.evntAppliedBy);&#xA;&#x9;&#x9;&#x9;def unit = event.entity;&#xA;&#xA;&#x9;&#x9;&#x9;updateUnitFeilds(unit);&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;public void updateUnitFeilds (Object unit){&#xA;&#x9;try&#xA;&#x9;{&#xA;&#x9;&#x9;def unitId = unit.unitId;&#xA;&#xA;&#x9;&#x9;String eventId = &quot;TEST_FLD_CHNG&quot;;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;  println (&quot;recordManifetEvent&quot;);&#xA;&#x9;&#x9;&#x9;  &#xA;&#x9;&#x9;&#x9;  &#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;unit&gt;&gt;&gt;&gt;&gt;&quot;+unit.unitId);&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt; BEFORE &gt;&gt;&gt;&gt;&gt;&gt;&quot;);&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Bl Nbr&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Gross Weight&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitGoodsAndCtrWtKgLong&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Tare Weight&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqTareWeightKg&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Consignee&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuId&quot;) + &quot;::&quot;+ unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Shipper&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuId&quot;) +&quot;::&quot;+unit.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuName&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;AvailDate&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate02&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;DueDate&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate03&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Temp Required&gt;&gt;&gt;&gt;&gt;&quot;+unit.getUnitGoods().getGdsReeferRqmnts().getRfreqTempRequiredC());&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;STIF Shpr&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitFlexString06&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Unit Notes&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitRemark&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;CSR ID&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitFlexString03&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Seal Number1&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitSealNbr1&quot;));&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;def blNbr = unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;Double grsWt = unit.getFieldValue(&quot;unitGoodsAndCtrWtKgLong&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;Double trWt = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqTareWeightKg&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def con = unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def shp = unit.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def dte2 = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate02&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def dte3 = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate03&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;Double temp = unit.getUnitGoods().getGdsReeferRqmnts().getRfreqTempRequiredC();&#xA;&#x9;&#x9;&#x9;&#x9;Double newTemp = 0;&#xA;&#x9;&#x9;&#x9;&#x9;def str6 = unit.getFieldValue(&quot;unitFlexString06&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def notes = unit.getFieldValue(&quot;unitRemark&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def str3 = unit.getFieldValue(&quot;unitFlexString03&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def seal = unit.getFieldValue(&quot;unitSealNbr1&quot;);&#xA;&#x9;&#x9;&#x9;  &#xA;&#xA;&#x9;&#x9;      EventManager sem = (EventManager) Roastery.getBean(EventManager.BEAN_ID);&#xA;&#x9;&#x9;      EventType eventType = EventType.findEventType(eventId);&#xA;&#x9;&#x9;      FieldChanges changes = new FieldChanges();&#xA;&#x9;&#x9;      &#xA;&#x9;&#x9;     &#xA;&#x9;&#x9;      changes.setFieldChange(InventoryField.GDS_BL_NBR, blNbr, null);&#xA;&#x9;&#x9;      changes.setFieldChange(InventoryField.GDS_CONSIGNEE_BZU, con , null);&#xA;&#x9;&#x9;      changes.setFieldChange(InventoryField.GDS_SHIPPER_BZU, shp, null);&#xA;&#x9;&#x9;      changes.setFieldChange(InventoryField.UNIT_GOODS_AND_CTR_WT_KG, grsWt , trWt);&#xA;&#x9;&#x9;      changes.setFieldChange(InventoryField.UFV_FLEX_DATE02, dte2 , null);&#xA;&#x9;&#x9;      changes.setFieldChange(InventoryField.UFV_FLEX_DATE03, dte3 , null);&#xA;&#x9;&#x9;      changes.setFieldChange(InventoryField.UNIT_FLEX_STRING06, str6 , null);&#xA;&#x9;&#x9;      changes.setFieldChange(InventoryField.RFREQ_TEMP_REQUIRED_C, temp , null);&#xA;&#x9;&#x9;      changes.setFieldChange(InventoryField.UNIT_REMARK, notes , null);&#xA;&#x9;&#x9;      changes.setFieldChange(InventoryField.UNIT_FLEX_STRING03, str3 , null);&#xA;&#x9;&#x9;      changes.setFieldChange(InventoryField.UNIT_SEAL_NBR1, seal , null);&#xA;&#xA;&#x9;&#x9;      unit.recordUnitEvent(eventType, changes, null);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (Throwable throwable) {&#xA;&#x9;&#x9;      LOGGER.warn(&quot;Unexpected Error occured while recording service event&quot; + throwable);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;}&#xA;}&#xA;&#xA;private static final Logger LOGGER = Logger.getLogger(TestFldChanges.class);&#xA;}" />
<digital-asset id="MatValidateTrucker" short-description="MatValidateTrucker" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.road.business.model.TruckingCompany;&#xA;import com.navis.road.business.model.TruckingCompanyLine;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.argo.business.atoms.BizRoleEnum;&#xA;import com.navis.argo.ArgoRefField;&#xA;import com.navis.security.business.user.BaseUser&#xA;import com.navis.framework.business.atoms.LifeCycleStateEnum;&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.road.RoadField;&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;import com.navis.road.business.atoms.TrkcStatusEnum;&#xA;import org.apache.log4j.Logger&#xA;&#xA;&#xA;public class MatValidateTrucker extends GroovyInjectionBase{&#xA;&#x9;private final String  emailFrom = '1aktosdevteam@matson.com'&#xA;&#x9;private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;//public String execute(Map inParameters) {&#xA;&#x9;public String execute(String unit, String desTrkr, String rlsToParty, String nisTrkr, String ybTrkr) {&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;String trucker = &quot;ABFS&quot;;&#xA;&#x9;&#x9;//String unit = &quot;MATU123456&quot;;&#xA;&#x9;&#x9;println(&quot;Calling MatValidateTrucker for Trucker ::&quot;+desTrkr+&quot;::&quot;+rlsToParty+&quot;::&quot;+nisTrkr+&quot;::&quot;+ybTrkr);&#xA;&#x9;&#x9;if (desTrkr != null){&#xA;&#x9;&#x9;&#x9;checkValidTrucker(unit, desTrkr, &quot;Trucker&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if (rlsToParty != null){&#xA;&#x9;&#x9;&#x9;checkValidTrucker(unit, rlsToParty, &quot;Release to Party&quot;)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if (nisTrkr != null){&#xA;&#x9;&#x9;&#x9;checkValidTrucker(unit, nisTrkr, &quot;NIS Trucker&quot;)&#xA;&#x9;&#x9;}&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if (ybTrkr != null){&#xA;&#x9;&#x9;&#x9;checkValidTrucker(unit, ybTrkr, &quot;YB Trucker&quot;)&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#xA;/*&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;def inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;&#x9;def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;LineOperator lineMat = LineOperator.findLineOperatorById(&quot;MAT&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;TruckingCompany&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_ROLE, BizRoleEnum.HAULIER));&#xA;&#x9;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_LIFE_CYCLE_STATE, LifeCycleStateEnum.ACTIVE));&#xA;&#x9;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_ID, trucker));&#xA;&#xA;&#x9;&#x9;&#x9;def truckList =  HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;    &#x9;&#x9;for(atruck in truckList) {&#xA;&#x9;&#x9;  &#x9;&#x9;TruckingCompanyLine truckingCompanyLineMat = TruckingCompanyLine.findTrukcingCompanyLineForLine(atruck,lineMat);&#xA;&#x9;&#x9;&#x9;&#x9;for(atruckLineMat in truckingCompanyLineMat) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;status = atruckLineMat.getTrkclineStatus();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;status = status != null ? status.getKey():null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(unit +&quot; Trucker status for  &quot;+ trucker +&quot;:: Is ::&quot;+status);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (status != &quot;OK&quot;){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Sending Email&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo,&quot; Invalid Trucker : &quot; + trucker + &quot; Assigned for &quot; + unit,unit +&quot; assigned with trucker &quot;+trucker+&quot; which has Line agreement set to &quot;+status+&quot;. Please verify and make the corrections if required.&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;&#x9;}*/&#xA;    }&#xA;    public void checkValidTrucker(String unit, String trucker, String type) {&#xA;    &#x9;try {&#xA;&#x9;&#x9;&#x9;def inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;&#x9;def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;);&#xA;&#x9;&#x9;&#x9;def status = null;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;LineOperator lineMat = LineOperator.findLineOperatorById(&quot;MAT&quot;);&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;TruckingCompany&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_ROLE, BizRoleEnum.HAULIER));&#xA;&#x9;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_LIFE_CYCLE_STATE, LifeCycleStateEnum.ACTIVE));&#xA;&#x9;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_ID, trucker));&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;def truckList =  HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;for(atruck in truckList) {&#xA;&#x9;&#x9;&#x9;&#x9;TruckingCompanyLine truckingCompanyLineMat = TruckingCompanyLine.findTrukcingCompanyLineForLine(atruck,lineMat);&#xA;&#x9;&#x9;&#x9;&#x9;for(atruckLineMat in truckingCompanyLineMat) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;status = atruckLineMat.getTrkclineStatus();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;status = status != null ? status.getKey():null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(unit +&quot; Trucker status for  &quot;+ trucker +&quot;:: Is ::&quot;+status);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (status != &quot;OK&quot;){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Sending Email&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo,&quot; Invalid &quot;+type+&quot; : &quot; + trucker + &quot; Assigned for &quot; + unit,unit +&quot; assigned with trucker &quot;+trucker+&quot; which has Line agreement set to &quot;+status+&quot;. Please verify and make the corrections if required.&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;}&#xA;    &#xA;&#x9;private static final Logger LOGGER = Logger.getLogger(MatValidateTrucker.class);&#xA;}" />
<digital-asset id="GvyAuditDischargeCompleteLastCtr" short-description="GvyAuditDischargeCompleteLastCtr" is-pre-deployed="N" groovy-code="/*&#xA;*  A1   KM   02/10/2011     Initial groovyPlugins for vessel (long haul/barges) discharge audit&#xA;*                           Sends out Client discharge report&#xA;*  A2   GR                  Last container discharge report&#xA;*  A3   PS                  Sends out confirmation notice that discharge audit is complete&#xA;*  A4   GR                  Altered Query last DFV Rpt(no through cntr,no mty cntr,no pier29 cntr)&#xA;                            changed query to lookup on actual IB visit&#xA;*  A5   GR                  Changed Obcarrier to vessel visit IBvesvoy&#xA;*  A6   GR                  Check line operator split&#xA;*  A7   GR   05/02/11       Made Code Generic to Handel Load and Discharge function&#xA;*  A8   GR   05/02/11       For Load units change sorting by timeOut&#xA;*  A9   GR   05/02/11       For Load units change sort by last moved&#xA;*  A10  GR   05/04/11       Set Client unit Timezone, Hardcode HON as Facilty, Status=FreightKind&#xA;*  A11  GR   05/20/11       Adding rob,dfv COUNTS&#xA;*  A12  GR   05/23/11       OnDeck, Below Deck addition&#xA;*  A13  GR   05/24/11       Defect picking up Retired unit. Added Filter&#xA;*  A14  GR   05/25/11       Check Nullpointer Exception&#xA;*  A15  GR   05/26/11       FIX Replaced TimeIn with UfvFlexDate4 a)Correct Discharge b) Client Restow unit&#xA;*  A16  GR   06/15/11       Filter out Through Contianers from Client Cntr report&#xA;*  A17  GR   06/28/11       Trailer Report to Accouting&#xA;*  A18  KM   07/08/11       Split email audit pau and trailer report&#xA;*  A19&#x9;GR   07/12/11       Set OBcarrier for Client Reports&#xA;*  A20  KM   09/12/11       Updated prod emails addresses&#xA;* 08/16/11 2.1 Updated Email Method&#xA;* 08/14/2013 Fix the ROB list count to include all THROUGHs, remove the DEPARTED or LOADED condition&#xA;* 08/16/2013 Add filter to query for advised, retired&#xA;* 08/20/2013 Add filters for Discharge, fix ROB list count&#xA;*  A21   KM   12/09/13      Added CKorenaga@matson.com to acctEmail var&#xA;*  A22   KR   05/29/14      Split Discharge Last Cntr report into SI &amp; PIER 2&#xA;*/&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;import java.util.HashMap&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;import com.navis.argo.business.atoms.FreightKindEnum;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.api.EventManager&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.ServicesEntity&#xA;import com.navis.services.ServicesField&#xA;import com.navis.argo.business.atoms.LogicalEntityEnum&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;&#xA;import java.text.DateFormat;&#xA;import java.text.SimpleDateFormat;&#xA;import java.util.Date;&#xA;&#xA;&#xA;public class GvyAuditDischargeCompleteLastCtr extends GroovyInjectionBase&#xA;{&#xA;    private String outBoundCarrierId = null&#xA;    def inj = null;&#xA;    def gvyEventUtil = null;&#xA;    HashMap mapDisplayLst = new HashMap(); //A2&#xA;&#x9;HashMap mapDisplayLstP2 = new HashMap(); //A22&#xA;    def reportType = null;&#xA;    def timezone = null;&#xA;    List totalUnitList = null;&#xA;    private static final String eol = &quot;\r\n&quot;;&#xA;    def rptFieldSortUtil = null;&#xA;    def event = null;&#xA;    HashMap mapTrailer = new HashMap();&#xA;    def vesselForDischId = null;&#xA;    Date vesselATADate = null;&#xA;    Date vesselATDDate = null;&#xA;    //def emailTo = '1DataI_Hon@matson.com,1aktosdevteam@matson.com,sysreports@matson.com;MChoo@matson.com'  //A20&#xA;    //def acctEmail = 'MChoo@matson.com,1TOSDevTeamHON@matson.com'  //A21&#xA;   def emailTo = '1aktosdevteam@matson.com'  //A20&#xA;   def acctEmail = '1aktosdevteam@matson.com'  //A21&#xA;&#xA;&#xA;    def trailerCnt = 0;&#xA;&#xA;    public String checkForMultipleDischarges(){&#xA;        //1. Check if unit has Multiple discharge events&#xA;        //2. if Multiple discharge then drop out of list&#xA;        //3. resort for last discharge value&#xA;        //4. Return last disch unit&#xA;    }&#xA;&#xA;    public String checkForRestowUnit(){&#xA;        //1. check if its a restow unit then drop it out of the list&#xA;    }&#xA;&#xA;    public void init(){&#xA;        inj = new GroovyInjectionBase();&#xA;        gvyEventUtil = gvyEventUtil == null ? inj.getGroovyClassInstance(&quot;GvyEventUtil&quot;) : gvyEventUtil ;&#xA;        timezone = ContextHelper.getThreadUserTimezone();&#xA;    }&#xA;&#xA;    public boolean processClientDischarge(Object eventObj, String rptType)&#xA;    {&#xA;        //1. lookup all units on Board&#xA;        //2. Fetch and Map information&#xA;        //3. Generate Report&#xA;        init() // Initialize Global variable&#xA;&#xA;        try&#xA;        {&#xA;            def visit = eventObj.getEntity();&#xA;            reportType = rptType;&#xA;            event = eventObj&#xA;&#xA;            //getEmail Grp List&#xA;            def nextFacility = visit.getFieldValue(&quot;cvdCv.cvNextFacility.fcyId&quot;)&#xA;            def facility = visit.getFieldValue(&quot;cvdCv.cvFacility.fcyId&quot;)&#xA;&#xA;            //outBoundCarrierId =  visit.cvdCv&#xA;            outBoundCarrierId = visit.vvdVessel.vesId+visit.getFieldValue(&quot;vvdObVygNbr&quot;) //A5&#xA;            //if outbound carrier is YB just return   check for client vessels if yes filter out client service&#xA;            if(outBoundCarrierId.startsWith('YB')){&#xA;                return null;&#xA;            }&#xA;            // A1 need to find method of discharge units&#xA;            List dfvUnits = findAllClientUnits(visit, rptType)&#xA;            //println(&quot;dfv Unit list &quot;+dfvUnits)&#xA;            // A2 need to find on client units&#xA;            if(dfvUnits != null &amp;&amp; dfvUnits.size() &gt; 0){&#xA;                List sortDfvUnits = sortUnitsByLineOp(dfvUnits)&#xA;                //println(&quot;sort dfv Unit list &quot;+sortDfvUnits)&#xA;                // A3 group line operators togethers&#xA;                // A4 add report creation and emailing spcecific to line operator&#xA;                procClientCntr(sortDfvUnits)&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;    /*&#xA;    * Method finds all NON-MAT Container and Add the cntrs to a list&#xA;    * Returns a List of containers&#xA;    */&#xA;    public List findAllClientUnits(Object vesVisit, String rptType)&#xA;    {&#xA;        ArrayList vesVistUnitLists = new ArrayList();&#xA;        try{&#xA;            Long lineOpGkey = LineOperator.findLineOperatorById(&quot;MAT&quot;).bzuGkey&#xA;            //Long cvGkey = vesVisit.getCvdCv().getCvGkey()&#xA;            def id = vesVisit.getCvdCv().getCvId()&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;            if('DISCHARGE'.equals(rptType)){&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, id));&#xA;            }else if ('LOAD'.equals(rptType)){&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID, id));&#xA;            }&#xA;            dq = dq.addDqPredicate(PredicateFactory.ne(UnitField.UFV_LINE_OPERATOR_GKEY, lineOpGkey)).addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY, UnitCategoryEnum.THROUGH)).addDqOrdering(Ordering.asc(UnitField.UFV_LINE_OPERATOR_GKEY));  //A17&#xA;            List vesVistUnits  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            println(&quot;dq ====&quot;+dq+&quot; unitsList ====&quot;+(vesVistUnits != null ? vesVistUnits.size() : &quot;NO RESULT&quot;));&#xA;&#xA;            if('DISCHARGE'.equals(rptType)){&#xA;                vesVistUnitLists.addAll(vesVistUnits);&#xA;            } else if ('LOAD'.equals(rptType)){&#xA;                Iterator iter = vesVistUnits.iterator();&#xA;                while(iter.hasNext()) {&#xA;                    def ufv = iter.next();&#xA;                    def transitState =  ufv.getUfvTransitState()&#xA;                    if (transitState != null) {&#xA;                        transitState = transitState != null ? transitState.getKey() : ''&#xA;                        def tState = transitState.split(&quot;_&quot;)&#xA;                        transitState = tState[1]&#xA;                    }&#xA;&#xA;                    if (transitState != null &amp;&amp; (&quot;DEPARTED&quot;.equals(transitState) || &quot;LOADED&quot;.equals(transitState) ))&#xA;                    {&#xA;                        vesVistUnitLists.add(ufv)&#xA;                    }&#xA;                }&#xA;&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return vesVistUnitLists&#xA;    }&#xA;&#xA;    //1.Maps unit Data to report file attribute&#xA;    public HashMap populateUnitData(UnitFacilityVisit ufv)&#xA;    {&#xA;        def unit = ufv.ufvUnit&#xA;        def transitState=unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;        if(ufv.ufvTimeIn == null){ //A14&#xA;            return  null;  // Would be a Through unit&#xA;        }&#xA;&#xA;        HashMap map = null;&#xA;        try&#xA;        {&#xA;            map = new HashMap();&#xA;            map.put(&quot;UnitNbr&quot;, unit.getFieldValue(&quot;unitId&quot;));&#xA;            map.put(&quot;PositionSlot&quot;, unit.unitFreightKind.name);&#xA;            map.put(&quot;POD&quot;, unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;));&#xA;            map.put(&quot;POL&quot;, unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;));&#xA;            map.put(&quot;EquipmentType&quot;, unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;));&#xA;            map.put(&quot;OutBoundCarrierId&quot;, outBoundCarrierId);&#xA;            map.put(&quot;LineOperator&quot;,unit.getFieldValue(&quot;unitLineOperator.bzuId&quot;));&#xA;            map.put(&quot;Destination&quot;,unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;));&#xA;            //A8&#xA;            if('DISCHARGE'.equals(reportType)){&#xA;                map.put(&quot;InTime&quot;,ContextHelper.formatTimestamp(ufv.ufvTimeIn, timezone));&#xA;            }else if ('LOAD'.equals(reportType)){&#xA;                map.put(&quot;InTime&quot;,ContextHelper.formatTimestamp(ufv.ufvTimeOfLastMove, timezone));&#xA;            }&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return map;&#xA;    }&#xA;    /*&#xA;    * Method sorts NON-MAT Container by Line Operator and created Individial list of each LineOperator&#xA;    * Returns List of Individual LineOperator List (example: ListOne=ALL MAE,ListTwo=ALL HCL,ListThree=ALL APL)&#xA;    */&#xA;    public List sortUnitsByLineOp(List unitList)&#xA;    {&#xA;        ArrayList listAllLineOp = new ArrayList();&#xA;        try{&#xA;            def aUfv = null;&#xA;            def prevLineOp = null;&#xA;            ArrayList listPerLineOp = null;&#xA;            Iterator itUnitList = unitList.iterator();&#xA;            while(itUnitList.hasNext()){&#xA;                aUfv = itUnitList.next();&#xA;                if(aUfv.ufvUnit.unitLineOperator.bzuId.equals(prevLineOp)){&#xA;                    listPerLineOp.add(aUfv);&#xA;                }else{&#xA;                    if(prevLineOp !=null){&#xA;                        listAllLineOp.add(listPerLineOp)&#xA;                    }&#xA;                    //First time it ill come here and createObject - Initialize new Variable&#xA;                    listPerLineOp = new ArrayList();&#xA;                    //Set new Variable&#xA;                    listPerLineOp.add(aUfv);&#xA;                } //Else Ends&#xA;                prevLineOp = aUfv.ufvUnit.unitLineOperator.bzuId&#xA;            } //While Ends&#xA;            //Add last loop values - Just incase there was only one unit and it went into the else loop&#xA;            listAllLineOp.add(listPerLineOp)&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return listAllLineOp&#xA;    }&#xA;    /*&#xA;    * Method a) Reads Each Individual LineOperator conatiner list&#xA;    * b) Populates Report data&#xA;      c) Gets Line Operator contact Information&#xA;      d) Calls Ireport code and mails report to specific LineOperator Email&#xA;    */&#xA;    public void procClientCntr(List list){&#xA;        try{&#xA;            Iterator itUnitList = list.iterator();&#xA;            def aUfv  = null;&#xA;            while(itUnitList.hasNext()){&#xA;                def contactName = null;&#xA;                HashMap fmtMap = null;&#xA;                def contactEmail = &quot;1aktosdevteam@matson.com&quot;;&#xA;                //def contactEmail = &quot;1TOSDevTeamHON@gmail.com&quot;;&#xA;                ArrayList rptUnitList = new ArrayList();&#xA;                ArrayList perLinOplist = itUnitList.next();&#xA;                Iterator  itperLinOp = perLinOplist.iterator();&#xA;                while(itperLinOp.hasNext()){&#xA;                    aUfv = itperLinOp.next();&#xA;                    //println(&quot;unitId=&quot;+aUfv.ufvUnit.unitId+&quot;    LineOP=&quot;+aUfv.ufvUnit.unitLineOperator.bzuId)&#xA;                    //Populate Report Data&#xA;                    fmtMap = populateUnitData(aUfv)&#xA;                    if(fmtMap != null){&#xA;                        rptUnitList.add(fmtMap)&#xA;                    }&#xA;                }//Inner While Ends&#xA;&#xA;                //Select LineOperator Contact Information&#xA;                if(aUfv != null){&#xA;                    def lineOperator = aUfv.ufvUnit.unitLineOperator&#xA;                    def contactInfo = lineOperator.bzuCtct&#xA;                    if(contactInfo != null){&#xA;                        contactName = contactInfo.ctctName&#xA;                        contactEmail = contactInfo.ctctEmailAddress&#xA;                    }//Outer While ends&#xA;&#xA;                    //Call IReport Generation Code Here&#xA;                    processRpt(rptUnitList, contactName, contactEmail)&#xA;                    //println(&quot;--------------------------------------------------&quot;)&#xA;                    //println(&quot;--------------------------------------------------&quot;)&#xA;                }// If Ends&#xA;            } //While Ends&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;    public void processRpt(List unitList, String contactName, String contactEmail){&#xA;        try{&#xA;            println(&quot;unitList :&quot;+ (unitList != null ? unitList.size() : &quot;EMPTY&quot;))&#xA;&#xA;            //Set Report Parameter&#xA;            def reportDesignName = null;&#xA;            def displayType = null;&#xA;            HashMap parameters = new HashMap();&#xA;            String strDate = ContextHelper.formatTimestamp(new Date(), timezone)&#xA;&#xA;            //println(&quot;Event Time ::&quot;+event.getEvent().getEventTime()+&quot;    TimeZone:&quot;+ContextHelper.getThreadUserTimezone()+&quot;  strDate ::&quot;+strDate)&#xA;            parameters.put(&quot;Date&quot;,strDate);&#xA;            parameters.put(&quot;recordCount&quot;,(unitList != null ? unitList.size() : 0))&#xA;&#xA;            //A7&#xA;            if(&quot;DISCHARGE&quot;.equals(reportType)){&#xA;                reportDesignName = &quot;CLIENT DISCHARGE AUDIT&quot;;&#xA;                displayType = &quot;Discharge&quot;;&#xA;&#xA;            }else if(&quot;LOAD&quot;.equals(reportType)){&#xA;                reportDesignName = &quot;CLIENT LOAD AUDIT&quot;;&#xA;                displayType = &quot;Load&quot;;&#xA;            }&#xA;&#xA;            //A401&#xA;            def gvyRptUtil = getGroovyClassInstance(&quot;ReportFieldSortUtil&quot;)&#xA;            if(unitList != null &amp;&amp; unitList.size() &gt; 0){&#xA;                unitList =  gvyRptUtil.processFieldSort(unitList,&quot;EquipmentType,UnitNbr&quot;)&#xA;                Map mapList = (Map)unitList.get(0);&#xA;                println(&quot;mapList=&quot;+mapList);&#xA;                //Create and Mail Report&#xA;                JRDataSource ds = new JRMapCollectionDataSource(unitList);&#xA;                def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;                reportRunner.emailReport(ds, parameters, reportDesignName, contactEmail, &quot;Matson Client Report - &quot; +outBoundCarrierId+&quot; &quot;+displayType, &quot;Attached is the &quot;+outBoundCarrierId+ &quot; &quot;+displayType+&quot; report&quot;);&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;    } //method ends&#xA;&#xA;    //A2 -- Starts last discharge report&#xA;&#x9;  public boolean processLastDischCntrRpt(event, String rptType){&#xA;&#x9;    init() // Initialize Global variable&#xA;&#x9;    HashMap mapAuto = new HashMap();&#xA;&#x9;    HashMap mapCyHon = new HashMap();&#xA;&#x9;    HashMap mapCyOthers = new HashMap();&#xA;&#x9;&#x9;//A22&#xA;&#x9;&#x9;HashMap mapAutoP2 = new HashMap();&#xA;&#x9;&#x9;HashMap mapCyHonP2 = new HashMap();&#xA;&#x9;&#x9;HashMap mapCyOthersP2 = new HashMap();&#xA;&#xA;&#x9;    //A7&#xA;&#x9;    reportType = reportType == null ? rptType : reportType&#xA;&#x9;    List units = null;&#xA;&#x9;    println(&quot;processLastDischCntrRpt begin&quot;)&#xA;&#x9;    try{&#xA;&#x9;      inj = new GroovyInjectionBase();&#xA;&#x9;      def visit = event.getEntity();&#xA;&#x9;      def carrierId =  visit.cvdCv&#xA;&#xA;&#x9;      if(&quot;BARGE&quot;.equals(visit.vvdVessel.vesVesselClass.vesclassVesselType.name)) {&#xA;&#x9;        return;&#xA;&#x9;      }&#xA;&#xA;&#x9;      units = findAllUnitsForVesVoy(visit)&#xA;&#xA;&#x9;      Iterator iter = units.iterator();&#xA;&#x9;      UnitFacilityVisit ufv = null;&#xA;&#x9;      Unit unit = null;&#xA;&#x9;      def dest = null;&#xA;&#x9;      def commodity = null;&#xA;&#x9;      def timeIn = null;&#xA;&#x9;      def aibcarrierId = null;&#xA;&#x9;      while(iter.hasNext()) {&#xA;&#x9;        ufv = iter.next();&#xA;&#x9;        unit = ufv.ufvUnit&#xA;&#x9;        println(&quot;unit number is &quot;+unit.getFieldValue(&quot;unitId&quot;))&#xA;&#x9;        if(unit.unitActiveUfv == null || UnitVisitStateEnum.RETIRED.equals(unit.unitActiveUfv.ufvVisitState) || UnitVisitStateEnum.ADVISED.equals(unit.unitActiveUfv.ufvVisitState)){&#xA;&#x9;          continue;&#xA;&#x9;        }&#xA;&#x9;        dest = unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;)&#xA;&#x9;        commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;)&#xA;&#x9;        commodity = commodity != null ? commodity : ''&#xA;&#x9;        //A8&#xA;&#x9;        if(&quot;DISCHARGE&quot;.equals(reportType)){&#xA;&#x9;          timeIn = ufv.ufvTimeIn&#xA;&#x9;        }else if (&quot;LOAD&quot;.equals(reportType)){&#xA;&#x9;          timeIn = ufv.ufvTimeOfLastMove&#xA;&#x9;        }&#xA;&#x9;        try{&#xA;&#x9;          println (&quot; visit :&quot; + visit)&#xA;&#x9;          String outboundCarrierVehicleId = visit.getCarrierVehicleId();&#xA;&#x9;          String outboundCarrierVehicleVoy = visit.getCarrierObVoyNbrOrTrainId();&#xA;&#x9;          outBoundCarrierId = outboundCarrierVehicleId + outboundCarrierVehicleVoy;&#xA;&#x9;          println (&quot; outboundCarrierId: &quot; + outBoundCarrierId);&#xA;&#x9;        } catch (Exception e){&#xA;&#x9;          println (&quot; Exception in getting outbound Carrier Id &quot;);&#xA;&#x9;        }&#xA;&#xA;&#x9;        def lkpSlot = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;&#x9;        lkpSlot = lkpSlot!= null ? lkpSlot : ''&#xA;&#x9;        println(&quot;unit &quot;+unit.getFieldValue(&quot;unitId&quot;)+&quot; commodity &quot;+commodity+&quot; lkpSlot&quot;+lkpSlot+&quot; dest&quot;+dest)&#xA;&#x9;        def lkpSlotValue = lkpSlot.indexOf(&quot;.&quot;)== -1 ? lkpSlot : lkpSlot.substring(0,lkpSlot.indexOf(&quot;.&quot;));&#xA;&#x9;        println(&quot;exception in the above unit  &quot;+lkpSlotValue);&#xA;&#x9;        boolean pier29Loc = lkpSlotValue.startsWith('P29') || lkpSlotValue.startsWith('29Z') ? true : false&#xA;&#x9;&#x9;&#x9;boolean pier2Loc = lkpSlotValue.startsWith('P2') ? true : false&#xA;&#x9;        println(&quot;unit=&quot;+unit.getFieldValue(&quot;unitId&quot;)+&quot;, commodity=&quot;+commodity+&quot;, timeIn=&quot;+timeIn+&quot;, dest=&quot;+dest+&quot;, pier29Loc=&quot;+pier29Loc+&quot;, pier2Loc=&quot;+pier2Loc)&#xA;&#x9;        if(pier2Loc) {//A22&#xA;&#x9;&#x9;&#x9;&#x9;if(commodity.contains('AUTO') &amp;&amp; timeIn != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;mapAutoP2.put(ufv, timeIn)&#xA;&#x9;&#x9;&#x9;&#x9;} else if(!commodity.contains('AUTO') &amp;&amp; 'HON'.equals(dest) &amp;&amp; timeIn != null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;mapCyHonP2.put(ufv, timeIn)&#xA;&#x9;&#x9;&#x9;&#x9;} else if(!commodity.contains('AUTO') &amp;&amp; !'HON'.equals(dest) &amp;&amp; timeIn != null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;mapCyOthersP2.put(ufv, timeIn)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}//A22&#xA;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;if(commodity.contains('AUTO') &amp;&amp; timeIn != null) {&#xA;&#x9;&#x9;          mapAuto.put(ufv, timeIn)&#xA;&#x9;&#x9;        }else if (!commodity.contains('AUTO') &amp;&amp; !pier29Loc &amp;&amp; 'HON'.equals(dest) &amp;&amp; timeIn != null){&#xA;&#x9;&#x9;          mapCyHon.put(ufv, timeIn)&#xA;&#x9;&#x9;        }else if(!commodity.contains('AUTO') &amp;&amp;  !pier29Loc &amp;&amp; !'HON'.equals(dest) &amp;&amp; timeIn != null){&#xA;&#x9;&#x9;          mapCyOthers.put(ufv, timeIn)&#xA;&#x9;&#x9;        }&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;      }&#xA;&#x9;      //println(&quot;  mapAuto.size() ===&quot;+ mapAuto.size()+&quot; mapCyHon.size() ===&quot;+mapCyHon.size()+&quot; mapCyOthers.size() ===&quot;+mapCyOthers.size())&#xA;&#x9;      //Sort Map Object&#xA;&#x9;      rptFieldSortUtil = rptFieldSortUtil != null ? rptFieldSortUtil : inj.getGroovyClassInstance(&quot;ReportFieldSortUtil&quot;);&#xA;&#x9;      mapAuto = mapAuto != null &amp;&amp; mapAuto.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapAuto) : null //sort Auto&#xA;&#x9;      mapCyHon = mapCyHon!= null &amp;&amp; mapCyHon.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapCyHon) : null //sort CyHon&#xA;&#x9;      mapCyOthers = mapCyOthers != null &amp;&amp; mapCyOthers.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapCyOthers) : null //sort CyNonHon&#xA;&#x9;&#x9;  //A22&#xA;&#x9;&#x9;  mapAutoP2 = mapAutoP2 != null &amp;&amp; mapAutoP2.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapAutoP2) : null //sort Auto&#xA;&#x9;&#x9;  mapCyHonP2 = mapCyHonP2!= null &amp;&amp; mapCyHonP2.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapCyHonP2) : null //sort CyHon&#xA;&#x9;&#x9;  mapCyOthersP2 = mapCyOthersP2 != null &amp;&amp; mapCyOthersP2.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapCyOthersP2) : null //sort CyNonHon&#xA;&#xA;&#x9;      //last Disch Units&#xA;&#x9;      UnitFacilityVisit ufvAuto = getLastDischUnit(mapAuto,&quot;&quot;);&#xA;&#x9;      UnitFacilityVisit ufvCyHon = getLastDischUnit(mapCyHon,&quot;&quot;);&#xA;&#x9;      UnitFacilityVisit ufvCyOthers = getLastDischUnit(mapCyOthers,&quot;&quot;);&#xA;&#x9;&#x9;  //A22&#xA;&#x9;&#x9;  UnitFacilityVisit ufvAutoP2 = getLastDischUnit(mapAutoP2,&quot;&quot;);&#xA;&#x9;&#x9;  UnitFacilityVisit ufvCyHonP2 = getLastDischUnit(mapCyHonP2,&quot;&quot;);&#xA;&#x9;&#x9;  UnitFacilityVisit ufvCyOthersP2 = getLastDischUnit(mapCyOthersP2,&quot;&quot;);&#xA;&#xA;&#x9;      println(&quot;mapDisplayLst size ==&quot;+mapDisplayLst.size())&#xA;&#x9;      mapDisplayLst = mapDisplayLst.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapDisplayLst) : null&#xA;&#x9;      def lstDischUfv = getLastDischUnit(mapDisplayLst,&quot;ALL&quot;);&#xA;&#x9;      println(&quot;ufvAuto=&quot;+ufvAuto+&quot;, ufvCyHon=&quot;+ufvCyHon+&quot;, ufvCyOthers=&quot;+ufvCyOthers+&quot;,  lstDischUfv=&quot;+lstDischUfv);&#xA;&#x9;&#x9;  //A22&#xA;&#x9;&#x9;  println(&quot;mapDisplayLstP2 size ==&quot;+mapDisplayLst.size())&#xA;&#x9;&#x9;  mapDisplayLstP2 = mapDisplayLstP2.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapDisplayLstP2) : null&#xA;&#x9;&#x9;  def lstDischUfvP2 = getLastDischUnit(mapDisplayLstP2, &quot;ALL&quot;)&#xA;&#x9;&#x9;  println(&quot;ufvAutoP2=&quot;+ufvAutoP2+&quot;, ufvCyHonP2=&quot;+ufvCyHonP2+&quot;, ufvCyOthersP2=&quot;+ufvCyOthersP2+&quot;, lstDischUfvP2=&quot;+lstDischUfvP2);&#xA;&#x9;      //For Report Display&#xA;&#x9;      HashMap lastUnit = null;&#xA;&#x9;      ArrayList unitRptList = new ArrayList();&#xA;&#xA;&#x9;      String pier2Report = null;&#xA;&#x9;      if (ufvAutoP2 == null &amp;&amp; ufvCyHonP2 == null &amp;&amp; ufvCyOthersP2 == null &amp;&amp; lstDischUfvP2 == null){&#xA;&#x9;      &#x9;pier2Report = &quot;No PIER2 Discharges for &quot;+ outBoundCarrierId;&#xA;&#x9;      }&#xA;&#x9;      &#xA;&#x9;      unitRptList.add(populateLstDischUnit(ufvAuto, &quot;AUTO&quot;, &quot;SI&quot;,pier2Report))&#xA;&#x9;      unitRptList.add(populateLstDischUnit(ufvCyHon, &quot;CY-HON&quot;, &quot;SI&quot;,pier2Report))&#xA;&#x9;      unitRptList.add(populateLstDischUnit(ufvCyOthers, &quot;CY-OTHER&quot;, &quot;SI&quot;,pier2Report))&#xA;&#x9;      unitRptList.add(populateLstDischUnit(lstDischUfv, &quot;OVERALL&quot;, &quot;SI&quot;,pier2Report))&#xA;&#x9;&#x9;  //A22&#xA;&#x9;      if (ufvAutoP2 != null || ufvCyHonP2 != null || ufvCyOthersP2 != null || lstDischUfvP2 != null){&#xA;&#x9;      &#x9;  unitRptList.add(populateLstDischUnit(ufvAutoP2, &quot;P2-AUTO&quot;, &quot;PIER2&quot;,pier2Report))&#xA;&#x9;      &#x9;  unitRptList.add(populateLstDischUnit(ufvCyHonP2, &quot;P2-CY-HON&quot;, &quot;PIER2&quot;,pier2Report))&#xA;&#x9;&#x9;  unitRptList.add(populateLstDischUnit(ufvCyOthersP2, &quot;P2-CY-OTHER&quot;, &quot;PIER2&quot;,pier2Report))&#xA;&#x9;&#x9;  unitRptList.add(populateLstDischUnit(lstDischUfvP2, &quot;P2-OVERALL&quot;, &quot;PIER2&quot;,pier2Report))&#xA;&#x9;      }&#xA;&#xA;&#xA;&#xA;&#x9;      //Set Report Parameter&#xA;&#x9;      HashMap parameters = new HashMap();&#xA;&#x9;      String strDate = ContextHelper.formatTimestamp(event.getEvent().getEventTime(), timezone)&#xA;&#x9;      parameters.put(&quot;Date&quot;,strDate);&#xA;&#x9;      println(&quot; unitRptList size ===&quot;+unitRptList.size())&#xA;&#x9;      //Create and Mail Report&#xA;&#x9;      JRDataSource ds = new JRMapCollectionDataSource(unitRptList);&#xA;&#x9;      def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;      def reportDesignName = null;&#xA;&#x9;      def displayType = null;&#xA;&#x9;      //A7&#xA;&#x9;      if(&quot;DISCHARGE&quot;.equals(reportType)){&#xA;&#x9;        reportDesignName = &quot;DISCH REPORT FOR LAST CNTR SPLIT1&quot;;&#xA;&#x9;        displayType = &quot;Discharge&quot;;&#xA;&#x9;      }else if (&quot;LOAD&quot;.equals(reportType)){&#xA;&#x9;        reportDesignName = &quot;LOAD REPORT FOR LAST CNTR&quot;;&#xA;&#x9;        displayType = &quot;Load&quot;;&#xA;&#x9;      }&#xA;&#xA;&#x9;      println(&quot;ds = &quot;+ds+&quot;   unitreportlist = &quot;+unitRptList+&quot; reportType=&quot;+reportType);&#xA;&#x9;      //reportRunner.emailReport(ds, parameters, &quot;DISCH REPORT FOR LAST CNTR&quot;, &quot;1tosdevteamhon@gmail.com&quot;,outBoundCarrierId+&quot; Last Container Discharge Report&quot; ,outBoundCarrierId+&quot; Last Container Discharge Report&quot;);&#xA;&#x9;      reportRunner.emailReport(ds, parameters,reportDesignName , &quot;1aktosdevteam@matson.com&quot;,outBoundCarrierId+&quot; Last Container &quot;+displayType+&quot; Report&quot; ,outBoundCarrierId+&quot; Last Container &quot;+displayType+&quot; Report&quot;);  //A20&#xA;&#x9;      //reportRunner.emailReport(ds, parameters,reportDesignName , &quot;1aktosdevteam@matson.com&quot;,outBoundCarrierId+&quot; Last Container &quot;+displayType+&quot; Report&quot; ,outBoundCarrierId+&quot; Last Container &quot;+displayType+&quot; Report&quot;);  //A20&#xA;&#x9;      println(&quot;processLastDischCntrRpt end&quot;)&#xA;&#x9;    }catch(Exception e){&#xA;&#x9;      e.printStackTrace();&#xA;&#x9;    }&#xA;&#x9;  }&#xA;&#xA;&#x9;  public UnitFacilityVisit getLastDischUnit(Map map, String type)&#xA;&#x9;  {&#xA;&#x9;    def unit = null;&#xA;&#x9;    def ufv = null;&#xA;&#x9;    def timeIn = null;&#xA;&#x9;    try{&#xA;&#x9;      if(map == null){&#xA;&#x9;        return null;&#xA;&#x9;      }&#xA;&#xA;&#x9;      Iterator it = map.keySet().iterator();&#xA;&#x9;      while (it.hasNext()){&#xA;&#x9;        ufv = it.next();&#xA;&#x9;        timeIn = map.get(ufv)&#xA;&#x9;      }&#xA;&#x9;&#x9;  if(ufv==null) {//A22&#xA;&#x9;&#x9;&#x9;  return null;&#xA;&#x9;&#x9;  }&#xA;&#xA;&#x9;      unit = ufv.getUfvUnit();&#xA;&#x9;      //1. Check if Unit has multiple discharges&#xA;&#x9;      EventType evntType = EventType.findEventType(&quot;UNIT_DISCH&quot;);&#xA;&#x9;      EventManager eventManager = (EventManager)Roastery.getBean(&quot;eventManager&quot;);&#xA;&#x9;      List events = eventManager.getEventHistory(evntType, unit);&#xA;&#xA;&#x9;      if (events.size() == 2 &amp;&amp; !&quot;ALL&quot;.equals(type)) {&#xA;&#x9;        def  event1 = events.get(0)&#xA;&#x9;        def previousPos1 = event1.getEvntFieldChangesString();&#xA;&#x9;        def note1 = previousPos1 != null ? previousPos1 : &quot;&quot;;&#xA;&#x9;        boolean b1 = note1.contains(outBoundCarrierId);&#xA;&#xA;&#x9;        def  event2 = events.get(1)&#xA;&#x9;        def previousPos2 = event2.getEvntFieldChangesString();&#xA;&#x9;        def note2 = previousPos2 != null ? previousPos2 : &quot;&quot;;&#xA;&#x9;        boolean b2 = note2.contains(outBoundCarrierId)&#xA;&#x9;        //Set Correct Disch Time in Unit&#xA;&#x9;        if(b1){&#xA;&#x9;          println(&quot;Event Date 1=&quot;+event1.getEventTime());&#xA;&#x9;          map.remove(ufv);&#xA;&#x9;          map.put(ufv,event1.getEventTime());&#xA;&#x9;        }else if(b2){&#xA;&#x9;          println(&quot;Event Date 2=&quot;+event2.getEventTime());&#xA;&#x9;          map.remove(ufv);&#xA;&#x9;          map.put(ufv,event2.getEventTime());&#xA;&#x9;        }&#xA;&#xA;&#x9;        rptFieldSortUtil = rptFieldSortUtil != null ? rptFieldSortUtil : getGroovyClassInstance(&quot;ReportFieldSortUtil&quot;);&#xA;&#x9;        Map tempMap = map != null &amp;&amp; map.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(map) : null //sort Map Again&#xA;&#xA;&#x9;        Iterator itAgain = tempMap.keySet().iterator();&#xA;&#x9;        while (itAgain.hasNext()){&#xA;&#x9;          ufv = itAgain.next();&#xA;&#x9;          timeIn = tempMap.get(ufv)&#xA;&#x9;        }&#xA;&#xA;&#x9;      }//If Ends&#xA;&#xA;&#x9;      if(ufv != null){&#xA;&#x9;&#x9;&#x9;  //A22&#xA;&#x9;&#x9;&#x9;  def lkpSlot = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;&#x9;&#x9;&#x9;  lkpSlot = lkpSlot!= null ? lkpSlot : ''&#xA;&#x9;&#x9;&#x9;  def lkpSlotValue = lkpSlot.indexOf(&quot;.&quot;)== -1 ? lkpSlot : lkpSlot.substring(0,lkpSlot.indexOf(&quot;.&quot;));&#xA;&#x9;&#x9;&#x9;  boolean pier2Loc = lkpSlotValue.startsWith('P2') ? true : false&#xA;&#x9;&#x9;&#x9;  if(pier2Loc) {&#xA;&#x9;&#x9;&#x9;&#x9;  mapDisplayLstP2.put(ufv,timeIn)&#xA;&#x9;&#x9;&#x9;  }//A22&#xA;&#x9;&#x9;&#x9;  else {&#xA;&#x9;&#x9;&#x9;&#x9;  mapDisplayLst.put(ufv,timeIn)&#xA;&#x9;&#x9;&#x9;  }&#xA;&#x9;      }&#xA;&#xA;&#x9;    }catch(Exception e){&#xA;&#x9;      e.printStackTrace()&#xA;&#x9;    }&#xA;&#x9;    return ufv;&#xA;&#x9;  }&#xA;&#xA;&#xA;&#x9;  public HashMap populateLstDischUnit(UnitFacilityVisit ufv, String type, String dischAt, String pier2Report)&#xA;&#x9;  &#x9;  {&#xA;&#x9;  &#x9;    HashMap map = new HashMap();&#xA;&#x9;  &#xA;&#x9;  &#x9;    //Unit facility is null&#xA;&#x9;  &#x9;    if(ufv == null){&#xA;&#x9;  &#x9;&#x9;  map.put(&quot;DischargeAt&quot;, dischAt)//A22&#xA;&#x9;  &#x9;      map.put(&quot;type&quot;, type );&#xA;&#x9;  &#x9;      return map;&#xA;&#x9;  &#x9;    }&#xA;&#x9;  &#x9;    Unit unit = ufv.ufvUnit;&#xA;&#x9;  &#x9;    try&#xA;&#x9;  &#x9;    {&#xA;&#x9;  &#x9;      &#xA;&#x9;  &#x9;      //println(&quot;outBoundCarrierId ::::::::::::::&quot;+outBoundCarrierId);&#xA;&#x9;  &#x9;      map.put(&quot;UnitNbr&quot;, unit.getFieldValue(&quot;unitId&quot;));&#xA;&#x9;  &#x9;      map.put(&quot;PositionSlot&quot;, ufv.ufvArrivePosition.posSlot);&#xA;&#x9;  &#x9;      map.put(&quot;OutBoundCarrierId&quot;, outBoundCarrierId);&#xA;&#x9;  &#x9;      map.put(&quot;type&quot;, type );&#xA;&#x9;  &#x9;      String strTimeInDate = &#x9;gvyEventUtil.formatDate(ufv.ufvTimeIn, timezone)&#xA;&#x9;  &#x9;      String strTimeInTime = &#x9;gvyEventUtil.formatTime(ufv.ufvTimeIn, timezone)&#xA;&#x9;  &#x9;      map.put(&quot;InTime&quot;, strTimeInTime);&#xA;&#x9;  &#x9;      map.put(&quot;InTimeDate&quot;, strTimeInDate);&#xA;&#x9;  &#x9;      map.put(&quot;DischargeAt&quot;, dischAt)//A22&#xA;&#x9;  &#x9;      map.put(&quot;UnitFlexString01&quot;, pier2Report);&#xA;&#x9;  &#x9;      &#xA;&#x9;  &#xA;&#x9;  &#x9;    }catch(Exception e){&#xA;&#x9;  &#x9;      e.printStackTrace();&#xA;&#x9;  &#x9;    }&#xA;&#x9;  &#x9;    return map;&#xA;  &#x9;}&#xA;&#xA;    public List findAllUnitsForVesVoy(Object vesVisit)&#xA;    {&#xA;        ArrayList vesVistUnitLists = new ArrayList();&#xA;        try{&#xA;            //Long cvGkey = vesVisit.getCvdCv().getCvGkey()&#xA;            //DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;).addDqPredicate(PredicateFactory.eq(UnitField.UFV_DECLARED_IB_CV, cvGkey)).addDqOrdering(Ordering.asc(UnitField.UFV_VISIT_STATE));&#xA;            def Id = vesVisit.getCvdCv().getCvId()&#xA;            println(&quot;Id ====&quot;+Id)&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;            if(&quot;DISCHARGE&quot;.equals(reportType)){&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, Id));&#xA;            }else if(&quot;LOAD&quot;.equals(reportType)){&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID, Id));&#xA;            }//A13&#xA;            //dq = dq.addDqPredicate(PredicateFactory.ne(UnitField.UNIT_CURRENT_UFV_VISIT_STATE, UnitVisitStateEnum.RETIRED)).dq.addDqPredicate(PredicateFactory.ne(UnitField.UNIT_CURRENT_UFV_VISIT_STATE, UnitVisitStateEnum.ADVISED));&#xA;            dq = dq.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY, UnitCategoryEnum.THROUGH)).addDqPredicate(PredicateFactory.ne(UnitField.UFV_FREIGHT_KIND, FreightKindEnum.MTY)).addDqOrdering(Ordering.asc(UnitField.UFV_VISIT_STATE));&#xA;            List vesVistUnits  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            vesVistUnitLists.addAll(vesVistUnits);&#xA;            println(&quot;vesVistUnitLists size is ===&quot;+vesVistUnitLists.size())&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return vesVistUnitLists&#xA;    }&#xA;&#xA;    //A11&#xA;    public String processDischCounts(Object vesVisit, String type)&#xA;    {&#xA;&#xA;        List onDeckList = new ArrayList();&#xA;        List belowDeckList = new ArrayList();&#xA;        String rptTitle = null;&#xA;        String vesselGkey = vesVisit.getCvdCv().getCvGkey();&#xA;&#xA;        HashSet positionSet = new HashSet();&#xA;        List robList = new ArrayList();&#xA;        List restowList = new ArrayList();&#xA;        List trailerList = new ArrayList();&#xA;        List totalDfvList = new ArrayList();&#xA;        StringBuffer buf = new StringBuffer();&#xA;        def id = vesVisit.getCvdCv().getCvId();&#xA;        def checkUnit = &quot;0000000000&quot;;&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;        dq = dq.addDqPredicate(PredicateFactory.ne(UnitField.UFV_VISIT_STATE,UnitVisitStateEnum.ADVISED)).addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S10_ADVISED)).addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S99_RETIRED));&#xA;        if(&quot;DISCHARGE&quot;.equals(type)){&#xA;            //dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, id));&#xA;            //dq = dq.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY,UnitCategoryEnum.THROUGH))&#xA;&#x9;&#x9;&#x9;dq = dq.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_TYPE, &quot;VESSEL&quot;))&#xA;&#x9;&#x9;&#x9;dq = dq.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_GKEY, vesselGkey))&#xA;&#x9;&#x9;&#x9;dq = dq.addDqOrdering(Ordering.asc(UnitField.UFV_UNIT_ID));&#xA;            rptTitle = &quot;Discharge Audit Details&quot;;&#xA;        }else if(&quot;LOAD&quot;.equals(type)){&#xA;            dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID, id)).addDqPredicate(PredicateFactory.like(UnitField.UFV_POS_NAME,&quot;V%&quot;));&#xA;            rptTitle = &quot;Sail Audit Details&quot;;&#xA;        }&#xA;        dq = dq.addDqOrdering(Ordering.asc(UnitField.UFV_CATEGORY));&#xA;        List unitsList  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;        println(&quot;Load count is &quot;+unitsList.size());&#xA;        try{&#xA;            Iterator iter = unitsList.iterator();&#xA;            while(iter.hasNext()) {&#xA;                def ufv = iter.next();&#xA;                def unit = ufv.ufvUnit;&#xA;                def unitId = unit.getFieldValue(&quot;unitId&quot;)&#xA;                def equipType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;                def category =&#x9;unit.getUnitCategory();&#xA;                def deckPosition = null;&#xA;                def restow = unit.getFieldValue(&quot;unitActiveUfv.ufvRestowType&quot;);&#xA;                restow = restow != null ? restow.getKey() : ''&#xA;&#xA;                if(&quot;DISCHARGE&quot;.equals(type)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (unitId != checkUnit){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;checkUnit = unitId;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def EquipmentTypeClass = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;).getKey();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def transitState = ufv.ufvTransitState;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def transitStateKey = null;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (transitState != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;transitStateKey = transitState != null ? transitState.getKey() : ''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def tState = transitStateKey.split(&quot;_&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;transitStateKey = tState[1]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (EquipmentTypeClass.equalsIgnoreCase(&quot;CHASSIS&quot;) || equipType.startsWith(&quot;MG&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(unit.unitId+&quot;::&quot;+transitStateKey+&quot;::::&quot;+EquipmentTypeClass +&quot;::&quot;+equipType);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//check to exclude duplicate position for bundles and unitId does not have $&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (unitId!=null &amp;&amp; !unitId.contains(&quot;\$&quot;)) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;deckPosition = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString06&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;deckPosition is &quot;+deckPosition+&quot; for unit &quot;+unit.getFieldValue(&quot;unitId&quot;))&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//No Deck - Below Deck&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(&quot;OD&quot;.equals(deckPosition)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;onDeckList.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}else if(&quot;BD&quot;.equals(deckPosition)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;belowDeckList.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//ROB Restow and Trailer&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(UnitCategoryEnum.THROUGH.equals(category) &amp;&amp; &quot;RESTOW&quot;.equals(restow)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;restowList.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;robList.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}else if (UnitCategoryEnum.THROUGH.equals(category)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;robList.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}else if (&quot;RO&quot;.equals(deckPosition) || equipType.contains(&quot;B40&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;procTrailerCount(equipType);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}else{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;totalDfvList.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;                } else if (&quot;LOAD&quot;.equals(type)) {&#xA;                //check to exclude duplicate position for bundles and unitId does not have $&#xA;                    if (!positionSet.contains(ufv.getUfvLastKnownPosition()) &amp;&amp;&#xA;                            (unitId!=null &amp;&amp; !unitId.contains(&quot;\$&quot;))) {&#xA;&#xA;                            deckPosition = ufv.getUfvFlexString06()&#xA;                            //println(&quot;deckPosition is &quot;+deckPosition+&quot; for unit &quot;+unit.getFieldValue(&quot;unitId&quot;))&#xA;&#xA;                            //No Deck - Below Deck&#xA;                            if(&quot;OD&quot;.equals(deckPosition)){&#xA;                                onDeckList.add(unit);&#xA;                            }else if(&quot;BD&quot;.equals(deckPosition)){&#xA;                                belowDeckList.add(unit);&#xA;                            }&#xA;&#xA;&#xA;                            //ROB Restow and Trailer&#xA;                            if(UnitCategoryEnum.THROUGH.equals(category) &amp;&amp; &quot;RESTOW&quot;.equals(restow)){&#xA;                                restowList.add(unit);&#xA;                                robList.add(unit);&#xA;                            }else if (UnitCategoryEnum.THROUGH.equals(category)){&#xA;                                robList.add(unit);&#xA;                            }else if (&quot;RO&quot;.equals(deckPosition) || equipType.contains(&quot;B40&quot;)){&#xA;                                procTrailerCount(equipType);&#xA;                            }else{&#xA;                                totalDfvList.add(unit);&#xA;                            }&#xA;                    }&#xA;                    //else {&#xA;                    //println(&quot;UFV::&quot;+ufv+&quot; (&quot;+ufv.getUfvLastKnownPosition()+&quot;)&quot;);&#xA;                    //}&#xA;&#xA;                    positionSet.add(ufv.getUfvLastKnownPosition());&#xA;&#xA;                }&#xA;            }&#xA;&#xA;            rptFieldSortUtil = rptFieldSortUtil != null ? rptFieldSortUtil : inj.getGroovyClassInstance(&quot;ReportFieldSortUtil&quot;);&#xA;            mapTrailer = rptFieldSortUtil.sortMapByKey(mapTrailer);&#xA;&#xA;            // buf.append(&quot;   &quot;+rptTitle+&quot;  &quot;+eol);&#xA;            // buf.append(&quot;----------------------------&quot;+eol);&#xA;            buf.append(&quot;&quot;+eol);&#xA;            buf.append(&quot;Container : &quot;+totalDfvList.size()+eol);&#xA;            buf.append(&quot;ROB       : &quot;+robList.size()+eol);&#xA;            buf.append(&quot;Restow    : &quot;+restowList.size()+eol);&#xA;            buf.append(&quot;Trailer   : &quot;+trailerCnt+eol);&#xA;            Iterator it = mapTrailer.keySet().iterator(); //A21&#xA;            while (it.hasNext()){&#xA;                def equipSize = it.next();&#xA;                def eqCount = mapTrailer.get(equipSize)&#xA;                buf.append(&quot;  &quot;+(equipSize.length()== 3 ? equipSize+&quot; &quot; : equipSize )+&quot; : &quot;+eqCount+eol);&#xA;            }&#xA;            // buf.append(&quot;----------------------------&quot;+eol);&#xA;            //buf.append(eol+eol+eol+eol)&#xA;            //buf.append(&quot;    Deck Position Count  &quot;+eol);&#xA;            //buf.append(&quot;----------------------------&quot;+eol);&#xA;            //buf.append(&quot;OnDeck      : &quot;+onDeckList.size()+eol);&#xA;            //buf.append(&quot;BelowDeck   : &quot;+belowDeckList.size()+eol);&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;&#xA;        return buf.toString();&#xA;    }&#xA;    //A2- Ends&#xA;&#xA;    // A3 Email Confirmation Starts&#xA;&#xA;    public void discAuditConfirmationEmail(event, String type){&#xA;        inj = inj==null ? new GroovyInjectionBase(): inj;&#xA;        def sub = &quot;&quot;;  def acctSub = &quot;&quot;;&#xA;        def visit = event.getEntity();&#xA;        List acctListRpt = null;&#xA;        def reportDesignName = null;&#xA;        /*try {&#xA;&#xA;        def formatter = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#x9;&#x9;formatter.setTimeZone(TimeZone.getTimeZone(&quot;HST&quot;));&#xA;&#x9;&#x9;String vesselATA = formatter.format(visit.getFieldValue(&quot;cvdCv.cvATA&quot;));&#xA;&#x9;&#x9;String vesselATD = formatter.format(visit.getFieldValue(&quot;cvdCv.cvATD&quot;));&#xA;&#x9;&#x9;log(vesselATA+&quot;::&quot;+vesselATD);&#xA;&#x9;&#x9;DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#x9;&#x9;vesselATADate = df.parse(vesselATA);&#xA;&#x9;&#x9;vesselATDDate = df.parse(vesselATD);&#xA;&#x9;} catch (Exception e){&#xA;&#x9;println(&quot;ERRORO_WHILE_ATD_ATA ::&quot;+ e)&#xA;&#x9;}*/&#xA;&#xA;        try{&#xA;            def doer = event.event.evntAppliedBy   //Gets Doer&#xA;            doer = doer.replace('user:','')&#xA;            def carrierId = visit.cvdCv&#xA;            def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;)  // calls Email call&#xA;            if(&quot;DISCHARGE&quot;.equals(type)){&#xA;                sub = &quot;Audit Discharge for &quot;+carrierId+&quot; Pau.&quot;;    // Compose Subject String&#xA;                acctSub = &quot;Accounting Discharge Total Counts for &quot;+carrierId;&#xA;            }else if(&quot;LOAD&quot;.equals(type)){&#xA;                sub = &quot; &quot;+carrierId+&quot; Sailed.&quot;;   // Compose Subject String&#xA;                acctSub = &quot;Accounting Load Back Total Counts for &quot;+carrierId;&#xA;            }&#xA;&#xA;            def body = processDischCounts(visit,type);&#xA;&#xA;            acctListRpt = processAccoutingRpt(visit,type);&#xA;            println(&quot; acctListRpt.size() === &quot;+acctListRpt.size() )&#xA;            //  emailSender.custSendEmail(acctEmail,acctSub,body+eol); //Accounting&#xA;            if (acctListRpt!=null &amp;&amp; acctListRpt.size() &gt; 0)&#xA;            {&#xA;                JRDataSource ds = new JRMapCollectionDataSource(acctListRpt);&#xA;                // get report runner handle&#xA;                def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#xA;                //Set report parameters&#xA;                HashMap parameters = new HashMap();&#xA;                parameters.put(&quot;outboundVesVoy&quot;,visit.getCvdCv().getCvId());&#xA;                parameters.put(&quot;Date&quot;,new Date());&#xA;                // call report design of rehandle containers not loaded back to vessel report.&#xA;                if (&quot;LOAD&quot;.equals(type))&#xA;                {&#xA;                    reportDesignName = &quot;ACCT AUDIT LOAD REPORT&quot;;&#xA;                } else if (&quot;DISCHARGE&quot;.equals(type))&#xA;                {&#xA;                    reportDesignName = &quot;ACCT AUDIT DISCH REPORT&quot;;&#xA;                }&#xA;                // Emailing report&#xA;                reportRunner.emailExcelReport(ds, parameters,reportDesignName ,acctEmail,acctSub,body+eol);&#xA;            }&#xA;&#xA;&#xA;            if (&quot;LOAD&quot;.equals(type) &amp;&amp; visit.getCvdCv().getCvId().startsWith(&quot;YB&quot;)) {&#xA;                return null;&#xA;            }&#xA;            println(&quot; doer is &quot;+doer)&#xA;            if (!&quot;-jms-&quot;.equals(doer)) {&#xA;                if (&quot;LOAD&quot;.equals(type)) {&#xA;                    emailTo = emailTo+&quot;;1aktosdevteam@matson.com&quot;;&#xA;                    //emailTo = emailTo+&quot;;1TOSDevTeamHON@gmail.com&quot;;&#xA;                }&#xA;                emailSender.custSendEmail(emailTo,sub,&quot;Action done by &quot;+doer);  //executes Email Procedure //A18&#xA;            }&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;&#xA;    }//A3- Ends&#xA;&#xA;&#xA;    public void procTrailerCount(String wholeEquipType)&#xA;    {&#xA;        //def gvyStrUtility =  getGroovyClassInstance(&quot;GvyStringUtility&quot;)&#xA;        //def equipType = gvyStrUtility.getOnlyNumerics(wholeEquipType);&#xA;        //def equipType = wholeEquipType.substring(1,3);&#xA;        if(mapTrailer.get(wholeEquipType) != null){&#xA;            Integer count = (Integer)mapTrailer.get(wholeEquipType);&#xA;            int tempCnt = count.intValue();&#xA;            tempCnt = tempCnt+1;&#xA;            mapTrailer.put(wholeEquipType,tempCnt);&#xA;        }else{&#xA;            mapTrailer.put(wholeEquipType,new Integer(1));&#xA;        }&#xA;        trailerCnt = trailerCnt+1;&#xA;    }//Method Ends&#xA;&#xA;    public List processAccoutingRpt(Object vesVisit, String type)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;println(&quot;Calling processAccoutingRpt for &quot;+type);&#xA;&#x9;&#x9;&#x9;List resultAcctList = new ArrayList();&#xA;&#x9;&#x9;&#x9;HashSet positionSet = new HashSet();&#xA;&#x9;&#x9;&#x9;HashMap outputMap = null;&#xA;&#x9;&#x9;&#x9;List acctList = null;&#xA;&#x9;&#x9;&#x9;vesselForDischId = vesVisit.getCvdCv().getCvId();&#xA;&#x9;&#x9;&#x9;def Id = vesVisit.getCvdCv().getCvId();&#xA;&#x9;&#x9;&#x9;String vesselGkey = vesVisit.getCvdCv().getCvGkey();&#xA;&#xA;&#x9;&#x9;&#x9;if (&quot;LOAD&quot;.equals(type))&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_VISIT_STATE,UnitVisitStateEnum.ADVISED))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S10_ADVISED))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S99_RETIRED))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY,UnitCategoryEnum.THROUGH))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID, Id))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_POS_NAME,&quot;V%&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqOrdering(Ordering.asc(UnitField.UFV_CMDTY));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;acctList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;===acctList size===&quot;+acctList.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator iter = acctList.iterator();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Unit unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unitId = unit.getFieldValue(&quot;unitId&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def category = unit.getFieldValue(&quot;unitCategory&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;category = category != null ? category.getKey():category;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def restow = unit.getFieldValue(&quot;unitActiveUfv.ufvRestowType&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;restow = restow != null ? restow.getKey():restow;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (category == &quot;THRGH&quot; &amp;&amp; restow != &quot;RESTOW&quot;){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//check to exclude duplicate position for bundles and unitId does not have $&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (!positionSet.contains(ufv.getUfvLastKnownPosition()) &amp;&amp; (unitId!=null &amp;&amp; !unitId.contains(&quot;\$&quot;))) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;outputMap = populateAcctListByType(ufv,type);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultAcctList.add(outputMap);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;//else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;UFV::&quot;+ufv);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;positionSet.add(ufv.getUfvLastKnownPosition());&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;} else if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;&#x9;&#x9;&#x9;&#x9;log(&quot;&lt;&lt;&lt;&lt;TESTING DISCHARGE REPORT ID&gt;&gt;&gt;&gt;&quot;+Id+&quot;:::&quot;+vesselGkey);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY,UnitCategoryEnum.THROUGH))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_TYPE, &quot;VESSEL&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_GKEY, vesselGkey))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S10_ADVISED))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S99_RETIRED))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S20_INBOUND))&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;.addDqOrdering(Ordering.asc(UnitField.UFV_CMDTY));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;acctList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;DomainQuery:::&quot;+dq);&#xA;&#x9;&#x9;&#x9;&#x9;log(&quot;&lt;&lt;&lt;&lt;ACCTLIST SIZE IS &gt;&gt;&gt;&gt;&quot;+acctList.size());&#xA;&#x9;&#x9;&#x9;&#x9;def checkUnit = &quot;0000000000&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iter = acctList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = iter.next()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unitId = unit.unitId;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (unitId != checkUnit){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;checkUnit = unitId;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def EquipmentTypeClass = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;).getKey();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def transitState = ufv.ufvTransitState;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def transitStateKey = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def equipType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (transitState != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;transitStateKey = transitState != null ? transitState.getKey() : ''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def tState = transitStateKey.split(&quot;_&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;transitStateKey = tState[1]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (EquipmentTypeClass.equalsIgnoreCase(&quot;CHASSIS&quot;) || equipType.startsWith(&quot;MG&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;log(unit.unitId+&quot;::&quot;+transitStateKey+&quot;::::&quot;+EquipmentTypeClass +&quot;::&quot;+equipType);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;outputMap = populateAcctListByType(ufv,type)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultAcctList.add(outputMap)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return resultAcctList;&#xA;    }&#xA;&#xA;    public HashMap populateAcctListByType(UnitFacilityVisit ufv, String type) {&#xA;&#xA;&#x9;        HashMap resMap = new HashMap();&#xA;&#x9;        def unit = ufv.ufvUnit&#xA;&#x9;        UnitEquipment chasEquip = unit.getUnitCarriageUe();&#xA;&#x9;        def freightkindout = unit.getFieldValue(&quot;unitFreightKind&quot;).getKey();&#xA;&#x9;        def attachedUnit = unit.getFieldValue(&quot;unitAttachedEquipIds&quot;)&#xA;&#x9;        //println(&quot;chasEquip   &quot;+chasEquip)&#xA;&#x9;        if (&quot;FCL&quot;.equals(freightkindout))&#xA;&#x9;        {&#xA;&#x9;            freightkindout = &quot;F&quot;;&#xA;&#x9;        } else if (&quot;MTY&quot;.equals(freightkindout))&#xA;&#x9;        {&#xA;&#x9;            freightkindout = &quot;E&quot;;&#xA;&#x9;        }&#xA;&#xA;&#x9;        resMap.put(&quot;Commodity&quot;,unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;));&#xA;&#x9;        resMap.put(&quot;EquipmentTypeClass&quot;,unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;).getKey());&#xA;&#x9;        resMap.put(&quot;EquipmentType&quot;,unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;))&#xA;&#x9;        resMap.put(&quot;FreightKind&quot;,freightkindout)&#xA;&#x9;        resMap.put(&quot;UnitNbr&quot;,unit.getFieldValue(&quot;unitId&quot;))&#xA;&#x9;        if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;&#x9;&#x9;&#x9;&#x9;def commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;commodity = commodity != null &amp;&amp; commodity == &quot;AUTO&quot; ? &quot;AUTO&quot; : &quot; &quot;;&#xA;&#x9;&#x9;&#x9;&#x9;resMap.put(&quot;Commodity&quot;,commodity);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;        if (attachedUnit != null &amp;&amp; chasEquip !=null)&#xA;&#x9;        {&#xA;&#x9;            resMap.put(&quot;AttachedUnits&quot;,unit.getFieldValue(&quot;unitAttachedEquipIds&quot;))&#xA;&#x9;        } else if (attachedUnit != null &amp;&amp; chasEquip == null)&#xA;&#x9;        {&#xA;&#x9;            resMap.put(&quot;AttachedUnits&quot;,null)&#xA;&#x9;        }&#xA;&#xA;&#x9;        if (&quot;LOAD&quot;.equals(type))&#xA;&#x9;        {&#xA;&#x9;            resMap.put(&quot;OutboundCarrierATA&quot;,ufv.getFieldValue(&quot;ufvActualObCv.cvATA&quot;))&#xA;&#x9;            resMap.put(&quot;OutboundCarrierATD&quot;,ufv.getFieldValue(&quot;ufvActualObCv.cvATD&quot;))&#xA;&#x9;            resMap.put(&quot;OutboundCarrierId&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;))&#xA;&#x9;            resMap.put(&quot;Destination&quot;,unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;))&#xA;&#x9;            resMap.put(&quot;UfvFlexString06&quot;,ufv.getUfvFlexString06())&#xA;&#x9;        } else if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;&#x9;            resMap.put(&quot;InboundCarrierATA&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvATA&quot;))&#xA;&#x9;            resMap.put(&quot;InboundCarrierATD&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvATD&quot;))&#xA;&#x9;            //resMap.put(&quot;InboundCarrierATA&quot;,vesselATADate)&#xA;&#x9;            //resMap.put(&quot;InboundCarrierATD&quot;,vesselATDDate)&#xA;&#x9;            //resMap.put(&quot;OPL&quot;,unit.getFieldValue(&quot;unitRouting.rtgOPL.pointId&quot;))&#xA;&#x9;            //resMap.put(&quot;InboundCarrierId&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;))&#xA;&#x9;            resMap.put(&quot;InboundCarrierId&quot;,vesselForDischId)&#xA;&#x9;            resMap.put(&quot;UfvFlexString06&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString06&quot;))&#xA;&#x9;        }&#xA;&#x9;        //println(&quot;Result map is &quot;+resMap);&#xA;&#x9;        return resMap;&#xA;    }&#xA;&#xA;}//class ends&#xA;" />
<digital-asset id="GvyInjAbdbBkp" short-description="ACETS BDB Process" is-pre-deployed="N" groovy-code="/*&#xA;**********************************************************************&#xA;* Srno   Date&#x9;        Changer&#x9; &#x9; Change Description&#xA;* A0     12/03/08&#x9;Steven Bauer&#x9; Updated Visit update detail&#xA;* A1     12/29/08       Glenn Raposo&#x9; Unit Field Tracker code Added&#xA;* A2     12/30/08       Steven Bauer&#x9; Added Primary Carrier change&#xA;* A3     02/09/08       Glenn Raposo     Update Code for ClassCastException &amp; Added Try Catch&#xA;* A4     04/09/09       Glenn Raposo     Adde check to set the BDB Dest to POD if they dont match&#xA;* A5     04/21/09       Glenn Raposo     POD condition correction for IMPORT and Not Import Units&#xA;* A6     04/28/09&#x9;Steven Bauer&#x9; Replaced manual sit_assign with the event.&#xA;* A7     04/30/09       Glenn Raposo     Null pointer Check to Set Barge value&#xA;* A8     05/12/09&#x9;Steven Bauer     Added POD lookup from Dest.&#xA;*&#x9;&#x9;&#x9;&#x9;&#x9; Added tranship and through to inport logic.&#xA;* A9     05/12/09&#x9;Steven Bauer&#x9; Change from Inbound to Outbound carrier on exort&#xA;* A10    05/21/09&#x9;Steven Bauer&#x9; Find the unit in the complex and not facility.&#xA;*          &#x9;&#x9;&#x9;&#x9; Append comment instead of overlaying&#xA;*          &#x9;&#x9;&#x9;&#x9; Remove the tState != Inbound for the update Disch port for IMPORT, THROUGH or TRANSHIP&#xA;*&#x9;&#x9;&#x9;&#x9;&#x9; Remove the tState != Inbound for the update Disch port for EXPORT&#xA;*          &#x9;&#x9;&#x9;&#x9; Remove the updateIbCv for imports&#xA;* A11    06/01/09       Steven Bauer     Allow update of O/B carrier for inbound exports.&#xA;* A12    06/02/09&#x9;Steven Bauer&#x9; 403 - Supress all updates before GetNV&#xA;* A13    07/02/09&#x9;Steven Bauer&#x9; Create Shipper/Consignee if they don't exist&#xA;* A14    12/18/2009  Glenn Raposo    Roll over Bkg for Inbound Expt with BDBVesvoy as barge&#xA;* A15    06/08/2010  Glenn Raposo    Added fix for A14 Bkg roll over for Inbound Expt&#xA;* A16    09/08/2011  Glenn Raposo&#x9; Added DrayStatus check for applying SIT&#xA;* A17    10/12/2011  Glenn Raposo&#x9; updated Assign Booking Method for TOS2.1&#xA;**********************************************************************&#xA;*/&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.atoms.EventEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.orders.business.eqorders.EquipmentOrderManagerPea&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.argo.business.api.ServicesManager;&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.argo.business.reference.Equipment;&#xA;import com.navis.argo.ContextHelper;&#xA;import com.navis.argo.business.atoms.LocTypeEnum;&#xA;import com.navis.orders.business.eqorders.Booking;&#xA;import com.navis.framework.persistence.HibernateApi&#xA;&#xA;&#xA;class GvyInjAbdbBkp extends GroovyInjectionBase {&#xA;&#xA;&#x9;def ctrId = null;&#xA;&#x9;public String execute(Map inParameters) {&#xA;&#xA;try{&#xA;&#x9;def gvyVesselLookup = getGroovyClassInstance(&quot;GvyVesselLookup&quot;);&#xA;&#x9;ctrId = (String) inParameters.get(&quot;equipment-id&quot;);&#xA;&#xA;&#x9;def recorder = (String) inParameters.get(&quot;recorder&quot;);&#xA;&#x9;def vesvoyBdb = (String) inParameters.get( &quot;vesvoy&quot;);&#xA;&#x9;def dbdBookingNum = (String) inParameters.get( &quot;bookingNum&quot;);&#xA;&#x9;def sit = (String) inParameters.get( &quot;sit&quot;);&#xA;&#x9;def consigneeIdBdb = (String) inParameters.get( &quot;consigneeId&quot;);&#xA;&#x9;def consigneeNameBdb = (String) inParameters.get( &quot;consigneeName&quot;);&#xA;&#x9;def shipperNameBdb = (String) inParameters.get( &quot;shipperName&quot;);&#xA;&#x9;def shipperIdBdb = (String) inParameters.get( &quot;shipperId&quot;);&#xA;&#x9;def destPortBdb = (String) inParameters.get( &quot;destPort&quot;);&#xA;&#x9;def inBoundBdb = (String) inParameters.get( &quot;inBound&quot;);&#xA;&#x9;def agFlag = (String) inParameters.get( &quot;ag&quot;);&#xA;&#x9;def discPortBdb = (String) inParameters.get( &quot;dischargePort&quot;);&#xA;&#x9;def primCarrierBdb = (String) inParameters.get( &quot;primCarrier&quot;);&#xA;&#xA;&#x9;def note = &quot;\n\nPlease fix either the booking or unit and review the routing after correction&quot;;&#xA;&#xA;&#x9;   String  emailFrom = '1aktosdevteam@matson.com'&#xA;&#x9; String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;def emailBody = &quot;&quot;;&#xA;&#xA;&#x9;def inj = new GroovyInjectionBase();&#xA;&#x9;def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;);&#x9;com.navis.argo.ContextHelper.setThreadExternalUser(&quot;ACETS&quot;);&#xA;&#xA;&#x9;// Find the UFV&#xA;&#x9;println( &quot;Starting BDB Injection process.&quot;);&#xA;&#x9;def ufv;&#xA;&#x9;def unit;&#xA;&#x9;//A1- tracker&#xA;&#x9;def tracker;&#xA;    GroovyApi gvyApi;&#xA;    def dischargePortN4;&#xA;&#xA;    gvyApi = new GroovyApi();&#xA;    def podLookup = gvyApi.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;);&#xA;&#x9;try&#xA;&#x9;{&#xA;&#x9;  try {&#xA;&#x9;     ufv = findActiveUfv(ctrId);&#xA;&#x9;     unit = ufv.getUfvUnit();&#xA;&#x9;    } catch (Throwable e){&#xA;&#x9;    }&#xA;&#xA;&#x9;&#x9;if(ufv == null ) {&#xA;&#x9;&#x9;   unit = gvyApi.getGroovyClassInstance(&quot;GvyUnitLookup&quot;).findCurrentUnit(ctrId);&#xA;&#x9;&#x9;   if(unit == null) throw new Exception(&quot;Could not find unit by forien key &quot;+ctrId);&#xA;&#x9;&#x9;   //if(unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;) !=  LocTypeEnum.TRUCK ) throw e;&#xA;&#x9;&#x9;   ufv = unit.unitActiveUfv;&#xA;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;   //A1- Tracker Change&#xA;       def gvyUnitFldTracker = gvyApi.getGroovyClassInstance(&quot;GvyUnitFieldTracker&quot;);&#xA;       tracker = gvyUnitFldTracker.createFieldChangeTracker(unit)&#xA;&#x9;} catch ( Exception ex) {&#xA;&#x9;   ex.printStackTrace()&#xA;&#x9;   emailSender.custSendEmail(emailFrom,emailTo,&quot; BDB error for Booking &quot;+ dbdBookingNum+ &quot; and Unit &quot; +ctrId ,&quot;Could not find unit: &quot;+ctrId+note);&#xA;&#x9;   fail((new StringBuilder()).append(ex.toString()).append(&quot; ERR_GVY_DBD_001. Could not find unit: &quot;).append( ctrId).toString());&#xA;&#x9;}&#xA;&#xA;&#x9;//A12&#xA;&#x9;if(isStowplan(unit)) return;&#xA;&#xA;&#x9;&#x9;&#x9;StringBuffer header = new StringBuffer();&#xA;&#x9;&#x9;&#x9;&#x9;header.append(&quot;\nBooking Number       : &quot;+dbdBookingNum);&#xA;&#x9;&#x9;&#x9;&#x9;header.append(&quot;\nContainer Number     : &quot;+ctrId);&#xA;&#x9;&#x9;&#x9;&#x9;header.append(&quot;\n\n&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;emailBody = header.toString();&#xA;&#xA;&#x9;if( UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory()) &amp;&amp;&#xA;&#x9;&#x9;isLongHaul( vesvoyBdb) &amp;&amp;&#xA;&#x9;&#x9;UnitVisitStateEnum.DEPARTED.equals(ufv.getUfvVisitState())) {&#xA;&#x9;    emailSender.custSendEmail(emailFrom,emailTo,&quot; BDB error for Booking &quot;+ dbdBookingNum+ &quot; and Unit &quot; +ctrId ,emailBody + &quot;VesVoy: &quot; + vesvoyBdb + &quot; sailed. Could not apply BDB.&quot;+note);&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_DBD_002. VesVoy: &quot; + vesvoyBdb + &quot; sailed. Could not apply DBD.&quot;);&#xA;&#x9;}&#xA;&#xA;&#x9;def uoi = unit.getUnitPrimaryUe().getUeDepartureOrderItem();&#xA;&#x9;def n4BlNum = unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;);&#xA;    dischargePortN4 = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;&#xA;&#xA;&#x9;println( &quot;n4BlNum = &quot; + n4BlNum + &quot; dbdBookingNum = &quot; + dbdBookingNum);&#xA;    boolean flagForAcetsBkg = n4BlNum != null ? n4BlNum.startsWith(dbdBookingNum) : false&#xA;&#xA;&#x9;if ( n4BlNum != null &amp;&amp;  n4BlNum != dbdBookingNum) {&#xA;      if(!flagForAcetsBkg){&#xA;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo,&quot; BDB error for Booking &quot;+ dbdBookingNum+ &quot; and Unit &quot; +ctrId ,emailBody + &quot;Unit: &quot; + ctrId + &quot; Booking Num dismatch: N4 num=&quot; + n4BlNum + &quot;  BDB num=&quot; + dbdBookingNum+note);&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_DBD_003. Unit: &quot; + ctrId + &quot; Booking Num dismatch: N4 num=&quot; + n4BlNum + &quot;  BDB num=&quot; + dbdBookingNum);&#xA;      }&#xA;&#x9;}&#xA;&#xA;    if ( !UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory()) &amp;&amp; !UnitCategoryEnum.EXPORT.equals(unit.getUnitCategory()) &amp;&amp; !UnitCategoryEnum.THROUGH.equals(unit.getUnitCategory()) &amp;&amp;  !UnitCategoryEnum.TRANSSHIP.equals(unit.getUnitCategory())) {&#xA;&#x9;  emailSender.custSendEmail(emailFrom,emailTo,&quot; BDB error for Booking &quot;+ dbdBookingNum+ &quot; and Unit &quot; +ctrId ,emailBody + &quot;Unit: &quot; + ctrId + &quot; category is not IMPORT, EXPORT, THROUGH or TRANSHIP. Ignored.&quot;+note);&#xA;&#x9;  fail(&quot;ERR_GVY_DBD_004. Unit: &quot; + ctrId + &quot; category is not IMPORT, EXPORT, THROUGH or TRANSHIP. Ignored.&quot;);&#xA;&#x9;}&#xA;&#xA;&#x9;def cmdyId = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;    boolean isUnitSIT = &quot;SIT&quot;.equals(cmdyId) || &quot;SAT&quot;.equals(cmdyId) ? true : false&#xA;&#xA;&#x9;def IBVesvoy = unit.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;);&#xA;&#x9;if ( UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory()) &amp;&amp;&#xA;&#x9;&#x9;&#x9;&#x9;IBVesvoy != vesvoyBdb &amp;&amp; !isLongHaul( vesvoyBdb) &amp;&amp; !isUnitSIT) {&#xA;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo,&quot; BDB error for Booking &quot;+ dbdBookingNum+ &quot; and Unit &quot; +ctrId ,emailBody + &quot;IB vesvoy in N4: &quot; + IBVesvoy + &quot; mismatch BDB vesvoy: &quot; + vesvoyBdb+note);&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_DBD_005. IB vesvoy in N4: &quot; + IBVesvoy + &quot; mismatch BDB vesvoy: &quot; + vesvoyBdb);&#xA;&#x9;}&#xA;&#xA;&#xA;&#x9;UfvTransitStateEnum transitState = ufv.getUfvTransitState();&#xA;&#x9;UnitVisitStateEnum visitState = unit.getUnitVisitState();&#xA;&#x9;if ( UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory()) &amp;&amp;&#xA;&#x9;&#x9;!UfvTransitStateEnum.S30_ECIN.equals(transitState) &amp;&amp;&#xA;&#x9;&#x9;!UfvTransitStateEnum.S40_YARD.equals(transitState) &amp;&amp;&#xA;&#x9;&#x9;!UnitVisitStateEnum.ADVISED.equals(visitState) &amp;&amp;&#xA;        !UfvTransitStateEnum.S20_INBOUND.equals(transitState) ) {&#xA;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo,&quot; BDB error for Booking &quot;+ dbdBookingNum+ &quot; and Unit &quot; +ctrId ,emailBody + &quot;Bad location status for unit: &quot; + ctrId+note);&#xA;&#x9;&#x9;fail( &quot;ERR_GVY_DBD_006. Bad location status for unit: &quot; + ctrId);&#xA;&#x9;}&#xA;&#xA;    //A3 - Update Code for ClassCastException&#xA;    if ( &quot;Y&quot;.equals(sit) &amp;&amp; !isUnitSIT ) {&#xA;     println( &quot;send email.&quot;);&#xA;&#x9;}&#xA;&#xA;&#x9;def event = new GroovyEvent( null, unit);&#xA;&#x9;def comments = &quot;&quot;;&#xA;&#x9;// start if IMPORT, THROUGH or TRANSHIP&#xA;&#x9;if ( UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory()) || UnitCategoryEnum.THROUGH.equals(unit.getUnitCategory()) ||  UnitCategoryEnum.TRANSSHIP.equals(unit.getUnitCategory()) )&#xA;&#x9;{&#xA;&#x9;&#x9;def consigneeN4 = unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;);&#xA;&#x9;&#x9;def consigneeN4Id = unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuId&quot;);&#xA;&#x9;&#x9;println( &quot;cneeNameN4 = &quot; + consigneeN4 + &quot; cneeIdN4 = &quot; + consigneeN4Id);&#xA;&#x9;&#x9;if ( consigneeN4 != null &amp;&amp; ( consigneeN4.contains( &quot;unapproved&quot;) || consigneeN4.contains( &quot;invalid assign&quot;)) &amp;&amp;&#xA;&#x9;&#x9;&#x9;&#x9;n4BlNum == null) {&#xA;&#x9;&#x9;&#x9;&#x9;// assign booking to unit BL Number&#xA;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsBlNbr&quot;, dbdBookingNum);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;def misc2 = unit.getFieldValue(&quot;unitFlexString11&quot;);&#xA;&#x9;&#x9;def shipper = Shipper.findOrCreateShipper(shipperIdBdb, shipperNameBdb);&#xA;&#xA;&#x9;&#x9;println( &quot;misc2 = &quot; + misc2);&#xA;&#x9;&#x9;if ( (misc2 == null || !misc2.contains( &quot;C&quot;)) &amp;&amp; consigneeN4Id != consigneeIdBdb)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;def cnee;&#xA;&#x9;&#x9;&#x9;if(shipperIdBdb == consigneeIdBdb ) {&#xA;&#x9;&#x9;&#x9;   cnee = shipper;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;   cnee = Shipper.findOrCreateShipper(consigneeIdBdb, consigneeNameBdb);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if ( cnee == null) {&#xA;&#x9;&#x9;&#x9;&#x9;println( &quot;Consignee &quot; + consigneeNameBdb + &quot; not configured in N4.&quot;);&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;unit.getUnitGoods().updateConsignee( cnee);&#xA;&#x9;&#x9;&#x9;&#x9;println( &quot;update consignee with BDB.&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;comments += &quot;RECON X &quot; + consigneeN4;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;def destPortN4 = unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;);&#xA;&#x9;&#x9;println( &quot;destPortN4 = &quot; + destPortN4);&#xA;&#x9;&#x9;if ( (misc2 == null || !misc2.contains( &quot;P&quot;)) &amp;&amp; destPortN4 != destPortBdb)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsDestination&quot;, destPortBdb);&#xA;&#x9;&#x9;&#x9;comments = comments + &quot; &quot; + destPortN4 + &quot; to &quot; + destPortBdb;&#xA;&#x9;&#x9;&#x9;//A5 - Unit Import, not Inbound and if BdbDestination is not equal to N4Pod then set bdbDest to POD&#xA;&#x9;&#x9;    def pod = podLookup.lookupPod(destPortBdb);&#xA;&#x9;&#x9;    discPortBdb = pod;&#xA;&#x9;&#x9;    if ( pod != dischargePortN4 ) {&#xA;&#x9;           println(&quot;Setting the POD to BDB DestPort&quot;+&quot;dischargePortN4 = &quot; + dischargePortN4+&quot; destPortBdb :&quot;+pod);&#xA;&#x9;&#x9;&#x9;   def podRgtPoint = RoutingPoint.findRoutingPoint(pod);&#xA;&#x9;&#x9;       if(podRgtPoint == null){&#xA;&#x9;&#x9;&#x9;      emailSender.custSendEmail(emailFrom,emailTo,&quot; BDB error for Booking &quot;+ dbdBookingNum+ &quot; and Unit &quot; +ctrId ,emailBody + &quot;POD Port not a Routing Point. POD lookup NULL: &quot; + destPortBdb+note);&#xA;&#x9;&#x9;&#x9;      fail( &quot;ERR_GVY_BDB_007.5. POD Port not a Routing Point. POD lookup NULL: &quot; + destPortBdb);&#xA;&#x9;&#x9;&#x9;   }&#xA;&#x9;&#x9;&#x9;   unit.getUnitRouting().setRtgPOD1(podRgtPoint);&#xA;&#x9;        }&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;   discPortBdb = destPortN4;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;unit.getUnitGoods().updateShipper( shipper);&#xA;  &#x9;&#x9;def servicesMgr = (ServicesManager)Roastery.getBean(&quot;servicesManager&quot;);&#xA;&#xA;&#x9;&#x9;if ( (misc2 == null || !misc2.contains( &quot;B&quot;)) &amp;&amp; inBoundBdb == &quot;Y&quot; ) {&#xA;&#x9;        servicesMgr.applyHold( &quot;INB&quot;, unit, null, null, &quot;BDB Hold&quot;);&#xA;&#x9;        servicesMgr.applyHold( &quot;CUS&quot;, unit, null, null, &quot;BDB Hold&quot;);&#xA;&#x9;&#x9;&#x9;comments = comments + &quot; INB and CUS hold applied.&quot;;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;def eqType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;&#x9;&#x9;println( &quot;eqType = &quot; + eqType);&#xA;&#x9;&#x9;if ( agFlag != null &amp;&amp; (misc2 == null || !misc2.contains( &quot;A&quot;)) &amp;&amp; agFlag == &quot;Y&quot; &amp;&amp; eqType[0] != &quot;R&quot;) {&#xA;&#x9;&#x9;  servicesMgr.applyHold( &quot;AG&quot;, unit, null, null, &quot;BDB Hold&quot;);&#xA;&#x9;&#x9;&#x9;comments += &quot; add AG hold.&quot;;&#xA;&#x9;&#x9;&#x9;misc2 += &quot;L&quot;;&#xA;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitFlexString11&quot;, misc2);&#xA;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;if ( agFlag != null &amp;&amp; (misc2 == null || !misc2.contains( &quot;A&quot;)) &amp;&amp; agFlag == &quot;N&quot; ) { //&amp;&amp; onAgHold()) {&#xA;&#x9;&#x9;&#x9;servicesMgr.applyGuardedPermission( &quot;AG&quot;, unit, null, null, &quot;BDB Hold&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;} else { // if not IMPORT&#xA;   &#x9;&#x9;def isLongHaul = isLongHaul(vesvoyBdb)&#xA;    &#x9;println( &quot;in NOT IMPORT section. isLongHaul :&quot;+isLongHaul);&#xA;        //A14 - If Inbound Export and BDBVesvoy is Barge and Roll over Booking Values&#xA;&#x9;&#x9;if(!isLongHaul){&#xA;            def isBkgRoll = rollBkgForExport(unit)&#xA;            //Commented out as it does nothing - if(isBkgRoll){  event.postNewEvent(&quot;UNIT_ROLL&quot;, &quot;Inbound Export With Vesvoy as barge&quot;);}&#xA;        }&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;   // SKB Updated to get an existing visit and not create a new one.&#xA;&#x9;&#x9;   if (!UfvTransitStateEnum.S70_DEPARTED.equals(transitState))&#xA;&#x9;&#x9;   {&#xA;&#x9;&#x9;&#x9; def visit = gvyVesselLookup.getCarrierVisit(vesvoyBdb);&#xA;&#x9;&#x9;&#x9; if(visit != null)&#xA;&#x9;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;   def ufvLocal = unit.unitActiveUfv;&#xA;&#x9;&#x9;&#x9;   if(ufvLocal == null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;     def ulookup =  gvyBaseClass.getGroovyClassInstance(&quot;GvyUnitLookup&quot;);&#xA;&#x9;&#x9;&#x9;     ufvLocal = ulookup.lookupFacility(unit.primaryKey);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;           &#x9;    ufvLocal.updateObCv(visit);&#xA;&#x9;&#x9;&#x9;  } else {&#xA;&#x9;&#x9;&#x9;       emailSender.custSendEmail(emailFrom,emailTo,&quot; BDB error for Booking &quot;+ dbdBookingNum+ &quot; and Unit &quot; +ctrId ,emailBody + &quot;OB vesvoy not in N4: &quot;+ vesvoyBdb+note);&#xA;&#x9;&#x9;&#x9;       fail( &quot;ERR_GVY_DBD_007. OB vesvoy not in N4: &quot;+ vesvoyBdb);&#xA; &#x9;&#x9;&#x9;  }&#xA;&#x9;&#x9;    }//Outer if Ends&#xA;            //A5 - Unit Not Import,Not Inbound and if PODBdb and N4Pod dont match then set POD to Bdb POD&#xA;   &#x9;        println( &quot;dischargePortN4 = &quot; + dischargePortN4);&#xA;   &#x9;        if ( discPortBdb != dischargePortN4 ) {&#xA;&#x9;           def podRtgBdb = RoutingPoint.findRoutingPoint( discPortBdb)&#xA;&#x9;           if(podRtgBdb == null){&#xA;&#x9;             emailSender.custSendEmail(emailFrom,emailTo,&quot; BDB error for Booking &quot;+ dbdBookingNum+ &quot; and Unit &quot; +ctrId ,emailBody + &quot;Destination Port not a Routing Point. POD lookup NULL: &quot; + discPortBdb+note);&#xA;&#x9;             fail( &quot;ERR_GVY_BDB_007.6. Destination Port not a Routing Point. POD lookup NULL: &quot; + discPortBdb);&#xA;&#x9;           }&#xA;&#x9;         unit.getUnitRouting().setRtgPOD1(podRtgBdb);&#xA;&#x9;        }&#xA;&#xA;   &#x9;        unit.setFieldValue(&quot;unitGoods.gdsDestination&quot;, destPortBdb);&#xA;  &#x9;        def shipper = Shipper.findOrCreateShipper( shipperIdBdb, shipperNameBdb);&#xA; &#x9;        unit.getUnitGoods().updateShipper( shipper);&#xA; &#x9;        def conee;&#xA; &#x9;        if(shipperIdBdb == consigneeIdBdb) {&#xA; &#x9;          conee = shipper;&#xA;&#x9;        } else {&#xA;&#x9;          conee = Shipper.findOrCreateShipper( consigneeIdBdb, consigneeNameBdb);&#xA;&#x9;        }&#xA;&#x9;        unit.getUnitGoods().updateConsignee( conee);&#xA;  &#x9;     }//innner Else ends to roll over Bkg&#xA;&#x9;} // end of if IMPORT and EDXPORT LOGIC&#xA;&#xA;&#x9;println( &quot;end of import and non-import.&quot;);&#xA;&#xA;    //A3 -Set OB Carrier to Barge&#xA;    // A10, use the looked up value not the passed value&#xA;    setOBCarrierOnPODChng(ctrId, dischargePortN4, discPortBdb);&#xA;&#xA;&#xA;     // Fixed code to set the bzuId&#xA;&#x9;def lineOperatorN4 = unit.getUnitLineOperator();&#xA;&#x9;if(lineOperatorN4 != null) lineOperatorN4 = lineOperatorN4.bzuId;&#xA;&#x9;else lineOperatorN4.equals(&quot;&quot;);&#xA;&#x9;if ( primCarrierBdb != null &amp;&amp; !primCarrierBdb.equals(&quot;&quot;) &amp;&amp;  !lineOperatorN4.equals(primCarrierBdb)) {&#xA;&#x9;&#x9;def bzuid =  com.navis.argo.business.reference.LineOperator.findLineOperatorById(primCarrierBdb);&#xA;&#x9;&#x9;if(bzuid != null) {&#xA;&#x9;&#x9;&#x9;unit.setUnitLineOperator(bzuid);&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo,&quot; BDB error for Booking &quot;+ dbdBookingNum+ &quot; and Unit &quot; +ctrId ,emailBody + &quot;Line Operator is not in N4: &quot;+ primCarrierBdb+note);&#xA;&#x9;&#x9;&#x9;fail( &quot;ERR_GVY_DBD_008. Line Operator is not in N4: &quot;+ primCarrierBdb);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;    println( &quot;isUnitSit = &quot; + sit);&#xA;&#xA;    def misc2 = unit.getFieldValue(&quot;unitFlexString11&quot;);&#xA;&#x9;misc2 = misc2 != null ? misc2 : &quot;&quot;&#xA;    //A3 - Update Code for ClassCastException&#xA;    if ( &quot;Y&quot;.equals(sit) &amp;&amp; !isUnitSIT  &amp;&amp; !misc2.contains( &quot;S&quot;)) { //A16 Added DrayStatus check&#xA;          event.postNewEvent(&quot;SIT_ASSIGN&quot;, &quot;BDB SIT_ASSIGN&quot;);&#xA;&#x9;}&#xA;&#xA;&#x9;println( &quot;comments = &quot; + comments);&#xA;&#x9;if ( !comments.equals(&quot;&quot;)) {&#xA;        if(unit.getFieldValue(&quot;unitRemark&quot;) != null) comments = unit.getFieldValue(&quot;unitRemark&quot;) + comments;&#xA;&#x9;&#x9;if(comments.length() &gt; 255) { comments = comments.substring(0,255); }&#xA;&#x9;&#x9;unit.setFieldValue( &quot;unitRemark&quot;, comments);&#xA;&#x9;}&#xA;&#xA;    //A1 - Tracker Change&#xA;    def changes = tracker.getChanges(unit);&#xA;    if(changes != null &amp;&amp; changes.getFieldChangeCount() != 0) {&#xA;        unit.recordUnitEvent(com.navis.argo.business.atoms.EventEnum.UNIT_PROPERTY_UPDATE,changes , &quot;Field Update BDB&quot;);&#xA;    }&#xA;&#xA;&#x9;event.postNewEvent( &quot;BDB&quot;, &quot;ACETS: &quot; + recorder);&#xA;&#xA;  }catch(Exception e){&#xA;     e.printStackTrace()&#xA;     throw e;&#xA;  }&#xA;}&#xA;&#xA;  private boolean isLongHaul( String vesvoy) {&#xA;&#x9;&#x9;//def gvyBaseClass = new GroovyInjectionBase()&#xA;  &#x9;def gvyUtil = getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;  &#x9;def vType = gvyUtil.getVesselClassType( vesvoy);&#xA;  &#x9;return vType == &quot;CELL&quot; ? true : false;&#xA;&#x9;}&#xA;&#xA;&#xA;  /*&#xA;  1] Set OBCarreir as GEN_VESSEL if POD is chnaged to NIS&#xA;  2] Set OBCarreir as GEN_TRUCK if POD is chnaged to HON&#xA;  3] Set only if POD changed and unit is not Departed&#xA;*/&#xA; public void setOBCarrierOnPODChng(String unitId, String dischargePortN4, String  dischPortBdb)&#xA; {&#xA;   try&#xA;   {&#xA;     // Get Unit Object&#xA;     def unitFinder = getUnitFinder()&#xA;     def complex = ContextHelper.getThreadComplex();&#xA;     def inEquipment = Equipment.loadEquipment(unitId);&#xA;     def unit = unitFinder.findActiveUnit(complex,inEquipment)&#xA;     //A7&#xA;     if(unit == null){&#xA;           return&#xA;     }&#xA;&#xA;     def gvyCmisUtil = getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;&#xA;     def prevDischPort =  dischargePortN4 != null ? dischargePortN4 : &quot;&quot;&#xA;&#xA;     //Set BDB DischPort as DischargePort&#xA;     def curDischPort = dischPortBdb != null ? dischPortBdb : &quot;&quot;&#xA;&#xA;     println(&quot;BDB curDischPort ::&quot;+curDischPort+&quot;   prevDischPort ::&quot;+prevDischPort)&#xA;&#xA;    def intdObCarrierId = unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;)&#xA;    intdObCarrierId = intdObCarrierId != null ? intdObCarrierId : &quot;&quot;&#xA;&#xA;    boolean ObcarrierFlag = intdObCarrierId.equals(&quot;GEN_TRUCK&quot;) || intdObCarrierId.equals(&quot;GEN_VESSEL&quot;) || intdObCarrierId.equals(&quot;GEN_CARRIER&quot;) ? true : false&#xA;&#xA;    boolean ObcarrierFlagHon = intdObCarrierId.equals(&quot;BARGE&quot;) || intdObCarrierId.equals(&quot;GEN_VESSEL&quot;) || intdObCarrierId.equals(&quot;GEN_CARRIER&quot;) ? true : false&#xA;&#xA;    //Set OB Carrier visit&#xA;    def visit = &quot;&quot;&#xA;    if(gvyCmisUtil.isNISPort(curDischPort) &amp;&amp; !gvyCmisUtil.isNISPort(prevDischPort) &amp;&amp; ObcarrierFlag){&#xA;      //SET TO BARGE&#xA;      visit = com.navis.argo.business.model.CarrierVisit.findOrCreateVesselVisit(com.navis.argo.ContextHelper.getThreadFacility(), &quot;BARGE&quot;)&#xA;      unit.getUfvForFacilityNewest(com.navis.argo.ContextHelper.getThreadFacility()).setUfvIntendedObCv(visit)&#xA;      unit.getUfvForFacilityNewest(com.navis.argo.ContextHelper.getThreadFacility()).setUfvActualObCv(visit)&#xA;    }else if(curDischPort.equals(&quot;HON&quot;) &amp;&amp; !prevDischPort.equals(&quot;HON&quot;) &amp;&amp; ObcarrierFlagHon){&#xA;      visit = com.navis.argo.business.model.CarrierVisit.getGenericTruckVisit(complex);&#xA;      unit.getUfvForFacilityNewest(com.navis.argo.ContextHelper.getThreadFacility()).updateObCv(visit);&#xA;    }&#xA;    println(&quot;OBcarrier set to &quot;+unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv&quot;))&#xA;   }catch(Exception e){&#xA;        e.printStackTrace()&#xA;&#x9;&#x9;fail( &quot;BDB Error setting OBCarrier On POD Change&quot;+unitId);&#xA;   }&#xA;&#xA; }//Method Ends&#xA;&#xA;     private boolean isStowplan(unit) {&#xA;        def remark = unit.unitRemark;&#xA;        if(remark == null) return false;&#xA;        return remark.startsWith(&quot;Stowplan Data&quot;);&#xA;    }&#xA;&#xA;  public boolean rollBkgForExport(Object unit){&#xA;   try{&#xA;  def facility = getFacility();&#xA;  def bl_nbr=unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;)&#xA;  if(bl_nbr == null || &quot;&quot;.equals(bl_nbr)){&#xA;&#x9;  return false;&#xA;  }&#xA;&#xA;  def unitLineOperator=unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqoLine.bzuId&quot;)&#xA;  unitLineOperator = unitLineOperator != null ? unitLineOperator : null&#xA;  if(unitLineOperator == null || &quot;&quot;.equals(unitLineOperator)){&#xA;&#x9;  return false;&#xA;  }&#xA;  def bizScope = ScopedBizUnit.findScopedBizUnit( unitLineOperator, BizRoleEnum.LINEOP);&#xA;&#xA;  def bkgVesvoy = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqoVesselVisit.cvId&quot;)&#xA;  def cv = CarrierVisit.findVesselVisit( facility, bkgVesvoy);&#xA;  if ( cv == null) {&#xA;&#x9;fail( &quot;ERR_GVY_LNK_010. Could not find Export Bkg carrier visit: &quot; + bkgVesvoy);&#xA;  }&#xA;  def booking = Booking.findBookingByUniquenessCriteria( bl_nbr, bizScope, cv);&#xA;  if ( booking == null) {&#xA;    fail( &quot;ERR_GVY_LNK_011. Could not Inbound Export Bkg for carrier visit: &quot; + bkgVesvoy);&#xA;&#x9;return false;&#xA;  }&#xA;  //A15&#xA;  def eqoMgr = new EquipmentOrderManagerPea();&#xA;  //eqoMgr.assignExportBookingToUnit( booking, unit);&#xA;  eqoMgr.assignExportBookingToUnit( booking, null, unit); //Update Method for TOS2.1 -- A16&#xA;&#xA;  println(&quot;bl_nbr=&quot;+bl_nbr+&quot; unitLineOperator=&quot;+unitLineOperator+&quot; bkgVesvoy=&quot;+bkgVesvoy)&#xA;   return true;&#xA;  }catch(Exception e){&#xA;     e.printStackTrace();&#xA;&#x9; fail( &quot;BDB Error Rolling BKG over to Unit&quot;+unit.unitId);&#xA;  }&#xA;&#xA;}&#xA;&#xA;}" />
<digital-asset id="MatOVRReport" short-description="MatOVRReport" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.argo.business.model.Yard&#xA;import com.navis.xpscache.yardmodel.api.*;&#xA;import com.navis.xpscache.yardmodel.impl.*;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 09/19/2012&#xA;* Description: This groovy is used to generate the Stowplan/Manifest Discrepancies after Stowplan and Manifest process&#xA;*/&#xA;&#xA;public class MatOVRReport extends GroovyInjectionBase&#xA;&#x9;{&#xA;&#x9;&#x9;private final String emailTo = &quot;riyer@matson.com&quot;;&#xA;&#x9;&#x9;def inj = new GroovyInjectionBase();&#xA;&#xA;&#x9;&#x9;public boolean execute(Map params)&#xA;&#x9;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;getUnitForId(&quot;CAXU6972024&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList ------- Success&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(e)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA; &#xA;&#x9;public void getUnitForId(String containerId)&#xA;&#x9;{&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Inside getUnit&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;//String containerId = &quot;MATU2496256&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID,containerId));&#xA;&#x9;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S40_YARD))&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;getUnit &quot;+dq);&#xA;&#x9;&#x9;&#x9;&#x9;def unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;After unitList&quot;+unitList.size());&#xA;&#x9;&#x9;&#x9;&#x9;if (unitList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unitNbr = unit.unitId;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def consignee = unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def shipper = unit.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuName&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def vesVoy = unit.getFieldValue(&quot;unitDeclaredIbCv.cvId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def loc = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def lkpSlot=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;lkpSlot = lkpSlot!= null ? lkpSlot : '' &#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;def lkpSlotValue = lkpSlot.indexOf(&quot;.&quot;)== -1 ? lkpSlot : lkpSlot.substring(0,lkpSlot.indexOf(&quot;.&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;lkpSlotValue = formatYardPosition(lkpSlotValue) //A1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def cargoNotes=unit.getFieldValue(&quot;unitRemark&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def dtnAvailDt = ufv.getFieldValue(&quot;ufvFlexDate02&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def dtnDueDt = ufv.getFieldValue(&quot;ufvFlexDate03&quot;);&#xA;          &#x9;&#x9;&#x9;&#x9;def lastfreeDayStr = ufv.getFieldValue(&quot;ufvCalculatedLastFreeDay&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Date lastfreeDate = getlastFreeDate(dtnAvailDt, lastfreeDayStr);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Details ::: &quot;+ consignee +&quot; ::&quot; + unitNbr + &quot;::&quot;+vesVoy+ &quot;::&quot;+loc+&quot;::&quot;+ lkpSlotValue +&quot;::&quot;+shipper +&quot;::&quot;+cargoNotes+&quot;::&quot;+dtnDueDt);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}catch (Exception e){&#xA;&#x9;&#x9;&#x9;println(&quot;Error :&quot; + e);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;//Format yard position based onyard file &#xA; public String formatYardPosition(String inYardSlot){&#xA;  def binName = inYardSlot;&#xA;  try{&#xA;   int lastDot = inYardSlot.lastIndexOf('.');&#xA;   &#xA;   def inFacility = com.navis.argo.ContextHelper.getThreadFacility()&#xA;   //10/20/10 - IF Facility HON Format as per N4yard file Else IF NIS Pass AS-IS&#xA;   if(inFacility != null &amp;&amp; !&quot;HON&quot;.equals(inFacility.getFcyId())){&#xA;&#x9;   println(&quot;Dont Compute Location as not a HON Transaction&quot;)&#xA;&#x9;   return binName;&#xA;   }&#xA;   Yard inYard =  Yard.findYard(&quot;SI&quot;, inFacility)&#xA;   IYardModel yardModel = inYard.getYardModel(); &#xA;   if (lastDot &gt; 0) {  &#xA;     binName = inYardSlot.substring(0, lastDot);&#xA;   }&#xA;   IYardBin bin = yardModel.getBin(binName);&#xA;   if(bin == null){&#xA;       return binName&#xA;   }&#xA;   IYardBlock yardBlock = bin.getBlock();&#xA;   if(yardBlock != null &amp;&amp; yardBlock.isWheeled()){&#xA;&#x9;   if(binName.length() &gt;=4){ &#xA;&#x9;&#x9;   binName = binName.substring(0,3)+' '+binName.substring(3);&#xA;&#x9;   }&#xA;   }else{&#xA;     //println(&quot;yardBlock.getBlockType()------------------------- &quot;+yardBlock.getBlockType())&#xA;&#x9; if(binName.length() &gt; 3 &amp;&amp; yardBlock != null &amp;&amp; &#xA;&#x9;&#x9; (yardBlock.getBlockType()== 13 || yardBlock.getBlockType()== 12 || yardBlock.getBlockType()== 1)){&#xA;        binName = binName.substring(0,2)+' '+binName.substring(2);&#xA;&#x9; }&#xA;   }&#xA; }catch(Exception e){&#xA;    e.printStackTrace()&#xA; }&#xA; return binName&#xA;}&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;public Date getlastFreeDate(Object availDate, String lastfreeDay)&#xA;{&#xA;  Date lastFreeDate = null;&#xA;&#xA;  if(availDate == null){&#xA;     lastFreeDate = null&#xA;  }&#xA;  else if (lastfreeDay != null &amp;&amp; lastfreeDay.indexOf(&quot;no&quot;) == -1) &#xA;  {&#xA;      def gvyUtil = inj.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;      DateFormat formatter = new java.text.SimpleDateFormat(&quot;yyyy-MMM-dd&quot;);&#xA;      lastFreeDate = (Date)formatter.parse(lastfreeDay); &#xA;  }else if (lastfreeDay != null &amp;&amp; lastfreeDay.indexOf(&quot;no&quot;) != -1) {&#xA;       lastFreeDate = null&#xA;  }&#xA;   return lastFreeDate&#xA;}&#x9;&#xA;&#x9;&#xA;}&#xA;&#xA;&#xA;" />
<digital-asset id="GvyCmisEventUnitRectify" short-description="GvyCmisEventUnitRectify" is-pre-deployed="N" groovy-code="/*&#xA;* Sr Doer Date      Change&#xA;* A1 GR   07/21/10  Correction if actualIbcarrier=Vessel then OGC else IGX&#xA;* A2 GR   08/22/10  Added BDC for acets on a CLS action (SN4Q change)&#xA;* A3 GR   08/22/10  Pulled out the yard first level check.&#xA;* A4 GR   09/12/10  Move Else if condition in as was not being called&#xA;* A5 GR   10/03/10  Null for actual vessel and voyage&#xA;* A6 GR   10/08/10  Gems: CLS and BDC for Location=3&#xA;*/&#xA;&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;&#xA;public class GvyCmisEventUnitRectify {&#xA;    def prevTransitState = ''&#xA;    def currTransitState = ''&#xA;    /*&#xA;    * 1] Set the N4:Time In value explicitly as there is an bug Open&#xA;    * 2] Pass message only for Facility Hon&#xA;    * 3] Conditional check on Previous and current state of the unit.&#xA;    */&#xA;&#xA;    public String processRectify(String xmlData, Object event, Object gvyBaseClass) {&#xA;        def unit = event.getEntity()&#xA;        def xmlGvyString = xmlData&#xA;&#xA;        try {&#xA;            //Pass rectify values only for facility HON&#xA;            def injBase = new GroovyInjectionBase();&#xA;            def facility = injBase.getFacility();&#xA;            def facilityId = facility != null ? facility.getFcyId() : ''&#xA;            if (!facilityId.equals(ContextHelper.getThreadFacility().getFcyId())) {&#xA;                return null&#xA;            }&#xA;            def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;            def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;&#xA;            def lkpLocType = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;            lkpLocType = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;&#xA;            def aibcarrierMode = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvCarrierMode&quot;)&#xA;            aibcarrierMode = aibcarrierMode != null ? aibcarrierMode.getKey() : ''&#xA;&#xA;            //def transitState = unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;            Map mapEvntFld = gvyEventUtil.eventFieldChangedValues(event, gvyBaseClass)&#xA;            readEventChangedFields(mapEvntFld)&#xA;&#xA;            def posNameDesc = gvyEventUtil.getPreviousPropertyAsString(event, &quot;posName&quot;)&#xA;            //Example : V-HAL096-208110&#xA;            def posValueArr = posNameDesc != null ? posNameDesc.split(&quot;-&quot;) : null&#xA;            println(&quot;Facility :&quot; + facilityId + &quot;   lkpLocType::&quot; + lkpLocType + &quot;  transitState::&quot; + currTransitState + &quot; posNameDesc::&quot; + posNameDesc)&#xA;            if ((posValueArr != null &amp;&amp; posValueArr.length &gt; 0)) //A3&#xA;            {&#xA;                //Previous Position was Vessel&#xA;                if (posValueArr[0].equals(&quot;V&quot;) &amp;&amp; gvyCmisUtil.getVesselClassType(posValueArr[1]).equals('CELL')) {&#xA;                    // Previous Position in LongHaul&#xA;                    rectifyInyardOnLongHaul(xmlGvyString, gvyCmisUtil, gvyBaseClass)&#xA;                } else if (posValueArr[0].equals(&quot;V&quot;) &amp;&amp; gvyCmisUtil.getVesselClassType(posValueArr[1]).equals('BARGE')) {&#xA;                    rectifyInyardOnBarge(xmlGvyString, gvyCmisUtil, gvyBaseClass, posValueArr[1])&#xA;                } else if (posValueArr[0].equals(&quot;T&quot;)) {&#xA;                    def eventObj = event.getEvent()&#xA;                    def eventNotes = eventObj.getEventNote()&#xA;&#xA;                    boolean msgFlag = rectifyPreAdviseEmptyIntoYard(xmlGvyString, unit, event, gvyBaseClass, gvyCmisUtil)&#xA;&#xA;                    if (eventNotes == null &amp;&amp; !msgFlag) {&#xA;                        rectifyUnitOutgateCorrection(xmlGvyString, gvyCmisUtil, gvyBaseClass)&#xA;                    } else if (eventNotes != null &amp;&amp; eventNotes.startsWith('INV') &amp;&amp; !msgFlag) {&#xA;                        rectifyUnitOutgateLoc(xmlGvyString, gvyCmisUtil, gvyBaseClass)&#xA;                    }// A2&#xA;                    else if (!msgFlag) { //Not getting called&#xA;                        rectifyUnitOutgateLoc(xmlGvyString, gvyCmisUtil, gvyBaseClass)&#xA;                    }//Add this condition after checking with kel&#xA;                }&#xA;                //Moved this condition in as&#xA;                else if (currTransitState.equals('Retired')) {&#xA;                    rectifyDeleteContainer(xmlGvyString, gvyCmisUtil, gvyBaseClass)&#xA;                } else if (currTransitState.equals('Departed')) {&#xA;                    rectifyIngateCorrection(xmlGvyString, gvyCmisUtil, gvyBaseClass, aibcarrierMode)&#xA;                } else {&#xA;                    println(&quot;Did not Match any Condition to create a Unit Rectfiy Feed&quot;)&#xA;                }&#xA;                //println(&quot;posValueArr[0] ::&quot;+posValueArr[0]+&quot;  posValueArr[1] ::&quot;+posValueArr[1])&#xA;            }//Outer if Ends&#xA;&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;    }//Method Process Ends&#xA;&#xA;    /*&#xA;     * Scenario One : N4 Rectify ? Yard (outgate correction)&#xA;     * In N4, user will: 1. PreAdvise Empty  2. Rectify to yard.(Auto Update Rule)&#xA;     * Secnario   T-State     Position       Comment&#xA;     * one :      Departed    V-Long haul    Found inyard_verifed seal intact_not loaded to LH  (LVX)&#xA;     * two :      Departed    V-Barge        Found inyard_verifed seal intact_not loaded to Barge (LVX)&#xA;     * three:     YARD/EC-IN  GenTruck/Yard  Ingate the Conatiner but actually it never came in&#xA;                                             rectify to Departed (Ingate Correction)&#xA;     * four :     ANY         ANY            Rectify the unit to Retire (Delete Container)&#xA;     * five :     Departed    T-GEN_TRUCK    Found inyard_verifed empty&#xA;                  a) if rectify notes INV Entered = CLS  (Outgate Correction)&#xA;                    b) if rectify notes not Entered = OGX (Outgate Correction)&#xA;     * Six  :   Find an MTY in the yard and N4 displaying Departed[Load] so rectify to yard&#xA;     */&#xA;&#xA;    //Scenario one in class notes&#xA;    public String rectifyInyardOnLongHaul(String xmlData, Object gvyCmisUtil, Object gvyBaseClass) {&#xA;        //LVX :Msg Processing&#xA;        rectifyFromVesselToYard(xmlData, gvyCmisUtil, gvyBaseClass)&#xA;    }&#xA;&#xA;    //Scenario two in class notes&#xA;    public String rectifyInyardOnBarge(String xmlData, Object gvyCmisUtil, Object gvyBaseClass, String misc1) {&#xA;        def xmlGvyString = xmlData&#xA;        try {&#xA;            gvyCmisUtil.postMsgForAction(xmlGvyString, gvyBaseClass, &quot;DTD&quot;)&#xA;            //LVX :Msg Processing&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;misc1=&quot;, misc1)&#xA;            rectifyFromVesselToYard(xmlGvyString, gvyCmisUtil, gvyBaseClass)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;    //Scenario three in class notes&#xA;    public String rectifyIngateCorrection(String xmlData, Object gvyCmisUtil, Object gvyBaseClass, String aibcarrierMode) {&#xA;        println(&quot;  rectifyIngateCorrection(xmlData,gvyCmisUtil)  &quot;)&#xA;        def xmlGvyString = xmlData&#xA;        try {&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;locationStatus=&quot;, &quot;3&quot;)&#xA;            if (aibcarrierMode.equals('VESSEL')) { //A1&#xA;                gvyCmisUtil.postMsgForAction(xmlGvyString, gvyBaseClass, &quot;OGC&quot;)&#xA;            } else {&#xA;                gvyCmisUtil.postMsgForAction(xmlGvyString, gvyBaseClass, &quot;IGX&quot;)&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;    //Scenario four in class notes&#xA;    public String rectifyDeleteContainer(String xmlData, Object gvyCmisUtil, Object gvyBaseClass) {&#xA;        println(&quot;rectifyDeleteContainer()&quot;)&#xA;        def xmlGvyString = xmlData&#xA;        try {&#xA;            def dir = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;dir=&quot;);&#xA;            def ds = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;ds=&quot;);&#xA;            def dischangePort = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;dischargePort=&quot;);&#xA;            //boolean nisPod = gvyCmisUtil.isNISPort(dischangePort)&#xA;            def ls = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;locationStatus=&quot;);&#xA;            def misc3 = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;misc3=&quot;);&#xA;&#xA;            if ((dir.equals(&quot;IN&quot;) &amp;&amp; ds.equals(&quot;CY&quot;) &amp;&amp; ls.equals(&quot;7&quot;)) ||&#xA;                    (dischangePort.equals(ContextHelper.getThreadFacility().getFcyId()) &amp;&amp; misc3.length() &gt; 6)) {&#xA;                gvyCmisUtil.postMsgForAction(xmlGvyString, gvyBaseClass, &quot;DTD&quot;)&#xA;            }&#xA;            if (dir.equals(&quot;IN&quot;) &amp;&amp; ls.equals(&quot;7&quot;)) {&#xA;                gvyCmisUtil.postMsgForAction(xmlGvyString, gvyBaseClass, &quot;NDD&quot;)&#xA;            }&#xA;&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;locationStatus=&quot;, &quot;2&quot;)&#xA;            gvyCmisUtil.postMsgForAction(xmlGvyString, gvyBaseClass, &quot;DEL&quot;)&#xA;            println(&quot;dir :&quot; + dir + &quot; ds:&quot; + ds + &quot;  dischangePort:&quot; + dischangePort + &quot;   ls:&quot; + ls + &quot;  misc3:&quot; + misc3)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;    //Scenario five a) in class notes&#xA;    public String rectifyUnitOutgateLoc(String xmlData, Object gvyCmisUtil, Object gvyBaseClass) {&#xA;        println(&quot; rectifyUnitOutgateLoc(xmlData,gvyCmisUtil) &quot;)&#xA;        def xmlGvyString = xmlData&#xA;        try {&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;locationStatus=&quot;, &quot;1&quot;)&#xA;            gvyCmisUtil.postMsgForAction(xmlGvyString, gvyBaseClass, &quot;CLS&quot;)&#xA;            //A2&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;locationStallConfig=&quot;, &quot;AO&quot;)&#xA;            gvyCmisUtil.postMsgForAction(xmlGvyString, gvyBaseClass, &quot;BDC&quot;)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;    //Scenario five b) in class notes&#xA;    public String rectifyUnitOutgateCorrection(String xmlData, Object gvyCmisUtil, Object gvyBaseClass) {&#xA;        println(&quot; rectifyUnitOutgateCorrection(xmlData,gvyCmisUtil) &quot;)&#xA;        def xmlGvyString = xmlData&#xA;        try {&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;locationStatus=&quot;, &quot;1&quot;)&#xA;            gvyCmisUtil.postMsgForAction(xmlGvyString, gvyBaseClass, &quot;OGX&quot;)&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;    public void rectifyFromVesselToYard(String xmlData, Object gvyCmisUtil, Object gvyBaseClass) {&#xA;        def xmlGvyString = xmlData&#xA;        try {&#xA;            //If UNIT has Chassis LVX&#xA;            def chassisNbr = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;chassisNumber=&quot;);&#xA;            if (!chassisNbr.equals(&quot;null&quot;)) {&#xA;                def xmlchassis = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;unitClass=&quot;, &quot;CHASSIS&quot;)&#xA;                gvyCmisUtil.postMsgForAction(xmlchassis, gvyBaseClass, &quot;LVX&quot;)&#xA;            }&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;actualVessel=&quot;, &quot;null&quot;)//A5&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;actualVoyage=&quot;, &quot;null&quot;)&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;leg=&quot;, &quot;null&quot;)&#xA;            gvyCmisUtil.postMsgForAction(xmlGvyString, gvyBaseClass, &quot;LVX&quot;)&#xA;            println(&quot;chassisNbr   ::&quot; + chassisNbr)&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;    /*&#xA;     * Scenario six :  Find an MTY in the yard and N4 displaying Departed[Load]&#xA;     * So we Preadvise an empty unit and then Rectify it into the yard&#xA;     */&#xA;&#xA;    public boolean rectifyPreAdviseEmptyIntoYard(String xmlData, Object unit, Object event, Object gvyBaseClass, Object gvyCmisUtil) {&#xA;        def xmlGvyString = xmlData&#xA;        try {&#xA;            def freightkind = unit.getFieldValue(&quot;unitFreightKind&quot;)&#xA;            freightkind = freightkind != null ? freightkind.getKey() : ''&#xA;            def transitState = unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;            transitState = transitState != null ? transitState.getKey() : ''&#xA;            def preAdviseEvent = event.getMostRecentEvent(&quot;UNIT_PREADVISE&quot;);&#xA;            println(&quot;    freightkind : &quot; + freightkind + &quot;    transitState ::&quot; + transitState + &quot; PREADVISE : &quot; + preAdviseEvent)&#xA;            if (freightkind.equals(&quot;MTY&quot;) &amp;&amp; transitState.equals('S40_YARD') &amp;&amp; preAdviseEvent != null) {&#xA;                xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;locationStatus=&quot;, &quot;1&quot;)&#xA;                gvyCmisUtil.postMsgForAction(xmlGvyString, gvyBaseClass, &quot;OGX&quot;)&#xA;                return true&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return false&#xA;    }&#xA;&#xA;    //Read Event Field Previous and Current value&#xA;    public void readEventChangedFields(Object mapEvntField) {&#xA;        try {&#xA;            Iterator it = mapEvntField.keySet().iterator();&#xA;            while (it.hasNext()) {&#xA;                def aField = it.next();&#xA;                if (aField.equals('ufvTransitState')) {&#xA;                    def aEvntFieldObj = mapEvntField.get(aField)&#xA;                    //Fetch Updated Field Values&#xA;                    def fieldname = aEvntFieldObj.getFieldName()&#xA;                    prevTransitState = aEvntFieldObj.getpreviousValue()&#xA;                    currTransitState = aEvntFieldObj.getCurrentValue()&#xA;                    println('fieldname ::' + fieldname + '  previousValue::' + prevTransitState + '   currentValue::' + currTransitState)&#xA;                }&#xA;            }//While Ends&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;&#xA;    }//Method readEventChangedFields Ends&#xA;&#xA;&#xA;}//Class Ends" />
<digital-asset id="MatReportColumbusTotals" short-description="MatReportColumbusTotals" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.road.business.model.*;&#xA;import java.util.Calendar;&#xA;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 02/01/2013&#xA;* Description: This groovy is used to generate the Columbus Totals by Owner report&#xA;*/&#xA;&#xA;public class MatReportColumbusTotals extends GroovyInjectionBase&#xA;&#x9;{&#xA;&#x9;    private final String  emailFrom = '1aktosdevteam@matson.com'&#xA;&#x9;    //private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#xA;&#x9;&#x9;private String outBoundCarrierId = null&#xA;&#x9;&#x9;def inj = null;&#xA;&#x9;&#x9;String VesVoy = null;&#xA;&#xA;&#xA;&#x9;public boolean execute(Map params)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;inj = new GroovyInjectionBase();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;List unitList = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList reportUnitList =  new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitList = getUnits()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;unitList.size()&quot;+unitList.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator unitIterator = unitList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while(unitIterator.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = unitIterator.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap unitsDataMap = populateUnitData(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(unitsDataMap != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportUnitList.add(unitsDataMap);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList -------------------- :&quot;+ (reportUnitList != null ? reportUnitList.size() : &quot;EMPTY&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//Set Report Parameter&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (reportUnitList.size() &gt; 0) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource ds = new JRMapCollectionDataSource(reportUnitList);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap reportDesignsmap = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;COLUMBUS TOTALS&quot;,ds);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReports(reportDesignsmap,parameters, emailTo, VesVoy+&quot; Columbus Totals by Owner&quot; ,&quot;Attached report for Columbus Totals by Owner&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList ------- Success&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList ------- No data to print&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public boolean generateColumbusReport(List unitList, String vesVoy)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;inj = new GroovyInjectionBase();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList reportUnitList =  new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;unitList.size()&quot;+unitList.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator unitIterator = unitList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while(unitIterator.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = unitIterator.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap unitsDataMap = populateUnitData(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(unitsDataMap != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportUnitList.add(unitsDataMap);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList -------------------- :&quot;+ (reportUnitList != null ? reportUnitList.size() : &quot;EMPTY&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//Set Report Parameter&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (reportUnitList.size() &gt; 0) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource ds = new JRMapCollectionDataSource(reportUnitList);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap reportDesignsmap = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;COLUMBUS TOTALS&quot;,ds);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReports(reportDesignsmap,parameters, emailTo, vesVoy+&quot; Columbus Totals by Owner&quot; ,&quot;Attached report for Columbus Totals by Owner&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList ------- Success&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo, vesVoy+&quot; Columbus Totals by Owner&quot;,&quot;No units reported&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList ------- No data to print&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#xA;//1.Maps unit Data to report file attribute&#xA;public HashMap populateUnitData(Object unit)&#xA;    {&#xA;        HashMap map = null;&#xA;        try&#xA;        {&#xA;&#xA;&#xA;&#x9;&#x9;String equipType =  unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;&#xA;&#xA;&#xA;&#x9;&#x9;map = new HashMap();&#xA;&#xA;&#x9;&#x9;equipType = String.format(&quot;%-8s&quot;, equipType);&#xA;&#x9;&#x9;//println(&quot;equipType::::&quot;+equipType+&quot; &quot;+unit.unitPrimaryUe.ueEquipmentState.eqsEqOwner.bzuId)&#xA;&#xA;        map.put(&quot;UnitNbr&quot;, unit.getFieldValue(&quot;unitId&quot;));&#xA;&#x9;&#x9;map.put(&quot;EquipmentType&quot;,equipType+unit.unitPrimaryUe.ueEquipmentState.eqsEqOwner.bzuId)//EquipmentType&#xA;&#x9;&#x9;map.put(&quot;EquipmentOwner&quot;,unit.unitPrimaryUe.ueEquipmentState.eqsEqOwner.bzuId)//EquipmentOwner&#xA;&#xA;&#xA;        }catch(Exception e){&#xA;&#x9;&#x9;println(&quot;Error iin the report&quot;)&#xA;          e.printStackTrace();&#xA;            }&#xA;        return map;&#xA;    }&#xA;&#xA;&#xA;&#x9;public List getReportUnits(String vesVoy)&#xA;&#x9;&#x9;   {&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;println(&quot;Inside getReportUnits&quot;);&#xA;&#x9;&#x9;&#x9;def id = vesVoy;//&quot;HUG294&quot; // This will be removed when it call automatically after Manifest/Stow process&#xA;&#x9;&#x9;&#x9;//def id = &quot;HUG294&quot; // This will be removed when it call automatically after Manifest/Stow process&#xA;&#x9;&#x9;&#x9;VesVoy = id;&#xA;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;  dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID,id)).addDqPredicate(PredicateFactory.eq(UnitField.UFV_POD_ID,&quot;HON&quot;));&#xA;&#x9;&#x9;&#x9;  println(dq);&#xA;&#x9;&#x9;&#x9;  def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;  println(&quot;After unitList&quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;  if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;&#x9; Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9; while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; if(unit.getFieldValue(&quot;unitVisitState&quot;).equals(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; units.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;  }&#xA;&#x9;&#x9;&#x9;  println(&quot;unitsSize&quot; + units.size);&#xA;&#x9;&#x9;&#x9;return units;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;   }&#xA;&#xA;public List getUnits()&#xA;&#x9;&#x9;   {&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9; println(&quot;Inside getUnits&quot;);&#xA;&#x9;&#x9;&#x9;def id = &quot;ROS313&quot;//&quot;HUG294&quot; // This will be removed when it call automatically after Manifest/Stow process&#xA;&#x9;&#x9;&#x9;VesVoy = id;&#xA;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;  dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, id)).addDqPredicate(PredicateFactory.eq(UnitField.UFV_POD_ID,&quot;HON&quot;));&#xA;&#x9;&#x9;&#x9;  println(dq);&#xA;&#x9;&#x9;&#x9;  def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;  println(&quot;After unitList&quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;  if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;&#x9; Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9; while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; if(unit.getFieldValue(&quot;unitVisitState&quot;).equals(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; units.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;  }&#xA;&#x9;&#x9;&#x9;  println(&quot;unitsSize&quot; + units.size);&#xA;&#x9;&#x9;&#x9;return units;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;   }&#xA;&#xA;&#x9;&#x9;}" />
<digital-asset id="TestGvyPluginCal" short-description="TestGvyPluginCal" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.framework.configuration.calendar.AppCalendarUtil;&#xA;import com.navis.framework.configuration.calendar.AppCalendarEventType;&#xA;import com.navis.argo.ContextHelper;&#xA;&#xA;&#xA;public class TestGvyPluginCal&#xA;{&#xA;&#xA;private static AppCalendarEventType[] exemptTypes = null;&#xA;&#xA;static {&#xA;    exemptTypes = new AppCalendarEventType[2];&#xA;    exemptTypes[0] = AppCalendarEventType.findOrCreateAppCalendarEventType(&quot;EXEMPT_DAY&quot;);&#xA;    exemptTypes[1] = AppCalendarEventType.findOrCreateAppCalendarEventType(&quot;GRATIS_DAY&quot;);&#xA;}&#xA;&#xA;    public String  testCalender()&#xA;  {&#xA;     try{&#xA;      def exemptCalendarEvents = com.navis.framework.configuration.calendar.AppCalendarUtil.getEvents(exemptTypes,ContextHelper.getThreadUserContext())&#xA;&#xA;      java.text.DateFormat df = new java.text.SimpleDateFormat(&quot;MM/dd/yyyy hh:mm:ss&quot;);&#xA;      Date startDate = df.parse(&quot;12/11/2009 02:00:00&quot;); &#xA;&#xA;      def zone = com.navis.argo.ContextHelper.getThreadUserTimezone()    &#xA;&#xA;      def addDays = 10&#xA; &#xA;     println(&quot;startDate=&quot;+startDate+&quot;  zone=&quot;+zone+&quot;  addDays=&quot;+addDays)   &#xA;     def daysOutput = com.navis.framework.configuration.calendar.AppCalendarUtil.getEndDate(startDate, zone, addDays , exemptCalendarEvents, exemptTypes);&#xA;&#xA;     println(&quot; daysOutput=&quot;+daysOutput);&#xA;    return daysOutput;&#xA; }catch(Exception e){&#xA;    e.printStackTrace();&#xA; }&#xA;&#xA;}&#xA;&#xA;&#xA; }//Class Ends&#xA;   &#xA;   &#xA;   &#xA;  " />
<digital-asset id="GvyReportTruckerTurnTime" short-description="GvyReportTruckerTurnTime" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;&#xA;import com.navis.road.RoadField;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.road.business.atoms.TranSubTypeEnum;&#xA;import com.navis.argo.business.atoms.FreightKindEnum;&#xA;import com.navis.road.business.model.TruckTransaction;&#xA;import java.text.SimpleDateFormat;&#xA;&#xA;import com.navis.security.business.user.BaseUser&#xA;import com.navis.road.business.model.TruckingCompany&#xA;&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.road.business.model.TruckVisitStats&#xA;import com.navis.road.business.model.TruckVisitDetails&#xA;&#xA;public class GvyReportTruckerTurnTime&#xA;{&#xA;&#xA; HashMap mapTrckTrans = null;&#xA; ArrayList unitList = new ArrayList();&#xA; private final String emailTo = '1aktosdevteam@matson.com';   &#xA; def inj = new GroovyInjectionBase();&#xA;&#xA; public void processLookup(String fromDate,String toDate, String truckingCompany, String consignee)&#xA; {&#xA;    try&#xA;    {&#xA;       List tvdLst = getTruckVisitByCriteria(fromDate,toDate,truckingCompany,consignee)&#xA;       int tvdSize = tvdLst != null ? tvdLst.size() : 0&#xA;       println(&quot;truckVisitDetailSize ::&quot;+tvdSize)&#xA;       //List and map each trucker&#xA;       for(atvd in tvdLst){&#xA;           getTruckTransStats(atvd)&#xA;       }&#xA;&#x9;&#x9;&#xA;         println(&quot;unitList :&quot;+ (unitList != null ? unitList.size() : &quot;EMPTY&quot;))   &#xA;       &#xA;         //Sorting By Field&#xA;       def gvyRptUtil = inj.getGroovyClassInstance(&quot;ReportFieldSortUtil&quot;)&#xA;       if(unitList != null &amp;&amp; unitList.size() &gt; 0){&#xA;          unitList =  gvyRptUtil.processFieldSort(unitList,&quot;truckingCompanyId&quot;)&#xA;       }&#xA;&#xA;        //Set Report Parameter&#xA;        HashMap parameters = new HashMap();&#xA;        String strDate =  ContextHelper.formatTimestamp(new Date(),ContextHelper.getThreadUserTimezone())&#xA;        parameters.put(&quot;Date&quot;,strDate);&#xA;        // parameters.put(&quot;MATSONLOGO&quot;,DigitalAsset.findImage(&quot;MATSONLOGO&quot;)); &#xA;        &#xA;        //Create and Mail Report &#xA;        JRDataSource ds = new JRMapCollectionDataSource(unitList);&#xA;        def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;        reportRunner.emailReport(ds, parameters, &quot;TURNTIME_BY_TRUCKER&quot;, emailTo, &quot;Turn Time By Trucker&quot;, &quot;Turn Time By Trucker, Consignee and Date&quot;);&#x9;   &#xA;       &#xA;     }catch(Exception e){&#xA;        e.printStackTrace();&#xA;     }&#xA; }&#xA;&#xA; &#xA; public List getTruckVisitByCriteria(String fromDate,String toDate, String truckingCompanys, String consignee){&#xA;   def results  = null;&#xA;   try{&#xA;        //def consigneeArr =  consignee != null ? consignee.split(',') : null;&#xA;         &#xA;        SimpleDateFormat dateTimeFormat = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss&quot;);&#xA;        String startTime = fromDate +&quot; 00:00:00&quot;&#xA;        String endTime = toDate +&quot; 23:59:00&quot;  &#xA;        Date startDateTime = dateTimeFormat.parse(startTime)&#xA;        Date endDateTime = dateTimeFormat.parse(endTime) &#xA;&#xA;       println(&quot;startTime : &quot;+startTime+&quot; endTime:&quot;+endTime+&quot;  startDateTime:&quot;+startDateTime+&quot;   endDateTime:&quot;+endDateTime)&#xA;&#x9;&#x9;&#x9;&#xA;        //2.Lookup TruckVisit&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(&quot;TruckVisitDetails&quot;).addDqPredicate(PredicateFactory.eq(RoadField.TVDTLS_GATE, 3701109)).addDqPredicate(PredicateFactory.eq(RoadField.TVDTLS_STATUS, 'COMPLETE'))&#xA;&#x9;&#x9;//DomainQuery dq = QueryUtils.createDomainQuery(&quot;TruckVisitDetails&quot;).addDqPredicate(PredicateFactory.eq(RoadField.TVDTLS_STATUS, 'COMPLETE'))&#xA;         &#xA;       //Criteria Date, Trucker, Consignee&#xA;       if(startDateTime != null &amp;&amp; endDateTime != null){&#xA;          dq.addDqPredicate(PredicateFactory.between(RoadField.TVDTLS_CREATED, startDateTime, endDateTime))&#xA;       }&#xA;       if(truckingCompanys != null){&#xA;           def trcukCmpyGkeyLst = getTruckCmpyGkey(truckingCompanys)&#xA;           dq.addDqPredicate(PredicateFactory.in(RoadField.TVDTLS_TRK_COMPANY, trcukCmpyGkeyLst));&#xA;      }&#xA;   &#xA;       dq.addDqPredicate(PredicateFactory.like(RoadField.TRAN_CONSIGNEE, &quot;0099835200&quot;));&#xA;//Need to Uncomment &#xA;/*      if(consigneeArr != null){&#xA;           if(consigneeArr.size() == 1){&#xA;             dq.addDqPredicate(PredicateFactory.like(RoadField.TRAN_CONSIGNEE, consigneeArr.get(0)));&#xA;           }else{&#xA;             dq.addDqPredicate(PredicateFactory.in(RoadField.TRAN_CONSIGNEE, consigneeArr));&#xA;          }&#x9;&#x9;  &#xA;      }&#xA;*/&#xA;    //dq.addDqPredicate(Ordering.desc(RoadField.TVDTLS_TRK_COMPANY))&#xA;    //dq.addDqOrdering(Ordering.desc(RoadField.TVDTLS_CREATED))&#xA;    &#xA;&#x9;println(&quot;Domain Query ::&quot;+ dq)&#xA;    results = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;    println(&quot;result size ::&quot;+results != null ? results.size() : 0);&#xA;&#xA;   }catch(Exception e){&#xA;        e.printStackTrace() &#xA;   }&#xA;    return results &#xA; }&#xA;&#xA; public Integer[] getTruckCmpyGkey(String truckingCompanys){&#xA;&#xA;  try{&#xA;  ArrayList truckGkeyLst = new ArrayList()&#xA;  def trckCompanyArr =truckingCompanys != null ? truckingCompanys.split(',') : null;&#xA;  for(aTruckCmpyId  in trckCompanyArr){&#xA;    def truckingCmpy = TruckingCompany.findTruckingCompany(aTruckCmpyId)&#xA;    def gkeyVal = truckingCmpy.getBzuGkey()&#xA;    println(&quot;Trucking Company Gkey ::&quot;+gkeyVal)&#xA;    truckGkeyLst.add(gkeyVal) &#xA;  }&#xA;  println(&quot;Trucking Company arraylist ::&quot;+truckGkeyLst)&#xA;  return truckGkeyLst.toArray()   &#xA;&#xA;  }catch(Exception e){&#xA;      e.printStackTrace()&#xA;  }&#xA; }&#xA;&#xA; public Object getTruckTransStats(Object truckVisitDetail)&#xA;{&#xA;   try{&#xA;       //1.Truck Id&#xA;      def tvdTruckId = truckVisitDetail != null ? truckVisitDetail.tvdtlsTruckId : &quot;NO ID&quot;;&#xA;      def gvyEventUtil = inj.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;&#xA;      def turnTime = getTruckerTurnTime(truckVisitDetail)&#xA;&#xA;       //Instantiates one Row Entry&#xA;       mapTrckTrans = new HashMap();&#xA;&#xA;       //IGT Variables&#xA;       def transType = null; def gateAction = null; def atime = null; &#xA;       def aDate = null; def truckCmpyId = null;&#xA;       def cntrNbr = null;&#xA;&#xA;       //OGT Variables &#xA;       def transTypeOgt = null; def gateActionOgt = null; def atimeOgt = null; &#xA;       def aDateOgt = null; def cntrNbrOgt = null;&#xA;&#xA;      //Truck Transaction Per Truck Visit    &#xA;      def listTruckTrans = truckVisitDetail.getTvdtlsTruckTrans()&#xA;      for(aTruckTrans in listTruckTrans)&#xA;     {&#xA;         truckCmpyId = aTruckTrans.getTranTrkcId()&#xA;&#xA;          FreightKindEnum freightKind = aTruckTrans.getTranCtrFreightKind();&#xA;&#xA;         //Get Transaction Type IGT/OGT&#xA;         TranSubTypeEnum tranType = aTruckTrans.getTranSubType();&#xA;          if(TranSubTypeEnum.RE.equals(tranType) || TranSubTypeEnum.RI.equals(tranType) || TranSubTypeEnum.RM.equals(tranType))&#xA;          {&#xA;              //Action,TrckCmpyId,CntrNbr,transactionType,date,time&#xA;              gateAction = &quot;IGATE&quot;;&#xA;             cntrNbr = aTruckTrans.getTranCtrNbr() &#xA;             transType = FreightKindEnum.MTY.equals(freightKind) ? &quot;EMPTY&quot; : &quot;LOAD&quot;&#xA;             atime = gvyEventUtil.formatTime(aTruckTrans.getTranCreated(), ContextHelper.getThreadUserTimezone());&#xA;             aDate = gvyEventUtil.formatDate(aTruckTrans.getTranCreated(), ContextHelper.getThreadUserTimezone());&#xA;&#xA;         }else if(TranSubTypeEnum.DE.equals(tranType) || TranSubTypeEnum.DI.equals(tranType) || TranSubTypeEnum.DM.equals(tranType)){&#xA;              gateActionOgt = &quot;OGATE&quot;;&#xA;              cntrNbrOgt = aTruckTrans.getTranCtrNbr()&#xA;              transTypeOgt = FreightKindEnum.MTY.equals(freightKind) ? &quot;EMPTY&quot; : &quot;LOAD&quot;&#xA;             atimeOgt = gvyEventUtil.formatTime(aTruckTrans.getTranChanged(), ContextHelper.getThreadUserTimezone());&#xA;             aDateOgt = gvyEventUtil.formatDate(aTruckTrans.getTranChanged(), ContextHelper.getThreadUserTimezone());&#x9;        }&#xA;&#xA;      }//For Ends&#xA;       boolean iGate = false;  boolean oGate = false;&#xA;      //Add hasmap values&#xA;      mapTrckTrans.put(&quot;truckingCompanyId&quot;, truckCmpyId)&#xA;      &#xA;       if(gateAction.equals(&quot;IGATE&quot;) &amp;&amp; cntrNbr != null){&#xA;           iGate = true&#xA;           mapTrckTrans.put(&quot;truckId&quot;, tvdTruckId)&#xA;           mapTrckTrans.put(&quot;transaction&quot;, transType)&#xA;           mapTrckTrans.put(&quot;action&quot;, gateAction)&#xA;           mapTrckTrans.put(&quot;unitNbr&quot;, cntrNbr)&#xA;           mapTrckTrans.put(&quot;truckAtime&quot;, atime)&#xA;           mapTrckTrans.put(&quot;truckADate&quot;, aDate) &#xA;       }&#xA;&#xA;     if(gateActionOgt.equals(&quot;OGATE&quot;) &amp;&amp; cntrNbrOgt != null){&#xA;           oGate = true   &#xA;           mapTrckTrans.put(&quot;unitNbrOgt&quot;,cntrNbrOgt)&#xA;           mapTrckTrans.put(&quot;transactionOgt&quot;,transTypeOgt)&#xA;           mapTrckTrans.put(&quot;truckIdOgt&quot;,tvdTruckId)&#xA;           mapTrckTrans.put(&quot;actionOgt&quot;,gateActionOgt)&#xA;           mapTrckTrans.put(&quot;aDateOgt&quot;,aDateOgt)&#xA;           mapTrckTrans.put(&quot;aTimeOgt&quot;,atimeOgt) &#xA;       }&#xA;&#xA;       if((iGate &amp;&amp; oGate)|| (iGate &amp;&amp; cntrNbr != null)){&#xA;           mapTrckTrans.put(&quot;turntime&quot;, turnTime)&#xA;       }else if(oGate &amp;&amp; cntrNbrOgt != null){&#xA;           mapTrckTrans.put(&quot;turntimeOgt&quot;, turnTime)         &#xA;       }&#xA;     &#xA;       println(&quot;tvdTruckId: &quot;+tvdTruckId+&quot; truckCmpyId :&quot;+truckCmpyId+&quot;  cntrNbr:&quot;+cntrNbr+&quot; transType ::&quot;+transType+&quot; gateAction ::&quot;+gateAction+&quot;  gateActionOgt:&quot;+gateActionOgt+&quot;  cntrNbrOgt:&quot;+cntrNbrOgt+&quot;   transTypeOgt:&quot;+transTypeOgt+&quot;  atimeOgt:&quot;+atimeOgt+&quot; aDateOgt:&quot;+aDateOgt+&quot; iGate:&quot;+iGate+&quot;  oGate:&quot;+iGate+&quot;  turntime: &quot;+turnTime )&#xA;       if(iGate &amp;&amp; truckCmpyId != null || oGate &amp;&amp; truckCmpyId != null){&#xA;          unitList.add(mapTrckTrans)&#xA;       }&#xA;&#xA;   }catch(Exception e){&#xA;       e.printStackTrace();&#xA;   }&#xA; }&#xA; &#xA; &#xA; public Long getTruckerTurnTime(TruckVisitDetails truckVisitDetail)&#xA; {&#xA;     Long turnTimeInMin = 0;&#xA;   try{&#xA;      TruckVisitStats truckVisitStats = new TruckVisitStats()&#xA;      TruckVisitStats unitTvstats = truckVisitStats.findOrCreateTruckVisitStats(truckVisitDetail)&#xA;      Long turnTimeInMillis = unitTvstats.getTvstatTurnTime()&#xA;      turnTimeInMin = turnTimeInMillis == null ? 0 : ( turnTimeInMillis &lt; 60000 ? 0 : turnTimeInMillis/60000) &#xA;      //println(&quot;unitTvstats ::&quot;+unitTvstats+&quot; turnTimeInMillis ::&quot;+turnTimeInMillis+&quot;  turnTimeInMin::&quot;+turnTimeInMin)&#xA;&#xA;     }catch(Exception e){&#xA;         e.printStackTrace()&#xA;     }&#xA;     return turnTimeInMin&#xA;  }&#xA;&#xA;}//Class Ends" />
<digital-asset id="KulanaProcessor" short-description="KulanaProcessor" is-pre-deployed="N" groovy-code="/*&#xA;* Sr  doer  date      Change&#xA;* A1 GR    09/07/10   Update emailSender class method&#xA;* A2 GR    09/20/10   i)Add UserId to report ii)Add user email from the list&#xA;* 08/16/11 2.1 Updated Email Method&#xA;* A3 GR    11/01/11   Handled Null Pointer Exception &#xA;* A4 PS&#x9;&#x9;12/5/11  Kulana/RFID&#xA;* A5 PS  03/15/12  Removed change made in A3&#xA;* A6 GR  04/04/12  Added change to set and unset flag for multiple posting&#xA;*/&#xA;import com.navis.inventory.business.units.UnitEquipDamages;&#xA;import com.navis.inventory.business.units.UnitEquipDamageItem;&#xA;&#xA;import com.navis.argo.business.reference.EqComponent;&#xA;import com.navis.argo.business.reference.EquipDamageType;&#xA;import com.navis.argo.business.reference.Equipment;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.argo.business.security.ArgoUser;&#xA;&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.security.business.user.BaseUser&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.services.business.event.GroovyEvent&#xA;&#xA;&#xA;&#xA;&#xA;public class KulanaProcessor extends GroovyInjectionBase&#xA;{&#xA; &#xA;  def emailSender = null; &#xA;  def unitId = null;&#xA;  String emailfrom = &quot;matsonsupport@nowsol.com&quot;;  //A1&#xA;  String emailTo = getEmailId(); &#xA;  //String emailfrom = &quot;1aktosdevteam@matson.com&quot;;  //A1&#xA;  //String emailTo = &quot;1aktosdevteam@matson.com&quot;; &#xA;  private static final String eol = &quot;\r\n&quot;;&#xA;&#xA;&#xA;  public void process(Object event)&#xA;  {&#xA;   def gvyInj = null;&#xA;   try&#xA;   {&#xA;     def unit = event.getEntity();&#xA;     gvyInj = new GroovyInjectionBase();&#xA;&#xA;&#x9; if(!event.event.evntAppliedBy.startsWith('snx')){&#xA;       unit.setFieldValue(&quot;unitFlexString06&quot;,&quot;N&quot;); &#xA;     }&#xA;     &#xA;&#x9; String strDate = ContextHelper.formatTimestamp(event.getEvent().getEventTime(), ContextHelper.getThreadUserTimezone()) &#xA;     unitId = unit.unitId;&#xA;     unitId = unitId.replace('$','');&#xA;&#xA;      def now = unit.getFieldValue(&quot;unitFlexString11&quot;)&#xA;      if(!'NOW'.equals(now)){&#xA;&#x9;&#x9;  return; //IF NOT NOW then DOnt Process Request&#xA;      }&#xA;&#xA;&#x9;  def yardLocation = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString03&quot;)&#xA;      def cntrNbr = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString04&quot;)&#xA;&#x9;  def rptDateTime = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate04&quot;)&#xA;      String rptDate =  ContextHelper.formatTimestamp(rptDateTime, ContextHelper.getThreadUserTimezone())&#xA;      def notes = unit.getUnitRemark(); &#xA;&#xA;&#x9;  //A2 - Add user EmailId&#xA;   &#x9;  //BaseUser baseUser = new BaseUser()&#xA;&#x9;  def doer = event.event.evntAppliedBy&#xA;&#x9;  int indx = doer.indexOf(&quot;:&quot;);&#xA;      doer = doer.substring(indx+1);&#xA;&#x9;  BaseUser user = BaseUser.findBaseUser(doer)&#xA;      String userId = null;  String userEmailId = null;&#xA;&#x9;  if(user != null){&#xA;&#x9;    userId = user.getBuserFirstName() +&quot; &quot;+ user.getBuserLastName();&#xA;&#x9;    userEmailId = user.getBuserEMail();   &#xA;&#x9;&#x9;userEmailId = userEmailId == null ? emailfrom : userEmailId&#xA;&#x9;  }else{&#xA;&#x9;&#x9;  userId = &quot;&quot;;&#xA;&#x9;&#x9;  userEmailId = emailfrom&#xA;      }&#xA;&#x9;  &#xA;&#xA;&#x9;  StringBuffer buf = new StringBuffer();&#xA;          buf.append(eol);&#xA;          buf.append(&quot;                    NOW Vehicle Trouble                Date:&quot;+strDate+eol);&#xA;&#x9;  buf.append(&quot;                Matson Navigation Honolulu, Hawaii                &quot;+eol);&#xA;&#x9;  buf.append(&quot;----------------------------------------------------------------------------&quot;);&#xA;&#x9;  buf.append(eol);&#xA;  &#x9;  buf.append(eol);&#xA;&#x9;  buf.append(&quot;Vehicle ID         : &quot;+unitId);&#xA;&#x9;  buf.append(eol);&#xA;&#x9;  buf.append(&quot;Container Nbr      : &quot;+cntrNbr);&#xA;&#x9;  buf.append(eol);&#xA;&#x9;  buf.append(&quot;Yard Location      : &quot;+yardLocation);&#xA;&#x9;  buf.append(eol);&#xA;&#x9;  buf.append(&quot;Reported Date Time : &quot;+rptDate);&#xA;&#x9;  buf.append(eol);&#xA;&#x9;  buf.append(&quot;Notes              : &quot;+notes);&#xA;&#x9;  buf.append(eol);&#xA;&#x9;  buf.append(&quot;Reported By        : &quot;+userId);&#xA;&#x9;  buf.append(eol); buf.append(eol); buf.append(eol);&#xA;&#x9;  buf.append(eol); buf.append(eol); buf.append(eol);&#xA;      &#xA;      //A2&#xA;      emailfrom = userEmailId != null &amp;&amp; userEmailId.trim().length() &gt; 0 ? userEmailId.trim() : emailfrom;&#xA;      emailSender = emailSender != null ? emailSender : gvyInj.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;      emailSender.custSendEmail(emailfrom, emailTo.trim(), 'Vehicle Trouble Report: '+unitId , buf.toString()) //A1&#xA;&#xA;&#xA;/*     HashMap parameters = new HashMap();&#xA;    &#xA;&#x9; parameters.put('Date',strDate);&#xA;&#x9; parameters.put('vehicleId', unitId);&#xA;&#x9; parameters.put('cntrNbr', cntrNbr)&#xA;&#x9; parameters.put('location',yardLocation);&#xA;&#x9; parameters.put('reportedDtTime', rptDate);&#xA;&#x9; parameters.put('now', now);&#xA;     parameters.put('notes', notes)&#xA;&#xA;&#xA;     //Create and Mail Report &#xA;&#x9; ArrayList arrList = new ArrayList() //Empty List&#xA;     JRDataSource ds = new JRMapCollectionDataSource(arrList);&#xA;     def reportRunner = gvyInj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;     reportRunner.emailReport(ds, parameters, &quot;NOW VEHICLE TROUBLE REPORT&quot;, emailTo, 'Vehicle Trouble Report: '+unitId ,'Vehicle Trouble Report: '+unitId+'\n\n\nPlease Find Attached a PDF copy of the Vehicle Trouble Report'  );&#xA;*/&#xA;    }catch(Exception e){&#xA;&#x9;  e.printStackTrace();&#xA;      //Email Code Here&#xA;&#x9;   emailSender = emailSender != null ? emailSender : gvyInj.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;       emailSender.custSendEmail(emailTo, &quot;Kulana Error : Unit=&quot;+unitId+&quot; Message Processing Error &quot;, e.getMessage());&#xA;&#x9;}&#xA;  }//Method Ends&#xA;&#xA;&#x9;//Kulana update from RFID&#xA;   public String execute(Map inParameters) {&#xA;     try{&#xA;          //1. fetch data from the xml &#xA;          def recorder = (String) inParameters.get(&quot;recorder&quot;);&#xA;          def unitNbr = (String) inParameters.get(&quot;unitNbr&quot;);&#xA;&#x9;&#x9;  def unitRemark = (String) inParameters.get(&quot;notes&quot;);&#xA;&#x9;&#x9;  unitRemark = unitRemark == null ? '' : &quot; &quot;+unitRemark&#xA;          def blnFlag = false;&#xA;          &#xA;&#x9;  &#xA;&#x9;  //2. set N4 values &#xA;&#x9;   def complex = ContextHelper.getThreadComplex();&#xA;&#x9;   def unitFinder = (UnitFinder)Roastery.getBean(&quot;unitFinder&quot;);&#xA;&#x9;   def chsproc = getGroovyClassInstance(&quot;NowToN4ChasMessageProcessor&quot;)&#xA;&#x9;   def unitObj = chsproc.findActiveUeUsingEquipmentInAnyRole(&quot;\$&quot;+unitNbr,complex,unitFinder);&#xA;&#x9;   def flgValue = unitObj.getFieldValue(&quot;unitFlexString06&quot;); &#xA;       if(flgValue == null || &quot;N&quot;.equals(flgValue)){&#xA;&#x9;&#x9;   unitObj.setFieldValue(&quot;unitFlexString06&quot;,&quot;Y&quot;); &#xA;&#x9;&#x9;   blnFlag = true&#xA;&#x9;   }&#xA;       if(blnFlag){&#xA;  &#x9;    unitObj.setFieldValue(&quot;unitFlexString11&quot;, &quot;SHOP&quot;);&#xA;&#x9;&#x9;def tempNotes = unitObj.getFieldValue(&quot;unitRemark&quot;);&#xA;&#x9;&#x9;tempNotes = (tempNotes == null ? '' : tempNotes)+unitRemark&#xA;        unitObj.setFieldValue(&quot;unitRemark&quot;, tempNotes);&#xA;        def ufv = unitObj.unitActiveUfv&#xA;&#x9;    ufv.setFieldValue(&quot;ufvFlexDate04&quot;, new Date());&#xA;&#x9;    //3. Generate an Event &#xA;&#x9;    def event = new GroovyEvent( null, unitObj);&#xA;&#x9;    event.postNewEvent( &quot;ASSIGN VEHICLE&quot;, &quot;Kulana Automated Now Assignment&quot;);&#xA;&#x9;   }&#xA;&#xA;&#xA;     }catch(Exception e){&#xA;        e.printStackTrace();  &#xA;     }&#xA;  }&#xA;  &#xA;  public boolean isValueSet(Object unit){&#xA;  }&#x9;   &#xA;&#xA; public String getEmailId(){&#xA;&#xA;&#x9; String emailId = getReferenceValue(&quot;KULANA&quot;, &quot;KULANA&quot;, null, null, 1)  //A16&#xA;     if(emailId == null){ return &quot;1aktosdevteam@matson.com&quot; }&#xA;     return emailId&#xA; }&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyCancelTroubleJob" short-description="GvyCancelTroubleJob" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.road.RoadField;&#xA;&#xA;&#xA;/*&#xA;* Get a list of all the Trouble Gate transactions and close them&#xA;*/&#xA;class GvyCancelTroubleJob  extends GroovyInjectionBase  {&#xA;   public String execute(Map inParameters) {&#xA;&#xA;        def gvyBaseClass = new GroovyInjectionBase()&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(&quot;TruckTransaction&quot;);&#xA;&#x9;&#x9;&#xA;        dq.addDqPredicate(PredicateFactory.eq(RoadField.TRAN_STATUS,&quot;TROUBLE&quot; ));     &#xA;        def list = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;        def iter = list.iterator();&#xA;        &#xA;        gvyBaseClass.log(&quot;Cancel &quot;+list.size()+&quot; transactions&quot;);&#xA;        while(iter.hasNext()) {&#xA;           def tran = iter.next();&#xA;           try {&#xA;           &#x9;tran.cancelTransaction();&#xA;           } catch (Exception e) {&#xA;                     e.printStackTrace();&#xA;           }&#xA;        }&#xA;&#xA;    }&#xA;}" />
<digital-asset id="GvyCmisMostHazardousItem" short-description="GvyCmisMostHazardousItem" is-pre-deployed="N" groovy-code="/*&#xA;* Srno  Doer  Date       comment&#xA;* A1    GR    07/15/10   Added Method process Haz messages xml output&#xA;* A2    GR    09/08/10   Added flex01 back to the xml message &#xA;* A3    GR    10/24/10   Fix : Kel found HazF not being set &#xA;* A4    GR    01/11/10   HAZ Proper Name check to set REG  correclty&#xA;                         Comment out Sending EDT to Cmis Gems &#xA;*/&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.services.business.event.EventFieldChange&#xA;import com.navis.inventory.business.imdg.ImdgClass&#xA;import com.navis.inventory.business.imdg.HazardItem;&#xA;import com.navis.inventory.business.imdg.Hazards;&#xA;import com.navis.framework.business.Roastery&#xA;&#xA;public class GvyCmisMostHazardousItem&#xA;{&#xA;&#xA; public boolean isMostHazardousItem(Object event){&#xA;      def isMostHaz = false&#xA;  try{&#xA;       def unit = event.getEntity()&#xA;       def mostHazItem = unit.getUnitGoods().getGoodsMostSevereHazardClass()&#xA;&#xA;     def currItem = getHazardousItem(event)&#xA;     def currHzrdiImdg  = currItem != null ? currItem : ''&#xA;     if(currHzrdiImdg.equals(mostHazItem)) {&#xA;          isMostHaz = true&#xA;       }&#xA;  }catch(Exception e){&#xA;        e.printStackTrace()&#xA;  }&#xA;   return isMostHaz&#xA; }&#xA;&#xA; public String getHazardousItem(Object event){&#xA;&#xA;  def hazImdg = ''&#xA;  def hazUnNum = ''&#xA;  def prev  = ''&#xA;  def gvyEventObj = event.getEvent()&#x9;&#xA;  def eventType =  gvyEventObj.getEventTypeId() &#xA;  def unit = event.getEntity()&#xA;  def eventNotes = gvyEventObj.getEventNote() &#xA;   &#xA;  try&#xA;  {&#x9;  &#xA;   Set changes =  gvyEventObj.getFieldChanges()&#xA;   Iterator iterator = changes.iterator();&#xA;   while(iterator.hasNext()) &#xA;   { &#xA;     EventFieldChange fieldChange = (EventFieldChange)iterator.next();&#xA;     String fieldName = fieldChange.getMetafieldId()&#xA;     MetafieldId mfId =  MetafieldIdFactory.valueOf(fieldName);&#xA;     if(eventType.equals('UNIT_HAZARDS_INSERT')){&#xA;        prev = ArgoUtils.getPropertyValueAsUiString(mfId, fieldChange.getEvntfcNewVal());&#xA;    }else if(eventType.equals('UNIT_HAZARDS_UPDATE')){&#xA;        if(eventNotes != null){&#xA;          def startIndex = eventNotes.indexOf(&quot;[&quot;) != -1 ? eventNotes.indexOf(&quot;[&quot;) : 0&#xA;          def endIndex = eventNotes.indexOf(&quot;]&quot;) != -1 ? eventNotes.indexOf(&quot;]&quot;) : 0&#xA;          def updtImdg = eventNotes.substring(startIndex+1,endIndex)&#xA;          return updtImdg&#xA;        }&#xA;    } &#xA;     if (prev != null){&#xA;       if(fieldName.equals(&quot;hzrdiImdgClass&quot;)){ &#xA;          String [] imdg  = prev.split(&quot; &quot;) &#xA;          hazImdg = imdg != null ? imdg[0] : ''       &#xA;          hazImdg = hazImdg.equals('Unknown') ? 'HAZ' : hazImdg&#xA;       }&#xA;       else if(fieldName.equals(&quot;hzrdiUNnum&quot;)){&#xA;          hazUnNum = prev        &#xA;       }&#xA;     }&#xA;   }&#xA;    }catch(Exception e){&#xA;         e.printStackTrace();&#xA;    }&#xA;  return hazImdg&#xA; }//Method Ends&#xA;&#xA;&#xA;  //Method to write out Haz Messages &#xA;  public void processMostHazItem(Object xmlGvyString, Object gvyEventUtil,Object api, Object event)&#xA;  {&#xA;&#xA;  def gvyShipDetail = api.getGroovyClassInstance(&quot;GvyCmisShipmentDetail&quot;);&#xA;  def gvyCmisUtil = api.getGroovyClassInstance(&quot;GvyCmisUtil&quot;); &#xA;  def gvyEventObj = event.getEvent()&#xA;  def eventType =  gvyEventObj.getEventTypeId() &#xA;  def unit = event.getEntity()&#xA;  def action = 'HZU';&#xA;&#xA;   //HAZF&#xA;   def isHazardous=unit.getFieldValue(&quot;unitGoods.gdsIsHazardous&quot;)&#xA;   isHazardous = isHazardous == true ? 'Y' : null &#xA;   try{&#xA;&#xA;    def hazItem = gvyShipDetail.getMostHazItem(unit)&#xA;   //HAZ IMDG&#xA;   def mostHazItem =  hazItem != null ? hazItem.hzrdiImdgClass.key : null&#xA;   mostHazItem = mostHazItem != null  ? mostHazItem : null&#xA;&#xA;   //HAZ Proper Name A4&#xA;   def properName = hazItem != null ? hazItem.hzrdiProperName : ''&#xA;   properName = properName != null ? properName : '' &#xA;&#xA;   //HazDesc&#xA;   def hazardItemDesc = hazItem != null ? hazItem.getDescription() : null&#xA;   if(hazardItemDesc != null){&#xA;      hazardItemDesc = hazardItemDesc.indexOf(' ') != -1 ? hazardItemDesc.substring(hazardItemDesc.indexOf(' ')+1) : null &#xA;   }&#xA;   if(!eventType.equals('UNIT_HAZARDS_DELETE') &amp;&amp; (mostHazItem == null || hazardItemDesc == null || mostHazItem.equals('X') || hazardItemDesc.contains('Unknown'))){&#xA;&#x9;   return;&#xA;   }&#xA;&#xA;   //HAZ UNNUM&#xA;   def mostHazNum = hazItem != null ? hazItem.hzrdiUNnum : null&#xA;&#xA;   //HAZ NBR Type&#xA;   def hzrdItemNbrType = hazItem != null ? hazItem.hzrdiNbrType.key : null&#xA;&#xA;   //HazReg  //A4&#xA;   def hazardItemRegs = hazardItemDesc != null &amp;&amp; (hazardItemDesc.contains('Liquid') || properName.contains('Liquid') || properName.contains('LIQUID')) ? 'DOT' : 'IMO'&#xA;&#xA;       Set changes =  gvyEventObj.getFieldChanges()&#xA;       Iterator iterator = changes.iterator();&#xA;       def prev  = ''&#xA;       while(iterator.hasNext()) &#xA;       {&#xA;        EventFieldChange fieldChange = (EventFieldChange)iterator.next();&#xA;        String fieldName = fieldChange.getMetafieldId()&#xA;        MetafieldId mfId =  MetafieldIdFactory.valueOf(fieldName);&#xA;        if(eventType.equals('UNIT_HAZARDS_INSERT') || eventType.equals('UNIT_HAZARDS_UPDATE')){&#xA;         prev = ArgoUtils.getPropertyValueAsUiString(mfId, fieldChange.getEvntfcNewVal());&#xA;        }else{&#xA;          prev = ArgoUtils.getPropertyValueAsUiString(mfId, fieldChange.getEvntfcPrevVal()); &#xA;        } &#xA;&#xA;        if (prev != null){&#xA;         if(fieldName.equals(&quot;hzrdiImdgClass&quot;)){ &#xA;          mostHazItem = prev.substring(0,prev.indexOf(' '));&#xA;          hazardItemDesc = prev.indexOf(' ') != -1 ? prev.substring(prev.indexOf(' ')+1) : null &#xA;&#x9;&#x9;  hazardItemRegs = hazardItemDesc != null ? (hazardItemDesc.contains('Liquid') || properName.contains('Liquid') || properName.contains('LIQUID')) ? 'DOT' : 'IMO' : null&#xA;         }&#xA;         else if(fieldName.equals(&quot;hzrdiUNnum&quot;)){&#xA;           mostHazNum = prev&#xA;&#x9;&#x9;   hzrdItemNbrType = 'UN'&#xA;        }//Else If Ends &#xA;       }//IF Ends&#xA;     }//While&#xA;&#xA;&#xA;   xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;flex01=&quot;,hzrdItemNbrType)&#xA;   xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;hazF=&quot;,isHazardous)&#xA;   xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;hazImdg=&quot;,mostHazItem)&#xA;   xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;hazUnNum=&quot;,mostHazNum)&#x9;   &#xA;   xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;hazDesc=&quot;,hazardItemDesc)&#xA;   xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;hazRegs=&quot;,hazardItemRegs) &#xA;&#xA;   if(eventType.equals('UNIT_HAZARDS_DELETE')){  action='HZD'  }&#xA;&#xA;   gvyCmisUtil.postMsgForAction(xmlGvyString,api,action)&#xA;   //A4 - gvyCmisUtil.postMsgForAction(xmlGvyString,api,'null')&#xA;    &#xA;   // Also Check how the Ingate is calling the HAZ messages creation&#xA;   }catch(Exception e){&#xA;&#x9;  e.printStackTrace();&#xA;   }&#xA;  }//Method Ends &#xA;&#xA;}//Class Ends &#xA;" />
<digital-asset id="CustomPrintImportDocument" short-description="CustomPrintImportDocument" is-pre-deployed="N" groovy-code="/*&#xA;&#xA;Groovy code called from the out gate to print an extra DEL IMPORT document if&#xA;the consignee is TARGET* deliver import.&#xA;&#xA;1/27/2009  SKB  Fixed null pointer exception if no consignee&#xA;4/09/2009  CNB  Fixed the backwards null/continue&#xA;10/19/2009 GR   unitNbr Null Check&#xA;03/11/2010 GR   Navis Code Optimization&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.road.business.adaptor.document.PrintDocument&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.road.business.atoms.TranSubTypeEnum&#xA;import com.navis.road.business.model.TruckTransaction&#xA;&#xA;public class CustomPrintImportDocument extends GroovyInjectionBase&#xA;{&#xA;    public void execute(inDao, api)&#xA;    {&#xA;&#x9;def transactions = (Set&lt;TruckTransaction&gt;) inDao.tv.tvdtlsTruckTrans&#xA;&#x9;&#xA;&#x9;for (transaction in transactions) {&#xA;            if (transaction.tranSubType in [TranSubTypeEnum.DI]) {&#xA;&#x9;&#x9;def unit = transaction.getTranUnit()&#xA;&#xA;&#x9;&#x9;if(unit == null) continue&#xA;&#xA;                // Filter for consignee == TARGET*&#xA;                def consignee = unit.getFieldValue(&quot;unitGoods.gdsConsigneeAsString&quot;);&#xA;                if (consignee != null &amp;&amp; consignee.startsWith('TARGET')) {&#xA;                    // Set the doc type id&#xA;                    def docTypeId = &quot;DEL IMPORT&quot;&#xA;                    inDao.put(&quot;docTypeId&quot;, docTypeId)&#xA;&#xA;                    // Print the document&#xA;                    (new PrintDocument()).execute(inDao)&#xA;                    log('TARGET PRINT x2')&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}" />
<digital-asset id="RejectTruckingCompanyNoLineAgreementGroovy" short-description="RejectTruckingCompanyNoLineAgreementGroovy" is-pre-deployed="N" groovy-code="import com.navis.argo.business.reference.Group&#xA;import com.navis.inventory.business.units.Routing&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.road.business.adaptor.truckingcompany.RejectTruckingCompanyNoLineAgreement&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import java.util.ArrayList&#xA; &#xA;public class RejectTruckingCompanyNoLineAgreementGroovy extends RejectTruckingCompanyNoLineAgreement {&#xA;    public void execute(TransactionAndVisitHolder dao, api) {&#xA;        Unit unit = dao.getTran().getTranUnit();&#xA;        String groupId = getGroupId(unit);&#xA; &#xA;        if (!GROUP_IDS.contains(groupId)) {&#xA;            execute(dao);&#xA;        }&#xA; &#xA;    }&#xA; &#xA;    private String getGroupId(Unit unit) {&#xA;        Routing routing = unit.getUnitRouting();&#xA;        if (routing == null) {&#xA;            return null;&#xA;        }&#xA; &#xA;        Group group = routing.getRtgGroup();&#xA;        if (group == null) {&#xA;            return null;&#xA;        }&#xA; &#xA;        return group.getGrpId();&#xA;    }&#xA; &#xA;    private static final ArrayList GROUP_IDS = [&quot;YB&quot;,&quot;XFER-SI&quot;,&quot;XFER-WO&quot;,&quot;XFER-P2&quot;];&#xA;}&#xA;" />
<digital-asset id="GvyInjNLTProcess" short-description="GvyInjNLTProcess" is-pre-deployed="N" groovy-code="/*&#xA;*  SrNo  doer  date        Change&#xA;*  A1    GR    06/07/2010  Added Attached EQ date to cntr chassis equipment.&#xA;*  A2    GR    06/29/2010  Attached EQ date to Bare Cntr Equipment&#xA;*  A3    GR    10/27/10    Update Unit Activate Message&#xA;*  A4    GR    10/13/11    TOS2.1 Change Departed to Retire   &#xA;*/&#xA;import com.navis.inventory.business.api.UnitManager;&#xA;import com.navis.inventory.business.api.RectifyParms;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.business.api.UnitFinder;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import com.navis.inventory.business.atoms.EqUnitRoleEnum;&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;/*&#xA;* Class Departs all the UFV Units and sets the Master Visit State Departed &#xA;*/&#xA;public class GvyInjNLTProcess &#xA;{&#xA;      def ibCarrier = ''&#xA;      def obCarrier = ''&#xA;      def inUnit = null&#xA;      def complex = null&#xA;      def inEquipment = null &#xA;      def injBase = null&#xA;      def unitFinder = null&#xA;&#x9;  def equiClass = null&#xA;      def unitId = &quot;&quot;  &#xA;      &#xA;&#xA;   //Method Set all the Complex Level Active units to Departed &#xA;   public String processNLT(Object unit)&#xA;  {&#xA;     com.navis.argo.ContextHelper.setThreadExternalUser(&quot;jms&quot;);&#xA;     try&#xA;    {&#xA;&#xA;      //Processing One unit at a time &#xA;      unitId = unit.getFieldValue(&quot;unitId&quot;);&#xA;      def carriage = unit.getFieldValue(&quot;unitCarriageUe.ueEquipment.eqIdFull&quot;)&#xA;&#x9;  &#xA;     // EQUIP CLASS   &#xA;     equiClass =unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;     equiClass = equiClass != null ? equiClass.getKey() : ''&#xA;&#xA;     def transitState=unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;     transitState = transitState != null ? transitState.getKey() : ''&#xA;&#xA;     ibCarrier =  unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;); &#xA;     obCarrier = unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;) &#xA;&#xA;     //Accessory &#xA;&#x9; def unitAccessory = unit.getUnitAcryEquipIds()&#xA;     def chassiAccessory = unit.getUnitCtrAccessory()&#xA;     chassiAccessory = chassiAccessory != null ? chassiAccessory : '' &#xA;     def accessory = unitAccessory == null ? chassiAccessory : ''&#xA;&#x9;&#xA;     injBase = new GroovyInjectionBase() &#xA;     unitFinder = injBase.getUnitFinder()&#xA;     complex = ContextHelper.getThreadComplex();&#x9;   &#xA;&#xA;    /* Case1 : If Accessory is Attached to Primary Unit Chassis&#xA;       - Swipe &amp; Depart accessory at a complex level if attached to active unit(chassis)&#xA;&#x9;   Case2 : If Accessory/Chassis is Attached to Primary Unit Container&#xA;       - Swipe &amp; Depart accessory/Chassis at a complex level if attached to active unit(Container)&#xA;&#x9;   Case3 : If Accessory/Chassis/Conatiner is Primary unit &#xA;       -- Swipe &amp; Depart Primary unit a Complex level so that NLT can Bring in the unit.&#xA;&#x9;*/&#xA;    if(transitState.equals('S10_ADVISED') &amp;&amp; chassiAccessory !=null &amp;&amp; equiClass.equals('CHASSIS')){&#xA;&#x9;   swipeAttachAccessory(chassiAccessory)  &#xA;&#xA;&#x9;   //Depart Active ufv entires for Accessory&#xA;       processUnit(chassiAccessory)   &#xA;    }&#xA;     //Primary=Container and secondary=chassis (check if chassis is attached to an active unit)&#xA;    if(transitState.equals('S10_ADVISED') &amp;&amp; carriage !=null &amp;&amp; equiClass.equals('CONTAINER')){&#xA;&#xA;       //swipe &amp; Depart accessory if attached to active unit&#xA;       if(unitAccessory != null){&#xA;&#x9;&#x9;  swipeAttachAccessory(unitAccessory)  &#xA;          processUnit(unitAccessory)    &#xA;       }&#xA;&#x9;   &#xA;       //swipe chassis if attached to active unit   &#xA;       swipeAttachChassis(carriage) &#xA;&#xA;       //Depart Active ufv entires for chassis&#xA;       processUnit(carriage)   &#xA;    }&#xA;    //IF Accessory or Chassis or Container as Primary Unit&#xA;    if(transitState.equals('S10_ADVISED')){&#xA;        //Chassis to Check if it is associated with another unit.&#xA;        &#xA;        if(equiClass.equals('ACCESSORY')){&#xA;            swipeAttachAccessory(unitId)  &#xA;        }&#xA;        if(equiClass.equals('CHASSIS')){&#xA;            swipeAttachChassis(unitId)  &#xA;        }&#xA;        //Depart Active ufv entires&#xA;        processUnit(unitId)   &#xA;&#xA;        //Set Advised Unit to Active&#xA;        setAdviseUnitToActive(injBase, unit)&#xA;      }else{&#xA;         println(&quot;Did Not Process as unit is not Advised :&quot;+unitId+&quot; Tstate:&quot;+transitState)&#xA;     }&#xA;&#xA;     }catch(Exception e){&#xA;       e.printStackTrace()&#xA;    }&#xA;&#xA;  }//Method execute Ends&#xA;&#xA;   public void processUnit(String unitId)&#xA;   {&#xA;      Set ufvSet = null&#xA;      try&#xA;      {&#xA;        ufvSet = findVisitStateActiveUnit(unitId)&#xA;        def ufvSize = ufvSet!= null ? ufvSet.size() : 0&#xA;&#xA;        //Check for Multiple ufv in Active state: Depart the Active unit First&#xA;        if(ufvSize &gt; 1){&#xA;             for(aUfvDept in ufvSet){&#xA;               if (UnitVisitStateEnum.ACTIVE.equals(aUfvDept.getUfvVisitState())) {&#xA;                  RectifyParms rparms = new RectifyParms();&#xA;                  rparms.setUfvTransitState(UfvTransitStateEnum.S99_RETIRED);&#xA;                  rparms.setUnitVisitState(UnitVisitStateEnum.RETIRED)&#xA;                  aUfvDept.rectify(rparms);&#xA;                }&#xA;             }//for Ends&#xA;         }//If Ends&#xA;&#xA;         //Condition to depart Active Ufv entries at a complex level.&#xA;         for(aUfv in ufvSet)&#xA;         {&#xA;             def ufvIbCarrier = aUfv.getUfvActualIbCv() != null ? aUfv.getUfvActualIbCv().getCvId() : &quot;&quot;;&#xA;             def ufvObCarrier = aUfv.getUfvIntendedObCv() != null ? aUfv.getUfvIntendedObCv().getCvId() : &quot;&quot;;  &#xA;&#xA;          //If is unit Departed and File IB and OB carrier is same as N4 then Delete unit&#xA;          // Added this Code to stop creating Multiple units Entries on the NLT if same NLT is executed twice.&#xA;          // If Blank OB in the NLT file then the Delete Check is passed&#xA;         &#xA;          if(ibCarrier.equals(ufvIbCarrier) &amp;&amp; obCarrier.equals(ufvObCarrier)){&#xA;             Unit myUnit = inUnit&#xA;               if(myUnit != null){&#xA;                  UnitManager unitManager = (UnitManager) Roastery.getBean(UnitManager.BEAN_ID)&#xA;                  unitManager.purgeUnit(myUnit)&#xA;               }&#xA;           }&#xA;          else  if (!UnitVisitStateEnum.DEPARTED.equals(aUfv.getUfvVisitState()) || UnitVisitStateEnum.DEPARTED.equals(aUfv.getUfvVisitState())) {&#xA;               RectifyParms rparms = new RectifyParms();&#xA;               rparms.setUfvTransitState(UfvTransitStateEnum.S99_RETIRED);&#xA;               rparms.setUnitVisitState(UnitVisitStateEnum.RETIRED)&#xA;               aUfv.rectify(rparms);&#xA;            }//else if Ends&#xA;         }//for ends&#xA;       }catch(Exception e){&#xA;           e.printStackTrace()&#xA;       }&#xA;   }&#xA;&#xA;  // Method returns a Set of Complex Level Master State Active Units &#xA;  public Set findVisitStateActiveUnit(String unitId)&#xA;  {&#xA;    Set unitUfvSet = null  &#xA;    try{&#xA;    inEquipment = Equipment.loadEquipment(unitId);&#xA;    inUnit = unitFinder.findActiveUnit(complex,inEquipment)&#xA;    unitUfvSet = inUnit != null ? inUnit.getUnitUfvSet() : null; &#xA;    }catch(Exception e){&#xA;       e.printStackTrace()&#xA;    }   &#xA;    return unitUfvSet&#xA;  }&#xA;&#xA;  public void setAdviseUnitToActive(Object injBase, Object unit){&#xA;     try{&#xA;       def unitDetails = injBase.getGroovyClassInstance(&quot;GvyUnitLookup&quot;)&#xA;       def unitIdGky=unit.getFieldValue(&quot;unitGkey&quot;)&#xA;       def visit = unitDetails.lookupFacility(unitIdGky)&#xA;        if(visit != null) &#xA;        {&#xA;          // A1, Set Visible in sparcs true&#xA;          visit.setFieldValue(&quot;ufvVisibleInSparcs&quot;, true);&#xA;          visit.setFieldValue(&quot;ufvTransitState&quot;, UfvTransitStateEnum.S20_INBOUND)&#xA;          visit.setFieldValue(&quot;ufvVisitState&quot;, UnitVisitStateEnum.ACTIVE)&#xA;          unit.setFieldValue(&quot;unitVisitState&quot;,UnitVisitStateEnum.ACTIVE)&#xA;  &#xA;          //Trigger N4 Unit Activate&#xA;          def event = new GroovyEvent( null, unit);&#xA;          event.postNewEvent( &quot;UNIT_ACTIVATE&quot;,&quot;Key Dup Proc Execution for NV/NLT&quot;); //A3&#xA; &#xA; &#x9;      //Set Attached Cntr Chassis Time &#xA;&#x9;&#x9;  setAttachedEqTime(unit)&#xA;        } &#xA;     }catch(Exception e){&#xA;          e.printStackTrace()&#xA;     }&#xA;  }&#xA;&#xA;  //Method Swipes chassis attached to active unit so taht chassis cant be associated with another unit&#xA;  public void swipeAttachChassis(String carriage){&#xA;   try&#xA;   {&#xA;     if(carriage != null){&#xA;       def chasEquip = Equipment.loadEquipment(carriage);&#xA;       def attChasUnit = unitFinder.findAttachedUnit(complex,chasEquip)&#xA;       def attChasUnitClass = attChasUnit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;       attChasUnitClass = attChasUnitClass != null ? attChasUnitClass.getKey() : ''&#xA;&#xA;&#x9;   def attChasUnitTstate = attChasUnit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)  &#xA;       attChasUnitTstate = attChasUnitTstate != null ? attChasUnitTstate.getKey() : ''&#xA;&#xA;       if(attChasUnit != null &amp;&amp; attChasUnitClass.equals(&quot;CONTAINER&quot;) &amp;&amp; !attChasUnitTstate.equals('S10_ADVISED')){&#xA;         def attChasUnitId = attChasUnit.getFieldValue(&quot;unitId&quot;)&#xA;         attChasUnit.swipeChsByOwnersChs()  &#xA;        } &#xA;     }&#xA;   }catch(Exception e){&#xA;      e.printStackTrace()&#xA;   }&#xA;  }&#xA;&#xA;  //Method Swipes chassis attached to active unit so taht chassis cant be associated with another unit&#xA;  public void swipeAttachAccessory(String equiMg){&#xA;   try&#xA;   {&#xA;     if(equiMg != null){&#xA;       def mgEquip = Equipment.loadEquipment(equiMg);&#xA;       def attMgUnit = unitFinder.findAttachedUnit(complex,mgEquip)&#xA;       def attMgUnitClass = attMgUnit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;       attMgUnitClass = attMgUnitClass != null ? attMgUnitClass.getKey() : ''&#xA;&#xA;&#x9;   def attMgUnitTstate = attMgUnit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)  &#xA;       attMgUnitTstate = attMgUnitTstate != null ? attMgUnitTstate.getKey() : ''&#xA;&#xA;       if(attMgUnit != null &amp;&amp; attMgUnitClass.equals(&quot;CHASSIS&quot;) &amp;&amp; !attMgUnitTstate.equals('S10_ADVISED')){&#xA;         def attMgUnitId = attMgUnit.getFieldValue(&quot;unitId&quot;)&#xA;         attMgUnit.detachAccessoriesOnChassis(&quot;NLT Process : Detached Acry from Chassis&quot;)  &#xA;        }&#xA;&#x9;   else if(attMgUnit != null &amp;&amp; attMgUnitClass.equals(&quot;CONTAINER&quot;) &amp;&amp; !attMgUnitTstate.equals('S10_ADVISED')){&#xA;         def attMgUnitId = attMgUnit.getFieldValue(&quot;unitId&quot;)&#xA;&#x9;&#x9; //UnitEquipment priUnitEquipment = attMgUnit.getUnitPrimaryUe()&#xA;         //UnitEquipment acryUe  = attMgUnit.getUeAccessory();&#xA;         //attMgUnit.detachAllEquipmentOfRole(EqUnitRoleEnum.ACCESSORY,&quot;NLT Process : Detached Acry from Container&quot;);&#xA;&#x9;&#x9; attMgUnit.detachAccessoriesOnChassis(&quot;NLT Process : Detached Acry from Chassis&quot;)  &#xA;        } &#xA;       &#xA;     }&#xA;   }catch(Exception e){&#xA;      e.printStackTrace()&#xA;   }&#xA;  }&#xA;&#xA;// Method Sets Cntr &amp; Chassis Attached Equip time &#xA;public void setAttachedEqTime(Object unit)&#xA;{&#xA;  UnitEquipment cntrEquip = unit.getUnitPrimaryUe();&#xA;  UnitEquipment chasEquip = unit.getUnitCarriageUe();&#xA;  if(cntrEquip != null &amp;&amp; chasEquip == null){ &#xA;&#x9; Calendar calendarHst = Calendar.getInstance();&#xA;&#x9; Date cntrDate = calendarHst.getTime() &#xA;     cntrEquip.setUeAttachTime(cntrDate);&#xA;&#xA;  }else if(cntrEquip != null &amp;&amp; chasEquip != null){&#xA;    Calendar calendarHst = Calendar.getInstance();&#xA;    Date chasDate = calendarHst.getTime() &#xA;&#xA;    calendarHst.add(Calendar.MINUTE, -2); &#xA;    Date cntrDate = calendarHst.getTime()&#xA;    cntrEquip.setUeAttachTime(cntrDate);&#xA;    chasEquip.setUeAttachTime(chasDate);&#xA;  }&#xA;&#xA;}//Method Ends &#xA;&#xA;}//Class Ends" />
<digital-asset id="CVSReportTest" short-description="CVSReportTest" is-pre-deployed="N" groovy-code="import com.navis.framework.persistence.*;&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.argo.business.atoms.EventEnum;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.argo.business.atoms.CarrierVisitPhaseEnum;&#xA;import com.navis.argo.business.model.CarrierVisit;&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;import java.util.HashMap;&#xA;import java.util.Calendar;&#xA;import java.text.DateFormat;&#xA;import java.text.SimpleDateFormat;&#xA;import com.navis.framework.util.scope.ScopeCoordinates;&#xA;import com.navis.framework.portal.context.UserContextUtils;&#xA;import com.navis.framework.portal.UserContext;&#xA;&#xA;public class CVSReportTest extends GroovyInjectionBase &#xA;{&#xA;  private Date startDateTimeHst = null; &#xA;  private Date endDateTimeHst = null;&#xA;  GroovyInjectionBase inj = null&#xA;  def gvyRptEventUtil = null&#xA;  // private final String emailTo = &quot;1aktosdevteam@matson.com&quot;; &#xA;&#xA;  //private final String emailTo = &quot;jtattershall@matson.com;1CVSHO_HON@matson.com;atokairin@matson.com;jchagami@matson.com;1TOSDevTeamHON@matson.com;sysreports@matson.com&quot;; &#xA;  &#xA;private final String emailTo = &quot;riyer@matson.com&quot;; &#xA;  HashSet deptVesSet = new HashSet();&#xA;  HashMap workingVesMap = new HashMap();&#xA;&#xA;  public void setDeptVessel(String deptVessel){&#xA;    deptVesSet.add(deptVessel)&#xA;  }&#xA;&#xA;  public void setWorkingVessel(String VesId, String VesValue){&#xA;    workingVesMap.put(VesId,VesValue)&#xA;  }&#xA;&#xA;  public String execute(Map inParameter) &#xA;  {&#xA;    try&#xA;    {  &#xA;      inj = new GroovyInjectionBase();&#xA;      def userContext = com.navis.argo.ContextHelper.getThreadUserId()&#xA;&#x9;  com.navis.argo.ContextHelper.setThreadExternalUser(&quot;admin&quot;);&#xA;&#xA;      def gvyCmisUtil  = inj.getGroovyClassInstance(&quot;GvyCmisUtil&quot;)&#xA;      gvyRptEventUtil  = inj.getGroovyClassInstance(&quot;GvyReportEventUtil&quot;)&#xA;&#xA;       getDateCriteria();&#xA;       EventType[] evntTypeArr =  getEventTypeArray();&#xA;       EventManager em = (EventManager)Roastery.getBean(&quot;eventManager&quot;);&#xA;       List eventList = gvyRptEventUtil.getEventsByCreatedDate(startDateTimeHst,endDateTimeHst,evntTypeArr)&#xA;       println(&quot;eventList ::&quot;+(eventList != null ? eventList.size() : 0))&#xA;       ArrayList listUnits = new ArrayList()&#xA;&#xA;       for(aEvent in eventList)&#xA;      {&#xA;         Date evntDate = aEvent.getEvntCreated() &#xA;         String eventId = aEvent.getEvntEventType().getEvnttypeId();&#xA;         String unitNbr = aEvent.getEvntAppliedToNaturalKey()&#xA;&#xA;         Set changes = aEvent.getFieldChanges()&#xA;         Iterator iterator = changes.iterator();&#xA;         String updtFieldValue = &quot;&quot;&#xA;         String vesselVisitId = &quot;&quot;&#xA;&#xA;         while(iterator.hasNext()) &#xA;         {&#xA;            EventFieldChange  fieldChange = (EventFieldChange)iterator.next();&#xA;            String fieldName = fieldChange.getMetafieldId()&#xA;            MetafieldId mfId = MetafieldIdFactory.valueOf(fieldName);&#xA;            if(eventId.equals(&quot;UNIT_DISCH&quot;)){&#xA;              updtFieldValue = ArgoUtils.getPropertyValueAsUiString(mfId, fieldChange.getEvntfcPrevVal()); &#xA;            }else if(eventId.equals(&quot;UNIT_LOAD&quot;)){&#xA;              updtFieldValue = ArgoUtils.getPropertyValueAsUiString(mfId, fieldChange.getEvntfcNewVal());&#xA;            }&#xA;&#xA;           vesselVisitId = getVesselId(updtFieldValue, gvyCmisUtil)&#xA;           //Gets WorK Shift &amp; Rearranges Dates&#xA;           evntDate = getFirstPeriodWorkDate(evntDate)&#xA;           evntDate = gvyRptEventUtil.formatDateToTimeZone(evntDate, &quot;HST&quot;)&#x9;   &#xA;&#xA;           //Checks If Vessel Entry should be included in the Report           &#xA;           if(vesselVisitId == null){&#xA;               continue;&#xA;           } &#xA;    &#xA;           HashMap unitData = populateCSVData(vesselVisitId,evntDate,unitNbr) &#xA;           listUnits.add(unitData)&#xA;&#xA;         }//While Ends&#xA;      }//For Ends&#xA;      &#xA;      //Sorting By Field&#xA;      def gvyRptUtil = inj.getGroovyClassInstance(&quot;ReportFieldSortUtil&quot;)&#xA;      if(listUnits != null &amp;&amp; listUnits.size() &gt; 0){&#xA;       //Sort By Vesvoy &amp;&amp; EventCreated Time&#xA;       listUnits =  gvyRptUtil.processFieldSort(listUnits,&quot;vesselId,createdDate&quot;)&#xA;      }&#xA;      &#xA;      //Create IReport Design &#xA;      processReportDesign(listUnits)&#xA;&#xA;      println(&quot;deptVesSet for CVS Hourly Status Report :&quot;+deptVesSet+&quot; WorkingVesSet :&quot;+workingVesMap)&#xA;&#xA;    }catch(Exception e){&#xA;       e.printStackTrace();&#xA;    }&#xA;  &#xA; }//Method Ends&#xA;&#xA;&#xA;  public EventType[] getEventTypeArray()&#xA;  {&#xA;   EventType[] evntTypeArr = null;&#xA;    try&#xA;    {&#xA;      EventType evntDisch = EventType.resolveIEventType(EventEnum.UNIT_DISCH);&#xA;      EventType evntLoad = EventType.resolveIEventType(EventEnum.UNIT_LOAD);&#xA;      evntTypeArr = [evntDisch,evntLoad]  &#xA;    }catch(Exception e){&#xA;      e.printStackTrace();&#xA;    }&#xA;   return evntTypeArr&#xA;  }//Method Ends&#xA;&#xA;&#xA;&#xA;  public HashMap populateCSVData(String vesselId,Date createdDate,String unitNbr)&#xA;  {&#xA;      HashMap map = new HashMap() &#xA;       try&#xA;      {&#xA;         map.put(&quot;vesselId&quot;, vesselId); &#xA;         map.put(&quot;createdDate&quot;, createdDate);&#xA;         map.put(&quot;unitNbr&quot;, unitNbr);&#xA;&#xA;      }catch(Exception e){&#xA;         e.printStackTrace()&#xA;      }&#xA;      return map&#xA;  }&#xA;&#xA;&#xA;  public String getVesselId(String updtFieldValue, Object gvyCmisUtil)&#xA;  {&#xA;    String vesselId = null;&#xA;    try{&#xA;    String [] vesselPosition = updtFieldValue != null ? updtFieldValue.split(&quot;-&quot;) : &quot;&quot;&#xA;    vesselId = vesselPosition.length &gt; 0 ? vesselPosition[1] : &quot;&quot; &#xA;    &#xA;      //Check Vessel Id from Buffered Id Values&#xA;      if(deptVesSet != null &amp;&amp; deptVesSet.contains(vesselId)){&#xA;         return null; &#xA;      }else if(workingVesMap.get(vesselId) != null){&#xA;              //  println(&quot;workingVesMap.get(vesselId) ::&quot;+workingVesMap.get(vesselId))&#xA;         return workingVesMap.get(vesselId)&#xA;      }/*else{&#xA;         def entry = null;&#xA;         workingVesMap.each&#xA;         { &#xA;            println(&quot;it.key ---::&quot;+it.key+&quot;   it.key.contains(vesselId) ::&quot;+it.key.contains(vesselId))&#xA;            String aVesKey = it.key&#xA;            if(aVesKey.contains(vesselId)){&#xA;              entry = it.value; &#xA;              return entry &#xA;            }&#xA;          }&#xA;      }*/&#xA;    &#xA;    //Get Vess&#xA;    String vesClassType = gvyCmisUtil.getVesselClassType(vesselId)&#xA;    &#xA;    //Gets CarrierVisit&#xA;    def cv = CarrierVisit.findVesselVisit( getFacility(), vesselId);&#xA;    if(cv == null){&#xA;        return vesselId&#xA;    }&#xA;&#xA;    VesselVisitDetails vvd = VesselVisitDetails.resolveVvdFromCv(cv);&#xA;    String vvdIbVygNbr =  vvd.vvdIbVygNbr&#xA;    String vvdObVygNbr =  vvd.vvdObVygNbr&#xA;    Date actualTimeofDept = cv.cvATD&#xA;    //println(&quot;actTimeofDept ------::&quot;+actualTimeofDept)&#xA;&#xA;    CarrierVisitPhaseEnum visitPhase = cv.getCvVisitPhase();&#xA;&#xA;    if ( (CarrierVisitPhaseEnum.DEPARTED.equals(visitPhase) || CarrierVisitPhaseEnum.CLOSED.equals(visitPhase) &#xA;           || CarrierVisitPhaseEnum.ARCHIVED.equals(visitPhase) || CarrierVisitPhaseEnum.WORKING.equals(visitPhase)) &#xA;           &amp;&amp; actualTimeofDept != null &amp;&amp;  gvyRptEventUtil.timeDiffInHrs(endDateTimeHst, actualTimeofDept) &gt; 12 ) &#xA;    {&#xA;         setDeptVessel(vesselId); //Set VesselId to Departed Buffer&#xA;         return null; &#xA;    }else if (CarrierVisitPhaseEnum.INBOUND.equals(visitPhase) || CarrierVisitPhaseEnum.CANCELED.equals(visitPhase) ){&#xA;        return null;&#xA;    }&#xA;&#xA;    if(vesClassType.equals(&quot;CELL&quot;)){&#xA;      setWorkingVessel(vesselId,vesselId)&#xA;    }&#xA;    if(vesClassType.equals(&quot;BARGE&quot;))&#xA;    {&#xA;       // println(&quot;vvdIbVygNbr --::&quot;+vvdIbVygNbr+&quot; vvdObVygNbr --::&quot;+vvdObVygNbr+&quot; visitPhase --::&quot;+visitPhase+&quot; actualTimeofDept --::&quot;+actualTimeofDept)&#xA;       def bargeVesId = vesselId &#xA;       def vesselCode = vesselId != null &amp;&amp; vesselId.length() &gt;3 ? vesselId.substring(0,3) : null&#xA;       vesselId = vesselCode+vvdIbVygNbr+&quot;/&quot;+vvdObVygNbr&#xA;       def bargeVesValue = vesselId &#xA;       &#xA;       //Set Working vessel &#xA;       setWorkingVessel(bargeVesId,bargeVesValue)&#xA;    } &#xA;&#xA;   }catch(Exception e){&#xA;       e.printStackTrace()&#xA;   }&#xA;   return vesselId&#xA;  }&#xA;&#xA;  //Get Report Search Date Criteria&#xA;  public void getDateCriteria()&#xA;  { &#xA;   try&#xA;   {&#xA;    Calendar calendarHst = Calendar.getInstance();&#xA;    endDateTimeHst = calendarHst.getTime() //formatDateToTimeZone(, &quot;HST&quot;);&#xA;&#xA;    calendarHst.add(Calendar.DATE, -3); &#xA;    startDateTimeHst = calendarHst.getTime() //formatDateToTimeZone(, &quot;HST&quot;);&#xA;&#xA;    println(&quot;startDateTimeHst::&quot; +startDateTimeHst+&quot;   endDateTimeHst::&quot;+endDateTimeHst);&#xA;   }catch(Exception e){&#xA;       e.printStackTrace()&#xA;   }&#xA; }//Method Ends&#xA;&#xA;&#xA; //Method Substracts Date to a Day Earlier on the Morning Shift 0hrs to 6hrs&#xA; public Date getFirstPeriodWorkDate(Date evntDate)&#xA; {&#xA;   // println(&quot; getFirstPeriodWorkDate evntDate --- ::&quot;+evntDate)&#xA;&#xA;     Date shiftDate = evntDate; &#xA;     try&#xA;     {&#xA;        Calendar cal=Calendar.getInstance();&#xA;        cal.setTimeZone(TimeZone.getTimeZone(&quot;HST&quot;));&#xA;        cal.setTime(evntDate);&#xA;        if(cal.get(cal.HOUR_OF_DAY) &gt;= 0 &amp;&amp; cal.get(cal.HOUR_OF_DAY) &lt; 7){&#xA;            cal.add(Calendar.DATE, -1); &#xA;            shiftDate = cal.getTime()&#x9;   &#xA;         }   &#xA;      }catch(Exception e){&#xA;        e.printStackTrace()&#xA;      }&#x9;   &#xA;    return shiftDate&#xA;  }&#xA;&#xA;&#xA; public void processReportDesign(ArrayList unitList)&#xA; {&#xA;   println(&quot;unitList Count=&quot;+unitList.size())&#x9;  &#xA;   try{&#xA;       //Set Report Parameter&#xA;        HashMap parameters = new HashMap();&#xA;        String strDate = ContextHelper.formatTimestamp(new Date(), ContextHelper.getThreadUserTimezone())&#xA;       &#xA;        println(&quot;Report Time ::&quot;+new Date()+&quot;    TimeZone:&quot;+ContextHelper.getThreadUserTimezone()+&quot;  strDate ::&quot;+strDate)&#xA;       &#xA;        parameters.put(&quot;Date&quot;,strDate);&#xA;       // parameters.put(&quot;MATSONLOGO&quot;,DigitalAsset.findImage(&quot;MATSONLOGO&quot;)); &#xA;&#xA;        //Create and Mail Report &#xA;        JRDataSource ds = new JRMapCollectionDataSource(unitList);&#xA;        &#xA;        def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;println(&quot;ds=&quot;+ds+&quot; parameters=&quot;+parameters+&quot; emailTo=&quot;+emailTo)&#xA;        reportRunner.emailReport(ds, parameters, &quot;CVS_HOURLY_STATUS&quot;, emailTo, &quot;CVS Hourly Status Report&quot;, &quot;CVS Hourly Status Report&quot;);&#xA;&#xA;      }catch(Exception e){&#xA;         e.printStackTrace();&#xA;      }&#xA;  }&#xA; &#xA;}//Class Ends" />
<digital-asset id="GvyCargoEditAvailDate" short-description="GvyCargoEditAvailDate" is-pre-deployed="N" groovy-code="/*&#xA;**********************************************************************&#xA;* Srno Doer  Date      Change&#xA;* A1   GR    07/21/09&#xA;* A2   GR    07/08/10  Get DeclaredIBcarrier for SIT_UNASSIGN&#xA;* A3   GR    01/12/11  Substract One day from  Method&#xA;                       addBusinessDate, addCalendarDate&#xA;* A4      09/02/12    Glenn Raposo       Changed Code for TOS2.1 Upgrade issue&#xA;                                         Replaces AppCalendarUtil to ArgoCalendarUtil since navis team chaged code&#xA;* A5   LC    10/15/12  Remove detention calculation methods calcDueDate() and calcStorageDate() instead reusing the&#xA;                       calling the GvyAvailDate methods.&#xA;**********************************************************************&#xA;*/&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.argo.business.model.CarrierVisit;&#xA;import com.navis.inventory.business.api.*;&#xA;import com.navis.inventory.business.units.*;&#xA;import com.navis.argo.business.atoms.LocTypeEnum;&#xA;import com.navis.framework.configuration.calendar.AppCalendarUtil;&#xA;import com.navis.framework.configuration.calendar.AppCalendarEventType;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.argo.business.reference.RoutingPoint;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.argo.business.atoms.BizRoleEnum;&#xA;&#xA;import com.navis.argo.ContextHelper;&#xA;import java.util.Calendar;&#xA;import java.util.TimeZone;&#xA;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.argo.ArgoRefField;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.inventory.InventoryField;&#xA;import java.util.List;&#xA;&#xA;import com.navis.argo.business.calendar.ArgoCalendarUtil;&#xA;import com.navis.argo.business.calendar.ArgoCalendarEventType;&#xA;import com.navis.argo.business.calendar.ArgoCalendar;&#xA;import com.navis.argo.business.atoms.CalendarTypeEnum;&#xA;&#xA;/** Change History&#xA;*A1 - SKB 01/21/09 Changed manual update from V to X.&#xA;*                  Also changed logic for updating det and last free&#xA;*A2 - SKB 02/06/09 Changed logic for deletion.&#xA;*/&#xA;//A4 - 02/09/12 - With the TOS2.1 Upgrade navis team split the Calendar util from Framework package and Argo Package&#xA;// - causing our 1.6 code to refer to the old table (AppCalendarEvent) to new table (ArgoCalendarEvent)&#xA;&#xA;public class GvyCargoEditAvailDate extends GroovyInjectionBase {&#xA;&#xA;/*private static AppCalendarEventType[] exemptTypes = null;&#xA;&#xA;static {&#xA;&#x9;exemptTypes = new AppCalendarEventType[2];&#xA;&#x9;exemptTypes[0] = AppCalendarEventType.findOrCreateAppCalendarEventType(&quot;EXEMPT_DAY&quot;);&#xA;    exemptTypes[1] = AppCalendarEventType.findOrCreateAppCalendarEventType(&quot;GRATIS_DAY&quot;);&#xA;}*/&#xA;&#xA;private static  ArgoCalendarEventType[] exemptTypes = null;&#xA;&#xA;static {&#xA;   exemptTypes = new ArgoCalendarEventType[2];&#xA;   exemptTypes[0] = ArgoCalendarEventType.findOrCreateArgoCalendarEventType(&quot;EXEMPT_DAY&quot;);&#xA;   exemptTypes[1] = ArgoCalendarEventType.findOrCreateArgoCalendarEventType(&quot;GRATIS_DAY&quot;);&#xA;}&#xA;&#xA;def gvyAvailDate = null;&#xA;def gvyBaseClass = new GroovyInjectionBase();&#xA;&#xA;    public boolean setAvailDate(Object unit, Object event, String previousDischPort) {&#xA;    if(event != null) {&#xA;       &#x9;&#x9;ContextHelper.setThreadExternalUser(event.event.evntAppliedBy);&#xA;&#x9;}&#xA;&#x9;def editFlag = unit.getUnitFlexString11();&#xA;&#x9;boolean update = false;&#xA;&#xA;&#x9;def previousDest = null;&#xA;&#x9;def previousLineOperator = null;&#xA;&#x9;def previousCategory = null;&#xA;&#x9;def previousFreightKind =null;&#xA;&#xA;&#x9;def editDest = false;&#xA;&#x9;def editLineOperator = false;&#xA;&#x9;def editCategory = false;&#xA;&#x9;def editFreightKind = false;&#xA;&#xA;&#x9;if(event != null) {&#xA;&#x9;&#x9;def pointId = previousDischPort;&#xA;&#x9;&#x9;//def point = findRoutingPoint(pointId);&#xA;&#x9;&#x9;if(pointId != null) {&#xA;&#x9;&#x9;&#x9; previousDest =  pointId  //point.pointId;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;previousLineOperator = event.getPreviousPropertyAsString(&quot;LineOperator&quot;);&#xA;&#x9;&#x9;previousCategory = event.getPreviousPropertyAsString(&quot;Category&quot;);&#xA;&#x9;&#x9;previousFreightKind = event.getPreviousPropertyAsString(&quot;FreightKind&quot;);&#xA;&#xA;&#x9;&#x9;def currDischPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;        currDischPort = currDischPort != null ? currDischPort  : &quot;&quot;&#xA;&#x9;&#x9;if(!currDischPort.equals(previousDest)){&#xA;&#x9;&#x9;&#x9;editDest = true;&#xA;        }&#xA;&#x9;&#x9;editLineOperator = event.wasFieldChanged(&quot;LineOperator&quot;);&#xA;                editCategory = event.wasFieldChanged(&quot;Category&quot;);&#xA;                editFreightKind = event.wasFieldChanged(&quot;FreightKind&quot;);&#xA;&#x9;}&#xA;&#xA;&#x9;//log(&quot;PREV=&quot;+previousDest+&quot;,&quot;+previousLineOperator+&quot;,&quot;+previousCategory+&quot;,&quot;+previousFreightKind);&#xA;&#xA;&#xA;&#xA;&#x9;def dest =  null;&#xA;&#x9;def category = null;&#xA;&#x9;def freightKind = null;&#xA;&#x9;def commdityCode = null;&#xA;&#x9;def zone = unit.getUnitComplex().getTimeZone();&#xA;&#x9;def MAT;&#xA;&#xA;&#x9;try {&#xA;&#x9;&#x9;dest =  unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;&#x9;&#x9;category = unit.unitCategory.name;&#xA;&#x9;&#x9;freightKind = unit.unitFreightKind.name;&#xA;&#x9;&#x9;if(unit.goods != null &amp;&amp; unit.goods.gdsCommodity != null) {&#xA;&#x9;&#x9;   commdityCode = unit.goods.gdsCommodity.cmdyId;&#xA;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;} catch (Exception e) {&#xA;&#x9;&#x9;log(&quot;Exception =&quot;+e.getMessage());&#xA;&#x9;}&#xA;&#xA;&#x9;try {&#xA;&#x9;     def bizScope = ScopedBizUnit.findScopedBizUnit( &quot;MAT&quot;, BizRoleEnum.LINEOP);&#xA;             MAT = bizScope.bzuGkey.toString();&#xA;&#x9;} catch (Exception e) {&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;//boolean result = (MAT == previousLineOperator);&#xA;&#x9;//String rStr = Boolean.toString(result);&#xA;&#x9;//log(&quot;Mat=&quot;+MAT+&quot; &quot;+editLineOperator+&quot; &quot;+previousLineOperator+&quot; &quot;+ rStr );&#xA;&#xA;&#x9;def lineOper = null;&#xA;&#x9;def tcn = unit.unitFlexString12;&#xA;&#x9;boolean isReefer = unit.isReefer();&#xA;&#x9;String consigneeName =  unit.getFieldValue(&quot;unitGoods.gdsConsigneeAsString&quot;);&#xA;&#x9;String remarks = unit.getFieldValue(&quot;unitRemark&quot;);&#xA;&#xA;&#xA;&#x9;try {&#xA;&#x9;&#x9;lineOper = unit.unitLineOperator.bzuId;&#xA;&#x9;} catch (Exception e) {&#xA;&#x9;&#x9;// do nothing&#xA;&#x9;}&#xA;&#xA;&#x9;def ufv = unit.unitActiveUfv;&#xA;&#xA;&#x9;// Not active UFV, find an advised UFV.&#xA;&#x9;if(ufv == null) {&#xA;&#x9;&#x9;def lookup =  getGroovyClassInstance(&quot;GvyUnitLookup&quot;);&#xA;&#x9;&#x9;ufv = lookup.lookupFacility(unit.primaryKey);&#xA;         }&#xA;&#xA;&#x9;// Can not update without UFV&#xA;&#x9;if(ufv == null) return update;&#xA;&#xA;&#x9;def availDate = ufv.getFieldValue(&quot;ufvFlexDate02&quot;);&#xA;&#x9;boolean availChange = false;&#xA;&#x9;boolean manualDate =  false;&#xA;&#xA;&#x9;//log(&quot;Prev dest = &quot;+previousDest+&quot; lineOper=&quot;+lineOper+&quot; category=&quot;+category+&quot; kind=&quot;+freightKind+&quot;comm=&quot;+commdityCode);&#xA;&#xA;&#xA;&#x9;if(editFlag != null &amp;&amp; editFlag.contains(&quot;X&quot;) ) {&#xA;&#x9;       manualDate = true;&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;if(event != null &amp;&amp;  event.wasFieldChanged(&quot;UfvFlexDate02&quot;)) {&#xA;&#x9;      availChange = true;&#xA;&#x9;      manualDate = true;&#xA;&#x9;/*&#xA;&#x9;      if(editFlag == null) {&#xA;&#x9;         unit.setFieldValue(&quot;unitFlexString11&quot;,&quot;X&quot;);&#xA;&#x9;      } else if(!editFlag.contains(&quot;X&quot;)) {&#xA;&#x9;         unit.setFieldValue(&quot;unitFlexString11&quot;,editFlag+&quot;X&quot;);&#xA;&#x9;      }&#xA;&#x9;*/&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;if(manualDate) log(&quot;Manual Avail Date &quot;+availDate);&#xA;&#xA;    //A5 Using the GvyAvailDate methods to calculate the detention dates&#xA;    try {&#xA;        gvyAvailDate = gvyBaseClass.getGroovyClassInstance(&quot;GvyAvailDate&quot;);&#xA;    } catch (Exception e) {&#xA;        GroovyApi.log(&quot;Exception in GvyCargoEditAvailDate.setAvailDate()&quot; + e);&#xA;    }&#xA;&#xA;&#xA;&#x9;// Manual Avail Date&#xA;&#x9;if(availChange) {&#xA;&#x9;&#x9;if (event == null || !event.wasFieldChanged(&quot;UfvFlexDate03&quot;) ) {&#xA;&#x9;   &#x9;&#x9;def dueDate = gvyAvailDate.calcDueDate(lineOper,tcn, commdityCode,isReefer, availDate, zone);&#xA;&#xA;&#x9;&#x9;  &#x9;if(!dueDate.equals(ufv.ufvFlexDate03) ) {&#xA;&#x9;&#x9;&#x9;   update = true;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;   &#x9;&#x9;ufv.setFieldValue(&quot;ufvFlexDate03&quot;,dueDate);&#xA;&#x9;   &#x9;} else {&#xA;&#x9;   &#x9;     log(&quot;Manual dueDate &quot;);&#xA;&#x9;   &#x9;}&#xA;&#x9;   &#x9;if (event == null ||  !event.wasFieldChanged(&quot;LastFreeDay&quot;) ) {&#xA;&#xA;            def storageDate = gvyAvailDate.calcStorageDate(lineOper,tcn, consigneeName, remarks,isReefer, availDate, zone);&#xA;&#x9;   &#x9;&#x9;log(&quot;Storgae=&quot;+storageDate);&#xA;&#x9;   &#x9;&#x9;ufv.ufvLastFreeDay = storageDate;&#xA;&#x9;   &#x9;} else {&#xA;&#x9;   &#x9;&#x9;log(&quot;Manual Last Free &quot;);&#xA;&#x9;   &#x9;}&#xA;&#xA;&#x9;// Avail date from the vessel&#xA;&#x9;} else if(!manualDate &amp;&amp; (&quot;ANK&quot;.equals(dest) || &quot;DUT&quot;.equals(dest) || &quot;KDK&quot;.equals(dest)) &amp;&amp; &quot;MAT&quot;.equals(lineOper) &amp;&amp; &quot;IMPRT&quot;.equals(category)&#xA;&#x9;    &amp;&amp; &quot;FCL&quot;.equals(freightKind) &amp;&amp; !&quot;AUTO&quot;.equals(commdityCode) &amp;&amp; !&quot;AUTOCON&quot;.equals(commdityCode) ) {&#xA;&#x9;&#x9;def id = unit.getFieldValue(&quot;unitId&quot;);&#xA;&#x9;&#x9;  // Added Check for AdvanceVV&#xA;&#x9;&#x9;  def carrier = null;&#xA;&#xA;&#x9;&#x9;  def advanceVV = unit.getFieldValue(&quot;unitFlexString04&quot;);&#xA;&#x9;&#x9;  if(advanceVV != null) {&#xA;                  &#x9;def vesselLookup = getGroovyClassInstance(&quot;GvyVesselLookup&quot;);&#xA;                  &#x9;carrier = vesselLookup.getCarrierVisit(advanceVV);&#xA;                  } else {&#xA;&#x9;&#x9;    &#x9;    carrier = ufv.getUfvActualIbCv();&#xA;&#x9;&#x9;    &#x9;    if(carrier == null || !carrier.getCvCarrierMode().equals(LocTypeEnum.VESSEL)) { //A2&#xA;&#x9;&#x9;    &#x9;    &#x9;carrier = unit.getUnitDeclaredIbCv();&#xA;&#x9;&#x9;    &#x9;    }&#xA;&#x9;&#x9;  }&#xA;&#xA;&#xA;&#x9;&#x9;def arriveDate = null;&#xA;&#x9;&#x9;if(carrier != null &amp;&amp; carrier.getCvCarrierMode().equals(LocTypeEnum.VESSEL) ) {&#xA;&#x9;&#x9;                     //A1&#xA;&#x9;&#x9;&#x9;arriveDate = carrier.getCvCvd() != null ? carrier.getCvCvd().cvdTimeFirstAvailability : null;&#xA;&#x9;&#x9;&#x9;//if(arriveDate == null) arriveDate = carrier.getCvATA();&#xA;&#x9;&#x9;&#x9;//if(arriveDate == null) arriveDate = carrier.getCvCvd().getCvdETA();&#xA;&#x9;    }&#xA;&#xA;&#x9;&#x9;if(arriveDate != null) {&#xA;&#xA;&#x9;&#x9;&#x9;if(!arriveDate.equals(ufv.ufvFlexDate02) ) {&#xA;&#x9;&#x9;&#x9;   update = true;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;ufv.setFieldValue(&quot;ufvFlexDate02&quot;,arriveDate);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (event == null || !event.wasFieldChanged(&quot;UfvFlexDate03&quot;) ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def dueDate = gvyAvailDate.calcDueDate(lineOper,tcn, commdityCode,isReefer, arriveDate, zone);&#xA;&#x9;&#x9;        &#x9;&#x9;if(!dueDate.equals(ufv.ufvFlexDate03) ) {&#xA;&#x9;&#x9;&#x9;   &#x9;&#x9;&#x9;update = true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufv.setFieldValue(&quot;ufvFlexDate03&quot;,dueDate);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (event == null ||  !event.wasFieldChanged(&quot;LastFreeDay&quot;) ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def storageDate = gvyAvailDate.calcStorageDate(lineOper,tcn, consigneeName,  remarks, isReefer, arriveDate, zone);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufv.ufvLastFreeDay = storageDate;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}&#xA;&#xA;&#xA; &#x9;} else if( (editDest &amp;&amp; (&quot;ANK&quot;.equals(previousDest) || &quot;DUT&quot;.equals(previousDest) || &quot;KDK&quot;.equals(previousDest)) ) || (editLineOperator &amp;&amp; MAT.equals(previousLineOperator) ) || (editCategory &amp;&amp; &quot;IMPRT&quot;.equals(previousCategory) ) || (editFreightKind &amp;&amp; &quot;FCL&quot;.equals(previousFreightKind) ) ) {&#xA;&#xA;&#x9;      def id = unit.getFieldValue(&quot;unitId&quot;)&#xA;&#xA;&#x9;      ufv.setFieldValue(&quot;ufvFlexDate02&quot;,null);&#xA;&#xA;&#xA;&#x9;     log(&quot;date=&quot;+availDate);&#xA;&#xA;&#x9;      if(availDate != null) {&#xA;&#xA;&#x9;        update = true;&#xA;&#x9;      &#x9;if (event == null ||  !event.wasFieldChanged(&quot;UfvFlexDate03&quot;) ) {&#xA;      &#x9;     &#x9;&#x9;ufv.setFieldValue(&quot;ufvFlexDate03&quot;,null);&#xA;      &#x9;        }&#xA;      &#x9;        if (event == null ||  !event.wasFieldChanged(&quot;LastFreeDay&quot;) ) {&#xA;      &#x9;     &#x9;&#x9;ufv.ufvLastFreeDay = null;&#xA;      &#x9;     &#x9;}&#xA;      &#x9;      }&#xA;&#xA;      &#x9;  //A1 Null Check&#xA;&#x9;      if(editFlag != null &amp;&amp; editFlag.indexOf(&quot;X&quot;) != -1) {&#xA;&#x9;          unit.setFieldValue(&quot;unitFlexString11&quot;,editFlag.replace(&quot;X&quot;,&quot;&quot;));&#xA;              }&#xA;&#x9;}&#xA;&#xA;&#x9;return update;&#xA;&#xA;&#xA;&#xA;}&#xA;&#xA;   public  RoutingPoint findRoutingPoint(String inPointId)&#xA;  {&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(&quot;RoutingPoint&quot;).addDqPredicate(PredicateFactory.eq(ArgoRefField.POINT_GKEY, inPointId));&#xA;    return (RoutingPoint)HibernateApi.getInstance().getUniqueEntityByDomainQuery(dq);&#xA; }&#xA;&#xA;&#xA;&#xA;&#xA;public List getAdvancedUnits(String vv) {&#xA;   try {&#xA;      DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;);&#xA;&#xA;      dq.addDqPredicate(PredicateFactory.eq(InventoryField.UNIT_FLEX_STRING04,vv));&#xA;      def list = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;      return list;&#xA;   } catch (Exception e) {&#xA;      println(&quot;Exception in GvyAvailDate.getAdvancedUnits &quot;+e.getMessage());&#xA;      e.printStackTrace();&#xA;   }&#xA;   return null;&#xA;}&#xA;&#xA;}" />
<digital-asset id="GvyReportCVSHourlyStatusGvyJob" short-description="GvyReportCVSHourlyStatusGvyJob" is-pre-deployed="N" groovy-code="import com.navis.framework.persistence.*;&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.argo.business.atoms.EventEnum;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.argo.business.atoms.CarrierVisitPhaseEnum;&#xA;import com.navis.argo.business.model.CarrierVisit;&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;import java.util.HashMap;&#xA;import java.util.Calendar;&#xA;import java.text.DateFormat;&#xA;import java.text.SimpleDateFormat;&#xA;import com.navis.framework.util.scope.ScopeCoordinates;&#xA;import com.navis.framework.portal.context.UserContextUtils;&#xA;import com.navis.framework.portal.UserContext;&#xA;&#xA;public class GvyReportCVSHourlyStatusGvyJob extends GroovyInjectionBase &#xA;{&#xA;  private Date startDateTimeHst = null; &#xA;  private Date endDateTimeHst = null;&#xA;  GroovyInjectionBase inj = null&#xA;  def gvyRptEventUtil = null&#xA;  // private final String emailTo = &quot;1aktosdevteam@matson.com&quot;; &#xA;&#xA;  private final String emailTo = &quot;1aktosdevteam@matson.com;&quot;; &#xA;  &#xA;&#xA;  HashSet deptVesSet = new HashSet();&#xA;  HashMap workingVesMap = new HashMap();&#xA;&#xA;  public void setDeptVessel(String deptVessel){&#xA;    deptVesSet.add(deptVessel)&#xA;  }&#xA;&#xA;  public void setWorkingVessel(String VesId, String VesValue){&#xA;    workingVesMap.put(VesId,VesValue)&#xA;  }&#xA;&#xA;  public String execute(Map inParameter) &#xA;  {&#xA;    try&#xA;    {  &#xA;      inj = new GroovyInjectionBase();&#xA;      def userContext = com.navis.argo.ContextHelper.getThreadUserId()&#xA;&#x9;  com.navis.argo.ContextHelper.setThreadExternalUser(&quot;admin&quot;);&#xA;&#xA;      def gvyCmisUtil  = inj.getGroovyClassInstance(&quot;GvyCmisUtil&quot;)&#xA;      gvyRptEventUtil  = inj.getGroovyClassInstance(&quot;GvyReportEventUtil&quot;)&#xA;&#xA;       getDateCriteria();&#xA;       EventType[] evntTypeArr =  getEventTypeArray();&#xA;       EventManager em = (EventManager)Roastery.getBean(&quot;eventManager&quot;);&#xA;       List eventList = gvyRptEventUtil.getEventsByCreatedDate(startDateTimeHst,endDateTimeHst,evntTypeArr)&#xA;       println(&quot;eventList ::&quot;+(eventList != null ? eventList.size() : 0))&#xA;       ArrayList listUnits = new ArrayList()&#xA;&#xA;       for(aEvent in eventList)&#xA;      {&#xA;         Date evntDate = aEvent.getEvntCreated() &#xA;         String eventId = aEvent.getEvntEventType().getEvnttypeId();&#xA;         String unitNbr = aEvent.getEvntAppliedToNaturalKey()&#xA;&#xA;         Set changes = aEvent.getFieldChanges()&#xA;         Iterator iterator = changes.iterator();&#xA;         String updtFieldValue = &quot;&quot;&#xA;         String vesselVisitId = &quot;&quot;&#xA;&#xA;         while(iterator.hasNext()) &#xA;         {&#xA;            EventFieldChange  fieldChange = (EventFieldChange)iterator.next();&#xA;            String fieldName = fieldChange.getMetafieldId()&#xA;            MetafieldId mfId = MetafieldIdFactory.valueOf(fieldName);&#xA;            if(eventId.equals(&quot;UNIT_DISCH&quot;)){&#xA;              updtFieldValue = ArgoUtils.getPropertyValueAsUiString(mfId, fieldChange.getEvntfcPrevVal()); &#xA;            }else if(eventId.equals(&quot;UNIT_LOAD&quot;)){&#xA;              updtFieldValue = ArgoUtils.getPropertyValueAsUiString(mfId, fieldChange.getEvntfcNewVal());&#xA;            }&#xA;&#xA;           vesselVisitId = getVesselId(updtFieldValue, gvyCmisUtil)&#xA;           //Gets WorK Shift &amp; Rearranges Dates&#xA;           evntDate = getFirstPeriodWorkDate(evntDate)&#xA;           evntDate = gvyRptEventUtil.formatDateToTimeZone(evntDate, &quot;HST&quot;)&#x9;   &#xA;&#xA;           //Checks If Vessel Entry should be included in the Report           &#xA;           if(vesselVisitId == null){&#xA;               continue;&#xA;           } &#xA;    &#xA;           HashMap unitData = populateCSVData(vesselVisitId,evntDate,unitNbr) &#xA;           listUnits.add(unitData)&#xA;&#xA;         }//While Ends&#xA;      }//For Ends&#xA;      &#xA;      //Sorting By Field&#xA;      def gvyRptUtil = inj.getGroovyClassInstance(&quot;ReportFieldSortUtil&quot;)&#xA;      if(listUnits != null &amp;&amp; listUnits.size() &gt; 0){&#xA;       //Sort By Vesvoy &amp;&amp; EventCreated Time&#xA;       listUnits =  gvyRptUtil.processFieldSort(listUnits,&quot;vesselId,createdDate&quot;)&#xA;      }&#xA;      &#xA;      //Create IReport Design &#xA;      processReportDesign(listUnits)&#xA;&#xA;      println(&quot;deptVesSet for CVS Hourly Status Report :&quot;+deptVesSet+&quot; WorkingVesSet :&quot;+workingVesMap)&#xA;&#xA;    }catch(Exception e){&#xA;       e.printStackTrace();&#xA;    }&#xA;  &#xA; }//Method Ends&#xA;&#xA;&#xA;  public EventType[] getEventTypeArray()&#xA;  {&#xA;   EventType[] evntTypeArr = null;&#xA;    try&#xA;    {&#xA;      EventType evntDisch = EventType.resolveIEventType(EventEnum.UNIT_DISCH);&#xA;      EventType evntLoad = EventType.resolveIEventType(EventEnum.UNIT_LOAD);&#xA;      evntTypeArr = [evntDisch,evntLoad]  &#xA;    }catch(Exception e){&#xA;      e.printStackTrace();&#xA;    }&#xA;   return evntTypeArr&#xA;  }//Method Ends&#xA;&#xA;&#xA;&#xA;  public HashMap populateCSVData(String vesselId,Date createdDate,String unitNbr)&#xA;  {&#xA;      HashMap map = new HashMap() &#xA;       try&#xA;      {&#xA;         map.put(&quot;vesselId&quot;, vesselId); &#xA;         map.put(&quot;createdDate&quot;, createdDate);&#xA;         map.put(&quot;unitNbr&quot;, unitNbr);&#xA;&#xA;      }catch(Exception e){&#xA;         e.printStackTrace()&#xA;      }&#xA;      return map&#xA;  }&#xA;&#xA;&#xA;  public String getVesselId(String updtFieldValue, Object gvyCmisUtil)&#xA;  {&#xA;    String vesselId = null;&#xA;    try{&#xA;    String [] vesselPosition = updtFieldValue != null ? updtFieldValue.split(&quot;-&quot;) : &quot;&quot;&#xA;    vesselId = vesselPosition.length &gt; 0 ? vesselPosition[1] : &quot;&quot; &#xA;    &#xA;      //Check Vessel Id from Buffered Id Values&#xA;      if(deptVesSet != null &amp;&amp; deptVesSet.contains(vesselId)){&#xA;         return null; &#xA;      }else if(workingVesMap.get(vesselId) != null){&#xA;              //  println(&quot;workingVesMap.get(vesselId) ::&quot;+workingVesMap.get(vesselId))&#xA;         return workingVesMap.get(vesselId)&#xA;      }/*else{&#xA;         def entry = null;&#xA;         workingVesMap.each&#xA;         { &#xA;            println(&quot;it.key ---::&quot;+it.key+&quot;   it.key.contains(vesselId) ::&quot;+it.key.contains(vesselId))&#xA;            String aVesKey = it.key&#xA;            if(aVesKey.contains(vesselId)){&#xA;              entry = it.value; &#xA;              return entry &#xA;            }&#xA;          }&#xA;      }*/&#xA;    &#xA;    //Get Vess&#xA;    String vesClassType = gvyCmisUtil.getVesselClassType(vesselId)&#xA;    &#xA;    //Gets CarrierVisit&#xA;    def cv = CarrierVisit.findVesselVisit( getFacility(), vesselId);&#xA;    if(cv == null){&#xA;        return vesselId&#xA;    }&#xA;&#xA;    VesselVisitDetails vvd = VesselVisitDetails.resolveVvdFromCv(cv);&#xA;    String vvdIbVygNbr =  vvd.vvdIbVygNbr&#xA;    String vvdObVygNbr =  vvd.vvdObVygNbr&#xA;    Date actualTimeofDept = cv.cvATD&#xA;    //println(&quot;actTimeofDept ------::&quot;+actualTimeofDept)&#xA;&#xA;    CarrierVisitPhaseEnum visitPhase = cv.getCvVisitPhase();&#xA;&#xA;    if ( (CarrierVisitPhaseEnum.DEPARTED.equals(visitPhase) || CarrierVisitPhaseEnum.CLOSED.equals(visitPhase) &#xA;           || CarrierVisitPhaseEnum.ARCHIVED.equals(visitPhase) || CarrierVisitPhaseEnum.WORKING.equals(visitPhase)) &#xA;           &amp;&amp; actualTimeofDept != null &amp;&amp;  gvyRptEventUtil.timeDiffInHrs(endDateTimeHst, actualTimeofDept) &gt; 12 ) &#xA;    {&#xA;         setDeptVessel(vesselId); //Set VesselId to Departed Buffer&#xA;         return null; &#xA;    }else if (CarrierVisitPhaseEnum.INBOUND.equals(visitPhase) || CarrierVisitPhaseEnum.CANCELED.equals(visitPhase) ){&#xA;        return null;&#xA;    }&#xA;&#xA;    if(vesClassType.equals(&quot;CELL&quot;)){&#xA;      setWorkingVessel(vesselId,vesselId)&#xA;    }&#xA;    if(vesClassType.equals(&quot;BARGE&quot;))&#xA;    {&#xA;       // println(&quot;vvdIbVygNbr --::&quot;+vvdIbVygNbr+&quot; vvdObVygNbr --::&quot;+vvdObVygNbr+&quot; visitPhase --::&quot;+visitPhase+&quot; actualTimeofDept --::&quot;+actualTimeofDept)&#xA;       def bargeVesId = vesselId &#xA;       def vesselCode = vesselId != null &amp;&amp; vesselId.length() &gt;3 ? vesselId.substring(0,3) : null&#xA;       vesselId = vesselCode+vvdIbVygNbr+&quot;/&quot;+vvdObVygNbr&#xA;       def bargeVesValue = vesselId &#xA;       &#xA;       //Set Working vessel &#xA;       setWorkingVessel(bargeVesId,bargeVesValue)&#xA;    } &#xA;&#xA;   }catch(Exception e){&#xA;       e.printStackTrace()&#xA;   }&#xA;   return vesselId&#xA;  }&#xA;&#xA;  //Get Report Search Date Criteria&#xA;  public void getDateCriteria()&#xA;  { &#xA;   try&#xA;   {&#xA;    Calendar calendarHst = Calendar.getInstance();&#xA;    endDateTimeHst = calendarHst.getTime() //formatDateToTimeZone(, &quot;HST&quot;);&#xA;&#xA;    calendarHst.add(Calendar.DATE, -3); &#xA;    startDateTimeHst = calendarHst.getTime() //formatDateToTimeZone(, &quot;HST&quot;);&#xA;&#xA;    println(&quot;startDateTimeHst::&quot; +startDateTimeHst+&quot;   endDateTimeHst::&quot;+endDateTimeHst);&#xA;   }catch(Exception e){&#xA;       e.printStackTrace()&#xA;   }&#xA; }//Method Ends&#xA;&#xA;&#xA; //Method Substracts Date to a Day Earlier on the Morning Shift 0hrs to 6hrs&#xA; public Date getFirstPeriodWorkDate(Date evntDate)&#xA; {&#xA;   // println(&quot; getFirstPeriodWorkDate evntDate --- ::&quot;+evntDate)&#xA;&#xA;     Date shiftDate = evntDate; &#xA;     try&#xA;     {&#xA;        Calendar cal=Calendar.getInstance();&#xA;        cal.setTimeZone(TimeZone.getTimeZone(&quot;HST&quot;));&#xA;        cal.setTime(evntDate);&#xA;        if(cal.get(cal.HOUR_OF_DAY) &gt;= 0 &amp;&amp; cal.get(cal.HOUR_OF_DAY) &lt; 7){&#xA;            cal.add(Calendar.DATE, -1); &#xA;            shiftDate = cal.getTime()&#x9;   &#xA;         }   &#xA;      }catch(Exception e){&#xA;        e.printStackTrace()&#xA;      }&#x9;   &#xA;    return shiftDate&#xA;  }&#xA;&#xA;&#xA; public void processReportDesign(ArrayList unitList)&#xA; {&#xA;   println(&quot;unitList Count=&quot;+unitList.size())&#x9;  &#xA;   try{&#xA;       //Set Report Parameter&#xA;        HashMap parameters = new HashMap();&#xA;        String strDate = ContextHelper.formatTimestamp(new Date(), ContextHelper.getThreadUserTimezone())&#xA;       &#xA;        println(&quot;Report Time ::&quot;+new Date()+&quot;    TimeZone:&quot;+ContextHelper.getThreadUserTimezone()+&quot;  strDate ::&quot;+strDate)&#xA;       &#xA;        parameters.put(&quot;Date&quot;,strDate);&#xA;       // parameters.put(&quot;MATSONLOGO&quot;,DigitalAsset.findImage(&quot;MATSONLOGO&quot;)); &#xA;&#xA;        //Create and Mail Report &#xA;        JRDataSource ds = new JRMapCollectionDataSource(unitList);&#xA;        &#xA;        def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;println(&quot;ds=&quot;+ds+&quot; parameters=&quot;+parameters+&quot; emailTo=&quot;+emailTo)&#xA;        reportRunner.emailReport(ds, parameters, &quot;CVS_HOURLY_STATUS&quot;, emailTo, &quot;CVS Hourly Status Report&quot;, &quot;CVS Hourly Status Report&quot;);&#xA;&#xA;      }catch(Exception e){&#xA;         e.printStackTrace();&#xA;      }&#xA;  }&#xA; &#xA;}//Class Ends" />
<digital-asset id="TruckVisitsAutoClose" short-description="TruckVisitsAutoClose" is-pre-deployed="N" groovy-code="import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.model.TruckVisitDetails&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; * User: babugo - Do not cancel the truck transactions instead close them when the autoclose truck visit job runs&#xA; * Date: 10/31/11&#xA; * Time: 5:46 PM&#xA; * To change this template use File | Settings | File Templates.&#xA; */&#xA;class TruckVisitsAutoClose {&#xA;  public execute() {&#xA;    try {&#xA;      Long inThresholdValueMilliSecs = TruckVisitDetails.getActiveTruckVisitSettingInMilliSecs();&#xA;      for (TruckVisitDetails tvdtls : TruckVisitDetails.findExpiredTruckVisits(inThresholdValueMilliSecs)) {&#xA;        if (tvdtls != null) {&#xA;          for (TruckTransaction tran : tvdtls.getTransactionsToBeClosed()) {&#xA;            if (tran != null) {&#xA;              tran.close(false);&#xA;            }&#xA;          }&#xA;          tvdtls.close(false);          &#xA;        }&#xA;      }&#xA;    }catch (Exception closeExp) {&#xA;      LOGGER.warn(&quot;Error while closing truck visits and transactions through autoclose truck visit background job - Groovy&quot;)&#xA;    }&#xA;  }&#xA;  private static final Logger LOGGER = Logger.getLogger(TruckVisitsAutoClose.class);&#xA;}&#xA;" />
<digital-asset id="GvyNOA" short-description="GvyNOA" is-pre-deployed="N" groovy-code="/*&#xA;* Srno doer date      Change&#xA;* A1   GR   12/15/10  Create xml for USCG dept -10&#xA;* A2   GR   03/02/11  Comment out Arrival Notice as it doesnt have CDC Info&#xA;* A3   GR   03/03/11  Added Departure Date fix&#xA;* A4   GR   03/03/11  Added Next port fix&#xA;* A5   GR   03/03/11  Added HAZ item Destination Fix&#xA;* A6   GR   05/11/11  Arrival Notice as Per USCG&#xA;* A7   GR   05/11/11  Cannot have multiple next ports. So only information about the next port.&#xA;* A8   GR   08/16/11  Appended HazPeoperName with Imdg Code&#xA;* A9   GR   08/17/11  Stopped attaching the CDC.TXT file&#xA;* 08/16/11 2.1 Updated Email Method&#xA;* A10  GR   10/25/11  Removed Weblogic API&#xA;* A11  GR   11/10/11  TOS2.1 Get Environment Variable&#xA;* A12  KM   04/11/12  2.1 updated email method - emailManager.sendEmail&#xA;* A13  AA   05/31/12  Removed the underscore from the file names of the attachments for NOA&#xA;*      RI&#x9;12/16/13  Added LONGSHOREMAN_WORK_DECLARATION('NOT PROVIDED') under VESSEL and CREW nodes and updated xsd version as per as per the USCG_ENOAD_Schema_3.3.xsd&#xA;* A14  KM   01/24/14  NOA change RLamb to Dwthompson&#xA;* A15  RI   02/10/14  Added Kokua to TUG&#xA;* A16  RI   03/04/14  Removed COMP_CERT and SFTYMGMT_CERT nodes under VESSEL as per the TT - EP000202148&#xA;*/&#xA;&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.argo.ContextHelper;&#xA;import com.navis.vessel.business.operation.Vessel;&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails;&#xA;import com.navis.framework.email.*;&#xA;import com.navis.framework.business.Roastery;&#xA;import org.springframework.core.io.ByteArrayResource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import java.util.List;&#xA;import java.util.Iterator;&#xA;import java.util.Collections;&#xA;import java.util.ArrayList;&#xA;import com.navis.inventory.business.imdg.ImdgClass;&#xA;import com.navis.inventory.business.imdg.HazardItem;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import org.apache.commons.lang.StringUtils;&#xA;//-- CDC&#xA;import org.springframework.core.io.ByteArrayResource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import org.springframework.core.io.Resource;&#xA;import java.io.InputStream;&#xA;import java.io.FileInputStream;&#xA;import java.io.DataInputStream;&#xA;import java.io.InputStreamReader;&#xA;import java.io.BufferedReader;&#xA;import java.util.HashMap;&#xA;//--To Read CrewList Spreadsheet&#xA;import java.io.File;&#xA;import java.io.FileInputStream;&#xA;import java.io.IOException;&#xA;import java.io.InputStream;&#xA;import java.util.Locale;&#xA;import jxl.Cell;&#xA;import jxl.CellType&#xA;import jxl.Sheet;&#xA;import jxl.Workbook;&#xA;import jxl.WorkbookSettings;&#xA;import jxl.read.biff.BiffException;&#xA;import jxl.DateCell;&#xA;import java.util.LinkedHashMap;&#xA;import java.util.LinkedHashSet;&#xA;import java.util.ArrayList;&#xA;import java.util.Iterator;&#xA;import java.util.Date;&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;&#xA;//Math.round(weight*2.20462262)&#xA;&#xA;public class GvyNOA extends GroovyInjectionBase {&#xA;&#x9;private static final List hazardList = [ImdgClass.IMDG_11, ImdgClass.IMDG_12, ImdgClass.IMDG_15, ImdgClass.IMDG_51, ImdgClass.IMDG_7];&#xA;&#x9;private static final String emailTo = &quot;1aktosdevteam@matson.com&quot;; //,pschroeder@matson.com //A14&#xA;&#x9;private static final String errorEmailTo = &quot;1aktosdevteam@matson.com&quot;; //,pschroeder@matson.com&#xA;&#x9;//private static final String errorEmailTo = &quot;1aktosdevteam@matson.com&quot;; //,pschroeder@matson.com&#xA;&#x9;//private static final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;//private static final String errorEmailTo = &quot;1aktosdevteam@matson.com&quot;; //,pschroeder@matson.com&#xA;&#x9;private static final String emailFrom = &quot;1aktosdevteam@matson.com&quot;;  //&quot;1aktosdevteam@matson.com&quot;;  //A14&#xA;&#x9;private static final String eol = &quot;\r\n&quot;;&#xA;&#x9;private static final String cdcClassCodeA = &quot;Division 1.1 or 1.2 Explosives&quot;;&#xA;&#x9;private static final String cdcClassCodeB = &quot;Division 1.5D Blasting Agents&quot;;&#xA;&#x9;private static final String cdcClassCodeC = &quot;Division 2.3 Poisonous Gas&quot;;&#xA;&#x9;private static final String cdcClassCodeD = &quot;Division 5.1 Oxidizing Materials&quot;;&#xA;&#x9;private static final String cdcClassCodeE = &quot;A Liquid Material of Division 6.1 'Poisonous Material'&quot;;&#xA;&#xA;    GroovyApi groovyApi = new GroovyApi();&#xA;&#xA;&#xA;    HashMap classMap = new HashMap();&#xA;&#x9;HashMap unNaMap = new HashMap();&#xA;&#x9;HashMap typweightMap = new HashMap();&#xA;&#xA;    //Changes for NOA XML TO USCG&#xA;&#x9;def util = null;  def zone = null;  def nextVV = null;  def lastVV = null;&#xA;    String arrPort = null; String eta = null; String etd = null;&#xA;    String sailDate = null; String dPort1= null;  String dPort2= null;&#xA;    String eta2 = null; String etd2 = null; String allPort = null;&#xA;    String vesselName = null; String abs = null; String sailDeptdate = null;&#xA;&#xA;    //ArrayList cdcHazardList = new ArrayList();&#xA;    HashMap cdcHazmap = new HashMap();&#xA;&#x9;VesselVisitDetails vesVisit = null;&#xA;&#x9;String crewListXml  = null;&#xA;&#xA;&#x9;public void execute(VesselVisitDetails vv, Object event)&#xA;&#x9;{&#xA;      vesVisit = vv;&#xA;&#x9; try&#xA;&#x9; {&#xA;&#x9;   if(!&quot;BARGE&quot;.equalsIgnoreCase(vv.vvdVessel.vesVesselClass.vesclassVesselType.name)) {&#xA;&#x9;          return;&#xA;&#x9;   }&#xA;&#x9;   readCdcSpreadsheet()&#xA;&#xA;&#x9;   if(!notify(vv) ) {&#xA;&#xA;&#x9;       return;&#xA;&#x9;   }&#xA;&#x9;   EmailMessage msg = new EmailMessage(ContextHelper.getThreadUserContext());&#xA;&#x9;   msg.setTo(StringUtils.split(emailTo, &quot;;,&quot;));&#xA;&#xA;&#x9;   msg.setSubject(getEnvVersion()+&quot;USCG-Matson NOD/NOA for &quot;+vv.cvdCv.toString());&#xA;&#xA;&#x9;   msg.setText(noaMessage(vv, event));&#xA;&#xA;&#x9;   msg.setReplyTo(emailFrom);&#xA;&#xA;&#x9;   msg.setFrom(emailFrom);&#xA;&#xA;       DefaultAttachment dcm = new DefaultAttachment();&#xA;       ByteArrayResource bar = new ByteArrayResource(generateDCM(vv).getBytes());&#xA;&#x9;   dcm.setAttachmentContents(bar);&#xA;&#x9;   dcm.setAttachmentName(vv.cvdCv.toString()+&quot;DCM.txt&quot;);&#xA;&#x9;   dcm.setContentType(&quot;text/html&quot;);&#xA;       //A9 - msg.addAttachment(dcm);&#xA;&#xA;&#x9;   //SET ARRIVAL XML - A2&#xA;       /*DefaultAttachment uscgArrXml = new DefaultAttachment();&#xA;       ByteArrayResource uscgArrBar = new ByteArrayResource(arrivalNoaXml().getBytes());&#xA;&#x9;   uscgArrXml.setAttachmentContents(uscgArrBar);&#xA;&#x9;   uscgArrXml.setAttachmentName(vv.cvdCv.toString()+&quot;arrival.XML&quot;);&#xA;&#x9;   uscgArrXml.setContentType(&quot;text/xml&quot;);&#xA;       msg.addAttachment(uscgArrXml); */&#xA;&#xA;       //SET DEPARTURE XML&#xA;       DefaultAttachment uscgDeptXml = new DefaultAttachment();&#xA;       ByteArrayResource uscgDeptBar = new ByteArrayResource(arrivalNoaXml().getBytes());&#xA;&#x9;   uscgDeptXml.setAttachmentContents(uscgDeptBar);&#xA;&#x9;   //A13 change by Amit Asija&#xA;&#x9;   uscgDeptXml.setAttachmentName(vv.cvdCv.toString()+getPortName(dPort1) +&quot;Arrival.xml&quot;);&#xA;&#x9;   uscgDeptXml.setContentType(&quot;text/xml&quot;);&#xA;       msg.addAttachment(uscgDeptXml);&#xA;&#xA;&#xA;       def crewName = vv.vvdVessel.vesNotes;&#xA;       if(crewName != null ) {&#xA;           crewName = crewName.toUpperCase();&#xA;       }&#xA;&#xA;/*  -- A2 Stop Reading the CrewList&#xA;       DefaultAttachment crewList = new DefaultAttachment();&#xA;       if(crewName != null) {&#xA;              //def b2 = new ByteArrayResource(DigitalAsset.findImage(crewName));&#xA;              //crewList.setAttachmentContents(b2);&#xA;              //crewList.setAttachmentName(&quot;crewlist.snp&quot;);&#xA;&#x9;       //crewList.setContentType(&quot;application/octet-stream&quot;);&#xA;&#x9;      //msg.addAttachment(crewList);&#xA;&#x9;   } else {&#xA;&#x9;      msg.setTo(StringUtils.split(errorEmailTo, &quot;;,&quot;));&#xA;&#x9;      msg.setSubject(getEnvVersion()+&quot;Error: No crewlist USCG-Matson NOD/NOA for &quot;+vv.cvdCv.toString());&#xA;&#x9;   } */&#xA;&#xA;       def  emailManager = Roastery.getBean(&quot;emailManager&quot;);&#xA;&#x9;   EmailManager mng = new EmailManager();&#xA;&#x9;   //emailManager.custSendEmail(msg);&#xA;&#x9;   emailManager.sendEmail(msg);  //A12&#xA;&#xA;&#x9; }catch(Exception e){&#xA;&#x9;&#x9; e.printStackTrace()&#xA;     }&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;public boolean notify(VesselVisitDetails vv) {&#xA;&#x9;     List units = getUnitFinder().findAllUfvOnBoard(vv.cvdCv);&#xA;&#xA;&#x9;     if(units == null) return false;&#xA;&#xA;&#x9;     Iterator iter = units.iterator();&#xA;&#x9;     while(iter.hasNext() ) {&#xA;&#x9;        def ufv = iter.next();&#xA;&#x9;        if(ufv.ufvUnit.getUnitGoods().getGdsHazards() == null) continue;&#xA;&#x9;        Iterator hazardIter = ufv.ufvUnit.getUnitGoods().getGdsHazards().getHazardItemsIterator();&#xA;&#x9;        while(hazardIter.hasNext()) {&#xA;&#x9;           def hazard = hazardIter.next();&#xA;               def imdgClass = hazard.getHzrdiImdgCode() != null ? hazard.getHzrdiImdgCode().getKey() : null&#xA;               def nbrType = hazard.getHzrdiNbrType() != null ? hazard.getHzrdiNbrType().getKey() : null&#xA;&#x9;&#x9;&#x9;   boolean isUnitCdc = isUnitCdc(imdgClass,hazard.hzrdiUNnum,nbrType,hazard.hzrdiWeight)&#xA;&#xA;               if(isUnitCdc){&#xA;&#x9;&#x9;&#x9;&#x9;   return true;&#xA;               }&#xA;&#x9;        }&#xA;&#x9;     }&#xA;&#x9;     return false;&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;public String getABS(String id) {&#xA;&#x9;   if(id.equalsIgnoreCase(&quot;HAL&quot;)) return &quot;676972&quot;;&#xA;&#x9;   if(id.equalsIgnoreCase(&quot;LOA&quot;)) return &quot;676973&quot;;&#xA;&#x9;   if(id.equalsIgnoreCase(&quot;ALE&quot;)) return &quot;978516&quot;;&#xA;&#x9;   if(id.equalsIgnoreCase(&quot;ISL&quot;)) return &quot;933804&quot;;&#xA;&#x9;   return &quot;&quot;;&#xA;&#x9;}&#xA;&#xA;&#x9;public String getRadioCallSign(String id) {&#xA;     id = id.toUpperCase();&#xA;&#x9; if(&quot;HENRY SR&quot;.equalsIgnoreCase(id))return &quot;WTW9260&quot;;&#xA;&#x9; if(&quot;MARY CATHERINE&quot;.equalsIgnoreCase(id)) return &quot;WTW9261&quot;;&#xA;&#x9; if(&quot;CAP LES EASOM&quot;.equalsIgnoreCase(id)) return &quot;WTW8587&quot;;&#xA;    &#x9; if(&quot;KOKUA&quot;.equalsIgnoreCase(id)) return &quot;WBR3137&quot;;&#xA;     return &quot;WTW1111&quot;;&#xA;&#x9;}&#xA;&#xA;&#x9;public String getOfficialNbr(String id) {&#xA;     id = id.toUpperCase();&#xA;&#x9; if(&quot;HENRY SR&quot;.equalsIgnoreCase(id))return &quot;7128679&quot;;&#xA;&#x9; if(&quot;MARY CATHERINE&quot;.equalsIgnoreCase(id)) return &quot;7209435&quot;;&#xA;&#x9; if(&quot;CAP LES EASOM&quot;.equalsIgnoreCase(id)) return &quot;535868&quot;;&#xA;&#x9; if(&quot;KOKUA&quot;.equalsIgnoreCase(id)) return &quot;6516934&quot;;&#xA;     return &quot;111111&quot;;&#xA;&#x9;}&#xA;&#xA;&#x9;public String getPort(String id) {&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;HIL&quot;)) return &quot;Hilo,Hawaii&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;KHI&quot;)) return &quot;Kawaihae,Hawaii&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;NAW&quot;)) return &quot;Nawiliwili,Hawaii&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;KAH&quot;)) return &quot;Kahului,Hawaii&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;EBY&quot;)) return &quot;EBEYE,MARSHALL ISLANDS&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;JIS&quot;)) return &quot;JOHNSTON ISLAND,MARSHALL ISLANDS&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;KWJ&quot;)) return &quot;KWAJALEIN,MARSHALL ISLANDS&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;LNI&quot;)) return &quot;Lanai,Hawaii&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;MAJ&quot;)) return &quot;MAJURO,MARSHALL ISLANDS&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;MOL&quot;)) return &quot;Molokai,Hawaii&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;HON&quot;)) return &quot;Honolulu, Hawaii&quot;;&#xA;&#x9;    return id;&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;public String getPortName(String id) {&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;HIL&quot;)) return &quot;Hilo&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;KHI&quot;)) return &quot;Kawaihae&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;NAW&quot;)) return &quot;Nawiliwili&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;KAH&quot;)) return &quot;Kahului&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;EBY&quot;)) return &quot;EBEYE&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;JIS&quot;)) return &quot;JOHNSTON ISLAND&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;KWJ&quot;)) return &quot;KWAJALEIN&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;LNI&quot;)) return &quot;Lanai&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;MAJ&quot;)) return &quot;MAJURO&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;MOL&quot;)) return &quot;Molokai&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;HON&quot;)) return &quot;Honolulu&quot;;&#xA;&#xA;&#x9;&#x9;if(id.equalsIgnoreCase(&quot;Hilo,Hawaii&quot;)) return &quot;Hil&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;Kawaihae,Hawaii&quot;)) return &quot;Khi&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;Nawiliwili,Hawaii&quot;)) return &quot;Naw&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;Kahului,Hawaii&quot;)) return &quot;Kah&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;EBEYE,MARSHALL ISLANDS&quot;)) return &quot;Eby&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;JOHNSTON ISLAND,MARSHALL ISLANDS&quot;)) return &quot;Jis&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;KWAJALEIN,MARSHALL ISLANDS&quot;)) return &quot;Kwj&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;Lanai,Hawaii&quot;)) return &quot;Lni&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;MAJURO,MARSHALL ISLANDS&quot;)) return &quot;Maj&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;Molokai,Hawaii&quot;)) return  &quot;Mol&quot;;&#xA;&#x9;    if(id.equalsIgnoreCase(&quot;Honolulu, Hawaii&quot;)) return &quot;Hon&quot;;&#xA;&#x9;    return id;&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;public String noaMessage(VesselVisitDetails vv, Object event) {&#xA;&#x9;   util = getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;&#x9;   zone = vv.cvdCv.cvComplex.getTimeZone();&#xA;&#x9;   nextVV = vv.findNextVvd();&#xA;&#x9;   lastVV = null;&#xA;&#x9;   if(nextVV != null) lastVV = nextVV.findNextVvd();&#xA;&#xA;&#x9;   StringBuffer buf = new StringBuffer();&#xA;&#x9;   arrPort = getPort(vv.cvdCv.cvFacility.id);&#xA;&#x9;   eta = null;&#xA;&#x9;   etd = null;&#xA;&#x9;   //sailDate = util.formatDateTime(vv.cvdCv.cvATD, zone);&#xA;&#x9;   sailDate = util.formatDateTime(event.getEvent().getEventTime(), zone);&#xA;&#x9;   dPort1= null;&#xA;&#x9;   if(nextVV != null) {&#xA;&#x9;      dPort1=  getPort(nextVV.cvdCv.cvFacility.id);;&#xA;&#x9;      eta =  util.formatDateTime(nextVV.cvdETA, zone);&#xA;&#x9;      etd =  util.formatDateTime(nextVV.cvdETD, zone);&#xA;&#x9;   }&#xA;&#x9;   dPort2= null;&#xA;&#x9;   if(lastVV != null) {&#xA;&#x9;      dPort2 = getPort(lastVV.cvdCv.cvFacility.id );&#xA;&#x9;   }&#xA;&#x9;   eta2 = null;&#xA;&#x9;   etd2 = null;&#xA;&#x9;   allPort = dPort1;&#xA;&#x9;   if(dPort2 != null &amp;&amp; dPort2 != arrPort)  {&#xA;&#x9;       eta2 = util.formatDateTime(lastVV.cvdETA, zone);&#xA;&#x9;       etd2 = util.formatDateTime(lastVV.cvdETD, zone);&#xA;&#x9;       allPort += &quot;/&quot;+dPort2;&#xA;&#x9;   }&#xA;&#x9;   vesselName = vv.vvdVessel.vesName&#xA;&#x9;   abs = getABS(vv.vvdVessel.vesId);&#xA;&#x9;   def contact = &quot;Dave Thompson, ph:(808)848-1258, cell:(808)479-9872&quot;;   //A14&#xA;&#x9;   buf.append(&quot;Matson Navigation Company, Honolulu, Hawaii                  &quot;+eol);&#xA;&#x9;   buf.append(eol);&#xA;&#x9;   buf.append(&quot;Notice of Departure&quot;+eol);&#xA;&#x9;   buf.append(&quot;-------------------&quot;+eol);&#xA;&#x9;   buf.append(&quot; 1) Arrival Port(s): ${allPort}&quot;+eol);&#xA;&#x9;   buf.append(&quot; 2) ETA: ${eta} (${dPort1})&quot;+eol);&#xA;&#x9;   buf.append(&quot;    ETD: ${etd} (${dPort1})&quot;+eol);&#xA;&#x9;   if(eta2 != null) {&#xA;&#x9;   buf.append(&quot; 2) ETA: ${eta2} (${dPort2})&quot;+eol);&#xA;&#x9;   buf.append(&quot;    ETD: ${etd2} (${dPort2})&quot;+eol);&#xA;&#xA;&#x9;   }&#xA;&#x9;   buf.append(&quot; 3) ${vesselName} (unmanned barge) &quot;+eol);&#xA;&#x9;   buf.append(&quot; 4) USA &quot;+eol);&#xA;&#x9;   buf.append(&quot; 5) N/A &quot;+eol);&#xA;&#x9;   buf.append(&quot; 6) ABS, official nbr. ${abs}&quot;+eol);&#xA;&#x9;   buf.append(&quot;10) ETD: $sailDate &quot;+eol);&#xA;&#x9;   buf.append(&quot;    Port of: ${arrPort}&quot;+eol);&#xA;&#x9;   buf.append(&quot;11) ${contact}&quot;+eol);&#xA;&#x9;   buf.append(&quot;12) Dock-side, port of: Honolulu,Hawaii&quot;+eol);&#xA;&#x9;   buf.append(&quot;13) Per DCM&quot;+eol);&#xA;&#x9;   buf.append(&quot;14) Per DCM&quot;+eol);&#xA;&#x9;   buf.append(&quot;15) Per DCM&quot;+eol);&#xA;&#x9;   buf.append(&quot;16) Containerized cargo, freight all kinds.&quot;+eol);&#xA;&#x9;   buf.append(&quot;17) Equipment operational per 164.35&quot;+eol);&#xA;&#x9;   buf.append(&quot;18) Unmanned barge, no crew&quot;+eol);&#xA;&#x9;   buf.append(&quot;19) Unmanned barge, no personnel on board&quot;+eol);&#xA;&#x9;   buf.append(eol);&#xA;&#x9;   buf.append(&quot;Notice of Arrival &quot;+eol);&#xA;&#x9;   buf.append(&quot;------------------&quot;+eol);&#xA;&#x9;   buf.append(&quot; 1) Arrival Port(s): ${allPort}&quot;+eol);&#xA;&#x9;   buf.append(&quot; 2) ETA: ${eta} (${dPort1})&quot;+eol);&#xA;&#x9;   buf.append(&quot;    ETD: ${etd} (${dPort1})&quot;+eol);&#xA;&#x9;   if(eta2 != null) {&#xA;&#x9;   buf.append(&quot; 2) ETA: ${eta2} (${dPort2})&quot;+eol);&#xA;&#x9;   buf.append(&quot;    ETD: ${etd2} (${dPort2})&quot;+eol);&#xA;&#xA;&#x9;   }&#xA;&#x9;   buf.append(&quot; 3) ${vesselName} (unmanned barge) &quot;+eol);&#xA;&#x9;   buf.append(&quot; 4) USA &quot;+eol);&#xA;&#x9;   buf.append(&quot; 5) N/A &quot;+eol);&#xA;&#x9;   buf.append(&quot; 6) ABS, official nbr. ${abs}&quot;+eol);&#xA;&#x9;   buf.append(&quot;10) ETD: $sailDate &quot;+eol);&#xA;&#x9;   buf.append(&quot;    Last Port: ${arrPort}&quot;+eol);&#xA;&#x9;   buf.append(&quot;11) ${contact}&quot;+eol);&#xA;&#x9;   buf.append(&quot;12) Dock-side as noted in NOD&quot;+eol);&#xA;&#x9;   buf.append(&quot;13) as noted in NOD&quot;+eol);&#xA;&#x9;   buf.append(&quot;14) as noted in NOD&quot;+eol);&#xA;&#x9;   buf.append(&quot;15) as noted in NOD&quot;+eol);&#xA;&#x9;   buf.append(&quot;16) Containerized cargo, freight all kinds.&quot;+eol);&#xA;&#x9;   buf.append(&quot;17) Equipment operational per 164.35&quot;+eol);&#xA;&#x9;   buf.append(&quot;18) Unmanned barge, no crew&quot;+eol);&#xA;&#x9;   buf.append(&quot;19) Unmanned barge, no personnel on board&quot;+eol);&#xA;&#x9;   buf.append(eol);&#xA;&#xA;&#x9;   return buf.toString();&#xA;&#x9;}&#xA;&#xA;&#x9;public String generateDCM(VesselVisitDetails vv) {&#xA;&#x9;   StringBuffer dcm = new StringBuffer();&#xA;&#x9;   String pageLine = &quot;    DCM DATA FOR USCG OUTBOUND FROM Honolulu BY DESCRIPTION     Page &quot;;&#xA;&#x9;   int page = 1;&#xA;&#x9;   int pagesize = 18; // (62-8)/3;&#xA;&#x9;   int cnt = 0;&#xA;&#x9;   StringBuffer header = new StringBuffer();&#xA;&#x9;   header.append(&quot;                        &quot;);&#xA;&#x9;   header.append(vv.vvdVessel.vesName);&#xA;&#x9;   header.append(&quot; Voyage: &quot;);&#xA;&#x9;   header.append(vv.vvdObVygNbr);&#xA;&#x9;   header.append(&quot;\n\n                        Official Number: &quot;);&#xA;&#x9;   header.append(getABS(vv.vvdVessel.vesId));&#xA;&#x9;   header.append(&quot;\n============================================================================&quot;+eol);&#xA;&#x9;   header.append(&quot; Description&quot;+eol);&#xA;&#x9;   header.append(&quot; Pkg No. Stowage Weight  Container    Dport Shipment#  Shipper&quot;+eol);&#xA;&#x9;   header.append(&quot; ------- ------- ------- ------------ ----- ---------- ---------------------&quot;+eol);&#xA;&#xA;&#x9;   dcm.append(pageLine);&#xA;&#x9;   dcm.append(page);&#xA;&#x9;   dcm.append(eol);&#xA;&#x9;   dcm.append(header);&#xA;&#x9;   page++;&#xA;&#xA;       // todo, sort order.&#xA;&#x9;   List units = getUnitFinder().findAllUfvOnBoard(vv.cvdCv);&#xA;           if(units == null) return dcm.toString;&#xA;&#xA;&#x9;   ArrayList hazardList = new ArrayList();&#xA;&#x9;   ArrayList cdcHazardList = null;&#xA;&#x9;   Iterator iter = units.iterator();&#xA;&#x9;   while(iter.hasNext() ) {&#xA;&#x9;&#x9;def ufv = iter.next();&#xA;&#x9;&#x9;//if(ufv.ufvUnit.getUnitGoods() == null) continue;&#xA;&#x9;&#x9;if(ufv.ufvUnit.getUnitGoods().getGdsHazards() == null) continue;&#xA;&#x9;&#x9;Iterator hazardIter = ufv.ufvUnit.getUnitGoods().getGdsHazards().getHazardItemsIterator();&#xA;        cdcHazardList = new ArrayList();&#xA;&#x9;&#x9;while(hazardIter.hasNext()) {&#xA;&#x9;&#x9;   def hazard = hazardIter.next();&#xA;            def imdgClass = hazard.getHzrdiImdgCode() != null ? hazard.getHzrdiImdgCode().getKey() : null&#xA;            def nbrType = hazard.getHzrdiNbrType() != null ? hazard.getHzrdiNbrType().getKey() : null&#xA;&#x9;&#x9;&#x9;boolean isUnitCdc = isUnitCdc(imdgClass,hazard.hzrdiUNnum,nbrType,hazard.hzrdiWeight)&#xA;            if(isUnitCdc){&#xA; &#x9;&#x9;&#x9;  cdcHazardList.add(hazard) //A2 Added for Xml&#xA;              HazardItemHolder item = new HazardItemHolder(ufv,hazard,classMap,unNaMap);&#xA;&#x9;&#x9;      hazardList.add(item);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;      }&#xA;&#x9;&#x9;  //105&#xA;&#x9;&#x9;  cdcHazmap.put(ufv,cdcHazardList)&#xA;&#x9;    }&#xA;        //println(&quot;cdcHazmap ===================&quot;+(cdcHazmap != null ? cdcHazmap.size() : &quot;--------NULL-------&quot;));&#xA;&#x9;   Collections.sort(hazardList);  //Dont Need This sorting anymore&#xA;&#xA;&#xA;&#xA;&#xA;           iter = hazardList.iterator();&#xA;&#x9;   while(iter.hasNext() ) {&#xA;&#x9;&#x9;   def item = iter.next();&#xA;&#x9;&#x9;   def ufv = item.ufv;&#xA;&#x9;&#x9;   def hazard = item.hazard;&#xA;&#x9;&#x9;   if(cnt == pagesize) {&#xA;&#x9;&#x9;&#x9;   dcm.append(pageLine);&#xA;&#x9;&#x9;&#x9;   dcm.append(page);&#xA;&#x9;&#x9;&#x9;   dcm.append(eol);&#xA;&#x9;&#x9;&#x9;   dcm.append(header);&#xA;&#x9;&#x9;&#x9;   page++;&#xA;&#x9;&#x9;&#x9;   cnt = 1;&#xA;&#x9;&#x9;   } else {&#xA;&#x9;&#x9;      cnt ++;&#xA;&#x9;&#x9;   }&#xA;&#x9;&#x9;   dcm.append(formatDcmLine(ufv,hazard));&#xA;&#xA;&#x9;     }&#xA;&#xA;&#x9;  return dcm.toString();&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;private String formatDcmLine(ufv,hazard) {&#xA;&#x9;&#x9;StringBuffer buf = new StringBuffer();&#xA;&#x9;&#x9;buf.append(description(hazard));&#xA;&#x9;&#x9;buf.append(eol);&#xA;&#x9;&#x9;buf.append(&quot; &quot;);&#xA;&#x9;&#x9;// Pkg No.&#xA;&#x9;&#x9;buf.append(pad(hazard.hzrdiQuantity,hazard.hzrdiPackageType,7));&#xA;&#x9;&#x9;buf.append(&quot; &quot;);&#xA;&#x9;&#x9;//Stowage&#xA;&#x9;&#x9;if(ufv.getUfvLastKnownPosition() != null) {&#xA;&#x9;&#x9;   buf.append(pad(ufv.getUfvLastKnownPosition().posSlot,7));&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;   buf.append(pad(&quot;&quot;,7));&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;buf.append(&quot; &quot;);&#xA;&#x9;&#x9;// Weight&#xA;&#x9;&#x9;buf.append(padWeight(hazard.hzrdiWeight,7));&#xA;&#x9;&#x9;buf.append(&quot; &quot;);&#xA;&#x9;&#x9;// Container&#xA;&#x9;&#x9;buf.append(pad(ufv.ufvUnit.unitId,12));&#xA;&#x9;&#x9;buf.append(&quot; &quot;);&#xA;&#x9;&#x9;// Dport&#xA;&#x9;&#x9;buf.append(pad(ufv.getFieldValue(&quot;ufvUnit.unitRouting.rtgPOD1.pointId&quot;),5));&#xA;&#x9;&#x9;buf.append(&quot; &quot;);&#xA;&#x9;&#x9;// Shipment #&#xA;&#x9;&#x9;buf.append(pad(ufv.ufvUnit.getUnitGoods().gdsBlNbr,10));&#xA;&#x9;&#x9;buf.append(&quot; &quot;);&#xA;&#x9;&#x9;// Shipper&#xA;&#x9;&#x9;buf.append(pad(ufv.ufvUnit.getUnitGoods().getFieldValue(&quot;gdsShipperBzu.bzuName&quot;),21));&#xA;&#x9;&#x9;buf.append(eol);&#xA;&#x9;&#x9;buf.append(eol);&#xA;&#x9;&#x9;return buf;&#xA;&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;private String pad(Object data1, Object data2, int size) {&#xA;&#x9;&#x9;&#x9;if(data1 == null) data1 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;else data1 = data1.toString()+&quot; &quot;;&#xA;&#x9;&#x9;&#x9;if(data2 == null) data2 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;pad(data1+data2,size);&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;private String pad(String data, int size) {&#xA;&#x9;&#x9;if(data == null) data = &quot;&quot;;&#xA;&#x9;&#x9;StringBuffer buf = new StringBuffer();&#xA;&#x9;&#x9;buf.append(data);&#xA;&#x9;&#x9;if(buf.length() &gt; size) {&#xA;&#x9;&#x9;&#x9;buf.setLength(size);&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;while(buf.length() &lt; size) buf.append(&quot; &quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return buf.toString();&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;private String padWeight(Double weight, int size) {&#xA;&#x9;&#x9;String result = &quot;&quot;;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;double weightDbl = weight.doubleValue();&#xA;&#x9;&#x9;&#x9;weightDbl = weightDbl/2.20462262;&#xA;&#x9;&#x9;&#x9;result = Math.round(weightDbl)+&quot;LB&quot;;&#xA;&#x9;&#x9;} catch (Exception e) {&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return pad(result,size);&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;private String description(hazard) {&#xA;&#x9;   StringBuffer buf = new StringBuffer();&#xA;&#x9;   String properName = hazard.hzrdiProperName;&#xA;&#x9;   String techName   = hazard.hzrdiTechName;&#xA;&#x9;   String imdgclass  = hazard.hzrdiImdgClass.name;&#xA;&#x9;   def im01       = hazard.hzrdiSecondaryIMO1;&#xA;&#x9;   def im02       = hazard.hzrdiSecondaryIMO2;&#xA;&#x9;   String un         = hazard.hzrdiUNnum;&#xA;&#x9;   String nbrType = hazard.getHzrdiNbrType() != null ? hazard.getHzrdiNbrType().getKey() : null&#xA;&#x9;   def pkg           = hazard.hzrdiPackingGroup;&#xA;&#x9;   if(pkg != null) pkg = &quot;, PG&quot;+pkg.name;&#xA;&#x9;   else pkg = &quot;&quot;;&#xA;&#x9;   def flashPoint    = hazard.hzrdiFlashPoint;&#xA;&#x9;   def limited&#x9;     = hazard.hzrdiLtdQty ? &quot;, LTD QTY&quot; : &quot;&quot;;&#xA;&#x9;   def marine        = hazard.hzrdiMarinePollutants ? &quot;, MARINE POLLUTANTS&quot; : &quot;&quot;;&#xA;&#xA;&#xA;&#x9;   buf.append(&quot; &quot;);&#xA;&#x9;   if(properName == null ) properName = &quot;&quot;;&#xA;&#x9;   buf.append(properName);&#xA;&#x9;   if(techName != null ) {&#xA;&#x9;      buf.append(&quot;, &quot;);&#xA;&#x9;      buf.append(techName);&#xA;&#x9;   }&#xA;&#x9;   buf.append(&quot;, &quot;);&#xA;&#x9;   buf.append(imdgclass);&#xA;&#x9;   if(im01 != null || im02 != null) buf.append(&quot;,(&quot;);&#xA;&#x9;   if(im01 != null) buf.append(im01.name);&#xA;&#x9;   if(im02 != null) {&#xA;&#x9;      buf.append(&quot;, &quot;);&#xA;&#x9;      buf.append(im02.name);&#xA;&#x9;   }&#xA;&#x9;   if(im01 != null || im02 != null) buf.append(&quot;)&quot;);&#xA;&#x9;   if(un != null) {&#xA;&#x9;      buf.append(&quot;, &quot;+nbrType);&#xA;&#x9;      buf.append(un);&#xA;&#x9;   }&#xA;&#x9;   buf.append(pkg);&#xA;&#x9;   if(flashPoint != null) {&#xA;&#x9;      buf.append(&quot;, F/P-&quot;);&#xA;&#x9;      buf.append(flashPoint);&#xA;&#x9;      buf.append(&quot;C&quot;);&#xA;&#x9;   }&#xA;&#x9;   buf.append(limited);&#xA;&#x9;   buf.append(marine);&#xA;&#xA;&#x9;   return buf;&#xA;&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;public  String getEnvVersion()  {&#xA;      String envType = groovyApi.getReferenceValue(&quot;ENV&quot;, &quot;ENVIRONMENT&quot;, null, null, 1)&#xA;&#x9;  if(&quot;PRODUCTION&quot;.equals(envType)){&#xA;&#x9;&#x9; return &quot;&quot;;&#xA;      }&#xA;      return envType+&quot; &quot;;&#xA;    }&#xA;&#xA;      //----- CDC CODE -----------------&#xA;    public void readCdcSpreadsheet()&#xA;     {&#xA;       try{&#xA;         ByteArrayResource byteResource  = new ByteArrayResource(DigitalAsset.findImage(&quot;CDC&quot;));&#xA;         InputStream inputStream = byteResource.getInputStream()&#xA;         DataInputStream dstream = new DataInputStream(inputStream);&#xA;         BufferedReader br = new BufferedReader(new InputStreamReader(dstream));&#xA;         int count = 0;&#xA;         String line;&#xA;         while ((line = br.readLine()) != null) {&#xA;            if(count != 0) { processLine(line,count) }&#xA;            count++;&#xA;           }&#xA;&#xA;         }catch(Exception e){&#xA;           e.printStackTrace();&#xA;         }&#xA;      }&#xA;&#xA;      //process each line of code&#xA;      public void processLine(String msg, int lineNum)&#xA;     {&#xA;        try{&#xA;           String[] cdcColValues = msg.split(&quot;,&quot;);&#xA;&#xA;           if(cdcColValues[0] != null &amp;&amp; cdcColValues[0].trim().length() &gt; 0){&#xA;              String ImdgClass = cdcColValues[0];&#xA;              String classType = cdcColValues[2] != null &amp;&amp; cdcColValues[2].trim().length() &gt; 0 ? cdcColValues[2] : &quot;NA&quot;;&#xA;              classMap.put(ImdgClass, classType);&#xA;           }else if(cdcColValues[1] != null &amp;&amp; cdcColValues[1].trim().length() &gt; 0){&#xA;              String unNa = cdcColValues[1];&#xA;              String unNaType = cdcColValues[2] != null &amp;&amp; cdcColValues[2].trim().length() &gt; 0 ? cdcColValues[2] : &quot;NA&quot;;&#xA;              unNaMap.put(unNa, unNaType);&#xA;           }&#xA;&#xA;           //Populate Map for material type&#xA;           if(lineNum == 1 || lineNum == 2 || lineNum ==3)&#xA;          {&#xA;              if(lineNum == 2 &amp;&amp; (cdcColValues[13] != null &amp;&amp; cdcColValues[13].trim().length() &gt; 0)&#xA;                &amp;&amp; (cdcColValues[16] != null &amp;&amp; cdcColValues[16].trim().length() &gt; 0)){&#xA;                   typweightMap.put(cdcColValues[13], cdcColValues[16]);&#xA;              }&#xA;             else if((cdcColValues[12] != null &amp;&amp; cdcColValues[12].trim().length() &gt; 0)&#xA;                &amp;&amp; (cdcColValues[15] != null &amp;&amp; cdcColValues[15].trim().length() &gt; 0))&#xA;             {&#xA;                  typweightMap.put(cdcColValues[12], cdcColValues[15]);&#xA;              }&#xA;          }&#xA;      }catch(Exception e){&#xA;          e.printStackTrace();&#xA;     }&#xA;   }&#xA;&#xA;     //Check if Unit is a CDC unit&#xA;    public boolean isUnitCdc(String hazImdg,String unNum,String nbrType,Double hazWeight)&#xA;   {&#xA;         String imdg = hazImdg;//get unit class&#xA;         String un = nbrType+unNum; //hard coding the UN will need to ADD NA&#xA;         Double dblWeight = hazWeight != null ? hazWeight*2.20462262 : null;&#xA;&#x9;&#x9; long weight = dblWeight != null ? Math.round(dblWeight.doubleValue()) : 0&#xA;         boolean isUnitCdc = false;&#xA;         try{&#xA;&#xA;              if(imdg != null &amp;&amp; classMap.containsKey(imdg)){&#xA;                  return isUnitCdc = true;&#xA;              }else if(unNum != null &amp;&amp; &quot;1.5D&quot;.equalsIgnoreCase(unNum)){&#xA;                   return isUnitCdc = true;&#xA;&#x9;&#x9;&#x9;  }&#xA;              else if(un != null &amp;&amp; unNaMap.containsKey(un))&#xA;              {&#xA;&#x9;            if(&quot;Permit&quot;.equalsIgnoreCase(unNaMap.get(un))){&#xA;                      return isUnitCdc = true;&#xA;&#x9;            }&#xA;&#x9;&#x9;&#x9;&#x9;else if(unNaMap.get(un) != null &amp;&amp; hazWeight == null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return isUnitCdc = true;&#xA;                }&#xA;                else{&#xA;   &#x9;              String unNaType = unNaMap.get(un) != null ? (String)unNaMap.get(un) : null;&#xA;  &#x9;              isUnitCdc = unNaType != null ? weight &gt;= Long.parseLong(typweightMap.get(unNaType).toString())  : false;&#xA;  &#x9;              return isUnitCdc;&#xA;&#x9;            }&#xA;              }//Else if ends&#xA;             }catch(Exception e){&#xA;                e.printStackTrace();&#xA;             }&#xA;           return isUnitCdc;&#xA;         }&#xA;&#xA;&#xA;  //A1 - ADDING CODE FOR NOA XML TO USCG&#xA;  public String populateCDCList(){&#xA;       //cdcHazmap  -  we can add map&#xA;&#x9;   //A8&#xA;&#x9;   def gvyCmisCrsUtil = getGroovyClassInstance(&quot;GvyCmisCargoStatusUtil&quot;);&#xA;&#xA;&#x9;   //ArrayList cdcList = cdcHazardList;&#xA;       ArrayList cdcList = null;&#xA;&#x9;   def aUfv = null;  def dest = null;&#xA;       String cdcXml = null;&#xA;&#x9;   StringBuffer strCdcBuff = new StringBuffer()&#xA;&#x9;   //Removed the Arrival xml&#xA;&#x9;   //cdcXml = &quot;&lt;CARGO&gt;&lt;GENERAL_DESC&gt;Containerized Cargo Vessel - &quot;+vesselName+&quot;&lt;/GENERAL_DESC&gt;&lt;CDC_ON_BOARD&gt;Yes&lt;/CDC_ON_BOARD&gt;&lt;CARGO&gt;Yes&lt;/CARGO&gt;&lt;/CARGO&gt;&lt;CDC_LIST&gt;&quot;;&#xA;&#x9;   //Collections.sort(cdcList);&#xA;        def writer = new StringWriter();&#xA;&#x9;&#x9;def xml = new groovy.xml.MarkupBuilder(writer);&#xA;&#x9;&#x9;xml.CARGO(){&#xA;&#x9;&#x9;&#x9;GENERAL_DESC(&quot;Containerized Cargo Vessel - &quot;+vesselName)&#xA;&#x9;&#x9;&#x9;CDC_ON_BOARD('Yes')&#xA;&#x9;&#x9;&#x9;CARGO('Yes')&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;writer.toString()&#xA;&#xA;&#x9;   xml.CDC_LIST(){&#xA;&#x9;   Iterator it1 = cdcHazmap.keySet().iterator(); //A5&#xA;       while (it1.hasNext())&#xA;&#x9;   {&#xA;          aUfv = it1.next();&#xA;&#x9;&#x9;  cdcList = cdcHazmap.get(aUfv)&#xA;          Iterator iter = cdcList.iterator();&#xA; &#x9;      while(iter.hasNext() ) {&#xA;&#x9;&#x9;   def item = iter.next();&#xA;&#x9;       String imdgclass  = item.hzrdiImdgClass.name;&#xA;&#x9;&#x9;   String hazProper = item.hzrdiProperName != null ? gvyCmisCrsUtil.replaceQuotesUtil(item.hzrdiProperName) : ''&#xA;  &#x9;       String un = item.hzrdiUNnum;&#xA;&#x9;       String nbrType = item.getHzrdiNbrType() != null ? item.getHzrdiNbrType().getKey() : null&#xA;           String weight = item.hzrdiWeight&#xA; &#x9;&#x9;&#x9;dest = aUfv.ufvUnit.unitGoods.gdsDestination&#xA;&#xA; &#x9;&#x9;String cdcClass = &quot; &quot;;&#xA;  &#x9;&#x9;&#x9;if (imdgclass.contains(&quot;1.1&quot;) || imdgclass.contains(&quot;1.2&quot;)) {&#xA;  &#x9;&#x9;&#x9;&#x9;cdcClass = &quot;A&quot;;&#xA;  &#x9;&#x9;&#x9;} else if (imdgclass.contains(&quot;1.5&quot;)) {&#xA;  &#x9;&#x9;&#x9;&#x9;cdcClass = &quot;B&quot;;&#xA;  &#x9;&#x9;&#x9;} else if (imdgclass.contains(&quot;2.3&quot;)) {&#xA;  &#x9;&#x9;&#x9;&#x9;cdcClass  = &quot;C&quot;&#xA;  &#x9;&#x9;&#x9;} else if (imdgclass.contains(&quot;5.1&quot;)) {&#xA;  &#x9;&#x9;&#x9;&#x9;cdcClass  = &quot;D&quot;&#xA;  &#x9;&#x9;&#x9;} else if (imdgclass.contains(&quot;6.1&quot;)) {&#xA;  &#x9;&#x9;&#x9;&#x9;cdcClass = &quot;E&quot;;&#xA;  &#x9;&#x9;&#x9;} else {&#xA;  &#x9;&#x9;&#x9;&#x9;cdcClass = &quot; &quot;; //no class can be determined&#xA;  &#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;xml.CDC(){&#xA;&#x9;&#x9;&#x9;&#x9;CDC_NAME(imdgclass+&quot; &quot;+hazProper)&#xA;&#x9;&#x9;&#x9;&#x9;UN_NUMBER(nbrType+un)&#xA;&#x9;&#x9;&#x9;&#x9;AMT(weightFromKgToLB(weight)+&quot; LB&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;DESTINATION_COUNTRY(&quot;UNITED STATES&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;DESTINATION_COUNTRY_CODE(&quot;US&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;DESTINATION_STATE(&quot;Hawaii&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;DESTINATION_PORT_NAME(getPortName(dest))&#xA;&#x9;&#x9;&#x9;&#x9;DESTINATION_PORT_CODE()&#xA;&#x9;&#x9;&#x9;&#x9;DESTINATION_PLACE(getPortName(dest)+&quot;, HI&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;CDC_CLASS(cdcClass)&#xA;&#x9;&#x9;&#x9;&#x9;PACKAGED(&quot;Yes&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;RESIDUE(&quot;Yes&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#xA;&#xA;           /*String aCdcItem = &quot;&lt;CDC&gt;&lt;CDC_NAME&gt;&quot;+imdgclass+&quot; &quot;+hazProper+&quot;&lt;/CDC_NAME&gt; &quot;+  //A8&#xA;             &quot;&lt;UN_NUMBER&gt;&quot;+nbrType+un+&quot;&lt;/UN_NUMBER&gt;&quot;+&#xA;              &quot;&lt;AMT&gt;&quot;+weightFromKgToLB(weight)+&quot; LB&lt;/AMT&gt; &quot;+&#xA;          &#x9;&quot;&lt;DESTINATION_COUNTRY&gt;UNITED STATES&lt;/DESTINATION_COUNTRY&gt; &quot;+&#xA;              &quot;&lt;DESTINATION_COUNTRY_CODE&gt;US&lt;/DESTINATION_COUNTRY_CODE&gt;&quot;+&#xA;&#x9;&#x9;&#x9;   &quot;&lt;DESTINATION_STATE&gt;Hawaii&lt;/DESTINATION_STATE&gt;&quot;+&#xA;          &#x9;&quot;&lt;DESTINATION_PORT_NAME&gt;&quot;+getPortName(dest)+&quot;&lt;/DESTINATION_PORT_NAME&gt;&quot;+&#xA;           &#x9;&quot;&lt;DESTINATION_PORT_CODE&gt;&lt;/DESTINATION_PORT_CODE&gt;&quot;+&#xA;          &#x9;&quot;&lt;DESTINATION_PLACE&gt;&quot;+getPortName(dest)+&quot;, HI&quot;+&quot;&lt;/DESTINATION_PLACE&gt; &quot;+&#xA;            &quot;&lt;CDC_CLASS&gt;&quot; +&#xA;            cdcClass +&#xA;            &quot;&lt;/CDC_CLASS&gt;&lt;PACKAGED&gt;Yes&lt;/PACKAGED&gt;&lt;RESIDUE&gt;Yes&lt;/RESIDUE&gt;&lt;/CDC&gt;&quot;;&#xA;&#xA;              strCdcBuff.append(aCdcItem); */&#xA;&#x9;&#x9;     }// Inner while Ends&#xA;&#xA;&#x9;&#x9;  }//Outer while Ends&#xA;&#x9;&#x9;} // CD_LIST tag ends&#xA;&#x9;&#x9;&#x9;xml.PREVIOUS_FOREIGN_PORT_LIST{&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;writer.toString()&#xA;&#x9;    //cdcXml= cdcXml+strCdcBuff.toString()+&quot;&lt;/CDC_LIST&gt;&lt;PREVIOUS_FOREIGN_PORT_LIST/&gt; &quot;;&#xA;&#x9;&#x9;//return cdcXml;&#xA;&#x9;}&#xA;&#xA;&#xA;&#x9;public String populateCrewlist(){&#xA;&#x9;  crewListXml = procCrewList(vesVisit)&#xA;&#x9;  return crewListXml;&#xA;&#x9;}&#xA;&#xA;&#xA;&#x9;public String populateNoCrewList(){&#xA;&#x9;&#x9;def writer = new StringWriter();&#xA;&#x9;&#x9;def xml = new groovy.xml.MarkupBuilder(writer);&#xA;&#x9;&#x9;xml.NONCREW_LIST(){&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;writer.toString()&#xA;    }&#xA;&#xA;&#x9;public String populateVesselInfo(){&#xA;&#xA;      String vesName = vesVisit.vvdVessel.vesNotes&#xA;   &#x9;  String callsign = getRadioCallSign(vesVisit.vvdVessel.vesNotes)&#xA;&#x9;  String imoNbr = getOfficialNbr(vesVisit.vvdVessel.vesNotes);&#xA;&#xA;&#xA;&#x9;&#x9;def writer = new StringWriter();&#xA;&#x9;&#x9;def xml = new groovy.xml.MarkupBuilder(writer);&#xA;                  xml.VESSEL(){&#xA;                    &#x9;&#x9;NAME(vesName)&#xA;                    &#x9;&#x9;CALL_SIGN(callsign)&#xA;                    &#x9;&#x9;ID_NUM(imoNbr)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ID_TYPE('Official Number')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FLAG('UNITED STATES')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FLAG_CODE('US')&#xA;                    &#x9;&#x9;OWNER('Matson Navigation Co.')&#xA;                    &#x9;&#x9;OPERATOR('Matson Navigation Company')&#xA;                    &#x9;&#x9;CLASS_SOCIETY('American Bureau of Shipping')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHARTERER('None')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;xml.REPORTING_PARTY(){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;NAME('Matson TOS Application')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;COMPANY('Matson Navigation Co.')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RELATIONSHIP()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PHONE('808-848-8382')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FAX('808-841-4502')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EMAIL(emailFrom)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;xml.ISSC(){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ISSUED_DT('2007-11-18')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VSP_IMPLEMENTATION('Yes')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ISSC_TYPE('Coast Guard Approved VSP')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTERIM_ISSC()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSO_NAME('Roger Franz')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSO_EMAIL('rfranz@matson.com')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSO_PHONE('1-510-507-2043')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CSO_FAX('1-510-628-7344')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;xml.VESSEL_LOC(){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LOCATION_DESC('Honolulu, Hawaii')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OCE('Operational')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OCE_DESC()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CVSSA_ONBOARD('No')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;NON_TANK_VESSEL_RESPONSE_PLAN('No')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGSHOREMAN_WORK_DECLARATION('NOT PROVIDED')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;           &#x9;writer.toString()&#xA;&#xA;&#x9;/*&#xA;&#x9;Raghu Iyer : 03/04/2014 Removed these 2 nodes as per the TT - EP000202148&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;xml.COMP_CERT(){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ISSUED_DT('2008-09-26')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXPIRATION_DT('2013-10-26')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AGENCY('American Bureau of Shipping')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;xml.SFTYMGMT_CERT(){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ISSUED_DT('2008-09-26')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXPIRATION_DT('2013-10-13')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AGENCY('American Bureau of Shipping')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;*/&#xA;&#xA;&#x9;  /*String vesselInfo = &quot;&lt;VESSEL&gt;&quot;+&#xA;    &quot;&lt;NAME&gt;&quot;+vesName+&quot;&lt;/NAME&gt;&quot;+&#xA;    &quot;&lt;CALL_SIGN&gt;&quot;+callsign+&quot;&lt;/CALL_SIGN&gt;&quot;+&#xA;    &quot;&lt;ID_NUM&gt;&quot;+imoNbr+&quot;&lt;/ID_NUM&gt;&quot;+&#xA;    &quot;&lt;ID_TYPE&gt;Official Number&lt;/ID_TYPE&gt; &quot;+&#xA;    &quot;&lt;FLAG&gt;UNITED STATES&lt;/FLAG&gt; &quot;+&#xA;    &quot;&lt;FLAG_CODE&gt;US&lt;/FLAG_CODE&gt;&quot;+&#xA;    &quot;&lt;OWNER&gt;Matson Navigation Co.&lt;/OWNER&gt; &quot;+&#xA;    &quot;&lt;OPERATOR&gt;Matson Navigation Company&lt;/OPERATOR&gt; &quot;+&#xA;    &quot;&lt;CLASS_SOCIETY&gt;American Bureau of Shipping&lt;/CLASS_SOCIETY&gt; &quot;+&#xA;    &quot;&lt;CHARTERER&gt;None&lt;/CHARTERER&gt;&quot;+&#xA;&#xA;&#x9;  &quot;&lt;REPORTING_PARTY&gt;&quot;+  //A101 - Reporting party&#xA;       &quot;&lt;NAME&gt;Matson TOS Application&lt;/NAME&gt; &quot;+&#xA;       &quot;&lt;COMPANY&gt;Matson Navigation Co.&lt;/COMPANY&gt; &quot;+&#xA;       &quot;&lt;RELATIONSHIP&gt;&lt;/RELATIONSHIP&gt;&quot;+&#xA;       &quot;&lt;PHONE&gt;808-848-8382&lt;/PHONE&gt;&quot;+&#xA;       &quot;&lt;FAX&gt;808-841-4502&lt;/FAX&gt;&quot;+&#xA;       &quot;&lt;EMAIL&gt;&quot;+emailFrom+&quot;&lt;/EMAIL&gt; &quot;+&#xA;     &quot;&lt;/REPORTING_PARTY&gt;&quot;+&#xA;&#xA;&#x9;   &quot;&lt;COMP_CERT&gt;&quot;+&#xA;&#x9;  &quot;&lt;ISSUED_DT&gt;2008-09-26&lt;/ISSUED_DT&gt;&quot;+&#xA;&#x9;  &quot;&lt;EXPIRATION_DT&gt;2013-10-26&lt;/EXPIRATION_DT&gt;&quot;+&#xA;&#x9;  &quot;&lt;AGENCY&gt;American Bureau of Shipping&lt;/AGENCY&gt;&quot;+&#xA;&#x9;&quot;&lt;/COMP_CERT&gt;&quot;+&#xA;&#xA;&#x9;   &quot;&lt;SFTYMGMT_CERT&gt;&quot;+&#xA;&#x9;  &quot;&lt;ISSUED_DT&gt;2008-09-26&lt;/ISSUED_DT&gt;&quot;+&#xA;&#x9;  &quot;&lt;EXPIRATION_DT&gt;2013-10-13&lt;/EXPIRATION_DT&gt;&quot;+&#xA;&#x9;  &quot;&lt;AGENCY&gt;American Bureau of Shipping&lt;/AGENCY&gt;&quot;+&#xA;&#x9;&quot;&lt;/SFTYMGMT_CERT&gt;&quot;+&#xA;&#xA;&#x9;   &quot;&lt;ISSC&gt;&quot;+&#xA;    &quot;&lt;ISSUED_DT&gt;2007-11-18&lt;/ISSUED_DT&gt;&quot;+&#xA;    &quot;&lt;VSP_IMPLEMENTATION&gt;Yes&lt;/VSP_IMPLEMENTATION&gt;&quot;+&#xA;    &quot;&lt;ISSC_TYPE&gt;Coast Guard Approved VSP&lt;/ISSC_TYPE&gt;&quot;+&#xA;    &quot;&lt;INTERIM_ISSC&gt;&lt;/INTERIM_ISSC&gt;&quot;+&#xA;    &quot;&lt;CSO_NAME&gt;Roger Franz&lt;/CSO_NAME&gt; &quot;+&#xA;    &quot;&lt;CSO_EMAIL&gt;rfranz@matson.com&lt;/CSO_EMAIL&gt;&quot;+&#xA;    &quot;&lt;CSO_PHONE&gt;1-510-507-2043&lt;/CSO_PHONE&gt;&quot;+&#xA;    &quot;&lt;CSO_FAX&gt;1-510-628-7344&lt;/CSO_FAX&gt;&quot;+&#xA;    &quot;&lt;/ISSC&gt;&quot;+&#xA;&#xA;&#x9;   &quot;&lt;VESSEL_LOC&gt;&quot;+&#xA;&#x9;&#x9; &quot;&lt;LOCATION_DESC&gt;Honolulu, Hawaii&lt;/LOCATION_DESC&gt; &quot;+&#xA;&#x9;&#x9;&#x9;&quot;&lt;/VESSEL_LOC&gt;&quot;+&#xA;    &quot;&lt;OCE&gt;Operational&lt;/OCE&gt;&lt;OCE_DESC/&gt;&quot;+&#xA;    &quot;&lt;CVSSA_ONBOARD&gt;No&lt;/CVSSA_ONBOARD&gt;&quot;+&#xA;  &quot;&lt;NON_TANK_VESSEL_RESPONSE_PLAN&gt;Yes&lt;/NON_TANK_VESSEL_RESPONSE_PLAN&gt;&#xA;&#xA;&#x9;   &lt;/VESSEL&gt;&quot;*/&#xA;&#xA;      //return vesselInfo&#xA;&#x9;}&#xA;&#xA;/*&#x9;public String populateDepartureNotice()&#xA;&#x9;{&#xA;&#x9; def util = util == null ? getGroovyClassInstance(&quot;GvyEventUtil&quot;) : util;&#xA;     def zone = zone == null ? vesVisit.cvdCv.cvComplex.getTimeZone() : zone;&#xA;&#x9; String createdDate = util.formatDateTime(new Date(), zone, &quot;yyyy-MM-dd'T'HH:mm:ss&quot;)&#xA;     String voyageNbr = vesVisit.vvdObVygNbr&#xA;&#xA;&#xA;&#x9; String notice = &quot;&lt;NOTICE_DETAILS&gt;&quot;+&#xA;      &quot;&lt;RECEIVED_DATE_TIME xsi:nil='true' /&gt;&quot;+&#xA;      &quot;&lt;NOTICE_ID /&gt;&quot;+&#xA;      &quot;&lt;NOTICE_TRANSACTION_TYPE&gt;Initial&lt;/NOTICE_TRANSACTION_TYPE&gt;&quot;+&#xA;      &quot;&lt;NOTICE_TYPE&gt;Departure&lt;/NOTICE_TYPE&gt;&quot;+&#xA;      &quot;&lt;VERSION&gt;3.1&lt;/VERSION&gt;&quot;+&#xA;    &quot;&lt;/NOTICE_DETAILS&gt;&quot;+&#xA;    &quot;&lt;VOYAGE&gt;&quot;+&#xA;       &quot;&lt;VOYAGE_TYPE&gt;US to US&lt;/VOYAGE_TYPE&gt;&quot;+&#xA;       &quot;&lt;VOYAGE_NUMBER&gt;&quot;+voyageNbr+&quot;&lt;/VOYAGE_NUMBER&gt;&quot;+&#xA;     &quot;&lt;CLOSED_LOOP_VOYAGE&gt;Yes&lt;/CLOSED_LOOP_VOYAGE&gt;&lt;/VOYAGE&gt;&quot;;&#xA;&#x9; return notice;&#xA;&#x9;} A2 */&#xA;&#xA;   public String populateArrivalNotice()&#xA;&#x9;{&#xA;&#x9; def util = util == null ? getGroovyClassInstance(&quot;GvyEventUtil&quot;) : util;&#xA;     def zone = zone == null ? vesVisit.cvdCv.cvComplex.getTimeZone() : zone;&#xA;&#x9; String createdDate = util.formatDateTime(new Date(), zone, &quot;yyyy-MM-dd'T'HH:mm:ss&quot;)&#xA;     String voyageNbr = vesVisit.vvdObVygNbr&#xA;&#xA;                  def writer = new StringWriter();&#xA;                  def xml = new groovy.xml.MarkupBuilder(writer);&#xA;                  xml.NOTICE_DETAILS(){&#xA;                    &#x9;&#x9;NOTICE_ID('2aa176b8-f20b-4518-9bce-684a1156eb1b')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;NOTICE_TRANSACTION_TYPE('Update')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;NOTICE_TYPE('Arrival')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VERSION('3.3')&#xA;     &#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;xml.VOYAGE() {&#xA;                          &#x9;VOYAGE_TYPE('US to US')&#xA;                          &#x9;VOYAGE_NUMBER(voyageNbr)&#xA;     &#x9;&#x9;&#x9;&#x9;CLOSED_LOOP_VOYAGE('Yes')&#xA;             &#x9;&#x9;&#x9;}&#xA;           &#x9;writer.toString()&#xA;&#x9;}&#xA;&#xA;   public String populateArrDetails(String type){&#xA;&#xA;  &#x9; String tempArrDate = util.convertTimeZone(eta, &quot;HST&quot;,&quot;EST&quot;, &quot;MM/dd/yyyy @ HH:mm&quot;);&#xA;&#x9; String arrDate = util.formatDate(tempArrDate,&quot;MM/dd/yyyy @ HH:mm&quot;,&quot;yyyy-MM-dd&quot;)&#xA;     String arrTime = util.formatDate(tempArrDate,&quot;MM/dd/yyyy @ HH:mm&quot;,&quot;HH:mm:ss&quot;)&#xA;&#xA;     String tempSailDt = util.convertTimeZone(sailDate, &quot;HST&quot;,&quot;EST&quot;, &quot;MM/dd/yyyy @ HH:mm&quot;);&#xA;   &#x9; sailDeptdate = util.formatDate(tempSailDt,&quot;MM/dd/yyyy @ HH:mm&quot;,&quot;yyyy-MM-dd&quot;)&#xA;&#x9; String sailtime = util.formatDate(tempSailDt,&quot;MM/dd/yyyy @ HH:mm&quot;,&quot;HH:mm:ss&quot;)&#xA;&#xA;&#x9; String tempDeptDate = util.convertTimeZone(etd, &quot;HST&quot;,&quot;EST&quot;, &quot;MM/dd/yyyy @ HH:mm&quot;);&#xA;     String deptDate = util.formatDate(tempDeptDate,&quot;MM/dd/yyyy @ HH:mm&quot;,&quot;yyyy-MM-dd&quot;)&#xA;     String deptTime = util.formatDate(tempDeptDate,&quot;MM/dd/yyyy @ HH:mm&quot;,&quot;HH:mm:ss&quot;)&#xA;&#xA;     String arrivalPort = null;&#xA;&#x9; String&#x9;tempPort = dPort1&#xA;&#xA;&#x9;/* if(eta2 != null) {&#xA;      String tempArrDate2 = util.convertTimeZone(eta2, &quot;HST&quot;,&quot;EST&quot;, &quot;MM/dd/yyyy @ HH:mm&quot;);&#xA; &#x9;  arrDate = util.formatDate(tempArrDate2,&quot;MM/dd/yyyy @ HH:mm&quot;,&quot;yyyy-MM-dd&quot;)&#xA;      arrTime = util.formatDate(tempArrDate2,&quot;MM/dd/yyyy @ HH:mm&quot;,&quot;HH:mm:ss&quot;)&#xA;&#xA;      String tempDeptDate2 = util.convertTimeZone(etd2, &quot;HST&quot;,&quot;EST&quot;, &quot;MM/dd/yyyy @ HH:mm&quot;);&#xA;      deptDate = util.formatDate(tempDeptDate2,&quot;MM/dd/yyyy @ HH:mm&quot;,&quot;yyyy-MM-dd&quot;)&#xA;      deptTime = util.formatDate(tempDeptDate2,&quot;MM/dd/yyyy @ HH:mm&quot;,&quot;HH:mm:ss&quot;)&#xA;&#xA;       tempPort = dPort2&#xA;     }*/&#xA;     arrivalPort = getPortName(tempPort);&#xA;     println(&quot;arrDate=&quot;+arrDate+&quot;  arrTime=&quot;+arrTime+&quot; sailDate=&quot;+sailDate+&quot;  deptDate=&quot;+deptDate+&quot;  deptTime=&quot;+deptTime)&#xA;&#x9; String arrivalDeparture =  null;&#xA;&#x9;  def currentFcy = vesVisit.cvdCv.cvFacility.fcyId&#xA;&#xA;&#xA;&#x9;def lstportArrDate = util.formatDateTime(vesVisit.cvdCv.cvATD, zone);&#xA;&#x9;String tempLastArrDate = util.convertTimeZone(lstportArrDate, &quot;HST&quot;,&quot;EST&quot;, &quot;MM/dd/yyyy @ HH:mm&quot;);&#xA;&#x9;String lstArrDate = util.formatDate(tempLastArrDate,&quot;MM/dd/yyyy @ HH:mm&quot;,&quot;yyyy-MM-dd&quot;)&#xA;&#xA;&#x9;String tempPort1 = getPortName(arrPort)&#xA;&#x9;String netxport1 = &quot;&quot;;&#xA;&#x9;String netxport2 = &quot;&quot;;&#xA;&#x9;String netxport = &quot;&quot;;&#xA;&#xA;&#x9;if('Arrival'.equalsIgnoreCase(type)){&#xA;&#x9;&#x9;&#x9;&#x9;def writer = new StringWriter();&#xA;&#x9;&#x9;&#x9;&#x9;def xml = new groovy.xml.MarkupBuilder(writer);&#xA;&#x9;&#x9;&#x9;&#x9;xml.ARRIVE_DEPART(){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;xml.ARRIVE(){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ARRIVE_DT(arrDate)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ARRIVE_TIME(arrTime)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PORT_OR_PLACE(getPortName(arrivalPort))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CITY(getPortName(arrivalPort))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;STATE('Hawaii')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FACILITY('Matson')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ANCHORAGE()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;xml.DEPART(){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DEPART_DT(deptDate)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DEPART_TIME(deptTime)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PORT_OR_PLACE(getPortName(arrivalPort))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CITY(getPortName(arrivalPort))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;STATE('Hawaii')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;xml.NEXT_PORT(){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ARRIVE_DT ('xsi:nil':'true')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ARRIVE_TIME ('xsi:nil':'true')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;NEXT_PORT_COUNTRY()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;NEXT_PORT_COUNTRY_CODE()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;NEXT_PORT_STATE()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;NEXT_PORT_NAME()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;NEXT_PORT_CODE()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;NEXT_PORT_PLACE()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;xml.LAST_PORT(){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ARRIVE_DT(lstArrDate)   //Change&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DEPARTURE_DT(sailDeptdate)    //Change&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LAST_PORT_COUNTRY('UNITED STATES')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LAST_PORT_COUNTRY_CODE('US')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LAST_PORT_STATE('Hawaii')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LAST_PORT_NAME(getPortName(tempPort1))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LAST_PORT_CODE(tempPort1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LAST_PORT_PLACE(getPortName(tempPort1))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;xml.CONTACT(){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;NAME('Dave Thompson')  //A14&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;COMPANY('Matson Navigation Co.')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PHONE('1-808-848-1258')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EMAIL('dwthompson@matson.com')  //A14&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;     &#x9;&#x9;&#x9;&#x9;}&#xA;           &#x9;writer.toString()&#xA;&#x9;&#x9;}&#xA;&#x9;else {&#xA;&#xA;&#x9;&#x9;def writer = new StringWriter();&#xA;&#x9;&#x9;&#x9;&#x9;def xml = new groovy.xml.MarkupBuilder(writer);&#xA;&#x9;&#x9;&#x9;&#x9;xml.ARRIVE_DEPART(){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;xml.NEXT_PORT(){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ARRIVE_DT ('xsi:nil':'true')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ARRIVE_TIME ('xsi:nil':'true')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;NEXT_PORT_COUNTRY()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;NEXT_PORT_COUNTRY_CODE()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;NEXT_PORT_STATE()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;NEXT_PORT_NAME()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;NEXT_PORT_CODE()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;NEXT_PORT_PLACE()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;xml.LAST_PORT(){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ARRIVE_DT(lstArrDate)   //Change&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DEPARTURE_DT(sailDeptdate)    //Change&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LAST_PORT_COUNTRY('UNITED STATES')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LAST_PORT_COUNTRY_CODE('US')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LAST_PORT_STATE('Hawaii')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LAST_PORT_NAME(getPortName(tempPort1))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LAST_PORT_CODE(tempPort1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LAST_PORT_PLACE(getPortName(tempPort1))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;xml.CONTACT(){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;NAME('Dave Thompson')   //A14&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;COMPANY('Matson Navigation Co.')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PHONE('1-808-848-1258')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EMAIL('dwthompson@matson.com')  //A14&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;     &#x9;&#x9;&#x9;&#x9;}&#xA;           &#x9;writer.toString()&#xA;&#x9;}&#xA;&#xA;&#x9; /*arrivalDeparture =  &quot;&lt;ARRIVE&gt;&quot;+&#xA;        &quot;&lt;ARRIVE_DT&gt;&quot;+arrDate+&quot;&lt;/ARRIVE_DT&gt;&quot;+ //A01&#xA;        &quot;&lt;ARRIVE_TIME&gt;&quot;+arrTime+&quot;&lt;/ARRIVE_TIME&gt;&quot;+&#xA;        &quot;&lt;PORT_OR_PLACE&gt;&quot;+getPortName(arrivalPort)+&quot;&lt;/PORT_OR_PLACE&gt;&quot;+&#xA;        &quot;&lt;CITY&gt;&quot;+getPortName(arrivalPort)+&quot;&lt;/CITY&gt;&quot;+&#xA;        &quot;&lt;STATE&gt;Hawaii&lt;/STATE&gt;&quot;+&#xA;        &quot;&lt;FACILITY&gt;Matson&lt;/FACILITY&gt;&quot;+&#xA;        &quot;&lt;ANCHORAGE&gt;&lt;/ANCHORAGE&gt;&quot;+&#xA;       &quot;&lt;/ARRIVE&gt;&quot;+&#xA;       &quot;&lt;DEPART&gt;&quot;+&#xA;        &quot;&lt;DEPART_DT&gt;&quot;+deptDate+&quot;&lt;/DEPART_DT&gt;&quot;+&#xA;        &quot;&lt;DEPART_TIME&gt;&quot;+deptTime+&quot;&lt;/DEPART_TIME&gt;&quot;+&#xA;        &quot;&lt;PORT_OR_PLACE&gt;&quot;+getPortName(arrivalPort)+&quot;&lt;/PORT_OR_PLACE&gt; &quot;+&#xA;&#x9;&#x9;&quot;&lt;CITY&gt;&quot;+getPortName(arrivalPort)+&quot;&lt;/CITY&gt;&quot;+&#xA;&#x9;&#x9;&quot;&lt;STATE&gt;Hawaii&lt;/STATE&gt;&quot;+&#xA;       &quot;&lt;/DEPART&gt;&quot;;&#xA;&#x9; }else if('Departure'.equalsIgnoreCase(type)){&#xA;&#x9;&#x9; arrivalDeparture =  &quot;&lt;ARRIVE&gt;&quot;+&#xA;        &quot;&lt;ARRIVE_DT&gt;&quot;+arrDate+&quot;&lt;/ARRIVE_DT&gt;&quot;+ //A01&#xA;        &quot;&lt;ARRIVE_TIME&gt;&quot;+arrTime+&quot;&lt;/ARRIVE_TIME&gt;&quot;+&#xA;       &quot;&lt;PORT_OR_PLACE/&gt;&lt;CITY/&gt;&lt;STATE/&gt;&lt;FACILITY/&gt;&lt;PLACE/&gt;&lt;ANCHORAGE/&gt;&quot;+&#xA;       &quot;&lt;/ARRIVE&gt;&quot;+&#xA;       &quot;&lt;DEPART&gt;&quot;+&#xA;        &quot;&lt;DEPART_DT&gt;&quot;+sailDeptdate+&quot;&lt;/DEPART_DT&gt;&quot;+&#xA;        &quot;&lt;DEPART_TIME&gt;&quot;+sailtime+&quot;&lt;/DEPART_TIME&gt;&quot;+&#xA;        &quot;&lt;PORT_NAME&gt;&quot;+getPortName(currentFcy)+&quot;&lt;/PORT_NAME &gt;&quot;+&#xA;&#x9;&#x9;&quot;&lt;CITY&gt;&quot;+getPortName(currentFcy)+&quot;&lt;/CITY&gt;&quot;+&#xA;&#x9;&#x9;&quot;&lt;STATE&gt;Hawaii&lt;/STATE&gt;&quot;+&#xA;&#x9;&#x9;&quot;&lt;PLACE&gt;&quot;+getPortName(currentFcy)+&quot;&lt;/PLACE&gt;&quot;+&#xA;       &quot;&lt;/DEPART&gt;&quot;;&#xA;     }*/&#xA;&#xA;      //Hon Arrival&#xA;&#x9;}&#xA;&#xA;&#xA;&#xA;&#x9;//Departure XML&#xA; /*   public String getDepartureNotice()&#xA;&#x9;{&#xA;&#x9; def util = util == null ? getGroovyClassInstance(&quot;GvyEventUtil&quot;) : util;&#xA;     def zone = zone == null ? vesVisit.cvdCv.cvComplex.getTimeZone() : zone;&#xA;&#x9; String createdDate = util.formatDateTime(new Date(), TimeZone.getTimeZone('America/New_York'), &quot;yyyy-MM-dd'T'HH:mm:ss&quot;)&#xA;     String voyageNbr = vesVisit.vvdObVygNbr&#xA;&#xA;&#xA;&#x9; String notice = &quot;&lt;NOTICE_DETAILS&gt;&quot;+&#xA;      &quot;&lt;CREATED_DATE_TIME&gt;&quot;+createdDate+&quot;&lt;/CREATED_DATE_TIME&gt;&quot;+&#xA;      &quot;&lt;RECEIVED_DATE_TIME xsi:nil='true' /&gt;&quot;+&#xA;      &quot;&lt;NOTICE_ID /&gt;&quot;+&#xA;      &quot;&lt;NOTICE_TRANSACTION_TYPE&gt;Initial&lt;/NOTICE_TRANSACTION_TYPE&gt;&quot;+&#xA;      &quot;&lt;NOTICE_TYPE&gt;Departure&lt;/NOTICE_TYPE&gt;&quot;+&#xA;      &quot;&lt;VERSION&gt;3.1&lt;/VERSION&gt;&quot;+&#xA;    &quot;&lt;/NOTICE_DETAILS&gt;&quot;+&#xA;    &quot;&lt;VOYAGE&gt;&quot;+&#xA;       &quot;&lt;VOYAGE_TYPE&gt;US to US&lt;/VOYAGE_TYPE&gt;&quot;+&#xA;       &quot;&lt;VOYAGE_NUMBER&gt;&quot;+voyageNbr+&quot;&lt;/VOYAGE_NUMBER&gt;&quot;+&#xA;     &quot;&lt;/VOYAGE&gt;&quot;;&#xA;&#x9; return ;&#xA;&#x9;}&#xA;*/&#xA;&#xA;&#x9;public String populateLastNextPort(String arrDate,String deptDate,String arrPort){&#xA;&#x9;String tempPort = getPortName(arrPort)&#xA;    //arrPort = tempPort&#xA;    String netxport1 = &quot;&quot;;&#xA;&#x9;String netxport2 = &quot;&quot;;&#xA;&#x9;String netxport = &quot;&quot;;&#xA;    /*if(eta2 != null) {&#xA;&#x9;    buf.append(&quot; 2) ETA: ${eta2} (${dPort2})&quot;+eol);&#xA;&#x9;    buf.append(&quot;    ETD: ${etd2} (${dPort2})&quot;+eol);&#xA;&#x9;  }&#x9;*/&#xA;&#xA;&#x9;/* -- 05.09.11 - to handel posting ---&#xA;&#x9;if(eta != null){&#xA;&#x9;  String noticeArrDate = util.formatDate(eta,TimeZone.getTimeZone('America/New_York'),&quot;yyyy-MM-dd&quot;)&#xA;      String noticeArrTime = util.formatDate(eta,TimeZone.getTimeZone('America/New_York'),&quot;HH:mm:ss&quot;)&#xA;      String tempNextPort = getPortName(dPort1);&#xA;&#xA;       netxport1 = &quot;&lt;NEXT_PORT&gt;&quot;+&#xA;     &quot;&lt;ARRIVE_DT&gt;&quot;+noticeArrDate+&quot;&lt;/ARRIVE_DT&gt;&quot;+&#xA; &#x9; &quot;&lt;ARRIVE_TIME&gt;&quot;+noticeArrTime+&quot;&lt;/ARRIVE_TIME&gt;&quot;+&#xA; &#x9; &quot;&lt;NEXT_PORT_COUNTRY&gt;US&lt;/NEXT_PORT_COUNTRY&gt;&quot;+&#xA;&#x9; &quot;&lt;NEXT_PORT_COUNTRY_CODE&gt;US&lt;/NEXT_PORT_COUNTRY_CODE&gt;&quot;+&#xA;&#x9; &quot;&lt;NEXT_PORT_STATE&gt;Hawaii&lt;/NEXT_PORT_STATE&gt;&quot;+&#xA;&#x9; &quot;&lt;NEXT_PORT_NAME&gt;&quot;+getPortName(tempNextPort)+&quot;&lt;/NEXT_PORT_NAME&gt;&quot;+&#xA;&#x9; &quot;&lt;NEXT_PORT_CODE&gt;&quot;+tempNextPort+&quot;&lt;/NEXT_PORT_CODE&gt;&quot;+&#xA;&#x9; &quot;&lt;NEXT_PORT_PLACE&gt;&quot;+getPortName(tempNextPort)+&quot;&lt;/NEXT_PORT_PLACE&gt;&quot;+&#xA;    &quot;&lt;/NEXT_PORT&gt;&quot;;&#xA;    }&#xA;&#xA;    if(eta2 != null){&#xA;&#x9;  String noticeArrDate = util.formatDate(eta2,TimeZone.getTimeZone('America/New_York'),&quot;yyyy-MM-dd&quot;)&#xA;      String noticeArrTime = util.formatDate(eta2,TimeZone.getTimeZone('America/New_York'),&quot;HH:mm:ss&quot;)&#xA;      String tempNextPort = getPortName(dPort2);&#xA;&#xA;       netxport2 = &quot;&lt;NEXT_PORT&gt;&quot;+&#xA;     &quot;&lt;ARRIVE_DT&gt;&quot;+noticeArrDate+&quot;&lt;/ARRIVE_DT&gt;&quot;+&#xA; &#x9; &quot;&lt;ARRIVE_TIME&gt;&quot;+noticeArrTime+&quot;&lt;/ARRIVE_TIME&gt;&quot;+&#xA; &#x9; &quot;&lt;NEXT_PORT_COUNTRY&gt;US&lt;/NEXT_PORT_COUNTRY&gt;&quot;+&#xA;&#x9; &quot;&lt;NEXT_PORT_COUNTRY_CODE&gt;US&lt;/NEXT_PORT_COUNTRY_CODE&gt;&quot;+&#xA;&#x9; &quot;&lt;NEXT_PORT_STATE&gt;Hawaii&lt;/NEXT_PORT_STATE&gt;&quot;+&#xA;&#x9; &quot;&lt;NEXT_PORT_NAME&gt;&quot;+getPortName(tempNextPort)+&quot;&lt;/NEXT_PORT_NAME&gt;&quot;+&#xA;&#x9; &quot;&lt;NEXT_PORT_CODE&gt;&quot;+tempNextPort+&quot;&lt;/NEXT_PORT_CODE&gt;&quot;+&#xA;&#x9; &quot;&lt;NEXT_PORT_PLACE&gt;&quot;+getPortName(tempNextPort)+&quot;&lt;/NEXT_PORT_PLACE&gt;&quot;+&#xA;    &quot;&lt;/NEXT_PORT&gt;&quot;;&#xA;    }&#xA;*/&#xA;&#x9;//if(eta == null &amp;&amp; eta2 == null){&#xA;       netxport = &quot;&lt;NEXT_PORT&gt;&quot;+&#xA;     &quot;&lt;ARRIVE_DT xsi:nil='true'&gt;&lt;/ARRIVE_DT&gt;&quot;+&#xA; &#x9; &quot;&lt;ARRIVE_TIME xsi:nil='true'&gt;&lt;/ARRIVE_TIME&gt;&quot;+&#xA; &#x9; &quot;&lt;NEXT_PORT_COUNTRY&gt;&lt;/NEXT_PORT_COUNTRY&gt;&quot;+&#xA;&#x9; &quot;&lt;NEXT_PORT_COUNTRY_CODE&gt;&lt;/NEXT_PORT_COUNTRY_CODE&gt;&quot;+&#xA;&#x9; &quot;&lt;NEXT_PORT_STATE&gt;&lt;/NEXT_PORT_STATE&gt;&quot;+&#xA;&#x9; &quot;&lt;NEXT_PORT_NAME&gt;&lt;/NEXT_PORT_NAME&gt;&quot;+&#xA;&#x9; &quot;&lt;NEXT_PORT_CODE&gt;&lt;/NEXT_PORT_CODE&gt;&quot;+&#xA;&#x9; &quot;&lt;NEXT_PORT_PLACE&gt;&lt;/NEXT_PORT_PLACE&gt;&quot;+&#xA;    &quot;&lt;/NEXT_PORT&gt;&quot;;&#xA;&#xA;&#x9;//}&#xA;&#xA;&#x9;//Added for Multiple visits - 105&#xA;    //netxport = netxport1+netxport2+netxport&#xA;&#xA;&#xA;&#x9;String lastnextport = netxport+&quot;&lt;LAST_PORT&gt;&quot;+&#xA;    &quot;&lt;ARRIVE_DT&gt;&quot;+arrDate+&quot;&lt;/ARRIVE_DT&gt;&quot;+   //Change&#xA;&#x9;&quot;&lt;DEPARTURE_DT&gt;&quot;+sailDeptdate+&quot;&lt;/DEPARTURE_DT&gt;&quot;+    //Change&#xA;&#x9;&quot;&lt;LAST_PORT_COUNTRY&gt;UNITED STATES&lt;/LAST_PORT_COUNTRY&gt; &quot;+&#xA;&#x9;&quot;&lt;LAST_PORT_COUNTRY_CODE&gt;US&lt;/LAST_PORT_COUNTRY_CODE&gt;&quot;+&#xA;&#x9;&quot;&lt;LAST_PORT_STATE&gt;Hawaii&lt;/LAST_PORT_STATE&gt;&quot;+&#xA;&#x9;&quot;&lt;LAST_PORT_NAME&gt;&quot;+getPortName(tempPort)+&quot;&lt;/LAST_PORT_NAME&gt;&quot;+&#xA;&#x9;&quot;&lt;LAST_PORT_CODE&gt;&quot;+tempPort+&quot;&lt;/LAST_PORT_CODE&gt;&quot;+&#xA;&#x9;&quot;&lt;LAST_PORT_PLACE&gt;&quot;+getPortName(tempPort)+&quot;&lt;/LAST_PORT_PLACE&gt;&quot;+&#xA;  &quot;&lt;/LAST_PORT&gt;&quot;+&#xA;  &quot;&lt;CONTACT&gt;&quot;+   //A101 - The value shall be the name of the 24-hour Contact for the ship.&#xA;     &quot;&lt;NAME&gt;Dave Thompson&lt;/NAME&gt;&quot;+   //A14&#xA;&#x9; &quot;&lt;COMPANY&gt;Matson Navigation Co.&lt;/COMPANY&gt;&quot;+&#xA;&#x9; &quot;&lt;PHONE&gt;1-808-848-1258&lt;/PHONE&gt;&quot;+&#xA;&#x9; &quot;&lt;EMAIL&gt;dwthompson@matson.com&lt;/EMAIL&gt;&quot;+  //A14&#xA;  &quot;&lt;/CONTACT&gt;&quot;;&#xA;&#xA;&#x9; return lastnextport&#xA;    }&#xA;&#xA;&#xA;&#x9;public String arrivalNoaXml(){&#xA;&#x9;&#x9;println(&quot;new amit&quot;);&#xA;        String arrivalXml = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot; ?&gt;&lt;NOTICE xmlns:xsi=\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot; xsi:noNamespaceSchemaLocation=\&quot;USCG_ENOAD_Schema_3.3.xsd\&quot;&gt;&quot;+populateArrivalNotice()+populateVesselInfo()+populateArrDetails(&quot;Arrival&quot;)+populateCDCList()+populateCrewlist()+populateNoCrewList()+&quot;&lt;/NOTICE&gt;&quot;;&#xA;&#x9;&#x9;return arrivalXml;&#xA;    }&#xA;&#xA;/*&#x9;public String departureNodXml(){&#xA;        //A6 - Change this to Be ARRIVAL Notice from Departed Notice&#xA;&#x9;&#x9;//String departureXml = &quot;&lt;?xml version='1.0' standalone='yes'?&gt;&lt;NOTICE xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'&gt;&quot;+populateArrivalNotice()+populateVesselInfo()+populateArrDetails(&quot;Arrival&quot;)+populateCDCList()+populateCrewlist()+populateNoCrewList()+&quot;&lt;/NOTICE&gt;&quot;;&#xA;&#x9;    String departureXml = &quot;&lt;?xml version='1.0' standalone='yes'?&gt;&lt;NOTICE xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'&gt;&quot;+populateDepartureNotice()+populateVesselInfo()+populateArrDetails(&quot;Arrival&quot;)+populateCDCList()+populateCrewlist()+populateNoCrewList()+&quot;&lt;/NOTICE&gt;&quot;;&#xA;&#x9;&#x9;return departureXml;&#xA;    } */&#xA;&#xA;&#x9;public static String weightFromKgToLB(String kgWeight)&#xA;    {&#xA;&#x9;&#x9;String lbsWeight = null;&#xA;&#x9;&#x9;if(kgWeight == null || kgWeight.trim().length()==0){&#xA;&#x9;&#x9;&#x9;return &quot;0&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;    double convtWeight = Double.parseDouble(kgWeight)* 2.20462262;&#xA;&#x9;    long result = Math.round(convtWeight);&#xA;&#x9;    lbsWeight = String.valueOf(result);&#xA;    &#x9;return lbsWeight;&#xA;    }&#xA;&#xA;&#xA;&#xA;&#x9;public String procCrewList(Object vv) {&#xA;    def crewName = vv.vvdVessel.vesNotes;&#xA;    if(crewName != null ) {&#xA;       crewName = crewName.toUpperCase();&#xA;    }&#xA;&#x9;ByteArrayResource byteResource  = null;&#xA;    InputStream inputStream = null;&#xA;&#x9;StringBuffer strBulder = null;&#xA;    String position = null;&#xA;&#x9;def gvyEventUtil = util == null ? getGroovyClassInstance(&quot;GvyEventUtil&quot;) : util;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9; byteResource  = new ByteArrayResource(DigitalAsset.findImage(crewName));&#xA;&#xA;&#x9;&#x9;&#x9; inputStream = byteResource.getInputStream()&#xA;&#x9;&#x9;&#x9; ArrayList crewList =  contentReading(inputStream);&#xA; &#x9;&#x9;&#x9; //strBulder = new StringBuffer(&quot;&lt;CREW_LIST&gt;&quot;);&#xA;&#xA;&#xA;&#x9;&#x9;&#x9; def writer = new StringWriter();&#xA;&#x9;&#x9;&#x9;&#x9;def xml = new groovy.xml.MarkupBuilder(writer);&#xA;&#x9;&#x9;&#x9;&#x9;xml.CREW_LIST(){&#xA;&#x9;&#x9;&#x9;for(aCrew in crewList){&#xA;&#x9;&#x9;&#x9;&#x9;LinkedHashSet crewDetail = (LinkedHashSet)aCrew;&#xA;&#x9;&#x9;&#x9;&#x9;LinkedHashSet crewDetail1 = (LinkedHashSet)aCrew;&#xA;&#x9;&#x9;&#x9;&#x9;Iterator it2 = crewDetail.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;Iterator it3 = crewDetail1.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;String tempStr = null;&#xA;&#x9;&#x9;&#x9;&#x9;String gender = null;&#xA;&#x9;&#x9;&#x9;&#x9;int checkLoop = 0;&#xA;&#x9;&#x9;&#x9;&#x9;int count=0;&#xA;&#x9;&#x9;&#x9;&#x9;checkLoop = crewDetail.size()&#xA;&#x9;&#x9;&#x9;&#x9;println (&quot;checkLoop    &quot; + checkLoop)&#xA;&#x9;&#x9;&#x9;&#x9;if (checkLoop &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;xml.CREW(){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while(it3.hasNext()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String temp = (String)it3.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(temp == null || temp.trim().length() == 0){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Email FSS Team to rectify CREW Information&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;---------COUNT IT3------------:&quot;+count + &quot; ---------- &quot;+temp.trim().length())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (count == 7){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;POSITION(temp)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;count++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;count = 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while(it2.hasNext()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String temp = (String)it2.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(temp == null || temp.trim().length() == 0){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Email FSS Team to rectify CREW Information&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;---------COUNT ------------:&quot;+count + &quot; ---------- &quot;+temp.trim().length())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(count ==0){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LAST_NAME(temp)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}else if(count == 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FIRST_NAME(temp)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}else if (count == 2){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  temp = gvyEventUtil.formatDate(temp,&quot;MM/dd/yyyy&quot;, &quot;yyyy-MM-dd&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;BIRTH_DT(temp)&#xA;&#x9;&#x9;&#x9;&#x9;  }else if (count == 3){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;gender = &quot;M&quot;.equalsIgnoreCase(temp) ? &quot;Male&quot; : &quot;Female&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;GENDER(gender)&#xA;&#x9;&#x9;&#x9;&#x9;  }else if (count == 4){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;NATIONALITY(&quot;UNITED STATES&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;NATIONALITY_CODE(&quot;US&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;COUNTRY_RESIDENCE(&quot;UNITED STATES&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;COUNTRY_RESIDENCE_CODE(&quot;US&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;  }else if (count == 5){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ID_TYPE(getPersonId(temp))&#xA;&#x9;&#x9;&#x9;&#x9;  }else if (count == 6){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ID_NUM(temp)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ID_COUNTRY(&quot;UNITED STATES&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ID_COUNTRY_CODE(&quot;US&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ID_EXPIRATION_DT('xsi:nil':'true')&#xA;&#x9;&#x9;&#x9;&#x9;  }&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//else if (count == 7){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//POSITION(temp)&#xA;&#x9;&#x9;&#x9;&#x9;  //}&#xA;&#x9;&#x9;&#x9;&#x9;  else if (count == 8){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EMBARK_COUNTRY(&quot;UNITED STATES&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EMBARK_COUNTRY_CODE(&quot;US&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EMBARK_STATE(&quot;Hawaii&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EMBARK_PORT_NAME(&quot;Honolulu&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EMBARK_PORT_CODE(&quot;HON&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EMBARK_PLACE(temp)&#xA;&#x9;&#x9;&#x9;&#x9;  }else if (count == 9){&#xA;  &#x9;&#x9;&#x9;&#x9;&#x9;  temp = gvyEventUtil.formatDate(temp,&quot;MM/dd/yyyy&quot;, &quot;yyyy-MM-dd&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EMBARK_DATE(temp)&#xA;&#x9;&#x9;&#x9;&#x9;  }&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;count++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;DEBARK_COUNTRY()&#xA;&#x9;&#x9;&#x9;&#x9;DEBARK_COUNTRY_CODE()&#xA;&#x9;&#x9;&#x9;&#x9;DEBARK_STATE()&#xA;&#x9;&#x9;&#x9;&#x9;DEBARK_PORT_NAME()&#xA;&#x9;&#x9;&#x9;&#x9;DEBARK_PORT_CODE()&#xA;&#x9;&#x9;&#x9;&#x9;DEBARK_PLACE()&#xA;&#x9;&#x9;&#x9;&#x9;DEBARK_DATE ('xsi:nil':'true')&#xA;&#x9;&#x9;&#x9;&#x9;LONGSHOREMAN_WORK_DECLARATION('NOT PROVIDED')&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;count=0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;writer.toString()&#xA;&#xA;&#xA;&#xA;&#x9;&#x9;} catch (IOException e) {&#xA;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;&#x9;} catch (Exception e) {&#xA;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;&#x9;}finally {&#xA;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;inputStream.close();&#xA;&#x9;&#x9;&#x9;} catch (IOException e) {&#xA;&#x9;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//return strBulder.toString();&#xA;&#x9;}&#xA;&#xA;   private String getPersonId(String idType)&#xA;   {&#xA;&#x9; if(&quot;Mariner Document&quot;.equals(idType)){&#xA;         return &quot;U.S. Merchant Mariner Document&quot;;&#xA;&#x9; }else if(&quot;PassPort&quot;.equals(idType)){&#xA;         return &quot;Passport Number&quot;;&#xA;&#x9; }else if (&quot;Govt Picture ID&quot;.equals(idType)){&#xA;         return &quot;Govt Issued Picture ID(US)&quot;;&#xA;&#x9; }&#xA;   }&#xA;&#xA;&#xA;     public ArrayList contentReading(InputStream fileInputStream) {&#xA;&#x9;&#x9;WorkbookSettings ws = null;&#xA;&#x9;&#x9;Workbook workbook = null;&#xA;&#x9;&#x9;Sheet s = null;&#xA;&#x9;&#x9;Cell[] rowData = null;&#xA;&#x9;&#x9;int rowCount = '0';&#xA;&#x9;&#x9;int columnCount = '0';&#xA;&#x9;&#x9;DateCell dc = null;&#xA;&#x9;&#x9;int totalSheet = 0;&#xA;&#x9;&#x9;ArrayList crewList = null;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;ws = new WorkbookSettings();&#xA;&#x9;&#x9;&#x9;ws.setLocale(new Locale(&quot;en&quot;, &quot;EN&quot;));&#xA;&#x9;&#x9;&#x9;workbook = Workbook.getWorkbook(fileInputStream, ws);&#xA;&#xA;&#x9;&#x9;&#x9;totalSheet = workbook.getNumberOfSheets();&#xA;&#xA;&#x9;&#x9;&#x9;//Getting Default Sheet i.e. 0&#xA;&#x9;&#x9;&#x9;s = workbook.getSheet(0);&#xA;&#xA;&#x9;&#x9;&#x9;//Total Total No Of Rows in Sheet, will return you no of rows that are occupied with some data&#xA;&#x9;&#x9;&#x9;//println(&quot;Total Rows inside Sheet:&quot; + s.getRows());&#xA;&#x9;&#x9;&#x9;rowCount = s.getRows();&#xA;&#xA;&#x9;&#x9;&#x9;//Total Total No Of Columns in Sheet&#xA;&#x9;&#x9;&#x9;//println(&quot;Total Column inside Sheet:&quot; + s.getColumns());&#xA;&#x9;&#x9;&#x9;columnCount = s.getColumns();&#xA;&#xA;&#x9;&#x9;LinkedHashSet crewSet = null;&#xA;&#x9;&#x9;crewList = new ArrayList();&#xA;&#xA;&#xA;&#x9;&#x9;for (i in 0..15)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;crewSet = new LinkedHashSet();&#xA;&#x9;&#x9;&#x9;rowData = s.getRow(i);&#xA;&#x9;&#x9;&#x9;if (i &gt; 5 &amp;&amp; !CellType.EMPTY.equals(rowData[0].getType()) ) { // the first date column must not null&#xA;&#x9;&#x9;&#x9;&#x9;for (j in 0..9) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;crewSet.add(rowData[j].getContents());&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;  crewList.add(crewSet);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9; workbook.close();&#xA;&#x9;&#x9;} catch (IOException e) {&#xA;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;&#x9;} catch (BiffException e) {&#xA;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return crewList;&#xA;&#x9;}&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;}//class GvyNOA ends&#xA;&#xA;class HazardItemHolder implements Comparable{&#xA;&#x9;public HazardItem hazard;&#xA;&#x9;public UnitFacilityVisit ufv;&#xA;    HashMap classMapHazItm ;&#xA;&#x9;HashMap unNaMapHazItm ;&#xA;&#xA;&#x9;public HazardItemHolder(UnitFacilityVisit ufv, HazardItem hazard,HashMap classMap,HashMap unNaMap) {&#xA;&#x9;&#x9;this.hazard = hazard;&#xA;&#x9;&#x9;this.ufv = ufv;&#xA;&#x9;&#x9;this.classMapHazItm = classMap;&#xA;&#x9;&#x9;this.unNaMapHazItm = unNaMap;&#xA;&#x9;}&#xA;&#xA;&#xA;&#x9;public int hashCode() {&#xA;&#x9;&#x9;return getHazClass();&#xA;&#x9;}&#xA;&#xA;&#x9;public boolean equals(Object o) {&#xA;&#x9;&#x9;if(compareTo(o) == 0) return true;&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;&#xA;&#x9;public int compareTo(Object o) {&#xA;&#x9;&#x9;if(! (o instanceof HazardItemHolder)) return -1;&#xA;&#x9;&#x9;HazardItemHolder h = (HazardItemHolder)o;&#xA;&#x9;&#x9;int diff = getHazClass() - h.getHazClass();&#xA;&#x9;&#x9;if(diff != 0) return diff*100;&#xA;&#x9;&#x9;diff = hazard.hzrdiImdgClass.compareTo(h.hazard.hzrdiImdgClass);&#xA;&#x9;&#x9;if(diff != 0) return diff*10;&#xA;&#xA;&#x9;&#x9;return ufv.ufvUnit.unitId.compareTo(h.ufv.ufvUnit.unitId);&#xA;&#xA;&#x9;}&#xA;&#xA;    private int getHazClass() {&#xA;&#x9;&#x9;if(hazard.hzrdiImdgClass != null &amp;&amp; classMapHazItm.containsKey(hazard.hzrdiImdgClass)) return 1;&#xA;&#x9;&#x9;if(hazard.hzrdiUNnum != null &amp;&amp; unNaMapHazItm.containsKey(hazard.hzrdiUNnum)) return 2;&#xA;        return 8;&#xA;&#x9;}&#xA;&#xA;} //End Class HazardItemHolder" />
<digital-asset id="GvyAuditDischargeComplete" short-description="GvyAuditDischargeComplete" is-pre-deployed="N" groovy-code="/*&#xA;*  A1   KM   02/10/2011     Initial groovyPlugins for vessel (long haul/barges) discharge audit&#xA;*                           Sends out Client discharge report&#xA;*  A2   GR                  Last container discharge report&#xA;*  A3   PS                  Sends out confirmation notice that discharge audit is complete&#xA;*  A4   GR                  Altered Query last DFV Rpt(no through cntr,no mty cntr,no pier29 cntr)&#xA;                            changed query to lookup on actual IB visit&#xA;*  A5   GR                  Changed Obcarrier to vessel visit IBvesvoy&#xA;*  A6   GR                  Check line operator split&#xA;*  A7   GR   05/02/11       Made Code Generic to Handel Load and Discharge function&#xA;*  A8   GR   05/02/11       For Load units change sorting by timeOut&#xA;*  A9   GR   05/02/11       For Load units change sort by last moved&#xA;*  A10  GR   05/04/11       Set Client unit Timezone, Hardcode HON as Facilty, Status=FreightKind&#xA;*  A11  GR   05/20/11       Adding rob,dfv COUNTS&#xA;*  A12  GR   05/23/11       OnDeck, Below Deck addition&#xA;*  A13  GR   05/24/11       Defect picking up Retired unit. Added Filter&#xA;*  A14  GR   05/25/11       Check Nullpointer Exception&#xA;*  A15  GR   05/26/11       FIX Replaced TimeIn with UfvFlexDate4 a)Correct Discharge b) Client Restow unit&#xA;*  A16  GR   06/15/11       Filter out Through Contianers from Client Cntr report&#xA;*  A17  GR   06/28/11       Trailer Report to Accouting&#xA;*  A18  KM   07/08/11       Split email audit pau and trailer report&#xA;*  A19&#x9;GR   07/12/11       Set OBcarrier for Client Reports&#xA;*  A20  KM   09/12/11       Updated prod emails addresses&#xA;* 08/16/11 2.1 Updated Email Method&#xA;* 08/14/2013 Fix the ROB list count to include all THROUGHs, remove the DEPARTED or LOADED condition&#xA;* 08/16/2013 Add filter to query for advised, retired&#xA;* 08/20/2013 Add filters for Discharge, fix ROB list count&#xA;*  A21   KM   12/09/13      Added CKorenaga@matson.com to acctEmail var&#xA;*  A22   KR   05/29/14      Split Discharge Last Cntr report into SI &amp; PIER 2&#xA;*  A23   RI   09/10/14      EP000212535: FW: We received two different reports for the MLE085, Added new method allUnitsDischarged for validation&#xA;*  A24   RI   09/15/14      EP000211021: Remove Restow check from Audit Discharge and Audit Load reports&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.atoms.FreightKindEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.reference.LineOperator&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.Ordering&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.services.business.api.EventManager&#xA;import com.navis.services.business.rules.EventType&#xA;import net.sf.jasperreports.engine.JRDataSource&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource&#xA;import  java.text.SimpleDateFormat; &#xA;&#xA;public class GvyAuditDischargeComplete extends GroovyInjectionBase&#xA;{&#xA;    private String outBoundCarrierId = null&#xA;    def inj = null;&#xA;    def gvyEventUtil = null;&#xA;    HashMap mapDisplayLst = new HashMap(); //A2&#xA;&#x9;HashMap mapDisplayLstP2 = new HashMap(); //A22&#xA;    def reportType = null;&#xA;    def timezone = null;&#xA;    List totalUnitList = null;&#xA;    private static final String eol = &quot;\r\n&quot;;&#xA;    def rptFieldSortUtil = null;&#xA;    def event = null;&#xA;    HashMap mapTrailer = new HashMap();&#xA;    def vesselForDischId = null;&#xA;    Date vesselATADate = null;&#xA;    Date vesselATDDate = null;&#xA;    def emailTo = '1aktosdevteam@matson.com'  //A20&#xA;    def acctEmail = '1aktosdevteam@matson.com'  //A21&#xA;&#xA;&#xA;&#xA;    def trailerCnt = 0;&#xA;&#xA;    public String checkForMultipleDischarges(){&#xA;        //1. Check if unit has Multiple discharge events&#xA;        //2. if Multiple discharge then drop out of list&#xA;        //3. resort for last discharge value&#xA;        //4. Return last disch unit&#xA;    }&#xA;&#xA;    public String checkForRestowUnit(){&#xA;        //1. check if its a restow unit then drop it out of the list&#xA;    }&#xA;&#xA;    public void init(){&#xA;        inj = new GroovyInjectionBase();&#xA;        gvyEventUtil = gvyEventUtil == null ? inj.getGroovyClassInstance(&quot;GvyEventUtil&quot;) : gvyEventUtil ;&#xA;        timezone = ContextHelper.getThreadUserTimezone();&#xA;    }&#xA;&#xA;    public boolean processClientDischarge(Object eventObj, String rptType)&#xA;    {&#xA;        //1. lookup all units on Board&#xA;        //2. Fetch and Map information&#xA;        //3. Generate Report&#xA;        init() // Initialize Global variable&#xA;&#xA;        try&#xA;        {&#xA;            def visit = eventObj.getEntity();&#xA;            reportType = rptType;&#xA;            event = eventObj&#xA;&#xA;            //getEmail Grp List&#xA;            def nextFacility = visit.getFieldValue(&quot;cvdCv.cvNextFacility.fcyId&quot;)&#xA;            def facility = visit.getFieldValue(&quot;cvdCv.cvFacility.fcyId&quot;)&#xA;&#xA;            //outBoundCarrierId =  visit.cvdCv&#xA;            outBoundCarrierId = visit.vvdVessel.vesId+visit.getFieldValue(&quot;vvdObVygNbr&quot;) //A5&#xA;            //if outbound carrier is YB just return   check for client vessels if yes filter out client service&#xA;            if(outBoundCarrierId.startsWith('YB')){&#xA;                return null;&#xA;            }&#xA;            // A1 need to find method of discharge units&#xA;            List dfvUnits = findAllClientUnits(visit, rptType)&#xA;            //println(&quot;dfv Unit list &quot;+dfvUnits)&#xA;            // A2 need to find on client units&#xA;            if(dfvUnits != null &amp;&amp; dfvUnits.size() &gt; 0){&#xA;                List sortDfvUnits = sortUnitsByLineOp(dfvUnits)&#xA;                //println(&quot;sort dfv Unit list &quot;+sortDfvUnits)&#xA;                // A3 group line operators togethers&#xA;                // A4 add report creation and emailing spcecific to line operator&#xA;                procClientCntr(sortDfvUnits)&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;&#xA;    /*&#xA;    * Method finds all NON-MAT Container and Add the cntrs to a list&#xA;    * Returns a List of containers&#xA;    */&#xA;    public List findAllClientUnits(Object vesVisit, String rptType)&#xA;    {&#xA;        ArrayList vesVistUnitLists = new ArrayList();&#xA;        try{&#xA;            Long lineOpGkey = LineOperator.findLineOperatorById(&quot;MAT&quot;).bzuGkey&#xA;            //Long cvGkey = vesVisit.getCvdCv().getCvGkey()&#xA;            def id = vesVisit.getCvdCv().getCvId()&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;            if('DISCHARGE'.equals(rptType)){&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, id));&#xA;            }else if ('LOAD'.equals(rptType)){&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID, id));&#xA;            }&#xA;            dq = dq.addDqPredicate(PredicateFactory.ne(UnitField.UFV_LINE_OPERATOR_GKEY, lineOpGkey)).addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY, UnitCategoryEnum.THROUGH)).addDqOrdering(Ordering.asc(UnitField.UFV_LINE_OPERATOR_GKEY));  //A17&#xA;            List vesVistUnits  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            println(&quot;dq ====&quot;+dq+&quot; unitsList ====&quot;+(vesVistUnits != null ? vesVistUnits.size() : &quot;NO RESULT&quot;));&#xA;&#xA;            if('DISCHARGE'.equals(rptType)){&#xA;                vesVistUnitLists.addAll(vesVistUnits);&#xA;            } else if ('LOAD'.equals(rptType)){&#xA;                Iterator iter = vesVistUnits.iterator();&#xA;                while(iter.hasNext()) {&#xA;                    def ufv = iter.next();&#xA;                    def transitState =  ufv.getUfvTransitState()&#xA;                    if (transitState != null) {&#xA;                        transitState = transitState != null ? transitState.getKey() : ''&#xA;                        def tState = transitState.split(&quot;_&quot;)&#xA;                        transitState = tState[1]&#xA;                    }&#xA;&#xA;                    if (transitState != null &amp;&amp; (&quot;DEPARTED&quot;.equals(transitState) || &quot;LOADED&quot;.equals(transitState) ))&#xA;                    {&#xA;                        vesVistUnitLists.add(ufv)&#xA;                    }&#xA;                }&#xA;&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return vesVistUnitLists&#xA;    }&#xA;&#xA;    //1.Maps unit Data to report file attribute&#xA;    public HashMap populateUnitData(UnitFacilityVisit ufv)&#xA;    {&#xA;        def unit = ufv.ufvUnit&#xA;        def transitState=unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;        if(ufv.ufvTimeIn == null){ //A14&#xA;            return  null;  // Would be a Through unit&#xA;        }&#xA;&#xA;        HashMap map = null;&#xA;        try&#xA;        {&#xA;            map = new HashMap();&#xA;            map.put(&quot;UnitNbr&quot;, unit.getFieldValue(&quot;unitId&quot;));&#xA;            map.put(&quot;PositionSlot&quot;, unit.unitFreightKind.name);&#xA;            map.put(&quot;POD&quot;, unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;));&#xA;            map.put(&quot;POL&quot;, unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;));&#xA;            map.put(&quot;EquipmentType&quot;, unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;));&#xA;            map.put(&quot;OutBoundCarrierId&quot;, outBoundCarrierId);&#xA;            map.put(&quot;LineOperator&quot;,unit.getFieldValue(&quot;unitLineOperator.bzuId&quot;));&#xA;            map.put(&quot;Destination&quot;,unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;));&#xA;            //A8&#xA;            if('DISCHARGE'.equals(reportType)){&#xA;                map.put(&quot;InTime&quot;,ContextHelper.formatTimestamp(ufv.ufvTimeIn, timezone));&#xA;            }else if ('LOAD'.equals(reportType)){&#xA;                map.put(&quot;InTime&quot;,ContextHelper.formatTimestamp(ufv.ufvTimeOfLastMove, timezone));&#xA;            }&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return map;&#xA;    }&#xA;    /*&#xA;    * Method sorts NON-MAT Container by Line Operator and created Individial list of each LineOperator&#xA;    * Returns List of Individual LineOperator List (example: ListOne=ALL MAE,ListTwo=ALL HCL,ListThree=ALL APL)&#xA;    */&#xA;    public List sortUnitsByLineOp(List unitList)&#xA;    {&#xA;        ArrayList listAllLineOp = new ArrayList();&#xA;        try{&#xA;            def aUfv = null;&#xA;            def prevLineOp = null;&#xA;            ArrayList listPerLineOp = null;&#xA;            Iterator itUnitList = unitList.iterator();&#xA;            while(itUnitList.hasNext()){&#xA;                aUfv = itUnitList.next();&#xA;                if(aUfv.ufvUnit.unitLineOperator.bzuId.equals(prevLineOp)){&#xA;                    listPerLineOp.add(aUfv);&#xA;                }else{&#xA;                    if(prevLineOp !=null){&#xA;                        listAllLineOp.add(listPerLineOp)&#xA;                    }&#xA;                    //First time it ill come here and createObject - Initialize new Variable&#xA;                    listPerLineOp = new ArrayList();&#xA;                    //Set new Variable&#xA;                    listPerLineOp.add(aUfv);&#xA;                } //Else Ends&#xA;                prevLineOp = aUfv.ufvUnit.unitLineOperator.bzuId&#xA;            } //While Ends&#xA;            //Add last loop values - Just incase there was only one unit and it went into the else loop&#xA;            listAllLineOp.add(listPerLineOp)&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return listAllLineOp&#xA;    }&#xA;    /*&#xA;    * Method a) Reads Each Individual LineOperator conatiner list&#xA;    * b) Populates Report data&#xA;      c) Gets Line Operator contact Information&#xA;      d) Calls Ireport code and mails report to specific LineOperator Email&#xA;    */&#xA;    public void procClientCntr(List list){&#xA;        try{&#xA;            Iterator itUnitList = list.iterator();&#xA;            def aUfv  = null;&#xA;            while(itUnitList.hasNext()){&#xA;                def contactName = null;&#xA;                HashMap fmtMap = null;&#xA;                def contactEmail = &quot;1aktosdevteam@matson.com&quot;;&#xA;                //def contactEmail = &quot;1TOSDevTeamHON@gmail.com&quot;;&#xA;                ArrayList rptUnitList = new ArrayList();&#xA;                ArrayList perLinOplist = itUnitList.next();&#xA;                Iterator  itperLinOp = perLinOplist.iterator();&#xA;                while(itperLinOp.hasNext()){&#xA;                    aUfv = itperLinOp.next();&#xA;                    //println(&quot;unitId=&quot;+aUfv.ufvUnit.unitId+&quot;    LineOP=&quot;+aUfv.ufvUnit.unitLineOperator.bzuId)&#xA;                    //Populate Report Data&#xA;                    fmtMap = populateUnitData(aUfv)&#xA;                    if(fmtMap != null){&#xA;                        rptUnitList.add(fmtMap)&#xA;                    }&#xA;                }//Inner While Ends&#xA;&#xA;                //Select LineOperator Contact Information&#xA;                if(aUfv != null){&#xA;                    def lineOperator = aUfv.ufvUnit.unitLineOperator&#xA;                    def contactInfo = lineOperator.bzuCtct&#xA;                    if(contactInfo != null){&#xA;                        contactName = contactInfo.ctctName&#xA;                        contactEmail = contactInfo.ctctEmailAddress&#xA;                    }//Outer While ends&#xA;&#xA;                    //Call IReport Generation Code Here&#xA;                    processRpt(rptUnitList, contactName, contactEmail)&#xA;                    //println(&quot;--------------------------------------------------&quot;)&#xA;                    //println(&quot;--------------------------------------------------&quot;)&#xA;                }// If Ends&#xA;            } //While Ends&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;    public void processRpt(List unitList, String contactName, String contactEmail){&#xA;        try{&#xA;            println(&quot;unitList :&quot;+ (unitList != null ? unitList.size() : &quot;EMPTY&quot;))&#xA;&#xA;            //Set Report Parameter&#xA;            def reportDesignName = null;&#xA;            def displayType = null;&#xA;            HashMap parameters = new HashMap();&#xA;            String strDate = ContextHelper.formatTimestamp(new Date(), timezone)&#xA;&#xA;            //println(&quot;Event Time ::&quot;+event.getEvent().getEventTime()+&quot;    TimeZone:&quot;+ContextHelper.getThreadUserTimezone()+&quot;  strDate ::&quot;+strDate)&#xA;            parameters.put(&quot;Date&quot;,strDate);&#xA;            parameters.put(&quot;recordCount&quot;,(unitList != null ? unitList.size() : 0))&#xA;&#xA;            //A7&#xA;            if(&quot;DISCHARGE&quot;.equals(reportType)){&#xA;                reportDesignName = &quot;CLIENT DISCHARGE AUDIT&quot;;&#xA;                displayType = &quot;Discharge&quot;;&#xA;&#xA;            }else if(&quot;LOAD&quot;.equals(reportType)){&#xA;                reportDesignName = &quot;CLIENT LOAD AUDIT&quot;;&#xA;                displayType = &quot;Load&quot;;&#xA;            }&#xA;&#xA;            //A401&#xA;            def gvyRptUtil = getGroovyClassInstance(&quot;ReportFieldSortUtil&quot;)&#xA;            if(unitList != null &amp;&amp; unitList.size() &gt; 0){&#xA;                unitList =  gvyRptUtil.processFieldSort(unitList,&quot;EquipmentType,UnitNbr&quot;)&#xA;                Map mapList = (Map)unitList.get(0);&#xA;                println(&quot;mapList=&quot;+mapList);&#xA;                //Create and Mail Report&#xA;                JRDataSource ds = new JRMapCollectionDataSource(unitList);&#xA;                def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;                reportRunner.emailReport(ds, parameters, reportDesignName, contactEmail, &quot;Matson Client Report - &quot; +outBoundCarrierId+&quot; &quot;+displayType, &quot;Attached is the &quot;+outBoundCarrierId+ &quot; &quot;+displayType+&quot; report&quot;);&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;    } //method ends&#xA;&#xA;    //A2 -- Starts last discharge report&#xA;&#x9;  public boolean processLastDischCntrRpt(event, String rptType){&#xA;&#x9;    init() // Initialize Global variable&#xA;&#x9;    HashMap mapAuto = new HashMap();&#xA;&#x9;    HashMap mapCyHon = new HashMap();&#xA;&#x9;    HashMap mapCyOthers = new HashMap();&#xA;&#x9;&#x9;//A22&#xA;&#x9;&#x9;HashMap mapAutoP2 = new HashMap();&#xA;&#x9;&#x9;HashMap mapCyHonP2 = new HashMap();&#xA;&#x9;&#x9;HashMap mapCyOthersP2 = new HashMap();&#xA;&#xA;&#x9;    //A7&#xA;&#x9;    reportType = reportType == null ? rptType : reportType&#xA;&#x9;    List units = null;&#xA;&#x9;    println(&quot;processLastDischCntrRpt begin&quot;)&#xA;&#x9;    try{&#xA;&#x9;      inj = new GroovyInjectionBase();&#xA;&#x9;      def visit = event.getEntity();&#xA;&#x9;      def carrierId =  visit.cvdCv&#xA;&#xA;&#x9;      if(&quot;BARGE&quot;.equals(visit.vvdVessel.vesVesselClass.vesclassVesselType.name)) {&#xA;&#x9;        return;&#xA;&#x9;      }&#xA;&#xA;&#x9;      units = findAllUnitsForVesVoy(visit)&#xA;&#xA;&#x9;      Iterator iter = units.iterator();&#xA;&#x9;      UnitFacilityVisit ufv = null;&#xA;&#x9;      Unit unit = null;&#xA;&#x9;      def dest = null;&#xA;&#x9;      def commodity = null;&#xA;&#x9;      def timeIn = null;&#xA;&#x9;      def aibcarrierId = null;&#xA;&#x9;      while(iter.hasNext()) {&#xA;&#x9;        ufv = iter.next();&#xA;&#x9;        unit = ufv.ufvUnit&#xA;&#x9;        println(&quot;unit number is &quot;+unit.getFieldValue(&quot;unitId&quot;))&#xA;&#x9;        if(unit.unitActiveUfv == null || UnitVisitStateEnum.RETIRED.equals(unit.unitActiveUfv.ufvVisitState) || UnitVisitStateEnum.ADVISED.equals(unit.unitActiveUfv.ufvVisitState)){&#xA;&#x9;          continue;&#xA;&#x9;        }&#xA;&#x9;        dest = unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;)&#xA;&#x9;        commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;)&#xA;&#x9;        commodity = commodity != null ? commodity : ''&#xA;&#x9;        //A8&#xA;&#x9;        if(&quot;DISCHARGE&quot;.equals(reportType)){&#xA;&#x9;          timeIn = ufv.ufvTimeIn&#xA;&#x9;        }else if (&quot;LOAD&quot;.equals(reportType)){&#xA;&#x9;          timeIn = ufv.ufvTimeOfLastMove&#xA;&#x9;        }&#xA;&#x9;        try{&#xA;&#x9;          println (&quot; visit :&quot; + visit)&#xA;&#x9;          String outboundCarrierVehicleId = visit.getCarrierVehicleId();&#xA;&#x9;          String outboundCarrierVehicleVoy = visit.getCarrierObVoyNbrOrTrainId();&#xA;&#x9;          outBoundCarrierId = outboundCarrierVehicleId + outboundCarrierVehicleVoy;&#xA;&#x9;          println (&quot; outboundCarrierId: &quot; + outBoundCarrierId);&#xA;&#x9;        } catch (Exception e){&#xA;&#x9;          println (&quot; Exception in getting outbound Carrier Id &quot;);&#xA;&#x9;        }&#xA;&#xA;&#x9;        def lkpSlot = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;&#x9;        lkpSlot = lkpSlot!= null ? lkpSlot : ''&#xA;&#x9;        println(&quot;unit &quot;+unit.getFieldValue(&quot;unitId&quot;)+&quot; commodity &quot;+commodity+&quot; lkpSlot&quot;+lkpSlot+&quot; dest&quot;+dest)&#xA;&#x9;        def lkpSlotValue = lkpSlot.indexOf(&quot;.&quot;)== -1 ? lkpSlot : lkpSlot.substring(0,lkpSlot.indexOf(&quot;.&quot;));&#xA;&#x9;        println(&quot;exception in the above unit  &quot;+lkpSlotValue);&#xA;&#x9;        boolean pier29Loc = lkpSlotValue.startsWith('P29') || lkpSlotValue.startsWith('29Z') ? true : false&#xA;&#x9;&#x9;&#x9;boolean pier2Loc = lkpSlotValue.startsWith('P2') ? true : false&#xA;&#x9;        println(&quot;unit=&quot;+unit.getFieldValue(&quot;unitId&quot;)+&quot;, commodity=&quot;+commodity+&quot;, timeIn=&quot;+timeIn+&quot;, dest=&quot;+dest+&quot;, pier29Loc=&quot;+pier29Loc+&quot;, pier2Loc=&quot;+pier2Loc)&#xA;&#x9;        if(pier2Loc) {//A22&#xA;&#x9;&#x9;&#x9;&#x9;if(commodity.contains('AUTO') &amp;&amp; timeIn != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;mapAutoP2.put(ufv, timeIn)&#xA;&#x9;&#x9;&#x9;&#x9;} else if(!commodity.contains('AUTO') &amp;&amp; ContextHelper.getThreadFacility().getFcyId().equals(dest) &amp;&amp; timeIn != null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;mapCyHonP2.put(ufv, timeIn)&#xA;&#x9;&#x9;&#x9;&#x9;} else if(!commodity.contains('AUTO') &amp;&amp; !ContextHelper.getThreadFacility().getFcyId().equals(dest) &amp;&amp; timeIn != null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;mapCyOthersP2.put(ufv, timeIn)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}//A22&#xA;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;if(commodity.contains('AUTO') &amp;&amp; timeIn != null) {&#xA;&#x9;&#x9;          mapAuto.put(ufv, timeIn)&#xA;&#x9;&#x9;        }else if (!commodity.contains('AUTO') &amp;&amp; !pier29Loc &amp;&amp; ContextHelper.getThreadFacility().getFcyId().equals(dest) &amp;&amp; timeIn != null){&#xA;&#x9;&#x9;          mapCyHon.put(ufv, timeIn)&#xA;&#x9;&#x9;        }else if(!commodity.contains('AUTO') &amp;&amp;  !pier29Loc &amp;&amp; !ContextHelper.getThreadFacility().getFcyId().equals(dest) &amp;&amp; timeIn != null){&#xA;&#x9;&#x9;          mapCyOthers.put(ufv, timeIn)&#xA;&#x9;&#x9;        }&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;      }&#xA;&#x9;      //println(&quot;  mapAuto.size() ===&quot;+ mapAuto.size()+&quot; mapCyHon.size() ===&quot;+mapCyHon.size()+&quot; mapCyOthers.size() ===&quot;+mapCyOthers.size())&#xA;&#x9;      //Sort Map Object&#xA;&#x9;      rptFieldSortUtil = rptFieldSortUtil != null ? rptFieldSortUtil : inj.getGroovyClassInstance(&quot;ReportFieldSortUtil&quot;);&#xA;&#x9;      mapAuto = mapAuto != null &amp;&amp; mapAuto.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapAuto) : null //sort Auto&#xA;&#x9;      mapCyHon = mapCyHon!= null &amp;&amp; mapCyHon.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapCyHon) : null //sort CyHon&#xA;&#x9;      mapCyOthers = mapCyOthers != null &amp;&amp; mapCyOthers.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapCyOthers) : null //sort CyNonHon&#xA;&#x9;&#x9;  //A22&#xA;&#x9;&#x9;  mapAutoP2 = mapAutoP2 != null &amp;&amp; mapAutoP2.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapAutoP2) : null //sort Auto&#xA;&#x9;&#x9;  mapCyHonP2 = mapCyHonP2!= null &amp;&amp; mapCyHonP2.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapCyHonP2) : null //sort CyHon&#xA;&#x9;&#x9;  mapCyOthersP2 = mapCyOthersP2 != null &amp;&amp; mapCyOthersP2.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapCyOthersP2) : null //sort CyNonHon&#xA;&#xA;&#x9;      //last Disch Units&#xA;&#x9;      UnitFacilityVisit ufvAuto = getLastDischUnit(mapAuto,&quot;&quot;);&#xA;&#x9;      UnitFacilityVisit ufvCyHon = getLastDischUnit(mapCyHon,&quot;&quot;);&#xA;&#x9;      UnitFacilityVisit ufvCyOthers = getLastDischUnit(mapCyOthers,&quot;&quot;);&#xA;&#x9;&#x9;  //A22&#xA;&#x9;&#x9;  UnitFacilityVisit ufvAutoP2 = getLastDischUnit(mapAutoP2,&quot;&quot;);&#xA;&#x9;&#x9;  UnitFacilityVisit ufvCyHonP2 = getLastDischUnit(mapCyHonP2,&quot;&quot;);&#xA;&#x9;&#x9;  UnitFacilityVisit ufvCyOthersP2 = getLastDischUnit(mapCyOthersP2,&quot;&quot;);&#xA;&#xA;&#x9;      println(&quot;mapDisplayLst size ==&quot;+mapDisplayLst.size())&#xA;&#x9;      mapDisplayLst = mapDisplayLst.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapDisplayLst) : null&#xA;&#x9;      def lstDischUfv = getLastDischUnit(mapDisplayLst,&quot;ALL&quot;);&#xA;&#x9;      println(&quot;ufvAuto=&quot;+ufvAuto+&quot;, ufvCyHon=&quot;+ufvCyHon+&quot;, ufvCyOthers=&quot;+ufvCyOthers+&quot;,  lstDischUfv=&quot;+lstDischUfv);&#xA;&#x9;&#x9;  //A22&#xA;&#x9;&#x9;  println(&quot;mapDisplayLstP2 size ==&quot;+mapDisplayLst.size())&#xA;&#x9;&#x9;  mapDisplayLstP2 = mapDisplayLstP2.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(mapDisplayLstP2) : null&#xA;&#x9;&#x9;  def lstDischUfvP2 = getLastDischUnit(mapDisplayLstP2, &quot;ALL&quot;)&#xA;&#x9;&#x9;  println(&quot;ufvAutoP2=&quot;+ufvAutoP2+&quot;, ufvCyHonP2=&quot;+ufvCyHonP2+&quot;, ufvCyOthersP2=&quot;+ufvCyOthersP2+&quot;, lstDischUfvP2=&quot;+lstDischUfvP2);&#xA;&#x9;      //For Report Display&#xA;&#x9;      HashMap lastUnit = null;&#xA;&#x9;      ArrayList unitRptList = new ArrayList();&#xA;&#xA;&#x9;      String pier2Report = null;&#xA;&#x9;      if (ufvAutoP2 == null &amp;&amp; ufvCyHonP2 == null &amp;&amp; ufvCyOthersP2 == null &amp;&amp; lstDischUfvP2 == null){&#xA;&#x9;      &#x9;pier2Report = &quot;No PIER2 Discharges for &quot;+ outBoundCarrierId;&#xA;&#x9;      }&#xA;&#xA;&#x9;      unitRptList.add(populateLstDischUnit(ufvAuto, &quot;AUTO&quot;, &quot;SI&quot;,pier2Report))&#xA;&#x9;      unitRptList.add(populateLstDischUnit(ufvCyHon, &quot;CY-HON&quot;, &quot;SI&quot;,pier2Report))&#xA;&#x9;      unitRptList.add(populateLstDischUnit(ufvCyOthers, &quot;CY-OTHER&quot;, &quot;SI&quot;,pier2Report))&#xA;&#x9;      unitRptList.add(populateLstDischUnit(lstDischUfv, &quot;OVERALL&quot;, &quot;SI&quot;,pier2Report))&#xA;&#x9;&#x9;  //A22&#xA;&#x9;      if (ufvAutoP2 != null || ufvCyHonP2 != null || ufvCyOthersP2 != null || lstDischUfvP2 != null){&#xA;&#x9;      &#x9;  unitRptList.add(populateLstDischUnit(ufvAutoP2, &quot;P2-AUTO&quot;, &quot;PIER2&quot;,pier2Report))&#xA;&#x9;      &#x9;  unitRptList.add(populateLstDischUnit(ufvCyHonP2, &quot;P2-CY-HON&quot;, &quot;PIER2&quot;,pier2Report))&#xA;&#x9;&#x9;  unitRptList.add(populateLstDischUnit(ufvCyOthersP2, &quot;P2-CY-OTHER&quot;, &quot;PIER2&quot;,pier2Report))&#xA;&#x9;&#x9;  unitRptList.add(populateLstDischUnit(lstDischUfvP2, &quot;P2-OVERALL&quot;, &quot;PIER2&quot;,pier2Report))&#xA;&#x9;      }&#xA;&#xA;&#xA;&#xA;&#x9;      //Set Report Parameter&#xA;&#x9;      HashMap parameters = new HashMap();&#xA;&#x9;      String strDate = ContextHelper.formatTimestamp(event.getEvent().getEventTime(), timezone)&#xA;&#x9;      parameters.put(&quot;Date&quot;,strDate);&#xA;&#x9;      println(&quot; unitRptList size ===&quot;+unitRptList.size())&#xA;&#x9;      //Create and Mail Report&#xA;&#x9;      JRDataSource ds = new JRMapCollectionDataSource(unitRptList);&#xA;&#x9;      def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;      def reportDesignName = null;&#xA;&#x9;      def displayType = null;&#xA;&#x9;      //A7&#xA;&#x9;      if(&quot;DISCHARGE&quot;.equals(reportType)){&#xA;&#x9;        reportDesignName = &quot;DISCH REPORT FOR LAST CNTR SPLIT1&quot;;&#xA;&#x9;        displayType = &quot;Discharge&quot;;&#xA;&#x9;      }else if (&quot;LOAD&quot;.equals(reportType)){&#xA;&#x9;        reportDesignName = &quot;LOAD REPORT FOR LAST CNTR&quot;;&#xA;&#x9;        displayType = &quot;Load&quot;;&#xA;&#x9;      }&#xA;&#xA;&#x9;      println(&quot;ds = &quot;+ds+&quot;   unitreportlist = &quot;+unitRptList+&quot; reportType=&quot;+reportType);&#xA;&#x9;      //reportRunner.emailReport(ds, parameters, &quot;DISCH REPORT FOR LAST CNTR&quot;, &quot;1tosdevteamhon@gmail.com&quot;,outBoundCarrierId+&quot; Last Container Discharge Report&quot; ,outBoundCarrierId+&quot; Last Container Discharge Report&quot;);&#xA;&#x9;      //reportRunner.emailReport(ds, parameters,reportDesignName , &quot;1TOSDevTeamHON@gmail.com&quot;,outBoundCarrierId+&quot; Last Container &quot;+displayType+&quot; Report&quot; ,outBoundCarrierId+&quot; Last Container &quot;+displayType+&quot; Report&quot;);  //A20&#xA;&#x9;      reportRunner.emailReport(ds, parameters,reportDesignName , &quot;1aktosdevteam@matson.com&quot;,outBoundCarrierId+&quot; Last Container &quot;+displayType+&quot; Report&quot; ,outBoundCarrierId+&quot; Last Container &quot;+displayType+&quot; Report&quot;);  //A20&#xA;&#x9;      println(&quot;processLastDischCntrRpt end&quot;)&#xA;&#x9;    }catch(Exception e){&#xA;&#x9;      e.printStackTrace();&#xA;&#x9;    }&#xA;&#x9;  }&#xA;&#xA;&#x9;  public UnitFacilityVisit getLastDischUnit(Map map, String type)&#xA;&#x9;  {&#xA;&#x9;    def unit = null;&#xA;&#x9;    def ufv = null;&#xA;&#x9;    def timeIn = null;&#xA;&#x9;    try{&#xA;&#x9;      if(map == null){&#xA;&#x9;        return null;&#xA;&#x9;      }&#xA;&#xA;&#x9;      Iterator it = map.keySet().iterator();&#xA;&#x9;      while (it.hasNext()){&#xA;&#x9;        ufv = it.next();&#xA;&#x9;        timeIn = map.get(ufv)&#xA;&#x9;      }&#xA;&#x9;&#x9;  if(ufv==null) {//A22&#xA;&#x9;&#x9;&#x9;  return null;&#xA;&#x9;&#x9;  }&#xA;&#xA;&#x9;      unit = ufv.getUfvUnit();&#xA;&#x9;      //1. Check if Unit has multiple discharges&#xA;&#x9;      EventType evntType = EventType.findEventType(&quot;UNIT_DISCH&quot;);&#xA;&#x9;      EventManager eventManager = (EventManager)Roastery.getBean(&quot;eventManager&quot;);&#xA;&#x9;      List events = eventManager.getEventHistory(evntType, unit);&#xA;&#xA;&#x9;      if (events.size() == 2 &amp;&amp; !&quot;ALL&quot;.equals(type)) {&#xA;&#x9;        def  event1 = events.get(0)&#xA;&#x9;        def previousPos1 = event1.getEvntFieldChangesString();&#xA;&#x9;        def note1 = previousPos1 != null ? previousPos1 : &quot;&quot;;&#xA;&#x9;        boolean b1 = note1.contains(outBoundCarrierId);&#xA;&#xA;&#x9;        def  event2 = events.get(1)&#xA;&#x9;        def previousPos2 = event2.getEvntFieldChangesString();&#xA;&#x9;        def note2 = previousPos2 != null ? previousPos2 : &quot;&quot;;&#xA;&#x9;        boolean b2 = note2.contains(outBoundCarrierId)&#xA;&#x9;        //Set Correct Disch Time in Unit&#xA;&#x9;        if(b1){&#xA;&#x9;          println(&quot;Event Date 1=&quot;+event1.getEventTime());&#xA;&#x9;          map.remove(ufv);&#xA;&#x9;          map.put(ufv,event1.getEventTime());&#xA;&#x9;        }else if(b2){&#xA;&#x9;          println(&quot;Event Date 2=&quot;+event2.getEventTime());&#xA;&#x9;          map.remove(ufv);&#xA;&#x9;          map.put(ufv,event2.getEventTime());&#xA;&#x9;        }&#xA;&#xA;&#x9;        rptFieldSortUtil = rptFieldSortUtil != null ? rptFieldSortUtil : getGroovyClassInstance(&quot;ReportFieldSortUtil&quot;);&#xA;&#x9;        Map tempMap = map != null &amp;&amp; map.size() &gt; 0 ? rptFieldSortUtil.sortMapByValue(map) : null //sort Map Again&#xA;&#xA;&#x9;        Iterator itAgain = tempMap.keySet().iterator();&#xA;&#x9;        while (itAgain.hasNext()){&#xA;&#x9;          ufv = itAgain.next();&#xA;&#x9;          timeIn = tempMap.get(ufv)&#xA;&#x9;        }&#xA;&#xA;&#x9;      }//If Ends&#xA;&#xA;&#x9;      if(ufv != null){&#xA;&#x9;&#x9;&#x9;  //A22&#xA;&#x9;&#x9;&#x9;  def lkpSlot = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;&#x9;&#x9;&#x9;  lkpSlot = lkpSlot!= null ? lkpSlot : ''&#xA;&#x9;&#x9;&#x9;  def lkpSlotValue = lkpSlot.indexOf(&quot;.&quot;)== -1 ? lkpSlot : lkpSlot.substring(0,lkpSlot.indexOf(&quot;.&quot;));&#xA;&#x9;&#x9;&#x9;  boolean pier2Loc = lkpSlotValue.startsWith('P2') ? true : false&#xA;&#x9;&#x9;&#x9;  if(pier2Loc) {&#xA;&#x9;&#x9;&#x9;&#x9;  mapDisplayLstP2.put(ufv,timeIn)&#xA;&#x9;&#x9;&#x9;  }//A22&#xA;&#x9;&#x9;&#x9;  else {&#xA;&#x9;&#x9;&#x9;&#x9;  mapDisplayLst.put(ufv,timeIn)&#xA;&#x9;&#x9;&#x9;  }&#xA;&#x9;      }&#xA;&#xA;&#x9;    }catch(Exception e){&#xA;&#x9;      e.printStackTrace()&#xA;&#x9;    }&#xA;&#x9;    return ufv;&#xA;&#x9;  }&#xA;&#xA;&#xA;&#x9;  public HashMap populateLstDischUnit(UnitFacilityVisit ufv, String type, String dischAt, String pier2Report)&#xA;&#x9;  &#x9;  {&#xA;&#x9;  &#x9;    HashMap map = new HashMap();&#xA;&#xA;&#x9;  &#x9;    //Unit facility is null&#xA;&#x9;  &#x9;    if(ufv == null){&#xA;&#x9;  &#x9;&#x9;  map.put(&quot;DischargeAt&quot;, dischAt)//A22&#xA;&#x9;  &#x9;      map.put(&quot;type&quot;, type );&#xA;&#x9;  &#x9;      return map;&#xA;&#x9;  &#x9;    }&#xA;&#x9;  &#x9;    Unit unit = ufv.ufvUnit;&#xA;&#x9;  &#x9;    try&#xA;&#x9;  &#x9;    {&#xA;&#xA;&#x9;  &#x9;      //println(&quot;outBoundCarrierId ::::::::::::::&quot;+outBoundCarrierId);&#xA;&#x9;  &#x9;      map.put(&quot;UnitNbr&quot;, unit.getFieldValue(&quot;unitId&quot;));&#xA;&#x9;  &#x9;      map.put(&quot;PositionSlot&quot;, ufv.ufvArrivePosition.posSlot);&#xA;&#x9;  &#x9;      map.put(&quot;OutBoundCarrierId&quot;, outBoundCarrierId);&#xA;&#x9;  &#x9;      map.put(&quot;type&quot;, type );&#xA;&#x9;  &#x9;      String strTimeInDate = &#x9;gvyEventUtil.formatDate(ufv.ufvTimeIn, timezone)&#xA;&#x9;  &#x9;      String strTimeInTime = &#x9;gvyEventUtil.formatTime(ufv.ufvTimeIn, timezone)&#xA;&#x9;  &#x9;      map.put(&quot;InTime&quot;, strTimeInTime);&#xA;&#x9;  &#x9;      map.put(&quot;InTimeDate&quot;, strTimeInDate);&#xA;&#x9;  &#x9;      map.put(&quot;DischargeAt&quot;, dischAt)//A22&#xA;&#x9;  &#x9;      map.put(&quot;UnitFlexString01&quot;, pier2Report);&#xA;&#xA;&#xA;&#x9;  &#x9;    }catch(Exception e){&#xA;&#x9;  &#x9;      e.printStackTrace();&#xA;&#x9;  &#x9;    }&#xA;&#x9;  &#x9;    return map;&#xA;  &#x9;}&#xA;&#xA;    public List findAllUnitsForVesVoy(Object vesVisit)&#xA;    {&#xA;        ArrayList vesVistUnitLists = new ArrayList();&#xA;        try{&#xA;            //Long cvGkey = vesVisit.getCvdCv().getCvGkey()&#xA;            //DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;).addDqPredicate(PredicateFactory.eq(UnitField.UFV_DECLARED_IB_CV, cvGkey)).addDqOrdering(Ordering.asc(UnitField.UFV_VISIT_STATE));&#xA;            def Id = vesVisit.getCvdCv().getCvId()&#xA;            println(&quot;Id ====&quot;+Id)&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;            if(&quot;DISCHARGE&quot;.equals(reportType)){&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, Id));&#xA;            }else if(&quot;LOAD&quot;.equals(reportType)){&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID, Id));&#xA;            }//A13&#xA;            //dq = dq.addDqPredicate(PredicateFactory.ne(UnitField.UNIT_CURRENT_UFV_VISIT_STATE, UnitVisitStateEnum.RETIRED)).dq.addDqPredicate(PredicateFactory.ne(UnitField.UNIT_CURRENT_UFV_VISIT_STATE, UnitVisitStateEnum.ADVISED));&#xA;            dq = dq.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY, UnitCategoryEnum.THROUGH)).addDqPredicate(PredicateFactory.ne(UnitField.UFV_FREIGHT_KIND, FreightKindEnum.MTY)).addDqOrdering(Ordering.asc(UnitField.UFV_VISIT_STATE));&#xA;            List vesVistUnits  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            vesVistUnitLists.addAll(vesVistUnits);&#xA;            println(&quot;vesVistUnitLists size is ===&quot;+vesVistUnitLists.size())&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;        return vesVistUnitLists&#xA;    }&#xA;&#xA;    //A11&#xA;    public String processDischCounts(Object vesVisit, String type)&#xA;    {&#xA;&#xA;        List onDeckList = new ArrayList();&#xA;        List belowDeckList = new ArrayList();&#xA;        String rptTitle = null;&#xA;        String vesselGkey = vesVisit.getCvdCv().getCvGkey();&#xA;&#xA;        HashSet positionSet = new HashSet();&#xA;        List robList = new ArrayList();&#xA;        List restowList = new ArrayList();&#xA;        List trailerList = new ArrayList();&#xA;        List totalDfvList = new ArrayList();&#xA;        StringBuffer buf = new StringBuffer();&#xA;        def id = vesVisit.getCvdCv().getCvId();&#xA;        def checkUnit = &quot;0000000000&quot;;&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;        dq = dq.addDqPredicate(PredicateFactory.ne(UnitField.UFV_VISIT_STATE,UnitVisitStateEnum.ADVISED)).addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S10_ADVISED)).addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S99_RETIRED));&#xA;        if(&quot;DISCHARGE&quot;.equals(type)){&#xA;            //dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, id));&#xA;            //dq = dq.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY,UnitCategoryEnum.THROUGH))&#xA;&#x9;&#x9;&#x9;dq = dq.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_TYPE, &quot;VESSEL&quot;))&#xA;&#x9;&#x9;&#x9;dq = dq.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_GKEY, vesselGkey))&#xA;&#x9;&#x9;&#x9;dq = dq.addDqOrdering(Ordering.asc(UnitField.UFV_UNIT_ID));&#xA;            rptTitle = &quot;Discharge Audit Details&quot;;&#xA;        }else if(&quot;LOAD&quot;.equals(type)){&#xA;            dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID, id)).addDqPredicate(PredicateFactory.like(UnitField.UFV_POS_NAME,&quot;V%&quot;));&#xA;            rptTitle = &quot;Sail Audit Details&quot;;&#xA;        }&#xA;        dq = dq.addDqOrdering(Ordering.asc(UnitField.UFV_CATEGORY));&#xA;        List unitsList  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;        println(&quot;Load count is &quot;+unitsList.size());&#xA;        try{&#xA;            Iterator iter = unitsList.iterator();&#xA;            while(iter.hasNext()) {&#xA;                def ufv = iter.next();&#xA;                def unit = ufv.ufvUnit;&#xA;                def unitId = unit.getFieldValue(&quot;unitId&quot;)&#xA;                def equipType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;                def category =&#x9;unit.getUnitCategory();&#xA;                def deckPosition = null;&#xA;                def restow = unit.getFieldValue(&quot;unitActiveUfv.ufvRestowType&quot;);&#xA;                restow = restow != null ? restow.getKey() : ''&#xA;&#xA;                if(&quot;DISCHARGE&quot;.equals(type)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (unitId != checkUnit){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;checkUnit = unitId;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def EquipmentTypeClass = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;).getKey();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def transitState = ufv.ufvTransitState;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def transitStateKey = null;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (transitState != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;transitStateKey = transitState != null ? transitState.getKey() : ''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def tState = transitStateKey.split(&quot;_&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;transitStateKey = tState[1]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (EquipmentTypeClass.equalsIgnoreCase(&quot;CHASSIS&quot;) || equipType.startsWith(&quot;MG&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(unit.unitId+&quot;::&quot;+transitStateKey+&quot;::::&quot;+EquipmentTypeClass +&quot;::&quot;+equipType);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//check to exclude duplicate position for bundles and unitId does not have $&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (unitId!=null &amp;&amp; !unitId.contains(&quot;\$&quot;)) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;deckPosition = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString06&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;deckPosition is &quot;+deckPosition+&quot; for unit &quot;+unit.getFieldValue(&quot;unitId&quot;))&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//No Deck - Below Deck&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(&quot;OD&quot;.equals(deckPosition)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;onDeckList.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}else if(&quot;BD&quot;.equals(deckPosition)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;belowDeckList.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//ROB Restow and Trailer&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(UnitCategoryEnum.THROUGH.equals(category) &amp;&amp; &quot;RESTOW&quot;.equals(restow)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;restowList.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;robList.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}else if (UnitCategoryEnum.THROUGH.equals(category)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;robList.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}else if (&quot;RO&quot;.equals(deckPosition) || equipType.contains(&quot;B40&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;procTrailerCount(equipType);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}else{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;totalDfvList.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;                } else if (&quot;LOAD&quot;.equals(type)) {&#xA;                //check to exclude duplicate position for bundles and unitId does not have $&#xA;                    if (!positionSet.contains(ufv.getUfvLastKnownPosition()) &amp;&amp;&#xA;                            (unitId!=null &amp;&amp; !unitId.contains(&quot;\$&quot;))) {&#xA;&#xA;                            deckPosition = ufv.getUfvFlexString06()&#xA;                            //println(&quot;deckPosition is &quot;+deckPosition+&quot; for unit &quot;+unit.getFieldValue(&quot;unitId&quot;))&#xA;&#xA;                            //No Deck - Below Deck&#xA;                            if(&quot;OD&quot;.equals(deckPosition)){&#xA;                                onDeckList.add(unit);&#xA;                            }else if(&quot;BD&quot;.equals(deckPosition)){&#xA;                                belowDeckList.add(unit);&#xA;                            }&#xA;&#xA;&#xA;                            //ROB Restow and Trailer&#xA;                            if(UnitCategoryEnum.THROUGH.equals(category) &amp;&amp; &quot;RESTOW&quot;.equals(restow)){&#xA;                                restowList.add(unit);&#xA;                                robList.add(unit);&#xA;                            }else if (UnitCategoryEnum.THROUGH.equals(category)){&#xA;                                robList.add(unit);&#xA;                            }else if (&quot;RO&quot;.equals(deckPosition) || equipType.contains(&quot;B40&quot;)){&#xA;                                procTrailerCount(equipType);&#xA;                            }else{&#xA;                                totalDfvList.add(unit);&#xA;                            }&#xA;                    }&#xA;                    //else {&#xA;                    //println(&quot;UFV::&quot;+ufv+&quot; (&quot;+ufv.getUfvLastKnownPosition()+&quot;)&quot;);&#xA;                    //}&#xA;&#xA;                    positionSet.add(ufv.getUfvLastKnownPosition());&#xA;&#xA;                }&#xA;            }&#xA;&#xA;            rptFieldSortUtil = rptFieldSortUtil != null ? rptFieldSortUtil : inj.getGroovyClassInstance(&quot;ReportFieldSortUtil&quot;);&#xA;            mapTrailer = rptFieldSortUtil.sortMapByKey(mapTrailer);&#xA;&#xA;            // buf.append(&quot;   &quot;+rptTitle+&quot;  &quot;+eol);&#xA;            // buf.append(&quot;----------------------------&quot;+eol);&#xA;            buf.append(&quot;&quot;+eol);&#xA;            buf.append(&quot;Container : &quot;+totalDfvList.size()+eol);&#xA;            buf.append(&quot;ROB       : &quot;+robList.size()+eol);&#xA;            buf.append(&quot;Restow    : &quot;+restowList.size()+eol);&#xA;            buf.append(&quot;Trailer   : &quot;+trailerCnt+eol);&#xA;            Iterator it = mapTrailer.keySet().iterator(); //A21&#xA;            while (it.hasNext()){&#xA;                def equipSize = it.next();&#xA;                def eqCount = mapTrailer.get(equipSize)&#xA;                buf.append(&quot;  &quot;+(equipSize.length()== 3 ? equipSize+&quot; &quot; : equipSize )+&quot; : &quot;+eqCount+eol);&#xA;            }&#xA;            // buf.append(&quot;----------------------------&quot;+eol);&#xA;            //buf.append(eol+eol+eol+eol)&#xA;            //buf.append(&quot;    Deck Position Count  &quot;+eol);&#xA;            //buf.append(&quot;----------------------------&quot;+eol);&#xA;            //buf.append(&quot;OnDeck      : &quot;+onDeckList.size()+eol);&#xA;            //buf.append(&quot;BelowDeck   : &quot;+belowDeckList.size()+eol);&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;&#xA;        return buf.toString();&#xA;    }&#xA;    //A2- Ends&#xA;&#xA;    // A3 Email Confirmation Starts&#xA;&#xA;    public void discAuditConfirmationEmail(event, String type){&#xA;        inj = inj==null ? new GroovyInjectionBase(): inj;&#xA;        def sub = &quot;&quot;;  def acctSub = &quot;&quot;;&#xA;        def visit = event.getEntity();&#xA;        List acctListRpt = null;&#xA;        def reportDesignName = null;&#xA;        /*try {&#xA;&#xA;        def formatter = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#x9;&#x9;formatter.setTimeZone(TimeZone.getTimeZone(&quot;HST&quot;));&#xA;&#x9;&#x9;String vesselATA = formatter.format(visit.getFieldValue(&quot;cvdCv.cvATA&quot;));&#xA;&#x9;&#x9;String vesselATD = formatter.format(visit.getFieldValue(&quot;cvdCv.cvATD&quot;));&#xA;&#x9;&#x9;log(vesselATA+&quot;::&quot;+vesselATD);&#xA;&#x9;&#x9;DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#x9;&#x9;vesselATADate = df.parse(vesselATA);&#xA;&#x9;&#x9;vesselATDDate = df.parse(vesselATD);&#xA;&#x9;} catch (Exception e){&#xA;&#x9;println(&quot;ERRORO_WHILE_ATD_ATA ::&quot;+ e)&#xA;&#x9;}*/&#xA;&#xA;        try{&#xA;            def doer = event.event.evntAppliedBy   //Gets Doer&#xA;            doer = doer.replace('user:','')&#xA;            def carrierId = visit.cvdCv&#xA;            def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;)  // calls Email call&#xA;            if(&quot;DISCHARGE&quot;.equals(type)){&#xA;                sub = &quot;Audit Discharge for &quot;+carrierId+&quot; Pau.&quot;;    // Compose Subject String&#xA;                acctSub = &quot;Accounting Discharge Total Counts for &quot;+carrierId;&#xA;            }else if(&quot;LOAD&quot;.equals(type)){&#xA;                sub = &quot; &quot;+carrierId+&quot; Sailed.&quot;;   // Compose Subject String&#xA;                acctSub = &quot;Accounting Load Back Total Counts for &quot;+carrierId;&#xA;            }&#xA;&#xA;            def body = processDischCounts(visit,type);&#xA;&#xA;            acctListRpt = processAccoutingRpt(visit,type);&#xA;            println(&quot; acctListRpt.size() === &quot;+acctListRpt.size() )&#xA;            //  emailSender.custSendEmail(acctEmail,acctSub,body+eol); //Accounting&#xA;            if (acctListRpt!=null &amp;&amp; acctListRpt.size() &gt; 0)&#xA;            {&#xA;                JRDataSource ds = new JRMapCollectionDataSource(acctListRpt);&#xA;                // get report runner handle&#xA;                def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#xA;                //Set report parameters&#xA;                HashMap parameters = new HashMap();&#xA;                parameters.put(&quot;outboundVesVoy&quot;,visit.getCvdCv().getCvId());&#xA;                parameters.put(&quot;Date&quot;,new Date());&#xA;                // call report design of rehandle containers not loaded back to vessel report.&#xA;                if (&quot;LOAD&quot;.equals(type))&#xA;                {&#xA;                    reportDesignName = &quot;ACCT AUDIT LOAD REPORT&quot;;&#xA;                } else if (&quot;DISCHARGE&quot;.equals(type))&#xA;                {&#xA;                    reportDesignName = &quot;ACCT AUDIT DISCH REPORT&quot;;&#xA;                }&#xA;                // Emailing report&#xA;                reportRunner.emailExcelReport(ds, parameters,reportDesignName ,acctEmail,acctSub,body+eol);&#xA;            }&#xA;&#xA;&#xA;            if (&quot;LOAD&quot;.equals(type) &amp;&amp; visit.getCvdCv().getCvId().startsWith(&quot;YB&quot;)) {&#xA;                return ;&#xA;            }&#xA;            println(&quot; doer is &quot;+doer)&#xA;            if (!&quot;-jms-&quot;.equals(doer)) {&#xA;                if (&quot;LOAD&quot;.equals(type)) {&#xA;                    emailTo = emailTo+&quot;;1aktosdevteam@matson.com&quot;;&#xA;                    //emailTo = emailTo+&quot;;1TOSDevTeamHON@gmail.com&quot;;&#xA;&#xA;StringBuffer buf = new StringBuffer();&#xA;def lineBreak = &quot;\r\n\r\n&quot;;&#xA;def formatDate = new SimpleDateFormat(&quot;yyyy-MM-dd hh:mm:ss aa&quot;);&#xA;formatDate.setTimeZone(TimeZone.getTimeZone(&quot;America/Anchorage&quot;));&#xA;println(&quot;Original time from db::&quot;+visit.getCvdCv().getCvATD());&#xA;def vvATD =formatDate.format(visit.getCvdCv().getCvATD());&#xA;            &#xA;&#xA;&#x9;&#x9;&#x9;&#x9;def nextFacility = visit.getCvdCv().getCvNextFacility();&#xA;&#x9;&#x9;&#x9;&#x9;def nextFacilityId = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;if(nextFacility!=null){&#xA;&#x9;&#x9;&#x9;&#x9;nextFacilityId = nextFacility.getFcyId();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;def currentFacility = visit.getCvdCv().getCvFacility();&#xA;&#x9;&#x9;&#x9;&#x9;def currentFacilityId = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;if(currentFacility!=null){&#xA;&#x9;&#x9;&#x9;&#x9;currentFacilityId = currentFacility.getFcyId();&#xA;&#x9;&#x9;&#x9;&#x9;if(currentFacilityId == &quot;ANK&quot;) {&#xA;&#x9;&#x9;&#x9;&#x9;emailTo = emailTo+&quot;;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;} else if (currentFacilityId == &quot;KDK&quot;) {&#xA;&#x9;&#x9;&#x9;&#x9;emailTo = emailTo+&quot;;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;} else if(currentFacilityId == &quot;DUT&quot; || currentFacilityId == &quot;KQA&quot;) {&#xA;&#x9;&#x9;&#x9;&#x9;emailTo = emailTo+&quot;;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;buf.append(&quot;Vessel : &quot;+carrierId+ &quot; is sailed by &quot;+doer+lineBreak);&#xA;&#x9;&#x9;&#x9;&#x9;buf.append(&quot;Current Facility - &quot;+currentFacilityId+lineBreak);&#xA;&#x9;&#x9;&#x9;&#x9;buf.append(&quot;Next Facility - &quot;+nextFacilityId+lineBreak);&#xA;&#x9;&#x9;&#x9;&#x9;buf.append(&quot;ATD of the vessel - &quot;+vvATD+lineBreak);&#xA;&#x9;&#x9;&#x9;&#x9;//buf.append(&quot;ETA in the next facility - &quot;+lineBreak);&#x9;&#x9;&#x9;//emailTo&#x9;&#xA;&#x9;emailSender.custSendEmail(emailTo,sub,buf.toString());&#xA;return;&#xA;                }&#xA;                emailSender.custSendEmail(emailTo,sub,&quot;Action done by &quot;+doer);  //executes Email Procedure //A18&#xA;            }&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;&#xA;    }//A3- Ends&#xA;&#xA;&#xA;    public void procTrailerCount(String wholeEquipType)&#xA;    {&#xA;        //def gvyStrUtility =  getGroovyClassInstance(&quot;GvyStringUtility&quot;)&#xA;        //def equipType = gvyStrUtility.getOnlyNumerics(wholeEquipType);&#xA;        //def equipType = wholeEquipType.substring(1,3);&#xA;        if(mapTrailer.get(wholeEquipType) != null){&#xA;            Integer count = (Integer)mapTrailer.get(wholeEquipType);&#xA;            int tempCnt = count.intValue();&#xA;            tempCnt = tempCnt+1;&#xA;            mapTrailer.put(wholeEquipType,tempCnt);&#xA;        }else{&#xA;            mapTrailer.put(wholeEquipType,new Integer(1));&#xA;        }&#xA;        trailerCnt = trailerCnt+1;&#xA;    }//Method Ends&#xA;&#xA;    public List processAccoutingRpt(Object vesVisit, String type)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;println(&quot;Calling processAccoutingRpt for &quot;+type);&#xA;&#x9;&#x9;&#x9;List resultAcctList = new ArrayList();&#xA;&#x9;&#x9;&#x9;HashSet positionSet = new HashSet();&#xA;&#x9;&#x9;&#x9;HashMap outputMap = null;&#xA;&#x9;&#x9;&#x9;List acctList = null;&#xA;&#x9;&#x9;&#x9;vesselForDischId = vesVisit.getCvdCv().getCvId();&#xA;&#x9;&#x9;&#x9;def Id = vesVisit.getCvdCv().getCvId();&#xA;&#x9;&#x9;&#x9;String vesselGkey = vesVisit.getCvdCv().getCvGkey();&#xA;&#xA;&#x9;&#x9;&#x9;if (&quot;LOAD&quot;.equals(type))&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_VISIT_STATE,UnitVisitStateEnum.ADVISED))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S10_ADVISED))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S99_RETIRED))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY,UnitCategoryEnum.THROUGH)) //A24&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID, Id))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_POS_NAME,&quot;V%&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqOrdering(Ordering.asc(UnitField.UFV_CMDTY));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;acctList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;===acctList size===&quot;+acctList.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator iter = acctList.iterator();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Unit unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unitId = unit.getFieldValue(&quot;unitId&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def category = unit.getFieldValue(&quot;unitCategory&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;category = category != null ? category.getKey():category;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def restow = unit.getFieldValue(&quot;unitActiveUfv.ufvRestowType&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;restow = restow != null ? restow.getKey():restow;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// A24&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//if (category == &quot;THRGH&quot; &amp;&amp; restow != &quot;RESTOW&quot;){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//}else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//check to exclude duplicate position for bundles and unitId does not have $&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (!positionSet.contains(ufv.getUfvLastKnownPosition()) &amp;&amp; (unitId!=null &amp;&amp; !unitId.contains(&quot;\$&quot;))) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;outputMap = populateAcctListByType(ufv,type);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultAcctList.add(outputMap);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//}&#xA;&#x9;&#x9;&#x9;&#x9;//else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;UFV::&quot;+ufv);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;positionSet.add(ufv.getUfvLastKnownPosition());&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;} else if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;&#x9;&#x9;&#x9;&#x9;log(&quot;&lt;&lt;&lt;&lt;TESTING DISCHARGE REPORT ID&gt;&gt;&gt;&gt;&quot;+Id+&quot;:::&quot;+vesselGkey);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY,UnitCategoryEnum.THROUGH))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_TYPE, &quot;VESSEL&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_GKEY, vesselGkey))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S10_ADVISED))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S99_RETIRED))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S20_INBOUND))&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;.addDqOrdering(Ordering.asc(UnitField.UFV_CMDTY));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;acctList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;DomainQuery:::&quot;+dq);&#xA;&#x9;&#x9;&#x9;&#x9;log(&quot;&lt;&lt;&lt;&lt;ACCTLIST SIZE IS &gt;&gt;&gt;&gt;&quot;+acctList.size());&#xA;&#x9;&#x9;&#x9;&#x9;def checkUnit = &quot;0000000000&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iter = acctList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = iter.next()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unitId = unit.unitId;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (unitId != checkUnit){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;checkUnit = unitId;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def EquipmentTypeClass = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;).getKey();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def transitState = ufv.ufvTransitState;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def transitStateKey = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def equipType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (transitState != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;transitStateKey = transitState != null ? transitState.getKey() : ''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def tState = transitStateKey.split(&quot;_&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;transitStateKey = tState[1]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (EquipmentTypeClass.equalsIgnoreCase(&quot;CHASSIS&quot;) || equipType.startsWith(&quot;MG&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;log(unit.unitId+&quot;::&quot;+transitStateKey+&quot;::::&quot;+EquipmentTypeClass +&quot;::&quot;+equipType);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;outputMap = populateAcctListByType(ufv,type)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultAcctList.add(outputMap)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return resultAcctList;&#xA;    }&#xA;&#xA;    public HashMap populateAcctListByType(UnitFacilityVisit ufv, String type) {&#xA;&#xA;&#x9;        HashMap resMap = new HashMap();&#xA;&#x9;        def unit = ufv.ufvUnit&#xA;&#x9;        UnitEquipment chasEquip = unit.getUnitCarriageUe();&#xA;&#x9;        def freightkindout = unit.getFieldValue(&quot;unitFreightKind&quot;).getKey();&#xA;&#x9;        def attachedUnit = unit.getFieldValue(&quot;unitAttachedEquipIds&quot;)&#xA;&#x9;        //println(&quot;chasEquip   &quot;+chasEquip)&#xA;&#x9;        if (&quot;FCL&quot;.equals(freightkindout))&#xA;&#x9;        {&#xA;&#x9;            freightkindout = &quot;F&quot;;&#xA;&#x9;        } else if (&quot;MTY&quot;.equals(freightkindout))&#xA;&#x9;        {&#xA;&#x9;            freightkindout = &quot;E&quot;;&#xA;&#x9;        }&#xA;&#xA;&#x9;        resMap.put(&quot;Commodity&quot;,unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;));&#xA;&#x9;        resMap.put(&quot;EquipmentTypeClass&quot;,unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;).getKey());&#xA;&#x9;        resMap.put(&quot;EquipmentType&quot;,unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;))&#xA;&#x9;        resMap.put(&quot;FreightKind&quot;,freightkindout)&#xA;&#x9;        resMap.put(&quot;UnitNbr&quot;,unit.getFieldValue(&quot;unitId&quot;))&#xA;&#x9;        if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;&#x9;&#x9;&#x9;&#x9;def commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;commodity = commodity != null &amp;&amp; commodity == &quot;AUTO&quot; ? &quot;AUTO&quot; : &quot; &quot;;&#xA;&#x9;&#x9;&#x9;&#x9;resMap.put(&quot;Commodity&quot;,commodity);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;        if (attachedUnit != null &amp;&amp; chasEquip !=null)&#xA;&#x9;        {&#xA;&#x9;            resMap.put(&quot;AttachedUnits&quot;,unit.getFieldValue(&quot;unitAttachedEquipIds&quot;))&#xA;&#x9;        } else if (attachedUnit != null &amp;&amp; chasEquip == null)&#xA;&#x9;        {&#xA;&#x9;            resMap.put(&quot;AttachedUnits&quot;,null)&#xA;&#x9;        }&#xA;&#xA;&#x9;        if (&quot;LOAD&quot;.equals(type))&#xA;&#x9;        {&#xA;&#x9;            resMap.put(&quot;OutboundCarrierATA&quot;,ufv.getFieldValue(&quot;ufvActualObCv.cvATA&quot;))&#xA;&#x9;            resMap.put(&quot;OutboundCarrierATD&quot;,ufv.getFieldValue(&quot;ufvActualObCv.cvATD&quot;))&#xA;&#x9;            resMap.put(&quot;OutboundCarrierId&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;))&#xA;&#x9;            resMap.put(&quot;Destination&quot;,unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;))&#xA;&#x9;            resMap.put(&quot;UfvFlexString06&quot;,ufv.getUfvFlexString06())&#xA;&#x9;        } else if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;&#x9;            resMap.put(&quot;InboundCarrierATA&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvATA&quot;))&#xA;&#x9;            resMap.put(&quot;InboundCarrierATD&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvATD&quot;))&#xA;&#x9;            //resMap.put(&quot;InboundCarrierATA&quot;,vesselATADate)&#xA;&#x9;            //resMap.put(&quot;InboundCarrierATD&quot;,vesselATDDate)&#xA;&#x9;            //resMap.put(&quot;OPL&quot;,unit.getFieldValue(&quot;unitRouting.rtgOPL.pointId&quot;))&#xA;&#x9;            //resMap.put(&quot;InboundCarrierId&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;))&#xA;&#x9;            resMap.put(&quot;InboundCarrierId&quot;,vesselForDischId)&#xA;&#x9;            resMap.put(&quot;UfvFlexString06&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString06&quot;))&#xA;&#x9;        }&#xA;&#x9;        //println(&quot;Result map is &quot;+resMap);&#xA;&#x9;        return resMap;&#xA;    }&#xA;//A23&#xA;public String allUnitsDischarged(event, String type){&#xA;&#xA;        inj = inj==null ? new GroovyInjectionBase(): inj;&#xA;        def sub = &quot;&quot;;&#xA;        List acctList = new ArrayList();&#xA;        def isComplete = &quot;Y&quot;;&#xA;&#xA;        def visit = event.getEntity();&#xA;&#x9;&#x9;vesselForDischId = visit.getCvdCv().getCvId();&#xA;&#x9;&#x9;def Id = visit.getCvdCv().getCvId();&#xA;&#x9;&#x9;String vesselGkey = visit.getCvdCv().getCvGkey();&#xA;&#xA;        log(&quot;Calling allUnitsDischarged&quot;);&#xA;&#xA;        try{&#xA;&#xA;&#x9;&#x9;&#x9;if (&quot;DISCHARGE&quot;.equals(type)) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_UNIT_CATEGORY,UnitCategoryEnum.THROUGH))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_TYPE, &quot;VESSEL&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.like(UnitField.UFV_ARRIVE_POS_LOC_GKEY, vesselGkey))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S20_INBOUND))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.in(UnitField.UFV_POD_ID, &quot;HON&quot;,&quot;OPT&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;acctList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;&#x9;log(&quot;&lt;&lt;&lt;&lt; allUnitsDischarged dq&gt;&gt;&gt;&gt;&quot;+dq);&#xA;&#x9;&#x9;&#x9;&#x9;log(&quot;&lt;&lt;&lt;&lt; allUnitsDischarged &gt;&gt;&gt;&gt;&quot;+acctList.size());&#xA;&#xA;            &#x9;if (acctList.size() &gt; 0){&#xA;            &#x9;&#x9;def doer = event.event.evntAppliedBy&#xA;            &#x9;&#x9;doer = doer.replace('user:','')&#xA;            &#x9;&#x9;def carrierId = visit.cvdCv&#xA;            &#x9;&#x9;def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;);&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;isComplete = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sub = &quot;Audit Discharge for &quot;+carrierId+&quot; could not be completed.&quot;;&#xA;                &#x9;def gvyEventObj = event.getEvent()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;gvyEventObj.setEvntNote(&quot;Audit Discharge Complete could not be recorded as not all containers are discharged&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailTo,sub,&quot;Audit Discharge Complete could not be recorded as not all containers are discharged, please try recording the event after discharging all the containers.\n\nAction done by &quot;+doer);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;         &#x9;return isComplete;&#xA;&#xA;        }catch(Exception e){&#xA;         e.printStackTrace();&#xA;         return isComplete&#xA;        }&#xA;&#xA;    }&#xA;&#xA;}//class ends&#xA;" />
<digital-asset id="MatReportImportDiscrepancies" short-description="MatReportImportDiscrepancies" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.road.business.model.*;&#xA;import java.util.Calendar;&#xA;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 09/19/2012&#xA;* Description: This groovy is used to generate the Stowplan/Manifest Discrepancies after Stowplan and Manifest process&#xA;*/&#xA;&#xA;public class MatReportImportDiscrepancies extends GroovyInjectionBase&#xA;&#x9;{&#xA;&#x9;    private final String  emailFrom = '1aktosdevteam@matson.com'&#xA;&#x9;    //private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;private String outBoundCarrierId = null&#xA;&#x9;&#x9;def inj = null;&#xA;&#x9;&#x9;String VesVoy = null;&#xA;&#xA;// Checking if the container listed in both Stowplan and Manifest.&#xA;&#x9;public String getEDIStowManifest(Object unit)&#xA;&#x9;&#x9;   {&#xA;&#x9;&#x9;&#x9;  try{&#xA;&#x9;&#x9;&#x9;&#x9;Date date = new Date();&#xA;&#x9;&#x9;&#x9;&#x9;String formattedDate = date.format('MM/dd/yyyy')&#xA;&#x9;&#x9;&#x9;&#x9;String isBothEvents = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String isManifestEvents = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String isStowEvents = &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;EventType evntType = EventType.findEventType(&quot;EDI_MANIFEST&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;EventManager eventManager = (EventManager)Roastery.getBean(&quot;eventManager&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;List events = eventManager.getEventHistory(evntType, unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (events.size() &gt; 0 )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator eventsList = events.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;while (eventsList.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def event = eventsList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String eventDate = event.getEventTime().format('MM/dd/yyyy')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (eventDate == formattedDate )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;isManifestEvents = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;ManifestEvent ======================== &gt; &quot; + event.getEventTypeId() + &quot; &quot;+event.getEventTypeDescription()+&quot; &quot;+event.getEventAppliedToNaturalKey()+&quot; &quot;+event.getEventComplexId()+&quot;  &quot;+ event.getEventTime()+&quot; &quot;+eventDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (isManifestEvents == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;evntType = EventType.findEventType(&quot;EDI_STOWPLAN&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;events = eventManager.getEventHistory(evntType, unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (events.size() &gt; 0 )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator eventsList = events.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;while (eventsList.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def event = eventsList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String eventDate = event.getEventTime().format('MM/dd/yyyy')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (eventDate == formattedDate )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;isStowEvents = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;StowPlanEvent ======================== &gt; &quot; + event.getEventTypeId() + &quot; &quot;+event.getEventTypeDescription()+&quot; &quot;+event.getEventAppliedToNaturalKey()+&quot; &quot;+event.getEventComplexId()+&quot;  &quot;+ event.getEventTime()+&quot; &quot;+eventDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (isStowEvents == &quot;N&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String unitRemark = unit.getFieldValue(&quot;unitRemark&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String createDate = unit.unitCreateTime.format('MM/dd/yyyy');&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// Identifying the new containers inserted in TOS through stowplan&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ((unitRemark == &quot;Stowplan Data&quot;)&amp;&amp; (createDate == formattedDate))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;isStowEvents = &quot;Y&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (isManifestEvents == &quot;Y&quot; &amp;&amp; isStowEvents == &quot;Y&quot; )&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;isBothEvents = &quot;Y&quot;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return isBothEvents;&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;   e.printStackTrace()&#xA;&#x9;&#x9;&#x9;   }&#xA;&#x9;&#x9;   }&#xA;// Extracting the Manifest (Not in stowplan) contaner information required to show on the report&#xA;&#x9;public HashMap getEDIManifest(Object unit)&#xA;&#x9;&#x9;   {&#xA;&#x9;&#x9;&#x9;  try{&#xA;&#x9;&#x9;&#x9;&#x9;Date date = new Date();&#xA;&#x9;&#x9;&#x9;&#x9;String formattedDate = date.format('MM/dd/yyyy')&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;EventType evntType = EventType.findEventType(&quot;EDI_MANIFEST&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;EventManager eventManager = (EventManager)Roastery.getBean(&quot;eventManager&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;List events = eventManager.getEventHistory(evntType, unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (events.size() &gt; 0 )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator eventsList = events.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;while (eventsList.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def event = eventsList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String eventDate = event.getEventTime().format('MM/dd/yyyy')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (eventDate == formattedDate )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;ManifestEvent ================ &gt; &quot; + event.getEventTypeId() + &quot; &quot;+event.getEventTypeDescription()+&quot; &quot;+event.getEventAppliedToNaturalKey()+&quot; &quot;+event.getEventComplexId()+&quot;  &quot;+ event.getEventTime()+&quot; &quot;+eventDate);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap map = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map = new HashMap();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String cmdtyId = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String freightkind = unit.unitFreightKind.getKey();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def ds = getDs(freightkind,cmdtyId);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Discharge Port &quot; + unit.unitId + &quot; &quot; + unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;))&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;InboundCarrierId&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;));//Inbound Vessel&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitNbr&quot;, unit.unitId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString01&quot;, &quot;EDI_MANIFEST&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString02&quot;, &quot;The following Containers were in the Manifest but not the Stowplan&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString03&quot;,unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;))//Booking Number&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString04&quot;,ds)//DS&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;Destination&quot;,unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;))//Destination&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;GoodsConsigneeName&quot;,unit.getFieldValue(&quot;unitGoods.gdsConsigneeAsString&quot;))//Consignee&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;CommodityDescription&quot;,unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;));//Commodity&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;SealNbr1&quot; , unit.getFieldValue(&quot;unitSealNbr1&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;SealNbr2&quot; , unit.getFieldValue(&quot;unitSealNbr2&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;SealNbr3&quot; , unit.getFieldValue(&quot;unitSealNbr3&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;SealNbr4&quot; , unit.getFieldValue(&quot;unitSealNbr4&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;PositionSlot&quot;, unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;));//Position Slot&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;GoodsBlNbr&quot;,unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;));//BL Number&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return map;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;   e.printStackTrace()&#xA;&#x9;&#x9;&#x9;   }&#xA;&#x9;&#x9;   }&#xA;// Extracting the Stowplan (Not in Manifest) contaner information required to show on the report&#xA;&#x9;public HashMap getEDIStowplan(Object unit)&#xA;&#x9;&#x9;   {&#xA;&#x9;&#x9;&#x9;  try{&#xA;&#x9;&#x9;&#x9;&#x9;Date date = new Date();&#xA;&#x9;&#x9;&#x9;&#x9;String formattedDate = date.format('MM/dd/yyyy')&#xA;&#x9;&#x9;&#x9;&#x9;String isStowEvents = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String createDate = null;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;EventType evntType = EventType.findEventType(&quot;EDI_STOWPLAN&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;EventManager eventManager = (EventManager)Roastery.getBean(&quot;eventManager&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;List events = eventManager.getEventHistory(evntType, unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;Stowplanevents.size()&quot; + unit.unitId +&quot; ==== &quot;+events.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (events.size() &gt; 0 )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator eventsList = events.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;while (eventsList.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def event = eventsList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String eventDate = event.getEventTime().format('MM/dd/yyyy')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (eventDate == formattedDate)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;StowPlanEvent ======================== &gt; &quot; + event.getEventTypeId() + &quot; &quot;+event.getEventTypeDescription()+&quot; &quot;+event.getEventAppliedToNaturalKey()+&quot; &quot;+event.getEventComplexId()+&quot;  &quot;+ event.getEventTime()+&quot; &quot;+eventDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;isStowEvents = &quot;Y&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String unitRemark = unit.getFieldValue(&quot;unitRemark&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createDate = unit.unitCreateTime.format('MM/dd/yyyy');&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// Identifying the new containers inserted in TOS through stowplan&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ((unitRemark == &quot;Stowplan Data&quot;)&amp;&amp; (createDate == formattedDate))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;isStowEvents = &quot;Y&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (isStowEvents == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap map = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String cmdtyId = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String freightkind = unit.unitFreightKind.getKey();//(&quot;unitFreightKind&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def ds = getDs(freightkind,cmdtyId);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Discharge Port &quot; + unit.unitId + &quot; &quot; + unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;))&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;InboundCarrierId&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;));//Inbound Vessel&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitNbr&quot;, unit.unitId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString01&quot;, &quot;EDI_STOWPLAN&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString02&quot;, &quot;The following Containers were in the Stowplan but not the Manifest&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString03&quot;,unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;))//Booking Number&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString04&quot;,ds)//DS&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;Destination&quot;,unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;))//Destination&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;GoodsConsigneeName&quot;,unit.getFieldValue(&quot;unitGoods.gdsConsigneeAsString&quot;))//Consignee&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;CommodityDescription&quot;,unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;));//Commodity&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;SealNbr1&quot; , unit.getFieldValue(&quot;unitSealNbr1&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;SealNbr2&quot; , unit.getFieldValue(&quot;unitSealNbr2&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;SealNbr3&quot; , unit.getFieldValue(&quot;unitSealNbr3&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;SealNbr4&quot; , unit.getFieldValue(&quot;unitSealNbr4&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;PositionSlot&quot;, unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;));//Position Slot&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;GoodsBlNbr&quot;,unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;));//BL Number&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return map;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  }&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;&#x9;   }&#xA;&#x9;&#x9;   }&#xA;&#xA;// Retrieves DS Field-Based on freightkindKey,commodityId&#xA;   public String getDs(String freightkindKey,String cmdtyId)&#xA;   {&#xA;      def ds = ''&#xA;      if(cmdtyId.equals('AUTOCON')){&#xA;         ds = 'CON'&#xA;      }else if(cmdtyId.equals('AUTO')){&#xA;         ds = 'AUT'&#xA;      }else if (freightkindKey.equals('FCL') || cmdtyId.equals('AUTOCY')){&#xA;         ds = 'CY'&#xA;      }else{&#xA;         ds = '%'&#xA;      }&#xA;      return ds&#xA;    }&#xA;&#xA;&#x9;public boolean execute(Map params)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;GvyTestHistoryCall&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;inj = new GroovyInjectionBase();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;List unitList = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList reportUnitList =  new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitList = getUnits()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;unitList.size()&quot;+unitList.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator unitIterator = unitList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while(unitIterator.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = unitIterator.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// Call the getEDIManifest amd getEDIStowplan only if containers are not listed in both.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (getEDIStowManifest(unit) == &quot;N&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap unitsDataMap = getEDIManifest(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(unitsDataMap != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;unitsDataMap&quot;+unitsDataMap)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportUnitList.add(unitsDataMap);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitsDataMap = getEDIStowplan(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(unitsDataMap != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportUnitList.add(unitsDataMap);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList -------------------- :&quot;+ (reportUnitList != null ? reportUnitList.size() : &quot;EMPTY&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//Set Report Parameter&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (reportUnitList.size() &gt; 0) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource ds = new JRMapCollectionDataSource(reportUnitList);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap reportDesignsmap = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;IMPORT_DISCREPANCIES&quot;,ds);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReports(reportDesignsmap,parameters, emailTo, VesVoy+&quot; Import Discrepancies&quot; ,&quot;Attached report for Stowplan/Manifest Discrepancies&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList ------- Success&quot;)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo, vesVoy+&quot; Import Discrepancies&quot;,&quot;No Discrepancies reported&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList ------- No data to print&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def reeferReport = inj.getGroovyClassInstance(&quot;MatReportReefers&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reeferReport&quot;+reeferReport)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reeferReport.generateReeferReport(unitList,VesVoy);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def columbusReport = inj.getGroovyClassInstance(&quot;MatReportColumbusTotals&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;columbusReport&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columbusReport.generateColumbusReport(unitList,vesVoy);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;printStackTrace ------- &quot;+e)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;public boolean generateReport(Map params,String vesVoy)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;GvyTestHistoryCall===&gt;generateReport&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;inj = new GroovyInjectionBase();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;List unitList = null;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList reportUnitList =  new ArrayList();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitList = getReportUnits(vesVoy)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;unitList.size()&quot;+unitList.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator unitIterator = unitList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while(unitIterator.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = unitIterator.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// Call the getEDIManifest amd getEDIStowplan only if containers are not listed in both.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (getEDIStowManifest(unit) == &quot;N&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap unitsDataMap = getEDIManifest(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(unitsDataMap != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;unitsDataMap&quot;+unitsDataMap)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportUnitList.add(unitsDataMap);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitsDataMap = getEDIStowplan(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(unitsDataMap != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportUnitList.add(unitsDataMap);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList -------------------- :&quot;+ (reportUnitList != null ? reportUnitList.size() : &quot;EMPTY&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//Set Report Parameter&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (reportUnitList.size() &gt; 0) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource ds = new JRMapCollectionDataSource(reportUnitList);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap reportDesignsmap = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;IMPORT_DISCREPANCIES&quot;,ds);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReports(reportDesignsmap,parameters, emailTo, vesVoy+&quot; Import Discrepancies&quot; ,&quot;Attached report for Stowplan/Manifest Discrepancies&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList ------- Success&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo, vesVoy+&quot; Import Discrepancies&quot;,&quot;No Discrepancies reported&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList ------- No data to print&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def reeferReport = inj.getGroovyClassInstance(&quot;MatReportReefers&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reeferReport&quot;+reeferReport)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reeferReport.generateReeferReport(unitList,vesVoy);&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def columbusReport = inj.getGroovyClassInstance(&quot;MatReportColumbusTotals&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;columbusReport&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columbusReport.generateColumbusReport(unitList,vesVoy);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;public List getReportUnits(String vesVoy)&#xA;&#x9;&#x9;   {&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;println(&quot;Inside getReportUnits&quot;);&#xA;&#x9;&#x9;&#x9;def id = vesVoy;//&quot;HUG294&quot; // This will be removed when it call automatically after Manifest/Stow process&#xA;&#x9;&#x9;&#x9;//def id = &quot;HUG294&quot; // This will be removed when it call automatically after Manifest/Stow process&#xA;&#x9;&#x9;&#x9;VesVoy = id;&#xA;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;  dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID,id)).addDqPredicate(PredicateFactory.eq(UnitField.UFV_POD_ID,&quot;HON&quot;));&#xA;&#x9;&#x9;&#x9;  println(dq);&#xA;&#x9;&#x9;&#x9;  def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;  println(&quot;After unitList&quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;  if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;&#x9; Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9; while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; if(unit.getFieldValue(&quot;unitVisitState&quot;).equals(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; units.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;  }&#xA;&#x9;&#x9;&#x9;  println(&quot;unitsSize&quot; + units.size);&#xA;&#x9;&#x9;&#x9;return units;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;   }&#xA;&#xA;public List getUnits()&#xA;&#x9;&#x9;   {&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9; println(&quot;Inside getUnits&quot;);&#xA;&#x9;&#x9;&#x9;def id = &quot;HZB323&quot;//&quot;HUG294&quot; // This will be removed when it call automatically after Manifest/Stow process&#xA;&#x9;&#x9;&#x9;VesVoy = id;&#xA;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;  dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, id)).addDqPredicate(PredicateFactory.eq(UnitField.UFV_POD_ID,&quot;HON&quot;));;&#xA;&#x9;&#x9;&#x9;  println(dq);&#xA;&#x9;&#x9;&#x9;  def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;  println(&quot;After unitList&quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;  if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;&#x9; Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9; while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; if(unit.getFieldValue(&quot;unitVisitState&quot;).equals(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; units.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;  }&#xA;&#x9;&#x9;&#x9;  println(&quot;unitsSize&quot; + units.size);&#xA;&#x9;&#x9;&#x9;return units;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;   }&#xA;&#xA;&#x9;&#x9;}" />
<digital-asset id="MatSitYbDirect" short-description="MatSitYbDirect" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.atoms.EquipRfrTypeEnum&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.framework.metafields.Metafield&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.framework.util.internationalization.ITranslationContext&#xA;import com.navis.framework.util.internationalization.PropertyKey&#xA;import com.navis.framework.util.internationalization.PropertyKeyFactory&#xA;import com.navis.framework.util.internationalization.TranslationUtils&#xA;import com.navis.framework.util.message.MessageLevel&#xA;import com.navis.framework.util.unit.TemperatureUnit&#xA;import com.navis.framework.util.unit.UnitUtils&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import org.apache.commons.lang.StringUtils&#xA;import com.navis.road.business.atoms.TranSubTypeEnum&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.framework.util.DateUtil;&#xA;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.framework.portal.FieldChanges&#xA;&#xA;import com.navis.argo.business.atoms.BizRoleEnum;&#xA;import com.navis.argo.ArgoRefField;&#xA;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.road.business.model.TruckingCompany;&#xA;import com.navis.road.business.model.TruckingCompanyLine;&#xA;&#xA;import com.navis.framework.business.atoms.LifeCycleStateEnum;&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.road.RoadField;&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;import com.navis.road.business.atoms.TrkcStatusEnum;&#xA;import com.navis.argo.UserArgoField;&#xA;import com.navis.argo.business.security.ArgoUser;&#xA;import com.navis.security.SecurityField;&#xA;&#xA;&#xA;import com.navis.inventory.*&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.persistence.HibernatingEntity&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.services.business.api.EventManager&#xA;import com.navis.services.business.rules.EventType&#xA;&#xA;import org.apache.log4j.Logger&#xA;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 09/15/2014&#xA;* Description: This groovy is used to update&#xA;*/&#xA;&#xA;public class MatSitYbDirect extends GroovyInjectionBase&#xA;&#x9;{&#xA;&#x9;def inj = new GroovyInjectionBase();&#xA;&#xA;public void getEventChanges(Object event)&#xA;&#x9;{&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Calling MatSitYbDirect.getEventChanges :: &quot; + event.event.evntAppliedBy);&#xA;&#x9;&#x9;&#x9;def unit = event.entity;&#xA;&#xA;&#x9;&#x9;&#x9;def gvyBaseClass = new GroovyInjectionBase()&#xA;&#x9;&#x9;&#x9;Set set = event.getEvent().getEvntFieldChanges();&#xA;&#x9;&#x9;&#x9;Iterator iter = set.iterator();&#xA;&#x9;&#x9;&#x9;EventFieldChange efc;&#xA;&#x9;&#x9;&#x9;while ( iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;efc = (EventFieldChange)iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;get feild change Value :&quot;+efc.getMetafieldId() + &quot;--&gt;&quot;+ efc.getPrevVal() + &quot;--&gt;&quot;+ efc.getNewVal())&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (&quot;unitFreightKind&quot;.equalsIgnoreCase(efc.getMetafieldId()))&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String ctrNbr = unit.unitId;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String oldVal = efc.getPrevVal();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String newVal = efc.getNewVal();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Values changed to ::&quot;+oldVal +&quot;::::&quot;+newVal);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (newVal.equalsIgnoreCase(&quot;MTY&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;updateUnitFeilds(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;public void updateUnitFeilds (Object unit){&#xA;&#x9;try&#xA;&#x9;{&#xA;&#x9;&#x9;def unitId = unit.unitId;&#xA;&#xA;&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;unit&gt;&gt;&gt;&gt;&gt;&quot;+unit.unitId);&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt; BEFORE &gt;&gt;&gt;&gt;&gt;&gt;&quot;);&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Bl Nbr&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Gross Weight&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitGoodsAndCtrWtKgLong&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Tare Weight&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqTareWeightKg&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Consignee&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuId&quot;) + &quot;::&quot;+ unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Shipper&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuId&quot;) +&quot;::&quot;+unit.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuName&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;AvailDate&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate02&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;DueDate&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate03&quot;));&#xA;&#x9;&#x9;Double tempReq;&#xA;&#x9;&#x9;if (unit.getUnitGoods().getGdsReeferRqmnts() != null){&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Temp Required&gt;&gt;&gt;&gt;&gt;&quot;+unit.getUnitGoods().getGdsReeferRqmnts().getRfreqTempRequiredC());&#xA;&#x9;&#x9;&#x9;tempReq = unit.getUnitGoods().getGdsReeferRqmnts().getRfreqTempRequiredC();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;STIF Shpr&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitFlexString06&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Unit Notes&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitRemark&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;CSR ID&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitFlexString03&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Seal Number1&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitSealNbr1&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Assigned To&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitFlexString11&quot;));&#xA;&#xA;&#x9;&#x9;def blNbr = unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;);&#xA;&#x9;&#x9;Double grsWt = unit.getFieldValue(&quot;unitGoodsAndCtrWtKgLong&quot;);&#xA;&#x9;&#x9;Double trWt = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqTareWeightKg&quot;);&#xA;&#x9;&#x9;def consignee = unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuId&quot;);&#xA;&#x9;&#x9;def shipper = unit.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuId&quot;);&#xA;&#x9;&#x9;def AvailDate = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate02&quot;);&#xA;&#x9;&#x9;def DueDate = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate03&quot;);&#xA;&#x9;&#x9;def stifShpr = unit.getFieldValue(&quot;unitFlexString06&quot;);&#xA;&#x9;&#x9;def unitNotes = unit.getFieldValue(&quot;unitRemark&quot;);&#xA;&#x9;&#x9;def csrId = unit.getFieldValue(&quot;unitFlexString03&quot;);&#xA;&#x9;&#x9;def sealNbr1 = unit.getFieldValue(&quot;unitSealNbr1&quot;);&#xA;&#x9;&#x9;def assignedTo = unit.getFieldValue(&quot;unitFlexString11&quot;);&#xA;&#xA;&#xA;&#x9;&#x9;def tareWt = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqTareWeightKg&quot;);&#xA;&#xA;&#xA;&#xA;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsBlNbr&quot;, &quot;&quot;);&#xA;&#x9;&#x9;unit.updateGoodsAndCtrWtKg(new Double(tareWt));&#xA;&#x9;&#x9;unit.getUnitGoods().updateConsignee(&quot;&quot;);&#xA;&#x9;&#x9;unit.getUnitGoods().updateShipper(&quot;&quot;);&#xA;&#x9;&#x9;unit.setFieldValue(&quot;unitActiveUfv.ufvFlexDate02&quot;,null);&#xA;&#x9;&#x9;unit.setFieldValue(&quot;unitActiveUfv.ufvFlexDate03&quot;,null);&#xA;&#x9;&#x9;if (unit.getUnitGoods().getGdsReeferRqmnts() != null){&#xA;&#x9;&#x9;&#x9;unit.getUnitGoods().getGdsReeferRqmnts().setRfreqTempRequiredC();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;unit.setFieldValue(&quot;unitFlexString06&quot;,null);&#xA;&#x9;&#x9;unit.setFieldValue(&quot;unitRemark&quot;,null);&#xA;&#x9;&#x9;unit.setFieldValue(&quot;unitFlexString03&quot;,null);&#xA;&#x9;&#x9;unit.setFieldValue(&quot;unitSealNbr1&quot;,null);&#xA;&#x9;&#x9;unit.setFieldValue(&quot;unitFlexString03&quot;,null);&#xA;&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt; AFTER &gt;&gt;&gt;&gt;&gt;&gt;&quot;);&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;unit&gt;&gt;&gt;&gt;&gt;&quot;+unit.unitId);&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Bl Nbr&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Gross Weight&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitGoodsAndCtrWtKgLong&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Tare Weight&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqTareWeightKg&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Consignee&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuId&quot;) + &quot;::&quot;+ unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Shipper&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuId&quot;) +&quot;::&quot;+unit.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuName&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;AvailDate&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate02&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;DueDate&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate03&quot;));&#xA;&#x9;&#x9;if (unit.getUnitGoods().getGdsReeferRqmnts() != null){&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Temp Required&gt;&gt;&gt;&gt;&gt;&quot;+unit.getUnitGoods().getGdsReeferRqmnts().getRfreqTempRequiredC());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;STIF Shpr&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitFlexString06&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Unit Notes&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitRemark&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;CSR ID&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitFlexString03&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Seal Number1&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitSealNbr1&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Assigned To&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitFlexString11&quot;));&#xA;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;String eventId = &quot;SIT_DIRECT_YB_FLD_CHNG&quot;;&#xA;&#x9;&#x9;&#x9;EventManager sem = (EventManager) Roastery.getBean(EventManager.BEAN_ID);&#xA;&#x9;&#x9;&#x9;EventType eventType = EventType.findEventType(eventId);&#xA;&#x9;&#x9;&#x9;FieldChanges changes = new FieldChanges();&#xA;&#xA;&#x9;&#x9;&#x9;if (blNbr != null) changes.setFieldChange(InventoryField.GDS_BL_NBR, blNbr, null);&#xA;&#x9;&#x9;&#x9;if (consignee != null) changes.setFieldChange(InventoryField.GDS_CONSIGNEE_BZU, consignee , null);&#xA;&#x9;&#x9;&#x9;if (shipper != null) changes.setFieldChange(InventoryField.GDS_SHIPPER_BZU, shipper, null);&#xA;&#x9;&#x9;&#x9;changes.setFieldChange(InventoryField.UNIT_GOODS_AND_CTR_WT_KG, grsWt , trWt);&#xA;&#x9;&#x9;&#x9;if (AvailDate != null) changes.setFieldChange(InventoryField.UFV_FLEX_DATE02, AvailDate , null);&#xA;&#x9;&#x9;&#x9;if (DueDate != null) changes.setFieldChange(InventoryField.UFV_FLEX_DATE03, DueDate , null);&#xA;&#x9;&#x9;&#x9;if (stifShpr != null) changes.setFieldChange(InventoryField.UNIT_FLEX_STRING06, stifShpr , null);&#xA;&#x9;&#x9;&#x9;if (tempReq != null) changes.setFieldChange(InventoryField.RFREQ_TEMP_REQUIRED_C, tempReq , null);&#xA;&#x9;&#x9;&#x9;if (unitNotes != null) changes.setFieldChange(InventoryField.UNIT_REMARK, unitNotes , null);&#xA;&#x9;&#x9;&#x9;if (csrId != null) changes.setFieldChange(InventoryField.UNIT_FLEX_STRING03, csrId , null);&#xA;&#x9;&#x9;&#x9;if (sealNbr1 != null) changes.setFieldChange(InventoryField.UNIT_SEAL_NBR1, sealNbr1 , null);&#xA;&#x9;&#x9;&#x9;if (assignedTo != null) changes.setFieldChange(InventoryField.UNIT_FLEX_STRING11, assignedTo , null);&#xA;&#xA;&#x9;&#x9;&#x9;unit.recordUnitEvent(eventType, changes, null);&#xA;&#x9;&#x9;}catch (Exception ex){&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;Exception while recording field changes for SIT_DIRECT_YB_FLD_CHNG &gt;&gt;&gt;&gt;&gt;&quot;+ex);&#xA;&#x9;&#x9;}&#xA;&#xA;&#xA;&#xA;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;}&#xA;}&#xA;&#xA;private static final Logger LOGGER = Logger.getLogger(MatSitYbDirect.class);&#xA;}" />
<digital-asset id="ProcessMsg" short-description="ProcessMsg" is-pre-deployed="N" groovy-code="import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.atoms.EquipMaterialEnum&#xA;import com.navis.argo.business.atoms.FlagStatusEnum&#xA;import com.navis.argo.business.atoms.FlagPurposeEnum;&#xA;import com.navis.argo.business.atoms.FreightKindEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.services.business.rules.ServiceImpediment&#xA;import org.apache.log4j.Logger&#xA;import java.text.SimpleDateFormat&#xA;import javax.jms.JMSException&#xA;import javax.jms.Session&#xA;import javax.jms.Connection&#xA;import javax.jms.ConnectionFactory&#xA;import javax.jms.MessageProducer&#xA;import javax.jms.Destination&#xA;import javax.naming.Context&#xA;import javax.naming.InitialContext&#xA;import javax.jms.TextMessage&#xA;import javax.jms.*&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.reference.Group;&#xA;import com.navis.inventory.business.units.Routing;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import com.navis.services.business.event.*&#xA;&#xA;import org.apache.activemq.ActiveMQConnectionFactory;&#xA;&#xA;&#xA;/*&#xA;&#xA;Date Written: 07/06/2012&#xA;Author: Siva Raja&#xA;Description: Groovy to extract unit details based on ane event recorded and send xml data to MNS application using JMS.&#xA;*/&#xA;&#xA;public class  ProcessMsg extends GroovyApi {&#xA;&#xA;  UserContext context = ContextHelper.getThreadUserContext();&#xA;  Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#xA;  private static final String queueNameTdp = &quot;n4.gems.eq.events&quot;; // TDP Queue&#xA;  private String jbossUrl = null;&#xA;&#xA;  def inj = new GroovyInjectionBase();&#xA;&#xA;   public void execute(Map param)&#xA;  {&#xA;    //jbossUrl = inj.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;).getN4TopicAddress();&#xA;    jbossUrl = &quot;tcp://10.201.1.79:61616&quot;;&#xA;    println(&quot;JMS_URL IS &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  &quot;+jbossUrl);&#xA;    LOGGER.warn(&quot;ProcessMsg started&quot; + timeNow);&#xA;&#xA;&#x9;ArrayList&lt;String&gt; msgs = new ArrayList&lt;String&gt;();&#xA;&#x9;msgs.add(0,&quot;&lt;GroovyMsg action='VPU'  aDate='09/24/2014'  aTime='07:19:12'  doer='GVPQ'  lastAction='VPU'  lastADate='09/24/2014'  lastATime='07:19:12'  lastDoer='GVPQ'  facility='GUM'  ctrNo='MATU551453'  srv='MAT'  locationStatus='1'  loc='GUAM'  vesvoy='%'  loadPort='%'  dischargePort='GUM'  dPort='%'  orientation='%'  owner='MAT' /&gt;&quot;);&#xA;&#x9;msgs.add(1,&quot;&lt;GroovyMsg action='VPU'  aDate='09/24/2014'  aTime='07:19:12'  doer='GVPQ'  lastAction='VPU'  lastADate='09/24/2014'  lastATime='07:19:12'  lastDoer='GVPQ'  facility='GUM'  ctrNo='MATU514934'  srv='MAT'  locationStatus='1'  loc='GUAM'  vesvoy='%'  loadPort='%'  dischargePort='GUM'  dPort='%'  orientation='%'  owner='MAT' /&gt;&quot;);&#xA;&#x9;    &#xA;    &#xA;&#x9;for (String msg: msgs)&#xA;&#x9;{&#xA;&#x9;&#x9;sendToTdp(msg);&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;    &#xA;  }&#xA;&#xA;  public void sendToTdp(String msg) throws JMSException, Exception {&#xA;&#xA;    LOGGER.warn (&quot; in sendToTdp message &quot;);&#xA;    String  cfName = &quot;jms/WLQueueConnectionFactory&quot;;&#xA;    Session                session    = null;&#xA;    Connection             connection = null;&#xA;    ConnectionFactory      cf         = null;&#xA;    MessageProducer        mp         = null;&#xA;    Destination            destination = null;&#xA;&#xA;    try {&#xA;&#xA;      LOGGER.warn( &quot;Getting Connection Factory&quot;);&#xA;&#xA;&#x9;  cf = new ActiveMQConnectionFactory(jbossUrl);&#xA;      LOGGER.warn( &quot;Getting Queue&quot;);&#xA;&#xA;      LOGGER.warn( &quot;Getting Connection for Queue&quot;);&#xA;      connection = cf.createConnection();&#xA;      LOGGER.warn( &quot;staring the connection&quot;);&#xA;      connection.start();&#xA;      LOGGER.warn( &quot;creating session&quot;);&#xA;      session = connection.createSession(false, 1);&#xA;      destination = session.createQueue(queueNameTdp);&#xA;      LOGGER.warn( &quot;creating messageProducer&quot;);&#xA;      mp = session.createProducer(destination);&#xA;      LOGGER.warn( &quot;creating TextMessage&quot;);&#xA;      TextMessage outMessage = session.createTextMessage( msg);&#xA;      LOGGER.warn( &quot;sending Message to queue: &quot; + queueNameTdp);&#xA;      mp.send(outMessage);&#xA;      mp.close();&#xA;     session.close();&#xA;      connection.close();&#xA;    }&#xA;    catch (Exception je)&#xA;    {&#xA;      LOGGER.warn(&quot;Exception in send:&quot; + je )&#xA;    }&#xA;  }&#xA;&#xA;  &#xA;&#xA;    private static final Logger LOGGER = Logger.getLogger(ProcessMsg.class);&#xA;}&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;" />
<digital-asset id="GvyCmisEventUnitCargoEdit" short-description="GvyCmisEventUnitCargoEdit" is-pre-deployed="N" groovy-code="/*&#xA;* Srno  Doer Date      Change&#xA;* A1    GR   07/08/10  Consignee Lookup for NonBuiltInEvent&#xA;* A2    GR   12/27/11  YB ASSIGN CHANGE&#xA;* A3    KR   07/09/15  Alaska Ports&#xA;*/&#xA;&#xA;import com.navis.argo.business.atoms.CarrierModeEnum&#xA;import com.navis.argo.business.model.CarrierVisit;&#xA;import com.navis.argo.business.reference.CarrierService;&#xA;import com.navis.argo.business.reference.RoutingPoint;&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;import com.navis.argo.business.atoms.LocTypeEnum;&#xA;import com.navis.argo.business.atoms.CarrierVisitPhaseEnum&#xA;import com.navis.argo.ContextHelper;&#xA;import com.navis.argo.business.model.Facility;&#xA;&#xA;public class GvyCmisEventUnitCargoEdit&#xA;{&#xA;  def prevAvailDt;&#xA;  def prevDetentionDt;&#xA;  def unit;&#xA;  boolean processAcetsMsg;&#xA;  def gvyCargoEdit;&#xA;  def previousDischPort;&#xA;  def gvyBaseClass;&#xA;  def exportXml;&#xA;  def gvyCmisUtil = null&#xA;&#xA;  public void processUnitPropertyUpdate(Object event,Object api, Object gvyCargoEditObj)&#xA;  {&#xA;    gvyCargoEdit = gvyCargoEditObj;&#xA;&#x9;gvyBaseClass = api;&#xA;    unit = event.getEntity()&#xA;    boolean reportProcessing = false,update = false, blockUpdtForIngate = false,procCmisFeed = false&#xA;&#xA;    def gvyEventUtil = api.getGroovyClassInstance(&quot;GvyEventUtil&quot;)&#xA;    gvyCmisUtil = api.getGroovyClassInstance(&quot;GvyCmisUtil&quot;)&#xA;    def dischPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;    try&#xA;    {&#xA;         def isPodUpdated = gvyCargoEdit.isPodUpdated()&#xA;         if(isPodUpdated){&#xA;&#x9;&#x9;    previousDischPort = gvyCargoEdit.getPreviousPod()&#xA;            println(&quot;previousDischPort ::&quot;+previousDischPort+&quot;  dischPort ::&quot;+dischPort);&#xA;            //Set OB carrier for GUM Units&#xA;            /*if('GUM'.equals(dischPort)){&#xA;                resolveReroute(unit,api);&#xA;            }*/&#xA;            //Set OB carrier for NIS=BARGE for HON=GEN_TRUCK&#xA;            setOBCarrierOnPODChng(unit,gvyEventUtil,gvyCmisUtil,event)&#xA;&#x9;&#x9; }&#xA;&#xA;         previousDischPort = previousDischPort != null ? previousDischPort : dischPort&#xA;         //1-Cargo Status Report Processing&#xA;         reportProcessing = processCargoStatReport(event,gvyEventUtil,api,previousDischPort)&#xA;         //2-Get Previous Avail and Detntion Dt&#xA;         update = setAvailDetnDate(event,api, previousDischPort)&#xA;         //3-Create Cmis Feed for Msg from Acets &amp; UI Transaction&#xA;         procCmisFeed = processCmisFeed(gvyEventUtil,api,update,event)&#xA;    }catch(Exception e){&#xA;        e.printStackTrace();&#xA;    }&#xA;    println(&quot;AcetsMsg:&quot;+processAcetsMsg+&quot;   BlockIngate:&quot;+blockUpdtForIngate+&quot;   Report:&quot;+reportProcessing+&quot;     AvailDate:&quot;+update+&quot;   ProcCmisFeed:&quot;+procCmisFeed)&#xA;  }//Method processUnitPropertyUpdate Ends&#xA;&#xA;&#xA;  //1-Cargo Status Report Processing&#xA;  public boolean processCargoStatReport(Object event,Object gvyEventUtil,Object api, String previousDischPort)&#xA;  {&#xA;    boolean reportProcessing = false;&#xA;    try&#xA;    {&#xA;       reportProcessing = gvyEventUtil.verfiyReportSnxProcessing(event)&#xA;       println(&quot;reportProcessing ::&quot;+reportProcessing)&#xA;       if(reportProcessing)&#xA;       {&#xA;          def cargoStatusGvy = api.getGroovyClassInstance( &quot;GvyUnitCargoStatus&quot;);&#xA;          def ret = cargoStatusGvy.sendXml( &quot;CARGO_STATUS&quot;, event, previousDischPort);&#xA;&#x9;&#x9;  api.sendXml(ret)&#xA;        }&#xA;      }catch(Exception e){&#xA;         e.printStackTrace()&#xA;      }&#xA;      return reportProcessing&#xA;   }//Method processCargoStatReport Ends&#xA;&#xA;   //2-Get Previous Avail and Detntion Dt&#xA;   public boolean setAvailDetnDate(Object event,Object api, String previousDischPort)&#xA;   {&#xA;       boolean update = false;&#xA;       try&#xA;      {&#xA;         unit = event.getEntity()&#xA;          //3- Set Avail Date&#xA;         def availLookup = api.getGroovyClassInstance(&quot;GvyCargoEditAvailDate&quot;);&#xA;         update =   availLookup.setAvailDate(unit, event, previousDischPort);&#xA;       }catch(Exception e){&#xA;            e.printStackTrace()&#xA;       }&#xA;      return update&#xA;   }// Method setAvailDetnDate Ends&#xA;&#xA;&#xA;   public boolean processCmisFeed(Object gvyEventUtil,Object api, boolean update,Object event)&#xA;   {&#xA;     boolean processCmisFeed = false&#xA;     def gvyEventObj = event.getEvent()&#xA;     String eventType =  gvyEventObj.getEventTypeId()&#xA;     try&#xA;     {&#xA;         //4-Create Cmis Feed for Msg from Acets &amp; UI Transaction&#xA;         processCmisFeed  = gvyEventUtil.verfiyCmisFeedProcessing(event)&#xA;         def detentionDateChng = gvyEventUtil.wasFieldChanged(event,'ufvFlexDate03')&#xA;         def gvyUnitUtil = api.getGroovyClassInstance(&quot;GvyUnitUtility&quot;)&#xA;         boolean consigneeChng = gvyUnitUtil.isFieldChngForNonBuildInEvents(event,api,'gdsConsigneeBzu',gvyEventUtil)&#xA;&#x9;&#x9; consigneeChng = consigneeChng ? consigneeChng : gvyEventUtil.wasFieldChanged(event, 'gdsConsigneeAsString') //A1&#xA;&#xA;         //Print Status Checks&#xA;          if(processCmisFeed)&#xA;          {&#xA;             //1. N4 TO CMIS data processing&#xA;            def unitDetails = api.getGroovyClassInstance(&quot;GvyCmisDataProcessor&quot;)&#xA;            def unitDtl = unitDetails.doIt(event)&#xA;&#x9;&#x9;&#x9;if('SIT_ASSIGN'.equals(eventType)){&#xA;&#x9;&#x9;&#x9;  def trckCmpy = unit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;&#x9;&#x9;&#x9;  if(trckCmpy == null){&#xA;                unitDtl= gvyCmisUtil.eventSpecificFieldValue(unitDtl,&quot;truck=&quot;,&quot;null&quot;)&#xA;&#x9;&#x9;&#x9;  }else{&#xA;                unitDtl= gvyCmisUtil.eventSpecificFieldValue(unitDtl,&quot;truck=&quot;,trckCmpy)&#xA;&#x9;&#x9;&#x9;  }&#xA;            }&#xA;            setExportXml(unitDtl)&#xA;&#xA;            //2. Detention Msg Check&#xA;            boolean detnMsg = false&#xA;            if(update || detentionDateChng || consigneeChng)&#xA;            {&#xA;             def gvyDentObj = api.getGroovyClassInstance(&quot;GvyCmisCargoEditDetention&quot;);&#xA;             detnMsg = gvyDentObj.detentionProcess(unitDtl,event,api,previousDischPort)&#xA;            }&#xA;&#xA;            def unitUpdateXml =  gvyCargoEdit.unitUpdateProcess(unitDtl,event,api,detnMsg,previousDischPort)&#xA;&#xA;          }&#xA;      } catch (Exception e) {&#xA;          e.printStackTrace()&#xA;      }&#xA;        return processCmisFeed&#xA;   }//Method processCmisFeed ends&#xA;&#xA;&#xA;&#xA; /*public void resolveReroute(Object unit, Object api)&#xA; {&#xA;    try&#xA;   {&#xA;     def aobcarrierMode=unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCarrierMode&quot;)&#xA;&#x9;&#x9; aobcarrierMode = aobcarrierMode != null ? aobcarrierMode.getKey() : ''&#xA;&#xA;    //String inVesselVisitId,String pod,String inLineId,String freightKind,String liveReefer,String oog, String hazard,Object unit&#xA;     def pod = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;     def podRgtPoint = RoutingPoint.findRoutingPoint(pod);&#xA;&#xA;     LineOperator lineOperator = LineOperator.findLineOperatorById('MAT')&#xA;     CarrierService carrierService = CarrierService.findCarrierService('GCS')&#xA;&#xA;     def freightkindenum = unit.getFieldValue(&quot;unitFreightKind&quot;)&#xA;&#xA;     Boolean isLiveReefer = unit.isReefer();&#xA;     Boolean isOog = unit.getFieldValue(&quot;unitIsOog&quot;);&#xA;     Boolean isHaz = unit.getFieldValue(&quot;unitGoods.gdsIsHazardous&quot;)&#xA;&#xA;&#xA;&#xA;     println(&quot;LineOperator ::&quot;+lineOperator+&quot;  aobcarrierMode :&quot;+aobcarrierMode+&quot; podRgtPoint::&quot;+podRgtPoint+&quot;  freightkindenum:&quot;+freightkindenum)&#xA;&#x9; //println(&quot;isLiveReefer ::&quot;+isLiveReefer+&quot; isOog:&quot;+isOog+&quot; isHaz:&quot;+isHaz)&#xA;&#xA;     if(!'VESSEL'.equals(aobcarrierMode))&#xA;    {&#xA;&#x9;  def GvyVesVisit = api.getGroovyClassInstance(&quot;GvyFindVesselVisit&quot;)&#xA;&#x9;  def facility = ContextHelper.getThreadFacility()&#xA;      CarrierVisit resolvedCarrierVisit = GvyVesVisit.vesselVisitFinderService(podRgtPoint,lineOperator,isHaz,isLiveReefer,carrierService)&#xA;       if (resolvedCarrierVisit != null) {&#xA;          unit.getUfvForFacilityNewest(facility).setUfvIntendedObCv(resolvedCarrierVisit);&#xA;          unit.getUfvForFacilityNewest(facility).setUfvActualObCv(resolvedCarrierVisit);&#xA;          unit.getUnitRouting().setRtgDeclaredCv(resolvedCarrierVisit)&#xA;       }&#xA;    }//If ends&#xA;    else if('VESSEL'.equals(aobcarrierMode))&#xA;   {&#xA;       def aobcarrierId=unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;)&#xA;       def facility = ContextHelper.getThreadFacility()&#xA;       CarrierVisit carriervisit = CarrierVisit.findVesselVisit(facility, aobcarrierId);&#xA;       def cvPhase = carriervisit.getCvVisitPhase()&#xA;       def carrierId = carriervisit.getCvId()&#xA;       if( carrierId.equals('BARGE') || CarrierVisitPhaseEnum.COMPLETE.equals(cvPhase) || CarrierVisitPhaseEnum.DEPARTED.equals(cvPhase) ||   CarrierVisitPhaseEnum.CLOSED.equals(cvPhase) ||  CarrierVisitPhaseEnum.CANCELED.equals(cvPhase))&#xA;      {&#xA;         def GvyVesVisit = api.getGroovyClassInstance(&quot;GvyFindVesselVisit&quot;)&#xA;         CarrierVisit resolvedCarrierVisit = GvyVesVisit.vesselVisitFinderService(podRgtPoint,lineOperator,isHaz,isLiveReefer,carrierService)&#xA;         if (resolvedCarrierVisit != null) {&#xA;           unit.getUfvForFacilityNewest(facility).setUfvIntendedObCv(resolvedCarrierVisit);&#xA;           unit.getUfvForFacilityNewest(facility).setUfvActualObCv(resolvedCarrierVisit);&#xA;           unit.getUnitRouting().setRtgDeclaredCv(resolvedCarrierVisit)&#xA;         }&#xA;       }&#xA;    }//else if Ends&#xA;&#xA;   }catch(Exception e){&#xA;       e.printStackTrace()&#xA;   }&#xA;  }*///Method Ends&#xA;&#xA;&#xA;  /*&#xA;  1] Set OBCarreir as GEN_VESSEL if POD is chnaged to NIS&#xA;  2] Set OBCarreir as GEN_TRUCK if POD is chnaged to HON&#xA;  3] Set only if POD changed and unit is not Departed&#xA;*/&#xA; public void setOBCarrierOnPODChng(Object unit, Object gvyEventUtil,Object  gvyCmisUtil,Object event)&#xA; {&#xA;   try&#xA;   {&#xA;    def updtdischPort = gvyEventUtil.wasFieldChanged(event,'gdsDestination')&#xA;    def transitState=unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;    transitState = transitState != null ? transitState.getKey() : ''&#xA;&#xA;    if(!updtdischPort){&#xA;        return;&#xA;    }else if (updtdischPort &amp;&amp; transitState.equals(&quot;S70_DEPARTED&quot;)){&#xA;       return;&#xA;    }&#xA;&#xA;    def visit = &quot;&quot;&#xA;    def complex = com.navis.argo.ContextHelper.getThreadComplex();&#xA;&#xA;    def prevDischPort =  gvyEventUtil.getPreviousPropertyAsString(event, &quot;rtgPOD1&quot;);&#xA;&#x9;def gvyDomQueryObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisDomainQueryUtil&quot;)&#xA;&#x9;prevDischPort = gvyDomQueryObj.lookupRtgPOD(prevDischPort)&#xA;    prevDischPort = prevDischPort != null ? prevDischPort : &quot;&quot;&#xA;&#x9;prevDischPort = previousDischPort != null ? previousDischPort : prevDischPort&#xA;&#xA;    def curDischPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;    curDischPort = curDischPort != null ? curDischPort : &quot;&quot;&#xA;&#xA;   def intdObCarrierId = unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;)&#xA;   intdObCarrierId = intdObCarrierId != null ? intdObCarrierId : &quot;&quot;&#xA;&#xA;    boolean ObcarrierFlag = intdObCarrierId.equals(&quot;GEN_TRUCK&quot;) || intdObCarrierId.equals(&quot;GEN_VESSEL&quot;) || intdObCarrierId.equals(&quot;GEN_CARRIER&quot;) ? true : false&#xA;&#xA;    boolean ObcarrierFlagHon = intdObCarrierId.equals(&quot;BARGE&quot;) || intdObCarrierId.equals(&quot;GEN_VESSEL&quot;) || intdObCarrierId.equals(&quot;GEN_CARRIER&quot;) ? true : false&#xA;&#xA;    if(curDischPort.equals(com.navis.argo.ContextHelper.getThreadFacility().getFcyId()) &amp;&amp; &#xA;      !prevDischPort.equals(com.navis.argo.ContextHelper.getThreadFacility().getFcyId()) &amp;&amp; ObcarrierFlag){&#xA;      //visit = com.navis.argo.business.model.CarrierVisit.getGenericVesselVisit(complex);&#xA;      //SET IT TO BARGE&#xA;     visit = com.navis.argo.business.model.CarrierVisit.findOrCreateVesselVisit(com.navis.argo.ContextHelper.getThreadFacility(), &quot;BARGE&quot;)&#xA;     unit.getUfvForFacilityNewest(com.navis.argo.ContextHelper.getThreadFacility()).setUfvIntendedObCv(visit);&#xA;     unit.getUfvForFacilityNewest(com.navis.argo.ContextHelper.getThreadFacility()).setUfvActualObCv(visit);&#xA;&#xA;    }else if(curDischPort.equals(com.navis.argo.ContextHelper.getThreadFacility().getFcyId()) &amp;&amp; &#xA;      !prevDischPort.equals(com.navis.argo.ContextHelper.getThreadFacility().getFcyId()) &amp;&amp; ObcarrierFlagHon){&#xA;      visit = com.navis.argo.business.model.CarrierVisit.getGenericTruckVisit(complex);&#xA;      unit.getUfvForFacilityNewest(com.navis.argo.ContextHelper.getThreadFacility()).updateObCv(visit);&#xA;    }&#xA;   }catch(Exception e){&#xA;        e.printStackTrace()&#xA;   }&#xA;&#xA; }//Method Ends&#xA;&#xA; public void setExportXml(String xml){&#xA;     exportXml = xml&#xA; }&#xA;&#xA; public String getExportXml(){&#xA;      return exportXml&#xA; }&#xA;&#xA;}// Class Ends" />
<digital-asset id="MatCheckNvProcessTest" short-description="MatCheckNvProcessTest" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import java.sql.ResultSet;&#xA;import java.sql.Connection;&#xA;&#xA;class MatCheckNvProcessTest {&#xA;&#x9;//public String getNv(String vesVoy) {&#xA;&#x9;public void execute(Map params) {&#xA;&#x9;    try{&#xA;&#x9;    String result = &quot;Y&quot;;&#xA;&#x9;    String vesVoy = &quot;ALE423B&quot;;&#xA;&#x9;    String cnt = &quot;0&quot;;&#xA;&#x9;    int vesCnt = 0;&#xA;&#x9;    def inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;&#x9;HashMap reportMap = null;&#xA;&#x9;&#x9;&#x9;def GvyRefDataLookup = inj.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;);&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;println(&quot;MatCheckNvProcess - Start&quot;)&#xA;&#x9;&#x9;&#x9;cnt = GvyRefDataLookup.lookupNv(vesVoy);&#xA;&#x9;&#x9;&#x9;vesCnt = cnt.toInteger()&#xA;&#x9;&#x9;&#x9;println(&quot;vesCnt ::::::::::::&quot;+vesCnt);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (vesCnt == 0 || vesCnt &gt;= 2){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;No of records in process logger table for :: &quot;+vesVoy +&quot; :: Is :&quot;+vesCnt +&quot; :: Result ::&quot;+result);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//return result;&#xA;&#x9;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;println (&quot;Error in MatCheckNvProcess ::&quot;+e);&#xA;&#x9;&#x9;&#x9;&#x9;//return result;&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;}&#xA;}" />
<digital-asset id="GvyCmisPositionDetail" short-description="GvyCmisPositionDetail" is-pre-deployed="N" groovy-code="/*&#xA;* Srno Doer Date       Change&#xA;* A1   GR   08/26/10   LOC formatting (SN4Q change)&#xA;*                      Adding Yard Position Formatting Method&#xA;* A2   GR   10/21/10   Format LOC only FOR HON Pass AS-IS value for NIS Ports&#xA;*/&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.model.Yard&#xA;import com.navis.xpscache.yardmodel.api.*;&#xA;import com.navis.xpscache.yardmodel.impl.*;&#xA;&#xA;public class GvyCmisPositionDetail {&#xA;&#xA;    public String doIt(String msgType, Object gvyTxtMsgFmt, Object unitObj, String eventType, Object event) {&#xA;        println(&quot;In Class GvyCmisPositionDetail.doIt()&quot;)&#xA;        def poistionFieldAttr = ''&#xA;        try {&#xA;            def gvyBaseClass = new GroovyInjectionBase()&#xA;            def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;            def obcarrierChng = gvyEventUtil.wasFieldChanged(event, &quot;ufvIntendedObCv&quot;)&#xA;            obcarrierChng = obcarrierChng != null ? obcarrierChng : ''&#xA;&#xA;            //Verify Event Notes for unitRefersh&#xA;            def gvyEventObj = event.getEvent()&#xA;            def eventNotes = gvyEventObj.getEventNote()&#xA;            eventNotes = eventNotes != null ? eventNotes : &quot;&quot;&#xA;&#xA;            //Verifying if the event Changes the position Field&#xA;            def gvyFldUpdtObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventFieldUpdateFilter&quot;);&#xA;            boolean evntUpdatesFlg = gvyFldUpdtObj.evntFilterOnPositionFldChng(eventType)&#xA;            if (!eventNotes.contains(&quot;Unit Correction&quot;) &amp;&amp; evntUpdatesFlg) {&#xA;                def unit = unitObj;&#xA;                def cell = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString10&quot;);&#xA;                poistionFieldAttr = positionPercentageValue(gvyTxtMsgFmt, cell)&#xA;                return poistionFieldAttr&#xA;            }&#xA;&#xA;            //Calling Msg Formater class&#xA;&#xA;            def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;&#xA;            def u = unitObj&#xA;            def lkpSlot = u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;            lkpSlot = lkpSlot != null ? lkpSlot : ''&#xA;            def lkpSlotValue = lkpSlot.indexOf(&quot;.&quot;) == -1 ? lkpSlot : lkpSlot.substring(0, lkpSlot.indexOf(&quot;.&quot;));&#xA;&#xA;            def lkpLocType = u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;            def lkpLocTypeKey = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;&#xA;&#xA;            def _transitState = u.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;            def transitStateKey = _transitState != null ? _transitState.getKey() : ''&#xA;&#xA;            def _drayStatus = u.getFieldValue(&quot;unitDrayStatus&quot;)&#xA;            def drayStatusKey = _drayStatus != null ? _drayStatus.getKey() : _drayStatus&#xA;&#xA;            def lkpCarrierId = u.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocId&quot;)&#xA;&#xA;            def _category = u.getFieldValue(&quot;unitCategory&quot;)&#xA;            def categoryKey = _category != null ? _category.getKey() : ''&#xA;&#xA;            def dischPort = u.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;&#xA;            //LOC&#xA;            //def _loc = lkpLocTypeKey.equals('YARD') ? lkpSlotValue : ''&#xA;            def loc = getLoc(gvyCmisUtil, lkpCarrierId, lkpLocTypeKey, lkpSlotValue, transitStateKey)&#xA;            def locAttr = gvyTxtMsgFmt.doIt('loc', loc)&#xA;&#xA;            //CELL&#xA;            def _cell = null;&#xA;            if (lkpLocTypeKey.equals('VESSEL')) {&#xA;                _cell = lkpSlotValue;&#xA;            } else {&#xA;                _cell = u.getFieldValue(&quot;unitActiveUfv.ufvFlexString10&quot;);&#xA;            }&#xA;            //_cell = lkpLocTypeKey.equals('VESSEL') ? lkpSlotValue : ''&#xA;            _cell = gvyCmisUtil.trimLength(_cell, 7);&#xA;            def cellAttr = gvyTxtMsgFmt.doIt('cell', _cell)&#xA;&#xA;            //LOCATION TIER -&#xA;            def locationTier = getLocationTier(lkpLocTypeKey, lkpSlotValue)&#xA;            def locationTierAttr = gvyTxtMsgFmt.doIt('locationTier', locationTier)&#xA;&#xA;            //A1 LOCATION STATUS&#xA;            def locationType = getLocationStatus(lkpLocTypeKey, lkpCarrierId, transitStateKey, gvyCmisUtil, categoryKey, dischPort)&#xA;            def locationStatusAttr = gvyTxtMsgFmt.doIt('locationStatus', locationType)&#xA;&#xA;            //LOCATION STALL CONFIG&#xA;            def locationStallConfig = u.getFieldValue(&quot;unitFlexString08&quot;) != null ? 'PS' : ''&#xA;            def locationStallConfigAttr = gvyTxtMsgFmt.doIt('locationStallConfig', locationStallConfig)&#xA;&#xA;            poistionFieldAttr = locAttr + cellAttr + locationTierAttr + locationStatusAttr + locationStallConfigAttr&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;&#xA;        return poistionFieldAttr&#xA;&#xA;    }&#xA;&#xA;    private String getLocationTier(String lkpLocTypeKy, String lkpSlotVal) {&#xA;        def locationTier = ''&#xA;        try {&#xA;            if (lkpLocTypeKy.equals('YARD')) {&#xA;                if (lkpSlotVal.startsWith('P2A') || lkpSlotVal.startsWith('P29') || lkpSlotVal.startsWith('29Z')) {&#xA;                    locationTier = 'T2'&#xA;                } else if (lkpSlotVal.startsWith('WOA')) {&#xA;                    locationTier = 'T3'&#xA;                } else {&#xA;                    locationTier = ''&#xA;                }&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return locationTier&#xA;    }&#xA;&#xA;    public String getLocationStatus(String lkpLocTypeKy, String lkpCarrId, String transitStateky, Object gvyUtil, String categoryKey, String dischPort) {&#xA;        def locationStatus = ''&#xA;        try {&#xA;            if (lkpLocTypeKy.equals('TRUCK') &amp;&amp; transitStateky.equals('S30_ECIN')) {&#xA;                locationStatus = '1'&#xA;            } else if (lkpLocTypeKy.equals('TRUCK')) {&#xA;                locationStatus = '3'&#xA;            } else if (lkpLocTypeKy.equals('YARD')) {&#xA;                locationStatus = '1'&#xA;            } else if (lkpLocTypeKy.equals('VESSEL')) {&#xA;                if (gvyUtil != null &amp;&amp; gvyUtil.getVesselClassType(lkpCarrId).equals('BARGE')) {&#xA;                    locationStatus = '7'&#xA;                } else if (gvyUtil != null &amp;&amp; gvyUtil.getVesselClassType(lkpCarrId).equals('CELL')) {&#xA;                    if (categoryKey.equals('THRGH')) {&#xA;                        locationStatus = '2'&#xA;                    } else if (transitStateky.equals('S60_LOADED') || transitStateky.equals('S70_DEPARTED')) {&#xA;                        locationStatus = '2'&#xA;                    } else if (transitStateky.equals('S20_INBOUND')) {&#xA;                        locationStatus = '4'&#xA;                    }&#xA;                }/*else if (gvyUtil.isNISPort(dischPort)){&#xA;                locationStatus='7'&#xA;          }*/&#xA;&#xA;            }&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return locationStatus&#xA;    }&#xA;&#xA;    public String getLoc(Object gvyUtil, String lkpCarrId, String lkpLocTypeKy, String lkpSlotValue, String transitStateky) {&#xA;        def loc = ''&#xA;        if (lkpLocTypeKy.equals('YARD')) {&#xA;            loc = lkpSlotValue&#xA;&#xA;        } else if (lkpLocTypeKy.equals('VESSEL')) {&#xA;            if (gvyUtil != null &amp;&amp; gvyUtil.getVesselClassType(lkpCarrId).equals('BARGE')) {&#xA;                loc = 'NIS'&#xA;            }&#xA;        }&#xA;        return loc&#xA;    }&#xA;&#xA;    public String positionPercentageValue(Object gvyTxtMsgFmt, Object inCell) {&#xA;&#xA;&#xA;            def poistionFieldAttr = ''&#xA;            def loc = '%'&#xA;            def cell = inCell != null ? inCell : '%';&#xA;            def locationTier = '%'&#xA;            def locationType = '%'&#xA;            //LOC&#xA;        try {&#xA;            def locAttr = gvyTxtMsgFmt.doIt('loc', loc)&#xA;            def gvyBaseClass = new GroovyInjectionBase();&#xA;&#xA;            if(gvyBaseClass!=null &amp;&amp;  cell!=null &amp;&amp; !(&quot;NULL&quot;.equalsIgnoreCase(cell.toString())) &amp;&amp; !(&quot;%&quot;.equalsIgnoreCase(cell.toString()) )) {&#xA;                def gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;                cell = gvyEventUtil!=null? gvyEventUtil.trimLength(cell, 7) : cell;&#xA;            }&#xA;&#xA;            //CELL&#xA;            def cellAttr = gvyTxtMsgFmt.doIt('cell', cell)&#xA;&#xA;            //LOCATION TIER&#xA;            def locationTierAttr = gvyTxtMsgFmt.doIt('locationTier', locationTier)&#xA;&#xA;            //A1 LOCATION STATUS&#xA;            def locationStatusAttr = gvyTxtMsgFmt.doIt('locationStatus', locationType)&#xA;&#xA;            poistionFieldAttr = locAttr + cellAttr + locationTierAttr + locationStatusAttr;&#xA;&#xA;        } catch (Exception e) {&#xA;           e.printStackTrace();&#xA;        }&#xA;&#xA;        return poistionFieldAttr;&#xA;    }&#xA;&#xA;}//Class Ends" />
<digital-asset id="MATBargeDepartUnits" short-description="MATBargeDepartUnits" is-pre-deployed="N" groovy-code="import com.navis.inventory.InventoryEntity&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.atoms.EquipMaterialEnum&#xA;import com.navis.argo.business.atoms.FlagStatusEnum&#xA;import com.navis.argo.business.atoms.FreightKindEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.services.business.rules.ServiceImpediment&#xA;import org.apache.log4j.Logger&#xA;import java.text.SimpleDateFormat&#xA;import javax.jms.JMSException&#xA;import javax.jms.Session&#xA;import javax.jms.ConnectionFactory&#xA;import javax.jms.MessageProducer&#xA;import javax.jms.Destination&#xA;import javax.jms.TextMessage&#xA;import javax.jms.*&#xA;&#xA;import com.navis.inventory.business.units.Routing;&#xA;import org.apache.activemq.ActiveMQConnectionFactory;&#xA;&#xA;import java.text.DateFormat;&#xA;&#x9;/*&#xA;&#xA;&#x9;Date Written: 07/06/2012&#xA;&#x9;Author: Siva Raja&#xA;&#x9;Description: Groovy to extract unit details based on ane event recorded and send xml data to MNS application using JMS.&#xA;&#x9;  */&#xA;&#xA;&#x9;public class  MATBargeDepartUnits extends GroovyApi {&#xA;&#xA;&#x9;  UserContext context = ContextHelper.getThreadUserContext();&#xA;&#x9;  Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#xA;  &#x9;private static final String XML_OVERRIDE = &quot;\&quot;&quot;;&#xA;  &#x9;private static final String threadFacility = ContextHelper.getThreadFacility().getFcyId();&#xA;  &#x9;private static final String XML_END_ELEMENT = &quot;/&gt;&quot;;&#xA;  &#x9;private static final String queueName = &quot;jms.tos.newvess.inbound&quot;;&#xA;  &#x9;private static final String topicName = &quot;jms.topic.tdp.newVesselHon&quot;;&#xA;&#x9;private static final String url = &quot;&quot;;//&quot;tcp://10.201.1.79:61616&quot;;//Prod&#xA;&#x9;private String addNode = &quot;Y&quot;;&#xA;&#xA;&#x9;//  public void execute()&#xA;&#x9;public boolean getBargeUnits(String carrierId, String isBarge, String facility, String nextFacility)&#xA;&#x9;  {&#xA;&#x9;&#x9;LOGGER.warn(&quot;MATBargeDepartUnits started&quot; + timeNow);&#xA;&#x9;&#x9;println(&quot;MATBargeDepartUnits getBargeUnits started&quot; + timeNow);&#xA;&#x9;&#x9;println(&quot;Parameters------------------&gt;&quot;+carrierId +&quot; &quot;+facility+&quot; &quot;+ nextFacility+&quot; &quot;+isBarge)&#xA;&#x9;&#x9;//String cv = &quot;ALE252A&quot;;&#xA;&#x9;&#x9;String cv =carrierId;&#xA;&#x9;&#x9;if (isBarge == &quot;BARGE&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if ((facility == &quot;HON&quot;) &amp;&amp; ((nextFacility == &quot;KHI&quot;)||(nextFacility == &quot;KAH&quot;)||(nextFacility == &quot;NAW&quot;)||&#xA;&#x9;&#x9;&#x9;(nextFacility == &quot;LNI&quot;) || (nextFacility == &quot;MOL&quot;) || (nextFacility == &quot;MIX&quot;) || (nextFacility == &quot;HIL&quot;))&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;List units = getActiveUnits(cv)&#xA;&#x9;&#x9;&#x9;&#x9;UnitFacilityVisit ufv = null;&#xA;&#x9;&#x9;&#x9;&#x9;Iterator unitIterator = units.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(unitIterator.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = unitIterator.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ufv = unit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//UnitFacilityVisit ufv = unit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;&#x9;&#x9;if (ufv == null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;LOGGER.warn (&quot; Unit facility is null&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;def carrierMode = LocTypeEnum.getEnum(&quot;VESSEL&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;println(carrierMode);&#xA;&#x9;&#x9;&#x9;&#x9;def obCarrierVisit = CarrierVisit.findCarrierVisit(ContextHelper.getThreadFacility(), carrierMode, cv);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;CarrierVisit cv1 = ufv.getInboundCarrierVisit();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;obCarrierVisit&quot;+obCarrierVisit+&quot; &quot;+cv1);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;List unitList = this.getActiveUnits(cv);&#xA;&#x9;&#x9;&#x9;&#x9;if (unitList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;LOGGER.warn (&quot;No Units in CV&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;buildXmlElement Start &quot; + cv);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;buildXmlElement Start &quot; + cv);&#xA;&#x9;&#x9;&#x9;&#x9;StringBuffer xml = this.buildXmlElement(unitList, cv1);&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(xml.toString());&#xA;&#x9;&#x9;&#x9;&#x9;println(xml.toString());&#xA;&#x9;&#x9;&#x9;&#x9;//Send the Complete XML string to MNS application using JMS queue.&#xA;&#x9;&#x9;&#x9;&#x9;this.send(xml.toString());&#xA;&#x9;&#x9;&#x9;&#x9;this.topicSend(xml.toString());&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;MATBargeDepartUnits ended&quot; + timeNow);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;MATBargeDepartUnits ended&quot; + timeNow);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;println(&quot;Carrier &quot; + carrierId +&quot; is a &quot;+ isBarge)&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;  }&#xA;&#xA;&#x9;//  public void execute()&#xA;&#x9;public boolean execute(Map  params)&#xA;&#x9;  {&#xA;&#x9;&#x9;LOGGER.warn(&quot;MATBargeDepartUnits started&quot; + timeNow);&#xA;&#x9;&#x9;println(&quot;MATBargeDepartUnits started&quot; + timeNow);&#xA;&#x9;&#x9;String cv = &quot;HAL242A&quot;;&#xA;&#xA;&#x9;&#x9;List units = getActiveUnits(cv)&#xA;&#x9;&#x9;&#x9;UnitFacilityVisit ufv = null;&#xA;&#x9;&#x9;Iterator unitIterator = units.iterator();&#xA;&#x9;&#x9;&#x9;while(unitIterator.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = unitIterator.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ufv = unit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;//UnitFacilityVisit ufv = unit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;if (ufv == null){&#xA;&#x9;&#x9;  LOGGER.warn (&quot; Unit facility is null&quot;);&#xA;&#x9;&#x9;  return;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9; def carrierMode = LocTypeEnum.getEnum(&quot;VESSEL&quot;);&#xA;&#x9;&#x9; println(carrierMode);&#xA;&#x9;&#x9; def obCarrierVisit = CarrierVisit.findCarrierVisit(ContextHelper.getThreadFacility(), carrierMode, cv);&#xA;&#xA;&#x9;&#x9;CarrierVisit cv1 = ufv.getInboundCarrierVisit();&#xA;&#xA;&#x9;&#x9;println(&quot;obCarrierVisit&quot;+obCarrierVisit+&quot; &quot;+cv1);&#xA;&#xA;&#x9;&#x9;List unitList = this.getActiveUnits(cv);&#xA;&#x9;&#x9;if (unitList.isEmpty()) {&#xA;&#x9;&#x9;  LOGGER.warn (&quot;No Units in CV&quot;);&#xA;&#x9;&#x9;  return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;LOGGER.warn(&quot;buildXmlElement Start &quot; + cv);&#xA;&#x9;&#x9;println(&quot;buildXmlElement Start &quot; + cv);&#xA;&#x9;&#x9;StringBuffer xml = this.buildXmlElement(unitList, cv1);&#xA;&#x9;&#x9;LOGGER.warn('XML-bargeString: '+ xml.toString());&#xA;&#x9;&#x9;println('XML-bargeString: '+ xml.toString());&#xA;&#x9;&#x9;//Send the Complete XML string to MNS application using JMS queue.&#xA;&#x9;&#x9;//this.send(xml.toString());&#xA;&#x9;&#x9;//this.topicSend(xml.toString());&#xA;&#x9;&#x9;LOGGER.warn(&quot;MATBargeDepartUnits ended&quot; + timeNow);&#xA;&#x9;&#x9;println(&quot;MATBargeDepartUnits ended&quot; + timeNow);&#xA;&#x9;  }&#xA;&#xA;&#x9;public List getActiveUnits(String vesVoy)&#xA;&#x9;&#x9;&#x9;   {&#xA;&#xA;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#xA;if(vesVoy.startsWith('YB')) {&#xA;&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_INTENDED_OB_ID,vesVoy));&#xA;&#xA;            }  else {&#xA;&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID,vesVoy));&#xA;&#xA;            }&#xA;&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;  println(dq);&#xA;&#x9;&#x9;&#x9;&#x9;  def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;&#x9;  println(&quot;After unitList&quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;&#x9;  if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(unit.getFieldValue(&quot;unitVisitState&quot;).equals(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; units.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;  }&#xA;&#x9;&#x9;&#x9;&#x9;  println(&quot;unitsSize&quot; + units.size);&#xA;&#x9;&#x9;&#x9;&#x9;return units;&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;&#x9;   }&#xA;&#xA;&#x9;  public void send(String msg) throws JMSException, Exception {&#xA;&#xA;&#x9;        LOGGER.warn (&quot; in send message &quot;);&#xA;&#x9;        Session                &#x9;session    = null;&#xA;&#x9;        javax.jms.Connection&#x9;connection = null;&#xA;&#x9;        ConnectionFactory      &#x9;cf         = null;&#xA;&#x9;        MessageProducer        &#x9;mp         = null;&#xA;&#x9;        Destination&#x9;&#x9;&#x9;&#x9;destination = null;&#xA;    &#x9;&#x9;println( &quot;Calling MATBargeDepartUnits.send using ActiveMQConnectionFactory&quot;);&#xA;&#x9;        try {&#xA;&#x9;          LOGGER.warn( &quot;Getting Connection Factory&quot;);&#xA;&#x9;          cf = new ActiveMQConnectionFactory(url);&#xA;&#x9;          LOGGER.warn( &quot;Getting Queue&quot;);&#xA;&#x9;          LOGGER.warn( &quot;Getting Connection for Queue &quot; + cf);&#xA;&#x9;          connection = cf.createConnection();&#xA;&#x9;          LOGGER.warn( &quot;staring the connection&quot;);&#xA;&#x9;          connection.start();&#xA;&#x9;          LOGGER.warn( &quot;creating session&quot;);&#xA;&#x9;          session = connection.createSession(false, 1);&#xA;&#x9;          LOGGER.warn( &quot;creating messageProducer&quot;);&#xA;&#x9;    &#x9;  destination = session.createQueue(queueName);&#xA;&#x9;          mp = session.createProducer(destination);&#xA;&#x9;    &#x9;  LOGGER.warn( &quot;creating TextMessage&quot;);&#xA;&#x9;          TextMessage outMessage = session.createTextMessage( msg);&#xA;&#x9;          LOGGER.warn( &quot;sending Message to queue: &quot; + queueName);&#xA;&#x9;          mp.send(outMessage);&#xA;&#x9;          mp.close();&#xA;&#x9;    &#x9;  session.close();&#xA;&#x9;          connection.close();&#xA;&#x9;        }&#xA;&#x9;        catch (Exception je)&#xA;&#x9;        {&#xA;&#x9;          LOGGER.warn(&quot;Exception in send:&quot; + je )&#xA;&#x9;        }&#xA;&#x9;      }&#xA;&#xA;&#x9;     public void topicSend(String msg) throws JMSException, Exception {&#xA;&#x9;     &#x9;LOGGER.warn (&quot; in topicSend message &quot;);&#xA;&#x9;    &#x9;TopicSession&#x9;&#x9;&#x9;session    = null;&#xA;&#x9;    &#x9;TopicConnection&#x9;&#x9;&#x9;connection = null;&#xA;&#x9;    &#x9;TopicConnectionFactory&#x9;cf         = null;&#xA;&#x9;    &#x9;MessageProducer        &#x9;mp         = null;&#xA;&#x9;    &#x9;Destination&#x9;&#x9;&#x9;&#x9;destination = null;&#xA;    &#x9;&#x9;println( &quot;Calling MATBargeDepartUnits.topicSend using ActiveMQConnectionFactory&quot;);&#xA;&#x9;    &#x9;try {&#xA;&#xA;&#x9;    &#x9;&#x9;LOGGER.warn (&quot;Getting Connection Factory&quot;);&#xA;&#x9;    &#x9;&#x9;cf = new ActiveMQConnectionFactory(url);&#xA;&#xA;&#x9;    &#x9;&#x9;LOGGER.warn(&quot;Getting Connection for Topic&quot;);&#xA;&#x9;    &#x9;&#x9;connection = cf.createTopicConnection();&#xA;&#xA;&#x9;    &#x9;&#x9;LOGGER.warn( &quot;staring the connection&quot;);&#xA;&#x9;    &#x9;&#x9;connection.start();&#xA;&#xA;&#x9;    &#x9;&#x9;LOGGER.warn( &quot;creating session&quot;);&#xA;&#x9;    &#x9;&#x9;session = connection.createTopicSession(false, 1);&#xA;&#x9;    &#x9;&#x9;destination = session.createTopic(topicName);&#xA;&#xA;&#x9;    &#x9;&#x9;LOGGER.warn( &quot;creating messageProducer&quot;);&#xA;&#x9;    &#x9;&#x9;mp = session.createProducer(destination);&#xA;&#xA;&#x9;    &#x9;&#x9;LOGGER.warn( &quot;creating TextMessage&quot;);&#xA;&#x9;    &#x9;&#x9;TextMessage outMessage = session.createTextMessage( msg);&#xA;&#xA;&#x9;    &#x9;&#x9;LOGGER.warn( &quot;sending Message to topic: &quot; + topicName);&#xA;&#x9;    &#x9;&#x9;mp.send(outMessage);&#xA;&#xA;&#x9;    &#x9;&#x9;mp.close();&#xA;&#x9;    &#x9;&#x9;session.close();&#xA;&#x9;    &#x9;&#x9;connection.close();&#xA;&#x9;        }&#xA;&#x9;        catch (Exception je)&#xA;&#x9;        {&#xA;&#x9;    &#x9;LOGGER.warn(&quot;Exception in topicSend:&quot; + je )&#xA;&#x9;        }&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;  private List&lt;Unit&gt; getUnitListInCv(CarrierVisit inCv){&#xA;&#x9;&#x9;println (&quot;getUnitListInCv Start&quot;)&#xA;&#x9;&#x9;ArrayList vesVistUnitLists = new ArrayList();&#xA;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(ArgoField.UFV_ACTUAL_IB_CV, inCv.getCvGkey()))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.in(UnitField.UNIT_VISIT_STATE, &quot;S70_DEPARTED&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.in(UnitField.UNIT_ID, &quot;MATU2275002&quot;));&#xA;&#x9;&#x9;println(&quot;dq============&quot;+dq)&#xA;&#x9;&#x9;HibernateApi hibernate = HibernateApi.getInstance();&#xA;&#x9;&#x9;List unitList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;println(&quot;unitList list Size :&quot;+unitList.size())&#xA;&#x9;&#x9;println (&quot;getUnitListInCv End&quot;)&#xA;&#x9;&#x9;return unitList;&#xA;&#x9;&#x9;//}&#xA;&#xA;&#x9;  }&#xA;&#xA;&#x9;  private StringBuffer buildXmlElement(List inUnitList, CarrierVisit inCv){&#xA;&#x9;&#x9;StringBuffer elementList = new StringBuffer();&#xA;&#x9;&#x9;//Build the XML Root Elements&#xA;&#x9;&#x9;elementList.append(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot; standalone=\&quot;yes\&quot;?&gt;&quot;);&#xA;&#x9;&#x9;elementList.append(&quot;&lt;ns2:snx xmlns:ns2=\&quot;http://www.navis.com/argo\&quot;&gt;&quot;);&#xA;&#x9;&#x9;// Build the XML Shipper Consignee Elements&#xA;&#x9;&#x9;println(&quot;Here:inUnitList.size()&quot;+inUnitList.size());&#xA;&#x9;&#x9;for (int k=0; k &lt; inUnitList.size(); k++){&#xA;&#x9;&#x9;  //for (int k=0; k &lt; 5; k++){&#xA;&#x9;&#x9;  Unit unit = (Unit) inUnitList.get(k);&#xA;&#x9;&#x9;  this.getShipperConsigneeDetails(unit,elementList);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;// Build the XML Vessel Visit Detail element&#xA;&#x9;&#x9;this.getVesselVisitDetails(inCv,elementList);&#xA;&#x9;&#x9;// Build the XML Unit detail elements&#xA;&#x9;&#x9;try{&#xA;&#x9;&#x9; int lastElement = inUnitList.size() - 1  ;&#xA;&#x9;&#x9;for (int i=0; i &lt; inUnitList.size(); i++){&#xA;&#x9;&#x9;  Unit unit = (Unit) inUnitList.get(i);&#xA;&#x9;&#x9;  if (i.equals(lastElement)){&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;LAST ELEMENT:&quot; + i);&#xA;&#x9;&#x9;&#x9;this.getLastUnitDetails(unit, elementList, inUnitList.size());&#xA;&#x9;&#x9;  }else{&#xA;&#x9;&#x9;   this.getUnitDetails(unit, elementList);&#xA;&#x9;&#x9;  }&#xA;&#x9;&#x9;  elementList = this.getEquipmentDetails(unit, elementList);&#xA;&#x9;&#x9;  elementList = this.getPositionDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getRoutingDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getCarrierDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getHazard(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getOog(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getBookingNbr(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getReefer(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getHandlingDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getContentsDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getUnitEtc(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getFlagDetails(unit,elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getUnitFlexDetails(unit,elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getUfvDetails(unit,elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.geTimeStamp(unit,elementList, inCv);&#xA;&#x9;&#x9;  elementList.append(&quot;&lt;/unit&gt;&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;elementList.append(&quot;&lt;/ns2:snx&gt;&quot;);&#xA;&#x9;&#x9;return elementList;&#xA;&#x9;  }catch (Exception e){&#xA;&#x9;&#x9;LOGGER.warn (&quot;Exception in prining xml&quot; + e);&#xA;&#x9;  }&#xA;&#x9;  }&#xA;&#xA;&#x9;  public StringBuffer getShipperConsigneeDetails(Unit inUnit, StringBuffer inElementList){&#xA;&#xA;&#x9;&#x9;GoodsBase goods = inUnit.getUnitGoods();&#xA;&#x9;&#x9;String shipperName = &quot;&quot;;&#xA;&#x9;&#x9;String shipperId = &quot;&quot;;&#xA;&#x9;&#x9;String consigneeName = &quot;&quot;;&#xA;&#x9;&#x9;String consigneeId = &quot;&quot;;&#xA;&#xA;&#x9;&#x9;ScopedBizUnit shipper = goods.getGdsShipperBzu();&#xA;&#x9;&#x9;if (shipper != null){&#xA;&#x9;&#x9; try{&#xA;&#x9;&#x9;&#x9;shipperName = shipper.getBzuName();&#xA;&#x9;&#x9;&#x9;shipperName = removeDoubleQuotes(shipperName);&#xA;&#x9;&#x9;&#x9;shipperId = shipper.getBzuId();&#xA;&#x9;&#x9;&#x9;shipperId = removeDoubleQuotes(shipperId);&#xA;&#xA;&#x9;&#x9;  String shipConOpenAttr = &quot;&lt;shipper-consignee&quot;;&#xA;&#x9;&#x9;  String shipperNameAttr = &quot; name=&quot;;&#xA;&#x9;&#x9;  String shipperNameValue = XML_OVERRIDE+shipperName+XML_OVERRIDE;&#xA;&#x9;&#x9;  String shipperIdAttr = &quot; id=&quot;;&#xA;&#x9;&#x9;  String shipperIdValue =  XML_OVERRIDE+shipperId+XML_OVERRIDE;&#xA;&#x9;&#x9;  String shipperString = shipConOpenAttr + shipperNameAttr+ shipperNameValue + shipperIdAttr + shipperIdValue + XML_END_ELEMENT;&#xA;&#x9;&#x9;  shipperString = this.stripInvalidXmlCharacters(shipperString);&#xA;&#x9;&#x9;  inElementList.append(shipperString);&#xA;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;  LOGGER.warn (&quot;Exception in getting Shipper Info&quot; + e);&#xA;&#x9;&#x9;}&#xA;&#x9;  }&#xA;&#xA;&#x9;&#x9;ScopedBizUnit consignee = goods.getGdsConsigneeBzu();&#xA;&#x9;&#x9;if (consignee != null){&#xA;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;consigneeName = consignee.getBzuName();&#xA;&#x9;&#x9;&#x9;consigneeName = removeDoubleQuotes(consigneeName);&#xA;&#x9;&#x9;&#x9;consigneeId = consignee.getBzuId();&#xA;&#x9;&#x9;&#x9;consigneeId = removeDoubleQuotes(consigneeId);&#xA;&#xA;&#x9;&#x9;  String shipConOpenAttr = &quot;&lt;shipper-consignee&quot;;&#xA;&#x9;&#x9;  String shipperNameAttr = &quot; name=&quot;;&#xA;&#x9;&#x9;  String consigneeNameValue = XML_OVERRIDE+consigneeName+XML_OVERRIDE;&#xA;&#x9;&#x9;  String shipperIdAttr = &quot; id=&quot;;&#xA;&#x9;&#x9;  String consigneeIdValue =  XML_OVERRIDE+consigneeId+XML_OVERRIDE;&#xA;&#x9;&#x9;  String consigneeString = shipConOpenAttr + shipperNameAttr+ consigneeNameValue + shipperIdAttr + consigneeIdValue + XML_END_ELEMENT;&#xA;&#x9;&#x9;  consigneeString = this.stripInvalidXmlCharacters(consigneeString);&#xA;&#x9;&#x9;  inElementList.append(consigneeString);&#xA;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;  LOGGER.warn (&quot;Exception in getting Consignee info&quot;+ e);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;&#x9;  public StringBuffer getVesselVisitDetails(CarrierVisit inCv, StringBuffer inElementList){&#xA;&#xA;&#x9;&#x9;def vvd = VesselVisitDetails.resolveVvdFromCv(inCv);&#xA;&#x9;&#x9;Date timeFirstAvailable = vvd.getCvdTimeFirstAvailability();&#xA;&#x9;&#x9;String timeFa = &quot;&quot;;&#xA;&#x9;&#x9;if (timeFirstAvailable != null){&#xA;&#x9;&#x9;  timeFa = this.formatDate(timeFirstAvailable);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;String vvOpenAttr = &quot;&lt;vessel-visit&quot;;&#xA;&#x9;&#x9;String vvFirstTimeAvailabilityAttr = &quot; time-first-availability=&quot;;&#xA;&#x9;&#x9;String vvFirstTimeAvailabilityValue = XML_OVERRIDE+timeFa+XML_OVERRIDE;&#xA;&#x9;&#x9;String vvIdAttr = &quot; id=&quot;;&#xA;&#x9;&#x9;String vvIdValue = XML_OVERRIDE+inCv.getCvId()+XML_OVERRIDE;&#xA;&#x9;&#x9;String vesselVisitString = vvOpenAttr+vvFirstTimeAvailabilityAttr+vvFirstTimeAvailabilityValue+vvIdAttr+vvIdValue+ XML_END_ELEMENT;&#xA;&#x9;&#x9;inElementList.append(vesselVisitString);&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;  public StringBuffer getLastUnitDetails(Unit inUnit, StringBuffer inElementList, int inUnitCount){&#xA;&#xA;    //unit snx-update-note=&quot;NewVes Completed Holds:(RM) unitCnt=1136 facility=HON rdsDtTime=05/01/2012 10:08:48&quot;&#xA;    // line=&quot;ANL&quot; freight-kind=&quot;FCL&quot; category=&quot;IMPORT&quot; id=&quot;UNIU5027989&quot;&gt;&#xA;&#xA;    String unitOpenAttr = &quot;&lt;unit snx-update-note=&quot;;&#xA;    String unitOpenValue = XML_OVERRIDE+&quot;NewVes Detention Completed&quot;+&quot; unitCnt=&quot;+ inUnitCount.toString()+ &quot; facility=&quot;+ threadFacility + &quot; rdsDtTime=&quot;+&#xA;                           this.formatRdsDate(timeNow) + XML_OVERRIDE;&#xA;    String lineAttr = &quot; line=&quot;;&#xA;    String freightKindAttr = &quot; freight-kind=&quot;;&#xA;    String idAttr = &quot; id=&quot;;&#xA;    String categoryAttr = &quot; category=&quot;;&#xA;    String freightKindValue = this.findUnitFreightKind(inUnit);&#xA;    String idValue = this.findUnitNbr(inUnit);&#xA;    String categoryValue = this.findUnitCategory(inUnit);&#xA;    ScopedBizUnit lineOp = inUnit.getUnitLineOperator();&#xA;    String lineValue = XML_OVERRIDE+lineOp.getBzuId()+XML_OVERRIDE;&#xA;    String unitString = unitOpenAttr + unitOpenValue+ lineAttr + lineValue + freightKindAttr + freightKindValue + categoryAttr + categoryValue + idAttr + idValue + &quot;&gt;&quot;;&#xA;    unitString = this.stripInvalidXmlCharacters(unitString);&#xA;    unitString = this.ModifyEscapeChar(unitString);&#xA;&#x9;inElementList.append(unitString);&#xA;    return inElementList;&#xA;  }&#xA;&#xA;public StringBuffer getUnitDetails(Unit inUnit, StringBuffer inElementList){&#xA;&#xA;    List unitImpediments = this.getUnitImpediments(inUnit);&#xA;    String holds = &quot;&quot;;&#xA;    String unitOpenValue;&#xA;&#x9;addNode = &quot;N&quot;;&#xA;    if (!unitImpediments.isEmpty()) {&#xA;     for (int k=0; k &lt; unitImpediments.size(); k++){&#xA;     ServiceImpediment imp = (ServiceImpediment) unitImpediments.get(k);&#xA;      def status = imp.getStatus();&#xA;      if (FlagStatusEnum.ACTIVE.equals(status) || FlagStatusEnum.REQUIRED.equals(status)) {&#xA;        String holdId = imp.getFlagType().getId();&#xA;&#x9;&#x9;String flgtypPurpose = imp.getFlagType().getPurpose().getKey();&#xA;        println (&quot;holdId &quot;+ holdId +&quot; flgtypPurpose &quot;+flgtypPurpose);&#xA;&#x9;&#x9;if (flgtypPurpose != &quot;PERMISSION&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;addNode = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;if (k == 0){&#xA;&#x9;&#x9;&#x9;holds = holds + holdId;&#xA;&#x9;&#x9;&#x9;}else {&#xA;&#x9;&#x9;&#x9;holds = holds + &quot;,&quot;+ holdId;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;      }&#xA;     }&#xA;&#x9;}&#xA;&#x9;if (addNode == &quot;Y&quot;)&#xA;&#x9;{&#xA;      unitOpenValue = XML_OVERRIDE+&quot;NewVes Detention Holds:(&quot;+holds+&quot;)&quot;+XML_OVERRIDE;&#xA;    } else {&#xA;      unitOpenValue = XML_OVERRIDE+&quot;NewVes Detention&quot;+XML_OVERRIDE;&#xA;    }&#xA;     String unitOpenAttr = &quot;&lt;unit snx-update-note=&quot;;&#xA;    String lineAttr = &quot; line=&quot;;&#xA;    String freightKindAttr = &quot; freight-kind=&quot;;&#xA;    String idAttr = &quot; id=&quot;;&#xA;    String categoryAttr = &quot; category=&quot;;&#xA;    String freightKindValue = this.findUnitFreightKind(inUnit);&#xA;    String idValue = this.findUnitNbr(inUnit);&#xA;    String categoryValue = this.findUnitCategory(inUnit);&#xA;    ScopedBizUnit lineOp = inUnit.getUnitLineOperator();&#xA;    String lineValue = XML_OVERRIDE+lineOp.getBzuId()+XML_OVERRIDE;&#xA;    String unitString = unitOpenAttr + unitOpenValue+ lineAttr + lineValue + freightKindAttr + freightKindValue + categoryAttr + categoryValue + idAttr + idValue + &quot;&gt;&quot;;&#xA;    unitString = this.stripInvalidXmlCharacters(unitString);&#xA;&#x9;unitString = this.ModifyEscapeChar(unitString);&#xA;&#x9;inElementList.append(unitString);&#xA;    return inElementList;&#xA;  }&#xA;&#xA;&#x9;public StringBuffer getEquipmentDetails(Unit inUnit, StringBuffer inElementList){&#xA;&#x9;try&#xA;&#x9;{&#xA;&#x9;Equipment eq = inUnit.getPrimaryEq();&#xA;&#xA;&#x9;def unitEquipment = inUnit.getUnitPrimaryUe()&#xA;    def ueEquipmentState = unitEquipment.getUeEquipmentState()&#xA;    def equipFlex01 = ueEquipmentState != null ? ueEquipmentState.getEqsFlexString01() : ''&#xA;&#xA;    String equipmentOpenAttr = &quot;&lt;equipment&quot;;&#xA;    String equipmentRoleAttr = &quot; role=&quot;;&#xA;    String equipmentRoleValue = XML_OVERRIDE+&quot;PRIMARY&quot;+XML_OVERRIDE;&#xA;    String equipmentFlex01Attr = &quot; eq-flex-01=&quot;;&#xA;    String equipmentFlex01Value = XML_OVERRIDE+equipFlex01+XML_OVERRIDE;&#xA;    String equipmentMaterialAttr = &quot; material=&quot;;&#xA;    String equipmentMaterialValue = this.findEquipmentMaterial(eq);&#xA;    String equipmentOperatorAttr = &quot; operator=&quot;&#xA;    String equipmentOperatorValue=XML_OVERRIDE+eq.getEquipmentOperatorId()+XML_OVERRIDE;&#xA;    String equipmentOwnerAttr = &quot; owner=&quot;&#xA;    String equipmentOwnerValue=XML_OVERRIDE+eq.getEquipmentOwnerId()+XML_OVERRIDE;&#xA;    String equipmentStrengthCodeAttr = &quot; strength-code=&quot;;&#xA;    String equipmentStrengthCodeValue = XML_OVERRIDE+eq.getEqStrengthCode()+XML_OVERRIDE;&#xA;    String equipmentHeightMmAttr = &quot; height-mm=&quot;;&#xA;    String equipmentHeightMmValue = XML_OVERRIDE+eq.getEqHeightMm().toString()+XML_OVERRIDE;&#xA;    String equipmentTareWeightKgAttr = &quot; tare-kg=&quot;;&#xA;    String equipmentTareWeightKgValue = XML_OVERRIDE+eq.getEqTareWeightKg().toString()+XML_OVERRIDE;&#xA;    String equipmentTypeAttr = &quot; type=&quot;;&#xA;    String equipmentTypeValue = XML_OVERRIDE+eq.getEqEquipType().eqtypId+XML_OVERRIDE;&#xA;    String equipmentClassAttr = &quot; class=&quot;;&#xA;&#x9;String equipClass = eq.getEqClass().getKey();&#xA;&#x9;equipClass = equipClass = &quot;CONTAINER&quot;?&quot;CTR&quot;:eq.getEqClass().getKey()&#xA;    String equipmentClassValue = XML_OVERRIDE+equipClass+XML_OVERRIDE&#xA;    String equipmentIdAttr = &quot; eqid=&quot;;&#xA;    String equipmentIdValue = this.findUnitNbr(inUnit);&#xA;&#xA;    String equipmentString = equipmentOpenAttr + equipmentRoleAttr+ equipmentRoleValue + equipmentFlex01Attr +&#xA;                             equipmentFlex01Value + equipmentMaterialAttr + equipmentMaterialValue+equipmentOperatorAttr+equipmentOperatorValue+&#xA;                             equipmentOwnerAttr+equipmentOwnerValue+equipmentStrengthCodeAttr+equipmentStrengthCodeValue+&#xA;                             equipmentHeightMmAttr+equipmentHeightMmValue+equipmentTareWeightKgAttr+equipmentTareWeightKgValue+&#xA;                             equipmentTypeAttr+equipmentTypeValue+equipmentClassAttr+equipmentClassValue+equipmentIdAttr+equipmentIdValue+ &quot;&gt;&quot;;&#xA;    equipmentString = this.stripInvalidXmlCharacters(equipmentString)&#xA;&#x9;equipmentString = this.ModifyEscapeChar(equipmentString);&#xA;&#x9;inElementList.append(equipmentString);&#xA;&#xA;&#x9;String grade = ueEquipmentState != null ? ueEquipmentState.getEqsGradeID() : ''&#xA;&#x9;if (grade != null)&#xA;&#x9;{&#xA;&#x9;&#x9;grade = grade.replace(&quot;EquipGrade Id:&quot;,&quot;&quot;)&#xA;&#x9;}&#xA;&#x9;String physicalOpenAttr = &quot;&lt;physical&quot;;&#xA;    String gradeAttr = &quot; grade=&quot;;&#xA;&#x9;if (grade!= null)&#xA;&#x9;{&#xA;&#x9;&#x9;String physicalString = physicalOpenAttr + gradeAttr+ XML_OVERRIDE+grade+XML_OVERRIDE +XML_END_ELEMENT&#xA;&#x9;&#x9;inElementList.append(physicalString);&#xA;&#x9;}&#xA;    //inElementList.append(&quot;&lt;damages&quot;);&#xA;&#xA;&#x9;String damageOpenAttr = &quot;&lt;damages&quot;;&#xA;&#x9;String damageSevAttr = &quot; severity=&quot;&#xA;&#x9;def eqsDamageSev = inUnit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsDamageSeverity&quot;);&#xA;&#x9;String damageSev = null;&#xA;&#x9;if (eqsDamageSev !=null)&#xA;&#x9;{&#xA;&#x9;&#x9;damageSev = eqsDamageSev.getKey();&#xA;&#x9;}&#xA;&#xA;&#x9;String damageString = null;&#xA;&#x9;if (damageSev != &quot;NONE&quot; &amp;&amp; damageSev!= null)&#xA;&#x9;{&#xA;&#x9;&#x9;damageString = damageOpenAttr+damageSevAttr+XML_OVERRIDE+damageSev+XML_OVERRIDE+XML_END_ELEMENT;&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;damageString = damageOpenAttr+XML_END_ELEMENT;&#xA;&#x9;}&#xA;&#xA;&#x9;//println(&quot;damageString &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+damageString)&#xA;&#x9;inElementList.append(damageString);&#xA;&#xA;&#xA;    inElementList.append(&quot;&lt;/equipment&gt;&quot;);&#xA;&#x9;}&#xA;&#x9;catch (e)&#xA;&#x9;{&#xA;&#x9;&#x9;println(&quot;Exception &quot;+e)&#xA;&#x9;}&#xA;&#xA;    return inElementList;&#xA;  }&#xA;&#xA;  public StringBuffer getPositionDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;    String  positionLocationValue = &quot;&quot;;&#xA;    String positionLocTypeValue = &quot;&quot;;&#xA;    if (inCv != null){&#xA;      positionLocationValue = XML_OVERRIDE + inCv.getCvId()+XML_OVERRIDE;&#xA;      positionLocTypeValue = XML_OVERRIDE+ &quot;VESSEL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    String positionOpenAttr = &quot;&lt;position&quot;&#xA;    String positionSlotAttr = &quot; slot=&quot;;&#xA;    String positionSlotValue = XML_OVERRIDE+inUnit.getUnitArrivePositionSlot()+XML_OVERRIDE;&#xA;    String positionLocationAttr = &quot; location=&quot;;&#xA;    String positionLocTypeAttr = &quot; loc-type=&quot;;&#xA;&#xA;&#xA;    String positionString = positionOpenAttr+positionSlotAttr+positionSlotValue+positionLocationAttr+positionLocationValue+&#xA;                            positionLocTypeAttr+positionLocTypeValue+XML_END_ELEMENT;&#xA;&#x9;positionString = this.stripInvalidXmlCharacters(positionString)&#xA;&#x9;positionString = this.ModifyEscapeChar(positionString);&#xA;&#x9;inElementList.append(positionString);&#xA;&#xA;    return inElementList;&#xA;  }&#xA;&#xA;&#x9;public StringBuffer getRoutingDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;String group = null;&#xA;&#x9;&#x9;String disc=&quot;&quot;;&#xA;&#x9;&#x9;String pod2=null;&#xA;&#x9;&#x9;String opl=&quot;&quot;;&#xA;&#x9;&#x9;String pol=&quot;&quot;;&#xA;&#x9;&#x9;String destination=&quot;&quot;;&#xA;&#x9;&#x9;String designatedTrucker=null;&#xA;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;designatedTrucker=inUnit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (te)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Exception in getting trucker details &quot; + te);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//try{&#xA;&#xA;&#x9;&#x9;Routing routing = inUnit.getUnitRouting();&#xA;&#xA;&#x9;&#x9;if (routing != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;String rtgGroup = routing.getRtgGroup();&#xA;&#x9;&#x9;&#x9;&#x9;group = rtgGroup.replace(&quot;Group Id:&quot;,&quot;&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;catch (e)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;RoutingPoint point = inUnit.getUnitRouting().getRtgPOD1();&#xA;&#x9;&#x9;RoutingPoint point2 = inUnit.getUnitRouting().getRtgPOD2();&#xA;&#x9;&#x9;RoutingPoint pointOpl = inUnit.getUnitRouting().getRtgOPL();&#xA;&#x9;&#x9;RoutingPoint pointPol = inUnit.getUnitRouting().getRtgPOL();&#xA;&#x9;&#x9;if (point != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;disc = point.getPointId();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (point2 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;pod2 = point2.getPointId();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (pointOpl != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;opl = pointOpl.getPointId();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (pointPol != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;pol = pointPol.getPointId();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;destination = inUnit.getUnitGoods().getGdsDestination();&#xA;&#x9;&#x9;//} catch (Exception e){&#xA;&#x9;&#x9;  //LOGGER.warn(&quot;Exception in getting routing details &quot; + e);&#xA;&#x9;&#x9;//}&#xA;&#x9;&#x9;String rtgOpenAttr = &quot;&lt;routing&quot;&#xA;&#x9;&#x9;String groupAttr = &quot; group=&quot;&#xA;&#x9;&#x9;String groupValue = XML_OVERRIDE+group+XML_OVERRIDE;&#xA;&#x9;&#x9;String designatedTruckerAttr = &quot; designated-trucker=&quot;&#xA;&#x9;&#x9;String designatedTruckerValue = XML_OVERRIDE+designatedTrucker+XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgDestAttr = &quot; destination=&quot;;&#xA;&#x9;&#x9;String rtgDestValue = XML_OVERRIDE+destination+XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgOplAttr = &quot; opl=&quot;;&#xA;&#x9;&#x9;String rtgOplValue = XML_OVERRIDE+ opl +XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgPod1Attr = &quot; pod-1=&quot;;&#xA;&#x9;&#x9;String rtgPod2Attr = &quot; pod-2=&quot;;&#xA;&#x9;&#x9;String rtgPod1Value = XML_OVERRIDE+ disc +XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgPod2Value = XML_OVERRIDE+ pod2 +XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgPolAttr = &quot; pol=&quot;;&#xA;&#x9;&#x9;String rtgPolValue = XML_OVERRIDE+ pol +XML_OVERRIDE;&#xA;&#x9;&#x9;String routingString = null;&#xA;&#xA;&#xA;&#x9;&#x9;if (designatedTrucker!= null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;routingString = designatedTruckerAttr+designatedTruckerValue+rtgDestAttr+rtgDestValue+rtgOplAttr+rtgOplValue+rtgPod1Attr+rtgPod1Value+&#xA;&#x9;&#x9;&#x9;&#x9;rtgPolAttr+rtgPolValue;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;routingString = rtgDestAttr+rtgDestValue+rtgOplAttr+rtgOplValue+rtgPod1Attr+rtgPod1Value+&#xA;&#x9;&#x9;&#x9;&#x9;rtgPolAttr+rtgPolValue;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (pod2 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;//println(&quot;pod2&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot;+pod2);&#xA;&#x9;&#x9;routingString = routingString+rtgPod2Attr+rtgPod2Value&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (group != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;routingString = rtgOpenAttr + groupAttr + groupValue + routingString&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;  {&#xA;&#x9;&#x9;&#x9;routingString = rtgOpenAttr + routingString&#xA;&#x9;  }&#xA;&#x9;&#x9;routingString = routingString + &quot;&gt;&quot;&#xA;&#x9;&#x9;routingString = this.stripInvalidXmlCharacters(routingString);&#xA;&#x9;&#x9;routingString = this.ModifyEscapeChar(routingString);&#xA;&#x9;&#x9;inElementList.append(routingString);&#xA;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;&#x9;  public StringBuffer getCarrierDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;UnitFacilityVisit ufv = inUnit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;println(&quot;getCarrierDetails &quot;+ufv);&#xA;&#x9;&#x9;if (ufv != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;CarrierVisit declaredIbCv = inUnit.getUnitDeclaredIbCv();&#xA;&#x9;&#x9;String declaredIbCvMode = this.findCarrierVisitMode(declaredIbCv);&#xA;&#x9;&#x9;CarrierVisit actualIbCv = ufv.getInboundCarrierVisit();&#xA;&#x9;&#x9;String actualIbCvMode = this.findCarrierVisitMode(actualIbCv);&#xA;&#x9;&#x9;CarrierVisit declaredObCv = inUnit.getUnitRouting().getRtgDeclaredCv();&#xA;&#x9;&#x9;String declaredObCvMode = this.findCarrierVisitMode(declaredObCv);&#xA;&#x9;&#x9;CarrierVisit actualObCv = ufv.getUfvObCv();&#xA;&#x9;&#x9;String actualObCvMode = this.findCarrierVisitMode(actualObCv);&#xA;&#xA;&#x9;&#x9;String cvOpenAttr = &quot;&quot;;&#xA;&#x9;&#x9;String cvIdAttr = &quot;&quot;;&#xA;&#x9;&#x9;String cvIdValue = &quot;&quot;;&#xA;&#x9;&#x9;String cvFacilityAttr = &quot;&quot;;&#xA;&#x9;&#x9;String cvFacilityValue = &quot;&quot;;&#xA;&#x9;&#x9;String cvModeAttr = &quot;&quot;;&#xA;&#x9;&#x9;String cvModeValue = &quot;&quot;;&#xA;&#x9;&#x9;String cvQualifierAttr = &quot;&quot;;&#xA;&#x9;&#x9;String cvQualiferValue = &quot;&quot;;&#xA;&#x9;&#x9;String cvDirectionAttr = &quot;&quot;;&#xA;&#x9;&#x9;String cvDirectionValue = &quot;&quot;;&#xA;&#x9;&#x9;// Declared IB CV Details Block&#xA;&#x9;&#x9;cvOpenAttr = &quot;&lt;carrier &quot;&#xA;&#x9;&#x9;cvIdAttr = &quot; id=&quot;;&#xA;&#x9;&#x9;String dclrdCarrierIbCv = declaredIbCv;&#xA;&#xA;&#x9;&#x9;if (dclrdCarrierIbCv.length() &gt; 6)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;dclrdCarrierIbCv = dclrdCarrierIbCv.substring(0,6)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;println (&quot;dclrdCarrierIbCv &quot;+ dclrdCarrierIbCv)&#xA;&#xA;&#xA;&#x9;&#x9;cvIdValue = XML_OVERRIDE+dclrdCarrierIbCv+XML_OVERRIDE;&#xA;&#x9;&#x9;cvFacilityAttr = &quot; facility=&quot;;&#xA;&#x9;&#x9;cvFacilityValue = XML_OVERRIDE+ threadFacility +XML_OVERRIDE;&#xA;&#x9;&#x9;cvModeAttr = &quot; mode=&quot;;&#xA;&#x9;&#x9;cvModeValue = XML_OVERRIDE+ declaredIbCvMode +XML_OVERRIDE;&#xA;&#x9;&#x9;cvQualifierAttr = &quot; qualifier=&quot;;&#xA;&#x9;&#x9;cvQualiferValue = XML_OVERRIDE+ &quot;DECLARED&quot; +XML_OVERRIDE;&#xA;&#x9;&#x9;cvDirectionAttr = &quot; direction=&quot;;&#xA;&#x9;&#x9;cvDirectionValue = XML_OVERRIDE+ &quot;IB&quot; +XML_OVERRIDE;&#xA;&#xA;&#x9;&#x9;String cvDeclaredIbString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;&#x9;&#x9;&#x9;&#x9;cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;&#x9;&#x9;cvDeclaredIbString = this.stripInvalidXmlCharacters(cvDeclaredIbString);&#xA;&#x9;&#x9;inElementList.append(cvDeclaredIbString);&#xA;&#xA;&#x9;&#x9;String actlCarrierIbCv = actualIbCv;&#xA;&#xA;&#x9;&#x9;if (actlCarrierIbCv.length() &gt; 6)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;actlCarrierIbCv = actlCarrierIbCv.substring(0,6)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;println (&quot;actlCarrierIbCv &quot;+ actlCarrierIbCv)&#xA;&#xA;&#xA;&#x9;&#x9;// Actual IB CV Details Block&#xA;&#x9;&#x9;cvOpenAttr = &quot;&lt;carrier &quot;&#xA;&#x9;&#x9;cvIdAttr = &quot; id=&quot;;&#xA;&#x9;&#x9;cvIdValue = XML_OVERRIDE+actlCarrierIbCv+XML_OVERRIDE;&#xA;&#x9;&#x9;cvFacilityAttr = &quot; facility=&quot;;&#xA;&#x9;&#x9;cvFacilityValue = XML_OVERRIDE+ threadFacility +XML_OVERRIDE;&#xA;&#x9;&#x9;cvModeAttr = &quot; mode=&quot;;&#xA;&#x9;&#x9;cvModeValue = XML_OVERRIDE+ actualIbCvMode +XML_OVERRIDE;&#xA;&#x9;&#x9;cvQualifierAttr = &quot; qualifier=&quot;;&#xA;&#x9;&#x9;cvQualiferValue = XML_OVERRIDE+ &quot;ACTUAL&quot; +XML_OVERRIDE;&#xA;&#x9;&#x9;cvDirectionAttr = &quot; direction=&quot;;&#xA;&#x9;&#x9;cvDirectionValue = XML_OVERRIDE+ &quot;IB&quot; +XML_OVERRIDE;&#xA;&#xA;&#x9;&#x9;String cvActualIbString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;&#x9;&#x9;&#x9;&#x9;cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;&#x9;&#x9;cvActualIbString = this.stripInvalidXmlCharacters(cvActualIbString);&#xA;&#x9;&#x9;inElementList.append(cvActualIbString);&#xA;&#xA;&#x9;&#x9;// Declared Ob CV Details Block&#xA;&#x9;&#x9;cvOpenAttr = &quot;&lt;carrier &quot;&#xA;&#x9;&#x9;cvIdAttr = &quot; id=&quot;;&#xA;&#x9;&#x9;cvIdValue = XML_OVERRIDE+declaredObCv+XML_OVERRIDE;&#xA;&#x9;&#x9;cvFacilityAttr = &quot; facility=&quot;;&#xA;&#x9;&#x9;cvFacilityValue = XML_OVERRIDE+ threadFacility +XML_OVERRIDE;&#xA;&#x9;&#x9;cvModeAttr = &quot; mode=&quot;;&#xA;&#x9;&#x9;cvModeValue = XML_OVERRIDE+ declaredObCvMode +XML_OVERRIDE;&#xA;&#x9;&#x9;cvQualifierAttr = &quot; qualifier=&quot;;&#xA;&#x9;&#x9;cvQualiferValue = XML_OVERRIDE+ &quot;DECLARED&quot; +XML_OVERRIDE;&#xA;&#x9;&#x9;cvDirectionAttr = &quot; direction=&quot;;&#xA;&#x9;&#x9;cvDirectionValue = XML_OVERRIDE+ &quot;OB&quot; +XML_OVERRIDE;&#xA;&#xA;&#x9;&#x9;String cvDeclaredObString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;&#x9;&#x9;&#x9;&#x9;cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;&#x9;&#x9;cvDeclaredObString = this.stripInvalidXmlCharacters(cvDeclaredObString);&#xA;&#x9;&#x9;inElementList.append(cvDeclaredObString);&#xA;&#xA;&#x9;&#x9;// Actual Ob CV Details Block&#xA;&#x9;&#x9;cvOpenAttr = &quot;&lt;carrier &quot;&#xA;&#x9;&#x9;cvIdAttr = &quot; id=&quot;;&#xA;&#x9;&#x9;cvIdValue = XML_OVERRIDE+actualObCv+XML_OVERRIDE;&#xA;&#x9;&#x9;cvFacilityAttr = &quot; facility=&quot;;&#xA;&#x9;&#x9;cvFacilityValue = XML_OVERRIDE+ threadFacility +XML_OVERRIDE;&#xA;&#x9;&#x9;cvModeAttr = &quot; mode=&quot;;&#xA;&#x9;&#x9;cvModeValue = XML_OVERRIDE+ actualObCvMode +XML_OVERRIDE;&#xA;&#x9;&#x9;cvQualifierAttr = &quot; qualifier=&quot;;&#xA;&#x9;&#x9;cvQualiferValue = XML_OVERRIDE+ &quot;ACTUAL&quot; +XML_OVERRIDE;&#xA;&#x9;&#x9;cvDirectionAttr = &quot; direction=&quot;;&#xA;&#x9;&#x9;cvDirectionValue = XML_OVERRIDE+ &quot;OB&quot; +XML_OVERRIDE;&#xA;&#xA;&#x9;&#x9;String cvActualObString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;&#x9;&#x9;&#x9;&#x9;cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;&#x9;&#x9;cvActualObString = this.stripInvalidXmlCharacters(cvActualObString);&#xA;&#x9;&#x9;inElementList.append(cvActualObString);&#xA;&#xA;&#x9;&#x9;inElementList.append(&quot;&lt;/routing&gt;&quot;);&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#x9;  }&#xA;&#xA;&#x9;public StringBuffer getHazard(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;&#x9;&#x9;def ufv = inUnit.getUfvForFacilityCompletedOnly(fcy);&#xA;&#xA;&#x9;&#x9;if (ufv != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;if (ufv.ufvUnit.getUnitGoods() != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;def haz = ufv.ufvUnit.getUnitGoods().getGdsHazards();&#xA;&#x9;&#x9;//println(&quot;hazard&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+haz)&#xA;&#xA;&#x9;&#x9;if (haz != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;String hazardsAttrOpn = &quot;&lt;hazards&gt;&quot;;&#xA;&#x9;&#x9;&#x9;String addtag = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;def hazardAttrOpn = &quot;&lt;hazard&quot;&#xA;&#x9;&#x9;&#x9;def hazardString = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;Iterator hazardIter = ufv.ufvUnit.getUnitGoods().getGdsHazards().getHazardItemsIterator();&#xA;&#x9;&#x9;&#x9;while(hazardIter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;def hazard = hazardIter.next();&#xA;&#x9;&#x9;&#x9;&#x9;def imdgClass = hazard.getHzrdiImdgCode() != null ? hazard.getHzrdiImdgCode().getKey() : null&#xA;&#x9;&#x9;&#x9;&#x9;def nbrType = hazard.getHzrdiNbrType() != null ? hazard.getHzrdiNbrType().getKey() : null&#xA;&#x9;&#x9;&#x9;&#x9;def qty = hazard.hzrdiQuantity;&#xA;&#x9;&#x9;&#x9;&#x9;def packageType = hazard.hzrdiPackageType;&#xA;&#x9;&#x9;&#x9;&#x9;def weight = hazard.hzrdiWeight;&#xA;&#x9;&#x9;&#x9;&#x9;String properName = hazard.hzrdiProperName;&#xA;&#x9;&#x9;&#x9;&#x9;String techName   = hazard.hzrdiTechName;&#xA;&#x9;&#x9;&#x9;&#x9;String imdgclass  = hazard.hzrdiImdgClass.name;&#xA;&#x9;&#x9;&#x9;&#x9;def im01 = hazard.hzrdiSecondaryIMO1;&#xA;&#x9;&#x9;&#x9;&#x9;def im02 = hazard.hzrdiSecondaryIMO2;&#xA;&#x9;&#x9;&#x9;&#x9;String un  = hazard.hzrdiUNnum;&#xA;&#x9;&#x9;&#x9;&#x9;def pkg = hazard.hzrdiPackingGroup;&#xA;&#x9;&#x9;&#x9;&#x9;if (pkg != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;pkg = pkg.getKey();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;def flashPoint = hazard.hzrdiFlashPoint;&#xA;&#x9;&#x9;&#x9;&#x9;def limited = hazard.hzrdiLtdQty ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;def marine = hazard.hzrdiMarinePollutants ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;def phone = hazard.hzrdiEmergencyTelephone;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiNotes = hazard.hzrdiNotes;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiInhalationZone = hazard.hzrdiInhalationZone;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiPageNumber = hazard.hzrdiPageNumber;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiEMSNumber = hazard.hzrdiEMSNumber;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiMFAG = hazard.hzrdiMFAG;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiHazIdUpper = hazard.hzrdiHazIdUpper;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiSubstanceLower = hazard.hzrdiSubstanceLower;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiPlannerRef = hazard.hzrdiPlannerRef;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiMoveMethod = hazard.hzrdiMoveMethod;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiExplosiveClass = hazard.hzrdiExplosiveClass;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiDcLgRef = hazard.hzrdiDcLgRef;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiDeckRestrictions = hazard.hzrdiDeckRestrictions;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + hazardAttrOpn;&#xA;&#x9;&#x9;&#x9;&#x9;if (nbrType != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; haz-nbr-type=&quot; + XML_OVERRIDE + nbrType + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiNotes != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hzrdiNotes = this.stripInvalidXmlCharacters(hzrdiNotes);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hzrdiNotes = this.removeDoubleQuotes(hzrdiNotes);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; notes=&quot; +XML_OVERRIDE + hzrdiNotes + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (phone != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; emergency-telephone=&quot; +XML_OVERRIDE + phone + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (marine == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; marine-pollutants=&quot; +XML_OVERRIDE + marine + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (im01 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; secondary-imo-1=&quot; +XML_OVERRIDE + im01 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (im02 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; secondary-imo-2=&quot; +XML_OVERRIDE + im02 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (qty != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; quantity=&quot; +XML_OVERRIDE + qty + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (weight != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; weight-kg=&quot; +XML_OVERRIDE + weight + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (pkg != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; packing-group=&quot; +XML_OVERRIDE + pkg + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (properName != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;properName = this.stripInvalidXmlCharacters(properName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;properName = this.removeDoubleQuotes(properName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; proper-name=&quot; +XML_OVERRIDE + properName + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (techName != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;techName = this.stripInvalidXmlCharacters(techName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;techName = this.removeDoubleQuotes(techName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; tech-name=&quot; +XML_OVERRIDE + techName + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (flashPoint != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; flash-point=&quot; +XML_OVERRIDE + flashPoint + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (packageType != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; package-type=&quot; +XML_OVERRIDE + packageType + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (limited == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; ltd-qty-flag=&quot; +XML_OVERRIDE + limited + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (un != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; un=&quot; +XML_OVERRIDE + un + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (imdgClass != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; imdg=&quot; +XML_OVERRIDE + imdgClass + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiInhalationZone != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; inhalation-zone=&quot; +XML_OVERRIDE + hzrdiInhalationZone + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiExplosiveClass != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; explosive-class=&quot; +XML_OVERRIDE + hzrdiExplosiveClass + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiEMSNumber != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; ems-nbr=&quot; +XML_OVERRIDE + hzrdiEMSNumber + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiMFAG != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; mfag=&quot; +XML_OVERRIDE + hzrdiMFAG + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiHazIdUpper != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; haz-id-upper=&quot; +XML_OVERRIDE + hzrdiHazIdUpper + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiSubstanceLower != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; substance-lower=&quot; +XML_OVERRIDE + hzrdiSubstanceLower + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiPlannerRef != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; planner-ref=&quot; +XML_OVERRIDE + hzrdiPlannerRef + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiMoveMethod != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; move-method=&quot; +XML_OVERRIDE + hzrdiMoveMethod + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiDeckRestrictions != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; deck-restrictions=&quot; +XML_OVERRIDE + hzrdiDeckRestrictions + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiDcLgRef != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; dc-lg-ref=&quot; +XML_OVERRIDE + hzrdiDcLgRef + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiPageNumber != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; page-number=&quot; +XML_OVERRIDE + hzrdiPageNumber + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (addtag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (addtag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;hazardsAttrOpn = hazardsAttrOpn + hazardString + &quot;&lt;/hazards&gt;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;hazardsAttrOpn = this.stripInvalidXmlCharacters(hazardsAttrOpn);&#xA;&#x9;&#x9;&#x9;&#x9;hazardsAttrOpn = this.ModifyEscapeChar(hazardsAttrOpn);&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(hazardsAttrOpn);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;}&#xA;&#x9;return inElementList;&#xA;}&#xA;&#xA;&#x9;public StringBuffer getOog(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;{&#xA;&#x9;&#x9;if (inUnit.getFieldValue(&quot;unitIsOog&quot;))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;String backCm = inUnit.getFieldValue(&quot;unitOogBackCm&quot;);&#xA;&#x9;&#x9;&#x9;String frontCm = inUnit.getFieldValue(&quot;unitOogFrontCm&quot;) ;&#xA;&#x9;&#x9;&#x9;String leftCm = inUnit.getFieldValue(&quot;unitOogLeftCm&quot;);&#xA;&#x9;&#x9;&#x9;String rightCm = inUnit.getFieldValue(&quot;unitOogRightCm&quot;);&#xA;&#x9;&#x9;&#x9;String topCm = inUnit.getFieldValue(&quot;unitOogTopCm&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;backCm = backCm !=null ? backCm:0;&#xA;&#x9;&#x9;&#x9;frontCm = frontCm !=null ? frontCm:0;&#xA;&#x9;&#x9;&#x9;leftCm = leftCm !=null ? leftCm:0;&#xA;&#x9;&#x9;&#x9;rightCm = rightCm !=null ? rightCm:0;&#xA;&#x9;&#x9;&#x9;topCm = topCm !=null ? topCm:0;&#xA;&#xA;&#x9;&#x9;&#x9;String oogAttrOpn = &quot;&lt;oog&quot;;&#xA;&#x9;&#x9;&#x9;String oogString = oogAttrOpn&#xA;&#x9;&#x9;&#x9;if (rightCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; right-cm=&quot; + XML_OVERRIDE + rightCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (leftCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; left-cm=&quot; + XML_OVERRIDE + leftCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (backCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; back-cm=&quot; + XML_OVERRIDE + backCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (frontCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; front-cm=&quot; + XML_OVERRIDE + frontCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (topCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; top-cm=&quot; + XML_OVERRIDE + topCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;oogString = oogString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;inElementList.append(oogString);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;&#x9;public StringBuffer getBookingNbr(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;String bookingId = null;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;bookingId = inUnit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (be)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Exception in getting routing details &quot; + be);&#xA;&#x9;&#x9;&#x9;println(&quot;Exception in getting routing details &quot; + be);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;String unitBkngOpenAttr = &quot;&lt;booking &quot;&#xA;&#x9;&#x9;String unitBkngAttr = &quot;id=&quot;;&#xA;&#x9;&#x9;if (bookingId != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;bookingId = XML_OVERRIDE+bookingId+XML_OVERRIDE&#xA;&#x9;&#x9;&#x9;String unitBkngString = unitBkngOpenAttr+unitBkngAttr+bookingId+XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;unitBkngString = this.stripInvalidXmlCharacters(unitBkngString);&#xA;&#x9;&#x9;&#x9;unitBkngString = this.ModifyEscapeChar(unitBkngString);&#xA;&#x9;&#x9;&#x9;inElementList.append(unitBkngString);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;&#x9;public StringBuffer getReefer(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;&#x9;def tempReq = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempRequiredC&quot;);&#xA;&#x9;&#x9;&#x9;def tempMax = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempLimitMaxC&quot;);&#xA;&#x9;&#x9;&#x9;def tempMin = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempLimitMinC&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM1 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor1&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM2 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor2&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM3 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor3&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM4 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor4&quot;);&#xA;&#x9;&#x9;&#x9;def tempPwrOnTime = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqLatestOnPowerTime&quot;);&#xA;&#x9;&#x9;&#x9;def tempCo2Pct = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqCO2Pct&quot;);&#xA;&#x9;&#x9;&#x9;def tempHmdtyPct = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqHumidityPct&quot;);&#xA;&#x9;&#x9;&#x9;def tempO2Pct = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqO2Pct&quot;);&#xA;&#x9;&#x9;&#x9;def tempVentReq = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqVentRequired&quot;);&#xA;&#x9;&#x9;&#x9;def tempVentUnit = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqVentUnit&quot;);&#xA;&#x9;&#x9;&#x9;def tempShowFahrenhiet = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempShowFahrenheit&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;tempShowFahrenhiet = tempShowFahrenhiet ? &quot;F&quot; : &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;String reeferAttrOpn = &quot;&lt;reefer&quot;;&#xA;&#x9;&#x9;&#x9;String reeferString = reeferAttrOpn;&#xA;&#x9;&#x9;&#x9;String addtag = &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;if (tempShowFahrenhiet == &quot;F&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-display-unit=&quot; + XML_OVERRIDE + tempShowFahrenhiet + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempReq !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-reqd-c=&quot; + XML_OVERRIDE + tempReq + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempO2Pct !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; o2-pct=&quot; + XML_OVERRIDE + tempO2Pct + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempCo2Pct !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; co2-pct=&quot; + XML_OVERRIDE + tempCo2Pct + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempHmdtyPct !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; humidity-pct=&quot; + XML_OVERRIDE + tempHmdtyPct + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempVentReq !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; vent-required-value=&quot; + XML_OVERRIDE + tempVentReq + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempVentUnit !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; vent-required-unit=&quot; + XML_OVERRIDE + tempVentUnit + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempMin !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-min-c=&quot; + XML_OVERRIDE + tempMin + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempMax !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-max-c=&quot; + XML_OVERRIDE + tempMax + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempPwrOnTime !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-latest-on-power=&quot; + XML_OVERRIDE + tempPwrOnTime + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM1 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-1=&quot; + XML_OVERRIDE + tempTM1 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM2 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-2=&quot; + XML_OVERRIDE + tempTM2 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM3 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-3=&quot; + XML_OVERRIDE + tempTM3 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM4 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-4=&quot; + XML_OVERRIDE + tempTM4 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;//println(&quot;reeferString &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot; + addtag +&quot;  :   &quot;+reeferString)&#xA;&#xA;&#x9;&#x9;&#x9;if (addtag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;//println(&quot;Here reeferString &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot; + addtag +&quot;  :   &quot;+reeferString)&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = this.stripInvalidXmlCharacters(reeferString);&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = this.ModifyEscapeChar(reeferString);&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(reeferString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return inElementList;&#xA;&#x9;&#x9;}&#xA;&#xA;  public StringBuffer getHandlingDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;&#x9;def ufv = inUnit.getUfvForFacilityCompletedOnly(fcy);&#xA;&#xA;&#x9;String lastfreeDay = null;&#xA;    String handlingOpenAttr = &quot;&lt;handling&quot;&#xA;&#x9;String handlingString = handlingOpenAttr;&#xA;&#x9;String lastfreeDayAttr = &quot; last-free-day=&quot;;&#xA;    String handlingRemarkAttr = &quot; remark=&quot;;&#xA;    String handlingRemark = inUnit.getUnitRemark();&#xA;&#x9;if (ufv !=null)&#xA;&#x9;{&#xA;&#x9;&#x9;lastfreeDay = ufv.getFieldValue(&quot;ufvCalculatedLastFreeDay&quot;);&#xA;&#x9;&#x9;if (lastfreeDay != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;lastfreeDay = lastfreeDay.replace(&quot;!&quot;,&quot;&quot;)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;addNode = &quot;N&quot;;&#xA;&#x9;if (lastfreeDay != null)&#xA;&#x9;{&#xA;&#x9;&#x9;addNode = &quot;Y&quot;;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Date date = new SimpleDateFormat(&quot;yyyy-MMM-dd&quot;, Locale.ENGLISH).parse(lastfreeDay);&#xA;&#x9;&#x9;&#x9;DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#x9;&#x9;&#x9;lastfreeDay = df.format(date);&#xA;&#x9;&#x9;}&#xA;&#x9;catch (Exception de){&#xA;      LOGGER.warn (&quot;Exception in while converting date &quot;+ lastfreeDay+&quot;:&quot;+de);&#xA;&#x9;  lastfreeDay = null;&#xA;&#x9;  addNode = &quot;N&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;if (addNode == &quot;Y&quot;)&#xA;&#x9;{&#xA;&#x9;&#x9;lastfreeDay=XML_OVERRIDE+lastfreeDay+XML_OVERRIDE;&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;addNode = &quot;N&quot;;&#xA;&#x9;}&#xA;&#xA;    if (handlingRemark != null)&#xA;&#x9;{&#xA;&#x9;&#x9;handlingRemark = removeDoubleQuotes(handlingRemark);&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;handlingRemark = &quot; &quot;&#xA;&#x9;}&#xA;&#x9;if (addNode == &quot;Y&quot; )&#xA;&#x9;{&#xA;&#x9;&#x9;handlingString = handlingString + lastfreeDayAttr + lastfreeDay;&#xA;&#x9;}&#xA;&#xA;&#x9;String handlingRemarkValue = XML_OVERRIDE+handlingRemark+XML_OVERRIDE;&#xA;    handlingString = handlingString+handlingRemarkAttr+handlingRemarkValue+ XML_END_ELEMENT;&#xA;&#x9;handlingString = this.stripInvalidXmlCharacters(handlingString);&#xA;&#x9;handlingString = this.ModifyEscapeChar(handlingString);&#xA;&#x9;inElementList.append(handlingString);&#xA;&#xA;    return inElementList;&#xA;  }&#xA;&#xA;&#x9;public StringBuffer getContentsDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;GoodsBase goods = inUnit.getUnitGoods();&#xA;&#x9;&#x9;String blNbr =  goods.getGdsBlNbr();&#xA;&#x9;&#x9;ScopedBizUnit shipper = goods.getGdsShipperBzu();&#xA;&#x9;&#x9;String shipperName = &quot;&quot;;&#xA;&#x9;&#x9;String shipperId = &quot;&quot;;&#xA;&#x9;&#x9;String consigneeName = &quot;&quot;;&#xA;&#x9;&#x9;String consigneeId = &quot;&quot; ;&#xA;&#x9;&#x9;String contentsShipperNameAttr = &quot; shipper-name=&quot;;&#xA;&#x9;&#x9;String contentsShipperIdAttr = &quot; shipper-id=&quot;;&#xA;&#x9;&#x9;String contentsConsigneeNameAttr = &quot; consignee-name=&quot;;&#xA;&#x9;&#x9;String contentsConsigneeIdAttr = &quot; consignee-id=&quot;;&#xA;&#x9;&#x9;String contentsConsigneeNameValue = &quot;&quot;;&#xA;&#x9;&#x9;String contentsConsigneeIdValue = &quot;&quot;;&#xA;&#x9;&#x9;String contentsShipperNameValue = &quot;&quot;;&#xA;&#x9;&#x9;String contentsShipperIdValue = &quot;&quot;;&#xA;&#xA;&#x9;&#x9;ScopedBizUnit consignee = goods.getGdsConsigneeBzu();&#xA;&#x9;&#x9;if (consignee != null){&#xA;&#x9;&#x9;  try{&#xA;&#x9;&#x9;&#x9;consigneeName = consignee.getBzuName();&#xA;&#x9;&#x9;&#x9;consigneeName = removeDoubleQuotes(consigneeName);&#xA;&#x9;&#x9;&#x9;consigneeId = consignee.getBzuId();&#xA;&#x9;&#x9;&#x9;consigneeId = removeDoubleQuotes(consigneeId);&#xA;&#xA;&#x9;&#x9;&#x9;contentsConsigneeNameValue = XML_OVERRIDE+consigneeName+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;contentsConsigneeIdValue =  XML_OVERRIDE+consigneeId+XML_OVERRIDE;&#xA;&#x9;&#x9;  } catch (Exception e){&#xA;&#x9;&#x9;&#x9;LOGGER.warn (&quot;Exception in getting Consignee info&quot;+ e);&#xA;&#x9;&#x9;  }&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (blNbr == null || blNbr.startsWith(&quot;DO NOT EDIT&quot;)){&#xA;&#x9;&#x9;  blNbr = &quot;&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;String gdsWeight = inUnit.getUnitGoodsAndCtrWtKg().toString();&#xA;&#x9;&#x9;String contentsOpenAttr = &quot;&lt;contents&quot;;&#xA;&#x9;&#x9;String contentsCommodityNameAttr = &quot; commodity-name=&quot;;&#xA;&#x9;&#x9;String commodity = inUnit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;&#x9;String commodityName = inUnit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyShortName&quot;)&#xA;&#x9;&#x9;String contentsCommodityNameValue = XML_OVERRIDE+commodityName+XML_OVERRIDE;&#xA;&#x9;&#x9;String contentsCommodityIdAttr = &quot; commodity-id=&quot;;&#xA;&#x9;&#x9;String contentsCommodityIdValue = XML_OVERRIDE+commodity+XML_OVERRIDE;&#xA;&#x9;&#x9;String contentsBlNbrAttr = &quot; bl-nbr=&quot;;&#xA;&#x9;&#x9;String contentsBlNbrValue = XML_OVERRIDE+blNbr+XML_OVERRIDE;&#xA;&#x9;&#x9;String contentsWeightKgAttr = &quot; weight-kg=&quot;;&#xA;&#x9;&#x9;String contentsWeightKgValue = XML_OVERRIDE+gdsWeight+XML_OVERRIDE;&#xA;&#xA;&#x9;&#x9;if (shipper != null){&#xA;&#x9;&#x9;  try{&#xA;&#x9;&#x9;&#x9;shipperName = shipper.getBzuName();&#xA;&#x9;&#x9;&#x9;shipperName = removeDoubleQuotes(shipperName);&#xA;&#x9;&#x9;&#x9;shipperId = shipper.getBzuId();&#xA;&#x9;&#x9;&#x9;shipperId = removeDoubleQuotes(shipperId);&#xA;&#xA;&#x9;&#x9;&#x9;contentsShipperNameValue = XML_OVERRIDE+shipperName+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;contentsShipperIdValue =  XML_OVERRIDE+shipperId+XML_OVERRIDE;&#xA;&#x9;&#x9;  } catch (Exception e){&#xA;&#x9;&#x9;&#x9;LOGGER.warn (&quot;Exception in getting Shipper Info&quot; + e);&#xA;&#x9;&#x9;  }&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;String handlingString = contentsOpenAttr+contentsCommodityNameAttr+contentsCommodityNameValue+contentsCommodityIdAttr+contentsCommodityIdValue;&#xA;&#x9;&#x9;if (shipper != null){&#xA;&#x9;&#x9;  handlingString = handlingString+contentsShipperNameAttr+contentsShipperNameValue+contentsShipperIdAttr+contentsShipperIdValue;&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (consignee != null){&#xA;&#x9;&#x9;  handlingString = handlingString+contentsConsigneeNameAttr+contentsConsigneeNameValue+contentsConsigneeIdAttr+contentsConsigneeIdValue;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//if (blNbr !=null){&#xA;&#x9;&#x9;  handlingString = handlingString+contentsBlNbrAttr+contentsBlNbrValue;&#xA;&#x9;&#x9;//}&#xA;&#x9;&#x9;if (gdsWeight != null){&#xA;&#x9;&#x9;  handlingString = handlingString+contentsWeightKgAttr+contentsWeightKgValue;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9; handlingString = handlingString+XML_END_ELEMENT;&#xA;&#x9;&#x9; handlingString = this.stripInvalidXmlCharacters(handlingString);&#xA;&#x9;&#x9; inElementList.append(handlingString);&#xA;&#x9;&#x9; //Add Seal Element&#xA;&#x9;&#x9;String sealsOpenAttr = &quot;&lt;seals&quot;;&#xA;&#x9;&#x9;String seals1Attr = &quot; seal-1=&quot;;&#xA;&#x9;&#x9;String seals1Value = XML_OVERRIDE+inUnit.getUnitSealNbr1()+XML_OVERRIDE;&#xA;&#x9;&#x9;if (inUnit.getUnitSealNbr1() != null){&#xA;&#x9;&#x9;  String sealsString = sealsOpenAttr+seals1Attr+seals1Value+XML_END_ELEMENT;&#xA;&#x9;&#x9;  inElementList.append(sealsString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;public StringBuffer getUnitEtc(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;def drayStatus = inUnit.getFieldValue(&quot;unitDrayStatus&quot;);&#xA;&#x9;&#x9;if (drayStatus != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;drayStatus = drayStatus.getKey();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;String requiredPower = inUnit.getFieldValue(&quot;unitRequiresPower&quot;) ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;String etcAttrOpn = &quot;&lt;unit-etc&quot;;&#xA;&#x9;&#x9;String etcString = etcAttrOpn;&#xA;&#x9;&#x9;if (requiredPower == &quot;Y&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;etcString = etcString + &quot; requires-power=&quot; + XML_OVERRIDE + requiredPower + XML_OVERRIDE;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (drayStatus !=null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;etcString = etcString + &quot; dray-status=&quot; + XML_OVERRIDE + drayStatus + XML_OVERRIDE;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (drayStatus != null || requiredPower == &quot;Y&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;etcString = etcString + XML_END_ELEMENT;&#xA;&#x9;&#x9;inElementList.append(etcString);&#xA;&#x9;&#x9;}&#xA;&#x9;return inElementList;&#xA;&#x9;}&#xA;&#xA;public getFlagDetails = {Unit inUnit, StringBuffer inElementList, CarrierVisit inCv -&gt;&#xA;&#xA;    String flagOpenCloseAttr = &quot;&lt;flags/&gt;&quot;;&#xA;    String flagOpenAttr = &quot;&lt;flags&gt;&quot;;&#xA;    String flagCloseAttr = &quot;&lt;/flags&gt;&quot;;&#xA;&#x9;String holdIdValue = &quot;&quot;;&#xA;&#x9;String holdString = &quot;&quot;;&#xA;&#x9;addNode = &quot;N&quot;;&#xA;    List unitImpediments = this.getUnitImpediments(inUnit);&#xA;&#xA;    if (unitImpediments.isEmpty()) {&#xA;      return inElementList;&#xA;    }&#xA;    for (ServiceImpediment imp : unitImpediments) {&#xA;      def status = imp.getStatus();&#xA;      if (FlagStatusEnum.ACTIVE.equals(status) || FlagStatusEnum.REQUIRED.equals(status)) {&#xA;        String holdOpenAttr = &quot;&lt;hold&quot;;&#xA;        String holdIdAttr = &quot; id=&quot;;&#xA;        String holdId = imp.getFlagType().getId();&#xA;&#x9;&#x9;String flgtypPurpose = imp.getFlagType().getPurpose().getKey();&#xA;&#x9;&#x9;println (&quot;holdId &quot;+ holdId +&quot; flgtypPurpose &quot;+flgtypPurpose);&#xA;&#x9;&#x9;if (flgtypPurpose != &quot;PERMISSION&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;addNode = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;holdIdValue = XML_OVERRIDE + holdId + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;holdString = holdString + holdOpenAttr + holdIdAttr + holdIdValue + XML_END_ELEMENT;&#xA;&#x9;&#x9;}&#xA;&#x9;  }&#xA;    }&#xA;&#xA;&#x9;if (addNode == &quot;Y&quot;)&#xA;&#x9;{&#xA;&#x9;&#x9;holdString = this.stripInvalidXmlCharacters(holdString);&#xA;&#x9;&#x9;holdString = this.ModifyEscapeChar(holdString);&#xA;&#x9;&#x9;holdString = flagOpenAttr + holdString + flagCloseAttr&#xA;&#x9;&#x9;inElementList.append(holdString);&#xA;&#x9;}&#xA;&#xA;&#x9;return inElementList;&#xA;  }&#xA;&#xA;  private List getUnitImpediments (Unit inUnit){&#xA;&#xA;    ServicesManager serviceManager = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;    List unitImpediments = serviceManager.getImpedimentsForEntity(inUnit);&#xA;    return unitImpediments;&#xA;  }&#xA;&#xA;  private String formatDate(Date inDate) {&#xA;    SimpleDateFormat yyyyMMdd = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;    SimpleDateFormat hhmmss = new SimpleDateFormat(&quot;HH:mm:ss.SSS&quot;);&#xA;    String sDate = yyyyMMdd.format(inDate) + &quot;T&quot; + hhmmss.format(inDate);&#xA;    return sDate&#xA;  }&#xA;&#xA;  private String formatRdsDate(Date inDate) {&#xA;    SimpleDateFormat yyyyMMdd = new SimpleDateFormat(&quot;MM/dd/yyyy&quot;);&#xA;    SimpleDateFormat hhmmss = new SimpleDateFormat(&quot;HH:mm:ss&quot;);&#xA;    String rdsDate = yyyyMMdd.format(inDate) + &quot; &quot; + hhmmss.format(inDate);&#xA;    return rdsDate&#xA;  }&#xA;&#xA;public String findCarrierVisitMode (CarrierVisit inCv){&#xA;&#xA;    final LocTypeEnum carrierMode = inCv.getCvCarrierMode();&#xA;    if (carrierMode.equals(LocTypeEnum.VESSEL)){&#xA;      return &quot;VESSEL&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.TRUCK)){&#xA;      return &quot;TRUCK&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.TRAIN)){&#xA;      return &quot;TRAIN&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.YARD)){&#xA;      return &quot;YARD&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.RAILCAR)){&#xA;      return &quot;TRAIN&quot;;&#xA;    }&#xA;&#x9;else{&#xA;      return &quot;UNKNOWN&quot;;&#xA;    }&#xA;  }&#xA;&#xA;  public String findEquipmentMaterial(Equipment inEq){&#xA;&#xA;    String material=&quot;&quot;;&#xA;    if ((EquipMaterialEnum.ALUMINUM.equals(inEq.getEqMaterial()))){&#xA;      material = XML_OVERRIDE+&quot;ALUMINUM&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((EquipMaterialEnum.STEEL.equals(inEq.getEqMaterial()))){&#xA;      material = XML_OVERRIDE+&quot;STEEL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((EquipMaterialEnum.UNKNOWN.equals(inEq.getEqMaterial()))){&#xA;      material = XML_OVERRIDE+&quot;UNKNOWN&quot;+XML_OVERRIDE;&#xA;    }&#xA;    return material;&#xA;  }&#xA;&#xA;  public String findUnitNbr(Unit inUnit){&#xA;&#xA;    Equipment eq = inUnit.getPrimaryEq();&#xA;    String  equipId = eq.getEqIdFull();&#xA;    equipId = XML_OVERRIDE+equipId+XML_OVERRIDE;&#xA;    return equipId;&#xA;   }&#xA;&#xA;  public String findUnitCategory(Unit inUnit){&#xA;&#xA;    String category=&quot;&quot;;&#xA;    if ((UnitCategoryEnum.EXPORT.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;EXPORT&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((UnitCategoryEnum.IMPORT.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;IMPORT&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((UnitCategoryEnum.THROUGH.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;THROUGH&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((UnitCategoryEnum.TRANSSHIP.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;TRANSSHIP&quot;+XML_OVERRIDE;&#xA;    }&#xA;&#xA;&#x9;if (category == &quot;&quot;)&#xA;&#x9;{&#xA;&#x9;&#x9;def categoryOther = inUnit.getUnitCategory();&#xA;&#x9;&#x9;categoryOther = categoryOther != null ? categoryOther.getKey() : &quot;&quot;&#xA;&#x9;&#x9;categoryOther = categoryOther == &quot;STRGE&quot; ? &quot;STORAGE&quot; : &quot;&quot;&#xA;&#x9;&#x9;category = XML_OVERRIDE+categoryOther+XML_OVERRIDE;&#xA;&#x9;}&#xA;&#xA;    return category;&#xA;  }&#xA;&#xA;  public String findUnitFreightKind(Unit inUnit){&#xA;&#xA;    String freightKind=&quot;&quot;;&#xA;    if ((FreightKindEnum.MTY.equals(inUnit.getUnitFreightKind()))){&#xA;      freightKind = XML_OVERRIDE+&quot;MTY&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((FreightKindEnum.LCL.equals(inUnit.getUnitFreightKind()))){&#xA;      freightKind = XML_OVERRIDE+&quot;LCL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((FreightKindEnum.FCL.equals(inUnit.getUnitFreightKind()))){&#xA;      freightKind = XML_OVERRIDE+&quot;FCL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    return freightKind;&#xA;  }&#xA;&#xA;&#x9;public String getTimeFormat(String inDate)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;String outDate = null;&#xA;&#x9;&#x9;DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#xA;&#x9;&#x9;if (inDate != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Date date = new SimpleDateFormat(&quot;EEE MMM dd hh:mm:ss zzz yyyy&quot;, Locale.ENGLISH).parse(inDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outDate = df.format(date);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;catch (de)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Date date = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;, Locale.ENGLISH).parse(inDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outDate = df.format(date);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;outDate = outDate + &quot;T00:00:00.000&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;return outDate;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;public StringBuffer getUfvDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;&#x9;def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;&#x9;&#x9;&#x9;def ufv = inUnit.getUfvForFacilityCompletedOnly(fcy);&#xA;&#x9;&#x9;&#x9;DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;if (ufv != null){&#xA;&#x9;&#x9;&#x9;&#x9;String addTag = &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate1 = ufv.getFieldValue(&quot;ufvFlexDate01&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate2 = ufv.getFieldValue(&quot;ufvFlexDate02&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate3 = ufv.getFieldValue(&quot;ufvFlexDate03&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate4 = ufv.getFieldValue(&quot;ufvFlexDate04&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate5 = ufv.getFieldValue(&quot;ufvFlexDate05&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate6 = ufv.getFieldValue(&quot;ufvFlexDate06&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate7 = ufv.getFieldValue(&quot;ufvFlexDate07&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate8 = ufv.getFieldValue(&quot;ufvFlexDate08&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexString1 = ufv.getFieldValue(&quot;ufvFlexString1&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString1&quot;)) : null;&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexString2 = ufv.getFieldValue(&quot;ufvFlexString2&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString2&quot;)) : null;&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexString3 = ufv.getFieldValue(&quot;ufvFlexString3&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString3&quot;)) : null;&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexString4 = ufv.getFieldValue(&quot;ufvFlexString4&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString4&quot;)) : null;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String date1Attr = &quot; ufv-flex-date-1=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String date2Attr = &quot; ufv-flex-date-2=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String date3Attr = &quot; ufv-flex-date-3=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String date4Attr = &quot; ufv-flex-date-4=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String date5Attr = &quot; ufv-flex-date-5=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String date6Attr = &quot; ufv-flex-date-6=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String date7Attr = &quot; ufv-flex-date-7=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String date8Attr = &quot; ufv-flex-date-8=&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String string1Attr = &quot; uvf-flex-1=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String string2Attr = &quot; uvf-flex-2=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String string3Attr = &quot; uvf-flex-3=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String string4Attr = &quot; uvf-flex-4=&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String string1Value = XML_OVERRIDE+ufvflexString1+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;String string2Value = XML_OVERRIDE+ufvflexString2+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;String string3Value = XML_OVERRIDE+ufvflexString3+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;String string4Value = XML_OVERRIDE+ufvflexString4+XML_OVERRIDE;&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String ufvFlexOpenAttr = &quot;&lt;ufv-flex&quot;&#xA;&#x9;&#x9;&#x9;&#x9;String ufvFlexString = ufvFlexOpenAttr;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate8 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate8 = this.getTimeFormat(ufvflexdate8)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date8Value = XML_OVERRIDE+ufvflexdate8+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date8Attr+date8Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate7 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate7 = this.getTimeFormat(ufvflexdate7)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date7Value = XML_OVERRIDE+ufvflexdate7+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date7Attr+date7Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate6 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate6 = this.getTimeFormat(ufvflexdate6)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date6Value = XML_OVERRIDE+ufvflexdate6+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date6Attr+date6Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate5 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate5 = this.getTimeFormat(ufvflexdate5)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date5Value = XML_OVERRIDE+ufvflexdate5+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date5Attr+date5Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate4 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate4 = this.getTimeFormat(ufvflexdate4)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date4Value = XML_OVERRIDE+ufvflexdate4+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date4Attr+date4Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate3 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate3 = this.getTimeFormat(ufvflexdate3)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date3Value = XML_OVERRIDE+ufvflexdate3+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date3Attr+date3Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate2 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate2 = this.getTimeFormat(ufvflexdate2)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date2Value = XML_OVERRIDE+ufvflexdate2+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date2Attr+date2Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate1 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate1 = this.getTimeFormat(ufvflexdate1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date1Value = XML_OVERRIDE+ufvflexdate1+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date1Attr+date1Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexString1 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = this.removeDoubleQuotes(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string1Attr+string1Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexString2 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string2Attr+string2Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexString3 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string3Attr+string3Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexString4 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string4Attr+string4Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = this.stripInvalidXmlCharacters(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (addTag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//fvFlexString = this.stripInvalidXmlCharacters(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = this.ModifyEscapeChar(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;inElementList.append(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return inElementList;&#xA;&#x9;&#x9;  }&#xA;&#xA;&#x9;public StringBuffer getUnitFlexDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;&#x9;String  unitflexString1 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString2 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString3 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String  unitflexString4 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString5 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString6 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String  unitflexString7 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString8 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString9 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString10 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString12 = &quot;&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;unitflexString1 = inUnit.getFieldValue(&quot;unitFlexString01&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString01&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString2 = inUnit.getFieldValue(&quot;unitFlexString02&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString02&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString3 = inUnit.getFieldValue(&quot;unitFlexString03&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString03&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString4 = inUnit.getFieldValue(&quot;unitFlexString04&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString04&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString5 = inUnit.getFieldValue(&quot;unitFlexString05&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString05&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString6 = inUnit.getFieldValue(&quot;unitFlexString06&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString06&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString7 = inUnit.getFieldValue(&quot;unitFlexString07&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString07&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString8 = inUnit.getFieldValue(&quot;unitFlexString08&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString08&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString9 = inUnit.getFieldValue(&quot;unitFlexString09&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString09&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString10 = inUnit.getFieldValue(&quot;unitFlexString10&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString10&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString12 = inUnit.getFieldValue(&quot;unitFlexString12&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString12&quot;)): null;&#xA;&#xA;&#x9;&#x9;&#x9;String unitFlexOpenAttr = &quot;&lt;unit-flex&quot;&#xA;&#x9;&#x9;&#x9;String string1Attr = &quot; unit-flex-1=&quot;;&#xA;&#x9;&#x9;&#x9;String string2Attr = &quot; unit-flex-2=&quot;;&#xA;&#x9;&#x9;&#x9;String string3Attr = &quot; unit-flex-3=&quot;;&#xA;&#x9;&#x9;&#x9;String string4Attr = &quot; unit-flex-4=&quot;;&#xA;&#x9;&#x9;&#x9;String string5Attr = &quot; unit-flex-5=&quot;;&#xA;&#x9;&#x9;&#x9;String string6Attr = &quot; unit-flex-6=&quot;;&#xA;&#x9;&#x9;&#x9;String string7Attr = &quot; unit-flex-7=&quot;;&#xA;&#x9;&#x9;&#x9;String string8Attr = &quot; unit-flex-8=&quot;;&#xA;&#x9;&#x9;&#x9;String string9Attr = &quot; unit-flex-9=&quot;;&#xA;&#x9;&#x9;&#x9;String string10Attr = &quot; unit-flex-10=&quot;;&#xA;&#x9;&#x9;&#x9;String string12Attr = &quot; unit-flex-12=&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;String string1Value = XML_OVERRIDE+unitflexString1+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string2Value = XML_OVERRIDE+unitflexString2+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string3Value = XML_OVERRIDE+unitflexString3+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string4Value = XML_OVERRIDE+unitflexString4+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string5Value = XML_OVERRIDE+unitflexString5+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string6Value = XML_OVERRIDE+unitflexString6+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string7Value = XML_OVERRIDE+unitflexString7+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string8Value = XML_OVERRIDE+unitflexString8+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string9Value = XML_OVERRIDE+unitflexString9+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string10Value = XML_OVERRIDE+unitflexString10+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string12Value = XML_OVERRIDE+unitflexString12+XML_OVERRIDE;&#xA;&#x9;try {&#xA;&#xA;&#x9;&#x9;&#x9;//unitflexString6 = &quot;\&quot;MCMILLON, STEVEN &amp; P\&quot;&quot;;&#xA;&#x9;&#x9;&#x9;//unitflexString6 = removeDoubleQuotes(unitflexString6);&#xA;&#x9;&#x9;&#x9;//string6Value = XML_OVERRIDE+unitflexString6+XML_OVERRIDE;&#xA;&#xA;&#x9;&#x9;&#x9;String unitFlexString = unitFlexOpenAttr;&#xA;&#xA;&#x9;&#x9;&#x9;if (unitflexString12 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string12Attr+string12Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString10 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string10Attr+string10Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString9 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string9Attr+string9Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (unitflexString8 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string8Attr+string8Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString7 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string7Attr+string7Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;//LOGGER.warn(&quot;unitflexString6::::::&quot; + unitflexString6);&#xA;&#x9;&#x9;&#x9;if (unitflexString6 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string6Attr+string6Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString5 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string5Attr+string5Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString4 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string4Attr+string4Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString3 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string3Attr+string3Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString2 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string2Attr+string2Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString1 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string1Attr+string1Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (unitflexString1 != null || unitflexString2 != null || unitflexString3 != null || unitflexString4 != null || unitflexString5 != null || unitflexString6 != null&#xA;&#x9;&#x9;&#x9;&#x9;|| unitflexString7 != null || unitflexString8 != null || unitflexString9 != null || unitflexString10 != null || unitflexString12 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;//unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.ModifyEscapeChar(unitFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;catch (e){&#xA;&#xA;&#x9;LOGGER.warn(&quot;unitFlexString Error ::::::&quot; + e);&#xA;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;public StringBuffer geTimeStamp(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;{&#xA;&#xA;&#x9;&#x9;def ufv = inUnit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;if (ufv !=null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;String timeIn = ufv.ufvTimeIn;&#xA;&#x9;&#x9;&#x9;String timeOut = ufv.ufvTimeOut;&#xA;&#x9;&#x9;&#x9;String timeLoad = ufv.ufvTimeOfLoading;&#xA;&#xA;&#x9;&#x9;    String timeStampAttrOpn = &quot;&lt;timestamps&quot;;&#xA;&#x9;&#x9;&#x9;String timeStampString = timeStampAttrOpn;&#xA;&#x9;&#x9;&#x9;if (timeIn !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + &quot; time-in=&quot; + XML_OVERRIDE + timeIn + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (timeOut !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + &quot; time-out=&quot; + XML_OVERRIDE + timeOut + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (timeLoad !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + &quot; time-load=&quot; + XML_OVERRIDE + timeLoad + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (timeIn != null || timeOut != null || timeLoad != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(timeStampString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;&#xA;public String stripInvalidXmlCharacters(String input){&#xA;    String specialCharacter = &quot;&amp;&quot;;&#xA;    try {&#xA;    if (input.contains(specialCharacter)) {&#xA;       input = input.replaceAll(&quot;&amp;&quot;, &quot;&amp;amp;&quot;);&#xA;       //LOGGER.warn(&quot;sb:&quot; + input);&#xA;    }&#xA;&#xA;&#x9;if (input.contains(&quot;null&quot;)) {&#xA;       input = input.replaceAll(&quot;null&quot;, &quot; &quot;);&#xA;       //LOGGER.warn(&quot;sb:&quot; + input);&#xA;    }&#xA;    }&#xA;    catch (e){&#xA;&#xA;    }&#xA;    return input;&#xA;  }&#xA;&#xA; public String removeDoubleQuotes(String input){&#xA;    String specialCharacter = &quot;&amp;&quot;;&#xA;    try {&#xA;    if (input.contains(&quot;\&quot;&quot;)) {&#xA;       input = input.replaceAll(&quot;\&quot;&quot;, &quot;#quot;&quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;&lt;&quot;)) {&#xA;       input = input.replaceAll(&quot;&lt;&quot;, &quot;#lt;&quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;&gt;&quot;)) {&#xA;       input = input.replaceAll(&quot;&gt;&quot;, &quot;#gt;&quot;);&#xA;    }&#xA;    }&#xA;    catch (e){&#xA;&#xA;    }&#xA;    return input;&#xA;  }&#xA;&#xA; public String ModifyEscapeChar(String input){&#xA;    try {&#xA;    if (input.contains(&quot;#quot&quot;)) {&#xA;       input = input.replaceAll(&quot;#quot;&quot;, &quot;&amp;quot;&quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;#lt&quot;)) {&#xA;       input = input.replaceAll(&quot;#lt;&quot;, &quot;&amp;lt;&quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;#gt&quot;)) {&#xA;       input = input.replaceAll(&quot;#gt;&quot;, &quot;&amp;gt;&quot;);&#xA;    }&#xA;    }&#xA;    catch (e){&#xA;&#xA;    }&#xA;    return input;&#xA;  }&#xA;&#xA;&#x9;&#x9;private static final Logger LOGGER = Logger.getLogger(MATBargeDepartUnits.class);&#xA;&#x9;}" />
<digital-asset id="MatGetAccesory" short-description="MatGetAccesory" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.api.UnitField&#xA;&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 09/19/2012&#xA;* Description: This groovy is used to generate the Stowplan/Manifest Discrepancies after Stowplan and Manifest process&#xA;*/&#xA;&#xA;public class MatGetAccesory extends GroovyInjectionBase&#xA;&#x9;{&#xA;&#x9;&#x9;def inj = new GroovyInjectionBase();&#xA;&#xA;&#x9;public String getUnitAccesorry(String containerId)&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Inside getUnitAccesorry&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;String accessory;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID,containerId));&#xA;&#x9;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_TRANSIT_STATE,UfvTransitStateEnum.S40_YARD))&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;getUnit &quot;+dq);&#xA;&#x9;&#x9;&#x9;&#x9;def unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;After unitList&quot;+unitList.size());&#xA;&#x9;&#x9;&#x9;&#x9;if (unitList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def trucker = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def consignee = unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;accessory = unit.getUnitAcryEquipIds();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;accessory---&gt;&quot;+accessory);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def acryObj = unit.getUnitCtrAccessory();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;acryObj---&gt;&quot;+acryObj);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;return accessory;&#xA;&#x9;&#x9;}catch (Exception e){&#xA;&#x9;&#x9;&#x9;println(&quot;Error :&quot; + e);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&#xA;" />
<digital-asset id="GvyHonNisAgingNonAutoReport" short-description="GvyHonNisAgingNonAutoReport" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;import java.util.Date&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.road.business.model.*;&#xA;import java.util.Calendar;&#xA;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.inventory.business.units.GoodsBase;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.model.LocPosition;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;import org.apache.log4j.Logger;&#xA;&#xA;import com.navis.argo.business.atoms.LocTypeEnum;&#xA;&#xA;public class GvyHonNisAgingNonAutoReport extends GroovyInjectionBase&#xA;{&#x9;&#xA;&#x9;    private static Logger LOGGER = Logger.getLogger(GvyHonNisAgingNonAutoReport.class);&#xA;&#xA;&#x9;&#x9;private final String  emailFrom = '1aktosdevteam@matson.com';&#xA;&#x9;&#x9;private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;//private final String emailTo = &quot;1aktosdevteam@matson.com&quot;; &#xA;&#x9;&#x9;&#xA;&#x9;&#x9;def inj = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public boolean execute(Map params)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;LOGGER.info(&quot;Inside GvyHonNisAgingNonAutoReport&quot;);&#xA;&#x9;&#x9;    try{&#xA;&#x9;&#x9;&#x9;&#x9;inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;&#x9;&#x9;ArrayList unitList = null;&#xA;&#x9;&#x9;&#x9;&#x9;unitList = getUnits()&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;unitListMap size()&quot;+unitList.size());&#xA;&#x9;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;Boolean isDayLightSaving = false;&#xA;&#x9;&#x9;&#x9;&#x9;int offset = 0;&#xA;&#x9;&#x9;&#x9;&#x9;Calendar pstCal = Calendar.getInstance();&#xA;&#x9;&#x9;&#x9;&#x9;Date pstDate = pstCal.getTime();&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Date hstDate = null;&#xA;&#x9;&#x9;&#x9;&#x9;isDayLightSaving = pstCal.getTimeZone().inDaylightTime(pstDate);&#xA;&#x9;&#x9;&#x9;&#x9;offset = isDayLightSaving?-3:-2;&#xA;&#x9;&#x9;&#x9;&#x9;pstCal.add(Calendar.HOUR, offset);&#xA;&#x9;&#x9;&#x9;&#x9;hstDate = pstCal.getTime();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;parameters.put(&quot;Date&quot;,hstDate);&#xA;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report &#xA;&#x9;&#x9;&#x9;&#x9;//LOGGER.info(&quot;BEFORE CREATING JRDATASOURCE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;JRDataSource ds = new JRMapCollectionDataSource(unitList);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;HashMap reportDesignsmap = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;HON/NIS AGING NON AUTO CONTAINERS DETAIL REPORT&quot;,ds);&#xA;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReports(reportDesignsmap,parameters, emailTo, &quot;HON/NIS AGING NON AUTO CONTAINERS DETAIL REPORT&quot; ,&quot;Attached report for HON/NIS AGING NONAUTO CONTAINERS DETAIL&quot;);&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9; }&#xA;&#x9;&#xA;public List getUnits() &#xA;{&#xA;&#x9;&#x9;&#xA;&#x9;Date inTime =new Date()-10;&#xA;&#x9;MetafieldId UFV_CMDTY_ID = MetafieldIdFactory.getCompoundMetafieldId(UnitField.UFV_UNIT,UnitField.UNIT_CMDY_ID);&#xA;&#x9;&#xA;&#x9;MetafieldId UFV_GDS_CONSIGNEE_NAME = MetafieldIdFactory.getCompoundMetafieldId(UnitField.UFV_GOODS, UnitField.GDS_CONSIGNEE_NAME);&#xA;&#xA;&#x9;try {&#xA;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;ArrayList groundedUnits = new ArrayList();&#xA;&#x9;&#x9;ArrayList wheeledUnits = new ArrayList();&#xA;&#x9;&#x9;ArrayList combinedList = new ArrayList();&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;    // .addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID, &quot;MATU2276713&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UFV_CATEGORY,&quot;IMPRT&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.in(UnitField.UFV_TRANSIT_STATE,&quot;S40_YARD&quot;,&quot;S30_ECIN&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UFV_FREIGHT_KIND,&quot;FCL&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(UnitField.UFV_GDS_DESTINATION,&quot;OPT&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.ne(UnitField.UFV_CMDTY,&quot;AUTO&quot;))&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.ne(UnitField.UFV_CMDTY,&quot;AUTOCON&quot;))&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.ne(UnitField.UFV_CMDTY,&quot;AUTOCY&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.le(UnitField.UFV_TIME_IN,inTime))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqOrdering(Ordering.asc(UnitField.UFV_PRIMARY_EQTYPE_ID))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqOrdering(Ordering.asc(UFV_GDS_CONSIGNEE_NAME))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqOrdering(Ordering.desc(UnitField.UFV_TIME_IN));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;    &#xA;&#xA;&#x9;&#x9;&#x9;LOGGER.info(&quot;DomainQuery ::::&quot;+dq.toHqlSelectString(&quot;alias&quot;));&#xA;&#x9;&#x9;&#x9;            &#x9;&#xA;&#xA;&#x9;&#x9;&#x9;//println(&quot;DomainQuery :::: &quot;+ dq);&#xA;&#x9;&#x9;&#x9;def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;if (ufvList !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.info(&quot;After unitList size is &quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;}else {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.info(&quot;0 records returned from domain query&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LocPosition localLocPosition = unit.findCurrentPosition();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def slot = localLocPosition.getPosSlot();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def locType = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def cmdyId = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(unit.getFieldValue(&quot;unitId&quot;)+&quot;====&quot;+unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)+&quot;====&quot;+unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String PositionLocType = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(LocTypeEnum.YARD.equals(locType)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PositionLocType = &quot;Y&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;    }else if(LocTypeEnum.VESSEL.equals(locType)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PositionLocType = &quot;V&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;    }&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ('AUTO'.equalsIgnoreCase(cmdyId) || 'AUTOCON'.equalsIgnoreCase(cmdyId) || 'AUTOCY'.equalsIgnoreCase(cmdyId))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;continue;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String eqType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;eqType before trimmimg ----&quot;+eqType);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (eqType!=null &amp; eqType.size()&gt;=3)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;eqType = eqType.substring(0,3);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;eqType-----&quot;+eqType);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (slot!=null &amp;&amp; ( slot.startsWith('V') || slot.startsWith('S') || slot.startsWith('O') || slot == 'GRD' ) ){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Map unitMap = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;Grounded Unit Id  : &quot;+unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;Position :&quot; +localLocPosition);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;Position Slot :&quot; +slot);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitMap.put(&quot;DwellDays&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvDwellDays&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitMap.put(&quot;UnitNbr&quot;,unit.getFieldValue(&quot;unitId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitMap.put(&quot;PositionLocType&quot;,PositionLocType);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitMap.put(&quot;PositionSlot&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitMap.put(&quot;InTime&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvTimeIn&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitMap.put(&quot;EquipmentType&quot;,unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitMap.put(&quot;GoodsConsigneeName&quot;,unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitMap.put(&quot;UnitFlexString01&quot;,&quot;Grounded&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitMap.put(&quot;typeUpto3Chars&quot;,eqType);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;groundedUnits.add(unitMap);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}else{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Map unitMap = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;Wheeled Unit Id  : &quot;+unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;Position :&quot; +localLocPosition);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;Position SLot :&quot; +slot);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitMap.put(&quot;DwellDays&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvDwellDays&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitMap.put(&quot;UnitNbr&quot;,unit.getFieldValue(&quot;unitId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitMap.put(&quot;PositionLocType&quot;,PositionLocType);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitMap.put(&quot;PositionSlot&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitMap.put(&quot;InTime&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvTimeIn&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitMap.put(&quot;EquipmentType&quot;,unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitMap.put(&quot;GoodsConsigneeName&quot;,unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitMap.put(&quot;UnitFlexString01&quot;,&quot;Wheeled&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unitMap.put(&quot;typeUpto3Chars&quot;,eqType);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;wheeledUnits.add(unitMap);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;  }&#xA;&#x9;&#x9;//&#x9;println(&quot;Grounded Size :&quot; + groundedUnits.size);&#xA;&#x9;&#x9;//&#x9;println(&quot;Wheeled Size :&quot; + wheeledUnits.size);&#xA;&#xA;&#x9;&#x9;&#x9;//adding to one single list&#xA;&#xA;&#x9;&#x9;&#x9;for (int i=0;i&lt;groundedUnits.size();i++)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//&#x9;println(&quot;Inside grounded&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;Map extractMap = (HashMap)groundedUnits.get(i);&#xA;&#x9;&#x9;&#x9;&#x9;//println(&quot;extractMap----&quot;+extractMap.toString());&#xA;&#x9;&#x9;&#x9;&#x9;combinedList.add(extractMap);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;//println(&quot;combinedList size -1  :&quot; + combinedList.size);&#xA;&#x9;&#x9;&#x9;for (int j=0;j&lt;wheeledUnits.size();j++  )&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//&#x9;println(&quot;Inside wheeled&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;Map extractMap = (HashMap)wheeledUnits.get(j);&#xA;&#x9;&#x9;&#x9;&#x9;//println(&quot;extractMap----&quot;+extractMap.toString());&#xA;&#x9;&#x9;&#x9;&#x9;combinedList.add(extractMap);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;//&#x9;println(&quot;combinedList size - 2  :&quot; + combinedList.size);&#xA;&#x9;&#x9;&#x9;//println(&quot;combinedList Size :&quot; + combinedList.size);&#xA;&#x9;&#x9;&#x9;return combinedList;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;&#x9;" />
<digital-asset id="MATActivateAdvisedSIT" short-description="MATActivateAdvisedSIT" is-pre-deployed="N" groovy-code="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;import groovy.time.TimeCategory&#xA;&#xA;import java.util.Date;&#xA;import java.text.*;&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.inventory.business.api.RectifyParms&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;&#xA;/**&#xA; * This groovy sets UFVs that are advised imports to active in N4.&#xA; *&#xA; * This will make them visible in XPS.&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 06/05/15&#xA; * JIRA: ARGO-75773&#xA; * SFDC: 141015&#xA; *&#xA; * Date: 06/08/15&#xA; *&#xA; * Correct the timing check.&#xA; *&#xA; * Test to be sure no other UFVs for this same unit are visible in SPARCS&#xA; */&#xA;&#xA;public class MATActivateAdvisedSIT extends GroovyApi&#xA;{&#xA;&#xA;    public void execute(Map parameters)&#xA;    {&#xA;&#xA;        /* find the UFVs to fix */&#xA;&#xA;        List&lt;UnitFacilityVisit&gt; UFVs_to_fix = this.findUFVsAdvised();&#xA;&#xA;        for (UnitFacilityVisit UFV_to_fix : UFVs_to_fix)&#xA;        {&#xA;&#xA;            this.log (&quot;Processing for UFV: &quot; + UFV_to_fix);&#xA;            this.log(&quot;UFV created &quot; + UFV_to_fix.getUfvCreateTime());&#xA;&#xA;            /* check if the unit to be fixed is an import */&#xA;&#xA;            if  (UFV_to_fix.getUfvUnit().getLocType() == LocTypeEnum.TRUCK)&#xA;            {&#xA;&#xA;                /* find other UFV for this same unit.  Make sure it is not visible in SPARCS */&#xA;&#xA;                Set&lt;UnitFacilityVisit&gt; UFV_to_fix_other_UFVs = UFV_to_fix.getUfvUnit().getUnitUfvSet();&#xA;&#xA;                Boolean Other_UFVs_visible = Boolean.FALSE;&#xA;&#xA;                for (UnitFacilityVisit UFV_to_fix_other_UFV : UFV_to_fix_other_UFVs)&#xA;                {&#xA;                    if (UFV_to_fix_other_UFV.getUfvVisibleInSparcs())&#xA;                    {&#xA;                        Other_UFVs_visible = Boolean.TRUE;&#xA;                    }&#xA;                }&#xA;&#xA;                /* only attempt the update if no other UFVS for the same unit are visible in SPARCS */&#xA;&#xA;                if (Other_UFVs_visible)&#xA;                {&#xA;                    this.log (&quot;Other UNFs are visible for this unit.  Not safe to activate &quot; + UFV_to_fix.getUfvUnit());&#xA;                }&#xA;                else&#xA;                {&#xA;                    try&#xA;                    {&#xA;&#xA;                        this.log(&quot;process UFV &quot; + UFV_to_fix);&#xA;&#xA;                        /* use rectify function to set UFV to 'inbound' 'active' */&#xA;&#xA;                        RectifyParms thisRectifyParm = new RectifyParms();&#xA;                        thisRectifyParm.setUfvTransitState(UfvTransitStateEnum.S20_INBOUND);&#xA;                        thisRectifyParm.setUnitVisitState(UnitVisitStateEnum.ACTIVE);&#xA;&#xA;                        UFV_to_fix.rectify(thisRectifyParm);&#xA;&#xA;                        /* UFV_to_fix.makeActive(); */&#xA;                    } catch (Exception e)&#xA;                    {&#xA;                        this.log(&quot;MATActivateAdvisedSIT exception &quot; + e.getMessage() + &quot; when activating UFV &quot; + UFV_to_fix);&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    /* local function to find advised unitfaclity visits less that 5 minutes old */&#xA;&#xA;    private List&lt;UnitFacilityVisit&gt; findUFVsAdvised()&#xA;    {&#xA;&#xA;        /* get the current time */&#xA;&#xA;        Date timeNow = ArgoUtils.timeNow();&#xA;&#xA;        Date Five_minutes_ago;&#xA;&#xA;        use(TimeCategory)&#xA;                {&#xA;                    Five_minutes_ago = timeNow - 5.minutes;&#xA;                }&#xA;&#xA;        /* put a delay in so that there is no chance this happens at the same time the gate transaction */&#xA;&#xA;        this.log (&quot;time now &quot; + timeNow)&#xA;        this.log (&quot;Five_minutes_ago &quot; + Five_minutes_ago)&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT_FACILITY_VISIT)&#xA;                .addDqPredicate(PredicateFactory.eq(InventoryField.UFV_TRANSIT_STATE, UfvTransitStateEnum.S10_ADVISED))&#xA;                .addDqPredicate(PredicateFactory.le(InventoryField.UFV_CREATE_TIME, Five_minutes_ago));&#xA;&#xA;        List&lt;UnitFacilityVisit&gt; UFVList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#xA;        this.log (&quot;UFVList &quot; + UFVList)&#xA;&#xA;        return UFVList;&#xA;    }&#xA;}" />
<digital-asset id="GvyCmisEventSIT" short-description="GvyCmisEventSIT" is-pre-deployed="N" groovy-code="/*&#xA;* Srno  date       doer  change&#xA;* A1    12/117/11  GR    Added Method for YB-SIT&#xA;* A2    01/10/12   GR    UNIT_REROUTE YB assing and unassign fior NIS MNC&#xA;* A3    01/11/12   GR    Added Function ybUnAssignTrucker for SIT&#xA;* A4    01/11/12   GR    Rolling Trucker on UNIT RECIEVE setDesignatedTrucker&#xA;* A5    01/12/12   GR    Handled NullPointer Exception&#xA;* A6    01/12/12   GR    check the YB_UNASSIGN on YB to YB moves&#xA;* A7    01/12/12   GR    Imported Trucking Cmpy&#xA;* A8    01/12/12   GR    Updt Truck field&#xA;* A9    02/02/12   GR    YB NIS - ybNisDetentionProc&#xA;* A10   02/02/12   GR    YB NIS - ybNisTrucker&#xA;* A11   02/02/12   GR    NIZ action posting&#xA;* A12   02/17/12   GR    Updt Field ufvFlexString07 to unitFlexString07&#xA;* A13   03/07/12   GR    Updt Email Method&#xA;* A14   03/12/12   GR    Unit list cehck before sending out email&#xA;* A15   03/12/12   GR    HIL KHI port change&#xA;* A16   03/21/12   GR    Commented out the Departed Check for ALL vesvoys&#xA;* A17   03/21/12   GR    Added Additional Date Parameter&#xA;* A18   03/22/12   GR    Auto Set Truckers&#xA;* A19   03/22/12   GR    Fixed NIT for Long haul&#xA;* A20   03/22/12   GR    Query change for POD (HIL,KHI)&#xA;* A21   06/15/12   KM    Don't send &quot;Ready for Trucker Coding&quot; notification for YB barges&#xA;* A22   09/12/12   LC    Added yb_unassign check for DEST field change and yb_assign check for Obcarrier field change&#xA;* A23   09/24/2014 RP    Posting trucker update to GEMS when NIS_TRUCKER_ASSIGN event &#xA;* A24   07/09/15   KR    Alaska Ports&#xA;*/&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.atoms.CarrierVisitPhaseEnum&#xA;import com.navis.argo.business.reference.Commodity&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.road.business.model.TruckingCompany&#xA;import com.navis.services.business.event.GroovyEvent&#xA;&#xA;public class GvyCmisEventSIT extends GroovyInjectionBase {&#xA;&#xA;    def ACTION = &quot;action='null'&quot;&#xA;    def LAST_ACTION = &quot;lastAction='null'&quot;&#xA;    def errorEmail = &quot;1aktosdevteam@matson.com&quot;;&#xA;    def supportEmail = &quot;1aktosdevteam@matson.com&quot;;&#xA;    def gvyEventUtil = null;&#xA;&#xA;    public String lookupCommodity(String id) {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(&quot;Commodity&quot;).addDqPredicate(PredicateFactory.eq(com.navis.argo.ArgoRefField.CMDY_GKEY, id));&#xA;        Commodity c = (Commodity) HibernateApi.getInstance().getUniqueEntityByDomainQuery(dq);&#xA;        if (c == null) {&#xA;            return &quot;&quot;;&#xA;        }&#xA;        return c.getCmdyId();&#xA;&#xA;    }&#xA;&#xA;    //SIT_ASSIGN&#xA;    public String processSitAssign(String xmlGvyData, Object event, Object unit, String commodity, String drayStatus) {&#xA;        def xmlGvyString = xmlGvyData&#xA;        try {&#xA;            def destination = unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;)&#xA;            destination = destination != null ? destination : ''&#xA;&#xA;            GroovyInjectionBase gvybase = new GroovyInjectionBase()&#xA;            def appendObj = gvybase.getGroovyClassInstance(&quot;GvyEventSpecificFldValue&quot;);&#xA;            gvyEventUtil = gvybase.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;            def cmdyId = gvyEventUtil.getPreviousPropertyAsString(event, 'gdsCommodity')&#xA;            def preCommodity = lookupCommodity(cmdyId)&#xA;&#xA;            def preDrayStatus = gvyEventUtil.getPreviousPropertyAsString(event, 'unitDrayStatus')&#xA;            preDrayStatus = preDrayStatus != null ? preDrayStatus : ''&#xA;&#xA;            //ACTION&#xA;            if (preCommodity.equals(commodity) &amp;&amp; preDrayStatus.equals(drayStatus)) {&#xA;&#xA;                xmlGvyString = xmlGvyString.replace(LAST_ACTION, &quot;lastAction='EDT'&quot;);&#xA;                xmlGvyString = xmlGvyString.replace(ACTION, &quot;action='EDT'&quot;)&#xA;            }&#xA;&#xA;/*       //MISC1&#xA;def misc1 = appendObj.getFieldValues(xmlGvyString, &quot;misc1=&quot;);&#xA;&#xA;if(!misc1.equals('null')){&#xA;  xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;commodity=&quot;,misc1,null,null,null)&#xA;}else{&#xA;  xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString,&quot;commodity=&quot;,&quot;SIT&quot;,null,null,null)&#xA;}  */&#xA;            //DESTINATION&#xA;            if (!destination.equals(ContextHelper.getThreadFacility().getFcyId())) {&#xA;                xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString, &quot;misc3=&quot;, &quot;null&quot;, null, null, null)&#xA;            }&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return xmlGvyString;&#xA;    }&#xA;&#xA;    //MAP ACTION SIT_UNASSIGN&#xA;    public String processSitUnAssign(String xmlGvyData, Object appendObj) {&#xA;        def xmlGvyString = xmlGvyData&#xA;        xmlGvyString = appendObj.addEventSpecificFldValue(xmlGvyString, &quot;dsc=&quot;, null, null, null, null)&#xA;&#xA;        return xmlGvyString;&#xA;    }&#xA;&#xA;    //A1&#xA;    /**public void setYbDrayStaus(Object unit){try{def cmdyId = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;     def group= unit.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;);&#xA;     if(&quot;YB&quot;.equals(group) &amp;&amp; 'SAT'.equals(cmdyId)){unit.setFieldValue(&quot;unitDrayStatus&quot;,DrayStatusEnum.TRANSFER);}else if(&quot;YB&quot;.equals(group) &amp;&amp; 'SIT'.equals(cmdyId)){unit.setFieldValue(&quot;unitDrayStatus&quot;,DrayStatusEnum.OFFSITE);}}catch(Exception e){e.printStackTrace();}}*/&#xA;//Method Ends&#xA;&#xA;    /*public void ybSitProc(Object api, Object gvyCmisUtil,Object unit, String xmlGvyReceive)&#xA;    {&#xA;        try{&#xA;            if(unit.unitRouting.rtgGroup != null &amp;&amp; 'YB'.equals(unit.unitRouting.rtgGroup.grpId)){&#xA;                setYbDrayStaus(unit)&#xA;                setDesignatedTrucker(unit)&#xA;                def xmlGvyStr = gvyCmisUtil.eventSpecificFieldValue(xmlGvyReceive,&quot;ybBarge=&quot;,unit.unitActiveUfv.ufvIntendedObCv.cvId)&#xA;                xmlGvyStr = gvyCmisUtil.eventSpecificFieldValue(xmlGvyReceive,&quot;flex02=&quot;,unit.unitActiveUfv.ufvIntendedObCv.cvId)&#xA;                xmlGvyStr = gvyCmisUtil.eventSpecificFieldValue(xmlGvyStr,&quot;commodity=&quot;,&quot;YB&quot;)&#xA;                xmlGvyStr = gvyCmisUtil.eventSpecificFieldValue(xmlGvyStr,&quot;truck=&quot;,unit.getFieldValue(&quot;unitFlexString14&quot;))&#xA;                gvyCmisUtil.postMsgForAction(xmlGvyStr,api,'PDU')&#xA;            }&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;        }&#xA;    }*///Method Ends&#xA;&#xA;    public String ybSatProc(Object gvyCmisUtil, Object unit, String xmlGvyReceive) {&#xA;        def xmlGvyStr = xmlGvyReceive;&#xA;        try {&#xA;            def cmdyId = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;            if (unit.unitRouting.rtgGroup != null &amp;&amp; 'YB'.equals(unit.unitRouting.rtgGroup.grpId) &amp;&amp; 'SAT'.equals(cmdyId)) {&#xA;                xmlGvyStr = gvyCmisUtil.eventSpecificFieldValue(xmlGvyReceive, &quot;commodity=&quot;, &quot;SAT&quot;)&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;        return xmlGvyStr&#xA;    }//Method Ends&#xA;&#xA;    public void ybTruckerUnassign(Object unit) {&#xA;        try {&#xA;            if (unit.unitRouting.rtgGroup != null &amp;&amp; 'YB'.equals(unit.unitRouting.rtgGroup.grpId)) {&#xA;                def trckCmpy = unit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;                def ybTrucker = unit.getUnitFlexString14();&#xA;                if (trckCmpy != null &amp;&amp; trckCmpy.equals(ybTrucker)) {&#xA;                    unit.getUnitRouting().setRtgTruckingCompany(null);&#xA;                }&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;    }//Method Ends&#xA;&#xA;    //A2&#xA;    public void NISBargeAssign(Object event, Object unit, Object api) {&#xA;        try {&#xA;            def gvyEventUtil = api.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;            def doer = event.event.evntAppliedBy;&#xA;            com.navis.argo.ContextHelper.setThreadExternalUser(doer);&#xA;            def sendEvent = new GroovyEvent(null, unit);&#xA;            String groupId = unit.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;);&#xA;            def intCarrId = unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;);&#xA;            intCarrId = intCarrId != null ? intCarrId : &quot;&quot;;&#xA;            String yb_flag = &quot;YB&quot;;&#xA;&#xA;            /* YB_UNASSIGN triggered by UNIT_REROUTE based on Dest change&#xA;            */&#xA;            api.logWarn(&quot;NISBargeAssign::GroupId-&gt;&quot; + groupId);&#xA;            if (yb_flag.equalsIgnoreCase(groupId) &amp;&amp; ((gvyEventUtil.wasFieldChanged(event, &quot;ufvIntendedObCv&quot;) &amp;&amp; !intCarrId.startsWith('YB')) || gvyEventUtil.wasFieldChanged(event, &quot;gdsDestination&quot;))) {&#xA;                sendEvent.postNewEvent(&quot;YB_UNASSIGN&quot;, &quot;YB Barge Routing&quot;);&#xA;                api.logWarn(&quot;NISBargeAssign::YB_UNASSIGN&quot;);&#xA;            }&#xA;&#xA;            /* YB_ASSIGN triggered by UNIT_REROUTE based on Outbound Carrier Intended change&#xA;            */&#xA;            api.logWarn(&quot;NISBargeAssign::unitActiveUfv.ufvIntendedObCv.cvId-&gt;&quot; + intCarrId);&#xA;            if (intCarrId.startsWith('YB') &amp;&amp; gvyEventUtil.wasFieldChanged(event, &quot;ufvIntendedObCv&quot;)) {&#xA;                sendEvent.postNewEvent(&quot;YB_ASSIGN&quot;, &quot;YB Barge Routing&quot;);&#xA;                api.logWarn(&quot;NISBargeAssign::YB_ASSIGN&quot;);&#xA;            }&#xA;&#xA;        } catch (Exception e) {&#xA;            api.log(&quot;Exception in GvyCmisEventSIT.NISBargeAssign()&quot; + e);&#xA;        }&#xA;    }//Method Ends&#xA;&#xA;&#xA;    public void ybUnAssignTrucker(Object unit) {&#xA;        try {&#xA;            def designatedTrucker = unit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;            def ybTrucker = unit.getFieldValue(&quot;unitFlexString14&quot;)&#xA;            def cmdyId = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#xA;            if ('SIT'.equals(cmdyId) &amp;&amp; designatedTrucker != null &amp;&amp; !designatedTrucker.equals(ybTrucker)) {&#xA;                unit.setUnitFlexString14(null);&#xA;            } else if ('SIT'.equals(cmdyId) &amp;&amp; designatedTrucker != null &amp;&amp; designatedTrucker.equals(ybTrucker)) {&#xA;                unit.getUnitRouting().setRtgTruckingCompany(null);&#xA;                unit.setUnitFlexString14(null);&#xA;            } else {&#xA;                unit.getUnitRouting().setRtgTruckingCompany(null);&#xA;                unit.setUnitFlexString14(null);&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;    }//Method Ends&#xA;&#xA;    //A6 - Setting Designated Trucker for YB&#xA;    public void setDesignatedTrucker(Object unit) {&#xA;        try {&#xA;            def ybTrucker = unit.getFieldValue(&quot;unitFlexString14&quot;);&#xA;            if (ybTrucker != null) {&#xA;                def trkc = TruckingCompany.findTruckingCompany(ybTrucker)&#xA;                if (trkc != null) {&#xA;                    unit.getUnitRouting().setRtgTruckingCompany(trkc);&#xA;                }&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;&#xA;    public void ybNisTruckerProc(Object unit, Object gvyEventUtil, Object event) {&#xA;        try {&#xA;            def truck = unit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;            unit.setFieldValue(&quot;unitFlexString07&quot;, truck); //A12&#xA;&#xA;            def prevTruck = gvyEventUtil.getPreviousPropertyAsString(event, &quot;rtgTruckingCompany&quot;)&#xA;            if (prevTruck != null) {&#xA;                def trkc = TruckingCompany.load(prevTruck);&#xA;                if (trkc != null) {&#xA;                    unit.getUnitRouting().setRtgTruckingCompany(trkc);&#xA;                }&#xA;            } else {&#xA;                unit.getUnitRouting().setRtgTruckingCompany(null);&#xA;            }&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;&#xA;    }//Method Ends&#xA;&#xA;    public String setNisTruck(Object gvyCmisUtil, Object unit, String xmlGvyReceive) {&#xA;        def xmlGvyStr = xmlGvyReceive;&#xA;        try {&#xA;            xmlGvyStr = gvyCmisUtil.eventSpecificFieldValue(xmlGvyStr, &quot;truck=&quot;, unit.getFieldValue(&quot;unitFlexString07&quot;))&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;        return xmlGvyStr&#xA;    }//Method Ends&#xA;&#xA;&#xA;    private void NIZCompleteProc(Object event, Object api, Object beginDelivery, Object nextPortDelivery) {&#xA;        //Gems - &lt;GroovyMsg msgType='NIZ_COMPLETE'  action='NIZ'   aDate='08/26/2011' aTime='08:43:58' doer='tos' vesvoy='ALE134B'  dPort='HIL'/&gt;&#xA;        //MNS - &lt;new-vessel source-system=&quot;TOS&quot; vessel-voyage=&quot;ALE019&quot; port-code=&quot;KHI&quot; status=&quot;COMPLETE&quot;/&gt;&#xA;        def emailSender = api.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;        def unit = event.getEntity();&#xA;        def visitId = null; def vesClass = null;&#xA;        def fcy = null; def ufv = null; def isYBbarge = false; def nextFacility = null;&#xA;        def availDate = null;&#xA;&#xA;        try {&#xA;            fcy = ContextHelper.getThreadFacility();&#xA;            ufv = unit.getUfvForFacilityCompletedOnly(fcy); //If Departed get facility ufv&#xA;            if (ufv == null) {&#xA;                ufv = unit.unitActiveUfv; //Assign ufv from Facility Active unit&#xA;            }&#xA;&#xA;            if (event.event.eventTypeId.equals(&quot;NIS_CODING_COMPLETE_LH&quot;)) {&#xA;                visitId = ufv.getFieldValue(&quot;ufvActualIbCv.cvId&quot;)&#xA;                vesClass = ufv.getFieldValue(&quot;ufvActualIbCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;                vesClass = vesClass != null ? vesClass.getKey() : ''&#xA;            } else {&#xA;                visitId = ufv.getFieldValue(&quot;ufvActualObCv.cvId&quot;)&#xA;                vesClass = ufv.getFieldValue(&quot;ufvActualObCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;                vesClass = vesClass != null ? vesClass.getKey() : ''&#xA;                nextFacility = ufv.getFieldValue(&quot;ufvActualObCv.cvNextFacility.fcyId&quot;)&#xA;&#xA;                //YB Code&#xA;                def visitIntId = ufv.getFieldValue(&quot;ufvIntendedObCv.cvId&quot;)&#xA;                if (visitIntId != null &amp;&amp; visitIntId.startsWith('YB')) {&#xA;                    isYBbarge = true;&#xA;                    nextFacility = ufv.getFieldValue(&quot;ufvIntendedObCv.cvNextFacility.fcyId&quot;);&#xA;                    def aobcarrierMode = ufv.getFieldValue(&quot;ufvActualObCv.cvCarrierMode&quot;)&#xA;                    aobcarrierMode = aobcarrierMode != null ? aobcarrierMode.getKey() : ''&#xA;                    def intVesClass = ufv.getFieldValue(&quot;ufvIntendedObCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;                    intVesClass = intVesClass != null ? intVesClass.getKey() : ''&#xA;                    if ('TRUCK'.equals(aobcarrierMode)) {&#xA;                        visitId = visitIntId;&#xA;                        vesClass = intVesClass;&#xA;                    }&#xA;                }&#xA;            }//Else Ends&#xA;&#xA;            def port = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;            port = 'KHI'.equals(port) ? 'HIL' : port&#xA;            nextFacility = nextFacility != null ? nextFacility : port&#xA;            def portToEmail = getEmialId(nextFacility);&#xA;            //List out units to create BDC for&#xA;            def unitList = null; def cvGkey = null;&#xA;            if (visitId != null &amp;&amp; visitId.startsWith('YB')) {&#xA;                cvGkey = ufv.getFieldValue(&quot;ufvIntendedObCv.cvdGkey&quot;);&#xA;            } else {&#xA;                cvGkey = ufv.getFieldValue(&quot;ufvActualObCv.cvdGkey&quot;);&#xA;            }&#xA;            if (!event.event.eventTypeId.equals(&quot;NIS_CODING_COMPLETE_LH&quot;)) {&#xA;                unitList = getUnitforObCarrier(visitId, isYBbarge);&#xA;                //Stop proc if no units to process against&#xA;                if (unitList == null || unitList.size() == 0) {&#xA;                    def sub = &quot;Trucker coding for VesVisit &quot; + visitId + &quot; STOPPED unit List is ZERO&quot;;&#xA;                    def body = &quot;Please ROUTING OBCarrier Selection for &quot; + visitId + &quot; then re-execute Trucker coding complete process&quot;;&#xA;                    emailSender.custSendEmail(portToEmail, sub, body);&#xA;                    return;&#xA;                }&#xA;            }&#xA;&#xA;            if ('CELL'.equals(vesClass)) {&#xA;                def ctrNo = null; def checkDigit = null;&#xA;                def lhUnits = getUnitforIbCarrier(visitId, nextFacility, &quot;AUTO&quot;) //A19 Starts&#xA;                //println(&quot;LHUNIT --&quot;+(lhUnits != null ? lhUnits.size() : &quot;ZERO&quot;))&#xA;                if (lhUnits == null || lhUnits.size() == 0) {&#xA;                    def sub = &quot;Trucker coding for VesVisit &quot; + visitId + &quot; STOPPED unit List is ZERO&quot;;&#xA;                    def body = &quot;Long haul Carrier Returned Zero Records for &quot; + visitId + &quot; Please check entry and re-execute Trucker coding complete process&quot;;&#xA;                    emailSender.custSendEmail(portToEmail, sub, body);&#xA;                    return;&#xA;                }&#xA;&#xA;                def iter = lhUnits.iterator();&#xA;                while (iter.hasNext()) {&#xA;                    def aUnit = iter.next();&#xA;                    def currUfv = getCurrentFaciltyUnitFromUfv(aUnit)&#xA;                    def currUnit = currUfv.getUfvUnit()&#xA;                    def cmdyId = currUnit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;                    //N4 TO CMIS data processing&#xA;                    if (!'AUTO'.equals(cmdyId)) {&#xA;                        def groovyEvent = new GroovyEvent(null, currUnit);&#xA;                        groovyEvent.postNewEvent(&quot;NIS_TRUCKER_POST_MSG&quot;, &quot;Automated NIT created&quot;);&#xA;                    }&#xA;                }&#xA;                //Set Vesvoy DIR&#xA;                visitId = visitId + &quot;W&quot;;&#xA;            }//A19 Ends&#xA;            else if ('BARGE'.equals(vesClass)) {&#xA;                def iter = unitList.iterator();&#xA;                def availLookup = api.getGroovyClassInstance(&quot;GvyAvailDate&quot;);&#xA;                while (iter.hasNext()) {&#xA;                    def aUnit = iter.next();&#xA;                    //1. Set Avail Date&#xA;                    def currUfv = getCurrentFaciltyUnitFromUfv(aUnit)&#xA;                    def currUnit = currUfv.getUfvUnit()&#xA;                    def nisPort = currUnit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;                    if ('KHI'.equals(nisPort)) {&#xA;                        availDate = nextPortDelivery != null ? nextPortDelivery : beginDelivery&#xA;                    } else {&#xA;                        availDate = beginDelivery&#xA;                    }&#xA;                    availLookup.detentionForNisBarge(event, currUfv, availDate);&#xA;&#xA;                    def cmdyId = currUnit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;                    if (!'AUTO'.equals(cmdyId)) {&#xA;                        def groovyEvent = new GroovyEvent(null, currUnit);&#xA;                        groovyEvent.postNewEvent(&quot;NIS_DETENTION&quot;, &quot;Automated BDC created&quot;);&#xA;                    }&#xA;                }&#xA;            }&#xA;            def evtAppliedDt = event.event.getEvntAppliedDate()&#xA;            def zone = com.navis.argo.ContextHelper.getThreadUserTimezone()&#xA;            gvyEventUtil = api.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;            def aDate = gvyEventUtil.formatDate(evtAppliedDt, zone)&#xA;            def aTime = gvyEventUtil.formatTime(evtAppliedDt, zone)&#xA;            String dateFormat = &quot;yyyy-MM-dd'T'HH:mm:ss&quot;;&#xA;            String mnsDate = gvyEventUtil.formatDateTime(evtAppliedDt, zone, dateFormat)&#xA;&#xA;            String gemsMsg = &quot;&lt;GroovyMsg vesvoy='&quot; + visitId + &quot;' action='NIZ' aTime='&quot; + aTime + &quot;' doer='TOS' aDate='&quot; + aDate + &quot;' msgType='NIZ_COMPLETE'  dPort='&quot; + port + &quot;' /&gt;&quot;&#xA;            //2. Create MNS Data mapping&#xA;            String mnsMsg = &quot;&lt;new-vessel source-system='TOS' vvd='&quot; + visitId + &quot;' port-code='&quot; + port + &quot;' date-time='&quot; + mnsDate + &quot;' status='COMPLETE' /&gt;&quot;;&#xA;&#xA;            //3. Post Direct to MNS&#xA;            def jmsQueueSender = api.getGroovyClassInstance(&quot;JMSQueueSender&quot;)&#xA;            println(&quot;Posting to jms/queue/oceanevent/newvess/ni/inbound&quot;);&#xA;            jmsQueueSender.setMnsQueue(&quot;jms/queue/oceanevent/newvess/ni/inbound&quot;);&#xA;            jmsQueueSender.send(mnsMsg);&#xA;&#xA;            //Post Direct to Gems&#xA;            jmsQueueSender.setMnsQueue(&quot;n4.gems.eq.events&quot;);&#xA;            jmsQueueSender.send(gemsMsg);&#xA;&#xA;            //Success Email&#xA;            def sub = &quot;Trucker coding sucessfully completed for &quot; + visitId;&#xA;            emailSender.custSendEmail(portToEmail, sub, sub);&#xA;&#xA;            println(&quot;GemsNIZMsg=&quot; + gemsMsg);&#xA;            println(&quot;MnsNIZMsg=&quot; + mnsMsg);&#xA;&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;&#xA;    }&#xA;&#xA;    private void NIZCompleteProcBarge(Object event, Object api, Object beginDelivery, Object nextPortDelivery) {&#xA;        println(&quot;BEGIN : GvyCmisEventSIT.NIZCompleteProcBarge()&quot;)&#xA;        //Gems - &lt;GroovyMsg msgType='NIZ_COMPLETE'  action='NIZ'   aDate='08/26/2011' aTime='08:43:58' doer='tos' vesvoy='ALE134B'  dPort='HIL'/&gt;&#xA;        //MNS - &lt;new-vessel source-system=&quot;TOS&quot; vessel-voyage=&quot;ALE019&quot; port-code=&quot;KHI&quot; status=&quot;COMPLETE&quot;/&gt;&#xA;        def emailSender = api.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;        def unit = event.getEntity();&#xA;        def visitId = null; def vesClass = null;&#xA;        def fcy = null; def ufv = null; def isYBbarge = false; def nextFacility = null;&#xA;        def availDate = null;&#xA;&#xA;        try {&#xA;            fcy = ContextHelper.getThreadFacility();&#xA;            ufv = unit.getUfvForFacilityCompletedOnly(fcy); //If Departed get facility ufv&#xA;            if (ufv == null) {&#xA;                ufv = unit.unitActiveUfv; //Assign ufv from Facility Active unit&#xA;            }&#xA;&#xA;            if (event.event.eventTypeId.equals(&quot;NIS_CODING_COMPLETE_LH&quot;)) {&#xA;                visitId = ufv.getFieldValue(&quot;ufvActualIbCv.cvId&quot;)&#xA;                vesClass = ufv.getFieldValue(&quot;ufvActualIbCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;                vesClass = vesClass != null ? vesClass.getKey() : ''&#xA;            } else {&#xA;                visitId = ufv.getFieldValue(&quot;ufvActualObCv.cvId&quot;)&#xA;                vesClass = ufv.getFieldValue(&quot;ufvActualObCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;                vesClass = vesClass != null ? vesClass.getKey() : ''&#xA;                nextFacility = ufv.getFieldValue(&quot;ufvActualObCv.cvNextFacility.fcyId&quot;)&#xA;&#xA;                //YB Code&#xA;                def visitIntId = ufv.getFieldValue(&quot;ufvIntendedObCv.cvId&quot;)&#xA;                if (visitIntId != null &amp;&amp; visitIntId.startsWith('YB')) {&#xA;                    isYBbarge = true;&#xA;                    nextFacility = ufv.getFieldValue(&quot;ufvIntendedObCv.cvNextFacility.fcyId&quot;);&#xA;                    def aobcarrierMode = ufv.getFieldValue(&quot;ufvActualObCv.cvCarrierMode&quot;)&#xA;                    aobcarrierMode = aobcarrierMode != null ? aobcarrierMode.getKey() : ''&#xA;                    def intVesClass = ufv.getFieldValue(&quot;ufvIntendedObCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;                    intVesClass = intVesClass != null ? intVesClass.getKey() : ''&#xA;                    //if('TRUCK'.equals(aobcarrierMode)){ // Always use OB Intended for YB barges&#xA;                    visitId = visitIntId;&#xA;                    vesClass = intVesClass;&#xA;                    //}&#xA;                }&#xA;            }//Else Ends&#xA;&#xA;            def port = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;            port = 'KHI'.equals(port) ? 'HIL' : port&#xA;            nextFacility = nextFacility != null ? nextFacility : port&#xA;            def portToEmail = getEmialId(nextFacility);&#xA;            //List out units to create BDC for&#xA;            def unitList = null; def cvGkey = null;&#xA;            if (visitId != null &amp;&amp; visitId.startsWith('YB')) {&#xA;                cvGkey = ufv.getFieldValue(&quot;ufvIntendedObCv.cvdGkey&quot;);&#xA;            } else {&#xA;                cvGkey = ufv.getFieldValue(&quot;ufvActualObCv.cvdGkey&quot;);&#xA;            }&#xA;            if (!event.event.eventTypeId.equals(&quot;NIS_CODING_COMPLETE_LH&quot;)) {&#xA;                unitList = getUnitforObCarrier(visitId, isYBbarge);&#xA;                //Stop proc if no units to process against&#xA;                if (unitList == null || unitList.size() == 0) {&#xA;                    def sub = &quot;Trucker coding for VesVisit &quot; + visitId + &quot; STOPPED unit List is ZERO&quot;;&#xA;                    def body = &quot;Please ROUTING OBCarrier Selection for &quot; + visitId + &quot; then re-execute Trucker coding complete process&quot;;&#xA;                    emailSender.custSendEmail(portToEmail, sub, body);&#xA;                    return;&#xA;                }&#xA;            }&#xA;&#xA;            if ('CELL'.equals(vesClass)) {&#xA;                def ctrNo = null; def checkDigit = null;&#xA;                def lhUnits = getUnitforIbCarrier(visitId, nextFacility, &quot;AUTO&quot;) //A19 Starts&#xA;                //println(&quot;LHUNIT --&quot;+(lhUnits != null ? lhUnits.size() : &quot;ZERO&quot;))&#xA;                if (lhUnits == null || lhUnits.size() == 0) {&#xA;                    def sub = &quot;Trucker coding for VesVisit &quot; + visitId + &quot; STOPPED unit List is ZERO&quot;;&#xA;                    def body = &quot;Long haul Carrier Returned Zero Records for &quot; + visitId + &quot; Please check entry and re-execute Trucker coding complete process&quot;;&#xA;                    emailSender.custSendEmail(portToEmail, sub, body);&#xA;                    return;&#xA;                }&#xA;&#xA;                def iter = lhUnits.iterator();&#xA;                while (iter.hasNext()) {&#xA;                    def aUnit = iter.next();&#xA;                    def currUfv = getCurrentFaciltyUnitFromUfv(aUnit)&#xA;                    def currUnit = currUfv.getUfvUnit()&#xA;                    def cmdyId = currUnit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;                    //N4 TO CMIS data processing&#xA;                    if (!'AUTO'.equals(cmdyId)) {&#xA;                        def groovyEvent = new GroovyEvent(null, currUnit);&#xA;                        groovyEvent.postNewEvent(&quot;NIS_TRUCKER_POST_MSG&quot;, &quot;Automated NIT created&quot;);&#xA;                    }&#xA;                }&#xA;                //Set Vesvoy DIR&#xA;                visitId = visitId + &quot;W&quot;;&#xA;            }//A19 Ends&#xA;            else if ('BARGE'.equals(vesClass)) {&#xA;                def iter = unitList.iterator();&#xA;                def availLookup = api.getGroovyClassInstance(&quot;GvyAvailDate&quot;);&#xA;                while (iter.hasNext()) {&#xA;                    def aUnit = iter.next();&#xA;                    //1. Set Avail Date&#xA;                    def currUfv = getCurrentFaciltyUnitFromUfv(aUnit)&#xA;                    def currUnit = currUfv.getUfvUnit()&#xA;                    def nisPort = currUnit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;                    if ('KHI'.equals(nisPort)) {&#xA;                        availDate = nextPortDelivery != null ? nextPortDelivery : beginDelivery&#xA;                    } else {&#xA;                        availDate = beginDelivery&#xA;                    }&#xA;                    availLookup.detentionForNisBarge(event, currUfv, availDate);&#xA;&#xA;                    def cmdyId = currUnit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;                    if (!'AUTO'.equals(cmdyId)) {&#xA;                        def groovyEvent = new GroovyEvent(null, currUnit);&#xA;                        groovyEvent.postNewEvent(&quot;NIS_DETENTION&quot;, &quot;Automated BDC created&quot;);&#xA;                    }&#xA;                }&#xA;            }&#xA;&#xA;            //Success Email&#xA;            def sub = &quot;Trucker coding sucessfully completed for &quot; + visitId;&#xA;            emailSender.custSendEmail(portToEmail, sub, sub);&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;        println(&quot;END : GvyCmisEventSIT.NIZCompleteProcBarge()&quot;)&#xA;    }&#xA;&#xA;    public List getUnitforObCarrier(Object cvId, boolean ybBarge) {&#xA;        List cvUnits = null;&#xA;        try {&#xA;            // NON HON POD&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;            //dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_VISIT_STATE, UnitVisitStateEnum.DEPARTED));&#xA;&#xA;            if (ybBarge) {&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_INTENDED_OB_ID, cvId));&#xA;            } else {&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID, cvId));&#xA;            }&#xA;            cvUnits = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;        return cvUnits;&#xA;    }&#xA;&#xA;    //A19&#xA;    public List getUnitforIbCarrier(Object cvId, String pod, String cmdy) {&#xA;&#xA;        List cvUnits = null;&#xA;        try {&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#xA;            if ('KHI'.equals(pod)) {&#xA;                def ports = [pod, &quot;HIL&quot;]&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, cvId)).addDqPredicate(PredicateFactory.in(UnitField.UFV_POD_ID, ports))&#xA;            } else if ('HIL'.equals(pod)) {&#xA;                def ports = [pod, &quot;KHI&quot;]&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, cvId)).addDqPredicate(PredicateFactory.in(UnitField.UFV_POD_ID, ports))&#xA;            } else {&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, cvId)).addDqPredicate(PredicateFactory.eq(UnitField.UFV_POD_ID, pod))&#xA;            }&#xA;            cvUnits = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;        return cvUnits;&#xA;    }&#xA;&#xA;&#xA;    public Date setVesBeginDate(Object unit, Object ufv, Object api) {&#xA;        try {&#xA;&#xA;            def begindelivery = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate05&quot;);&#xA;            def vvd = null; def vvPhase = &quot;&quot;; def vesId = null; def nextFacility = null;&#xA;            def emailAddr = &quot;1aktosdevteam@matson.com&quot;;&#xA;            def visitIntId = ufv.getFieldValue(&quot;ufvIntendedObCv.cvId&quot;)&#xA;&#xA;&#xA;            try {&#xA;                if (visitIntId != null &amp;&amp; visitIntId.startsWith('YB')) {&#xA;                    vvd = ufv.ufvIntendedObCv.cvCvd&#xA;                    vvPhase = ufv.getFieldValue(&quot;ufvIntendedObCv.cvVisitPhase&quot;)&#xA;                    vesId = ufv.getFieldValue(&quot;ufvIntendedObCv.cvId&quot;);&#xA;                    nextFacility = ufv.getFieldValue(&quot;ufvIntendedObCv.cvNextFacility.fcyId&quot;);&#xA;                } else {&#xA;                    vvd = ufv.ufvActualObCv.cvCvd&#xA;                    vvPhase = ufv.getFieldValue(&quot;ufvActualObCv.cvVisitPhase&quot;);&#xA;                    vesId = vesId = ufv.getFieldValue(&quot;ufvActualObCv.cvId&quot;);&#xA;                    nextFacility = ufv.getFieldValue(&quot;ufvActualObCv.cvNextFacility.fcyId&quot;);&#xA;                }&#xA;                emailAddr = getEmialId(nextFacility)&#xA;&#xA;            } catch (Exception e) {&#xA;                try {&#xA;                    vvd = ufv.ufvActualObCv.cvCvd&#xA;                } catch (Exception ex) {&#xA;                    vvd = null;&#xA;                }&#xA;            }//outer catch ends&#xA;&#xA;/*&#x9;if( !(CarrierVisitPhaseEnum.DEPARTED.equals(vvPhase) || CarrierVisitPhaseEnum.CLOSED.equals(vvPhase))){&#xA;       def emailSender = api.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;       def sub = &quot;PROC STOPPED : Vesvoy=&quot;+vesId+&quot; NOT DEPARTED YET Please depart the vessel and re-execute NIS coding&quot;;&#xA;   &#x9;   emailSender.custSendEmail(emailAddr, sub, sub);&#xA;&#x9;   return false;&#xA;    }*/&#xA;            if (vvd == null) {&#xA;                def emailSender = api.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;                def sub = &quot;PROC STOPPED :  OBCarrierId=&quot; + vesId + &quot; is not a vessel&quot;;&#xA;                emailSender.custSendEmail(emailAddr, sub, sub + &quot; For YB barge the OBIntended should be Set&quot; +&#xA;                        &quot;and For Matson Barge OBActual One of the values is missing&quot;);&#xA;                return false;&#xA;            }&#xA;&#xA;            vvd.setCvdTimeFirstAvailability(begindelivery);&#xA;            def activeUfv = unit.unitActiveUfv&#xA;            activeUfv.setFieldValue(&quot;ufvFlexDate05&quot;, null);&#xA;            activeUfv.setFieldValue(&quot;ufvFlexDate06&quot;, null);&#xA;&#xA;            return begindelivery;&#xA;&#xA;        } catch (Exception exc) {&#xA;            exc.printStackTrace();&#xA;        }&#xA;    }//Method ends&#xA;&#xA;&#xA;    public Object getCurrentFaciltyUnitFromUfv(Object aUfv) {&#xA;        def unit = null; def ufv = null;&#xA;        try {&#xA;            unit = aUfv.getUfvUnit();&#xA;            def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;            ufv = unit.getUfvForFacilityCompletedOnly(fcy); //If Departed get facility ufv&#xA;            if (ufv == null) {&#xA;                ufv = unit.unitActiveUfv; //Assign ufv from Facility Active unit&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;            return null;&#xA;        }&#xA;        return ufv&#xA;    }&#xA;&#xA;    public String getDetentionDatesforCurrentFcyUfv(Object unit, String xml, Object api, gvyCmisUtil) {&#xA;        def xmlGvyString = xml&#xA;        try {&#xA;            def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;            def ufv = unit.getUfvForFacilityCompletedOnly(fcy); //If Departed get facility ufv&#xA;            gvyEventUtil = gvyEventUtil == null ? getGroovyClassInstance(&quot;GvyEventUtil&quot;) : gvyEventUtil&#xA;&#xA;            def availDate = ufv.getFieldValue(&quot;ufvFlexDate02&quot;)&#xA;            def availDateStr = availDate != null ? gvyEventUtil.dateFormat(availDate, 'MM/dd/yyyy') : &quot;null&quot;;&#xA;            def detnDate = ufv.getFieldValue(&quot;ufvFlexDate03&quot;)&#xA;            def detnDateStr = detnDate != null ? gvyEventUtil.dateFormat(detnDate, 'MM/dd/yyyy') : &quot;null&quot;;&#xA;            def gvyCmisActionDetail = getGroovyClassInstance(&quot;GvyCmisActionDetail&quot;);&#xA;            def lastfreeDayStr = ufv.getFieldValue(&quot;ufvCalculatedLastFreeDay&quot;);&#xA;            Date lastfreeDate = gvyCmisActionDetail.getlastFreeDate(availDate, lastfreeDayStr, api)&#xA;            def lastFreeStgDt = lastfreeDate != null ? gvyEventUtil.dateFormat(lastfreeDate, 'MM/dd/yyyy') : lastfreeDate&#xA;            lastFreeStgDt = lastFreeStgDt != null ? &quot;&quot; + lastFreeStgDt : &quot;null&quot;;&#xA;&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;availDt=&quot;, availDateStr);&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;dtnDueDt=&quot;, detnDateStr);&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;lastFreeStgDt=&quot;, lastFreeStgDt);&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;action=&quot;, &quot;BDC&quot;);&#xA;            xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;lastAction=&quot;, &quot;FREE&quot;);&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;        return xmlGvyString;&#xA;    }&#xA;&#xA;    public void truckerCodingNotification(Object visit, String visitId) {&#xA;        def portToEmail = &quot;1aktosdevteam@matson.com&quot;&#xA;        try {&#xA;            if (!&quot;BARGE&quot;.equals(visit.vvdVessel.vesVesselClass.vesclassVesselType.name)) {&#xA;                return;&#xA;            }&#xA;            def phase = visit.vvdVisitPhase&#xA;            boolean isYb = visitId.startsWith('YB') ? true : false&#xA;            def unitList = getUnitforObCarrier(visitId, isYb)&#xA;            if (!isYb &amp;&amp; CarrierVisitPhaseEnum.DEPARTED.equals(phase) &amp;&amp; unitList != null &amp;&amp; unitList.size() &gt; 0) {&#xA;                //A21&#xA;                def carrierId = visit.cvdCv;&#xA;                def emailSender = getGroovyClassInstance(&quot;EmailSender&quot;);&#xA;                def sub = &quot; Vessel ready for TRUCKER CODING=&quot; + carrierId;&#xA;                def nextFacility = visit.getFieldValue(&quot;cvdCv.cvNextFacility.fcyId&quot;)&#xA;                portToEmail = getEmialId(nextFacility);&#xA;                emailSender.custSendEmail(portToEmail, sub, sub);&#xA;            }&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;&#xA;    }&#xA;&#xA;    public String getEmialId(String port) {&#xA;&#xA;        String emailId = getReferenceValue(&quot;TRCK_CODING_&quot; + port, &quot;TRCK_CODING_&quot; + port, null, null, 1)  //A16&#xA;        if (emailId == null) {&#xA;            return &quot;1aktosdevteam@matson.com&quot;&#xA;        }&#xA;        return emailId&#xA;    }&#xA;&#xA;    //A18&#xA;    public String setTruckerFromNotes(Object unit) {&#xA;        try {&#xA;            String notes = unit.getFieldValue(&quot;unitRemark&quot;);&#xA;            if (notes != null &amp;&amp; notes.startsWith(&quot;N/P&quot;)) {&#xA;                String truck = notes.substring(notes.indexOf(&quot;/&quot;) + 2, notes.indexOf(&quot;,&quot;));&#xA;                truck = truck != null ? truck.trim() : null;&#xA;                unit.setFieldValue(&quot;unitFlexString07&quot;, truck); //A12&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;    public void postNITtoGEMS(Object event) {&#xA;        println(&quot;Testing start event to GEMS for NIS_TRUCKER_ASSIGN&quot;);&#xA;        def unit = event.entity;&#xA;        def groovyEvent = new GroovyEvent(null, unit);&#xA;        groovyEvent.postNewEvent(&quot;NIS_TRUCKER_POST_MSG&quot;, &quot;Automated NIT created&quot;);&#xA;        println(&quot;Testing end event to GEMS for NIS_TRUCKER_ASSIGN&quot;);&#xA;    }&#xA;&#xA;}//Class Ends" />
<digital-asset id="MatCheckHazard" short-description="MatCheckHazard" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.road.business.model.*;&#xA;import com.navis.road.RoadField;&#xA;import java.util.Calendar;&#xA;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;&#xA;import org.apache.log4j.Logger&#xA;&#xA;&#xA;&#xA;public class MatCheckHazard extends GroovyInjectionBase&#xA;{&#xA;    //public boolean execute(Map params)&#xA;    public void execute(String container)&#xA;    {&#xA;        try&#xA;        {&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Calling MatCheckHazard for ::&quot;+ container);&#xA;&#x9;&#x9;&#x9;//def container = &quot;MATU5137732&quot;;&#xA;            def inj = new GroovyInjectionBase();&#xA;            inj = new GroovyInjectionBase();&#xA;   &#x9;&#x9;&#x9;List unitList = null;&#xA;            ArrayList trkTransList = new ArrayList();&#xA;            List trkTrans = getGateTrans(container)&#xA;&#xA;            Iterator iter = trkTrans.iterator();&#xA;            while(iter.hasNext()) {&#xA;                def aTrans = iter.next();&#xA;                //println(&quot;aTrans.tranCtrNbr ::: &quot;+ aTrans.tranCtrNbr +&quot;::&quot;+aTrans.getTranSubType().getKey() + &quot;::&quot; + aTrans.getTranStatus().getKey() + &quot;::&quot;+aTrans.tranCreated + &quot;::&quot;+aTrans.tranIsHazard);&#xA;            &#x9;&#x9;def cntnrHaz = aTrans.tranIsHazard;&#xA;            &#x9;&#x9;cntnrHaz = cntnrHaz == true ? 'Y' : 'N';&#xA;            &#x9;&#x9;unitList = getActiveUnits(aTrans.tranCtrNbr);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;unitList.size() &quot;+unitList.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator unitIterator = unitList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String ueEquipment = null;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while(unitIterator.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = unitIterator.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def isHazardous=unit.getFieldValue(&quot;unitGoods.gdsIsHazardous&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;isHazardous = isHazardous == true ? 'Y' : '';&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Unit number ::&quot;+unit.unitId + &quot;::&quot;+cntnrHaz);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (cntnrHaz.equalsIgnoreCase(&quot;N&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unit.getGoods().attachHazards(null);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;            }&#xA;&#xA;        }catch(Exception e){&#xA;            LOGGER.warn(&quot;Exception ::&quot;+ e);&#xA;            }&#xA;    }&#xA;&#xA;    public List getGateTrans(String container)&#xA;    {&#xA;&#xA;        List gateTranUnits = null;&#xA;        ArrayList units = new ArrayList();&#xA;        try&#xA;        {&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;TruckTransaction&quot;)&#xA;&#x9;&#x9;.addDqPredicate(PredicateFactory.in(RoadField.TRAN_SUB_TYPE, &quot;RI&quot;))&#xA;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(RoadField.TRAN_CTR_NBR, container))&#xA;&#x9;&#x9;.addDqOrdering(Ordering.desc(RoadField.TRAN_CREATED))&#xA;&#x9;&#x9;.addDqPredicate(PredicateFactory.in(RoadField.TRAN_STATUS, &quot;COMPLETE&quot;,&quot;OK&quot;));&#xA;&#xA;&#xA;            LOGGER.warn(&quot;dq---------------&quot;+dq);&#xA;            gateTranUnits  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            LOGGER.warn(&quot;Query executed&quot;);&#xA;            LOGGER.warn(&quot;gateTranUnits ::&quot;+gateTranUnits != null ? gateTranUnits.size() : 0)&#xA;&#x9;&#x9;&#x9;if(gateTranUnits != null) {&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iter = gateTranUnits.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def tran = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;units.add(tran);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;        }catch(Exception e){&#xA;          LOGGER.warn(&quot;Exception ::&quot;+ e);&#xA;            }&#xA;        return units;&#xA;    }&#xA;&#xA;&#x9;public List getActiveUnits(String unitId)&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;).addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID, unitId)).addDqOrdering(Ordering.desc(InventoryField.UFV_TIME_OF_LAST_MOVE));&#xA;&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;dq:::::::::&quot;+dq)&#xA;&#x9;&#x9;&#x9;def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;After unitList&quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;units.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;unitsSize&quot; + units.size);&#xA;&#x9;&#x9;&#x9;return units;&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Exception ::&quot;+ e);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;private static final Logger LOGGER = Logger.getLogger(MatCheckHazard.class);&#xA;}&#xA;" />
<digital-asset id="TestJobJMB" short-description="TestJobJMB" is-pre-deployed="N" groovy-code="///////////////////////////////////////////////////////////////////////////////&#xA;///&#xA;/// Copyright 2014, Matson Inc.&#xA;///&#xA;///////////////////////////////////////////////////////////////////////////////&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.api.UnitFinder;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.business.units.EquipmentState;&#xA;import com.navis.inventory.business.api.UnitField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;&#xA;///&#xA;/// - 20140829 - JMB - Created&#xA;/// - 20140902 - JMB - Updated to list units&#xA;///&#xA;public class TestJobJMB extends GroovyInjectionBase&#xA;{&#xA;   def inj = new GroovyInjectionBase();&#xA;&#xA;   private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;   private final String  emailFrom = &quot;1aktosdevteam@matson.com&quot;;&#xA;   &#xA;   //public void execute(String vessel, String vesselGkey)&#xA;   public boolean execute(Map inParameters)&#xA;   {&#xA;      String  emailBody = &quot;&quot;;&#xA;&#xA;&#x9;   ArrayList reportUnitList = new ArrayList();&#xA;   &#x9;&#xA;      List unitList = null;&#xA;      unitList = getUnits();&#xA;&#x9;   &#xA;      Iterator unitIterator = unitList.iterator();&#xA;&#x9;   while(unitIterator.hasNext())&#xA;&#x9;   {&#xA;&#x9;&#x9;   def unit = unitIterator.next();&#xA;&#xA;         def categoryOther = unit.getUnitCategory();&#xA;//&#x9;&#x9;   categoryOther = categoryOther != null ? categoryOther.getKey() : &quot;&quot;&#xA;//         categoryOther = categoryOther == &quot;STRGE&quot; ? &quot;STORAGE&quot; : &quot;&quot;&#xA;         //if (&quot;STRGE&quot; == categoryOther)&#xA;         //{&#xA;            emailBody = emailBody + &quot;\r\n&quot; + categoryOther;&#xA;         //}&#xA;&#xA;&#x9;   }&#xA;&#xA;      def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;      emailSender.custSendEmail(emailFrom, &#xA;                                emailTo, &#xA;                                &quot;ALL EVENTS JMB&quot;, &#xA;                                &quot;Data = &quot; + emailBody);&#xA;&#xA;      println(&quot;jmb Done&quot;);&#xA;   }&#xA;&#xA;   public List getUnits()&#xA;   {&#xA;      try &#xA;      {&#xA;         ArrayList units = new ArrayList();&#xA;&#xA;         DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;);&#xA;         dq.addDqPredicate(PredicateFactory.eq(UnitField.UNIT_CURRENT_UFV_TRANSIT_STATE, UfvTransitStateEnum.S10_ADVISED));&#xA;         dq.addDqPredicate(PredicateFactory.like(UnitField.UNIT_PRIMARY_EQTYPE_ID, &quot;C%&quot;));&#xA;//         dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_CATEGORY,UnitCategoryEnum.STORAGE));&#xA;         dq.addDqPredicate(PredicateFactory.like(UnitField.UFV_CATEGORY,&quot;STRGE&quot;));&#xA;&#xA;/*&#x9;&#x9;&#xA;         DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;)&#xA;         //DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)  &#xA;            .addDqPredicate(PredicateFactory.eq(UnitField.UFV_CATEGORY,UnitCategoryEnum.STORAGE));&#xA;*/&#xA;         println(&quot;jmb DomainQuery = &quot; + dq);&#xA;         HibernateApi hibernate = HibernateApi.getInstance();&#xA;         List unitList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#xA;         return unitList;&#xA;&#xA;/*&#xA;&#x9;      HibernateApi hibernate = HibernateApi.getInstance();&#xA; &#x9;&#x9;   DomainQuery dq = QueryUtils.http://localhost:8280/apex/api/query?filtername=VESSEL_TEST&amp;operatorId=LPC&amp;complexId=NZLYT&amp;facilityId=LCT(&quot;UnitFacilityVisit&quot;);&#x9;&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.ne(UnitField.UFV_CATEGORY,UnitCategoryEnum.STORAGE))&#xA;            .addDqPredicate(PredicateFactory.ne(UnitField.RESTOW, UnitCategoryEnum.THROUGH))&#xA;         List unitList = hibernate.findEntitiesByDomainQuery(dq);&#xA;         return unitList;&#xA;*/&#xA;&#xA;         &#xA;&#xA;/*&#xA;         DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;)&#xA;&#x9;&#x9;&#x9;   .addDqPredicate(PredicateFactory.in(UnitField.CATEGORY, STRGE));&#xA;&#x9;      println(&quot;jmb DomainQuery = &quot; + dq)&#xA;&#x9;&#x9;&#x9;HibernateApi hibernate = HibernateApi.getInstance();&#xA;&#x9;&#x9;&#x9;List unitList = hibernate.findEntitiesByDomainQuery(dq);&#xA;         return unitList;&#xA;*/&#xA;/*&#xA;         ArrayList units = new ArrayList();&#xA;&#xA;         DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;         dq.addDqPredicate(PredicateFactory.in(UnitField.UFV_TRANSIT_STATE,&quot;S40_YARD&quot;));&#xA;         //dq.addDqPredicate(PredicateFactory.in(UnitField.UNIT_IMPEDIMENT_ROAD,&quot;RM&quot;));&#xA;&#xA;         println(&quot;jmb DomainQuery :::: &quot;+ dq);&#xA;         def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;         println(&quot;jmb After unitList&quot;+ufvList.size());&#xA;&#xA;         if(ufvList != null) &#xA;         {&#xA;            Iterator iter = ufvList.iterator();&#xA;            while(iter.hasNext()) &#xA;            {&#xA;               def ufv = iter.next();&#xA;               def unit = ufv.ufvUnit;&#xA;               if(unit.getFieldValue(&quot;unitVisitState&quot;).equals(&#xA;                  com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE) &amp;&amp;&#xA;                  (unit.getFieldValue(&quot;unitAppliedHoldOrPermName&quot;) != null &amp;&amp; &#xA;                  unit.getFieldValue(&quot;unitAppliedHoldOrPermName&quot;).contains(&quot;RM&quot;))) &#xA;               {&#xA;                  units.add(unit);                 &#xA;               }&#xA;            }&#xA;         }&#xA;         println(&quot;jmb unitsSize&quot; + units.size);&#xA;         return units;&#xA;*/&#xA;      }&#xA;      catch(Exception e)&#xA;      {&#xA;         def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;         emailSender.custSendEmail(emailFrom, emailTo, &quot;TestJobJMB Error: &quot; + e.getMessage());&#xA;         &#xA;         e.printStackTrace();&#xA;         println(&quot;jmb ERROR = &quot; + e.getMessage());&#xA;      }&#xA;   }&#xA;}&#xA;&#xA;&#xA;" />
<digital-asset id="MatDelDupBkng" short-description="MatDelDupBkng" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import com.navis.inventory.business.units.Unit;&#xA;&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.services.business.api.EventManager&#xA;import com.navis.services.business.rules.EventType&#xA;&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery;&#xA;&#xA;import com.navis.orders.business.eqorders.Booking;&#xA;import com.navis.orders.business.eqorders.EquipmentOrderItem;&#xA;import com.navis.argo.business.reference.EquipType;&#xA;&#xA;import com.navis.argo.ArgoPropertyKeys;&#xA;import com.navis.argo.ArgoRefField;&#xA;import java.util.Calendar;&#xA;import org.apache.log4j.Logger&#xA;&#xA;&#xA;class MatDelDupBkng{&#xA;&#xA;    public boolean execute(Map params)&#xA;    {&#xA;&#x9;&#x9;def emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;def inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;def sendMail = &quot;N&quot;;&#xA;        try {&#xA;&#xA;&#x9;&#x9;&#x9;Calendar cal = Calendar.getInstance();&#xA;&#x9;&#x9;&#x9;cal.setTime(new Date());&#xA;&#x9;&#x9;&#x9;cal.add(Calendar.HOUR_OF_DAY, -24);&#xA;&#x9;&#x9;&#x9;Date startDate = cal.getTime();&#xA;&#x9;&#x9;&#x9;String delBkng = &quot;Please check and Delete the duplicate booking entry without items.\n\n&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;################################ Calling MatDelDupBkng startDate &quot;+ startDate);&#xA;&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;Booking&quot;)&#xA;                    .addDqPredicate(PredicateFactory.ge(InventoryField.EQBO_CREATED,startDate));&#xA;&#xA;            def bkngList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            LOGGER.warn(&quot;After bkngList :::: &quot;+bkngList.size());&#xA;&#xA;            String bkngGkey = null;&#xA;            String bkngNbr = null;&#xA;            String updatBkngNbr = &quot;&quot;;&#xA;            def bkng = null;&#xA;&#xA;            Iterator iter = bkngList.iterator();&#xA;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;bkng = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;bkngGkey = bkng.eqboGkey;&#xA;&#x9;&#x9;&#x9;&#x9;bkngNbr = bkng.eqboNbr;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Booking number and Gkey :: &quot; + bkngNbr + &quot; :: &quot; + bkngGkey);&#xA;            &#x9;def itemsFound = checkItems(bkngGkey);&#xA;            &#x9;if (&quot;N&quot;.equalsIgnoreCase(itemsFound)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;No items found Check if the Booking is duplicate for :: &quot; + bkngNbr);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DomainQuery dqChk = QueryUtils.createDomainQuery(&quot;Booking&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(InventoryField.EQBO_NBR,bkngNbr));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def bkngChk = HibernateApi.getInstance().findEntitiesByDomainQuery(dqChk);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;LOGGER.warn (&quot;Checking duplicate for booking :: &quot;+ bkngNbr +&quot; :: &quot;+ bkngChk.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (bkngChk.size() &gt; 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Delete the booking with Gkey -- No items found for the Booking :: &quot; + bkngNbr + &quot; and Gkey :: &quot;+ bkngGkey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;delBkng = delBkng+&quot;Booking Number &quot;+bkngNbr+&quot; :: Gkey :: &quot;+ bkngGkey+&quot; \n\n&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sendMail = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (&quot;Y&quot;.equalsIgnoreCase(sendMail)){&#xA;&#x9;&#x9;&#x9;&#x9;delBkng = delBkng + &quot;\n\nNote : Please verify the BOB message in TDP logs (TosDataProcessor.log) and create the ITN Hold on booking if required.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(delBkng);&#xA;&#x9;&#x9;&#x9;&#x9;def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailTo,&quot;Duplicate Bookings&quot;,delBkng);&#xA;&#x9;&#x9;&#x9;}else {&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;No duplicate booking found for last 3 hours&quot;);&#x9;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#xA;        }catch(Exception e){&#xA;            e.printStackTrace();&#xA;            LOGGER.warn(e.getMessage());&#xA;        }&#xA;    }&#xA;&#xA;    public String checkItems(String bkngGkey)&#xA;&#x9;    {&#xA;&#xA;&#x9;        try {&#xA;&#x9;            String itemsFound = &quot;Y&quot;;&#xA;&#x9;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;EquipmentOrderItem&quot;)&#xA;&#x9;                    .addDqPredicate(PredicateFactory.eq(InventoryField.EQBOI_ORDER,bkngGkey));&#xA;&#xA;&#x9;            def itemList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;            LOGGER.warn(&quot;After itemList :::: &quot;+itemList.size());&#xA;&#xA;&#x9;            if (itemList.size() == 0){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;itemsFound = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;            return itemsFound;&#xA;&#x9;        }catch(Exception e){&#xA;&#x9;            e.printStackTrace();&#xA;&#x9;            LOGGER.warn(e.getMessage());&#xA;&#x9;        }&#xA;   }&#xA;&#xA;private static final Logger LOGGER = Logger.getLogger(MatDelDupBkng.class);&#xA;}&#xA;&#xA;" />
<digital-asset id="CalculateThreeMainHazardsForDepartedAndRetiredUnits" short-description="CalculateThreeMainHazardsForDepartedAndRetiredUnits" is-pre-deployed="Y" groovy-code="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.persistence.hibernate.CarinaPersistenceCallback&#xA;import com.navis.framework.persistence.hibernate.PersistenceTemplate&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.context.UserContextUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.util.message.MessageCollector&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.xpscache.util.BatchKeys&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; * This groovy plug-in is created from an upgrade action InventoryUpgradeAction250011 and can be executed as groovy job if required.&#xA; * This groovy plug-in will calculate top 3 important hazards and save as a string in the column &quot;Hzd UNNbrs&quot; in unit screen.&#xA; * This processes the departed and retired units.&#xA; */&#xA;public class CalculateThreeMainHazardsForDepartedAndRetiredUnits {&#xA;&#xA;  public void execute(Map parameters) {&#xA;    int countSuccess = 0;&#xA;    PersistenceTemplate pt = new PersistenceTemplate(UserContextUtils.getSystemUserContext());&#xA;    pt.invoke(new CarinaPersistenceCallback() {&#xA;      protected void doInTransaction() {&#xA;        try {&#xA;          try {&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.GOODS_BASE)&#xA;                    .addDqPredicate(PredicateFactory.isNotNull(UnitField.GDS_HAZARDS))&#xA;                    .addDqPredicate(PredicateFactory.&#xA;                    in(UnitField.GDS_UNIT_VIST_STATE, Arrays.asList(UnitVisitStateEnum.DEPARTED, UnitVisitStateEnum.RETIRED)))&#xA;                    .addDqPredicate(PredicateFactory.isNull(InventoryField.GDS_THREE_MAIN_HAZARD_U_N_NUMBERS))&#xA;                    .setDqMaxResults(MAX_QUERY_RETURN_SIZE);&#xA;            final Serializable[] primaryKeys = HibernateApi.getInstance().findPrimaryKeysByDomainQuery(dq);&#xA;            BatchKeys br = new BatchKeys(primaryKeys, GOODSBASE_BATCH_SIZE);&#xA;&#xA;&#xA;            for (Iterator&lt;Serializable[]&gt; itr = br.getIterator(); itr.hasNext();) {&#xA;              final Serializable[] goodBaseGkeys = itr.next();&#xA;              MessageCollector msgCollector =&#xA;                      new PersistenceTemplate(UserContextUtils.getSystemUserContext()).invoke(new CarinaPersistenceCallback() {&#xA;                        @Override&#xA;                        protected void doInTransaction() {&#xA;                          for (Serializable gbGkey : goodBaseGkeys) {&#xA;                            GoodsBase goods = GoodsBase.hydrate(gbGkey);&#xA;                            if (goods == null) {&#xA;                              LOGGER.error(&quot;No GoodsBase found for gkey &quot; + gbGkey);&#xA;                            } else if (goods.getGdsUnit() == null) {&#xA;                              LOGGER.error(&quot;No Unit found for Goods with gkey &quot; + gbGkey);&#xA;                            } else {&#xA;                              goods.calculateDenormalizedHazardUNFields();&#xA;                              countSuccess++;&#xA;                            }&#xA;                          }&#xA;                        }&#xA;                      });&#xA;            }&#xA;          } catch (Exception e) {&#xA;            LOGGER.error(&quot;doInTransaction: exception in denormalizedHazardUNFields for departed/retired units: &quot; + e);&#xA;          }&#xA;        } catch (Exception e) {&#xA;          LOGGER.error(&quot;doInTransaction: exception in calculateUNHazards for departed/retired units: &quot; + e);&#xA;        }&#xA;      }&#xA;    });&#xA;    LOGGER.info(&quot;Number of records processed successfully : &quot; + countSuccess);&#xA;  }&#xA;&#xA;  private static final Logger LOGGER = Logger.getLogger(CalculateThreeMainHazardsForDepartedAndRetiredUnits.class);&#xA;  private static final int GOODSBASE_BATCH_SIZE = 100;&#xA;  private static final int MAX_QUERY_RETURN_SIZE = 50000;&#xA;}&#xA;" />
<digital-asset id="GateCustomActionGroovyImpl" short-description="GateCustomActionGroovyImpl" is-pre-deployed="N" groovy-code="import com.navis.argo.ArgoField;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.atoms.LaneTruckStatusEnum&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.navis.argo.portal.context.ArgoUserContext&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.business.atoms.LifeCycleStateEnum&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.presentation.FrameworkPresentationUtils&#xA;import com.navis.road.RoadBizMetafield&#xA;import com.navis.road.RoadEntity&#xA;import com.navis.road.RoadField&#xA;import com.navis.road.business.model.Gate&#xA;import com.navis.road.business.model.GateConfigStage&#xA;import com.navis.road.business.model.GateLane&#xA;import com.sun.jersey.api.client.Client&#xA;import com.sun.jersey.api.client.ClientResponse&#xA;import com.sun.jersey.api.client.WebResource&#xA;import com.sun.jersey.api.client.config.DefaultClientConfig&#xA;import org.w3c.dom.Element&#xA;import wslite.soap.SOAPClient&#xA;import wslite.soap.SOAPResponse&#xA;&#xA;import javax.ws.rs.core.MediaType&#xA;&#xA;/**&#xA; * Description: N4 will need to send the Connect/DisConnect Web Service API to TDP when the clerk selects the lane to work.&#xA; * Gate Clerk can manually pick a lane or let N4 choose the lane (by pressing the custom action button)&#xA; *&#xA; * Note: Do NOT change the groovy name since this name is been used by N4 internally for the Custom Action button in gate Screen&#xA; *&#xA; * Author: Anburaja&#xA; * Date: 20-Feb-2015&#xA; * JIRA: SFDC-142304/CSDV-3055&#xA; * Called From: Gate Configuration (custom action button-labeled as Pick Lane)&#xA; *&#xA; * Peter Seiler 06-Aug-2015: Change the check for the longest wait for the gate lane to also consider seconds.&#xA; *&#xA; * Sample SOAP Request for CONNECT and DISCONNECT message:&#xA;&#xA; &lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:now=&quot;nowsol&quot;&gt;&#xA; &lt;soapenv:Header/&gt;&#xA; &lt;soapenv:Body&gt;&#xA; &lt;now:realtime_update&gt;&#xA; &lt;now:ConnectionType&gt;CONNECT&lt;/now:ConnectionType&gt;&#xA; &lt;now:GateLaneId&gt;Lane 1&lt;/now:GateLaneId&gt;&#xA; &lt;now:ExtConsoleId&gt;CONS1&lt;/now:ExtConsoleId&gt;&#xA; &lt;/now:realtime_update&gt;&#xA; &lt;/soapenv:Body&gt;&#xA; &lt;/soapenv:Envelope&gt;&#xA;&#xA; **/&#xA;&#xA;class GateCustomActionGroovyImpl extends GroovyApi {&#xA;&#xA;    private logMsg(String inMsg) {&#xA;        log(&quot;GateCustomActionGroovyImpl: &quot; + inMsg);&#xA;    }&#xA;&#xA;    public Map&lt;MetafieldId, Object&gt; execute(String inStageId, Long inLaneGkey, Long inTvdtlsGkey, Long inTranGkey, FieldChanges inChanges) {&#xA;        String tvExitLane = null;&#xA;        //String tvExitLaneID = null;&#xA;        GateLane gateLane;&#xA;        Map&lt;MetafieldId, Object&gt; returnMap = new HashMap&lt;MetafieldId, Object&gt;();&#xA;&#xA;        ArgoUserContext userContext = (ArgoUserContext) FrameworkPresentationUtils.getUserContext();&#xA;        logMsg(&quot;userContext = &quot; + userContext);&#xA;        logMsg(&quot;userContext.getConsoleGkey() = &quot; + userContext.getConsoleGkey());&#xA;        com.navis.road.business.reference.Console console = (userContext ? (com.navis.road.business.reference.Console) HibernateApi.getInstance().load(com.navis.road.business.reference.Console.class, userContext.getConsoleGkey()) : null)&#xA;&#xA;&#xA;        logMsg(&quot;console = &quot; + console);&#xA;        if (inChanges.hasFieldChange(RoadField.TVDTLS_EXIT_LANE)) {&#xA;            tvExitLane = inChanges.getFieldChange(RoadField.TVDTLS_EXIT_LANE).getNewValue();&#xA;            gateLane = (tvExitLane ? (GateLane) HibernateApi.getInstance().load(GateLane.class, tvExitLane.toLong()) : null);&#xA;        }&#xA;&#xA;        logMsg(&quot;before: gateLane = &quot; + gateLane);&#xA;        //when no lane is selected, pick the lane that is waiting the longest&#xA;        gateLane = (!tvExitLane) ? findWaitingGateLane(inStageId) : gateLane;&#xA;        logMsg(&quot;after: gateLane = &quot; + gateLane);&#xA;        returnMap.put(RoadField.TVDTLS_EXIT_LANE, (gateLane ? gateLane.getPrimaryKey() : null));&#xA;        returnMap.put(RoadBizMetafield.RELOAD_TRUCK_VISIT, true);&#xA;&#xA;        //update console with the selected lane, update gate lane status&#xA;        // First send Disconnect Message as clean up message and then update the console and then send the Final Connnect Message&#xA;        if (gateLane &amp;&amp; console) {&#xA;            log(&quot;Lane Selected : &quot; + console.getHwLaneSelected());&#xA;            //send Disconnect message only when the console is occupied by some lane&#xA;            if (!&quot;--&quot;.equalsIgnoreCase(console.getHwLaneSelected().toString()))&#xA;                sendRestfulDisConnectMsgToTDP(gateLane, console);&#xA;&#xA;            updateGateLaneAndConsole(gateLane, console);&#xA;            sendRestfulConnectMsgToTDP(gateLane, console);&#xA;        } else {&#xA;            //do not show in Gate screen as popup message&#xA;            log(&quot;No GateLane is in Waiting Status (in Lane Monitor) \n or selected Console not Selected&quot;);&#xA;        }&#xA;        return returnMap;&#xA;    }&#xA;&#xA;    /**&#xA;     * send message to TDP for Connect&#xA;     * @param inMsgType&#xA;     * @param inGateLane&#xA;     * @param inConsole&#xA;     * @return&#xA;     */&#xA;    private sendRestfulConnectMsgToTDP(GateLane inGateLane, com.navis.road.business.reference.Console inConsole) {&#xA;        SOAPResponse response;&#xA;        response = sendConnectRequest(inGateLane.getLaneId(), inConsole.getHwconsoleIdExternal());&#xA;        //todo what to with SOAP response???&#xA;    }&#xA;    /**&#xA;     * send message to TDP for Connect&#xA;     * @param inGateLane&#xA;     * @param inConsole&#xA;     * @return&#xA;     */&#xA;    private sendRestfulDisConnectMsgToTDP(GateLane inGateLane, com.navis.road.business.reference.Console inConsole) {&#xA;        SOAPResponse response;&#xA;        response = sendDisConnectRequest(inGateLane.getLaneId(), inConsole.getHwconsoleIdExternal());&#xA;        //todo what to with SOAP response???&#xA;    }&#xA;&#xA;    /**&#xA;     * Send Restful Connect Message&#xA;     * @param inLaneId&#xA;     * @param inConsoleId&#xA;     * @return&#xA;     */&#xA;    private Element sendConnectRequest(String inLaneId, String inConsoleId) {&#xA;        GeneralReference genRef = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;RESTFULLTDP&quot;, &quot;URL&quot;);&#xA;        logMsg(genRef.getRefValue1());&#xA;        URL url = new URL(genRef.getRefValue1() + &quot;laneId=&quot; + inLaneId.substring(5) + &quot;&amp;clerkId=&quot; + inConsoleId);&#xA;        logMsg(url.toString());&#xA;        DefaultClientConfig clientConfig1 = new DefaultClientConfig();&#xA;        Client client = Client.create(clientConfig1);&#xA;        WebResource resource = client.resource(url.toString());&#xA;        ClientResponse response = (ClientResponse) resource.accept(MediaType.TEXT_XML).get(ClientResponse.class);&#xA;        if (response.getStatus() != 200) {&#xA;            logMsg(&quot;Request failed&quot;);&#xA;            logMsg(response.toString());&#xA;        } else {&#xA;            logMsg(&quot;Request Success&quot;);&#xA;            logMsg(response.toString());&#xA;        }&#xA;        return null;&#xA;    }&#xA;    /**&#xA;     * Send restful Disconnect Request&#xA;     * @param inLaneId&#xA;     * @param inConsoleId&#xA;     * @return&#xA;     */&#xA;    private Element sendDisConnectRequest(String inLaneId, String inConsoleId) {&#xA;        GeneralReference genRef = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;RESTFULLTDP&quot;, &quot;URL&quot;);&#xA;        logMsg(genRef.getRefValue1());&#xA;        URL url = new URL(genRef.getRefValue2() + &quot;laneId=&quot; + inLaneId.substring(5) + &quot;&amp;clerkId=&quot; + inConsoleId);&#xA;        logMsg(url.toString());&#xA;        DefaultClientConfig clientConfig1 = new DefaultClientConfig();&#xA;        Client client = Client.create(clientConfig1);&#xA;        WebResource resource = client.resource(url.toString());&#xA;        ClientResponse response = (ClientResponse) resource.accept(MediaType.TEXT_XML).get(ClientResponse.class);&#xA;        if (response.getStatus() != 200) {&#xA;            logMsg(&quot;Request failed&quot;);&#xA;            logMsg(response.toString());&#xA;        } else {&#xA;            logMsg(&quot;Request Success&quot;);&#xA;            logMsg(response.toString());&#xA;        }&#xA;        return null;&#xA;    }&#xA;&#xA;    /**&#xA;     * Build SOAP Request XML Format String&#xA;     * @param xmlMessage&#xA;     * @return&#xA;     */&#xA;    private SOAPResponse sendSOAPRequest(String xmlMessage) {&#xA;        try {&#xA;            GeneralReference genRef = GeneralReference.findUniqueEntryById(&quot;RESTFULLTDP&quot;, &quot;URL&quot;);&#xA;            String wsUrl = (genRef ? genRef.getRefValue1() : null);&#xA;            SOAPClient client = new SOAPClient(wsUrl);&#xA;            SOAPResponse response = client.send(xmlMessage);&#xA;            log(&quot;Connect Response = &quot; + response.getText());&#xA;            return response;&#xA;        } catch (Exception ex) {&#xA;            log(&quot;sendSOAPRequest message failed to sent due to &quot; + ex.toString());&#xA;            return null;&#xA;        }&#xA;    }&#xA;&#xA;    /**&#xA;     * Update GateLane and Console entities&#xA;     * @param inGateLane&#xA;     * @param inConsole&#xA;     * @return&#xA;     */&#xA;    private static updateGateLaneAndConsole(GateLane inGateLane, com.navis.road.business.reference.Console inConsole) {&#xA;        inGateLane.setLaneTruckStatus(LaneTruckStatusEnum.PROCESSING);&#xA;        //log(&quot;Lane status : &quot; + inGateLane.getLaneTruckStatus().toString());&#xA;        inConsole.setHwLaneSelected(inGateLane);&#xA;    }&#xA;&#xA;    /**&#xA;     * Pick the longest waiting Gate Lane&#xA;     * @param inStageId&#xA;     * @return&#xA;     */&#xA;    private static GateLane findWaitingGateLane(inStageId) {&#xA;&#xA;        GateLane selectedGateLane = null;&#xA;        GateLane reservedGateLane = null;&#xA;        DomainQuery query = QueryUtils.createDomainQuery(RoadEntity.GATE_CONFIG_STAGE)&#xA;                .addDqPredicate(PredicateFactory.eq(RoadField.STAGE_ID, inStageId));&#xA;        GateConfigStage gcs = (GateConfigStage) Roastery.getHibernateApi().getUniqueEntityByDomainQuery(query);&#xA;&#xA;        if (gcs) {&#xA;            List&lt;Gate&gt; allGates = Gate.findAllGatesForFacilityAndGateConfig(ContextHelper.getThreadFacility(), gcs.getStageGateConfig());&#xA;            for (Gate eachGate : allGates) {&#xA;                Set&lt;GateLane&gt; gateLanes = eachGate.getGateLanes();&#xA;                gateLanes.each {&#xA;                    gateLane -&gt;&#xA;&#xA;                        /* if the lane has been waiting longer that the selected lane substitute the new lane */&#xA;&#xA;                        if (LifeCycleStateEnum.ACTIVE.equals(gateLane.getLifeCycleState()) &amp;&amp; LaneTruckStatusEnum.WAITING.equals(gateLane.getLaneTruckStatus())) {&#xA;                            if (selectedGateLane == null) {&#xA;                                selectedGateLane = gateLane;&#xA;                            } else {&#xA;                                if (selectedGateLane.getLaneInLaneTime() &gt; gateLane.getLaneInLaneTime()) {&#xA;                                    selectedGateLane = gateLane;&#xA;                                }&#xA;                            }&#xA;                        }&#xA;                }&#xA;            }&#xA;        }&#xA;        if (selectedGateLane != null) {&#xA;            //logMsg(&quot;selectAndReserveExchangeLaneByRange: lane selected = &quot; + selectedGateLane.getLaneId());&#xA;            // if we found a suitable lane attempt to reserve it exclusively for this visit&#xA;            reservedGateLane = lockEmptyLane(selectedGateLane);&#xA;&#xA;            if (reservedGateLane == null) {&#xA;                // we had a valid lane but we couldn't reserve it - something changed since we originally found it&#xA;                // so do a refesh to see the new values otherwise we'll pick it again&#xA;                Roastery.getHibernateApi().refresh(selectedGateLane);&#xA;            }&#xA;        }&#xA;&#xA;        return reservedGateLane;&#xA;    }&#xA;&#xA;&#xA;    public static GateLane lockEmptyLane(GateLane inLane) {&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(&quot;GateLane&quot;).addDqPredicate(PredicateFactory.eq(ArgoField.LANE_GKEY, inLane.getLaneGkey()))&#xA;                .addDqPredicate(PredicateFactory.eq(ArgoField.LANE_TRUCK_STATUS, LaneTruckStatusEnum.WAITING ));&#xA;&#xA;        dq.setSelectForUpdate(true);&#xA;        return (GateLane) Roastery.getHibernateApi().getUniqueEntityByDomainQuery(dq);&#xA;    }&#xA;&#xA;    /**&#xA;     * Build SOAP Request XML format&#xA;     */&#xA;    private static final StringBuilder RESTFULL_CONNECT_MESSAGE = new StringBuilder().append(&#xA;            &quot;&lt;?xml version='1.0' encoding='UTF-8'?&gt;\n&quot;).append(&#xA;            &quot;&lt;soapenv:Envelope xmlns:soapenv=\&quot;http://schemas.xmlsoap.org/soap/envelope/\&quot; xmlns:now=\&quot;nowsol\&quot;&gt;\n&quot;).append(&#xA;            &quot;   &lt;soapenv:Header/&gt;\n&quot;).append(&#xA;            &quot;   &lt;soapenv:Body&gt;\n&quot;).append(&#xA;            &quot;      &lt;now:realtime_update&gt;\n&quot;).append(&#xA;            &quot;         &lt;now:ConnectionType&gt;%s&lt;/now:ConnectionType&gt;\n&quot;).append(&#xA;            &quot;         &lt;now:GateLaneId&gt;%s&lt;/now:GateLaneId&gt;\n&quot;).append(&#xA;            &quot;         &lt;now:ExtConsoleId&gt;%s&lt;/now:ExtConsoleId&gt;\n&quot;).append(&#xA;            &quot;      &lt;/now:realtime_update&gt;\n&quot;).append(&#xA;            &quot;   &lt;/soapenv:Body&gt;\n&quot;).append(&#xA;            &quot;&lt;/soapenv:Envelope&gt;\n&quot;);&#xA;}" />
<digital-asset id="MATGateDisconnectTDP" short-description="MATGateDisconnectTDP" is-pre-deployed="N" groovy-code="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;import com.navis.argo.business.atoms.LaneTruckStatusEnum&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.navis.argo.portal.context.ArgoUserContext&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.presentation.FrameworkPresentationUtils&#xA;import com.navis.road.business.model.GateLane&#xA;import com.navis.road.business.model.TruckVisitDetails&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import org.apache.commons.lang.StringUtils&#xA;import wslite.soap.SOAPClient&#xA;import wslite.soap.SOAPResponse&#xA;&#xA;/**&#xA; * This groovy will send a disconnect SOAP Request to TDP. It will aslo set GateLane status to Empty and will clear the lane from the Console&#xA; *&#xA; * Author: Anburaja&#xA; * Date: 20-Jul-2015&#xA; * SFDC-142304/CSDV-3055&#xA; * Called from: Gate Configuration (Truck Visit Level)&#xA; *&#xA; * Sample SOAP Request for CONNECT and DISCONNECT message:&#xA;&#xA; &lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:now=&quot;nowsol&quot;&gt;&#xA; &lt;soapenv:Header/&gt;&#xA; &lt;soapenv:Body&gt;&#xA; &lt;now:realtime_update&gt;&#xA; &lt;now:ConnectionType&gt;CONNECT&lt;/now:ConnectionType&gt;&#xA; &lt;now:GateLaneId&gt;Lane 1&lt;/now:GateLaneId&gt;&#xA; &lt;now:ExtConsoleId&gt;CONS1&lt;/now:ExtConsoleId&gt;&#xA; &lt;/now:realtime_update&gt;&#xA; &lt;/soapenv:Body&gt;&#xA; &lt;/soapenv:Envelope&gt;&#xA;&#xA; **/&#xA;&#xA;public class MATGateDisconnectTDP extends AbstractGateTaskInterceptor implements EGateTaskInterceptor {&#xA;&#xA;  private logMsg(String inMsg) {&#xA;    log(&quot;MATGateDisconnectTDP : &quot; + inMsg);&#xA;  }&#xA;&#xA;  public void execute(TransactionAndVisitHolder inDao) {&#xA;&#xA;    logMsg(&quot;Started&quot;);&#xA;&#xA;    ArgoUserContext userContext = (ArgoUserContext) FrameworkPresentationUtils.getUserContext();&#xA;    com.navis.road.business.reference.Console console = (userContext ? (com.navis.road.business.reference.Console) HibernateApi.getInstance().load(com.navis.road.business.reference.Console.class,  userContext.getConsoleGkey()) : null)&#xA;&#xA;    if (inDao == null) {&#xA;      log(&quot;inDao is null&quot;);&#xA;      return;&#xA;    }&#xA;&#xA;    TruckVisitDetails tvd = inDao.getTv();&#xA;    if (tvd == null) {&#xA;      log(&quot;TruckVisitDetails is null&quot;);&#xA;      return;&#xA;    }&#xA;&#xA;    GateLane gateLane = tvd.getTvdtlsExitLane();&#xA;    GateLane null_value;&#xA;    //Update GateLane, Console and send SOAP Request&#xA;    if (gateLane &amp;&amp; console){&#xA;      gateLane.setLaneTruckStatus(LaneTruckStatusEnum.EMPTY);&#xA;      console.setHwLaneSelected(null_value);&#xA;&#xA;      sendRestfulMsgToTDP(&quot;DISCONNECT&quot;, gateLane, console);&#xA;    }&#xA;  }&#xA;&#xA;  /**&#xA;   * Build the SOAP request&#xA;   * @param inMsgType&#xA;   * @param inGateLane&#xA;   * @param inConsole&#xA;   * @return&#xA;   */&#xA;  private sendRestfulMsgToTDP(String inMsgType, GateLane inGateLane, com.navis.road.business.reference.Console inConsole){&#xA;    SOAPResponse response;&#xA;    String xmlMessage = (String.format(RESTFULL_CONNECT_MESSAGE.toString(), inMsgType, inGateLane.getLaneId(),inConsole.getHwconsoleIdExternal()));&#xA;    logMsg(xmlMessage);&#xA;    if (StringUtils.isBlank(xmlMessage))&#xA;      log(inMsgType + &quot; : Message failed to build&quot;);&#xA;    else&#xA;      response = sendSOAPRequest(xmlMessage);&#xA;    //for now eat the SOAP Response&#xA;  }&#xA;&#xA;  /**&#xA;   * Send SOAP Request to TDP&#xA;   * @param xmlMessage&#xA;   * @return&#xA;   */&#xA;  private SOAPResponse sendSOAPRequest(String xmlMessage) {&#xA;    try {&#xA;      GeneralReference genRef = GeneralReference.findUniqueEntryById(&quot;RESTFULLTDP&quot;, &quot;URL&quot;);&#xA;      String wsUrl = (genRef ? genRef.getRefValue1() : null);&#xA;      SOAPClient client = new SOAPClient(wsUrl);&#xA;      SOAPResponse response = client.send(xmlMessage);&#xA;      log(&quot;Connect Response = &quot;+response.getText());&#xA;      return response;&#xA;    } catch (Exception ex) {&#xA;      log(&quot;sendSOAPRequest message failed to sent due to &quot; + ex.toString());&#xA;      return null;&#xA;    }&#xA;  }&#xA;&#xA;  /**&#xA;   *  Build SOAP Request XML format&#xA;   */&#xA;  private static final StringBuilder RESTFULL_CONNECT_MESSAGE = new StringBuilder().append(&#xA;          &quot;&lt;?xml version='1.0' encoding='UTF-8'?&gt;\n&quot;).append(&#xA;          &quot;&lt;soapenv:Envelope xmlns:soapenv=\&quot;http://schemas.xmlsoap.org/soap/envelope/\&quot; xmlns:now=\&quot;nowsol\&quot;&gt;\n&quot;).append(&#xA;          &quot;   &lt;soapenv:Header/&gt;\n&quot;).append(&#xA;          &quot;   &lt;soapenv:Body&gt;\n&quot;).append(&#xA;          &quot;      &lt;now:realtime_update&gt;\n&quot;).append(&#xA;          &quot;         &lt;now:ConnectionType&gt;%s&lt;/now:ConnectionType&gt;\n&quot;).append(&#xA;          &quot;         &lt;now:GateLaneId&gt;%s&lt;/now:GateLaneId&gt;\n&quot;).append(&#xA;          &quot;         &lt;now:ExtConsoleId&gt;%s&lt;/now:ExtConsoleId&gt;\n&quot;).append(&#xA;          &quot;      &lt;/now:realtime_update&gt;\n&quot;).append(&#xA;          &quot;   &lt;/soapenv:Body&gt;\n&quot;).append(&#xA;          &quot;&lt;/soapenv:Envelope&gt;\n&quot;);&#xA;&#xA;}" />
<digital-asset id="MatRemoveHold" short-description="MatRemoveHold" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;&#xA;import com.navis.services.business.rules.Flag;&#xA;import com.navis.services.business.rules.Veto;&#xA;import com.navis.services.business.rules.FlagType;&#xA;import com.navis.services.ServicesField;&#xA;import com.navis.argo.business.reference.Chassis;&#xA;import com.navis.argo.ArgoField;&#xA;&#xA;class MatRemoveHold{&#xA;&#xA;/*Raghu Iyer : Remove hold by creating new record in Veto entity*/&#xA;&#xA;&#x9;public void execute(String unitId, String hold) {&#xA;&#x9;//public boolean execute(Map params){&#xA;&#x9;&#x9;//String unitId = &quot;MATU2550969&quot;;&#xA;&#x9;&#x9;//def hold = &quot;CG_INSP&quot;&#xA;&#x9;&#x9;println(&quot;Started calling MatRemoveHold.execute &lt;&lt;&gt;&gt;&gt; &quot;+unitId);&#xA;&#x9;  &#x9;def inj = new GroovyInjectionBase();&#xA;&#x9;  &#x9;FlagType ftype = FlagType.findFlagType(hold);&#xA;&#x9;&#x9;List flagList = null;&#xA;&#xA;&#x9;&#x9;flagList = getFlagDetails(unitId,ftype);&#xA;&#xA;&#x9;&#x9;Iterator flagIterator = flagList.iterator();&#xA;&#x9;&#x9;while(flagIterator.hasNext())&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;def flag = flagIterator.next();&#xA;&#x9;&#x9;&#x9;String vetoFound = getVetoDetails(flag);&#xA;&#x9;&#x9;&#x9;println(&quot;Is Hold already removed :::&quot;+vetoFound);&#xA;&#xA;&#x9;&#x9;&#x9;if (vetoFound == &quot;N&quot;) {&#xA;&#x9;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Removing the hold :::&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Veto veto = new Veto();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;veto.setVetoBlockedFlag(flag);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;veto.setVetoAppliedToClass(flag.flagAppliedToClass);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;veto.setVetoAppliedToPrimaryKey(flag.flagAppliedToPrimaryKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;veto.setVetoAppliedToNaturalKey(flag.flagAppliedToNaturalKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;veto.setVetoAppliedDate(ArgoUtils.timeNow());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;veto.setVetoAppliedBy(flag.flagAppliedBy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;veto.setVetoCreated(ArgoUtils.timeNow());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;veto.setVetoCreator(flag.flagAppliedBy);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Roastery.getHibernateApi().save(veto);&#xA;&#x9;&#x9;&#x9;&#x9;}catch (Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println (&quot;Error while inserting veto entity :::&quot;+e);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;CG_INSP has been already removed ::: &quot;+  flag.flagGkey +&quot; Equipment :::&quot;+ flag.flagAppliedToNaturalKey);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;public List getFlagDetails(String unitID, FlagType inFlagType)&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;ArrayList flags = new ArrayList();&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Flag&quot;).addDqPredicate(PredicateFactory.eq(ServicesField.FLAG_FLAG_TYPE, inFlagType.getFlgtypGkey())).addDqPredicate(PredicateFactory.eq(ServicesField.FLAG_APPLIED_TO_NATURAL_KEY, unitID)).addDqOrdering(Ordering.desc(ServicesField.FLAG_APPLIED_DATE));&#xA;&#x9;&#x9;&#x9;//println(&quot;dq:::::::::&quot;+dq)&#xA;&#x9;&#x9;&#x9;def flagsList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;//println(&quot;After flagsList:::: &quot;+flagsList.size());&#xA;&#x9;&#x9;&#x9;if(flagsList != null) {&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iter = flagsList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def flag = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;flags.add(flag);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return flags;&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;println(e.getMessage());&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;public String getVetoDetails(Flag flag)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;String recFound = &quot;N&quot;;&#xA;&#x9;&#x9;try {&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Veto&quot;).addDqPredicate(PredicateFactory.eq(ServicesField.VETO_BLOCKED_FLAG, flag.getFlagGkey()));&#xA;&#x9;&#x9;&#x9;//println(&quot;dq:::::::::&quot;+dq)&#xA;&#x9;&#x9;&#x9;def vetoList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;//println(&quot;After vetoList:::: &quot;+vetoList.size());&#xA;&#x9;&#x9;&#x9;if(vetoList != null) {&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iter = vetoList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def veto = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;recFound = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return recFound;&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;println(e.getMessage());&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;}" />
<digital-asset id="GvyUpdateUnitRemark" short-description="GvyUpdateUnitRemark" is-pre-deployed="N" groovy-code="import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.inventory.business.units.Unit&#xA;import org.apache.log4j.Logger&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.inventory.InventoryPropertyKeys&#xA;&#xA;/*&#xA;* Copyright (c) 2014 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;&#xA;public class GvyUpdateUnitRemark extends GroovyApi {&#xA;&#xA;  UserContext context = ContextHelper.getThreadUserContext();&#xA;  Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#xA;  public void execute(GroovyEvent event, Object api)&#xA;  {&#xA;    LOGGER.info(&quot; GvyUpdateUnitRemark started &quot; + timeNow);&#xA;&#xA;    def eq = event.getEntity();&#xA;    LOGGER.info(&quot;eq: &quot; + eq);&#xA;&#xA;    Event gvyEventObj = event.getEvent();&#xA;    String eventType =  gvyEventObj.getEventTypeId();&#xA;    def evntNotes = gvyEventObj.getEventNote();&#xA;&#xA;    LOGGER.info(&quot; Event Type : &quot; + eventType);&#xA;    LOGGER.info(&quot; Event Notes: &quot; + evntNotes);&#xA;&#xA;    Unit unit;&#xA;&#xA;    if(eventType == &quot;SHOP_HOLD&quot;){&#xA;      def gvyDataProcObj = api.getGroovyClassInstance(&quot;GvyCmisDataProcessor&quot;);&#xA;      //Getting UNIT_OBJ from EQUIP_OBJ&#xA;      unit = gvyDataProcObj.getUnitFromEquipment(eq)&#xA;    }&#xA;&#xA;    if (eventType == &quot;RD_HOLD&quot;){&#xA;      unit = event.getEntity()&#xA;    }&#xA;&#xA;    LOGGER.info(&quot;Unit: &quot; + unit);&#xA;&#xA;    if (unit == null){&#xA;      LOGGER.error(&quot; Could not find active unit&quot;);&#xA;      LOGGER.error(&quot;GvyUpdateUnitRemark ended&quot; + timeNow);&#xA;      return;&#xA;    }&#xA;&#xA;    if (unit != null){&#xA;      String unitRemark = unit.getFieldValue(UnitField.UNIT_REMARK);&#xA;      LOGGER.info (&quot; Unit Remarks: &quot; + unitRemark);&#xA;      if (unitRemark == null){&#xA;        LOGGER.info(&quot; Unit Remarks is null&quot;);&#xA;        unit.setFieldValue(UnitField.UNIT_REMARK,evntNotes);&#xA;      }&#xA;      if (unitRemark != null){&#xA;        LOGGER.info(&quot; Unit Remarks not null&quot;);&#xA;        String strRmk = unitRemark;&#xA;        if (evntNotes != null){&#xA;          strRmk = unitRemark + ' ' + evntNotes ;&#xA;        }&#xA;        LOGGER.info(&quot; Concat Value&quot; + strRmk);&#xA;        unit.setFieldValue(UnitField.UNIT_REMARK,strRmk);&#xA;      }&#xA;    }&#xA;    LOGGER.info(&quot;GvyUpdateUnitRemark ended&quot; + timeNow);&#xA;  }&#xA;  private static final Logger LOGGER = Logger.getLogger(GvyUpdateUnitRemark.class);&#xA;}" />
<digital-asset id="GvyCmisShipmentDetail" short-description="GvyCmisShipmentDetail" is-pre-deployed="N" groovy-code="package com.matson.tos.groovies&#xA;&#xA;/*&#xA;* Srno  Change Date        Desc&#xA;* A1    GR     01/29/2010  If No Avail Date the Dont pass last Free Date&#xA;* A2    GR     03/17/2010  Added ShipperId Field for DAS&#xA;* A3    GR     05/19/10    Added method for lastfreeDay to reuse in Detention Code&#xA;* A4    GR     07/13/10    Add to Fields HazDesc,HazRegs and Nbr&#xA;*/&#xA;import com.navis.inventory.business.imdg.ImdgClass&#xA;import com.navis.inventory.business.imdg.HazardItem;&#xA;import com.navis.inventory.business.imdg.Hazards;&#xA;&#xA;public class GvyCmisShipmentDetail {&#xA;&#xA;    public String doIt(Object gvyTxtMsgFmt, Object unit, String eventMsg, Object gvyBaseClass, Object event, Object isUnitObj) {&#xA;        println(&quot;In Class GvyCmisShipmentDetail.doIt()&quot;)&#xA;&#xA;        def shipmentFieldAttr = ''&#xA;        try {&#xA;            //BOOKING NUMBER&#xA;            def bookingNbr = getBookingNumber(unit, eventMsg)&#xA;            def bookingNbrAttr = gvyTxtMsgFmt.doIt('bookingNumber', bookingNbr)&#xA;&#xA;            //ARRDATE&#xA;            def arrDate = ''&#xA;            def arrDateAttr = gvyTxtMsgFmt.doIt('arrDate', arrDate)&#xA;&#xA;            //CONSIGNEE&#xA;            def consignee = getConsigneeValue(unit, eventMsg)&#xA;            def consigneeAttr = gvyTxtMsgFmt.doIt('consignee', consignee)&#xA;&#xA;            //SHIPPER&#xA;            def shipper = ''&#xA;            if (eventMsg.equals('COMMUNITY_SERVICE_ASSIGN')) {&#xA;                shipper = 'COMMUNITY SERVICE'&#xA;            } else {&#xA;                shipper = unit.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuName&quot;)&#xA;                shipper = shipper != null ? shipper : unit.getFieldValue(&quot;unitGoods.gdsShipperAsString&quot;)&#xA;            }&#xA;            def shipperAttr = gvyTxtMsgFmt.doIt('shipper', shipper)&#xA;&#xA;            //SHIPPER ID&#xA;            def shipperId = unit.getFieldValue(&quot;unitGoods.gdsShipperBzu.bzuId&quot;)&#xA;            def shipperIdAttr = gvyTxtMsgFmt.doIt('shipperId', shipperId)&#xA;&#xA;            //CNEE CODE&#xA;            def consigneeTempId = ''&#xA;            def consigneeId = unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzunit.bzuId&quot;)&#xA;            if (isUnitObj) {&#xA;                consigneeTempId = event.getProperty('GoodsConsignee')&#xA;            }&#xA;            consigneeId = consigneeId != null ? consigneeId : consigneeTempId&#xA;            def cneeCodeAttr = gvyTxtMsgFmt.doIt('cneeCode', consigneeId)&#xA;&#xA;            //HAZF&#xA;            def isHazardous = unit.getFieldValue(&quot;unitGoods.gdsIsHazardous&quot;)&#xA;            isHazardous = isHazardous == true ? 'Y' : ''&#xA;            def hazfAttr = gvyTxtMsgFmt.doIt('hazF', isHazardous)&#xA;&#xA;            //HAZ IMDG&#xA;            def hazItem = getMostHazItem(unit)&#xA;            def mostHazItem = hazItem != null ? hazItem.hzrdiImdgClass.key : null&#xA;            mostHazItem = mostHazItem != null &amp;&amp; mostHazItem.equals('X') ? 'HAZ' : mostHazItem&#xA;            def hazImdgAttr = gvyTxtMsgFmt.doIt('hazImdg', mostHazItem)&#xA;&#xA;            //HAZ NBR Type&#xA;            def hzrdItemNbrType = hazItem != null ? hazItem.hzrdiNbrType.key : null&#xA;            def hzrdItemNbrTypeAttr = gvyTxtMsgFmt.doIt('flex01', hzrdItemNbrType)&#xA;&#xA;            //HAZ UNNUM&#xA;            def mostHazNum = hazItem != null ? hazItem.hzrdiUNnum : ''&#xA;            def hazUnNumAttr = gvyTxtMsgFmt.doIt('hazUnNum', mostHazNum)&#xA;&#xA;            //HazDesc&#xA;            def hazardItemDesc = hazItem != null ? hazItem.getDescription() : null&#xA;            def hazardItemDescAttr = gvyTxtMsgFmt.doIt('hazDesc', hazardItemDesc)&#xA;            if (hazardItemDesc != null) {&#xA;                hazardItemDesc = hazardItemDesc.indexOf(' ') != -1 ? hazardItemDesc.substring(hazardItemDesc.indexOf(' ') + 1) : null&#xA;            }&#xA;            //HazReg&#xA;            def hazardItemRegs = hazardItemDesc != null ? (hazardItemDesc.contains('Liquid') ? 'DOT' : 'IMO') : ''&#xA;            def hazardItemRegsAttr = gvyTxtMsgFmt.doIt('hazRegs', hazardItemRegs)&#xA;&#xA;            //LOCATION CATEGORY - LAST FREE DATE - YY DOY&#xA;            def lastfreeDay = unit.getFieldValue(&quot;unitActiveUfv.ufvCalculatedLastFreeDay&quot;);&#xA;            def availDate = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate02&quot;) //A1&#xA;            lastfreeDay = getlastFreeDate(availDate, lastfreeDay, gvyBaseClass)&#xA;            def locationCategoryAttr = gvyTxtMsgFmt.doIt('locationCategory', lastfreeDay)&#xA;&#xA;            //CONSIGNEE PO&#xA;            def consigneePo = unit.getFieldValue(&quot;unitFlexString01&quot;)&#xA;            def consigneePoAttr = gvyTxtMsgFmt.doIt('consigneePo', consigneePo)&#xA;&#xA;            //RESTOW&#xA;            def restow = unit.getFieldValue(&quot;unitActiveUfv.ufvRestowType&quot;)&#xA;            restow = restow != null ? restow.getKey() : ''&#xA;            def restowAttr = gvyTxtMsgFmt.doIt('restow', restow)&#xA;            /**&#xA;             * UCC, ECC, doNotBackLoad for ALASKA&#xA;             */&#xA;            def UCC = unit.getFieldValue(&quot;unitFlexString15&quot;);//unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsFlexString02&quot;);&#xA;            def UCCAttr = gvyTxtMsgFmt.doIt('ucc', UCC);&#xA;            def ECC = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString08&quot;);//unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsFlexString03&quot;);&#xA;            def ECCAttr = gvyTxtMsgFmt.doIt('ecc', ECC);&#xA;            def doNotBackLoad = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString09&quot;);&#xA;            def doNotBackLoadAttr = gvyTxtMsgFmt.doIt('doNotBackLoad', doNotBackLoad);&#xA;&#xA;&#xA;            shipmentFieldAttr = bookingNbrAttr + consigneeAttr + shipperAttr + cneeCodeAttr + hazfAttr + hazImdgAttr + hazUnNumAttr + locationCategoryAttr + arrDateAttr + consigneePoAttr + restowAttr + shipperIdAttr + hazardItemDescAttr + hazardItemRegsAttr + UCCAttr + ECCAttr + doNotBackLoadAttr;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        //println('shipmentFieldAttr : '+shipmentFieldAttr)&#xA;&#xA;        return shipmentFieldAttr;&#xA;&#xA;    }&#xA;&#xA;    public String getlastFreeDate(Object availDate, String lastfreeDay, Object gvyBaseClass) {&#xA;&#xA;        if (availDate == null) {&#xA;            lastfreeDay = ''&#xA;        } else if (lastfreeDay != null &amp;&amp; lastfreeDay.indexOf(&quot;no&quot;) == -1) {&#xA;            def gvyUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;            lastfreeDay = formatDate(lastfreeDay)&#xA;            lastfreeDay = gvyUtil.convertToJulianDate(lastfreeDay)&#xA;        } else if (lastfreeDay != null &amp;&amp; lastfreeDay.indexOf(&quot;no&quot;) != -1) {&#xA;            lastfreeDay = ''&#xA;        }&#xA;        return lastfreeDay&#xA;    }&#xA;&#xA;    //Retrieves the Consignee Value&#xA;    public String getConsigneeValue(Object unit, String eventMsg) {&#xA;        def fmtConsigneeVal = ''&#xA;        try {&#xA;            def consignee = unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzunit.bzuName&quot;)&#xA;            consignee = consignee != null ? consignee : unit.getFieldValue(&quot;unitGoods.gdsConsigneeAsString&quot;)&#xA;            consignee = consignee != null ? consignee : &quot;&quot;&#xA;            def releaseToParty = unit.getFieldValue(&quot;unitFlexString02&quot;)&#xA;//  releaseToParty  =  releaseToParty != null ? (releaseToParty.length() &gt;10 ? //releaseToParty.substring(0,10) : releaseToParty) : &quot;&quot;&#xA;            releaseToParty = releaseToParty != null ? releaseToParty : &quot;&quot;&#xA;&#xA;            if (eventMsg.equals('COMMUNITY_SERVICE_ASSIGN')) {&#xA;                consignee = releaseToParty&#xA;            } else if (consignee.startsWith(&quot;PACIFIC TRANSPORTATION LINES&quot;) &amp;&amp; releaseToParty.length() &gt; 0) {&#xA;                consignee = releaseToParty.length() &gt; 0 ? &quot;PAC TRAN LINES%&quot; + releaseToParty :&#xA;                        &quot;PAC TRAN LINES&quot;&#xA;            } else {&#xA;                consignee = releaseToParty.length() &gt; 0 ? consignee + &quot;%&quot; + releaseToParty : consignee&#xA;            }&#xA;            fmtConsigneeVal = formatConsigneeSize(consignee);&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;        return fmtConsigneeVal;&#xA;&#xA;    }&#xA;&#xA;    private String formatConsigneeSize(String _consignee) {&#xA;        String consigneeVal = null;&#xA;        try {&#xA;            String consignee = _consignee;&#xA;            if (consignee != null &amp;&amp; consignee.length() &gt; 35) {&#xA;                int conLength = consignee.length();&#xA;                int perIndex = consignee.indexOf(&quot;%&quot;);&#xA;                int stripIndex = conLength - 35;&#xA;                if (perIndex &gt; 0 &amp;&amp; perIndex - stripIndex &gt; 0) {&#xA;                    consigneeVal = consignee.substring(0, perIndex - stripIndex) + consignee.substring(perIndex);&#xA;                } else {&#xA;                    consigneeVal = consignee.substring(0, 35);&#xA;                }&#xA;            } else {&#xA;                consigneeVal = consignee;&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;        return consigneeVal;&#xA;    }&#xA;&#xA;    //Method formats date to yyyy-MM-dd&#xA;    public static String formatDate(String str_date) {&#xA;        java.text.DateFormat formatter = null; Date date = null; String finalDate = null;&#xA;        try {&#xA;            formatter = new java.text.SimpleDateFormat(&quot;yyyy-MMM-dd&quot;);&#xA;            date = (Date) formatter.parse(str_date);&#xA;            def reqformat = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;            finalDate = reqformat.format(date);&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;        return finalDate;&#xA;    }&#xA;&#xA;&#xA;    public String getBookingNumber(Object unit, String eventMsg) {&#xA;        def bookingNbr = ''&#xA;        try {&#xA;            //BOOKING NUMBER&#xA;            bookingNbr = unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;)&#xA;            bookingNbr = bookingNbr != null ? bookingNbr : ''&#xA;            def equiOperator = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOperator.bzuId&quot;)&#xA;            equiOperator = equiOperator != null ? equiOperator : ''&#xA;            if ((eventMsg.equals(&quot;UNIT_IN_GATE&quot;) || eventMsg.equals(&quot;UNIT_RECEIVE&quot;)) &amp;&amp; equiOperator.equals('MAT')) {&#xA;                bookingNbr = bookingNbr.length() &gt; 7 ? bookingNbr.substring(0, 7) : bookingNbr&#xA;            }&#xA;        }&#xA;        catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return bookingNbr&#xA;    }&#xA;&#xA;&#xA;    public HazardItem getMostHazItem(Object unit) {&#xA;        HazardItem hazardIt = null;&#xA;        try {&#xA;            Hazards hazards = unit.getUnitGoods().getGdsHazards();&#xA;            int count = 0;&#xA;            if (hazards != null) {&#xA;                Iterator iterator = hazards.getHazardItemsIteratorOrderedBySeverity();&#xA;                for (aHazItem in iterator) {&#xA;                    hazardIt = (HazardItem) aHazItem;&#xA;                    return hazardIt;&#xA;                }&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return hazardIt&#xA;    }&#xA;&#xA;&#xA;}//Class Ends&#xA;" />
<digital-asset id="MatCreateAgent" short-description="MatCreateAgent" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.road.business.model.*;&#xA;import java.util.Calendar;&#xA;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;&#xA;&#xA;import com.navis.argo.ArgoConfig;&#xA;import com.navis.argo.ArgoPropertyKeys;&#xA;import com.navis.argo.ArgoRefField;&#xA;import com.navis.argo.business.reference.AgentRepresentation;&#xA;import com.navis.argo.business.atoms.BizRoleEnum;&#xA;import com.navis.argo.business.reference.Agent;&#xA;import com.navis.argo.*;&#xA;import com.navis.road.business.model.TruckingCompany;&#xA;import com.navis.framework.business.atoms.LifeCycleStateEnum;&#xA;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 01/08/2013&#xA;* Description: This groovy is used to get the trucker Id attached for the input consignee/shipper&#xA;*/&#xA;&#xA;public class MatCreateAgent extends GroovyInjectionBase&#xA;&#x9;{&#xA;&#xA;&#x9;public boolean execute(Map params)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;MatUpdateTrucker&quot;)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String trucker = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//String shipperBzuId = &quot;ABF CARTAGE INC&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//trucker = getTrucker(shipperBzuId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createAgent();&#xA;&#x9;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(e)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#xA;private createAgent()&#xA;  {&#xA;    try&#xA;    {&#xA;&#x9;&#xA;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;TruckingCompany&quot;);&#xA;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_ROLE, BizRoleEnum.HAULIER));&#xA;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_LIFE_CYCLE_STATE, LifeCycleStateEnum.ACTIVE));&#xA;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.isNotNull(ArgoRefField.BZU_PER_UNIT_GUARANTEE_LIMIT));&#xA;&#x9;&#x9;//dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_NAME,&quot;A &amp; W TRANSPORTATION LLC_GR&quot;));&#xA;&#x9;&#xA;&#x9;println(dq);&#xA;&#x9;&#xA;&#x9;List agentList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;println (&quot;agentList.size()&quot; + agentList.size());&#xA;&#xA;&#x9;Iterator iter = agentList.iterator();&#xA;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;def agent = iter.next();&#xA;&#x9;&#x9;&#x9;String agentFind = agent.getBzuId();&#xA;&#x9;&#x9;&#x9;String agentName = agent.getBzuName();&#xA;&#x9;&#x9;&#x9;Agent agent1 = Agent.findOrCreateAgent (agentFind,agentName);&#xA;&#x9;&#x9;&#x9;println(&quot; Agent Id ::::: &quot; + agent1 + &quot;::::&quot;+agentName)&#xA;&#x9;&#x9;}&#xA;    }&#xA;    catch (e)&#xA;    {&#xA;&#x9;&#x9;println(&quot;Exception :::: &quot; + e);&#xA;    }&#xA;&#xA;&#xA;  }&#xA;}" />
<digital-asset id="GvySetUnitsSparcsVisibilityJob" short-description="GvySetUnitsSparcsVisibilityJob" is-pre-deployed="N" groovy-code="import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.atoms.LocTypeEnum;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.InventoryEntity;&#xA;import com.navis.inventory.business.api.UnitField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;&#xA;import org.apache.log4j.Logger;&#xA;import java.util.Date;&#xA;import java.util.Iterator;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;/**&#xA; * Created with IntelliJ IDEA.&#xA; * User: lcrouch&#xA; * Date: 8/31/12&#xA; * Time: 11:57 AM&#xA; * To change this template use File | Settings | File Templates.&#xA; */&#xA;public class GvySetUnitsSparcsVisibilityJob {&#xA;    public String execute(Map inParameters) {&#xA;    final Date earliestDate = new Date(ArgoUtils.timeNowMillis() - ArgoUtils.MILLIS_PER_HOUR);&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT_FACILITY_VISIT)&#xA;            .addDqPredicate(PredicateFactory.in(UnitField.UFV_VISIT_STATE, Unit.HISTORY_STATES))&#xA;            .addDqPredicate(PredicateFactory.eq(UnitField.UFV_VISIBLE_IN_SPARCS, Boolean.TRUE))&#xA;            .addDqPredicate(PredicateFactory.ne(UnitField.UFV_POS_LOC_TYPE, LocTypeEnum.VESSEL))&#xA;            .addDqPredicate(PredicateFactory.isNotNull(UnitField.UFV_TIME_COMPLETE))&#xA;            .addDqPredicate(PredicateFactory.le(UnitField.UFV_TIME_COMPLETE, earliestDate))&#xA;            .setDqMaxResults(200);&#xA;            dq.setRequireTotalCount(false);&#xA;    List&lt;UnitFacilityVisit&gt; ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;    for (Iterator&lt;UnitFacilityVisit&gt; iterator = ufvList.iterator(); iterator.hasNext();) { &#xA;        UnitFacilityVisit ufv = iterator.next();&#xA;        ufv.setUfvVisibleInSparcs(Boolean.FALSE);&#xA;        if (LOGGER.isDebugEnabled()) {&#xA;            LOGGER.debug(&quot;making &quot; + ufv.getUfvUnit().getUnitId() + &quot; invisible in SPARCS&quot;);&#xA;        }&#xA;    }&#xA;    }&#xA;    private static final Logger LOGGER = Logger.getLogger(GvySetUnitsSparcsVisibilityJob.class);&#xA;&#xA;}" />
<digital-asset id="MATTriggerGroovyJob" short-description="MATTriggerGroovyJob" is-pre-deployed="N" groovy-code="import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import org.apache.log4j.Logger&#xA;&#xA;/*&#xA;* Copyright (c) 2012 Navis LLC. All Rights Reserved.&#xA;*  AUTHOR: Siva Raja&#xA;*  Date Written: July 23rd, 2012&#xA;*  Description: To be Written&#xA;*/&#xA;&#xA;public class MATTriggerGroovyJob extends GroovyApi {&#xA;&#xA;  UserContext context = ContextHelper.getThreadUserContext();&#xA;  Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;  private static final Logger LOGGER = Logger.getLogger(MATTriggerGroovyJob.class);&#xA;&#xA;  public void triggerGroovyJob(GroovyEvent event, Object api){&#xA;    LOGGER.warn(&quot; MATTriggerGroovyJob started &quot; + timeNow);&#xA;    Unit tempUnit = (Unit) event.getEntity();&#xA;    this.getGroovyClassInstance(&quot;MATProcessNewVess&quot;).execute(tempUnit);&#xA;    LOGGER.warn(&quot; MATTriggerGroovyJob ended &quot; + timeNow);&#xA;}&#xA;&#xA;public void triggerMatVesGroovyJob(GroovyEvent event, Object api){&#xA;    LOGGER.warn(&quot; MATTriggerGroovyJob started for MATProcessMatsonVess &quot; + timeNow);&#xA;    Unit tempUnit = (Unit) event.getEntity();&#xA;    this.getGroovyClassInstance(&quot;MATProcessMatsonVess&quot;).execute(tempUnit);&#xA;    LOGGER.warn(&quot; MATTriggerGroovyJob for MATProcessMatsonVess ended &quot; + timeNow);&#xA;}&#xA;&#xA;public void triggerMatVesEventGroovyJob(GroovyEvent event, Object api){&#xA;    LOGGER.warn(&quot; MATTriggerGroovyJob started for MATProcessMatsonVess &quot; + timeNow);&#xA;    Unit tempUnit = (Unit) event.getEntity();&#xA;    this.getGroovyClassInstance(&quot;MATProcessMatsonVess&quot;).createBdaEdtEvent(event,tempUnit);&#xA;    LOGGER.warn(&quot; MATTriggerGroovyJob for MATProcessMatsonVess ended &quot; + timeNow);&#xA;}&#xA;&#xA;//RO RO CONTAINER REPORT&#xA;&#xA;public void triggerROROContainerReport(GroovyEvent event, Object api){&#xA;    LOGGER.warn(&quot; MATTriggerGroovyJob.triggerROROContainerReport started for MATProcessMatsonVess &quot; + timeNow);&#xA;    Unit tempUnit = (Unit) event.getEntity();&#xA;   this.getGroovyClassInstance(&quot;MATProcessMatsonVess&quot;).sendingROROContainersReport(tempUnit);&#xA;    LOGGER.warn(&quot; MATTriggerGroovyJob.triggerROROContainerReport for MATProcessMatsonVess ended &quot; + timeNow);&#xA;}&#xA;&#xA;&#xA;}" />
<digital-asset id="GvyCheckUnitEquipHolds" short-description="GvyCheckUnitEquipHolds" is-pre-deployed="N" groovy-code="import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.argo.business.reference.Equipment;&#xA;import com.navis.framework.util.internationalization.PropertyKey;&#xA;import com.navis.framework.util.internationalization.PropertyKeyFactory;&#xA;import com.navis.framework.util.message.MessageLevel;&#xA;import com.navis.inventory.business.atoms.EqUnitRoleEnum;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.business.units.UnitEquipment;&#xA;import com.navis.road.business.atoms.TranSubTypeEnum;&#xA;import com.navis.road.business.model.TruckTransaction;&#xA;import com.navis.road.business.util.RoadBizUtil;&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder;&#xA;import com.navis.services.business.rules.Flag;&#xA;import com.navis.services.business.rules.FlagType;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Arrays;&#xA;import java.util.List;&#xA;&#xA;/**&#xA; * Created with IntelliJ IDEA.&#xA; * User: lcrouch&#xA; * Date: 8/21/12&#xA; * Time: 4:04 PM&#xA; * Checks the unit equipment guardian holds on the chassis, sends error msg if the hold exists&#xA; */&#xA;public class GvyCheckUnitEquipHolds {&#xA;    public void execute(TransactionAndVisitHolder dao, GroovyApi api) {&#xA;        TruckTransaction tran = dao.getTran();&#xA;        Unit unit = tran.getTranUnit();&#xA;        UnitEquipment unitEquipment;&#xA;        List&lt;String&gt; eqHoldsList = Arrays.asList(&quot;CL&quot;,&quot;SHOP&quot;);&#xA;&#xA;        if(TranSubTypeEnum.DC.equals(dao.getTran().getTranSubType())){&#xA;            unitEquipment = unit.getUnitPrimaryUe();&#xA;        } else {&#xA;            unitEquipment = unit.getUeInRole(EqUnitRoleEnum.CARRIAGE);&#xA;        }&#xA;        if(unitEquipment != null){&#xA;&#xA;            for(String aEqHold : eqHoldsList){&#xA;                FlagType ftype = FlagType.findFlagType(aEqHold);&#xA;                List flagList = Flag.findActiveFlagsForEntity(ftype,unitEquipment.getUeEquipmentState(),null);&#xA;&#xA;                if(flagList != null &amp;&amp; flagList.size() &gt; 0){&#xA;                    PropertyKey HOLD_EXISTS = PropertyKeyFactory.valueOf(&quot;gate.hold_exists&quot;);&#xA;                    RoadBizUtil.appendMessage(MessageLevel.SEVERE,HOLD_EXISTS,aEqHold);&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;    }&#xA;}&#xA;" />
<digital-asset id="GvySnxMailBox" short-description="GvySnxMailBox - Post Snx Error via Jms to TDP" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import java.io.File;&#xA;import java.io.FileReader&#xA;import java.io.BufferedReader&#xA;import java.lang.StringBuilder&#xA;import javax.xml.bind.JAXBContext&#xA;import javax.xml.bind.JAXBException&#xA;import javax.xml.bind.Unmarshaller&#xA;import javax.xml.bind.Marshaller&#xA;import java.io.StringWriter&#xA;import com.navis.argo.util.XmlUtil&#xA;import java.io.InputStream;&#xA;import java.io.OutputStream;&#xA;import java.io.FileInputStream;&#xA;import java.io.FileOutputStream;&#xA;&#xA;&#xA;public class GvySnxMailBox extends GroovyInjectionBase {&#xA;&#xA;String path = &quot;/var/tmp/snxmailbox/errors&quot;;&#xA;String archivePath = &quot;/var/tmp/snxmailbox/archive&quot;; &#xA;&#xA;&#x9;public String execute(Map inParameters) {&#xA;&#x9;  println(&quot;Groovy test started&quot;);&#xA;&#x9;  def snxObj = null;&#xA;&#x9;  String fileStr = null;  &#xA;&#x9;  String fileName = null;&#xA;&#x9;  def units = null;&#xA;        try{&#xA;           File dir = new File(path);&#xA;           File[] files = dir.listFiles(); &#xA;&#x9;&#x9;   println(&quot;directory read test&quot;);&#xA;           for (File file : files){&#xA;              fileName = file.getName()&#xA;              println(&quot;PICKED ERROR FILE ---&quot;+fileName);&#xA;              processFile(file) &#xA;              println(&quot;PROCESSED ERROR FILE ---&quot;+fileName); &#xA;&#x9;&#x9;&#x9;  copyfile(file, archivePath+&quot;/&quot;+fileName) //Copy File to ARchive Folder&#xA;&#x9;&#x9;&#x9;  file.delete(); &#xA;&#x9;&#x9;&#x9;  println(&quot;DELETE ERROR FILE ---&quot;+fileName); &#xA;&#x9;&#x9;   }&#xA;        }catch(Exception e){&#xA;&#x9;&#x9;   e.printStackTrace();&#xA;        }&#xA; &#x9;}&#xA;&#xA;    public void processFile(File file){&#xA;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;BufferedReader br = new BufferedReader(new FileReader(file));&#xA;&#x9;&#x9;&#x9;StringBuilder sb = null;&#xA;&#x9;&#x9;&#x9;String errorMsg = null;&#xA;&#x9;&#x9;&#x9;String strUnit = null;&#xA;&#x9;&#x9;&#x9;String line = null;&#xA;&#x9;&#x9;&#x9;while ((line = br.readLine()) != null){&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if(sb == null){ sb = new StringBuilder() } //Create Buffer For First unit&#xA;&#xA;                 if(line == null || line.trim().length() == 0 ){&#xA;                     sendXmlOut(sb.toString())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; sb = new StringBuilder();&#x9;  &#xA;                 }else if(line.contains('ns2:snx')){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; if(line.contains('&lt;/ns2:snx')){&#xA;                        sendXmlOut(sb.toString())  //Post last Unit  &#xA;&#x9;&#x9;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;&#x9;&#x9; }else if(line.contains('&lt;!--Error')){&#xA;                    line = line.replace('&lt;!--Error',''); &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;line = line.replace('--&gt;','');&#xA;                    errorMsg = &quot;&lt;argo:snx-error xmlns:argo='http://www.navis.com/argo' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation='http://www.navis.com/argo snxError.xsd'&gt;&lt;argo:reason&gt;&quot;+line+&quot;&lt;/argo:reason&gt;&lt;argo:payload&gt;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sb.append(errorMsg)&#xA;&#x9;&#x9;&#x9;&#x9; }else if(line.contains('&lt;unit')){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Error Unit:&quot;+line)&#xA;                    line = line.replace('&lt;','&amp;lt;'); &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;line = line.replace('&gt;','&amp;gt;');  &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;strUnit = &quot;&amp;lt;?xml version='1.0' encoding='UTF-8' standalone='yes'?&amp;gt;&amp;lt;ns2:snx xmlns:ns2='http://www.navis.com/argo'&amp;gt;&quot;+line+&quot;&amp;lt;/ns2:snx&amp;gt;&lt;/argo:payload&gt;&lt;/argo:snx-error&gt;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sb.append(strUnit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9; }&#x9;  &#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;br.close();&#xA;        }catch(Exception e){&#xA;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;        }&#xA;&#x9;&#x9;return null;&#xA;    }&#xA;&#xA;&#x9;public void sendXmlOut(String xml){&#xA;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;sendXml(xml);&#xA;            //println(&quot;sendXml  ----------&quot;+xml); &#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;e.printstackTrace();&#xA;&#x9;&#x9;&#x9;//Add Code to Put intp Integration Errors &#xA;        }&#xA;    }&#xA;&#xA;&#x9;private static void copyfile(File f1, String dtFile){&#xA;    try&#xA;    {&#xA;     File f2 = new File(dtFile);&#xA;     InputStream input = new FileInputStream(f1);&#xA;  &#xA;     //For Overwrite the file.&#xA;     OutputStream output = new FileOutputStream(f2);&#xA;&#xA;     byte[] buf = new byte[1024];&#xA;     int len;&#xA;     while ((len = input.read(buf)) &gt; 0){&#xA;      output.write(buf, 0, len);&#xA;     }&#xA;      input.close();&#xA;      output.close();&#xA;      println(&quot;--- Error File copied ---&quot;);&#xA;    }&#xA;    catch(Exception ex){&#xA;       ex.printStackTrace()&#xA;       throw ex; &#xA;    }&#xA;  }&#xA;&#xA;}" />
<digital-asset id="MatReportTempDiscrepancy" short-description="MatReportTempDiscrepancy" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.atoms.EquipRfrTypeEnum&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.framework.metafields.Metafield&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.framework.util.internationalization.ITranslationContext&#xA;import com.navis.framework.util.internationalization.PropertyKey&#xA;import com.navis.framework.util.internationalization.PropertyKeyFactory&#xA;import com.navis.framework.util.internationalization.TranslationUtils&#xA;import com.navis.framework.util.message.MessageLevel&#xA;import com.navis.framework.util.unit.TemperatureUnit&#xA;import com.navis.framework.util.unit.UnitUtils&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import org.apache.commons.lang.StringUtils&#xA;import com.navis.road.business.atoms.TranSubTypeEnum&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.framework.util.DateUtil;&#xA;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.framework.portal.FieldChanges&#xA;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 11/04/2013&#xA;* Description: This groovy is used to generate alert email for temperature discrepancy while UNIT_DRAY_IN (Ingate)&#xA;*/&#xA;&#xA;public class MatReportTempDiscrepancy extends GroovyInjectionBase&#xA;&#x9;{&#xA;&#xA;&#x9;&#x9;public static String EMAIL_FROM = &quot;1aktosdevteam@matson.com&quot;&#xA;&#x9;&#x9;public static String EMAIL_TO = &quot;1aktosdevteam@matson.com&quot;&#xA;&#x9;&#x9;//public static String EMAIL_TO = &quot;1aktosdevteam@matson.com&quot;&#xA;&#x9;&#x9;public static String SUBJECT = &quot;Dray-In Temp. Discrepancy&quot;&#xA;&#xA;&#x9;&#x9;private String outBoundCarrierId = null&#xA;&#x9;&#x9;def inj = new GroovyInjectionBase();&#xA;&#xA;public void getEventChanges(Object event)&#xA;&#x9;{&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;println(&quot;Calling getEventChangesTest&quot;);&#xA;&#x9;&#x9;&#x9;def gvyBaseClass = new GroovyInjectionBase()&#xA;&#x9;&#x9;&#x9;Set set = event.getEvent().getEvntFieldChanges();&#xA;&#x9;&#x9;&#x9;Iterator iter = set.iterator();&#xA;&#x9;&#x9;&#x9;EventFieldChange efc;&#xA;&#x9;&#x9;&#x9;while ( iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;efc = (EventFieldChange)iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;get feild change Value :&quot;+efc.getMetafieldId() + &quot;--&gt;&quot;+ efc.getPrevVal() + &quot;--&gt;&quot;+ efc.getNewVal())&#xA;&#x9;&#x9;&#x9;&#x9;if (&quot;rfreqTempRequiredC&quot;.equalsIgnoreCase(efc.getMetafieldId()))&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = event.entity;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;&lt;&lt;&lt;&lt;unit&gt;&gt;&gt;&gt;&gt;&quot;+unit.unitId);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String ctrNbr = unit.unitId;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String blNbr = unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String dest = unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Double prevReeferTempC = Double.parseDouble(efc.getPrevVal());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Double newReeferTempC = Double.parseDouble(efc.getNewVal());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Double prevReeferTempF = celsiusToFahrenheit(prevReeferTempC);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;&lt;&lt;&lt;prevReeferTempF&gt;&gt;&gt;&gt;&gt;&quot;+prevReeferTempF);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Double newReeferTempF = celsiusToFahrenheit(newReeferTempC);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;&lt;&lt;&lt;newReeferTempF&gt;&gt;&gt;&gt;&gt;&quot;+newReeferTempF);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (newReeferTempF != prevReeferTempF){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String body = generateReport(ctrNbr, blNbr, newReeferTempF, prevReeferTempF, dest, &quot;Gate&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def gvyEmailSender = gvyBaseClass.getGroovyClassInstance(&quot;EmailSender&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;gvyEmailSender.custSendEmail(EMAIL_TO, SUBJECT, body)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;No discrepancy in the SIT and GATE Temperature for Dray-In Unit :::&quot;+ctrNbr +&quot; SIT Temp ::&quot;+prevReeferTempF +&quot; Gate Temp ::&quot;+newReeferTempF);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;public double celsiusToFahrenheit(Double celsius)&#xA;    {&#xA;        double fahr = (celsius * 9/5) + 32;&#xA;        double result = new BigDecimal(&quot;&quot;+fahr).setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue();&#xA;        return result;&#xA;    }&#xA;&#xA;public String generateReport(String ctrNbr, String blNbr, Double gateTemp, Double sitTemp, String dest, String noticeFrom)&#xA;&#x9;{&#xA;&#x9;&#x9;def timezone = ContextHelper.getThreadUserTimezone();&#xA;        def eventTime = DateUtil.convertDateToLocalTime(new Date(), timezone);&#xA;        StringBuffer header = new StringBuffer();&#xA;&#x9;&#x9;header.append(&quot;    Date:&quot;+eventTime);&#xA;&#x9;&#x9;header.append(&quot;\n\n\n                       MATSON TERMINALS - CONTAINER YARD     &quot;);&#xA;&#x9;&#x9;header.append(&quot;\n\n\n    From    : &quot;+noticeFrom);&#xA;&#x9;&#x9;header.append(&quot;\n    Subject : Dray-In Temperature Discrepancy&quot;);&#xA;&#x9;&#x9;header.append(&quot;\n\n\n    Container: &quot;+ctrNbr+&quot;   Booking # : &quot;+blNbr+&quot;   Gate Temp: &quot;+Double.toString(gateTemp)+&quot;   SIT Temp: &quot;+Double.toString(sitTemp)+&quot;   Port: &quot;+dest);&#xA;&#x9;&#x9;header.append(&quot;\n\n\n\n&quot;);&#xA;&#xA;&#x9;&#x9;return header.toString();&#xA;&#x9;}&#xA;}" />
<digital-asset id="MATBargeYBDepartUnitsTest" short-description="MATBargeYBDepartUnitsTest" is-pre-deployed="N" groovy-code="import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.atoms.EquipMaterialEnum&#xA;import com.navis.argo.business.atoms.FlagStatusEnum&#xA;import com.navis.argo.business.atoms.FlagPurposeEnum;&#xA;import com.navis.argo.business.atoms.FreightKindEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.services.business.rules.ServiceImpediment&#xA;import org.apache.log4j.Logger&#xA;import java.text.SimpleDateFormat&#xA;import javax.jms.JMSException&#xA;import javax.jms.Session&#xA;import javax.jms.Connection&#xA;import javax.jms.ConnectionFactory&#xA;import javax.jms.MessageProducer&#xA;import javax.jms.Destination&#xA;import javax.naming.Context&#xA;import javax.naming.InitialContext&#xA;import javax.jms.TextMessage&#xA;import javax.jms.*&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.reference.Group;&#xA;import com.navis.inventory.business.units.Routing;&#xA;import org.apache.activemq.ActiveMQConnectionFactory;&#xA;&#xA;import java.text.DateFormat;&#xA;import com.navis.argo.business.model.Facility;&#xA;&#xA;&#x9;/*&#xA;&#xA;&#x9;Date Written: 07/06/2012&#xA;&#x9;Author: Siva Raja&#xA;&#x9;Description: Groovy to extract unit details based on ane event recorded and send xml data to MNS application using JMS.&#xA;&#x9;  */&#xA;&#xA;&#x9;public class  MATBargeYBDepartUnitsTest extends GroovyApi {&#xA;&#xA;&#x9;  UserContext context = ContextHelper.getThreadUserContext();&#xA;&#x9;  Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#xA;  &#x9;private static final String XML_OVERRIDE = &quot;\&quot;&quot;;&#xA;  &#x9;private static final String honFacility = &quot;HON&quot;;&#xA;  &#x9;private static final String XML_END_ELEMENT = &quot;/&gt;&quot;;&#xA;  &#x9;private static final String queueName = &quot;jms.tos.newvess.inbound&quot;;&#xA;  &#x9;private static final String topicName = &quot;jms.topic.tdp.newVesselHon&quot;;&#xA;&#x9;private static final String url = &quot;tcp://10.201.2.145:61616&quot;;//production&#xA;&#x9;private String addNode = &quot;Y&quot;;&#xA;&#xA;&#x9;//  public void execute()&#xA;&#x9;public boolean getBargeUnits(String carrierId, String isBarge, String facility, String nextFacility)&#xA;&#x9;  {&#xA;&#x9;&#x9;LOGGER.warn(&quot;MATBargeYBDepartUnits started&quot; + timeNow);&#xA;&#x9;&#x9;println(&quot;MATBargeYBDepartUnits getBargeUnits started&quot; + timeNow);&#xA;&#x9;&#x9;println(&quot;Parameters------------------&gt;&quot;+carrierId +&quot; &quot;+facility+&quot; &quot;+ nextFacility+&quot; &quot;+isBarge)&#xA;&#x9;&#x9;//String cv = &quot;ALE252A&quot;;&#xA;&#x9;&#x9;String cv =carrierId;&#xA;&#x9;&#x9;if (isBarge == &quot;BARGE&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if ((facility == &quot;HON&quot;) &amp;&amp; ((nextFacility == &quot;KHI&quot;)||(nextFacility == &quot;KAH&quot;)||(nextFacility == &quot;NAW&quot;)||&#xA;&#x9;&#x9;&#x9;(nextFacility == &quot;LNI&quot;) || (nextFacility == &quot;MOL&quot;) || (nextFacility == &quot;MIX&quot;) || (nextFacility == &quot;HIL&quot;))&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;List units = getActiveUnits(cv)&#xA;&#x9;&#x9;&#x9;&#x9;UnitFacilityVisit ufv = null;&#xA;&#x9;&#x9;&#x9;&#x9;Iterator unitIterator = units.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(unitIterator.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = unitIterator.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(unit.getUnitId());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ufv = unit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;:::::::UFV::::::::::::::&quot;+ufv);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//UnitFacilityVisit ufv = unit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;&#x9;&#x9;//if (ufv == null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//LOGGER.warn (&quot; Unit facility is null&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//return;&#xA;&#x9;&#x9;&#x9;&#x9;//}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;def carrierMode = LocTypeEnum.getEnum(&quot;VESSEL&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;println(carrierMode);&#xA;&#x9;&#x9;&#x9;&#x9;def obCarrierVisit = CarrierVisit.findCarrierVisit(ContextHelper.getThreadFacility(), carrierMode, cv);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//CarrierVisit cv1 = ufv.getInboundCarrierVisit();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//Facility fcy = Facility.findFacility(&quot;HON&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;&#x9;&#x9;&#x9;&#x9;CarrierVisit cv1 =  CarrierVisit.findVesselVisit(fcy,cv)&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;obCarrierVisit&quot;+obCarrierVisit+&quot; &quot;+cv1);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;List unitList = this.getActiveUnits(cv);&#xA;&#x9;&#x9;&#x9;&#x9;//if (unitList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//LOGGER.warn (&quot;No Units in CV&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;//return;&#xA;&#x9;&#x9;&#x9;&#x9;//}&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;buildXmlElement Start &quot; + cv);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;buildXmlElement Start &quot; + cv);&#xA;&#x9;&#x9;&#x9;&#x9;StringBuffer xml = this.buildXmlElement(unitList, cv1);&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(xml.toString());&#xA;&#x9;&#x9;&#x9;&#x9;println(xml.toString());&#xA;&#x9;&#x9;&#x9;&#x9;//Send the Complete XML string to MNS application using JMS queue.&#xA;&#x9;&#x9;&#x9;&#x9;this.send(xml.toString());&#xA;&#x9;&#x9;&#x9;&#x9;this.topicSend(xml.toString());&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;MATBargeYBDepartUnits ended&quot; + timeNow);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;MATBargeYBDepartUnits ended&quot; + timeNow);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;println(&quot;Carrier &quot; + carrierId +&quot; is a &quot;+ isBarge)&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;  }&#xA;&#xA;&#x9;//  public void execute()&#xA;&#x9;public boolean execute(Map  params)&#xA;&#x9;  {&#xA;&#x9;&#x9;LOGGER.warn(&quot;MATBargeYBDepartUnitsTest started&quot; + timeNow);&#xA;&#x9;&#x9;println(&quot;MATBargeYBDepartUnitsTest started&quot; + timeNow);&#xA;&#x9;&#x9;String cv = &quot;YB2424A&quot;;&#xA;&#xA;&#x9;&#x9;List units = getActiveUnits(cv)&#xA;&#x9;&#x9;UnitFacilityVisit ufv = null;&#xA;&#x9;&#x9;Iterator unitIterator = units.iterator();&#xA;&#x9;&#x9;while(unitIterator.hasNext())&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;def unit = unitIterator.next();&#xA;&#x9;&#x9;&#x9;println(unit.getUnitId());&#xA;&#x9;&#x9;&#x9;ufv = unit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;&#x9;println(&quot;:::::::UFV::::::::::::::&quot;+ufv);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;//UnitFacilityVisit ufv = unit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;//if (ufv == null){&#xA;&#x9;&#x9;&#x9;//LOGGER.warn (&quot; Unit facility is null&quot;);&#xA;&#x9;&#x9;&#x9;//return;&#xA;&#x9;&#x9;//}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;def carrierMode = LocTypeEnum.getEnum(&quot;VESSEL&quot;);&#xA;&#x9;&#x9;println(carrierMode);&#xA;&#x9;&#x9;def obCarrierVisit = CarrierVisit.findCarrierVisit(ContextHelper.getThreadFacility(), carrierMode, cv);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;//CarrierVisit cv1 = ufv.getInboundCarrierVisit();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;//Facility fcy = Facility.findFacility(&quot;HON&quot;);&#xA;&#x9;&#x9;def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;&#x9;&#x9;CarrierVisit cv1 =  CarrierVisit.findVesselVisit(fcy,cv)&#xA;&#x9;&#x9;println(&quot;obCarrierVisit&quot;+obCarrierVisit+&quot; &quot;+cv1);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;List unitList = this.getActiveUnits(cv);&#xA;&#x9;&#x9;//if (unitList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;//LOGGER.warn (&quot;No Units in CV&quot;);&#xA;&#x9;&#x9;&#x9;//return;&#xA;&#x9;&#x9;//}&#xA;&#x9;&#x9;LOGGER.warn(&quot;buildXmlElement Start &quot; + cv);&#xA;&#x9;&#x9;println(&quot;buildXmlElement Start &quot; + cv);&#xA;&#x9;&#x9;if (unitList.size() &gt; 0 ){&#xA;&#x9;&#x9;&#x9;StringBuffer xml = this.buildXmlElement(unitList, cv1);&#xA;&#x9;&#x9;&#x9;LOGGER.warn(xml.toString());&#xA;&#x9;&#x9;&#x9;println(xml.toString());&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;LOGGER.warn(&quot;MATBargeYBDepartUnitsTest ended&quot; + timeNow);&#xA;&#x9;&#x9;println(&quot;MATBargeYBDepartUnitsTest ended&quot; + timeNow);&#xA;&#x9;  }&#xA;&#xA;&#x9;public List getActiveUnits(String vesVoy)&#xA;&#x9;{&#xA;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;//dq = dq.addDqPredicate(PredicateFactory.in(UnitField.UFV_UNIT_ID, &quot;MATU2585775&quot;))&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if(vesVoy.startsWith('YB')) {&#xA;&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_INTENDED_OB_ID,vesVoy));&#xA;&#xA;            &#x9;}  else {&#xA;&#xA;                dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID,vesVoy));&#xA;&#xA;            &#x9;}&#xA;&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;  println(dq);&#xA;&#x9;&#x9;&#x9;&#x9;  def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;&#x9;  println(&quot;After unitList&quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;&#x9;  if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(unit.getFieldValue(&quot;unitVisitState&quot;).equals(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; def ufvFcy = unit.getUfvForFacilityCompletedOnly(fcy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; //if (ufvFcy != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; units.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;  }&#xA;&#x9;&#x9;&#x9;&#x9;  println(&quot;unitsSize&quot; + units.size);&#xA;&#x9;&#x9;&#x9;&#x9;return units;&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;&#x9;   }&#xA;&#xA;&#x9;  public void send(String msg) throws JMSException, Exception {&#xA;&#xA;&#x9;        LOGGER.warn (&quot; in send message &quot;);&#xA;&#x9;        Session                &#x9;session    = null;&#xA;&#x9;        javax.jms.Connection&#x9;connection = null;&#xA;&#x9;        ConnectionFactory      &#x9;cf         = null;&#xA;&#x9;        MessageProducer        &#x9;mp         = null;&#xA;&#x9;        Destination&#x9;&#x9;&#x9;&#x9;destination = null;&#xA;    &#x9;&#x9;println( &quot;Calling MATBargeYBDepartUnits.send using ActiveMQConnectionFactory&quot;);&#xA;&#x9;        try {&#xA;&#x9;          LOGGER.warn( &quot;Getting Connection Factory&quot;);&#xA;&#x9;          cf = new ActiveMQConnectionFactory(url);&#xA;&#x9;          LOGGER.warn( &quot;Getting Queue&quot;);&#xA;&#x9;          LOGGER.warn( &quot;Getting Connection for Queue &quot; + cf);&#xA;&#x9;          connection = cf.createConnection();&#xA;&#x9;          LOGGER.warn( &quot;staring the connection&quot;);&#xA;&#x9;          connection.start();&#xA;&#x9;          LOGGER.warn( &quot;creating session&quot;);&#xA;&#x9;          session = connection.createSession(false, 1);&#xA;&#x9;          LOGGER.warn( &quot;creating messageProducer&quot;);&#xA;&#x9;    &#x9;  destination = session.createQueue(queueName);&#xA;&#x9;          mp = session.createProducer(destination);&#xA;&#x9;    &#x9;  LOGGER.warn( &quot;creating TextMessage&quot;);&#xA;&#x9;          TextMessage outMessage = session.createTextMessage( msg);&#xA;&#x9;          LOGGER.warn( &quot;sending Message to queue: &quot; + queueName);&#xA;&#x9;          mp.send(outMessage);&#xA;&#x9;          mp.close();&#xA;&#x9;    &#x9;  session.close();&#xA;&#x9;          connection.close();&#xA;&#x9;        }&#xA;&#x9;        catch (Exception je)&#xA;&#x9;        {&#xA;&#x9;          LOGGER.warn(&quot;Exception in send:&quot; + je )&#xA;&#x9;        }&#xA;&#x9;      }&#xA;&#xA;&#x9;     public void topicSend(String msg) throws JMSException, Exception {&#xA;&#x9;     &#x9;LOGGER.warn (&quot; in topicSend message &quot;);&#xA;&#x9;    &#x9;TopicSession&#x9;&#x9;&#x9;session    = null;&#xA;&#x9;    &#x9;TopicConnection&#x9;&#x9;&#x9;connection = null;&#xA;&#x9;    &#x9;TopicConnectionFactory&#x9;cf         = null;&#xA;&#x9;    &#x9;MessageProducer        &#x9;mp         = null;&#xA;&#x9;    &#x9;Destination&#x9;&#x9;&#x9;&#x9;destination = null;&#xA;    &#x9;&#x9;println( &quot;Calling MATBargeYBDepartUnits.topicSend using ActiveMQConnectionFactory&quot;);&#xA;&#x9;    &#x9;try {&#xA;&#xA;&#x9;    &#x9;&#x9;LOGGER.warn (&quot;Getting Connection Factory&quot;);&#xA;&#x9;    &#x9;&#x9;cf = new ActiveMQConnectionFactory(url);&#xA;&#xA;&#x9;    &#x9;&#x9;LOGGER.warn(&quot;Getting Connection for Topic&quot;);&#xA;&#x9;    &#x9;&#x9;connection = cf.createTopicConnection();&#xA;&#xA;&#x9;    &#x9;&#x9;LOGGER.warn( &quot;staring the connection&quot;);&#xA;&#x9;    &#x9;&#x9;connection.start();&#xA;&#xA;&#x9;    &#x9;&#x9;LOGGER.warn( &quot;creating session&quot;);&#xA;&#x9;    &#x9;&#x9;session = connection.createTopicSession(false, 1);&#xA;&#x9;    &#x9;&#x9;destination = session.createTopic(topicName);&#xA;&#xA;&#x9;    &#x9;&#x9;LOGGER.warn( &quot;creating messageProducer&quot;);&#xA;&#x9;    &#x9;&#x9;mp = session.createProducer(destination);&#xA;&#xA;&#x9;    &#x9;&#x9;LOGGER.warn( &quot;creating TextMessage&quot;);&#xA;&#x9;    &#x9;&#x9;TextMessage outMessage = session.createTextMessage( msg);&#xA;&#xA;&#x9;    &#x9;&#x9;LOGGER.warn( &quot;sending Message to topic: &quot; + topicName);&#xA;&#x9;    &#x9;&#x9;mp.send(outMessage);&#xA;&#xA;&#x9;    &#x9;&#x9;mp.close();&#xA;&#x9;    &#x9;&#x9;session.close();&#xA;&#x9;    &#x9;&#x9;connection.close();&#xA;&#x9;        }&#xA;&#x9;        catch (Exception je)&#xA;&#x9;        {&#xA;&#x9;    &#x9;LOGGER.warn(&quot;Exception in topicSend:&quot; + je )&#xA;&#x9;        }&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;  private List&lt;Unit&gt; getUnitListInCv(CarrierVisit inCv){&#xA;&#x9;&#x9;println (&quot;getUnitListInCv Start&quot;)&#xA;&#x9;&#x9;ArrayList vesVistUnitLists = new ArrayList();&#xA;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(ArgoField.UFV_ACTUAL_IB_CV, inCv.getCvGkey()))&#xA;&#x9;&#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.in(UnitField.UNIT_ID, &quot;TCLU4120450&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.in(UnitField.UNIT_VISIT_STATE, &quot;S70_DEPARTED&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;println(&quot;dq============&quot;+dq)&#xA;&#x9;&#x9;HibernateApi hibernate = HibernateApi.getInstance();&#xA;&#x9;&#x9;List unitList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;println(&quot;unitList list Size :&quot;+unitList.size())&#xA;&#x9;&#x9;println (&quot;getUnitListInCv End&quot;)&#xA;&#x9;&#x9;return unitList;&#xA;&#x9;&#x9;//}&#xA;&#xA;&#x9;  }&#xA;&#xA;&#x9;  private StringBuffer buildXmlElement(List inUnitList, CarrierVisit inCv){&#xA;&#x9;&#x9;StringBuffer elementList = new StringBuffer();&#xA;&#x9;&#x9;//Build the XML Root Elements&#xA;&#x9;&#x9;elementList.append(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot; standalone=\&quot;yes\&quot;?&gt;&quot;);&#xA;&#x9;&#x9;elementList.append(&quot;&lt;ns2:snx xmlns:ns2=\&quot;http://www.navis.com/argo\&quot;&gt;&quot;);&#xA;&#x9;&#x9;// Build the XML Shipper Consignee Elements&#xA;&#x9;&#x9;println(&quot;Here:inUnitList.size()&quot;+inUnitList.size());&#xA;&#x9;&#x9;for (int k=0; k &lt; inUnitList.size(); k++){&#xA;&#x9;&#x9;  //for (int k=0; k &lt; 5; k++){&#xA;&#x9;&#x9;  Unit unit = (Unit) inUnitList.get(k);&#xA;&#x9;&#x9;  this.getShipperConsigneeDetails(unit,elementList);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;// Build the XML Vessel Visit Detail element&#xA;&#x9;&#x9;this.getVesselVisitDetails(inCv,elementList);&#xA;&#x9;&#x9;// Build the XML Unit detail elements&#xA;&#x9;&#x9;try{&#xA;&#x9;&#x9; int lastElement = inUnitList.size() - 1  ;&#xA;&#x9;&#x9;for (int i=0; i &lt; inUnitList.size(); i++){&#xA;&#x9;&#x9;  Unit unit = (Unit) inUnitList.get(i);&#xA;&#x9;&#x9;  if (i.equals(lastElement)){&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;LAST ELEMENT:&quot; + i);&#xA;&#x9;&#x9;&#x9;this.getLastUnitDetails(unit, elementList, inUnitList.size());&#xA;&#x9;&#x9;  }else{&#xA;&#x9;&#x9;   this.getUnitDetails(unit, elementList);&#xA;&#x9;&#x9;  }&#xA;&#x9;&#x9;  try&#xA;&#x9;&#x9;  {&#xA;&#x9;&#x9;  elementList = this.getEquipmentDetails(unit, elementList);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getPositionDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getRoutingDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getCarrierDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getHazard(unit, elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getOog(unit, elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getBookingNbr(unit, elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getReefer(unit, elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getHandlingDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getContentsDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getUnitEtc(unit, elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getFlagDetails(unit,elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getUnitFlexDetails(unit,elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.getUfvDetails(unit,elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList = this.geTimeStamp(unit,elementList, inCv);&#xA;&#x9;&#x9;  if (elementList != null)&#xA;&#x9;&#x9;  elementList.append(&quot;&lt;/unit&gt;&quot;);&#xA;&#x9;&#x9;  } catch (Exception e){&#xA;&#x9;&#x9;     println(&quot;Exception for Unit : &quot;+ unit.unitId +&quot; ::&quot;+e)&#xA;&#x9;&#x9;  }&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;elementList.append(&quot;&lt;/ns2:snx&gt;&quot;);&#xA;&#x9;&#x9;return elementList;&#xA;&#x9;  }catch (Exception e){&#xA;&#x9;&#x9;LOGGER.warn (&quot;Exception in prining xml&quot; + e);&#xA;&#x9;  }&#xA;&#x9;  }&#xA;&#xA;&#x9;  public StringBuffer getShipperConsigneeDetails(Unit inUnit, StringBuffer inElementList){&#xA;&#xA;&#x9;&#x9;GoodsBase goods = inUnit.getUnitGoods();&#xA;&#x9;&#x9;String shipperName = &quot;&quot;;&#xA;&#x9;&#x9;String shipperId = &quot;&quot;;&#xA;&#x9;&#x9;String consigneeName = &quot;&quot;;&#xA;&#x9;&#x9;String consigneeId = &quot;&quot;;&#xA;&#xA;&#x9;&#x9;ScopedBizUnit shipper = goods.getGdsShipperBzu();&#xA;&#x9;&#x9;if (shipper != null){&#xA;&#x9;&#x9; try{&#xA;&#x9;&#x9;&#x9;shipperName = shipper.getBzuName();&#xA;&#x9;&#x9;&#x9;shipperName = removeDoubleQuotes(shipperName);&#xA;&#x9;&#x9;&#x9;shipperId = shipper.getBzuId();&#xA;&#x9;&#x9;&#x9;shipperId = removeDoubleQuotes(shipperId);&#xA;&#xA;&#x9;&#x9;  String shipConOpenAttr = &quot;&lt;shipper-consignee&quot;;&#xA;&#x9;&#x9;  String shipperNameAttr = &quot; name=&quot;;&#xA;&#x9;&#x9;  String shipperNameValue = XML_OVERRIDE+shipperName+XML_OVERRIDE;&#xA;&#x9;&#x9;  String shipperIdAttr = &quot; id=&quot;;&#xA;&#x9;&#x9;  String shipperIdValue =  XML_OVERRIDE+shipperId+XML_OVERRIDE;&#xA;&#x9;&#x9;  String shipperString = shipConOpenAttr + shipperNameAttr+ shipperNameValue + shipperIdAttr + shipperIdValue + XML_END_ELEMENT;&#xA;&#x9;&#x9;  shipperString = this.stripInvalidXmlCharacters(shipperString);&#xA;&#x9;&#x9;  inElementList.append(shipperString);&#xA;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;  LOGGER.warn (&quot;Exception in getting Shipper Info&quot; + e);&#xA;&#x9;&#x9;}&#xA;&#x9;  }&#xA;&#xA;&#x9;&#x9;ScopedBizUnit consignee = goods.getGdsConsigneeBzu();&#xA;&#x9;&#x9;if (consignee != null){&#xA;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;consigneeName = consignee.getBzuName();&#xA;&#x9;&#x9;&#x9;consigneeName = removeDoubleQuotes(consigneeName);&#xA;&#x9;&#x9;&#x9;consigneeId = consignee.getBzuId();&#xA;&#x9;&#x9;&#x9;consigneeId = removeDoubleQuotes(consigneeId);&#xA;&#xA;&#x9;&#x9;  String shipConOpenAttr = &quot;&lt;shipper-consignee&quot;;&#xA;&#x9;&#x9;  String shipperNameAttr = &quot; name=&quot;;&#xA;&#x9;&#x9;  String consigneeNameValue = XML_OVERRIDE+consigneeName+XML_OVERRIDE;&#xA;&#x9;&#x9;  String shipperIdAttr = &quot; id=&quot;;&#xA;&#x9;&#x9;  String consigneeIdValue =  XML_OVERRIDE+consigneeId+XML_OVERRIDE;&#xA;&#x9;&#x9;  String consigneeString = shipConOpenAttr + shipperNameAttr+ consigneeNameValue + shipperIdAttr + consigneeIdValue + XML_END_ELEMENT;&#xA;&#x9;&#x9;  consigneeString = this.stripInvalidXmlCharacters(consigneeString);&#xA;&#x9;&#x9;  inElementList.append(consigneeString);&#xA;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;  LOGGER.warn (&quot;Exception in getting Consignee info&quot;+ e);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;&#x9;  public StringBuffer getVesselVisitDetails(CarrierVisit inCv, StringBuffer inElementList){&#xA;&#xA;&#x9;&#x9;def vvd = VesselVisitDetails.resolveVvdFromCv(inCv);&#xA;&#x9;&#x9;Date timeFirstAvailable = vvd.getCvdTimeFirstAvailability();&#xA;&#x9;&#x9;String timeFa = &quot;&quot;;&#xA;&#x9;&#x9;if (timeFirstAvailable != null){&#xA;&#x9;&#x9;  timeFa = this.formatDate(timeFirstAvailable);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;String vvOpenAttr = &quot;&lt;vessel-visit&quot;;&#xA;&#x9;&#x9;String vvFirstTimeAvailabilityAttr = &quot; time-first-availability=&quot;;&#xA;&#x9;&#x9;String vvFirstTimeAvailabilityValue = XML_OVERRIDE+timeFa+XML_OVERRIDE;&#xA;&#x9;&#x9;String vvIdAttr = &quot; id=&quot;;&#xA;&#x9;&#x9;String vvIdValue = XML_OVERRIDE+inCv.getCvId()+XML_OVERRIDE;&#xA;&#x9;&#x9;String vesselVisitString = vvOpenAttr+vvFirstTimeAvailabilityAttr+vvFirstTimeAvailabilityValue+vvIdAttr+vvIdValue+ XML_END_ELEMENT;&#xA;&#x9;&#x9;inElementList.append(vesselVisitString);&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;  public StringBuffer getLastUnitDetails(Unit inUnit, StringBuffer inElementList, int inUnitCount){&#xA;&#xA;    //unit snx-update-note=&quot;NewVes Completed Holds:(RM) unitCnt=1136 facility=HON rdsDtTime=05/01/2012 10:08:48&quot;&#xA;    // line=&quot;ANL&quot; freight-kind=&quot;FCL&quot; category=&quot;IMPORT&quot; id=&quot;UNIU5027989&quot;&gt;&#xA;&#xA;    String unitOpenAttr = &quot;&lt;unit snx-update-note=&quot;;&#xA;    String unitOpenValue = XML_OVERRIDE+&quot;NewVes Detention Completed&quot;+&quot; unitCnt=&quot;+ inUnitCount.toString()+ &quot; facility=&quot;+ honFacility + &quot; rdsDtTime=&quot;+&#xA;                           this.formatRdsDate(timeNow) + XML_OVERRIDE;&#xA;    String lineAttr = &quot; line=&quot;;&#xA;    String freightKindAttr = &quot; freight-kind=&quot;;&#xA;    String idAttr = &quot; id=&quot;;&#xA;    String categoryAttr = &quot; category=&quot;;&#xA;    String freightKindValue = this.findUnitFreightKind(inUnit);&#xA;    String idValue = this.findUnitNbr(inUnit);&#xA;    String categoryValue = this.findUnitCategory(inUnit);&#xA;    ScopedBizUnit lineOp = inUnit.getUnitLineOperator();&#xA;    String lineValue = XML_OVERRIDE+lineOp.getBzuId()+XML_OVERRIDE;&#xA;    String unitString = unitOpenAttr + unitOpenValue+ lineAttr + lineValue + freightKindAttr + freightKindValue + categoryAttr + categoryValue + idAttr + idValue + &quot;&gt;&quot;;&#xA;    unitString = this.stripInvalidXmlCharacters(unitString);&#xA;    unitString = this.ModifyEscapeChar(unitString);&#xA;&#x9;inElementList.append(unitString);&#xA;    return inElementList;&#xA;  }&#xA;&#xA;public StringBuffer getUnitDetails(Unit inUnit, StringBuffer inElementList){&#xA;&#xA;    List unitImpediments = this.getUnitImpediments(inUnit);&#xA;    String holds = &quot;&quot;;&#xA;    String unitOpenValue;&#xA;&#x9;addNode = &quot;N&quot;;&#xA;    if (!unitImpediments.isEmpty()) {&#xA;     for (int k=0; k &lt; unitImpediments.size(); k++){&#xA;     ServiceImpediment imp = (ServiceImpediment) unitImpediments.get(k);&#xA;      def status = imp.getStatus();&#xA;      if (FlagStatusEnum.ACTIVE.equals(status) || FlagStatusEnum.REQUIRED.equals(status)) {&#xA;        String holdId = imp.getFlagType().getId();&#xA;&#x9;&#x9;String flgtypPurpose = imp.getFlagType().getPurpose().getKey();&#xA;        println (&quot;holdId &quot;+ holdId +&quot; flgtypPurpose &quot;+flgtypPurpose);&#xA;&#x9;&#x9;if (flgtypPurpose != &quot;PERMISSION&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;addNode = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;if (k == 0){&#xA;&#x9;&#x9;&#x9;holds = holds + holdId;&#xA;&#x9;&#x9;&#x9;}else {&#xA;&#x9;&#x9;&#x9;holds = holds + &quot;,&quot;+ holdId;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;      }&#xA;     }&#xA;&#x9;}&#xA;&#x9;if (addNode == &quot;Y&quot;)&#xA;&#x9;{&#xA;      unitOpenValue = XML_OVERRIDE+&quot;NewVes Detention Holds:(&quot;+holds+&quot;)&quot;+XML_OVERRIDE;&#xA;    } else {&#xA;      unitOpenValue = XML_OVERRIDE+&quot;NewVes Detention&quot;+XML_OVERRIDE;&#xA;    }&#xA;     String unitOpenAttr = &quot;&lt;unit snx-update-note=&quot;;&#xA;    String lineAttr = &quot; line=&quot;;&#xA;    String freightKindAttr = &quot; freight-kind=&quot;;&#xA;    String idAttr = &quot; id=&quot;;&#xA;    String categoryAttr = &quot; category=&quot;;&#xA;    String freightKindValue = this.findUnitFreightKind(inUnit);&#xA;    String idValue = this.findUnitNbr(inUnit);&#xA;    String categoryValue = this.findUnitCategory(inUnit);&#xA;    ScopedBizUnit lineOp = inUnit.getUnitLineOperator();&#xA;    String lineValue = XML_OVERRIDE+lineOp.getBzuId()+XML_OVERRIDE;&#xA;    String unitString = unitOpenAttr + unitOpenValue+ lineAttr + lineValue + freightKindAttr + freightKindValue + categoryAttr + categoryValue + idAttr + idValue + &quot;&gt;&quot;;&#xA;    unitString = this.stripInvalidXmlCharacters(unitString);&#xA;&#x9;unitString = this.ModifyEscapeChar(unitString);&#xA;&#x9;inElementList.append(unitString);&#xA;    return inElementList;&#xA;  }&#xA;&#xA;&#x9;public StringBuffer getEquipmentDetails(Unit inUnit, StringBuffer inElementList){&#xA;&#x9;try&#xA;&#x9;{&#xA;&#x9;Equipment eq = inUnit.getPrimaryEq();&#xA;&#xA;&#x9;def unitEquipment = inUnit.getUnitPrimaryUe()&#xA;    def ueEquipmentState = unitEquipment.getUeEquipmentState()&#xA;    def equipFlex01 = ueEquipmentState != null ? ueEquipmentState.getEqsFlexString01() : ''&#xA;&#xA;    String equipmentOpenAttr = &quot;&lt;equipment&quot;;&#xA;    String equipmentRoleAttr = &quot; role=&quot;;&#xA;    String equipmentRoleValue = XML_OVERRIDE+&quot;PRIMARY&quot;+XML_OVERRIDE;&#xA;    String equipmentFlex01Attr = &quot; eq-flex-01=&quot;;&#xA;    String equipmentFlex01Value = XML_OVERRIDE+equipFlex01+XML_OVERRIDE;&#xA;    String equipmentMaterialAttr = &quot; material=&quot;;&#xA;    String equipmentMaterialValue = this.findEquipmentMaterial(eq);&#xA;    String equipmentOperatorAttr = &quot; operator=&quot;&#xA;    String equipmentOperatorValue=XML_OVERRIDE+eq.getEquipmentOperatorId()+XML_OVERRIDE;&#xA;    String equipmentOwnerAttr = &quot; owner=&quot;&#xA;    String equipmentOwnerValue=XML_OVERRIDE+eq.getEquipmentOwnerId()+XML_OVERRIDE;&#xA;    String equipmentStrengthCodeAttr = &quot; strength-code=&quot;;&#xA;    String equipmentStrengthCodeValue = XML_OVERRIDE+eq.getEqStrengthCode()+XML_OVERRIDE;&#xA;    String equipmentHeightMmAttr = &quot; height-mm=&quot;;&#xA;    String equipmentHeightMmValue = XML_OVERRIDE+eq.getEqHeightMm().toString()+XML_OVERRIDE;&#xA;    String equipmentTareWeightKgAttr = &quot; tare-kg=&quot;;&#xA;    String equipmentTareWeightKgValue = XML_OVERRIDE+eq.getEqTareWeightKg().toString()+XML_OVERRIDE;&#xA;    String equipmentTypeAttr = &quot; type=&quot;;&#xA;    String equipmentTypeValue = XML_OVERRIDE+eq.getEqEquipType().eqtypId+XML_OVERRIDE;&#xA;    String equipmentClassAttr = &quot; class=&quot;;&#xA;&#x9;String equipClass = eq.getEqClass().getKey();&#xA;&#x9;equipClass = equipClass = &quot;CONTAINER&quot;?&quot;CTR&quot;:eq.getEqClass().getKey()&#xA;    String equipmentClassValue = XML_OVERRIDE+equipClass+XML_OVERRIDE&#xA;    String equipmentIdAttr = &quot; eqid=&quot;;&#xA;    String equipmentIdValue = this.findUnitNbr(inUnit);&#xA;&#xA;    String equipmentString = equipmentOpenAttr + equipmentRoleAttr+ equipmentRoleValue + equipmentFlex01Attr +&#xA;                             equipmentFlex01Value + equipmentMaterialAttr + equipmentMaterialValue+equipmentOperatorAttr+equipmentOperatorValue+&#xA;                             equipmentOwnerAttr+equipmentOwnerValue+equipmentStrengthCodeAttr+equipmentStrengthCodeValue+&#xA;                             equipmentHeightMmAttr+equipmentHeightMmValue+equipmentTareWeightKgAttr+equipmentTareWeightKgValue+&#xA;                             equipmentTypeAttr+equipmentTypeValue+equipmentClassAttr+equipmentClassValue+equipmentIdAttr+equipmentIdValue+ &quot;&gt;&quot;;&#xA;    equipmentString = this.stripInvalidXmlCharacters(equipmentString)&#xA;&#x9;equipmentString = this.ModifyEscapeChar(equipmentString);&#xA;&#x9;inElementList.append(equipmentString);&#xA;&#xA;&#x9;String grade = ueEquipmentState != null ? ueEquipmentState.getEqsGradeID() : ''&#xA;&#x9;if (grade != null)&#xA;&#x9;{&#xA;&#x9;&#x9;grade = grade.replace(&quot;EquipGrade Id:&quot;,&quot;&quot;)&#xA;&#x9;}&#xA;&#x9;String physicalOpenAttr = &quot;&lt;physical&quot;;&#xA;    String gradeAttr = &quot; grade=&quot;;&#xA;&#x9;if (grade!= null)&#xA;&#x9;{&#xA;&#x9;&#x9;String physicalString = physicalOpenAttr + gradeAttr+ XML_OVERRIDE+grade+XML_OVERRIDE +XML_END_ELEMENT&#xA;&#x9;&#x9;inElementList.append(physicalString);&#xA;&#x9;}&#xA;    //inElementList.append(&quot;&lt;damages&quot;);&#xA;&#xA;&#x9;String damageOpenAttr = &quot;&lt;damages&quot;;&#xA;&#x9;String damageSevAttr = &quot; severity=&quot;&#xA;&#x9;def eqsDamageSev = inUnit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsDamageSeverity&quot;);&#xA;&#x9;String damageSev = null;&#xA;&#x9;if (eqsDamageSev !=null)&#xA;&#x9;{&#xA;&#x9;&#x9;damageSev = eqsDamageSev.getKey();&#xA;&#x9;}&#xA;&#xA;&#x9;String damageString = null;&#xA;&#x9;if (damageSev != &quot;NONE&quot; &amp;&amp; damageSev!= null)&#xA;&#x9;{&#xA;&#x9;&#x9;damageString = damageOpenAttr+damageSevAttr+XML_OVERRIDE+damageSev+XML_OVERRIDE+XML_END_ELEMENT;&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;damageString = damageOpenAttr+XML_END_ELEMENT;&#xA;&#x9;}&#xA;&#xA;&#x9;//println(&quot;damageString &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+damageString)&#xA;&#x9;inElementList.append(damageString);&#xA;&#xA;&#xA;    inElementList.append(&quot;&lt;/equipment&gt;&quot;);&#xA;&#x9;}&#xA;&#x9;catch (e)&#xA;&#x9;{&#xA;&#x9;&#x9;println(&quot;Exception &quot;+e)&#xA;&#x9;}&#xA;&#xA;    return inElementList;&#xA;  }&#xA;&#xA;  public StringBuffer getPositionDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;    String  positionLocationValue = &quot;&quot;;&#xA;    String positionLocTypeValue = &quot;&quot;;&#xA;    if (inCv != null){&#xA;      positionLocationValue = XML_OVERRIDE + inCv.getCvId()+XML_OVERRIDE;&#xA;      positionLocTypeValue = XML_OVERRIDE+ &quot;VESSEL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    String positionOpenAttr = &quot;&lt;position&quot;&#xA;    String positionSlotAttr = &quot; slot=&quot;;&#xA;    String positionSlotValue = XML_OVERRIDE+inUnit.getUnitArrivePositionSlot()+XML_OVERRIDE;&#xA;    String positionLocationAttr = &quot; location=&quot;;&#xA;    String positionLocTypeAttr = &quot; loc-type=&quot;;&#xA;&#xA;&#xA;    String positionString = positionOpenAttr+positionSlotAttr+positionSlotValue+positionLocationAttr+positionLocationValue+&#xA;                            positionLocTypeAttr+positionLocTypeValue+XML_END_ELEMENT;&#xA;&#x9;positionString = this.stripInvalidXmlCharacters(positionString)&#xA;&#x9;positionString = this.ModifyEscapeChar(positionString);&#xA;&#x9;inElementList.append(positionString);&#xA;&#xA;    return inElementList;&#xA;  }&#xA;&#xA;&#x9;public StringBuffer getRoutingDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;String group = null;&#xA;&#x9;&#x9;String disc=&quot;&quot;;&#xA;&#x9;&#x9;String pod2=null;&#xA;&#x9;&#x9;String opl=&quot;&quot;;&#xA;&#x9;&#x9;String pol=&quot;&quot;;&#xA;&#x9;&#x9;String destination=&quot;&quot;;&#xA;&#x9;&#x9;String designatedTrucker=null;&#xA;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;designatedTrucker=inUnit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (te)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Exception in getting trucker details &quot; + te);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//try{&#xA;&#xA;&#x9;&#x9;Routing routing = inUnit.getUnitRouting();&#xA;&#xA;&#x9;&#x9;if (routing != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;String rtgGroup = routing.getRtgGroup();&#xA;&#x9;&#x9;&#x9;&#x9;group = rtgGroup.replace(&quot;Group Id:&quot;,&quot;&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;catch (e)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;RoutingPoint point = inUnit.getUnitRouting().getRtgPOD1();&#xA;&#x9;&#x9;RoutingPoint point2 = inUnit.getUnitRouting().getRtgPOD2();&#xA;&#x9;&#x9;RoutingPoint pointOpl = inUnit.getUnitRouting().getRtgOPL();&#xA;&#x9;&#x9;RoutingPoint pointPol = inUnit.getUnitRouting().getRtgPOL();&#xA;&#x9;&#x9;if (point != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;disc = point.getPointId();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (point2 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;pod2 = point2.getPointId();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (pointOpl != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;opl = pointOpl.getPointId();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (pointPol != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;pol = pointPol.getPointId();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;destination = inUnit.getUnitGoods().getGdsDestination();&#xA;&#x9;&#x9;//} catch (Exception e){&#xA;&#x9;&#x9;  //LOGGER.warn(&quot;Exception in getting routing details &quot; + e);&#xA;&#x9;&#x9;//}&#xA;&#x9;&#x9;String rtgOpenAttr = &quot;&lt;routing&quot;&#xA;&#x9;&#x9;String groupAttr = &quot; group=&quot;&#xA;&#x9;&#x9;String groupValue = XML_OVERRIDE+group+XML_OVERRIDE;&#xA;&#x9;&#x9;String designatedTruckerAttr = &quot; designated-trucker=&quot;&#xA;&#x9;&#x9;String designatedTruckerValue = XML_OVERRIDE+designatedTrucker+XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgDestAttr = &quot; destination=&quot;;&#xA;&#x9;&#x9;String rtgDestValue = XML_OVERRIDE+destination+XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgOplAttr = &quot; opl=&quot;;&#xA;&#x9;&#x9;String rtgOplValue = XML_OVERRIDE+ opl +XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgPod1Attr = &quot; pod-1=&quot;;&#xA;&#x9;&#x9;String rtgPod2Attr = &quot; pod-2=&quot;;&#xA;&#x9;&#x9;String rtgPod1Value = XML_OVERRIDE+ disc +XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgPod2Value = XML_OVERRIDE+ pod2 +XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgPolAttr = &quot; pol=&quot;;&#xA;&#x9;&#x9;String rtgPolValue = XML_OVERRIDE+ pol +XML_OVERRIDE;&#xA;&#x9;&#x9;String routingString = null;&#xA;&#xA;&#xA;&#x9;&#x9;if (designatedTrucker!= null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;routingString = designatedTruckerAttr+designatedTruckerValue+rtgDestAttr+rtgDestValue+rtgOplAttr+rtgOplValue+rtgPod1Attr+rtgPod1Value+&#xA;&#x9;&#x9;&#x9;&#x9;rtgPolAttr+rtgPolValue;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;routingString = rtgDestAttr+rtgDestValue+rtgOplAttr+rtgOplValue+rtgPod1Attr+rtgPod1Value+&#xA;&#x9;&#x9;&#x9;&#x9;rtgPolAttr+rtgPolValue;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (pod2 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;//println(&quot;pod2&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot;+pod2);&#xA;&#x9;&#x9;routingString = routingString+rtgPod2Attr+rtgPod2Value&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (group != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;routingString = rtgOpenAttr + groupAttr + groupValue + routingString&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;  {&#xA;&#x9;&#x9;&#x9;routingString = rtgOpenAttr + routingString&#xA;&#x9;  }&#xA;&#x9;&#x9;routingString = routingString + &quot;&gt;&quot;&#xA;&#x9;&#x9;routingString = this.stripInvalidXmlCharacters(routingString);&#xA;&#x9;&#x9;routingString = this.ModifyEscapeChar(routingString);&#xA;&#x9;&#x9;inElementList.append(routingString);&#xA;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;&#x9;  public StringBuffer getCarrierDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#x9;&#x9;def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;&#x9;&#x9;def ufv = inUnit.getUfvForFacilityCompletedOnly(fcy);&#xA;&#x9;&#x9;//UnitFacilityVisit ufv = inUnit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;println(&quot;getCarrierDetails &quot;+ufv+inUnit.unitId);&#xA;&#x9;&#x9;if (ufv != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;CarrierVisit declaredIbCv = inUnit.getUnitDeclaredIbCv();&#xA;&#x9;&#x9;String declaredIbCvMode = this.findCarrierVisitMode(declaredIbCv);&#xA;&#x9;&#x9;CarrierVisit actualIbCv = ufv.getInboundCarrierVisit();&#xA;&#x9;&#x9;String actualIbCvMode = this.findCarrierVisitMode(actualIbCv);&#xA;&#x9;&#x9;CarrierVisit declaredObCv = inUnit.getUnitRouting().getRtgDeclaredCv();&#xA;&#x9;&#x9;String declaredObCvMode = this.findCarrierVisitMode(declaredObCv);&#xA;&#x9;&#x9;CarrierVisit actualObCv = ufv.getUfvObCv();&#xA;&#x9;&#x9;String actualObCvMode = this.findCarrierVisitMode(actualObCv);&#xA;&#xA;&#x9;&#x9;String cvOpenAttr = &quot;&quot;;&#xA;&#x9;&#x9;String cvIdAttr = &quot;&quot;;&#xA;&#x9;&#x9;String cvIdValue = &quot;&quot;;&#xA;&#x9;&#x9;String cvFacilityAttr = &quot;&quot;;&#xA;&#x9;&#x9;String cvFacilityValue = &quot;&quot;;&#xA;&#x9;&#x9;String cvModeAttr = &quot;&quot;;&#xA;&#x9;&#x9;String cvModeValue = &quot;&quot;;&#xA;&#x9;&#x9;String cvQualifierAttr = &quot;&quot;;&#xA;&#x9;&#x9;String cvQualiferValue = &quot;&quot;;&#xA;&#x9;&#x9;String cvDirectionAttr = &quot;&quot;;&#xA;&#x9;&#x9;String cvDirectionValue = &quot;&quot;;&#xA;&#x9;&#x9;// Declared IB CV Details Block&#xA;&#x9;&#x9;cvOpenAttr = &quot;&lt;carrier &quot;&#xA;&#x9;&#x9;cvIdAttr = &quot; id=&quot;;&#xA;&#x9;&#x9;String dclrdCarrierIbCv = declaredIbCv;&#xA;&#xA;&#x9;&#x9;if (dclrdCarrierIbCv.length() &gt; 6)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;dclrdCarrierIbCv = dclrdCarrierIbCv.substring(0,6)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;println (&quot;dclrdCarrierIbCv &quot;+ dclrdCarrierIbCv)&#xA;&#xA;&#xA;&#x9;&#x9;cvIdValue = XML_OVERRIDE+dclrdCarrierIbCv+XML_OVERRIDE;&#xA;&#x9;&#x9;cvFacilityAttr = &quot; facility=&quot;;&#xA;&#x9;&#x9;cvFacilityValue = XML_OVERRIDE+ honFacility +XML_OVERRIDE;&#xA;&#x9;&#x9;cvModeAttr = &quot; mode=&quot;;&#xA;&#x9;&#x9;cvModeValue = XML_OVERRIDE+ declaredIbCvMode +XML_OVERRIDE;&#xA;&#x9;&#x9;cvQualifierAttr = &quot; qualifier=&quot;;&#xA;&#x9;&#x9;cvQualiferValue = XML_OVERRIDE+ &quot;DECLARED&quot; +XML_OVERRIDE;&#xA;&#x9;&#x9;cvDirectionAttr = &quot; direction=&quot;;&#xA;&#x9;&#x9;cvDirectionValue = XML_OVERRIDE+ &quot;IB&quot; +XML_OVERRIDE;&#xA;&#xA;&#x9;&#x9;String cvDeclaredIbString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;&#x9;&#x9;&#x9;&#x9;cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;&#x9;&#x9;cvDeclaredIbString = this.stripInvalidXmlCharacters(cvDeclaredIbString);&#xA;&#x9;&#x9;inElementList.append(cvDeclaredIbString);&#xA;&#xA;&#x9;&#x9;String actlCarrierIbCv = actualIbCv;&#xA;&#xA;&#x9;&#x9;if (actlCarrierIbCv.length() &gt; 6)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;actlCarrierIbCv = actlCarrierIbCv.substring(0,6)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;println (&quot;actlCarrierIbCv &quot;+ actlCarrierIbCv)&#xA;&#xA;&#xA;&#x9;&#x9;// Actual IB CV Details Block&#xA;&#x9;&#x9;cvOpenAttr = &quot;&lt;carrier &quot;&#xA;&#x9;&#x9;cvIdAttr = &quot; id=&quot;;&#xA;&#x9;&#x9;cvIdValue = XML_OVERRIDE+actlCarrierIbCv+XML_OVERRIDE;&#xA;&#x9;&#x9;cvFacilityAttr = &quot; facility=&quot;;&#xA;&#x9;&#x9;cvFacilityValue = XML_OVERRIDE+ honFacility +XML_OVERRIDE;&#xA;&#x9;&#x9;cvModeAttr = &quot; mode=&quot;;&#xA;&#x9;&#x9;cvModeValue = XML_OVERRIDE+ actualIbCvMode +XML_OVERRIDE;&#xA;&#x9;&#x9;cvQualifierAttr = &quot; qualifier=&quot;;&#xA;&#x9;&#x9;cvQualiferValue = XML_OVERRIDE+ &quot;ACTUAL&quot; +XML_OVERRIDE;&#xA;&#x9;&#x9;cvDirectionAttr = &quot; direction=&quot;;&#xA;&#x9;&#x9;cvDirectionValue = XML_OVERRIDE+ &quot;IB&quot; +XML_OVERRIDE;&#xA;&#xA;&#x9;&#x9;String cvActualIbString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;&#x9;&#x9;&#x9;&#x9;cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;&#x9;&#x9;cvActualIbString = this.stripInvalidXmlCharacters(cvActualIbString);&#xA;&#x9;&#x9;inElementList.append(cvActualIbString);&#xA;&#xA;&#x9;&#x9;// Declared Ob CV Details Block&#xA;&#x9;&#x9;cvOpenAttr = &quot;&lt;carrier &quot;&#xA;&#x9;&#x9;cvIdAttr = &quot; id=&quot;;&#xA;&#x9;&#x9;cvIdValue = XML_OVERRIDE+declaredObCv+XML_OVERRIDE;&#xA;&#x9;&#x9;cvFacilityAttr = &quot; facility=&quot;;&#xA;&#x9;&#x9;cvFacilityValue = XML_OVERRIDE+ honFacility +XML_OVERRIDE;&#xA;&#x9;&#x9;cvModeAttr = &quot; mode=&quot;;&#xA;&#x9;&#x9;cvModeValue = XML_OVERRIDE+ declaredObCvMode +XML_OVERRIDE;&#xA;&#x9;&#x9;cvQualifierAttr = &quot; qualifier=&quot;;&#xA;&#x9;&#x9;cvQualiferValue = XML_OVERRIDE+ &quot;DECLARED&quot; +XML_OVERRIDE;&#xA;&#x9;&#x9;cvDirectionAttr = &quot; direction=&quot;;&#xA;&#x9;&#x9;cvDirectionValue = XML_OVERRIDE+ &quot;OB&quot; +XML_OVERRIDE;&#xA;&#xA;&#x9;&#x9;String cvDeclaredObString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;&#x9;&#x9;&#x9;&#x9;cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;&#x9;&#x9;cvDeclaredObString = this.stripInvalidXmlCharacters(cvDeclaredObString);&#xA;&#x9;&#x9;inElementList.append(cvDeclaredObString);&#xA;&#xA;&#x9;&#x9;// Actual Ob CV Details Block&#xA;&#x9;&#x9;cvOpenAttr = &quot;&lt;carrier &quot;&#xA;&#x9;&#x9;cvIdAttr = &quot; id=&quot;;&#xA;&#x9;&#x9;cvIdValue = XML_OVERRIDE+actualObCv+XML_OVERRIDE;&#xA;&#x9;&#x9;cvFacilityAttr = &quot; facility=&quot;;&#xA;&#x9;&#x9;cvFacilityValue = XML_OVERRIDE+ honFacility +XML_OVERRIDE;&#xA;&#x9;&#x9;cvModeAttr = &quot; mode=&quot;;&#xA;&#x9;&#x9;cvModeValue = XML_OVERRIDE+ actualObCvMode +XML_OVERRIDE;&#xA;&#x9;&#x9;cvQualifierAttr = &quot; qualifier=&quot;;&#xA;&#x9;&#x9;cvQualiferValue = XML_OVERRIDE+ &quot;ACTUAL&quot; +XML_OVERRIDE;&#xA;&#x9;&#x9;cvDirectionAttr = &quot; direction=&quot;;&#xA;&#x9;&#x9;cvDirectionValue = XML_OVERRIDE+ &quot;OB&quot; +XML_OVERRIDE;&#xA;&#xA;&#x9;&#x9;String cvActualObString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;&#x9;&#x9;&#x9;&#x9;cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;&#x9;&#x9;cvActualObString = this.stripInvalidXmlCharacters(cvActualObString);&#xA;&#x9;&#x9;if (cvActualObString != null){&#xA;&#x9;&#x9;&#x9;inElementList.append(cvActualObString);&#xA;&#x9;&#x9;&#x9;inElementList.append(&quot;&lt;/routing&gt;&quot;);&#xA;&#x9;&#x9;}&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#x9;  }&#xA;&#xA;&#x9;public StringBuffer getHazard(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;&#x9;&#x9;def ufv = inUnit.getUfvForFacilityCompletedOnly(fcy);&#xA;&#xA;&#x9;&#x9;if (ufv != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;if (ufv.ufvUnit.getUnitGoods() != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;def haz = ufv.ufvUnit.getUnitGoods().getGdsHazards();&#xA;&#x9;&#x9;//println(&quot;hazard&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+haz)&#xA;&#xA;&#x9;&#x9;if (haz != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;String hazardsAttrOpn = &quot;&lt;hazards&gt;&quot;;&#xA;&#x9;&#x9;&#x9;String addtag = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;def hazardAttrOpn = &quot;&lt;hazard&quot;&#xA;&#x9;&#x9;&#x9;def hazardString = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;Iterator hazardIter = ufv.ufvUnit.getUnitGoods().getGdsHazards().getHazardItemsIterator();&#xA;&#x9;&#x9;&#x9;while(hazardIter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;def hazard = hazardIter.next();&#xA;&#x9;&#x9;&#x9;&#x9;def imdgClass = hazard.getHzrdiImdgCode() != null ? hazard.getHzrdiImdgCode().getKey() : null&#xA;&#x9;&#x9;&#x9;&#x9;def nbrType = hazard.getHzrdiNbrType() != null ? hazard.getHzrdiNbrType().getKey() : null&#xA;&#x9;&#x9;&#x9;&#x9;def qty = hazard.hzrdiQuantity;&#xA;&#x9;&#x9;&#x9;&#x9;def packageType = hazard.hzrdiPackageType;&#xA;&#x9;&#x9;&#x9;&#x9;def weight = hazard.hzrdiWeight;&#xA;&#x9;&#x9;&#x9;&#x9;String properName = hazard.hzrdiProperName;&#xA;&#x9;&#x9;&#x9;&#x9;String techName   = hazard.hzrdiTechName;&#xA;&#x9;&#x9;&#x9;&#x9;String imdgclass  = hazard.hzrdiImdgClass.name;&#xA;&#x9;&#x9;&#x9;&#x9;def im01 = hazard.hzrdiSecondaryIMO1;&#xA;&#x9;&#x9;&#x9;&#x9;def im02 = hazard.hzrdiSecondaryIMO2;&#xA;&#x9;&#x9;&#x9;&#x9;String un  = hazard.hzrdiUNnum;&#xA;&#x9;&#x9;&#x9;&#x9;def pkg = hazard.hzrdiPackingGroup;&#xA;&#x9;&#x9;&#x9;&#x9;if (pkg != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;pkg = pkg.getKey();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;def flashPoint = hazard.hzrdiFlashPoint;&#xA;&#x9;&#x9;&#x9;&#x9;def limited = hazard.hzrdiLtdQty ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;def marine = hazard.hzrdiMarinePollutants ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;def phone = hazard.hzrdiEmergencyTelephone;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiNotes = hazard.hzrdiNotes;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiInhalationZone = hazard.hzrdiInhalationZone;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiPageNumber = hazard.hzrdiPageNumber;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiEMSNumber = hazard.hzrdiEMSNumber;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiMFAG = hazard.hzrdiMFAG;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiHazIdUpper = hazard.hzrdiHazIdUpper;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiSubstanceLower = hazard.hzrdiSubstanceLower;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiPlannerRef = hazard.hzrdiPlannerRef;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiMoveMethod = hazard.hzrdiMoveMethod;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiExplosiveClass = hazard.hzrdiExplosiveClass;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiDcLgRef = hazard.hzrdiDcLgRef;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiDeckRestrictions = hazard.hzrdiDeckRestrictions;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + hazardAttrOpn;&#xA;&#x9;&#x9;&#x9;&#x9;if (nbrType != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; haz-nbr-type=&quot; + XML_OVERRIDE + nbrType + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiNotes != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hzrdiNotes = this.stripInvalidXmlCharacters(hzrdiNotes);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hzrdiNotes = this.removeDoubleQuotes(hzrdiNotes);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; notes=&quot; +XML_OVERRIDE + hzrdiNotes + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (phone != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; emergency-telephone=&quot; +XML_OVERRIDE + phone + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (marine == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; marine-pollutants=&quot; +XML_OVERRIDE + marine + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (im01 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; secondary-imo-1=&quot; +XML_OVERRIDE + im01 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (im02 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; secondary-imo-2=&quot; +XML_OVERRIDE + im02 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (qty != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; quantity=&quot; +XML_OVERRIDE + qty + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (weight != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; weight-kg=&quot; +XML_OVERRIDE + weight + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (pkg != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; packing-group=&quot; +XML_OVERRIDE + pkg + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (properName != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;properName = this.stripInvalidXmlCharacters(properName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;properName = this.removeDoubleQuotes(properName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; proper-name=&quot; +XML_OVERRIDE + properName + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (techName != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;techName = this.stripInvalidXmlCharacters(techName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;techName = this.removeDoubleQuotes(techName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; tech-name=&quot; +XML_OVERRIDE + techName + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (flashPoint != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; flash-point=&quot; +XML_OVERRIDE + flashPoint + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (packageType != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; package-type=&quot; +XML_OVERRIDE + packageType + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (limited == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; ltd-qty-flag=&quot; +XML_OVERRIDE + limited + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (un != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; un=&quot; +XML_OVERRIDE + un + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (imdgClass != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; imdg=&quot; +XML_OVERRIDE + imdgClass + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiInhalationZone != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; inhalation-zone=&quot; +XML_OVERRIDE + hzrdiInhalationZone + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiExplosiveClass != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; explosive-class=&quot; +XML_OVERRIDE + hzrdiExplosiveClass + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiEMSNumber != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; ems-nbr=&quot; +XML_OVERRIDE + hzrdiEMSNumber + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiMFAG != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; mfag=&quot; +XML_OVERRIDE + hzrdiMFAG + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiHazIdUpper != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; haz-id-upper=&quot; +XML_OVERRIDE + hzrdiHazIdUpper + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiSubstanceLower != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; substance-lower=&quot; +XML_OVERRIDE + hzrdiSubstanceLower + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiPlannerRef != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; planner-ref=&quot; +XML_OVERRIDE + hzrdiPlannerRef + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiMoveMethod != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; move-method=&quot; +XML_OVERRIDE + hzrdiMoveMethod + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiDeckRestrictions != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; deck-restrictions=&quot; +XML_OVERRIDE + hzrdiDeckRestrictions + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiDcLgRef != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; dc-lg-ref=&quot; +XML_OVERRIDE + hzrdiDcLgRef + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiPageNumber != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; page-number=&quot; +XML_OVERRIDE + hzrdiPageNumber + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (addtag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (addtag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;hazardsAttrOpn = hazardsAttrOpn + hazardString + &quot;&lt;/hazards&gt;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;hazardsAttrOpn = this.stripInvalidXmlCharacters(hazardsAttrOpn);&#xA;&#x9;&#x9;&#x9;&#x9;hazardsAttrOpn = this.ModifyEscapeChar(hazardsAttrOpn);&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(hazardsAttrOpn);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;}&#xA;&#x9;return inElementList;&#xA;}&#xA;&#xA;&#x9;public StringBuffer getOog(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;{&#xA;&#x9;&#x9;if (inUnit.getFieldValue(&quot;unitIsOog&quot;))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;String backCm = inUnit.getFieldValue(&quot;unitOogBackCm&quot;);&#xA;&#x9;&#x9;&#x9;String frontCm = inUnit.getFieldValue(&quot;unitOogFrontCm&quot;) ;&#xA;&#x9;&#x9;&#x9;String leftCm = inUnit.getFieldValue(&quot;unitOogLeftCm&quot;);&#xA;&#x9;&#x9;&#x9;String rightCm = inUnit.getFieldValue(&quot;unitOogRightCm&quot;);&#xA;&#x9;&#x9;&#x9;String topCm = inUnit.getFieldValue(&quot;unitOogTopCm&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;backCm = backCm !=null ? backCm:0;&#xA;&#x9;&#x9;&#x9;frontCm = frontCm !=null ? frontCm:0;&#xA;&#x9;&#x9;&#x9;leftCm = leftCm !=null ? leftCm:0;&#xA;&#x9;&#x9;&#x9;rightCm = rightCm !=null ? rightCm:0;&#xA;&#x9;&#x9;&#x9;topCm = topCm !=null ? topCm:0;&#xA;&#xA;&#x9;&#x9;&#x9;String oogAttrOpn = &quot;&lt;oog&quot;;&#xA;&#x9;&#x9;&#x9;String oogString = oogAttrOpn&#xA;&#x9;&#x9;&#x9;if (rightCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; right-cm=&quot; + XML_OVERRIDE + rightCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (leftCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; left-cm=&quot; + XML_OVERRIDE + leftCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (backCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; back-cm=&quot; + XML_OVERRIDE + backCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (frontCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; front-cm=&quot; + XML_OVERRIDE + frontCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (topCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; top-cm=&quot; + XML_OVERRIDE + topCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;oogString = oogString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;inElementList.append(oogString);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;&#x9;public StringBuffer getBookingNbr(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;String bookingId = null;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;bookingId = inUnit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (be)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Exception in getting routing details &quot; + be);&#xA;&#x9;&#x9;&#x9;println(&quot;Exception in getting routing details &quot; + be);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;String unitBkngOpenAttr = &quot;&lt;booking &quot;&#xA;&#x9;&#x9;String unitBkngAttr = &quot;id=&quot;;&#xA;&#x9;&#x9;if (bookingId != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;bookingId = XML_OVERRIDE+bookingId+XML_OVERRIDE&#xA;&#x9;&#x9;&#x9;String unitBkngString = unitBkngOpenAttr+unitBkngAttr+bookingId+XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;unitBkngString = this.stripInvalidXmlCharacters(unitBkngString);&#xA;&#x9;&#x9;&#x9;unitBkngString = this.ModifyEscapeChar(unitBkngString);&#xA;&#x9;&#x9;&#x9;inElementList.append(unitBkngString);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;&#x9;public StringBuffer getReefer(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;&#x9;def tempReq = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempRequiredC&quot;);&#xA;&#x9;&#x9;&#x9;def tempMax = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempLimitMaxC&quot;);&#xA;&#x9;&#x9;&#x9;def tempMin = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempLimitMinC&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM1 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor1&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM2 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor2&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM3 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor3&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM4 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor4&quot;);&#xA;&#x9;&#x9;&#x9;def tempPwrOnTime = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqLatestOnPowerTime&quot;);&#xA;&#x9;&#x9;&#x9;def tempCo2Pct = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqCO2Pct&quot;);&#xA;&#x9;&#x9;&#x9;def tempHmdtyPct = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqHumidityPct&quot;);&#xA;&#x9;&#x9;&#x9;def tempO2Pct = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqO2Pct&quot;);&#xA;&#x9;&#x9;&#x9;def tempVentReq = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqVentRequired&quot;);&#xA;&#x9;&#x9;&#x9;def tempVentUnit = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqVentUnit&quot;);&#xA;&#x9;&#x9;&#x9;def tempShowFahrenhiet = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempShowFahrenheit&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;tempShowFahrenhiet = tempShowFahrenhiet ? &quot;F&quot; : &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;String reeferAttrOpn = &quot;&lt;reefer&quot;;&#xA;&#x9;&#x9;&#x9;String reeferString = reeferAttrOpn;&#xA;&#x9;&#x9;&#x9;String addtag = &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;if (tempShowFahrenhiet == &quot;F&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-display-unit=&quot; + XML_OVERRIDE + tempShowFahrenhiet + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempReq !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-reqd-c=&quot; + XML_OVERRIDE + tempReq + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempO2Pct !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; o2-pct=&quot; + XML_OVERRIDE + tempO2Pct + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempCo2Pct !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; co2-pct=&quot; + XML_OVERRIDE + tempCo2Pct + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempHmdtyPct !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; humidity-pct=&quot; + XML_OVERRIDE + tempHmdtyPct + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempVentReq !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; vent-required-value=&quot; + XML_OVERRIDE + tempVentReq + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempVentUnit !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; vent-required-unit=&quot; + XML_OVERRIDE + tempVentUnit + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempMin !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-min-c=&quot; + XML_OVERRIDE + tempMin + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempMax !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-max-c=&quot; + XML_OVERRIDE + tempMax + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempPwrOnTime !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-latest-on-power=&quot; + XML_OVERRIDE + tempPwrOnTime + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM1 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-1=&quot; + XML_OVERRIDE + tempTM1 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM2 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-2=&quot; + XML_OVERRIDE + tempTM2 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM3 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-3=&quot; + XML_OVERRIDE + tempTM3 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM4 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-4=&quot; + XML_OVERRIDE + tempTM4 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;//println(&quot;reeferString &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot; + addtag +&quot;  :   &quot;+reeferString)&#xA;&#xA;&#x9;&#x9;&#x9;if (addtag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;//println(&quot;Here reeferString &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot; + addtag +&quot;  :   &quot;+reeferString)&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = this.stripInvalidXmlCharacters(reeferString);&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = this.ModifyEscapeChar(reeferString);&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(reeferString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return inElementList;&#xA;&#x9;&#x9;}&#xA;&#xA;  public StringBuffer getHandlingDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;&#x9;def ufv = inUnit.getUfvForFacilityCompletedOnly(fcy);&#xA;&#xA;&#x9;String lastfreeDay = null;&#xA;    String handlingOpenAttr = &quot;&lt;handling&quot;&#xA;&#x9;String handlingString = handlingOpenAttr;&#xA;&#x9;String lastfreeDayAttr = &quot; last-free-day=&quot;;&#xA;    String handlingRemarkAttr = &quot; remark=&quot;;&#xA;    String handlingRemark = inUnit.getUnitRemark();&#xA;&#x9;if (ufv !=null)&#xA;&#x9;{&#xA;&#x9;&#x9;lastfreeDay = ufv.getFieldValue(&quot;ufvCalculatedLastFreeDay&quot;);&#xA;&#x9;&#x9;if (lastfreeDay != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;lastfreeDay = lastfreeDay.replace(&quot;!&quot;,&quot;&quot;)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;addNode = &quot;N&quot;;&#xA;&#x9;if (lastfreeDay != null)&#xA;&#x9;{&#xA;&#x9;&#x9;addNode = &quot;Y&quot;;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Date date = new SimpleDateFormat(&quot;yyyy-MMM-dd&quot;, Locale.ENGLISH).parse(lastfreeDay);&#xA;&#x9;&#x9;&#x9;DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#x9;&#x9;&#x9;lastfreeDay = df.format(date);&#xA;&#x9;&#x9;}&#xA;&#x9;catch (Exception de){&#xA;      LOGGER.warn (&quot;Exception in while converting date &quot;+ lastfreeDay+&quot;:&quot;+de);&#xA;&#x9;  lastfreeDay = null;&#xA;&#x9;  addNode = &quot;N&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;if (addNode == &quot;Y&quot;)&#xA;&#x9;{&#xA;&#x9;&#x9;lastfreeDay=XML_OVERRIDE+lastfreeDay+XML_OVERRIDE;&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;addNode = &quot;N&quot;;&#xA;&#x9;}&#xA;&#xA;    if (handlingRemark != null)&#xA;&#x9;{&#xA;&#x9;&#x9;handlingRemark = removeDoubleQuotes(handlingRemark);&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;handlingRemark = &quot; &quot;&#xA;&#x9;}&#xA;&#x9;if (addNode == &quot;Y&quot; )&#xA;&#x9;{&#xA;&#x9;&#x9;handlingString = handlingString + lastfreeDayAttr + lastfreeDay;&#xA;&#x9;}&#xA;&#xA;&#x9;String handlingRemarkValue = XML_OVERRIDE+handlingRemark+XML_OVERRIDE;&#xA;    handlingString = handlingString+handlingRemarkAttr+handlingRemarkValue+ XML_END_ELEMENT;&#xA;&#x9;handlingString = this.stripInvalidXmlCharacters(handlingString);&#xA;&#x9;handlingString = this.ModifyEscapeChar(handlingString);&#xA;&#x9;inElementList.append(handlingString);&#xA;&#xA;    return inElementList;&#xA;  }&#xA;&#xA;&#x9;public StringBuffer getContentsDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;GoodsBase goods = inUnit.getUnitGoods();&#xA;&#x9;&#x9;String blNbr =  goods.getGdsBlNbr();&#xA;&#x9;&#x9;ScopedBizUnit shipper = goods.getGdsShipperBzu();&#xA;&#x9;&#x9;String shipperName = &quot;&quot;;&#xA;&#x9;&#x9;String shipperId = &quot;&quot;;&#xA;&#x9;&#x9;String consigneeName = &quot;&quot;;&#xA;&#x9;&#x9;String consigneeId = &quot;&quot; ;&#xA;&#x9;&#x9;String contentsShipperNameAttr = &quot; shipper-name=&quot;;&#xA;&#x9;&#x9;String contentsShipperIdAttr = &quot; shipper-id=&quot;;&#xA;&#x9;&#x9;String contentsConsigneeNameAttr = &quot; consignee-name=&quot;;&#xA;&#x9;&#x9;String contentsConsigneeIdAttr = &quot; consignee-id=&quot;;&#xA;&#x9;&#x9;String contentsConsigneeNameValue = &quot;&quot;;&#xA;&#x9;&#x9;String contentsConsigneeIdValue = &quot;&quot;;&#xA;&#x9;&#x9;String contentsShipperNameValue = &quot;&quot;;&#xA;&#x9;&#x9;String contentsShipperIdValue = &quot;&quot;;&#xA;&#xA;&#x9;&#x9;ScopedBizUnit consignee = goods.getGdsConsigneeBzu();&#xA;&#x9;&#x9;if (consignee != null){&#xA;&#x9;&#x9;  try{&#xA;&#x9;&#x9;&#x9;consigneeName = consignee.getBzuName();&#xA;&#x9;&#x9;&#x9;consigneeName = removeDoubleQuotes(consigneeName);&#xA;&#x9;&#x9;&#x9;consigneeId = consignee.getBzuId();&#xA;&#x9;&#x9;&#x9;consigneeId = removeDoubleQuotes(consigneeId);&#xA;&#xA;&#x9;&#x9;&#x9;contentsConsigneeNameValue = XML_OVERRIDE+consigneeName+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;contentsConsigneeIdValue =  XML_OVERRIDE+consigneeId+XML_OVERRIDE;&#xA;&#x9;&#x9;  } catch (Exception e){&#xA;&#x9;&#x9;&#x9;LOGGER.warn (&quot;Exception in getting Consignee info&quot;+ e);&#xA;&#x9;&#x9;  }&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (blNbr == null || blNbr.startsWith(&quot;DO NOT EDIT&quot;)){&#xA;&#x9;&#x9;  blNbr = &quot;&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;String gdsWeight = inUnit.getUnitGoodsAndCtrWtKg().toString();&#xA;&#x9;&#x9;String contentsOpenAttr = &quot;&lt;contents&quot;;&#xA;&#x9;&#x9;String contentsCommodityNameAttr = &quot; commodity-name=&quot;;&#xA;&#x9;&#x9;String commodity = inUnit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;&#x9;String commodityName = inUnit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyShortName&quot;)&#xA;&#x9;&#x9;String contentsCommodityNameValue = XML_OVERRIDE+commodityName+XML_OVERRIDE;&#xA;&#x9;&#x9;String contentsCommodityIdAttr = &quot; commodity-id=&quot;;&#xA;&#x9;&#x9;String contentsCommodityIdValue = XML_OVERRIDE+commodity+XML_OVERRIDE;&#xA;&#x9;&#x9;String contentsBlNbrAttr = &quot; bl-nbr=&quot;;&#xA;&#x9;&#x9;String contentsBlNbrValue = XML_OVERRIDE+blNbr+XML_OVERRIDE;&#xA;&#x9;&#x9;String contentsWeightKgAttr = &quot; weight-kg=&quot;;&#xA;&#x9;&#x9;String contentsWeightKgValue = XML_OVERRIDE+gdsWeight+XML_OVERRIDE;&#xA;&#xA;&#x9;&#x9;if (shipper != null){&#xA;&#x9;&#x9;  try{&#xA;&#x9;&#x9;&#x9;shipperName = shipper.getBzuName();&#xA;&#x9;&#x9;&#x9;shipperName = removeDoubleQuotes(shipperName);&#xA;&#x9;&#x9;&#x9;shipperId = shipper.getBzuId();&#xA;&#x9;&#x9;&#x9;shipperId = removeDoubleQuotes(shipperId);&#xA;&#xA;&#x9;&#x9;&#x9;contentsShipperNameValue = XML_OVERRIDE+shipperName+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;contentsShipperIdValue =  XML_OVERRIDE+shipperId+XML_OVERRIDE;&#xA;&#x9;&#x9;  } catch (Exception e){&#xA;&#x9;&#x9;&#x9;LOGGER.warn (&quot;Exception in getting Shipper Info&quot; + e);&#xA;&#x9;&#x9;  }&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;String handlingString = contentsOpenAttr+contentsCommodityNameAttr+contentsCommodityNameValue+contentsCommodityIdAttr+contentsCommodityIdValue;&#xA;&#x9;&#x9;if (shipper != null){&#xA;&#x9;&#x9;  handlingString = handlingString+contentsShipperNameAttr+contentsShipperNameValue+contentsShipperIdAttr+contentsShipperIdValue;&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (consignee != null){&#xA;&#x9;&#x9;  handlingString = handlingString+contentsConsigneeNameAttr+contentsConsigneeNameValue+contentsConsigneeIdAttr+contentsConsigneeIdValue;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//if (blNbr !=null){&#xA;&#x9;&#x9;  handlingString = handlingString+contentsBlNbrAttr+contentsBlNbrValue;&#xA;&#x9;&#x9;//}&#xA;&#x9;&#x9;if (gdsWeight != null){&#xA;&#x9;&#x9;  handlingString = handlingString+contentsWeightKgAttr+contentsWeightKgValue;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9; handlingString = handlingString+XML_END_ELEMENT;&#xA;&#x9;&#x9; handlingString = this.stripInvalidXmlCharacters(handlingString);&#xA;&#x9;&#x9; inElementList.append(handlingString);&#xA;&#x9;&#x9; //Add Seal Element&#xA;&#x9;&#x9;String sealsOpenAttr = &quot;&lt;seals&quot;;&#xA;&#x9;&#x9;String seals1Attr = &quot; seal-1=&quot;;&#xA;&#x9;&#x9;String seals1Value = XML_OVERRIDE+inUnit.getUnitSealNbr1()+XML_OVERRIDE;&#xA;&#x9;&#x9;if (inUnit.getUnitSealNbr1() != null){&#xA;&#x9;&#x9;  String sealsString = sealsOpenAttr+seals1Attr+seals1Value+XML_END_ELEMENT;&#xA;&#x9;&#x9;  inElementList.append(sealsString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;public StringBuffer getUnitEtc(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;def drayStatus = inUnit.getFieldValue(&quot;unitDrayStatus&quot;);&#xA;&#x9;&#x9;if (drayStatus != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;drayStatus = drayStatus.getKey();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;String requiredPower = inUnit.getFieldValue(&quot;unitRequiresPower&quot;) ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;String etcAttrOpn = &quot;&lt;unit-etc&quot;;&#xA;&#x9;&#x9;String etcString = etcAttrOpn;&#xA;&#x9;&#x9;if (requiredPower == &quot;Y&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;etcString = etcString + &quot; requires-power=&quot; + XML_OVERRIDE + requiredPower + XML_OVERRIDE;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (drayStatus !=null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;etcString = etcString + &quot; dray-status=&quot; + XML_OVERRIDE + drayStatus + XML_OVERRIDE;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (drayStatus != null || requiredPower == &quot;Y&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;etcString = etcString + XML_END_ELEMENT;&#xA;&#x9;&#x9;inElementList.append(etcString);&#xA;&#x9;&#x9;}&#xA;&#x9;return inElementList;&#xA;&#x9;}&#xA;&#xA;public getFlagDetails = {Unit inUnit, StringBuffer inElementList, CarrierVisit inCv -&gt;&#xA;&#xA;    String flagOpenCloseAttr = &quot;&lt;flags/&gt;&quot;;&#xA;    String flagOpenAttr = &quot;&lt;flags&gt;&quot;;&#xA;    String flagCloseAttr = &quot;&lt;/flags&gt;&quot;;&#xA;&#x9;String holdIdValue = &quot;&quot;;&#xA;&#x9;String holdString = &quot;&quot;;&#xA;&#x9;addNode = &quot;N&quot;;&#xA;    List unitImpediments = this.getUnitImpediments(inUnit);&#xA;&#xA;    if (unitImpediments.isEmpty()) {&#xA;      return inElementList;&#xA;    }&#xA;    for (ServiceImpediment imp : unitImpediments) {&#xA;      def status = imp.getStatus();&#xA;      if (FlagStatusEnum.ACTIVE.equals(status) || FlagStatusEnum.REQUIRED.equals(status)) {&#xA;        String holdOpenAttr = &quot;&lt;hold&quot;;&#xA;        String holdIdAttr = &quot; id=&quot;;&#xA;        String holdId = imp.getFlagType().getId();&#xA;&#x9;&#x9;String flgtypPurpose = imp.getFlagType().getPurpose().getKey();&#xA;&#x9;&#x9;println (&quot;holdId &quot;+ holdId +&quot; flgtypPurpose &quot;+flgtypPurpose);&#xA;&#x9;&#x9;if (flgtypPurpose != &quot;PERMISSION&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;addNode = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;holdIdValue = XML_OVERRIDE + holdId + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;holdString = holdString + holdOpenAttr + holdIdAttr + holdIdValue + XML_END_ELEMENT;&#xA;&#x9;&#x9;}&#xA;&#x9;  }&#xA;    }&#xA;&#xA;&#x9;if (addNode == &quot;Y&quot;)&#xA;&#x9;{&#xA;&#x9;&#x9;holdString = this.stripInvalidXmlCharacters(holdString);&#xA;&#x9;&#x9;holdString = this.ModifyEscapeChar(holdString);&#xA;&#x9;&#x9;holdString = flagOpenAttr + holdString + flagCloseAttr&#xA;&#x9;&#x9;inElementList.append(holdString);&#xA;&#x9;}&#xA;&#xA;&#x9;return inElementList;&#xA;  }&#xA;&#xA;  private List getUnitImpediments (Unit inUnit){&#xA;&#xA;    ServicesManager serviceManager = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;    List unitImpediments = serviceManager.getImpedimentsForEntity(inUnit);&#xA;    return unitImpediments;&#xA;  }&#xA;&#xA;  private String formatDate(Date inDate) {&#xA;    SimpleDateFormat yyyyMMdd = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;    SimpleDateFormat hhmmss = new SimpleDateFormat(&quot;HH:mm:ss.SSS&quot;);&#xA;    String sDate = yyyyMMdd.format(inDate) + &quot;T&quot; + hhmmss.format(inDate);&#xA;    return sDate&#xA;  }&#xA;&#xA;  private String formatRdsDate(Date inDate) {&#xA;    SimpleDateFormat yyyyMMdd = new SimpleDateFormat(&quot;MM/dd/yyyy&quot;);&#xA;    SimpleDateFormat hhmmss = new SimpleDateFormat(&quot;HH:mm:ss&quot;);&#xA;    String rdsDate = yyyyMMdd.format(inDate) + &quot; &quot; + hhmmss.format(inDate);&#xA;    return rdsDate&#xA;  }&#xA;&#xA;public String findCarrierVisitMode (CarrierVisit inCv){&#xA;&#xA;    final LocTypeEnum carrierMode = inCv.getCvCarrierMode();&#xA;    if (carrierMode.equals(LocTypeEnum.VESSEL)){&#xA;      return &quot;VESSEL&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.TRUCK)){&#xA;      return &quot;TRUCK&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.TRAIN)){&#xA;      return &quot;TRAIN&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.YARD)){&#xA;      return &quot;YARD&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.RAILCAR)){&#xA;      return &quot;TRAIN&quot;;&#xA;    }&#xA;&#x9;else{&#xA;      return &quot;UNKNOWN&quot;;&#xA;    }&#xA;  }&#xA;&#xA;  public String findEquipmentMaterial(Equipment inEq){&#xA;&#xA;    String material=&quot;&quot;;&#xA;    if ((EquipMaterialEnum.ALUMINUM.equals(inEq.getEqMaterial()))){&#xA;      material = XML_OVERRIDE+&quot;ALUMINUM&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((EquipMaterialEnum.STEEL.equals(inEq.getEqMaterial()))){&#xA;      material = XML_OVERRIDE+&quot;STEEL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((EquipMaterialEnum.UNKNOWN.equals(inEq.getEqMaterial()))){&#xA;      material = XML_OVERRIDE+&quot;UNKNOWN&quot;+XML_OVERRIDE;&#xA;    }&#xA;    return material;&#xA;  }&#xA;&#xA;  public String findUnitNbr(Unit inUnit){&#xA;&#xA;    Equipment eq = inUnit.getPrimaryEq();&#xA;    String  equipId = eq.getEqIdFull();&#xA;    equipId = XML_OVERRIDE+equipId+XML_OVERRIDE;&#xA;    return equipId;&#xA;   }&#xA;&#xA;  public String findUnitCategory(Unit inUnit){&#xA;&#xA;    String category=&quot;&quot;;&#xA;    if ((UnitCategoryEnum.EXPORT.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;EXPORT&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((UnitCategoryEnum.IMPORT.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;IMPORT&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((UnitCategoryEnum.THROUGH.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;THROUGH&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((UnitCategoryEnum.TRANSSHIP.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;TRANSSHIP&quot;+XML_OVERRIDE;&#xA;    }&#xA;&#xA;&#x9;if (category == &quot;&quot;)&#xA;&#x9;{&#xA;&#x9;&#x9;def categoryOther = inUnit.getUnitCategory();&#xA;&#x9;&#x9;categoryOther = categoryOther != null ? categoryOther.getKey() : &quot;&quot;&#xA;&#x9;&#x9;categoryOther = categoryOther == &quot;STRGE&quot; ? &quot;STORAGE&quot; : &quot;&quot;&#xA;&#x9;&#x9;category = XML_OVERRIDE+categoryOther+XML_OVERRIDE;&#xA;&#x9;}&#xA;&#xA;    return category;&#xA;  }&#xA;&#xA;  public String findUnitFreightKind(Unit inUnit){&#xA;&#xA;    String freightKind=&quot;&quot;;&#xA;    if ((FreightKindEnum.MTY.equals(inUnit.getUnitFreightKind()))){&#xA;      freightKind = XML_OVERRIDE+&quot;MTY&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((FreightKindEnum.LCL.equals(inUnit.getUnitFreightKind()))){&#xA;      freightKind = XML_OVERRIDE+&quot;LCL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((FreightKindEnum.FCL.equals(inUnit.getUnitFreightKind()))){&#xA;      freightKind = XML_OVERRIDE+&quot;FCL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    return freightKind;&#xA;  }&#xA;&#xA;&#x9;public String getTimeFormat(String inDate)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;String outDate = null;&#xA;&#x9;&#x9;DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#xA;&#x9;&#x9;if (inDate != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Date date = new SimpleDateFormat(&quot;EEE MMM dd hh:mm:ss zzz yyyy&quot;, Locale.ENGLISH).parse(inDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outDate = df.format(date);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;catch (de)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Date date = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;, Locale.ENGLISH).parse(inDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outDate = df.format(date);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;outDate = outDate + &quot;T00:00:00.000&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;return outDate;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;public StringBuffer getUfvDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;&#x9;def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;&#x9;&#x9;&#x9;def ufv = inUnit.getUfvForFacilityCompletedOnly(fcy);&#xA;&#x9;&#x9;&#x9;DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;if (ufv != null){&#xA;&#x9;&#x9;&#x9;&#x9;String addTag = &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate1 = ufv.getFieldValue(&quot;ufvFlexDate01&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate2 = ufv.getFieldValue(&quot;ufvFlexDate02&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate3 = ufv.getFieldValue(&quot;ufvFlexDate03&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate4 = ufv.getFieldValue(&quot;ufvFlexDate04&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate5 = ufv.getFieldValue(&quot;ufvFlexDate05&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate6 = ufv.getFieldValue(&quot;ufvFlexDate06&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate7 = ufv.getFieldValue(&quot;ufvFlexDate07&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexdate8 = ufv.getFieldValue(&quot;ufvFlexDate08&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexString1 = ufv.getFieldValue(&quot;ufvFlexString1&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString1&quot;)) : null;&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexString2 = ufv.getFieldValue(&quot;ufvFlexString2&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString2&quot;)) : null;&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexString3 = ufv.getFieldValue(&quot;ufvFlexString3&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString3&quot;)) : null;&#xA;&#x9;&#x9;&#x9;&#x9;String ufvflexString4 = ufv.getFieldValue(&quot;ufvFlexString4&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString4&quot;)) : null;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String date1Attr = &quot; ufv-flex-date-1=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String date2Attr = &quot; ufv-flex-date-2=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String date3Attr = &quot; ufv-flex-date-3=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String date4Attr = &quot; ufv-flex-date-4=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String date5Attr = &quot; ufv-flex-date-5=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String date6Attr = &quot; ufv-flex-date-6=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String date7Attr = &quot; ufv-flex-date-7=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String date8Attr = &quot; ufv-flex-date-8=&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String string1Attr = &quot; uvf-flex-1=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String string2Attr = &quot; uvf-flex-2=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String string3Attr = &quot; uvf-flex-3=&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;String string4Attr = &quot; uvf-flex-4=&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String string1Value = XML_OVERRIDE+ufvflexString1+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;String string2Value = XML_OVERRIDE+ufvflexString2+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;String string3Value = XML_OVERRIDE+ufvflexString3+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;String string4Value = XML_OVERRIDE+ufvflexString4+XML_OVERRIDE;&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String ufvFlexOpenAttr = &quot;&lt;ufv-flex&quot;&#xA;&#x9;&#x9;&#x9;&#x9;String ufvFlexString = ufvFlexOpenAttr;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate8 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate8 = this.getTimeFormat(ufvflexdate8)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date8Value = XML_OVERRIDE+ufvflexdate8+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date8Attr+date8Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate7 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate7 = this.getTimeFormat(ufvflexdate7)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date7Value = XML_OVERRIDE+ufvflexdate7+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date7Attr+date7Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate6 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate6 = this.getTimeFormat(ufvflexdate6)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date6Value = XML_OVERRIDE+ufvflexdate6+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date6Attr+date6Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate5 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate5 = this.getTimeFormat(ufvflexdate5)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date5Value = XML_OVERRIDE+ufvflexdate5+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date5Attr+date5Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate4 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate4 = this.getTimeFormat(ufvflexdate4)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date4Value = XML_OVERRIDE+ufvflexdate4+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date4Attr+date4Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate3 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate3 = this.getTimeFormat(ufvflexdate3)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date3Value = XML_OVERRIDE+ufvflexdate3+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date3Attr+date3Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate2 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate2 = this.getTimeFormat(ufvflexdate2)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date2Value = XML_OVERRIDE+ufvflexdate2+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date2Attr+date2Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexdate1 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvflexdate1 = this.getTimeFormat(ufvflexdate1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String date1Value = XML_OVERRIDE+ufvflexdate1+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date1Attr+date1Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexString1 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = this.removeDoubleQuotes(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string1Attr+string1Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexString2 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string2Attr+string2Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexString3 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string3Attr+string3Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (ufvflexString4 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string4Attr+string4Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = this.stripInvalidXmlCharacters(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (addTag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//fvFlexString = this.stripInvalidXmlCharacters(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ufvFlexString = this.ModifyEscapeChar(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;inElementList.append(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return inElementList;&#xA;&#x9;&#x9;  }&#xA;&#xA;&#x9;public StringBuffer getUnitFlexDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;&#x9;String  unitflexString1 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString2 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString3 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String  unitflexString4 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString5 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString6 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String  unitflexString7 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString8 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString9 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString10 = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;String&#x9;unitflexString12 = &quot;&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;unitflexString1 = inUnit.getFieldValue(&quot;unitFlexString01&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString01&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString2 = inUnit.getFieldValue(&quot;unitFlexString02&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString02&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString3 = inUnit.getFieldValue(&quot;unitFlexString03&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString03&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString4 = inUnit.getFieldValue(&quot;unitFlexString04&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString04&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString5 = inUnit.getFieldValue(&quot;unitFlexString05&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString05&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString6 = inUnit.getFieldValue(&quot;unitFlexString06&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString06&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString7 = inUnit.getFieldValue(&quot;unitFlexString07&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString07&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString8 = inUnit.getFieldValue(&quot;unitFlexString08&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString08&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString9 = inUnit.getFieldValue(&quot;unitFlexString09&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString09&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString10 = inUnit.getFieldValue(&quot;unitFlexString10&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString10&quot;)): null;&#xA;&#x9;&#x9;&#x9;unitflexString12 = inUnit.getFieldValue(&quot;unitFlexString12&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString12&quot;)): null;&#xA;&#xA;&#x9;&#x9;&#x9;String unitFlexOpenAttr = &quot;&lt;unit-flex&quot;&#xA;&#x9;&#x9;&#x9;String string1Attr = &quot; unit-flex-1=&quot;;&#xA;&#x9;&#x9;&#x9;String string2Attr = &quot; unit-flex-2=&quot;;&#xA;&#x9;&#x9;&#x9;String string3Attr = &quot; unit-flex-3=&quot;;&#xA;&#x9;&#x9;&#x9;String string4Attr = &quot; unit-flex-4=&quot;;&#xA;&#x9;&#x9;&#x9;String string5Attr = &quot; unit-flex-5=&quot;;&#xA;&#x9;&#x9;&#x9;String string6Attr = &quot; unit-flex-6=&quot;;&#xA;&#x9;&#x9;&#x9;String string7Attr = &quot; unit-flex-7=&quot;;&#xA;&#x9;&#x9;&#x9;String string8Attr = &quot; unit-flex-8=&quot;;&#xA;&#x9;&#x9;&#x9;String string9Attr = &quot; unit-flex-9=&quot;;&#xA;&#x9;&#x9;&#x9;String string10Attr = &quot; unit-flex-10=&quot;;&#xA;&#x9;&#x9;&#x9;String string12Attr = &quot; unit-flex-12=&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;String string1Value = XML_OVERRIDE+unitflexString1+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string2Value = XML_OVERRIDE+unitflexString2+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string3Value = XML_OVERRIDE+unitflexString3+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string4Value = XML_OVERRIDE+unitflexString4+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string5Value = XML_OVERRIDE+unitflexString5+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string6Value = XML_OVERRIDE+unitflexString6+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string7Value = XML_OVERRIDE+unitflexString7+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string8Value = XML_OVERRIDE+unitflexString8+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string9Value = XML_OVERRIDE+unitflexString9+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string10Value = XML_OVERRIDE+unitflexString10+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;String string12Value = XML_OVERRIDE+unitflexString12+XML_OVERRIDE;&#xA;&#x9;try {&#xA;&#xA;&#x9;&#x9;&#x9;//unitflexString6 = &quot;\&quot;MCMILLON, STEVEN &amp; P\&quot;&quot;;&#xA;&#x9;&#x9;&#x9;//unitflexString6 = removeDoubleQuotes(unitflexString6);&#xA;&#x9;&#x9;&#x9;//string6Value = XML_OVERRIDE+unitflexString6+XML_OVERRIDE;&#xA;&#xA;&#x9;&#x9;&#x9;String unitFlexString = unitFlexOpenAttr;&#xA;&#xA;&#x9;&#x9;&#x9;if (unitflexString12 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string12Attr+string12Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString10 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string10Attr+string10Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString9 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string9Attr+string9Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (unitflexString8 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string8Attr+string8Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString7 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string7Attr+string7Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;//LOGGER.warn(&quot;unitflexString6::::::&quot; + unitflexString6);&#xA;&#x9;&#x9;&#x9;if (unitflexString6 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string6Attr+string6Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString5 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string5Attr+string5Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString4 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string4Attr+string4Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString3 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string3Attr+string3Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString2 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string2Attr+string2Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (unitflexString1 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string1Attr+string1Value;&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (unitflexString1 != null || unitflexString2 != null || unitflexString3 != null || unitflexString4 != null || unitflexString5 != null || unitflexString6 != null&#xA;&#x9;&#x9;&#x9;&#x9;|| unitflexString7 != null || unitflexString8 != null || unitflexString9 != null || unitflexString10 != null || unitflexString12 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;//unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;unitFlexString = this.ModifyEscapeChar(unitFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(unitFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;catch (e){&#xA;&#xA;&#x9;LOGGER.warn(&quot;unitFlexString Error ::::::&quot; + e);&#xA;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;public StringBuffer geTimeStamp(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;{&#xA;&#xA;&#x9;&#x9;def ufv = inUnit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;if (ufv !=null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;String timeIn = ufv.ufvTimeIn;&#xA;&#x9;&#x9;&#x9;String timeOut = ufv.ufvTimeOut;&#xA;&#x9;&#x9;&#x9;String timeLoad = ufv.ufvTimeOfLoading;&#xA;&#xA;&#x9;&#x9;    String timeStampAttrOpn = &quot;&lt;timestamps&quot;;&#xA;&#x9;&#x9;&#x9;String timeStampString = timeStampAttrOpn;&#xA;&#x9;&#x9;&#x9;if (timeIn !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + &quot; time-in=&quot; + XML_OVERRIDE + timeIn + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (timeOut !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + &quot; time-out=&quot; + XML_OVERRIDE + timeOut + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (timeLoad !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + &quot; time-load=&quot; + XML_OVERRIDE + timeLoad + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (timeIn != null || timeOut != null || timeLoad != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(timeStampString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;&#xA;public String stripInvalidXmlCharacters(String input){&#xA;    String specialCharacter = &quot;&amp;&quot;;&#xA;    try {&#xA;    if (input.contains(specialCharacter)) {&#xA;       input = input.replaceAll(&quot;&amp;&quot;, &quot;&amp;amp; &quot;);&#xA;       //LOGGER.warn(&quot;sb:&quot; + input);&#xA;    }&#xA;&#xA;&#x9;if (input.contains(&quot;null&quot;)) {&#xA;       input = input.replaceAll(&quot;null&quot;, &quot; &quot;);&#xA;       //LOGGER.warn(&quot;sb:&quot; + input);&#xA;    }&#xA;    }&#xA;    catch (e){&#xA;&#xA;    }&#xA;    return input;&#xA;  }&#xA;&#xA; public String removeDoubleQuotes(String input){&#xA;    String specialCharacter = &quot;&amp;&quot;;&#xA;    try {&#xA;    if (input.contains(&quot;\&quot;&quot;)) {&#xA;       input = input.replaceAll(&quot;\&quot;&quot;, &quot;#quot;&quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;&lt;&quot;)) {&#xA;       input = input.replaceAll(&quot;&lt;&quot;, &quot;#lt; &quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;&gt;&quot;)) {&#xA;       input = input.replaceAll(&quot;&gt;&quot;, &quot;#gt; &quot;);&#xA;    }&#xA;    }&#xA;    catch (e){&#xA;&#xA;    }&#xA;    return input;&#xA;  }&#xA;&#xA; public String ModifyEscapeChar(String input){&#xA;    try {&#xA;    if (input.contains(&quot;#quot&quot;)) {&#xA;       input = input.replaceAll(&quot;#quot;&quot;, &quot;&amp;quot;&quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;#lt&quot;)) {&#xA;       input = input.replaceAll(&quot;#lt;&quot;, &quot;&amp;lt; &quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;#gt&quot;)) {&#xA;       input = input.replaceAll(&quot;#gt;&quot;, &quot;&amp;gt; &quot;);&#xA;    }&#xA;    }&#xA;    catch (e){&#xA;&#xA;    }&#xA;    return input;&#xA;  }&#xA;&#xA;&#x9;&#x9;private static final Logger LOGGER = Logger.getLogger(MATBargeYBDepartUnitsTest.class);&#xA;&#x9;}" />
<digital-asset id="MATProcessMatsonVess" short-description="MATProcessMatsonVess" is-pre-deployed="N" groovy-code="import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.atoms.EquipMaterialEnum&#xA;import com.navis.argo.business.atoms.FlagStatusEnum&#xA;import com.navis.argo.business.atoms.FlagPurposeEnum;&#xA;import com.navis.argo.business.atoms.FreightKindEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.services.business.rules.ServiceImpediment&#xA;import org.apache.log4j.Logger&#xA;import java.text.SimpleDateFormat&#xA;import javax.jms.JMSException&#xA;import javax.jms.Session&#xA;import javax.jms.Connection&#xA;import javax.jms.ConnectionFactory&#xA;import javax.jms.MessageProducer&#xA;import javax.jms.Destination&#xA;import javax.naming.Context&#xA;import javax.naming.InitialContext&#xA;import javax.jms.TextMessage&#xA;import javax.jms.*&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.reference.Group;&#xA;import com.navis.inventory.business.units.Routing;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import com.navis.services.business.event.*&#xA;&#xA;import org.apache.activemq.ActiveMQConnectionFactory;&#xA;&#xA;import java.text.DateFormat;&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.framework.portal.Ordering;&#xA;&#xA;&#xA;/*&#xA;&#xA;Date Written: 07/06/2012&#xA;Author: Siva Raja&#xA;Description: Groovy to extract unit details based on ane event recorded and send xml data to MNS application using JMS.&#xA;*/&#xA;&#xA;public class  MATProcessMatsonVess extends GroovyApi {&#xA;&#xA;  UserContext context = ContextHelper.getThreadUserContext();&#xA;  Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#xA;  private static final String XML_OVERRIDE = &quot;\&quot;&quot;;&#xA;  private static final String honFacility = &quot;ANK&quot;;&#xA;  private static final String XML_END_ELEMENT = &quot;/&gt;&quot;;&#xA;  private static final String queueNameTdp = &quot;akjmsdistqueuetdpN4QueueOut&quot;; // TDP Queue&#xA;  private static final String queueName = &quot;ak.jms.tos.newvess.inbound&quot;; // JMS Queue&#xA;  private static final String topicName = &quot;ak.jms.topic.tdp.newVesselAnk&quot; // DAS Topic;&#xA;  //private static final String jbossUrl = &quot;tcp://10.201.2.145:61616&quot;;//Preproduction&#xA;  //private static final String jbossUrl = &quot;tcp://10.201.1.79:61616&quot;;//Production&#xA;  private  String jbossUrl = null;&#xA;&#xA;  def inj = new GroovyInjectionBase();&#xA;  int pos&#xA;&#xA;//dkannadasan - Changed 'emailFrom' and 'emailTo' as '1aktosdevteam@matson.com'.   &#xA;  private final String  emailFrom = '1aktosdevteam@matson.com';&#xA;  private  String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#xA;  private String addNode = &quot;Y&quot;;&#xA;  private String fileName = &quot;&quot;;&#xA;&#xA;  Integer totalContainers = 0;&#xA;&#xA;&#xA;  public void execute(Unit tempUnit)&#xA;  {&#xA;    jbossUrl = inj.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;).getN4TopicAddress();&#xA;//Read the emails from DB &#xA; &#xA;//dkannadasan - Commenting out keerthi's change as its throwing error while recording newves complete.   &#xA;//emailTo  = inj.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;).getTOSAppParameters(&quot;MAIL_NEWVES_COMPLETE&quot;);&#xA;    println(&quot;JMS_URL IS &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  &quot;+jbossUrl);&#xA;LOGGER.warn(&quot;MAIL_NEWVES_COMPLETE &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  &quot;+emailTo);&#xA;    LOGGER.warn(&quot;MATProcessMatsonVess started&quot; + timeNow);&#xA;    if (tempUnit == null){&#xA;      LOGGER.warn (&quot; Unit is null&quot;);&#xA;      return;&#xA;    }&#xA;    UnitFacilityVisit ufv = tempUnit.getUnitActiveUfvNowActive();&#xA;    if (ufv == null){&#xA;      LOGGER.warn (&quot; Unit facility is null&quot;);&#xA;      return;&#xA;    }&#xA;    CarrierVisit cv = ufv.getInboundCarrierVisit();&#xA;&#xA;&#x9;List unitListForUpdate = this.getUnitListInCvForUpdate(cv);&#xA;&#x9;if (unitListForUpdate.isEmpty()) {&#xA;      LOGGER.warn (&quot;No Units in CV for update&quot;);&#xA;      return;&#xA;    }&#xA;&#xA;&#x9;LOGGER.warn(&quot;unitListForUpdate.size&quot; + unitListForUpdate.size);&#xA;&#x9;LOGGER.warn(&quot;unitListForUpdate Start&quot;);&#xA;&#x9;Iterator iter = unitListForUpdate.iterator();&#xA;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;def units = iter.next();&#xA;&#x9;&#x9;LOGGER.warn (&quot;BLNumberInit &quot; + units.unitId +&quot; --- &quot;+ units.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;));&#xA;&#x9;&#x9;def unitRemarks = units.getFieldValue(&quot;unitRemark&quot;);&#xA;&#x9;&#x9;def BLNumber=units.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;);&#xA;&#x9;&#x9;if (BLNumber != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if(BLNumber.startsWith(&quot;DO NOT EDIT&quot;)) {&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn (&quot;BL/Number &quot; + units.unitId +&quot; --- &quot;+ units.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;BLNumber = BLNumber.replace(&quot;DO NOT EDIT-NEWVES:&quot;,&quot;&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;BLNumber = BLNumber.replace(&quot;DO NOT EDIT - WAIT FOR NEWVES&quot;,&quot; &quot;);&#xA;&#x9;&#x9;&#x9;&#x9;units.setFieldValue(&quot;unitGoods.gdsBlNbr&quot;, BLNumber);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (unitRemarks != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if(unitRemarks.contains(&quot;ZZZZ&quot;)) {&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn (&quot;unitRemarks &quot; + units.unitId +&quot; --- &quot;+ units.getFieldValue(&quot;unitRemark&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;unitRemarks = unitRemarks.replace(&quot;ZZZZ&quot;,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;units.setFieldValue(&quot;unitRemark&quot;, unitRemarks);&#xA;            }&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;LOGGER.warn(&quot;unitListForUpdate End &quot; + cv);&#xA;&#xA;    List unitList = this.getUnitListInCv(cv);&#xA;    if (unitList.isEmpty()) {&#xA;      LOGGER.warn (&quot;No Units in CV&quot;);&#xA;      return;&#xA;    }&#xA;&#x9;println(&quot;buildXmlElement Start &quot; + cv);&#xA;&#x9;LOGGER.warn(&quot;buildXmlElement Start &quot; + cv);&#xA;    StringBuffer xml = this.buildXmlElement(unitList, cv);&#xA;    LOGGER.warn(&quot;XMLString:&quot;+xml.toString());&#xA;&#x9;println(&quot;XMLString: &quot;+xml.toString());&#xA;&#xA;&#x9;def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;&#x9;if ((xml.toString() != &quot;null&quot;) || xml.toString().length() &gt; 4)&#xA;&#x9;{&#xA;&#xA;&#x9;&#x9;//Send the Complete XML string to MNS application using JMS queue.&#xA;    &#x9;this.send(xml.toString());&#xA;    &#x9;this.topicSend(xml.toString());&#xA;    &#x9;try{&#xA;&#x9;&#x9;&#x9;Date fileDate = new Date();&#xA;&#x9;&#x9;&#x9;DateFormat fileDateFormat = new SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;);&#xA;&#x9;&#x9;&#x9;String strDate = fileDateFormat.format(fileDate);&#xA;&#xA;&#x9;&#x9;&#x9;fileName = &quot;NV_&quot;+cv+&quot;_&quot;+strDate+&quot;.xml&quot;;&#xA;&#x9;&#x9;&#x9;println(&quot;fileName :::: &quot; + fileName);&#xA;&#x9;&#x9;&#x9;this.writeToFile(fileName,xml.toString());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (Exception e){&#xA;&#x9;&#x9;&#x9;println(&quot;Error while creating the file : &quot;+ fileName);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9; emailSender.custSendEmail(emailFrom,emailTo,&quot; NewVes Process Completed for  &quot;+ cv +&quot; In TOS. &quot; +totalContainers+ &quot; units processed.&quot;,&quot;NewVes Process Completed for  &quot;+cv+&quot; In TOS. &quot;+totalContainers+&quot; units processed , xml posted to MNS application&quot;);&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;  {&#xA;&#x9;&#x9; emailSender.custSendEmail(emailFrom,emailTo,&quot; NewVes Process Completed for  &quot;+cv+&quot; In TOS with Errors&quot;,&quot;NewVes Process Completed for  &quot;+cv+&quot; In TOS with Errors, xml has not been posted to MNS application due to error in data&quot;);&#xA;&#x9;  }&#xA;&#x9;println(&quot;MATProcessMatsonVess ended&quot; + timeNow);&#xA;    LOGGER.warn(&quot;MATProcessMatsonVess ended&quot; + timeNow);&#xA;  }&#xA;&#xA;  public void sendToTdp(String msg) throws JMSException, Exception {&#xA;&#xA;    LOGGER.warn (&quot; in sendToTdp message &quot;);&#xA;    String  cfName = &quot;jms/WLQueueConnectionFactory&quot;;&#xA;    Session                session    = null;&#xA;    Connection             connection = null;&#xA;    ConnectionFactory      cf         = null;&#xA;    MessageProducer        mp         = null;&#xA;    Destination            destination = null;&#xA;&#xA;    try {&#xA;jbossUrl = inj.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;).getN4TopicAddress();&#xA;    println(&quot;JMS_URL IS &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  &quot;+jbossUrl);&#xA;      LOGGER.warn( &quot;Getting Connection Factory&quot;);&#xA;&#xA;&#x9;  cf = new ActiveMQConnectionFactory(jbossUrl);&#xA;      LOGGER.warn( &quot;Getting Queue&quot;);&#xA;&#xA;      LOGGER.warn( &quot;Getting Connection for Queue&quot;);&#xA;      connection = cf.createConnection();&#xA;      LOGGER.warn( &quot;staring the connection&quot;);&#xA;      connection.start();&#xA;      LOGGER.warn( &quot;creating session&quot;);&#xA;      session = connection.createSession(false, 1);&#xA;      destination = session.createQueue(queueNameTdp);&#xA;      LOGGER.warn( &quot;creating messageProducer&quot;);&#xA;      mp = session.createProducer(destination);&#xA;      LOGGER.warn( &quot;creating TextMessage&quot;);&#xA;      TextMessage outMessage = session.createTextMessage( msg);&#xA;      LOGGER.warn( &quot;sending Message to queue: &quot; + queueNameTdp);&#xA;      mp.send(outMessage);&#xA;      mp.close();&#xA;     session.close();&#xA;      connection.close();&#xA;    }&#xA;    catch (Exception je)&#xA;    {&#xA;      LOGGER.warn(&quot;Exception in send:&quot; + je )&#xA;    }&#xA;  }&#xA;&#xA;  public void send(String msg) throws JMSException, Exception {&#xA;&#xA;    LOGGER.warn (&quot; in send message &quot;);&#xA;    String  cfName = &quot;jms/WLQueueConnectionFactory&quot;;&#xA;    LOGGER.warn (&quot;jbossUrl:&quot;+ jbossUrl);&#xA;    Session                session    = null;&#xA;    Connection             connection = null;&#xA;    ConnectionFactory      cf         = null;&#xA;    MessageProducer        mp         = null;&#xA;    Destination            destination = null;&#xA;&#xA;    try {&#xA;&#xA;      LOGGER.warn( &quot;Getting Connection Factory&quot;);&#xA;      cf = new ActiveMQConnectionFactory(jbossUrl);&#xA;      LOGGER.warn( &quot;Getting Queue&quot;);&#xA;      LOGGER.warn( &quot;Getting Connection for Queue&quot;);&#xA;      connection = cf.createConnection();&#xA;      LOGGER.warn( &quot;staring the connection&quot;);&#xA;      connection.start();&#xA;      LOGGER.warn( &quot;creating session&quot;);&#xA;      session = connection.createSession(false, 1);&#xA;      destination = session.createQueue(queueName);&#xA;      LOGGER.warn( &quot;creating messageProducer&quot;);&#xA;      mp = session.createProducer(destination);&#xA;      LOGGER.warn( &quot;creating TextMessage&quot;);&#xA;      TextMessage outMessage = session.createTextMessage( msg);&#xA;      println( &quot;sending Message to MNS AND DAS queue : &quot; + queueName);&#xA;      LOGGER.warn( &quot;sending Message to queue: &quot; + queueName);&#xA;      mp.send(outMessage);&#xA;      mp.close();&#xA;     session.close();&#xA;      connection.close();&#xA;    }&#xA;    catch (Exception je)&#xA;    {&#xA;      LOGGER.warn(&quot;Exception in send:&quot; + je )&#xA;    }&#xA;  }&#xA;&#xA; public void topicSend(String msg) throws JMSException, Exception {&#xA; &#x9;LOGGER.warn (&quot; in topicSend message &quot;);&#xA; &#x9;String  cfName                    = &quot;jms/WLQueueConnectionFactory&quot;;&#xA;&#x9;TopicSession               session    = null;&#xA;&#x9;TopicConnection             connection = null;&#xA;&#x9;TopicConnectionFactory      cf         = null;&#xA;&#x9;MessageProducer        mp         = null;&#xA;&#x9;Destination            destination = null;&#xA;&#x9;LOGGER.warn (&quot;topicSend&quot;);&#xA;&#x9;try {&#xA;&#xA;&#x9;&#x9;LOGGER.warn (&quot;Getting Connection Factory&quot;);&#xA;&#x9;  &#x9;cf = new ActiveMQConnectionFactory(jbossUrl);&#xA;&#x9;&#x9;LOGGER.warn(&quot;Getting Connection for Topic&quot;);&#xA;&#x9;&#x9;connection = cf.createTopicConnection();&#xA;&#xA;&#x9;&#x9;LOGGER.warn( &quot;staring the connection&quot;);&#xA;&#x9;&#x9;connection.start();&#xA;&#xA;&#x9;&#x9;LOGGER.warn( &quot;creating session&quot;);&#xA;&#x9;&#x9;session = connection.createTopicSession(false, 1);&#xA;&#x9;&#x9;destination = session.createTopic(topicName);&#xA;&#xA;&#x9;&#x9;LOGGER.warn( &quot;creating messageProducer&quot;);&#xA;&#x9;&#x9;mp = session.createProducer(destination);&#xA;&#xA;&#x9;&#x9;LOGGER.warn( &quot;creating TextMessage&quot;);&#xA;&#x9;&#x9;TextMessage outMessage = session.createTextMessage( msg);&#xA;&#xA;&#x9;&#x9;LOGGER.warn( &quot;sending Message to topic: &quot; + topicName);&#xA;&#x9;&#x9;mp.send(outMessage);&#xA;&#xA;&#x9;&#x9;mp.close();&#xA;&#x9;&#x9;session.close();&#xA;&#x9;&#x9;connection.close();&#xA;    }&#xA;    catch (Exception je)&#xA;    {&#xA;&#x9;LOGGER.warn(&quot;Exception in topicSend:&quot; + je )&#xA;    }&#xA;}&#xA;&#xA;// Added by Raghu Iyer on 11/08/2012 to update the BL Number as blank where &quot;DO NOT EDIT .....&quot;&#xA;  private List&lt;Unit&gt; getUnitListInCvForUpdate(CarrierVisit inCv){&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;            .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_DECLARED_IB_CV, inCv.getCvGkey()))&#xA; //.addDqPredicate(PredicateFactory.in(UnitField.UNIT_ID, &quot;WSCU1955670&quot;))&#xA;            .addDqPredicate(PredicateFactory.in(UnitField.UNIT_VISIT_STATE, Unit.LIVE_STATES));&#xA;&#xA;&#x9;println(&quot;getUnitListInCvForUpdate dq &quot; +dq)&#xA;    HibernateApi hibernate = HibernateApi.getInstance();&#xA;    List unitList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#x9;println(&quot;getUnitListInCvForUpdate &quot; + unitList.size())&#xA;    return unitList;&#xA;  }&#xA;&#xA;&#xA;  private List&lt;Unit&gt; getUnitListInCv(CarrierVisit inCv){&#xA;&#x9;println (&quot;getUnitListInCv Start&quot;)&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;           .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_DECLARED_IB_CV, inCv.getCvGkey()))&#xA; //.addDqPredicate(PredicateFactory.in(UnitField.UNIT_ID, &quot;WSCU1955670&quot;))&#xA;            .addDqPredicate(PredicateFactory.in(UnitField.UNIT_VISIT_STATE, Unit.LIVE_STATES));&#xA;//            .addDqPredicate(PredicateFactory.in(UnitField.UNIT_ID, &quot;TRLU8077808&quot;));&#xA;&#x9;&#x9;//UNIT_CURRENT_UFV_ACTUAL_IB_CV&#xA;&#x9;println(&quot;getUnitListInCvdq &quot; +dq)&#xA;    HibernateApi hibernate = HibernateApi.getInstance();&#xA;    List unitList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#x9;println(&quot;getUnitListInCv &quot; + unitList.size())&#xA;&#x9;totalContainers = unitList.size();&#xA;    println (&quot;getUnitListInCv End&quot;)&#xA;&#x9;return unitList;&#xA;  }&#xA;&#xA;  private StringBuffer buildXmlElement(List inUnitList, CarrierVisit inCv){&#xA;    StringBuffer elementList = new StringBuffer();&#xA;    //Build the XML Root Elements&#xA;    elementList.append(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot; standalone=\&quot;yes\&quot;?&gt;&quot;);&#xA;    elementList.append(&quot;&lt;ns2:snx xmlns:ns2=\&quot;http://www.navis.com/argo\&quot;&gt;&quot;);&#xA;    // Build the XML Shipper Consignee Elements&#xA;    for (int k=0; k &lt; inUnitList.size(); k++){&#xA;      //for (int k=0; k &lt; 5; k++){&#xA;      Unit unit = (Unit) inUnitList.get(k);&#xA;      this.getShipperConsigneeDetails(unit,elementList);&#xA;    }&#xA;    // Build the XML Vessel Visit Detail element&#xA;    this.getVesselVisitDetails(inCv,elementList);&#xA;    // Build the XML Unit detail elements&#xA;    try{&#xA;     int lastElement = inUnitList.size() - 1  ;&#xA;    for (int i=0; i &lt; inUnitList.size(); i++){&#xA;      Unit unit = (Unit) inUnitList.get(i);&#xA;      if (i.equals(lastElement)){&#xA;        LOGGER.warn(&quot;LAST ELEMENT:&quot; + i);&#xA;        this.getLastUnitDetails(unit, elementList, inUnitList.size());&#xA;      }else{&#xA;       this.getUnitDetails(unit, elementList);&#xA;      }&#xA;&#x9;&#x9;  elementList = this.getEquipmentDetails(unit, elementList);&#xA;&#x9;&#x9;  elementList = this.getPositionDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getRoutingDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getCarrierDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getHazard(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getOog(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getBookingNbr(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getReefer(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getHandlingDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getContentsDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getUnitEtc(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getFlagDetails(unit,elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getUnitFlexDetails(unit,elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getUfvDetails(unit,elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.geTimeStamp(unit,elementList, inCv);&#xA;      elementList.append(&quot;&lt;/unit&gt;&quot;);&#xA;    }&#xA;    elementList.append(&quot;&lt;/ns2:snx&gt;&quot;);&#xA;&#x9;//println(&quot;elementList=====================&gt;&quot;+elementList);&#xA;    return elementList;&#xA;  }catch (Exception e){&#xA;    LOGGER.warn (&quot;Exception in prining xml&quot; + e);&#xA;  }&#xA;  }&#xA;&#xA;  public StringBuffer getShipperConsigneeDetails(Unit inUnit, StringBuffer inElementList){&#xA;&#xA;    GoodsBase goods = inUnit.getUnitGoods();&#xA;    String shipperName = &quot;&quot;;&#xA;    String shipperId = &quot;&quot;;&#xA;    String consigneeName = &quot;&quot;;&#xA;    String consigneeId = &quot;&quot;;&#xA;&#xA;    ScopedBizUnit shipper = goods.getGdsShipperBzu();&#xA;    if (shipper != null){&#xA;     try{&#xA;&#xA;&#x9;&#x9;shipperName = shipper.getBzuName();&#xA;        shipperName = removeDoubleQuotes(shipperName);&#xA;&#x9;&#x9;shipperId = shipper.getBzuId();&#xA;&#x9;&#x9;shipperId = removeDoubleQuotes(shipperId);&#xA;&#xA;&#xA;      String shipConOpenAttr = &quot;&lt;shipper-consignee&quot;;&#xA;      String shipperNameAttr = &quot; name=&quot;;&#xA;      String shipperNameValue = XML_OVERRIDE+shipperName+XML_OVERRIDE;&#xA;      String shipperIdAttr = &quot; id=&quot;;&#xA;      String shipperIdValue =  XML_OVERRIDE+shipperId+XML_OVERRIDE;&#xA;      String shipperString = shipConOpenAttr + shipperNameAttr+ shipperNameValue + shipperIdAttr + shipperIdValue + XML_END_ELEMENT;&#xA;      shipperString = this.stripInvalidXmlCharacters(shipperString);&#xA;&#x9;  shipperString = this.ModifyEscapeChar(shipperString);&#xA;      inElementList.append(shipperString);&#xA;    } catch (Exception e){&#xA;      LOGGER.warn (&quot;Exception in getting Shipper Info&quot; + e);&#xA;    }&#xA;  }&#xA;&#xA;    ScopedBizUnit consignee = goods.getGdsConsigneeBzu();&#xA;    if (consignee != null){&#xA;    try{&#xA;      consigneeName = consignee.getBzuName();&#xA;&#x9;  consigneeName = removeDoubleQuotes(consigneeName);&#xA;      consigneeId = consignee.getBzuId();&#xA;&#x9;  consigneeId = removeDoubleQuotes(consigneeId);&#xA;&#xA;&#x9;  String shipConOpenAttr = &quot;&lt;shipper-consignee&quot;;&#xA;      String shipperNameAttr = &quot; name=&quot;;&#xA;      String consigneeNameValue = XML_OVERRIDE+consigneeName+XML_OVERRIDE;&#xA;      String shipperIdAttr = &quot; id=&quot;;&#xA;      String consigneeIdValue =  XML_OVERRIDE+consigneeId+XML_OVERRIDE;&#xA;      String consigneeString = shipConOpenAttr + shipperNameAttr+ consigneeNameValue + shipperIdAttr + consigneeIdValue + XML_END_ELEMENT;&#xA;      consigneeString = this.stripInvalidXmlCharacters(consigneeString);&#xA;      consigneeString = this.ModifyEscapeChar(consigneeString);&#xA;&#x9;  inElementList.append(consigneeString);&#xA;    } catch (Exception e){&#xA;      LOGGER.warn (&quot;Exception in getting Consignee info&quot;+ e);&#xA;    }&#xA;    }&#xA;    return inElementList;&#xA;  }&#xA;&#xA;  public StringBuffer getVesselVisitDetails(CarrierVisit inCv, StringBuffer inElementList){&#xA;&#xA;    def vvd = VesselVisitDetails.resolveVvdFromCv(inCv);&#xA;    Date timeFirstAvailable = vvd.getCvdTimeFirstAvailability();&#xA;    String timeFa = &quot;&quot;;&#xA;    if (timeFirstAvailable != null){&#xA;      timeFa = this.formatDate(timeFirstAvailable);&#xA;    }&#xA;    String vvOpenAttr = &quot;&lt;vessel-visit&quot;;&#xA;    String vvFirstTimeAvailabilityAttr = &quot; time-first-availability=&quot;;&#xA;    String vvFirstTimeAvailabilityValue = XML_OVERRIDE+timeFa+XML_OVERRIDE;&#xA;    String vvIdAttr = &quot; id=&quot;;&#xA;    String vvIdValue = XML_OVERRIDE+inCv.getCvId()+XML_OVERRIDE;&#xA;    String vesselVisitString = vvOpenAttr+vvFirstTimeAvailabilityAttr+vvFirstTimeAvailabilityValue+vvIdAttr+vvIdValue+ XML_END_ELEMENT;&#xA;    vesselVisitString = this.stripInvalidXmlCharacters(vesselVisitString);&#xA;    vesselVisitString = this.ModifyEscapeChar(vesselVisitString);&#xA;&#x9;inElementList.append(vesselVisitString);&#xA;    return inElementList;&#xA;  }&#xA;&#xA;  public StringBuffer getLastUnitDetails(Unit inUnit, StringBuffer inElementList, int inUnitCount){&#xA;&#xA;    //unit snx-update-note=&quot;NewVes Completed Holds:(RM) unitCnt=1136 facility=HON rdsDtTime=05/01/2012 10:08:48&quot;&#xA;    // line=&quot;ANL&quot; freight-kind=&quot;FCL&quot; category=&quot;IMPORT&quot; id=&quot;UNIU5027989&quot;&gt;&#xA;&#xA;    String unitOpenAttr = &quot;&lt;unit snx-update-note=&quot;;&#xA;    String unitOpenValue = XML_OVERRIDE+&quot;NewVes Completed&quot;+&quot; unitCnt=&quot;+ inUnitCount.toString()+ &quot; facility=&quot;+ honFacility + &quot; rdsDtTime=&quot;+&#xA;                           this.formatRdsDate(timeNow) + XML_OVERRIDE;&#xA;    String lineAttr = &quot; line=&quot;;&#xA;    String freightKindAttr = &quot; freight-kind=&quot;;&#xA;    String idAttr = &quot; id=&quot;;&#xA;    String categoryAttr = &quot; category=&quot;;&#xA;    String freightKindValue = this.findUnitFreightKind(inUnit);&#xA;    String idValue = this.findUnitNbr(inUnit);&#xA;    String categoryValue = this.findUnitCategory(inUnit);&#xA;    ScopedBizUnit lineOp = inUnit.getUnitLineOperator();&#xA;    String lineValue = XML_OVERRIDE+lineOp.getBzuId()+XML_OVERRIDE;&#xA;    String unitString = unitOpenAttr + unitOpenValue+ lineAttr + lineValue + freightKindAttr + freightKindValue + categoryAttr + categoryValue + idAttr + idValue + &quot;&gt;&quot;;&#xA;    unitString = this.stripInvalidXmlCharacters(unitString);&#xA;    unitString = this.ModifyEscapeChar(unitString);&#xA;&#x9;inElementList.append(unitString);&#xA;    return inElementList;&#xA;  }&#xA;&#xA;  public StringBuffer getUnitDetails(Unit inUnit, StringBuffer inElementList){&#xA;&#xA;    List unitImpediments = this.getUnitImpediments(inUnit);&#xA;    String holds = &quot;&quot;;&#xA;    String unitOpenValue;&#xA;&#x9;addNode = &quot;N&quot;;&#xA;    if (!unitImpediments.isEmpty()) {&#xA;     for (int k=0; k &lt; unitImpediments.size(); k++){&#xA;     ServiceImpediment imp = (ServiceImpediment) unitImpediments.get(k);&#xA;      def status = imp.getStatus();&#xA;      if (FlagStatusEnum.ACTIVE.equals(status) || FlagStatusEnum.REQUIRED.equals(status)) {&#xA;        String holdId = imp.getFlagType().getId();&#xA;&#x9;&#x9;String flgtypPurpose = imp.getFlagType().getPurpose().getKey();&#xA;        //println (&quot;holdId &quot;+ holdId +&quot; flgtypPurpose &quot;+flgtypPurpose);&#xA;&#x9;&#x9;if (flgtypPurpose != &quot;PERMISSION&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;addNode = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;if (k == 0 || holds != null){&#xA;&#x9;&#x9;&#x9;holds = holds + holdId;&#xA;&#x9;&#x9;&#x9;}else {&#xA;&#x9;&#x9;&#x9;holds = holds + &quot;,&quot;+ holdId;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;      }&#xA;     }&#xA;&#x9;}&#xA;&#x9;if (addNode == &quot;Y&quot;)&#xA;&#x9;{&#xA;      unitOpenValue = XML_OVERRIDE+&quot;NewVes Holds:(&quot;+holds+&quot;)&quot;+XML_OVERRIDE;&#xA;    } else {&#xA;      unitOpenValue = XML_OVERRIDE+&quot;NewVes&quot;+XML_OVERRIDE;&#xA;    }&#xA;     String unitOpenAttr = &quot;&lt;unit snx-update-note=&quot;;&#xA;    String lineAttr = &quot; line=&quot;;&#xA;    String freightKindAttr = &quot; freight-kind=&quot;;&#xA;    String idAttr = &quot; id=&quot;;&#xA;    String categoryAttr = &quot; category=&quot;;&#xA;    String freightKindValue = this.findUnitFreightKind(inUnit);&#xA;    String idValue = this.findUnitNbr(inUnit);&#xA;    String categoryValue = this.findUnitCategory(inUnit);&#xA;    ScopedBizUnit lineOp = inUnit.getUnitLineOperator();&#xA;    String lineValue = XML_OVERRIDE+lineOp.getBzuId()+XML_OVERRIDE;&#xA;    String unitString = unitOpenAttr + unitOpenValue+ lineAttr + lineValue + freightKindAttr + freightKindValue + categoryAttr + categoryValue + idAttr + idValue + &quot;&gt;&quot;;&#xA;    unitString = this.stripInvalidXmlCharacters(unitString);&#xA;&#x9;unitString = this.ModifyEscapeChar(unitString);&#xA;&#x9;inElementList.append(unitString);&#xA;    return inElementList;&#xA;  }&#xA;&#xA;   public StringBuffer getEquipmentDetails(Unit inUnit, StringBuffer inElementList){&#xA;&#x9;try&#xA;&#x9;{&#xA;&#x9;Equipment eq = inUnit.getPrimaryEq();&#xA;&#xA;&#x9;def unitEquipment = inUnit.getUnitPrimaryUe()&#xA;    def ueEquipmentState = unitEquipment.getUeEquipmentState()&#xA;    def equipFlex01 = ueEquipmentState != null ? ueEquipmentState.getEqsFlexString01() : ''&#xA;&#xA;    String equipmentOpenAttr = &quot;&lt;equipment&quot;;&#xA;    String equipmentRoleAttr = &quot; role=&quot;;&#xA;    String equipmentRoleValue = XML_OVERRIDE+&quot;PRIMARY&quot;+XML_OVERRIDE;&#xA;    String equipmentFlex01Attr = &quot; eq-flex-01=&quot;;&#xA;    String equipmentFlex01Value = XML_OVERRIDE+equipFlex01+XML_OVERRIDE;&#xA;    String equipmentMaterialAttr = &quot; material=&quot;;&#xA;    String equipmentMaterialValue = this.findEquipmentMaterial(eq);&#xA;    String equipmentOperatorAttr = &quot; operator=&quot;&#xA;    String equipmentOperatorValue=XML_OVERRIDE+eq.getEquipmentOperatorId()+XML_OVERRIDE;&#xA;    String equipmentOwnerAttr = &quot; owner=&quot;&#xA;    String equipmentOwnerValue=XML_OVERRIDE+eq.getEquipmentOwnerId()+XML_OVERRIDE;&#xA;    String equipmentStrengthCodeAttr = &quot; strength-code=&quot;;&#xA;    String equipmentStrengthCodeValue = XML_OVERRIDE+eq.getEqStrengthCode()+XML_OVERRIDE;&#xA;    String equipmentHeightMmAttr = &quot; height-mm=&quot;;&#xA;    String equipmentHeightMmValue = XML_OVERRIDE+eq.getEqHeightMm().toString()+XML_OVERRIDE;&#xA;    String equipmentTareWeightKgAttr = &quot; tare-kg=&quot;;&#xA;    String equipmentTareWeightKgValue = XML_OVERRIDE+eq.getEqTareWeightKg().toString()+XML_OVERRIDE;&#xA;    String equipmentTypeAttr = &quot; type=&quot;;&#xA;    String equipmentTypeValue = XML_OVERRIDE+eq.getEqEquipType().eqtypId+XML_OVERRIDE;&#xA;    String equipmentClassAttr = &quot; class=&quot;;&#xA;&#x9;String equipClass = eq.getEqClass().getKey();&#xA;&#x9;equipClass = equipClass = &quot;CONTAINER&quot;?&quot;CTR&quot;:eq.getEqClass().getKey()&#xA;    String equipmentClassValue = XML_OVERRIDE+equipClass+XML_OVERRIDE&#xA;    String equipmentIdAttr = &quot; eqid=&quot;;&#xA;    String equipmentIdValue = this.findUnitNbr(inUnit);&#xA;&#xA;    String equipmentString = equipmentOpenAttr + equipmentRoleAttr+ equipmentRoleValue + equipmentFlex01Attr +&#xA;                             equipmentFlex01Value + equipmentMaterialAttr + equipmentMaterialValue+equipmentOperatorAttr+equipmentOperatorValue+&#xA;                             equipmentOwnerAttr+equipmentOwnerValue+equipmentStrengthCodeAttr+equipmentStrengthCodeValue+&#xA;                             equipmentHeightMmAttr+equipmentHeightMmValue+equipmentTareWeightKgAttr+equipmentTareWeightKgValue+&#xA;                             equipmentTypeAttr+equipmentTypeValue+equipmentClassAttr+equipmentClassValue+equipmentIdAttr+equipmentIdValue+ &quot;&gt;&quot;;&#xA;    equipmentString = this.stripInvalidXmlCharacters(equipmentString)&#xA;&#x9;equipmentString = this.ModifyEscapeChar(equipmentString);&#xA;&#x9;inElementList.append(equipmentString);&#xA;&#xA;&#x9;String grade = ueEquipmentState != null ? ueEquipmentState.getEqsGradeID() : ''&#xA;&#x9;if (grade != null)&#xA;&#x9;{&#xA;&#x9;&#x9;grade = grade.replace(&quot;EquipGrade Id:&quot;,&quot;&quot;)&#xA;&#x9;}&#xA;&#x9;String physicalOpenAttr = &quot;&lt;physical&quot;;&#xA;    String gradeAttr = &quot; grade=&quot;;&#xA;&#x9;if (grade!= null)&#xA;&#x9;{&#xA;&#x9;&#x9;String physicalString = physicalOpenAttr + gradeAttr+ XML_OVERRIDE+grade+XML_OVERRIDE +XML_END_ELEMENT&#xA;&#x9;&#x9;inElementList.append(physicalString);&#xA;&#x9;}&#xA;    //inElementList.append(&quot;&lt;damages&quot;);&#xA;&#xA;&#x9;String damageOpenAttr = &quot;&lt;damages&quot;;&#xA;&#x9;String damageSevAttr = &quot; severity=&quot;&#xA;&#x9;def eqsDamageSev = inUnit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsDamageSeverity&quot;);&#xA;&#x9;String damageSev = null;&#xA;&#x9;if (eqsDamageSev !=null)&#xA;&#x9;{&#xA;&#x9;&#x9;damageSev = eqsDamageSev.getKey();&#xA;&#x9;}&#xA;&#xA;&#x9;String damageString = null;&#xA;&#x9;if (damageSev != &quot;NONE&quot; &amp;&amp; damageSev!= null)&#xA;&#x9;{&#xA;&#x9;&#x9;damageString = damageOpenAttr+damageSevAttr+XML_OVERRIDE+damageSev+XML_OVERRIDE+XML_END_ELEMENT;&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;damageString = damageOpenAttr+XML_END_ELEMENT;&#xA;&#x9;}&#xA;&#xA;&#x9;//println(&quot;damageString &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+damageString)&#xA;&#x9;inElementList.append(damageString);&#xA;&#xA;&#xA;    inElementList.append(&quot;&lt;/equipment&gt;&quot;);&#xA;&#x9;}&#xA;&#x9;catch (e)&#xA;&#x9;{&#xA;&#x9;&#x9;println(&quot;Exception &quot;+e)&#xA;&#x9;}&#xA;&#xA;    return inElementList;&#xA;  }&#xA;&#xA;  public StringBuffer getPositionDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;    String  positionLocationValue = &quot;&quot;;&#xA;    String positionLocTypeValue = &quot;&quot;;&#xA;    if (inCv != null){&#xA;      positionLocationValue = XML_OVERRIDE + inCv.getCvId()+XML_OVERRIDE;&#xA;      positionLocTypeValue = XML_OVERRIDE+ &quot;VESSEL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    String positionOpenAttr = &quot;&lt;position&quot;&#xA;    String positionSlotAttr = &quot; slot=&quot;;&#xA;    String positionSlotValue = XML_OVERRIDE+inUnit.getUnitArrivePositionSlot()+XML_OVERRIDE;&#xA;    String positionLocationAttr = &quot; location=&quot;;&#xA;    String positionLocTypeAttr = &quot; loc-type=&quot;;&#xA;&#xA;&#xA;    String positionString = positionOpenAttr+positionSlotAttr+positionSlotValue+positionLocationAttr+positionLocationValue+&#xA;                            positionLocTypeAttr+positionLocTypeValue+XML_END_ELEMENT;&#xA;&#x9;positionString = this.stripInvalidXmlCharacters(positionString)&#xA;&#x9;positionString = this.ModifyEscapeChar(positionString);&#xA;&#x9;inElementList.append(positionString);&#xA;&#xA;    return inElementList;&#xA;  }&#xA;&#xA;  public StringBuffer getRoutingDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;String group = null;&#xA;&#x9;&#x9;String disc=&quot;&quot;;&#xA;&#x9;&#x9;String pod2=null;&#xA;&#x9;&#x9;String opl=&quot;&quot;;&#xA;&#x9;&#x9;String pol=&quot;&quot;;&#xA;&#x9;&#x9;String destination=&quot;&quot;;&#xA;&#x9;&#x9;String designatedTrucker=null;&#xA;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;designatedTrucker=inUnit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (te)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Exception in getting trucker details &quot; + te);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//try{&#xA;&#xA;&#x9;&#x9;Routing routing = inUnit.getUnitRouting();&#xA;&#xA;&#x9;&#x9;if (routing != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;String rtgGroup = routing.getRtgGroup();&#xA;&#x9;&#x9;&#x9;&#x9;group = rtgGroup.replace(&quot;Group Id:&quot;,&quot;&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;catch (e)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;RoutingPoint point = inUnit.getUnitRouting().getRtgPOD1();&#xA;&#x9;&#x9;RoutingPoint point2 = inUnit.getUnitRouting().getRtgPOD2();&#xA;&#x9;&#x9;RoutingPoint pointOpl = inUnit.getUnitRouting().getRtgOPL();&#xA;&#x9;&#x9;RoutingPoint pointPol = inUnit.getUnitRouting().getRtgPOL();&#xA;&#x9;&#x9;if (point != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;disc = point.getPointId();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (point2 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;pod2 = point2.getPointId();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (pointOpl != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;opl = pointOpl.getPointId();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (pointPol != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;pol = pointOpl.getPointId();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;destination = inUnit.getUnitGoods().getGdsDestination();&#xA;&#x9;&#x9;//} catch (Exception e){&#xA;&#x9;&#x9;  //LOGGER.warn(&quot;Exception in getting routing details &quot; + e);&#xA;&#x9;&#x9;//}&#xA;&#x9;&#x9;String rtgOpenAttr = &quot;&lt;routing&quot;&#xA;&#x9;&#x9;String groupAttr = &quot; group=&quot;&#xA;&#x9;&#x9;String groupValue = XML_OVERRIDE+group+XML_OVERRIDE;&#xA;&#x9;&#x9;String designatedTruckerAttr = &quot; designated-trucker=&quot;&#xA;&#x9;&#x9;String designatedTruckerValue = XML_OVERRIDE+designatedTrucker+XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgDestAttr = &quot; destination=&quot;;&#xA;&#x9;&#x9;String rtgDestValue = XML_OVERRIDE+destination+XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgOplAttr = &quot; opl=&quot;;&#xA;&#x9;&#x9;String rtgOplValue = XML_OVERRIDE+ opl +XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgPod1Attr = &quot; pod-1=&quot;;&#xA;&#x9;&#x9;String rtgPod2Attr = &quot; pod-2=&quot;;&#xA;&#x9;&#x9;String rtgPod1Value = XML_OVERRIDE+ disc +XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgPod2Value = XML_OVERRIDE+ pod2 +XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgPolAttr = &quot; pol=&quot;;&#xA;&#x9;&#x9;String rtgPolValue = XML_OVERRIDE+ pol +XML_OVERRIDE;&#xA;&#x9;&#x9;String routingString = null;&#xA;&#xA;&#xA;&#x9;&#x9;if (designatedTrucker!= null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;routingString = designatedTruckerAttr+designatedTruckerValue+rtgDestAttr+rtgDestValue+rtgOplAttr+rtgOplValue+rtgPod1Attr+rtgPod1Value+&#xA;&#x9;&#x9;&#x9;&#x9;rtgPolAttr+rtgPolValue;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;routingString = rtgDestAttr+rtgDestValue+rtgOplAttr+rtgOplValue+rtgPod1Attr+rtgPod1Value+&#xA;&#x9;&#x9;&#x9;&#x9;rtgPolAttr+rtgPolValue;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (pod2 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;//println(&quot;pod2&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot;+pod2);&#xA;&#x9;&#x9;routingString = routingString+rtgPod2Attr+rtgPod2Value&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (group != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;routingString = rtgOpenAttr + groupAttr + groupValue + routingString&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;  {&#xA;&#x9;&#x9;&#x9;routingString = rtgOpenAttr + routingString&#xA;&#x9;  }&#xA;&#x9;&#x9;routingString = routingString + &quot;&gt;&quot;&#xA;&#x9;&#x9;routingString = this.stripInvalidXmlCharacters(routingString);&#xA;&#x9;&#x9;routingString = this.ModifyEscapeChar(routingString);&#xA;&#x9;&#x9;inElementList.append(routingString);&#xA;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;  public StringBuffer getCarrierDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;    UnitFacilityVisit ufv = inUnit.getUnitActiveUfvNowActive();&#xA;    CarrierVisit declaredIbCv = inUnit.getUnitDeclaredIbCv();&#xA;    String declaredIbCvMode = this.findCarrierVisitMode(declaredIbCv);&#xA;&#x9;//println(&quot;ufvPrint&quot;+ufv);&#xA;    CarrierVisit actualIbCv = ufv.getInboundCarrierVisit();&#xA;    String actualIbCvMode = this.findCarrierVisitMode(actualIbCv);&#xA;    CarrierVisit declaredObCv = inUnit.getUnitRouting().getRtgDeclaredCv();&#xA;    String declaredObCvMode = this.findCarrierVisitMode(declaredObCv);&#xA;    CarrierVisit actualObCv = ufv.getUfvObCv();&#xA;    String actualObCvMode = this.findCarrierVisitMode(actualObCv);&#xA;&#xA;    String cvOpenAttr = &quot;&quot;;&#xA;    String cvIdAttr = &quot;&quot;;&#xA;    String cvIdValue = &quot;&quot;;&#xA;    String cvFacilityAttr = &quot;&quot;;&#xA;    String cvFacilityValue = &quot;&quot;;&#xA;    String cvModeAttr = &quot;&quot;;&#xA;    String cvModeValue = &quot;&quot;;&#xA;    String cvQualifierAttr = &quot;&quot;;&#xA;    String cvQualiferValue = &quot;&quot;;&#xA;    String cvDirectionAttr = &quot;&quot;;&#xA;    String cvDirectionValue = &quot;&quot;;&#xA;    // Declared IB CV Details Block&#xA;    cvOpenAttr = &quot;&lt;carrier&quot;&#xA;    cvIdAttr = &quot; id=&quot;;&#xA;    cvIdValue = XML_OVERRIDE+declaredIbCv+XML_OVERRIDE;&#xA;    cvFacilityAttr = &quot; facility=&quot;;&#xA;    cvFacilityValue = XML_OVERRIDE+ honFacility +XML_OVERRIDE;&#xA;    cvModeAttr = &quot; mode=&quot;;&#xA;    cvModeValue = XML_OVERRIDE+ declaredIbCvMode +XML_OVERRIDE;&#xA;    cvQualifierAttr = &quot; qualifier=&quot;;&#xA;    cvQualiferValue = XML_OVERRIDE+ &quot;DECLARED&quot; +XML_OVERRIDE;&#xA;    cvDirectionAttr = &quot; direction=&quot;;&#xA;    cvDirectionValue = XML_OVERRIDE+ &quot;IB&quot; +XML_OVERRIDE;&#xA;&#xA;&#x9;&#x9;String cvDeclaredIbString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;            cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;    cvDeclaredIbString = this.stripInvalidXmlCharacters(cvDeclaredIbString)&#xA;&#x9;cvDeclaredIbString = this.ModifyEscapeChar(cvDeclaredIbString);&#xA;&#x9;inElementList.append(cvDeclaredIbString);&#xA;&#xA;    // Actual IB CV Details Block&#xA;    cvOpenAttr = &quot;&lt;carrier&quot;&#xA;    cvIdAttr = &quot; id=&quot;;&#xA;    cvIdValue = XML_OVERRIDE+actualIbCv+XML_OVERRIDE;&#xA;    cvFacilityAttr = &quot; facility=&quot;;&#xA;    cvFacilityValue = XML_OVERRIDE+ honFacility +XML_OVERRIDE;&#xA;    cvModeAttr = &quot; mode=&quot;;&#xA;    cvModeValue = XML_OVERRIDE+ actualIbCvMode +XML_OVERRIDE;&#xA;    cvQualifierAttr = &quot; qualifier=&quot;;&#xA;    cvQualiferValue = XML_OVERRIDE+ &quot;ACTUAL&quot; +XML_OVERRIDE;&#xA;    cvDirectionAttr = &quot; direction=&quot;;&#xA;    cvDirectionValue = XML_OVERRIDE+ &quot;IB&quot; +XML_OVERRIDE;&#xA;&#xA;&#x9;String cvActualIbString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;            cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;    cvActualIbString = this.stripInvalidXmlCharacters(cvActualIbString)&#xA;&#x9;cvActualIbString = this.ModifyEscapeChar(cvActualIbString);&#xA;&#x9;inElementList.append(cvActualIbString);&#xA;&#xA;    // Declared Ob CV Details Block&#xA;    cvOpenAttr = &quot;&lt;carrier&quot;&#xA;    cvIdAttr = &quot; id=&quot;;&#xA;    cvIdValue = XML_OVERRIDE+declaredObCv+XML_OVERRIDE;&#xA;    cvFacilityAttr = &quot; facility=&quot;;&#xA;    cvFacilityValue = XML_OVERRIDE+ honFacility +XML_OVERRIDE;&#xA;    cvModeAttr = &quot; mode=&quot;;&#xA;    cvModeValue = XML_OVERRIDE+ declaredObCvMode +XML_OVERRIDE;&#xA;    cvQualifierAttr = &quot; qualifier=&quot;;&#xA;    cvQualiferValue = XML_OVERRIDE+ &quot;DECLARED&quot; +XML_OVERRIDE;&#xA;    cvDirectionAttr = &quot; direction=&quot;;&#xA;    cvDirectionValue = XML_OVERRIDE+ &quot;OB&quot; +XML_OVERRIDE;&#xA;&#xA;&#x9; String cvDeclaredObString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;            cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;    cvDeclaredObString = this.stripInvalidXmlCharacters(cvDeclaredObString)&#xA;&#x9;cvDeclaredObString = this.ModifyEscapeChar(cvDeclaredObString);&#xA;&#x9;inElementList.append(cvDeclaredObString);&#xA;&#xA;    // Actual Ob CV Details Block&#xA;    cvOpenAttr = &quot;&lt;carrier&quot;&#xA;    cvIdAttr = &quot; id=&quot;;&#xA;    cvIdValue = XML_OVERRIDE+actualObCv+XML_OVERRIDE;&#xA;    cvFacilityAttr = &quot; facility=&quot;;&#xA;    cvFacilityValue = XML_OVERRIDE+ honFacility +XML_OVERRIDE;&#xA;    cvModeAttr = &quot; mode=&quot;;&#xA;    cvModeValue = XML_OVERRIDE+ actualObCvMode +XML_OVERRIDE;&#xA;    cvQualifierAttr = &quot; qualifier=&quot;;&#xA;    cvQualiferValue = XML_OVERRIDE+ &quot;ACTUAL&quot; +XML_OVERRIDE;&#xA;    cvDirectionAttr = &quot; direction=&quot;;&#xA;    cvDirectionValue = XML_OVERRIDE+ &quot;OB&quot; +XML_OVERRIDE;&#xA;&#xA;&#xA;&#x9;&#x9;String cvActualObString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;            cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;cvActualObString = this.stripInvalidXmlCharacters(cvActualObString)&#xA;&#x9;&#x9;cvActualObString = this.ModifyEscapeChar(cvActualObString);&#xA;&#x9;&#x9;inElementList.append(cvActualObString);&#xA;&#xA;    inElementList.append(&quot;&lt;/routing&gt;&quot;);&#xA;    return inElementList;&#xA;&#xA;  }&#xA;&#xA;public StringBuffer getHazard(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;def ufv = inUnit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;if (ufv != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;if (ufv.ufvUnit.getUnitGoods() != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;def haz = ufv.ufvUnit.getUnitGoods().getGdsHazards();&#xA;&#x9;&#x9;//println(&quot;hazard&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+haz)&#xA;&#xA;&#x9;&#x9;if (haz != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;String hazardsAttrOpn = &quot;&lt;hazards&gt;&quot;;&#xA;&#x9;&#x9;&#x9;String addtag = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;def hazardAttrOpn = &quot;&lt;hazard&quot;&#xA;&#x9;&#x9;&#x9;def hazardString = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;Iterator hazardIter = ufv.ufvUnit.getUnitGoods().getGdsHazards().getHazardItemsIterator();&#xA;&#x9;&#x9;&#x9;while(hazardIter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;def hazard = hazardIter.next();&#xA;&#x9;&#x9;&#x9;&#x9;def imdgClass = hazard.getHzrdiImdgCode() != null ? hazard.getHzrdiImdgCode().getKey() : null&#xA;&#x9;&#x9;&#x9;&#x9;def nbrType = hazard.getHzrdiNbrType() != null ? hazard.getHzrdiNbrType().getKey() : null&#xA;&#x9;&#x9;&#x9;&#x9;def qty = hazard.hzrdiQuantity;&#xA;&#x9;&#x9;&#x9;&#x9;def packageType = hazard.hzrdiPackageType;&#xA;&#x9;&#x9;&#x9;&#x9;def weight = hazard.hzrdiWeight;&#xA;&#x9;&#x9;&#x9;&#x9;String properName = hazard.hzrdiProperName;&#xA;&#x9;&#x9;&#x9;&#x9;String techName   = hazard.hzrdiTechName;&#xA;&#x9;&#x9;&#x9;&#x9;String imdgclass  = hazard.hzrdiImdgClass.name;&#xA;&#x9;&#x9;&#x9;&#x9;def im01 = hazard.hzrdiSecondaryIMO1;&#xA;&#x9;&#x9;&#x9;&#x9;def im02 = hazard.hzrdiSecondaryIMO2;&#xA;&#x9;&#x9;&#x9;&#x9;String un  = hazard.hzrdiUNnum;&#xA;&#x9;&#x9;&#x9;&#x9;def pkg = hazard.hzrdiPackingGroup;&#xA;&#x9;&#x9;&#x9;&#x9;if (pkg != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;pkg = pkg.getKey();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;def flashPoint = hazard.hzrdiFlashPoint;&#xA;&#x9;&#x9;&#x9;&#x9;def limited = hazard.hzrdiLtdQty ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;def marine = hazard.hzrdiMarinePollutants ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;def phone = hazard.hzrdiEmergencyTelephone;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiNotes = hazard.hzrdiNotes;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiInhalationZone = hazard.hzrdiInhalationZone;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiPageNumber = hazard.hzrdiPageNumber;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiEMSNumber = hazard.hzrdiEMSNumber;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiMFAG = hazard.hzrdiMFAG;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiHazIdUpper = hazard.hzrdiHazIdUpper;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiSubstanceLower = hazard.hzrdiSubstanceLower;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiPlannerRef = hazard.hzrdiPlannerRef;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiMoveMethod = hazard.hzrdiMoveMethod;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiExplosiveClass = hazard.hzrdiExplosiveClass;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiDcLgRef = hazard.hzrdiDcLgRef;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiDeckRestrictions = hazard.hzrdiDeckRestrictions;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + hazardAttrOpn;&#xA;&#x9;&#x9;&#x9;&#x9;if (nbrType != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; haz-nbr-type=&quot; + XML_OVERRIDE + nbrType + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiNotes != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hzrdiNotes = this.stripInvalidXmlCharacters(hzrdiNotes);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hzrdiNotes = this.removeDoubleQuotes(hzrdiNotes);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; notes=&quot; +XML_OVERRIDE + hzrdiNotes + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (phone != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; emergency-telephone=&quot; +XML_OVERRIDE + phone + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (marine == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; marine-pollutants=&quot; +XML_OVERRIDE + marine + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (im01 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; secondary-imo-1=&quot; +XML_OVERRIDE + im01 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (im02 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; secondary-imo-2=&quot; +XML_OVERRIDE + im02 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (qty != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; quantity=&quot; +XML_OVERRIDE + qty + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (weight != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; weight-kg=&quot; +XML_OVERRIDE + weight + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (pkg != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; packing-group=&quot; +XML_OVERRIDE + pkg + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (properName != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;properName = this.stripInvalidXmlCharacters(properName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;properName = this.removeDoubleQuotes(properName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; proper-name=&quot; +XML_OVERRIDE + properName + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (techName != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;techName = this.stripInvalidXmlCharacters(techName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;techName = this.removeDoubleQuotes(techName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; tech-name=&quot; +XML_OVERRIDE + techName + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (flashPoint != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; flash-point=&quot; +XML_OVERRIDE + flashPoint + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (packageType != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; package-type=&quot; +XML_OVERRIDE + packageType + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (limited == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; ltd-qty-flag=&quot; +XML_OVERRIDE + limited + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (un != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; un=&quot; +XML_OVERRIDE + un + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (imdgClass != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; imdg=&quot; +XML_OVERRIDE + imdgClass + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiInhalationZone != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; inhalation-zone=&quot; +XML_OVERRIDE + hzrdiInhalationZone + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiExplosiveClass != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; explosive-class=&quot; +XML_OVERRIDE + hzrdiExplosiveClass + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiEMSNumber != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; ems-nbr=&quot; +XML_OVERRIDE + hzrdiEMSNumber + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiMFAG != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; mfag=&quot; +XML_OVERRIDE + hzrdiMFAG + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiHazIdUpper != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; haz-id-upper=&quot; +XML_OVERRIDE + hzrdiHazIdUpper + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiSubstanceLower != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; substance-lower=&quot; +XML_OVERRIDE + hzrdiSubstanceLower + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiPlannerRef != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; planner-ref=&quot; +XML_OVERRIDE + hzrdiPlannerRef + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiMoveMethod != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; move-method=&quot; +XML_OVERRIDE + hzrdiMoveMethod + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiDeckRestrictions != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; deck-restrictions=&quot; +XML_OVERRIDE + hzrdiDeckRestrictions + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiDcLgRef != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; dc-lg-ref=&quot; +XML_OVERRIDE + hzrdiDcLgRef + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiPageNumber != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; page-number=&quot; +XML_OVERRIDE + hzrdiPageNumber + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (addtag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (addtag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;hazardsAttrOpn = hazardsAttrOpn + hazardString + &quot;&lt;/hazards&gt;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;hazardsAttrOpn = this.stripInvalidXmlCharacters(hazardsAttrOpn);&#xA;&#x9;&#x9;&#x9;&#x9;hazardsAttrOpn = this.ModifyEscapeChar(hazardsAttrOpn);&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(hazardsAttrOpn);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;}&#xA;&#x9;return inElementList;&#xA;}&#xA;&#xA;&#x9;public StringBuffer getOog(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;{&#xA;&#x9;&#x9;if (inUnit.getFieldValue(&quot;unitIsOog&quot;))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;String backCm = inUnit.getFieldValue(&quot;unitOogBackCm&quot;);&#xA;&#x9;&#x9;&#x9;String frontCm = inUnit.getFieldValue(&quot;unitOogFrontCm&quot;) ;&#xA;&#x9;&#x9;&#x9;String leftCm = inUnit.getFieldValue(&quot;unitOogLeftCm&quot;);&#xA;&#x9;&#x9;&#x9;String rightCm = inUnit.getFieldValue(&quot;unitOogRightCm&quot;);&#xA;&#x9;&#x9;&#x9;String topCm = inUnit.getFieldValue(&quot;unitOogTopCm&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;backCm = backCm !=null ? backCm:0;&#xA;&#x9;&#x9;&#x9;frontCm = frontCm !=null ? frontCm:0;&#xA;&#x9;&#x9;&#x9;leftCm = leftCm !=null ? leftCm:0;&#xA;&#x9;&#x9;&#x9;rightCm = rightCm !=null ? rightCm:0;&#xA;&#x9;&#x9;&#x9;topCm = topCm !=null ? topCm:0;&#xA;&#xA;&#x9;&#x9;&#x9;String oogAttrOpn = &quot;&lt;oog&quot;;&#xA;&#x9;&#x9;&#x9;String oogString = oogAttrOpn&#xA;&#x9;&#x9;&#x9;if (rightCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; right-cm=&quot; + XML_OVERRIDE + rightCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (leftCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; left-cm=&quot; + XML_OVERRIDE + leftCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (backCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; back-cm=&quot; + XML_OVERRIDE + backCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (frontCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; front-cm=&quot; + XML_OVERRIDE + frontCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (topCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; top-cm=&quot; + XML_OVERRIDE + topCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;oogString = oogString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;inElementList.append(oogString);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;&#x9;public StringBuffer getBookingNbr(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;String bookingId = null;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;bookingId = inUnit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (be)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Exception in getting routing details &quot; + be);&#xA;&#x9;&#x9;&#x9;println(&quot;Exception in getting routing details &quot; + be);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;String unitBkngOpenAttr = &quot;&lt;booking &quot;&#xA;&#x9;&#x9;String unitBkngAttr = &quot;id=&quot;;&#xA;&#x9;&#x9;if (bookingId != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;bookingId = XML_OVERRIDE+bookingId+XML_OVERRIDE&#xA;&#x9;&#x9;&#x9;String unitBkngString = unitBkngOpenAttr+unitBkngAttr+bookingId+XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;unitBkngString = this.stripInvalidXmlCharacters(unitBkngString);&#xA;&#x9;&#x9;&#x9;unitBkngString = this.ModifyEscapeChar(unitBkngString);&#xA;&#x9;&#x9;&#x9;inElementList.append(unitBkngString);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;&#x9;  public StringBuffer getReefer(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;&#x9;def tempReq = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempRequiredC&quot;);&#xA;&#x9;&#x9;&#x9;def tempMax = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempLimitMaxC&quot;);&#xA;&#x9;&#x9;&#x9;def tempMin = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempLimitMinC&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM1 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor1&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM2 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor2&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM3 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor3&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM4 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor4&quot;);&#xA;&#x9;&#x9;&#x9;def tempPwrOnTime = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqLatestOnPowerTime&quot;);&#xA;&#x9;&#x9;&#x9;def tempCo2Pct = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqCO2Pct&quot;);&#xA;&#x9;&#x9;&#x9;def tempHmdtyPct = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqHumidityPct&quot;);&#xA;&#x9;&#x9;&#x9;def tempO2Pct = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqO2Pct&quot;);&#xA;&#x9;&#x9;&#x9;def tempVentReq = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqVentRequired&quot;);&#xA;&#x9;&#x9;&#x9;def tempVentUnit = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqVentUnit&quot;);&#xA;&#x9;&#x9;&#x9;def tempShowFahrenhiet = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempShowFahrenheit&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;tempShowFahrenhiet = tempShowFahrenhiet ? &quot;F&quot; : &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;String reeferAttrOpn = &quot;&lt;reefer&quot;;&#xA;&#x9;&#x9;&#x9;String reeferString = reeferAttrOpn;&#xA;&#x9;&#x9;&#x9;String addtag = &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;if (tempShowFahrenhiet == &quot;F&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-display-unit=&quot; + XML_OVERRIDE + tempShowFahrenhiet + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempReq !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-reqd-c=&quot; + XML_OVERRIDE + tempReq + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempO2Pct !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; o2-pct=&quot; + XML_OVERRIDE + tempO2Pct + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempCo2Pct !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; co2-pct=&quot; + XML_OVERRIDE + tempCo2Pct + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempHmdtyPct !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; humidity-pct=&quot; + XML_OVERRIDE + tempHmdtyPct + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempVentReq !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; vent-required-value=&quot; + XML_OVERRIDE + tempVentReq + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempVentUnit !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; vent-required-unit=&quot; + XML_OVERRIDE + tempVentUnit + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempMin !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-min-c=&quot; + XML_OVERRIDE + tempMin + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempMax !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-max-c=&quot; + XML_OVERRIDE + tempMax + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempPwrOnTime !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-latest-on-power=&quot; + XML_OVERRIDE + tempPwrOnTime + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM1 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-1=&quot; + XML_OVERRIDE + tempTM1 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM2 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-2=&quot; + XML_OVERRIDE + tempTM2 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM3 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-3=&quot; + XML_OVERRIDE + tempTM3 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM4 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-4=&quot; + XML_OVERRIDE + tempTM4 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;//println(&quot;reeferString &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot; + addtag +&quot;  :   &quot;+reeferString)&#xA;&#xA;&#x9;&#x9;&#x9;if (addtag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;//println(&quot;Here reeferString &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot; + addtag +&quot;  :   &quot;+reeferString)&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = this.stripInvalidXmlCharacters(reeferString);&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = this.ModifyEscapeChar(reeferString);&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(reeferString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return inElementList;&#xA;&#x9;&#x9;}&#xA;&#xA;  public StringBuffer getHandlingDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;def ufv = inUnit.getUnitActiveUfvNowActive();&#xA;&#xA;&#x9;String lastfreeDay = null;&#xA;    String handlingOpenAttr = &quot;&lt;handling&quot;&#xA;&#x9;String handlingString = handlingOpenAttr;&#xA;&#x9;String lastfreeDayAttr = &quot; last-free-day=&quot;;&#xA;    String handlingRemarkAttr = &quot; remark=&quot;;&#xA;    String handlingRemark = inUnit.getUnitRemark();&#xA;&#x9;if (ufv !=null)&#xA;&#x9;{&#xA;&#x9;&#x9;lastfreeDay = ufv.getFieldValue(&quot;ufvCalculatedLastFreeDay&quot;);&#xA;&#x9;&#x9;if (lastfreeDay != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;lastfreeDay = lastfreeDay.replace(&quot;!&quot;,&quot;&quot;)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;addNode = &quot;N&quot;;&#xA;&#x9;if (lastfreeDay != null)&#xA;&#x9;{&#xA;&#x9;&#x9;addNode = &quot;Y&quot;;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Date date = new SimpleDateFormat(&quot;yyyy-MMM-dd&quot;, Locale.ENGLISH).parse(lastfreeDay);&#xA;&#x9;&#x9;&#x9;DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#x9;&#x9;&#x9;lastfreeDay = df.format(date);&#xA;&#x9;&#x9;}&#xA;&#x9;catch (Exception de){&#xA;      LOGGER.warn (&quot;Exception in while converting date &quot;+ lastfreeDay+&quot;:&quot;+de);&#xA;&#x9;  lastfreeDay = null;&#xA;&#x9;  addNode = &quot;N&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;if (addNode == &quot;Y&quot;)&#xA;&#x9;{&#xA;&#x9;&#x9;lastfreeDay=XML_OVERRIDE+lastfreeDay+XML_OVERRIDE;&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;addNode = &quot;N&quot;;&#xA;&#x9;}&#xA;&#xA;    if (handlingRemark != null)&#xA;&#x9;{&#xA;&#x9;&#x9;handlingRemark = removeDoubleQuotes(handlingRemark);&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;handlingRemark = &quot; &quot;&#xA;&#x9;}&#xA;&#x9;if (addNode == &quot;Y&quot; )&#xA;&#x9;{&#xA;&#x9;&#x9;handlingString = handlingString + lastfreeDayAttr + lastfreeDay;&#xA;&#x9;}&#xA;&#xA;&#x9;String handlingRemarkValue = XML_OVERRIDE+handlingRemark+XML_OVERRIDE;&#xA;    handlingString = handlingString+handlingRemarkAttr+handlingRemarkValue+ XML_END_ELEMENT;&#xA;&#x9;handlingString = this.stripInvalidXmlCharacters(handlingString);&#xA;&#x9;handlingString = this.ModifyEscapeChar(handlingString);&#xA;&#x9;inElementList.append(handlingString);&#xA;&#xA;    return inElementList;&#xA;  }&#xA;&#xA;  public StringBuffer getContentsDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;    GoodsBase goods = inUnit.getUnitGoods();&#xA;    String blNbr =  goods.getGdsBlNbr();&#xA;    ScopedBizUnit shipper = goods.getGdsShipperBzu();&#xA;    String shipperName = &quot;&quot;;&#xA;    String shipperId = &quot;&quot;;&#xA;    String consigneeName = &quot;&quot;;&#xA;    String consigneeId = &quot;&quot; ;&#xA;    String contentsShipperNameAttr = &quot; shipper-name=&quot;;&#xA;    String contentsShipperIdAttr = &quot; shipper-id=&quot;;&#xA;    String contentsConsigneeNameAttr = &quot; consignee-name=&quot;;&#xA;    String contentsConsigneeIdAttr = &quot; consignee-id=&quot;;&#xA;    String contentsConsigneeNameValue = &quot;&quot;;&#xA;    String contentsConsigneeIdValue = &quot;&quot;;&#xA;    String contentsShipperNameValue = &quot;&quot;;&#xA;    String contentsShipperIdValue = &quot;&quot;;&#xA;&#xA;    ScopedBizUnit consignee = goods.getGdsConsigneeBzu();&#xA;    if (consignee != null){&#xA;      try{&#xA;        consigneeName = consignee.getBzuName();&#xA;&#x9;&#x9;consigneeName = removeDoubleQuotes(consigneeName);&#xA;        consigneeId = consignee.getBzuId();&#xA;&#x9;&#x9;consigneeId = removeDoubleQuotes(consigneeId);&#xA;        contentsConsigneeNameValue = XML_OVERRIDE+consigneeName+XML_OVERRIDE;&#xA;        contentsConsigneeIdValue =  XML_OVERRIDE+consigneeId+XML_OVERRIDE;&#xA;      } catch (Exception e){&#xA;        LOGGER.warn (&quot;Exception in getting Consignee info&quot;+ e);&#xA;      }&#xA;    }&#xA;    if (blNbr == null || blNbr.startsWith(&quot;DO NOT EDIT&quot;)){&#xA;      blNbr = &quot;&quot;;&#xA;    }&#xA;&#x9;/*else {&#xA;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;blNbr = blNbr.substring(0,7);&#xA;&#x9;&#x9;}catch (Exception e){&#xA;        LOGGER.warn (&quot;Bl Number is less than 7&quot;+ e);&#xA;      }&#xA;&#x9;}*/&#xA;&#xA;    //String gdsWeight = inUnit.getUnitGoodsAndCtrWtKg().toString();&#xA;    String gdsWeight = new BigDecimal(inUnit.getUnitGoodsAndCtrWtKg()).setScale(2, BigDecimal.ROUND_HALF_UP).toString();&#xA;    String contentsOpenAttr = &quot;&lt;contents&quot;;&#xA;    String contentsCommodityNameAttr = &quot; commodity-name=&quot;;&#xA;    //String contentsCommodityNameValue = XML_OVERRIDE+&quot;CUSTOMS&quot;+XML_OVERRIDE;&#xA;&#x9;String commodity = inUnit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;String commodityName = inUnit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyShortName&quot;)&#xA;&#x9;String contentsCommodityNameValue = XML_OVERRIDE+commodityName+XML_OVERRIDE;&#xA;    String contentsCommodityIdAttr = &quot; commodity-id=&quot;;&#xA;   // String contentsCommodityIdValue = XML_OVERRIDE+&quot;CUS&quot;+XML_OVERRIDE;&#xA;    String contentsCommodityIdValue = XML_OVERRIDE+commodity+XML_OVERRIDE;&#xA;    String contentsBlNbrAttr = &quot; bl-nbr=&quot;;&#xA;    String contentsBlNbrValue = XML_OVERRIDE+blNbr+XML_OVERRIDE;&#xA;    String contentsWeightKgAttr = &quot; weight-kg=&quot;;&#xA;    String contentsWeightKgValue = XML_OVERRIDE+gdsWeight+XML_OVERRIDE;&#xA;&#xA;    if (shipper != null){&#xA;      try{&#xA;        shipperName = shipper.getBzuName();&#xA;        if (shipperName != null){&#xA;        &#x9;shipperName = removeDoubleQuotes(shipperName);&#xA;&#x9;&#x9;&#x9;contentsShipperNameValue = XML_OVERRIDE+shipperName+XML_OVERRIDE;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;shipperId = shipper.getBzuId();&#xA;&#x9;&#x9;if (shipperId != null){&#xA;&#x9;&#x9;&#x9;shipperId = removeDoubleQuotes(shipperId);&#xA;&#x9;&#x9;&#x9;contentsShipperIdValue =  XML_OVERRIDE+shipperId+XML_OVERRIDE;&#xA;&#x9;&#x9; }&#xA;&#xA;      } catch (Exception e){&#xA;        LOGGER.warn (&quot;Exception in getting Shipper Info&quot; + e);&#xA;      }&#xA;    }&#xA;&#x9; String handlingString = contentsOpenAttr;&#xA;&#x9;if (commodity != null)&#xA;&#x9;{&#xA;&#x9;&#x9;handlingString = handlingString + contentsCommodityNameAttr+contentsCommodityNameValue+contentsCommodityIdAttr+contentsCommodityIdValue;&#xA;&#x9;}&#xA;    LOGGER.warn (&quot;Exception in getting Shipper Info&quot; + shipperName + &quot;::&quot;+shipperId);&#xA;    if (shipperName != null &amp;&amp; shipperName.trim().length() &gt; 0){&#xA;      handlingString = handlingString+contentsShipperNameAttr+contentsShipperNameValue;&#xA;&#xA;    }&#xA;    if (shipperId != null &amp;&amp; shipperId.trim().length() &gt; 0){&#xA;      handlingString = handlingString+contentsShipperIdAttr+contentsShipperIdValue;&#xA;&#xA;    }&#xA;    if (consignee != null){&#xA;      handlingString = handlingString+contentsConsigneeNameAttr+contentsConsigneeNameValue+contentsConsigneeIdAttr+contentsConsigneeIdValue;&#xA;    }&#xA;    //if (blNbr !=null){&#xA;      handlingString = handlingString+contentsBlNbrAttr+contentsBlNbrValue;&#xA;    //}&#xA;    if (gdsWeight != null){&#xA;      handlingString = handlingString+contentsWeightKgAttr+contentsWeightKgValue;&#xA;    }&#xA;&#xA;     handlingString = handlingString+XML_END_ELEMENT;&#xA;     handlingString = this.stripInvalidXmlCharacters(handlingString);&#xA;     inElementList.append(handlingString);&#xA;     //Add Seal Element&#xA;    String sealsOpenAttr = &quot;&lt;seals&quot;;&#xA;    String seals1Attr = &quot; seal-1=&quot;;&#xA;    String seals1Value = XML_OVERRIDE+inUnit.getUnitSealNbr1()+XML_OVERRIDE;&#xA;    if (inUnit.getUnitSealNbr1() != null){&#xA;      String sealsString = sealsOpenAttr+seals1Attr+seals1Value+XML_END_ELEMENT;&#xA;      sealsString = this.stripInvalidXmlCharacters(sealsString);&#xA;&#x9;&#x9;sealsString = this.ModifyEscapeChar(sealsString);&#xA;&#x9;  inElementList.append(sealsString);&#xA;    }&#xA;    return inElementList;&#xA;  }&#xA;&#xA;public StringBuffer getUnitEtc(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;def drayStatus = inUnit.getFieldValue(&quot;unitDrayStatus&quot;);&#xA;&#x9;&#x9;if (drayStatus != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;drayStatus = drayStatus.getKey();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;String requiredPower = inUnit.getFieldValue(&quot;unitRequiresPower&quot;) ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;String etcAttrOpn = &quot;&lt;unit-etc&quot;;&#xA;&#x9;&#x9;String etcString = etcAttrOpn;&#xA;&#x9;&#x9;if (requiredPower == &quot;Y&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;etcString = etcString + &quot; requires-power=&quot; + XML_OVERRIDE + requiredPower + XML_OVERRIDE;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (drayStatus !=null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;etcString = etcString + &quot; dray-status=&quot; + XML_OVERRIDE + drayStatus + XML_OVERRIDE;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (drayStatus != null || requiredPower == &quot;Y&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;etcString = etcString + XML_END_ELEMENT;&#xA;&#x9;&#x9;inElementList.append(etcString);&#xA;&#x9;&#x9;}&#xA;&#x9;return inElementList;&#xA;&#x9;}&#xA;&#xA;public getFlagDetails = {Unit inUnit, StringBuffer inElementList, CarrierVisit inCv -&gt;&#xA;&#xA;    String flagOpenCloseAttr = &quot;&lt;flags/&gt;&quot;;&#xA;    String flagOpenAttr = &quot;&lt;flags&gt;&quot;;&#xA;    String flagCloseAttr = &quot;&lt;/flags&gt;&quot;;&#xA;&#x9;String holdIdValue = &quot;&quot;;&#xA;&#x9;String holdString = &quot;&quot;;&#xA;&#x9;addNode = &quot;N&quot;;&#xA;    List unitImpediments = this.getUnitImpediments(inUnit);&#xA;&#xA;    if (unitImpediments.isEmpty()) {&#xA;      return inElementList;&#xA;    }&#xA;    for (ServiceImpediment imp : unitImpediments) {&#xA;      def status = imp.getStatus();&#xA;      if (FlagStatusEnum.ACTIVE.equals(status) || FlagStatusEnum.REQUIRED.equals(status)) {&#xA;        String holdOpenAttr = &quot;&lt;hold&quot;;&#xA;        String holdIdAttr = &quot; id=&quot;;&#xA;        String holdId = imp.getFlagType().getId();&#xA;&#x9;&#x9;String flgtypPurpose = imp.getFlagType().getPurpose().getKey();&#xA;&#x9;&#x9;//println (&quot;holdId &quot;+ holdId +&quot; flgtypPurpose &quot;+flgtypPurpose);&#xA;&#x9;&#x9;if (flgtypPurpose != &quot;PERMISSION&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;addNode = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;holdIdValue = XML_OVERRIDE + holdId + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;holdString = holdString + holdOpenAttr + holdIdAttr + holdIdValue + XML_END_ELEMENT;&#xA;&#x9;&#x9;}&#xA;&#x9;  }&#xA;    }&#xA;&#xA;&#x9;if (addNode == &quot;Y&quot;)&#xA;&#x9;{&#xA;&#x9;&#x9;holdString = this.stripInvalidXmlCharacters(holdString);&#xA;&#x9;&#x9;holdString = this.ModifyEscapeChar(holdString);&#xA;&#x9;&#x9;holdString = flagOpenAttr + holdString + flagCloseAttr&#xA;&#x9;&#x9;inElementList.append(holdString);&#xA;&#x9;}&#xA;&#xA;&#x9;return inElementList;&#xA;  }&#xA;&#xA;  private List getUnitImpediments (Unit inUnit){&#xA;&#xA;    ServicesManager serviceManager = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;    List unitImpediments = serviceManager.getImpedimentsForEntity(inUnit);&#xA;    return unitImpediments;&#xA;  }&#xA;&#xA;/* public getFlagDetails = {Unit inUnit, StringBuffer inElementList, CarrierVisit inCv -&gt;&#xA;&#xA;    String flagOpenCloseAttr = &quot;&lt;flags/&gt;&quot;;&#xA;    String flagOpenAttr = &quot;&lt;flags&gt;&quot;;&#xA;    String flagCloseAttr = &quot;&lt;/flags&gt;&quot;;&#xA;&#xA;    List unitImpediments = this.getUnitImpediments(inUnit);&#xA;&#xA;    if (unitImpediments.isEmpty()) {&#xA;      String flagString = flagOpenCloseAttr;&#xA;      inElementList.append(flagString);&#xA;      return inElementList;&#xA;    }&#xA;    inElementList.append(flagOpenAttr);&#xA;    for (ServiceImpediment imp : unitImpediments) {&#xA;      def status = imp.getStatus();&#xA;      if (FlagStatusEnum.ACTIVE.equals(status) || FlagStatusEnum.REQUIRED.equals(status)) {&#xA;        String holdOpenAttr = &quot;&lt;hold&quot;;&#xA;        String holdIdAttr = &quot; id=&quot;;&#xA;        String holdId = imp.getFlagType().getId();&#xA;        String holdIdValue = XML_OVERRIDE + holdId + XML_OVERRIDE;&#xA;        String holdString = holdOpenAttr + holdIdAttr + holdIdValue + XML_END_ELEMENT;&#xA;        holdString = this.stripInvalidXmlCharacters(holdString);&#xA;&#x9;&#x9;holdString = this.ModifyEscapeChar(holdString);&#xA;&#x9;&#x9;inElementList.append(holdString);&#xA;      }&#xA;    }&#xA;    inElementList.append(flagCloseAttr);&#xA;    return inElementList;&#xA;  }&#xA;&#xA;  private List getUnitImpediments (Unit inUnit){&#xA;&#xA;    ServicesManager serviceManager = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;    List unitImpediments = serviceManager.getImpedimentsForEntity(inUnit);&#xA;    return unitImpediments;&#xA;  }&#xA;*/&#xA;  private String formatDate(Date inDate) {&#xA;    SimpleDateFormat yyyyMMdd = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;    SimpleDateFormat hhmmss = new SimpleDateFormat(&quot;HH:mm:ss.SSS&quot;);&#xA;    String sDate = yyyyMMdd.format(inDate) + &quot;T&quot; + hhmmss.format(inDate);&#xA;    return sDate&#xA;  }&#xA;&#xA;  private String formatRdsDate(Date inDate) {&#xA;    SimpleDateFormat yyyyMMdd = new SimpleDateFormat(&quot;MM/dd/yyyy&quot;);&#xA;    SimpleDateFormat hhmmss = new SimpleDateFormat(&quot;HH:mm:ss&quot;);&#xA;    String rdsDate = yyyyMMdd.format(inDate) + &quot; &quot; + hhmmss.format(inDate);&#xA;    return rdsDate&#xA;  }&#xA;&#xA;  public String findCarrierVisitMode (CarrierVisit inCv){&#xA;&#xA;    final LocTypeEnum carrierMode = inCv.getCvCarrierMode();&#xA;    if (carrierMode.equals(LocTypeEnum.VESSEL)){&#xA;      return &quot;VESSEL&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.TRUCK)){&#xA;      return &quot;TRUCK&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.TRAIN)){&#xA;      return &quot;TRAIN&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.YARD)){&#xA;      return &quot;YARD&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.RAILCAR)){&#xA;      return &quot;TRAIN&quot;;&#xA;    }&#xA;&#x9;else{&#xA;      return &quot;UNKNOWN&quot;;&#xA;    }&#xA;  }&#xA;&#xA;&#xA;  public String findEquipmentMaterial(Equipment inEq){&#xA;&#xA;    String material=&quot;&quot;;&#xA;    if ((EquipMaterialEnum.ALUMINUM.equals(inEq.getEqMaterial()))){&#xA;      material = XML_OVERRIDE+&quot;ALUMINUM&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((EquipMaterialEnum.STEEL.equals(inEq.getEqMaterial()))){&#xA;      material = XML_OVERRIDE+&quot;STEEL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((EquipMaterialEnum.UNKNOWN.equals(inEq.getEqMaterial()))){&#xA;      material = XML_OVERRIDE+&quot;UNKNOWN&quot;+XML_OVERRIDE;&#xA;    }&#xA;    return material;&#xA;  }&#xA;&#xA;  public String findUnitNbr(Unit inUnit){&#xA;&#xA;    Equipment eq = inUnit.getPrimaryEq();&#xA;    String  equipId = eq.getEqIdFull();&#xA;    equipId = XML_OVERRIDE+equipId+XML_OVERRIDE;&#xA;    return equipId;&#xA;   }&#xA;&#xA;  public String findUnitCategory(Unit inUnit){&#xA;&#xA;    String category=&quot;&quot;;&#xA;    if ((UnitCategoryEnum.EXPORT.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;EXPORT&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((UnitCategoryEnum.IMPORT.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;IMPORT&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((UnitCategoryEnum.THROUGH.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;THROUGH&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((UnitCategoryEnum.TRANSSHIP.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;TRANSSHIP&quot;+XML_OVERRIDE;&#xA;    }&#xA;    return category;&#xA;  }&#xA;&#xA;  public String findUnitFreightKind(Unit inUnit){&#xA;&#xA;    String freightKind=&quot;&quot;;&#xA;    if ((FreightKindEnum.MTY.equals(inUnit.getUnitFreightKind()))){&#xA;      freightKind = XML_OVERRIDE+&quot;MTY&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((FreightKindEnum.LCL.equals(inUnit.getUnitFreightKind()))){&#xA;      freightKind = XML_OVERRIDE+&quot;LCL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((FreightKindEnum.FCL.equals(inUnit.getUnitFreightKind()))){&#xA;      freightKind = XML_OVERRIDE+&quot;FCL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    return freightKind;&#xA;  }&#xA;&#xA;&#x9;public String getTimeFormat(String inDate)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;String outDate = null;&#xA;&#x9;&#x9;DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#xA;&#x9;&#x9;if (inDate != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Date date = new SimpleDateFormat(&quot;EEE MMM dd hh:mm:ss zzz yyyy&quot;, Locale.ENGLISH).parse(inDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outDate = df.format(date);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;catch (de)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Date date = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;, Locale.ENGLISH).parse(inDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outDate = df.format(date);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;outDate = outDate + &quot;T00:00:00.000&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;return outDate;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;  public StringBuffer getUfvDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;def ufv = inUnit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#xA;&#x9;&#x9;if (ufv != null){&#xA;&#x9;&#x9;&#x9;String addTag = &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;String ufvflexdate1 = ufv.getFieldValue(&quot;ufvFlexDate01&quot;);&#xA;&#x9;&#x9;&#x9;String ufvflexdate2 = ufv.getFieldValue(&quot;ufvFlexDate02&quot;);&#xA;&#x9;&#x9;&#x9;String ufvflexdate3 = ufv.getFieldValue(&quot;ufvFlexDate03&quot;);&#xA;&#x9;&#x9;&#x9;String ufvflexdate4 = ufv.getFieldValue(&quot;ufvFlexDate04&quot;);&#xA;&#x9;&#x9;&#x9;String ufvflexdate5 = ufv.getFieldValue(&quot;ufvFlexDate05&quot;);&#xA;&#x9;&#x9;&#x9;String ufvflexdate6 = ufv.getFieldValue(&quot;ufvFlexDate06&quot;);&#xA;&#x9;&#x9;&#x9;String ufvflexdate7 = ufv.getFieldValue(&quot;ufvFlexDate07&quot;);&#xA;&#x9;&#x9;&#x9;String ufvflexdate8 = ufv.getFieldValue(&quot;ufvFlexDate08&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;String ufvflexString1 = ufv.getFieldValue(&quot;ufvFlexString1&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString1&quot;)) : null;&#xA;&#x9;&#x9;&#x9;String ufvflexString2 = ufv.getFieldValue(&quot;ufvFlexString2&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString2&quot;)) : null;&#xA;&#x9;&#x9;&#x9;String ufvflexString3 = ufv.getFieldValue(&quot;ufvFlexString3&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString3&quot;)) : null;&#xA;&#x9;&#x9;&#x9;String ufvflexString4 = ufv.getFieldValue(&quot;ufvFlexString4&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString4&quot;)) : null;&#xA;&#xA;&#x9;&#x9;&#x9;String date1Attr = &quot; ufv-flex-date-1=&quot;;&#xA;&#x9;&#x9;&#x9;String date2Attr = &quot; ufv-flex-date-2=&quot;;&#xA;&#x9;&#x9;&#x9;String date3Attr = &quot; ufv-flex-date-3=&quot;;&#xA;&#x9;&#x9;&#x9;String date4Attr = &quot; ufv-flex-date-4=&quot;;&#xA;&#x9;&#x9;&#x9;String date5Attr = &quot; ufv-flex-date-5=&quot;;&#xA;&#x9;&#x9;&#x9;String date6Attr = &quot; ufv-flex-date-6=&quot;;&#xA;&#x9;&#x9;&#x9;String date7Attr = &quot; ufv-flex-date-7=&quot;;&#xA;&#x9;&#x9;&#x9;String date8Attr = &quot; ufv-flex-date-8=&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;String string1Attr = &quot; uvf-flex-1=&quot;;&#xA;&#x9;&#x9;&#x9;String string2Attr = &quot; uvf-flex-2=&quot;;&#xA;&#x9;&#x9;&#x9;String string3Attr = &quot; uvf-flex-3=&quot;;&#xA;&#x9;&#x9;&#x9;String string4Attr = &quot; uvf-flex-4=&quot;;&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;String ufvFlexOpenAttr = &quot;&lt;ufv-flex&quot;&#xA;&#x9;&#x9;&#x9;String ufvFlexString = ufvFlexOpenAttr;&#xA;&#xA;&#x9;&#x9;&#x9;if (ufvflexdate8 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate8 = this.getTimeFormat(ufvflexdate8)&#xA;&#x9;&#x9;&#x9;&#x9;String date8Value = XML_OVERRIDE+ufvflexdate8+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date8Attr+date8Value;&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (ufvflexdate7 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate7 = this.getTimeFormat(ufvflexdate7)&#xA;&#x9;&#x9;&#x9;&#x9;String date7Value = XML_OVERRIDE+ufvflexdate7+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date7Attr+date7Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (ufvflexdate6 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate6 = this.getTimeFormat(ufvflexdate6)&#xA;&#x9;&#x9;&#x9;&#x9;String date6Value = XML_OVERRIDE+ufvflexdate6+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date6Attr+date6Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (ufvflexdate5 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate5 = this.getTimeFormat(ufvflexdate5)&#xA;&#x9;&#x9;&#x9;&#x9;String date5Value = XML_OVERRIDE+ufvflexdate5+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date5Attr+date5Value;&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (ufvflexdate4 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate4 = this.getTimeFormat(ufvflexdate4)&#xA;&#x9;&#x9;&#x9;&#x9;String date4Value = XML_OVERRIDE+ufvflexdate4+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date4Attr+date4Value;&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (ufvflexdate3 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate3 = this.getTimeFormat(ufvflexdate3)&#xA;&#x9;&#x9;&#x9;&#x9;String date3Value = XML_OVERRIDE+ufvflexdate3+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date3Attr+date3Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (ufvflexdate2 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate2 = this.getTimeFormat(ufvflexdate2)&#xA;&#x9;&#x9;&#x9;&#x9;String date2Value = XML_OVERRIDE+ufvflexdate2+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date2Attr+date2Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (ufvflexdate1 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate1 = this.getTimeFormat(ufvflexdate1)&#xA;&#x9;&#x9;&#x9;&#x9;String date1Value = XML_OVERRIDE+ufvflexdate1+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date1Attr+date1Value;&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (ufvflexString1 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string1Attr+string1Value;&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (ufvflexString2 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string2Attr+string2Value;&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (ufvflexString3 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string3Attr+string3Value;&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (ufvflexString4 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string4Attr+string4Value;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = this.stripInvalidXmlCharacters(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (addTag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;//ufvFlexString = this.stripInvalidXmlCharacters(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = this.ModifyEscapeChar(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(ufvFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;&#x9;&#x9;public StringBuffer getUnitFlexDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;String  unitflexString1 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString2 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString3 = &quot;&quot;;&#xA;&#x9;&#x9;String  unitflexString4 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString5 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString6 = &quot;&quot;;&#xA;&#x9;&#x9;String  unitflexString7 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString8 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString9 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString10 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString12 = &quot;&quot;;&#xA;&#xA;&#x9;&#x9;unitflexString1 = inUnit.getFieldValue(&quot;unitFlexString01&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString01&quot;)): null;&#xA;&#x9;&#x9;unitflexString2 = inUnit.getFieldValue(&quot;unitFlexString02&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString02&quot;)): null;&#xA;&#x9;&#x9;unitflexString3 = inUnit.getFieldValue(&quot;unitFlexString03&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString03&quot;)): null;&#xA;&#x9;&#x9;unitflexString4 = inUnit.getFieldValue(&quot;unitFlexString04&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString04&quot;)): null;&#xA;&#x9;&#x9;unitflexString5 = inUnit.getFieldValue(&quot;unitFlexString05&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString05&quot;)): null;&#xA;&#x9;&#x9;unitflexString6 = inUnit.getFieldValue(&quot;unitFlexString06&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString06&quot;)): null;&#xA;&#x9;&#x9;unitflexString7 = inUnit.getFieldValue(&quot;unitFlexString07&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString07&quot;)): null;&#xA;&#x9;&#x9;unitflexString8 = inUnit.getFieldValue(&quot;unitFlexString08&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString08&quot;)): null;&#xA;&#x9;&#x9;unitflexString9 = inUnit.getFieldValue(&quot;unitFlexString09&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString09&quot;)): null;&#xA;&#x9;&#x9;unitflexString10 = inUnit.getFieldValue(&quot;unitFlexString10&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString10&quot;)): null;&#xA;&#x9;&#x9;unitflexString12 = inUnit.getFieldValue(&quot;unitFlexString12&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString12&quot;)): null;&#xA;&#xA;&#xA;&#x9;&#x9;String unitFlexOpenAttr = &quot;&lt;unit-flex&quot;&#xA;&#x9;&#x9;String string1Attr = &quot; unit-flex-1=&quot;;&#xA;&#x9;&#x9;String string2Attr = &quot; unit-flex-2=&quot;;&#xA;&#x9;&#x9;String string3Attr = &quot; unit-flex-3=&quot;;&#xA;&#x9;&#x9;String string4Attr = &quot; unit-flex-4=&quot;;&#xA;&#x9;&#x9;String string5Attr = &quot; unit-flex-5=&quot;;&#xA;&#x9;&#x9;String string6Attr = &quot; unit-flex-6=&quot;;&#xA;&#x9;&#x9;String string7Attr = &quot; unit-flex-7=&quot;;&#xA;&#x9;&#x9;String string8Attr = &quot; unit-flex-8=&quot;;&#xA;&#x9;&#x9;String string9Attr = &quot; unit-flex-9=&quot;;&#xA;&#x9;&#x9;String string10Attr = &quot; unit-flex-10=&quot;;&#xA;&#x9;&#x9;String string12Attr = &quot; unit-flex-12=&quot;;&#xA;&#xA;&#x9;&#x9;String string1Value = XML_OVERRIDE+unitflexString1+XML_OVERRIDE;&#xA;&#x9;&#x9;String string2Value = XML_OVERRIDE+unitflexString2+XML_OVERRIDE;&#xA;&#x9;&#x9;String string3Value = XML_OVERRIDE+unitflexString3+XML_OVERRIDE;&#xA;&#x9;&#x9;String string4Value = XML_OVERRIDE+unitflexString4+XML_OVERRIDE;&#xA;&#x9;&#x9;String string5Value = XML_OVERRIDE+unitflexString5+XML_OVERRIDE;&#xA;&#x9;&#x9;String string6Value = XML_OVERRIDE+unitflexString6+XML_OVERRIDE;&#xA;&#x9;&#x9;String string7Value = XML_OVERRIDE+unitflexString7+XML_OVERRIDE;&#xA;&#x9;&#x9;String string8Value = XML_OVERRIDE+unitflexString8+XML_OVERRIDE;&#xA;&#x9;&#x9;String string9Value = XML_OVERRIDE+unitflexString9+XML_OVERRIDE;&#xA;&#x9;&#x9;String string10Value = XML_OVERRIDE+unitflexString10+XML_OVERRIDE;&#xA;&#x9;&#x9;String string12Value = XML_OVERRIDE+unitflexString12+XML_OVERRIDE;&#xA;&#xA;&#xA;&#x9;&#x9;String unitFlexString = unitFlexOpenAttr;&#xA;&#xA;&#x9;&#x9;if (unitflexString12 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string12Attr+string12Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString10 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string10Attr+string10Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString9 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string9Attr+string9Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (unitflexString8 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string8Attr+string8Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString7 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string7Attr+string7Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString6 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string6Attr+string6Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString5 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string5Attr+string5Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString4 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string4Attr+string4Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString3 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string3Attr+string3Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString2 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string2Attr+string2Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString1 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string1Attr+string1Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (unitflexString1 != null || unitflexString2 != null || unitflexString3 != null || unitflexString4 != null || unitflexString5 != null || unitflexString6 != null&#xA;&#x9;&#x9;&#x9;|| unitflexString7 != null || unitflexString8 != null || unitflexString9 != null || unitflexString10 != null || unitflexString12 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;//unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;unitFlexString = this.ModifyEscapeChar(unitFlexString);&#xA;&#x9;&#x9;&#x9;inElementList.append(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;public StringBuffer geTimeStamp(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;{&#xA;&#xA;&#x9;&#x9;def ufv = inUnit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;if (ufv !=null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;String timeIn = ufv.ufvTimeIn;&#xA;&#x9;&#x9;&#x9;String timeOut = ufv.ufvTimeOut;&#xA;&#x9;&#x9;&#x9;String timeLoad = ufv.ufvTimeOfLoading;&#xA;&#xA;&#x9;&#x9;    String timeStampAttrOpn = &quot;&lt;timestamps&quot;;&#xA;&#x9;&#x9;&#x9;String timeStampString = timeStampAttrOpn;&#xA;&#x9;&#x9;&#x9;if (timeIn !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + &quot; time-in=&quot; + XML_OVERRIDE + timeIn + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (timeOut !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + &quot; time-out=&quot; + XML_OVERRIDE + timeOut + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (timeLoad !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + &quot; time-load=&quot; + XML_OVERRIDE + timeLoad + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (timeIn != null || timeOut != null || timeLoad != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(timeStampString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;  public String stripInvalidXmlCharacters(String input){&#xA;    String specialCharacter = &quot;&amp;&quot;;&#xA;    if (input.contains(specialCharacter)) {&#xA;       input = input.replaceAll(&quot;&amp;&quot;, &quot;&amp;amp;&quot;);&#xA;       //LOGGER.warn(&quot;sb:&quot; + input);&#xA;    }&#xA;    return input;&#xA;  }&#xA;&#xA; public String removeDoubleQuotes(String input){&#xA;    String specialCharacter = &quot;&amp;&quot;;&#xA;    if (input.contains(&quot;\&quot;&quot;)) {&#xA;       input = input.replaceAll(&quot;\&quot;&quot;, &quot;#quot;&quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;&lt;&quot;)) {&#xA;       input = input.replaceAll(&quot;&lt;&quot;, &quot;#lt;&quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;&gt;&quot;)) {&#xA;       input = input.replaceAll(&quot;&gt;&quot;, &quot;#gt;&quot;);&#xA;    }&#xA;    return input;&#xA;  }&#xA;&#xA; public String ModifyEscapeChar(String input){&#xA;    if (input.contains(&quot;#quot&quot;)) {&#xA;       input = input.replaceAll(&quot;#quot;&quot;, &quot;&amp;quot;&quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;#lt&quot;)) {&#xA;       input = input.replaceAll(&quot;#lt;&quot;, &quot;&amp;lt;&quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;#gt&quot;)) {&#xA;       input = input.replaceAll(&quot;#gt;&quot;, &quot;&amp;gt;&quot;);&#xA;    }&#xA;    return input;&#xA;  }&#xA;&#xA;public void createBdaEdtEvent(Object event, Unit tempUnit)&#xA;  {&#xA;&#xA;&#x9;//Thread.sleep(600000);&#xA;&#x9;Thread.sleep(600);&#xA;&#xA;&#x9;LOGGER.warn(&quot;createBdaEdt started&quot; + timeNow);&#xA;    if (tempUnit == null){&#xA;      LOGGER.warn (&quot; Unit is null&quot;);&#xA;      return;&#xA;    }&#xA;    UnitFacilityVisit ufv = tempUnit.getUnitActiveUfvNowActive();&#xA;    if (ufv == null){&#xA;      LOGGER.warn (&quot; Unit facility is null&quot;);&#xA;      return;&#xA;    }&#xA;    CarrierVisit cv = ufv.getInboundCarrierVisit();&#xA;&#xA;&#x9;List unitListForUpdate = this.getUnitListInCvForUpdate(cv);&#xA;&#x9;if (unitListForUpdate.isEmpty()) {&#xA;      LOGGER.warn (&quot;No Units in CV for update&quot;);&#xA;      return;&#xA;    }&#xA;&#xA;&#x9;LOGGER.warn(&quot;unitListForUpdate.size&quot; + unitListForUpdate.size);&#xA;&#x9;LOGGER.warn(&quot;unitListForUpdate Start&quot;);&#xA;&#x9;Iterator iter = unitListForUpdate.iterator();&#xA;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;def units = iter.next();&#xA;&#x9;&#x9;println(&quot;Setting editFlag to empty ni MATProcess... &quot;+units.unitId)&#xA;&#x9;&#x9;units.setUnitFlexString11(&quot;&quot;);&#xA;&#x9;&#x9;this.procNewVes(event,units);&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#x9;LOGGER.warn(&quot;NEWVESSEL CODING COMPLETED-&quot;+cv+&quot;-NewVes &quot;+timeNow);&#xA;&#x9;println(&quot;NEWVESSEL CODING COMPLETED-&quot;+cv+&quot;-NewVes &quot;+timeNow);&#xA;&#x9;try {&#xA;&#x9;this.sendToTdp(&quot;NEWVESSEL CODING COMPLETED-&quot;+cv+&quot;-NewVes &quot;+timeNow);&#xA;&#x9;}&#xA;&#x9;catch (e){&#xA;&#x9;&#x9;println(&quot;ERROR IN NEWVESSEL CODING COMPLETED&quot; + e);&#xA;&#x9;}&#xA;    LOGGER.warn(&quot;createBdaEdt ended&quot; + timeNow);&#xA;  }&#xA;&#xA;public void procNewVes(Object event,Object unit){&#xA;      try{&#xA;&#x9;  def unitDetails = inj.getGroovyClassInstance(&quot;GvyCmisDataProcessor&quot;)&#xA;      def unitDtl = unitDetails.doItNewVess(event,unit)&#xA;      def gvyCmisUtil = inj.getGroovyClassInstance(&quot;GvyCmisUtil&quot;)&#xA;&#xA;      //Post Directly to Gems(N4Topic)Bypass TDP&#xA;      //def jmsTopicSender = api.getGroovyClassInstance(&quot;JMSTopicSender&quot;)&#xA;&#x9;  def jmsQueueSender = inj.getGroovyClassInstance(&quot;JMSQueueSender&quot;) //A5&#xA;      def groupCode = unit.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;)&#xA;&#x9;  //PDU for WO transfer units&#xA;&#x9;  if('XFER-WO'.equals(groupCode)){&#xA;&#x9;   def xmlpdu = gvyCmisUtil.eventSpecificFieldValue(unitDtl,&quot;action=&quot;,&quot;PDU&quot;)&#xA;       xmlpdu = gvyCmisUtil.eventSpecificFieldValue(xmlpdu,&quot;lastAction=&quot;,&quot;PDU&quot;)&#xA;       jmsQueueSender.send(xmlpdu);&#xA;       println(&quot;PDU DIRECT TO GEMS=&quot;+xmlpdu)&#xA;      }&#xA;&#xA;      //BDC&#xA;&#x9;  def xmlBdc = gvyCmisUtil.eventSpecificFieldValue(unitDtl,&quot;action=&quot;,&quot;BDC&quot;)&#xA;      xmlBdc = gvyCmisUtil.eventSpecificFieldValue(xmlBdc,&quot;lastAction=&quot;,&quot;BDC&quot;)&#xA;      jmsQueueSender.send(xmlBdc);&#xA;      println(&quot;BDC DIRECT TO GEMS=&quot;+xmlBdc)&#xA;&#xA;&#x9;  //EDT&#xA;&#x9;  def xmlEdt = gvyCmisUtil.eventSpecificFieldValue(unitDtl,&quot;action=&quot;,&quot;EDT&quot;)&#xA;      xmlEdt = gvyCmisUtil.eventSpecificFieldValue(xmlEdt,&quot;lastAction=&quot;,&quot;EDT&quot;)&#xA;      jmsQueueSender.send(xmlEdt);&#xA;&#x9;  println(&quot;EDT DIRECT TO GEMS=&quot;+xmlEdt)&#xA;&#xA;&#x9;  }catch(Exception e){&#xA;&#x9;&#x9;  e.printStackTrace();&#xA;      }&#xA;   }&#xA;&#xA;public void writeToFile(def fileName, def infoList) {&#xA;  String path = &quot;/var/tmp&quot;;&#xA;&#x9;LOGGER.warn(&quot;Inside writeToFile&quot; + timeNow);&#xA;&#x9;LOGGER.warn(&quot;writeToFile to &quot; + path+&quot;/&quot;+fileName);&#xA;&#x9;File file = new File(&quot;$path/$fileName&quot;)&#xA;&#x9;infoList.each {&#xA;       file &lt;&lt; (&quot;${it}&quot;)&#xA;    }&#xA;}&#xA;&#xA;  private List&lt;Unit&gt; getROROUnitsOnVessel(CarrierVisit inCv){&#xA;&#x9;LOGGER.warn(&quot; getROROUnitsOnVessel begin&quot;);&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;            .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_DECLARED_IB_CV, inCv.getCvGkey()))&#xA;            .addDqPredicate(PredicateFactory.in(UnitField.UNIT_VISIT_STATE, Unit.LIVE_STATES))&#xA;              .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_UFV_FLEX_STRING06,&quot;RO&quot;))&#xA;&#x9;&#x9;&#x9; .addDqOrdering(Ordering.asc(UnitField.UNIT_ID));&#xA;&#x9;// println(&quot;getUnitListInCvForUpdate dq &quot; +dq)&#xA;    HibernateApi hibernate = HibernateApi.getInstance();&#xA;    List unitListRORO  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#x9;LOGGER.warn(&quot;getUnitListInCvForUpdate &quot; + unitListRORO.size());&#xA;&#x9;LOGGER.warn(&quot; getROROUnitsOnVessel end&quot;);&#xA;    return unitListRORO;&#xA;  }&#xA;&#xA;public void sendingROROContainersReport (Unit tempUnit) {&#xA;&#x9;LOGGER.warn(&quot;RO-RO Report in new vesselbegin&quot;);&#xA;&#xA;     def gvyEventUtil = inj.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;&#xA;&#x9; if (tempUnit == null){&#xA;      LOGGER.warn (&quot; Unit is null&quot;);&#xA;      return;&#xA;    }&#xA;    UnitFacilityVisit ufv = tempUnit.getUnitActiveUfvNowActive();&#xA;    if (ufv == null){&#xA;      LOGGER.warn (&quot; Unit facility is null&quot;);&#xA;      return;&#xA;    }&#xA;    CarrierVisit cv = ufv.getInboundCarrierVisit();&#xA;&#xA;&#x9;List ROROResultList = null;&#xA;&#x9;List listOfROROUnitsForVessel = this.getROROUnitsOnVessel(cv);&#xA;&#x9;def reportDesignName = null;&#xA;&#x9;String inboundCarrierId = null;&#x9;&#xA;&#x9;def cmcEmail = inj.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;).getTOSAppParameters(&quot;MAIL_RORO_REPORT&quot;); &#xA;&#x9;if (listOfROROUnitsForVessel.isEmpty()) {&#xA;     LOGGER.warn(&quot;No ROR Units in CV to report&quot;);&#xA;      return;&#xA;    }&#xA;&#x9;ROROResultList = new ArrayList();&#xA;&#xA;&#x9;LOGGER.warn(&quot;listOfROROUnitsForVessel.size&quot; + listOfROROUnitsForVessel.size);&#xA;&#x9;LOGGER.warn(&quot;listOfROROUnitsForVessel Start&quot;);&#xA;&#x9;Iterator iterRORO = listOfROROUnitsForVessel.iterator();&#xA;&#x9;while(iterRORO.hasNext()) {&#xA;&#x9;&#x9;HashMap roUnitMap = new HashMap();&#xA;&#x9;&#x9;def units = iterRORO.next();&#xA;&#xA;&#x9;&#x9;inboundCarrierId = units.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;);&#xA;&#x9;//&#x9;LOGGER.warn (&quot;RORUnit &quot; + units.unitId +&quot; --- &quot;+ units.getFieldValue(&quot;unitActiveUfv.ufvFlexString06&quot;)&#xA;&#x9;//&#x9;&#x9;+&quot;  ---- &quot;+units.getUnitGoodsAndCtrWtKg()*2.20462262185+&quot; ---- &quot;+units.getUnitArrivePositionSlot()+&quot; ----&quot;&#xA;&#x9;//&#x9;+units.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;)+&quot;----&quot;+units.getFieldValue(&quot;unitGoods.gdsDestination&quot;)+&quot;----&quot;+&quot;----&quot;&#xA;&#x9;//&#x9;+units.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;)+&quot;----&quot;+units.getFieldValue(&quot;unitAppliedHoldOrPermName&quot;));&#xA;&#xA;&#x9;&#x9;roUnitMap.put(&quot;ContainerNumber&quot;,units.unitId);&#xA;&#x9;&#x9;roUnitMap.put(&quot;TypeISO&quot;,units.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;));&#xA;&#x9;&#x9;roUnitMap.put(&quot;Weight&quot;,units.getUnitGoodsAndCtrWtKg()*2.20462262185);&#xA;&#x9;&#x9;roUnitMap.put(&quot;Cell&quot;,units.getUnitArrivePositionSlot());&#xA;&#x9;&#x9;roUnitMap.put(&quot;Destination&quot;,units.getFieldValue(&quot;unitGoods.gdsDestination&quot;));&#xA;&#x9;&#x9;roUnitMap.put(&quot;Consignee&quot;,units.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;));&#xA;&#x9;&#x9;roUnitMap.put(&quot;Holds&quot;,units.getFieldValue(&quot;unitAppliedHoldOrPermName&quot;));&#xA;&#x9;&#x9;LOGGER.warn(&quot;roUnitMap  is &quot;+roUnitMap.toString());&#xA;&#x9;&#x9;ROROResultList.add(roUnitMap);&#xA;&#xA;&#x9;}&#xA;&#x9;LOGGER.warn(&quot;ROROResultList----&quot;+ROROResultList);&#xA;&#x9;if (ROROResultList!=null &amp;&amp; ROROResultList.size() &gt; 0)&#xA;    {&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Inside printing report&quot;);&#xA;                JRDataSource ds = new JRMapCollectionDataSource(ROROResultList);&#xA;                // get report runner handle&#xA;                def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#xA;                //Set report parameters&#xA;                HashMap parameters = new HashMap();&#xA;                parameters.put(&quot;Vesvoy&quot;,inboundCarrierId);&#xA;                def formdate = gvyEventUtil.formatDate(new Date(),ContextHelper.getThreadUserTimezone());&#xA;                def formtime = gvyEventUtil.formatTime(new Date(),ContextHelper.getThreadUserTimezone());&#xA;                 parameters.put(&quot;FormattedDate&quot;,formdate);&#xA;                 parameters.put(&quot;FormattedTime&quot;,formtime);&#xA;                // call report design of rehandle containers not loaded back to vessel report.&#xA;                reportDesignName = &quot;RO RO CONTAINERS ON VESSEL&quot;;&#xA;&#xA;                // Emailing report&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;ROR REPORT BEGIN&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReport(ds, parameters, reportDesignName,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cmcEmail, &quot;Containers stowed to RORO on &quot; +cv, &quot;Attached is the containers stowed to ROROR on &quot;+cv+&quot; report&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;ROR REPORT END&quot;);&#xA;            }&#xA;&#x9;}&#xA;&#xA;    private static final Logger LOGGER = Logger.getLogger(MATProcessMatsonVess.class);&#xA;}&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;" />
<digital-asset id="GvySIGateHourly" short-description="GvySIGateHourly" is-pre-deployed="N" groovy-code="/*&#xA;*  A1   GR &amp; Raghu Iyer  04/13/2012     Created Initial version for MTY gate consist reports  &#xA;*                                       This report will fetch the data for all MAT container&#xA;*                                       which are created in past 6 weeks and group the data&#xA;*                                       based on equipment type for each day(Mon to Sun)&#xA;*/&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.road.business.model.*;&#xA;import com.navis.road.RoadField;&#xA;import java.util.Calendar;&#xA;&#xA;import org.springframework.core.io.ByteArrayResource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import java.util.HashMap;&#xA;import java.util.Date;&#xA;&#xA;&#xA;&#xA;public class GvySIGateHourly extends GroovyInjectionBase&#xA;{&#xA;    //private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;   &#xA;private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;    private String outBoundCarrierId = null&#xA;    def inj = null;&#xA;&#x9;String creater = null;&#xA;&#x9;HashMap classMap = new HashMap();&#xA;&#xA;&#x9;String startTime = null;&#xA;&#x9;String startDateHST = null;&#xA;&#x9;String endDateHST = null;&#xA;&#x9;String formattedDate = null;&#xA;&#x9;Date date = new Date();&#xA;&#xA;&#x9;String tranType = null;&#xA;&#x9;String printSIRpt = &quot;N&quot;;&#xA;&#x9;String subject = &quot;Attached report for SI Gate hourly transactions&quot;;&#xA;&#x9;String SIGateSubject = &quot;&quot;;&#xA;&#xA;&#x9;   &#xA;    public boolean execute(Map params)&#xA;    {&#xA;        try&#xA;        {&#xA;            println (&quot;Here : execute&quot;)&#xA;&#x9;&#x9;&#x9;//readGateHourSpreadsheet()&#xA;&#x9;&#x9;&#x9;println (&quot;Here : After excel read&quot;)&#xA;&#x9;&#x9;&#x9;inj = new GroovyInjectionBase();&#xA;&#xA;&#x9;&#x9;&#x9;println (&quot;Print Report&quot;)&#xA;&#x9;&#x9;    ArrayList SIGateList = new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;HashMap reportDesignsmap = new HashMap();&#xA;&#xA;            List trkTrans = getGateTrans()&#xA;            if(trkTrans == null){&#xA;                println(&quot;------------- NO REC ------------------&quot;)&#xA;                return;&#xA;&#x9;&#x9;&#x9;&#x9;}    &#xA;&#xA;            Iterator iter = trkTrans.iterator();&#xA;            while(iter.hasNext()) {&#xA;                def aTrans = iter.next();&#xA;                HashMap SIGateDataMap = populateSIgateData(aTrans)&#xA;&#x9;&#x9;&#x9;&#x9;//HashMap Pier2GateDataMap = populatePier2gateData(aTrans)&#xA;                if(SIGateDataMap != null) {&#xA;                    SIGateList.add(SIGateDataMap);&#xA;&#x9;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;            println(&quot;SIGateList -------------------- :&quot;+ (SIGateList != null ? SIGateList.size() : &quot;EMPTY&quot;))  &#xA;&#xA;            //Set Report Parameter&#xA;            HashMap parameters = new HashMap();&#xA;&#x9;&#x9;&#x9;println (&quot;printSIRpt &quot; + printSIRpt);&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if (printSIRpt == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;            //Create and Mail Report &#xA;            JRDataSource ds = new JRMapCollectionDataSource(SIGateList);&#xA;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;SI GATE HOURLY&quot;,ds);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;SIGateSubject  = &quot;Note : No SI Gate transaction found for this hour&quot;&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;SI Report Status ------- Nothing to report for this Hour&quot;)&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if (printSIRpt == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;subject = subject + &quot;\n \n&quot; + SIGateSubject;&#xA;&#x9;&#x9;&#x9;println (&quot;subject&quot; + subject)&#xA;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;            reportRunner.emailReports(reportDesignsmap, parameters,emailTo, &quot;SI Gate Hourly Activity Report&quot; ,subject);&#xA;&#x9;&#x9;&#x9;println(&quot;Report Status ------- Success&quot;) &#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Report Status ------- Nothing to report for this Hour&quot;) &#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;            e.printStackTrace()&#xA;            }&#xA;    }&#xA;&#xA;//Maps the SI gate data for the report&#xA;public HashMap populateSIgateData(Object truckTrans)&#xA;    {&#xA;        HashMap map = null;&#xA;        try&#xA;        {&#xA;&#xA;creater = truckTrans.tranCreator.toUpperCase();&#xA;&#xA;if ((creater=='GATE1' || creater=='GATE2' || creater=='GATE3' || creater=='GATE4' || creater=='GATE5' || creater=='GATE6') &amp;&amp;&#xA;&#x9;(truckTrans.tranCtrTypeId != null))&#xA;&#x9;{&#xA;&#x9;if (truckTrans.tranCtrTypeId.substring(0,1) != &quot;C&quot;) &#xA;&#x9;&#x9;{&#xA;&#xA;Date tranDate = truckTrans.tranCreated;  &#xA;&#xA;DateFormat formatter = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);  &#xA;formatter.setTimeZone(TimeZone.getTimeZone(&quot;HST&quot;)); &#xA;&#xA;String Hour =formatter.format(tranDate).substring(11,13);&#xA;String currHour = formatter.format(date).substring(11,13);&#xA;String currMin = formatter.format(date).substring(14,16);&#xA;String reportHour = &quot;00:00 to &quot;+currHour+&quot;:&quot;+currMin&#xA;String currHourDisplay = currHour+&quot;:00 to &quot;+currHour+&quot;:59&quot;&#xA;String FreightKind = null;&#xA;&#xA;if (Hour == currHour )&#xA;{&#xA;&#x9;printSIRpt = &quot;Y&quot;;&#xA;}&#xA;&#xA;tranType = truckTrans.getTranSubType().getKey();&#xA;&#xA;if (tranType==&quot;DE&quot; || tranType==&quot;DI&quot;) {&#xA;&#x9;tranType = &quot;OUTGATE LOAD&quot;;&#xA;}&#xA;else if (tranType==&quot;RE&quot; || tranType==&quot;RI&quot;) {&#xA;&#x9;tranType = &quot;INGATE LOAD&quot;;&#xA;}&#xA;else if (tranType==&quot;DM&quot;) {&#xA;&#x9;tranType = &quot;OUTGATE EMPTY&quot;;&#xA;}&#xA;else if (tranType==&quot;RM&quot; || tranType==&quot;DC&quot;) {&#xA;&#x9;tranType = &quot;INGATE EMPTY&quot;;&#xA;}&#xA;&#x9;Hour = Hour+&quot;:00 to &quot;+Hour+&quot;59&quot;;&#xA;&#x9;&#xA;&#x9;map = new HashMap();&#xA;&#xA;            map.put(&quot;TranUnitId&quot;, truckTrans.tranCtrNbr); &#xA;            map.put(&quot;TranCreated&quot;, truckTrans.tranCreated); &#xA;            map.put(&quot;TranCtrFreightKind&quot;,FreightKind); &#xA;            map.put(&quot;StageId&quot;, truckTrans.tranStageId); &#xA;            map.put(&quot;TranCtrTypeId&quot;, truckTrans.tranCtrTypeId); &#xA;            map.put(&quot;TranUnitFlexString01&quot;, Hour); &#xA;            map.put(&quot;TranUnitFlexString02&quot;, formatter.format(tranDate).substring(11,13)); &#xA;            map.put(&quot;TranUnitFlexString03&quot;,currHourDisplay); &#xA;            map.put(&quot;TranUnitFlexString04&quot;,currHour); &#xA;            map.put(&quot;TranUnitFlexString05&quot;,reportHour); &#xA;            map.put(&quot;TranUnitFlexString06&quot;,tranType); &#xA;            map.put(&quot;TranUnitFlexString07&quot;,currHour+&quot;:&quot;+currMin); &#xA;            map.put(&quot;TranUnitFlexString08&quot;,creater);&#xA;            map.put(&quot;TranUnitFlexString09&quot;,truckTrans.tranLineId); &#xA;            map.put(&quot;TranUnitFlexString10&quot;,truckTrans.getTranStatus().getKey()); &#xA;&#xA;&#x9;}&#xA;}&#xA;&#xA;        }catch(Exception e){&#xA;&#x9;&#x9;println(&quot;Error in the report&quot;)&#xA;          e.printStackTrace();&#xA;            }&#xA;        return map;&#xA;}&#xA;&#xA;public List getGateTrans()&#xA;{&#xA;&#xA;println(&quot; Inside DB Query &quot; + date)&#xA;&#xA;formattedDate = date.format('MM/dd/yyyy');&#xA;&#xA;startDateHST = formattedDate +&quot; &quot;+&quot;00:00:00 HST&quot;;//2012-07-19 00:00:00 HST&quot;;&#xA;endDateHST = formattedDate +&quot; &quot;+&quot;23:59:59 HST&quot;;//&quot;2012-07-19 23:59:59 HST&quot;;&#xA;&#xA;Date startDate = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss z&quot;, Locale.ENGLISH).parse(startDateHST);&#xA;println (&quot;PDT Start date time &quot; + startDate);&#xA;Date endDate = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss z&quot;, Locale.ENGLISH).parse(endDateHST);&#xA;println (&quot;PDT End date time &quot; + endDate);&#xA;&#xA;&#x9;&#x9;List ufvYbUnits = null; &#xA;        try&#xA;        {&#xA;            Long facilityGkey = ContextHelper.getThreadFacility().getFcyGkey();&#xA;            println(&quot;ContextHelper.getThreadFacility().getFcyGkey() : &quot;+ContextHelper.getThreadFacility().getFcyGkey())&#xA;&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;TruckTransaction&quot;).addDqPredicate(PredicateFactory.ge(RoadField.TRAN_CREATED, startDate)).addDqPredicate(PredicateFactory.le(RoadField.TRAN_CREATED, endDate)).addDqPredicate(PredicateFactory.eq(RoadField.TRAN_FACILITY, facilityGkey));&#xA;            println(&quot;dq---------------&quot;+dq);&#xA;            ufvYbUnits  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            println(&quot;Query executed&quot;);&#xA;            println(&quot;unitUfvYB ::&quot;+ufvYbUnits != null ? ufvYbUnits.size() : 0) &#xA;        }catch(Exception e){&#xA;          e.printStackTrace()&#xA;            }&#xA;        return ufvYbUnits;&#xA;    }&#xA;&#xA;    }&#xA;" />
<digital-asset id="GvyPier2GateHourly" short-description="GvyPier2GateHourly" is-pre-deployed="N" groovy-code="/*&#xA;*  A1   GR &amp; Raghu Iyer  04/13/2012     Created Initial version for MTY gate consist reports  &#xA;*                                       This report will fetch the data for all MAT container&#xA;*                                       which are created in past 6 weeks and group the data&#xA;*                                       based on equipment type for each day(Mon to Sun)&#xA;*/&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.road.business.model.*;&#xA;import com.navis.road.RoadField;&#xA;import java.util.Calendar;&#xA;&#xA;import org.springframework.core.io.ByteArrayResource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import java.util.HashMap;&#xA;import java.util.Date;&#xA;&#xA;&#xA;&#xA;public class GvyPier2GateHourly extends GroovyInjectionBase&#xA;{&#xA;    //private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;   &#xA;private final String emailTo = &quot;1aktosdevteam@matson.com&quot;; &#xA;    private String outBoundCarrierId = null&#xA;    def inj = null;&#xA;&#x9;String creater = null;&#xA;&#x9;HashMap classMap = new HashMap();&#xA;&#xA;&#x9;String startTime = null;&#xA;&#x9;String startDateHST = null;&#xA;&#x9;String endDateHST = null;&#xA;&#x9;String formattedDate = null;&#xA;&#x9;Date date = new Date();&#xA;&#xA;&#x9;String tranType = null;&#xA;&#x9;String printPier2Rpt = &quot;N&quot;;&#xA;&#x9;String subject = &quot;Attached report for Pier2 Gate hourly transactions&quot;;&#xA;&#x9;String Pier2GateSubject = null;&#xA;&#xA;&#x9;   &#xA;    public boolean execute(Map params)&#xA;    {&#xA;        try&#xA;        {&#xA;            println (&quot;Here : execute&quot;)&#xA;&#x9;&#x9;&#x9;//readGateHourSpreadsheet()&#xA;&#x9;&#x9;&#x9;println (&quot;Here : After excel read&quot;)&#xA;&#x9;&#x9;&#x9;inj = new GroovyInjectionBase();&#xA;&#xA;&#x9;&#x9;&#x9;println (&quot;Print Report&quot;)&#xA;&#x9;&#x9;    ArrayList Pier2GateList = new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;HashMap reportDesignsmap = new HashMap();&#xA;&#xA;            List trkTrans = getGateTrans()&#xA;            if(trkTrans == null){&#xA;                println(&quot;------------- NO REC ------------------&quot;)&#xA;                return;&#xA;&#x9;&#x9;&#x9;&#x9;}    &#xA;&#xA;            Iterator iter = trkTrans.iterator();&#xA;            while(iter.hasNext()) {&#xA;                def aTrans = iter.next();&#xA;                HashMap Pier2GateDataMap = populatePier2gateData(aTrans)&#xA;                if(Pier2GateDataMap != null) {&#xA;                    Pier2GateList.add(Pier2GateDataMap);&#xA;&#x9;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;            println(&quot;Pier2GateList -------------------- :&quot;+ (Pier2GateList != null ? Pier2GateList.size() : &quot;EMPTY&quot;))  &#xA;&#xA;            //Set Report Parameter&#xA;            HashMap parameters = new HashMap();&#xA;&#x9;&#x9;&#x9;println (&quot;printPier2Rpt &quot; + printPier2Rpt);&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if (printPier2Rpt == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;            //Create and Mail Report &#xA;            JRDataSource ds = new JRMapCollectionDataSource(SIGateList);&#xA;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;PIER2 GATE HOURLY&quot;,ds);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Pier2GateSubject  = &quot;Note : No Pier2 Gate transaction found for this hour&quot;&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Pier2 Report Status ------- Nothing to report for this Hour&quot;)&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if (printPier2Rpt == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;subject = subject + &quot;\n \n&quot; + Pier2GateSubject;&#xA;&#x9;&#x9;&#x9;println (&quot;subject&quot; + subject)&#xA;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;            reportRunner.emailReports(reportDesignsmap, parameters,emailTo, &quot;Pier2 Gate Hourly Activity Report&quot; ,subject);&#xA;&#x9;&#x9;&#x9;println(&quot;Report Status ------- Success&quot;) &#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Report Status ------- Nothing to report for this Hour&quot;) &#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;            e.printStackTrace()&#xA;            }&#xA;    }&#xA;&#xA;//Maps the Pier2 gate data for the report&#xA;public HashMap populatePier2gateData(Object truckTrans)&#xA;    {&#xA;        HashMap map = null;&#xA;        try&#xA;        {&#xA;&#xA;creater = truckTrans.tranCreator.toUpperCase();&#xA;&#xA;if ((creater=='PIER2') &amp;&amp; &#x9;(truckTrans.tranCtrTypeId != null))&#xA;&#x9;{&#xA;&#x9;if (truckTrans.tranCtrTypeId.substring(0,1) != &quot;C&quot;) &#xA;&#x9;&#x9;{&#xA;&#xA;Date tranDate = truckTrans.tranCreated;  &#xA;&#xA;DateFormat formatter = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);  &#xA;formatter.setTimeZone(TimeZone.getTimeZone(&quot;HST&quot;)); &#xA;&#xA;String Hour =formatter.format(tranDate).substring(11,13);&#xA;String currHour = formatter.format(date).substring(11,13);&#xA;String currMin = formatter.format(date).substring(14,16);&#xA;String reportHour = &quot;00:00 to &quot;+currHour+&quot;:&quot;+currMin&#xA;String currHourDisplay = currHour+&quot;:00 to &quot;+currHour+&quot;:59&quot;&#xA;String FreightKind = null;&#xA;&#xA;if (Hour == currHour )&#xA;{&#xA;&#x9;printPier2Rpt = &quot;Y&quot;;&#xA;}&#xA;&#xA;tranType = truckTrans.getTranSubType().getKey();&#xA;&#xA;if (tranType==&quot;DE&quot; || tranType==&quot;DI&quot;) {&#xA;&#x9;tranType = &quot;OUTGATE LOAD&quot;;&#xA;}&#xA;else if (tranType==&quot;RE&quot; || tranType==&quot;RI&quot;) {&#xA;&#x9;tranType = &quot;INGATE LOAD&quot;;&#xA;}&#xA;else if (tranType==&quot;DM&quot;) {&#xA;&#x9;tranType = &quot;OUTGATE EMPTY&quot;;&#xA;}&#xA;else if (tranType==&quot;RM&quot; || tranType==&quot;DC&quot;) {&#xA;&#x9;tranType = &quot;INGATE EMPTY&quot;;&#xA;}&#xA;&#x9;Hour = Hour+&quot;:00 to &quot;+Hour+&quot;59&quot;;&#xA;&#x9;&#xA;&#x9;map = new HashMap();&#xA;&#xA;            map.put(&quot;TranUnitId&quot;, truckTrans.tranCtrNbr); &#xA;            map.put(&quot;TranCreated&quot;, truckTrans.tranCreated); &#xA;            map.put(&quot;TranCtrFreightKind&quot;,FreightKind); &#xA;            map.put(&quot;StageId&quot;, truckTrans.tranStageId); &#xA;            map.put(&quot;TranCtrTypeId&quot;, truckTrans.tranCtrTypeId); &#xA;            map.put(&quot;TranUnitFlexString01&quot;, Hour); &#xA;            map.put(&quot;TranUnitFlexString02&quot;, formatter.format(tranDate).substring(11,13)); &#xA;            map.put(&quot;TranUnitFlexString03&quot;,currHourDisplay); &#xA;            map.put(&quot;TranUnitFlexString04&quot;,currHour); &#xA;            map.put(&quot;TranUnitFlexString05&quot;,reportHour); &#xA;            map.put(&quot;TranUnitFlexString06&quot;,tranType); &#xA;            map.put(&quot;TranUnitFlexString07&quot;,currHour+&quot;:&quot;+currMin); &#xA;            map.put(&quot;TranUnitFlexString08&quot;,creater);&#xA;            map.put(&quot;TranUnitFlexString09&quot;,truckTrans.tranLineId); &#xA;            map.put(&quot;TranUnitFlexString10&quot;,truckTrans.getTranStatus().getKey()); &#xA;&#xA;&#x9;}&#xA;}&#xA;&#xA;        }catch(Exception e){&#xA;&#x9;&#x9;println(&quot;Error in the report&quot;)&#xA;          e.printStackTrace();&#xA;            }&#xA;        return map;&#xA;}&#xA;&#xA;public List getGateTrans()&#xA;{&#xA;&#xA;println(&quot; Inside DB Query &quot; + date)&#xA;&#xA;formattedDate = date.format('MM/dd/yyyy');&#xA;&#xA;startDateHST = formattedDate +&quot; &quot;+&quot;00:00:00 HST&quot;;//2012-07-19 00:00:00 HST&quot;;&#xA;endDateHST = formattedDate +&quot; &quot;+&quot;23:59:59 HST&quot;;//&quot;2012-07-19 23:59:59 HST&quot;;&#xA;&#xA;Date startDate = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss z&quot;, Locale.ENGLISH).parse(startDateHST);&#xA;println (&quot;PDT Start date time &quot; + startDate);&#xA;Date endDate = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss z&quot;, Locale.ENGLISH).parse(endDateHST);&#xA;println (&quot;PDT End date time &quot; + endDate);&#xA;&#xA;&#x9;&#x9;List ufvYbUnits = null; &#xA;        try&#xA;        {&#xA;            Long facilityGkey = ContextHelper.getThreadFacility().getFcyGkey();&#xA;            println(&quot;ContextHelper.getThreadFacility().getFcyGkey() : &quot;+ContextHelper.getThreadFacility().getFcyGkey())&#xA;&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;TruckTransaction&quot;).addDqPredicate(PredicateFactory.ge(RoadField.TRAN_CREATED, startDate)).addDqPredicate(PredicateFactory.le(RoadField.TRAN_CREATED, endDate)).addDqPredicate(PredicateFactory.eq(RoadField.TRAN_FACILITY, facilityGkey));&#xA;            println(&quot;dq---------------&quot;+dq);&#xA;            ufvYbUnits  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            println(&quot;Query executed&quot;);&#xA;            println(&quot;unitUfvYB ::&quot;+ufvYbUnits != null ? ufvYbUnits.size() : 0) &#xA;        }catch(Exception e){&#xA;          e.printStackTrace()&#xA;            }&#xA;        return ufvYbUnits;&#xA;    }&#xA;&#xA;    }&#xA;" />
<digital-asset id="GvyCmisEventFructoseMty" short-description="GvyCmisEventFructoseMty" is-pre-deployed="N" groovy-code="/*&#xA;* Sr  Doer  Date        Chagne&#xA;* A1  GR    08/18/2010  Added LocationStatus=1&#xA;* A2  GR    11/03/2010  Adding Actual Vessel,Voyage and leg&#xA;* A3  GR    07/11/2011  Adding Set vesvoy method Change&#xA;* A4  RI    01/06/2014  Added logic to substract 2 min from OGT message&#xA;*/&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import java.text.SimpleDateFormat;&#xA;import java.text.DateFormat;&#xA;import java.util.Calendar;&#xA;import org.apache.log4j.Logger&#xA;&#xA;&#xA;public class GvyCmisEventFructoseMty extends GroovyInjectionBase {&#xA;&#xA;  def ACTION = &quot;action='null'&quot;&#xA;  def LAST_ACTION = &quot;lastAction='null'&quot;&#xA;&#xA;  public String getOGT(String xmlGvyData)&#xA;  {&#xA;    def  xmlGvyString = xmlGvyData&#xA;    try{&#xA;&#xA;&#x9;&#x9;def aDate = getFieldValues(xmlGvyString, &quot;aDate=&quot;);&#xA;&#x9;&#x9;def aTime = getFieldValues(xmlGvyString, &quot;aTime=&quot;);&#xA;&#x9;&#x9;def lastADate = getFieldValues(xmlGvyString, &quot;lastADate=&quot;);&#xA;        def lastATime = getFieldValues(xmlGvyString, &quot;lastATime=&quot;);&#xA;&#xA;&#x9;&#x9;LOGGER.warn(&quot;Time for OGT Details  &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;:&quot;+aDate+&quot;::&quot;+aTime+&quot;::&quot;+lastADate+&quot;::&quot;+lastATime);&#xA;&#xA;&#x9;&#x9;def oldATime = &quot;aTime='&quot;+aTime+&quot;'&quot;;&#xA;&#x9;&#x9;def oldLastATime = &quot;lastATime='&quot;+lastATime+&quot;'&quot;;&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;aTime&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+ aTime);&#xA;&#x9;&#x9;SimpleDateFormat df = new SimpleDateFormat(&quot;HH:mm:ss&quot;);&#xA;&#x9;&#x9;Date d = df.parse(aTime);&#xA;&#x9;&#x9;Calendar cal = Calendar.getInstance();&#xA;&#x9;&#x9;cal.setTime(d);&#xA;&#x9;&#x9;cal.add(Calendar.MINUTE, -2);&#xA;&#x9;&#x9;String aTimeNew = df.format(cal.getTime());&#xA;&#x9;&#x9;LOGGER.warn(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;newTime&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+ aTimeNew);&#xA;&#xA;        LOGGER.warn('&lt;&lt;&lt;&lt;&lt;OGT&gt;&gt;&gt;&gt;&gt;&gt;&gt;'+xmlGvyString)&#xA;        def truck = getFieldValues(xmlGvyString, &quot;truck=&quot;);&#xA;&#x9;&#x9;def newATime = &quot;aTime='&quot;+aTimeNew+&quot;'&quot;;&#xA;&#x9;&#x9;def newLastATime = &quot;lastATime='&quot;+aTimeNew+&quot;'&quot;;&#xA;&#xA;        def truckOld = &quot;truck='&quot;+truck+&quot;'&quot;;&#xA;&#xA;        xmlGvyString = xmlGvyString.replace(truckOld,&quot;truck='ZZZZ'&quot;);&#xA;        xmlGvyString = xmlGvyString.replace(LAST_ACTION,&quot;lastAction='OGT'&quot;);&#xA;&#x9;&#x9;xmlGvyString = xmlGvyString.replace(ACTION,&quot;action='OGT'&quot;)&#xA;&#x9;&#x9;xmlGvyString = xmlGvyString.replace(oldATime,newATime)&#xA;&#x9;&#x9;xmlGvyString = xmlGvyString.replace(oldLastATime,newLastATime)&#xA;        LOGGER.warn('&lt;&lt;&lt;&lt;&lt;OGT afterUpdate&gt;&gt;&gt;&gt;&gt;&gt;&gt;'+xmlGvyString)&#xA;&#xA;     }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    }&#xA;&#xA;    return xmlGvyString&#xA;  }&#xA;&#xA;   public String getIGT(String xmlGvyData,Object unit)&#xA;  {&#xA;    def  xmlGvyString = xmlGvyData&#xA;    try{&#xA;&#xA;&#x9;def aDate = getFieldValues(xmlGvyString, &quot;aDate=&quot;);&#xA;&#x9;def aTime = getFieldValues(xmlGvyString, &quot;aTime=&quot;);&#xA;&#x9;def lastADate = getFieldValues(xmlGvyString, &quot;lastADate=&quot;);&#xA;&#x9;def lastATime = getFieldValues(xmlGvyString, &quot;lastATime=&quot;);&#xA;&#xA;&#x9;LOGGER.warn(&quot;Time for IGT Details &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;:&quot;+aDate+&quot;::&quot;+aTime+&quot;::&quot;+lastADate+&quot;::&quot;+lastATime);&#xA;&#xA;    def commodityId=unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;)&#xA;    def commodity = commodityId != null ? commodityId : ''&#xA;    def lineOperator=unit.getFieldValue(&quot;unitLineOperator.bzuId&quot;)&#xA;&#xA;    def cargoNotes = getFieldValues(xmlGvyString, &quot;cargoNotes=&quot;);&#xA;    def locationRow = getFieldValues(xmlGvyString, &quot;locationRow=&quot;);&#xA;    def truck = getFieldValues(xmlGvyString, &quot;truck=&quot;);&#xA;&#x9;def locationStatus = getFieldValues(xmlGvyString, &quot;locationStatus=&quot;);&#xA;    def action = getFieldValues(xmlGvyString, &quot;action=&quot;);&#xA;    def lastAction = getFieldValues(xmlGvyString, &quot;lastAction=&quot;);&#xA;&#xA;    def cargoNotesOld = &quot;cargoNotes='&quot;+cargoNotes+&quot;'&quot;;&#xA;    def locationRowOld = &quot;locationRow='&quot;+locationRow+&quot;'&quot;;&#xA;    def truckOld = &quot;truck='&quot;+truck+&quot;'&quot;;&#xA;    def actionOld = &quot;action='&quot;+action+&quot;'&quot;;&#xA;    def lastActionOld = &quot;lastAction='&quot;+lastAction+&quot;'&quot;;&#xA;&#x9;def locationStatusOld = &quot;locationStatus='&quot;+locationStatus+&quot;,&quot;;&#xA;&#xA;    xmlGvyString = xmlGvyString.replace(cargoNotesOld,&quot;cargoNotes='&quot;+commodity+&quot;'&quot;);&#xA;    xmlGvyString = xmlGvyString.replace(locationRowOld,&quot;locationRow='&quot;+lineOperator+&quot;'&quot;);&#xA;    xmlGvyString = xmlGvyString.replace(truckOld,&quot;truck='ZZZZ'&quot;);&#xA;&#x9;xmlGvyString = xmlGvyString.replace(locationStatusOld,&quot;locationStatus='1'&quot;);&#xA;    xmlGvyString = xmlGvyString.replace(lastActionOld,&quot;lastAction='IGT'&quot;);&#xA;    xmlGvyString = xmlGvyString.replace(actionOld,&quot;action='IGT'&quot;)&#xA;    xmlGvyString = xmlGvyString.replace(&quot;msgType='FRUCTOSE_LOAD'&quot;,&quot;msgType='FRUCTOSE_MTY'&quot;)&#xA;    //println('&lt;&lt;&lt;&lt;&lt;IGT&gt;&gt;&gt;&gt;&gt;&gt;&gt;'+xmlGvyString)&#xA;    //A2 Adding Actual Vessel,Voyage and leg&#xA;    def gvyCmisUtil = getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;&#x9;def carrierId = unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;)&#xA;&#xA;&#x9;def obVesClass = unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvCvd.vvdVessel.vesVesselClass.vesclassVesselType&quot;);&#xA;&#x9;obVesClass = obVesClass != null ? obVesClass.getKey() : ''&#xA;    xmlGvyString = gvyCmisUtil.setVesvoyFields(unit, xmlGvyString, carrierId, obVesClass) //A3&#xA;&#xA;     }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    }&#xA;&#xA;    return xmlGvyString&#xA;  }&#xA;&#xA;  public String getEDT(String xmlGvyData)&#xA;  {&#xA;    def  xmlGvyString = xmlGvyData&#xA;    try&#xA;    {&#xA;       def truck = getFieldValues(xmlGvyString, &quot;truck=&quot;);&#xA;       def dir = getFieldValues(xmlGvyString, &quot;dir=&quot;);&#xA;       def truckOld = &quot;truck='&quot;+truck+&quot;'&quot;;&#xA;&#xA;       xmlGvyString = xmlGvyString.replace(truckOld,&quot;truck='null'&quot;);&#xA;       xmlGvyString = xmlGvyString.replace(&quot;lastAction='IGT'&quot;,&quot;lastAction='EDT'&quot;);&#xA;       xmlGvyString = xmlGvyString.replace(&quot;action='IGT'&quot;,&quot;action='EDT'&quot;)&#xA;       xmlGvyString = xmlGvyString.replace(&quot;msgType='FRUCTOSE_LOAD'&quot;,&quot;msgType='FRUCTOSE_MTY'&quot;)&#xA;     // println('&lt;&lt;&lt;&lt;&lt;EDT&gt;&gt;&gt;&gt;&gt;&gt;&gt;'+xmlGvyString)&#xA;&#xA;    }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    }&#xA;    return xmlGvyString&#xA;  }&#xA;&#xA;  public String getYMV(String xmlGvyData, Object utilObj)&#xA;  {&#xA;    def  xmlGvyString = xmlGvyData&#xA;    try&#xA;   {&#xA;     xmlGvyString = utilObj.addEventSpecificFldValue(xmlGvyString,&quot;lastAction=&quot;,&quot;YMV&quot;,null,null,null);&#xA;     xmlGvyString = utilObj.addEventSpecificFldValue(xmlGvyString,&quot;action=&quot;,&quot;YMV&quot;,null,null,null);&#xA;     xmlGvyString = utilObj.addEventSpecificFldValue(xmlGvyString,&quot;msgType=&quot;,&quot;FRUCTOSE_MTY&quot;,null,null,null);&#xA;     //println('&lt;&lt;&lt;&lt;&lt;YMV&gt;&gt;&gt;&gt;&gt;&gt;&gt;'+xmlGvyString)&#xA;&#xA;   }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    }&#xA;&#xA;    return xmlGvyString&#xA;  }&#xA;&#xA;   public static String getFieldValues(String xmlGvyString, String field)&#xA;   {&#xA;      def fieldIndx = xmlGvyString.indexOf(field);&#xA;      def equalsIndx = xmlGvyString.indexOf(&quot;=&quot;,fieldIndx);&#xA;      def lastChar = xmlGvyString.indexOf(&quot;'&quot;, equalsIndx+2);&#xA;      String fieldValue  = xmlGvyString.substring(equalsIndx+2, lastChar);&#xA;      //println(&quot;equalsIndx:&quot;+equalsIndx+&quot;  lastChar:&quot;+lastChar+&quot; oldValue:&quot;+fieldValue);&#xA;      return fieldValue;&#xA;   }&#xA;&#xA;private static final Logger LOGGER = Logger.getLogger(GvyCmisEventFructoseMty.class);&#xA;}" />
<digital-asset id="GvySailBatchProcess" short-description="GvySailBatchProcess" is-pre-deployed="N" groovy-code="/*&#xA;*  A1    Raghu Pattangi      Intial groovy plug-in for sail function (longhaul and barge) reports.&#xA;*/&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DecimalFormat;&#xA;import java.text.DateFormat&#xA;import java.util.HashMap&#xA;import com.navis.argo.business.atoms.LocTypeEnum;&#xA;import com.navis.inventory.business.imdg.HazardItem;&#xA;import com.navis.inventory.business.imdg.Hazards;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;import com.navis.argo.ContextHelper;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;import com.navis.argo.business.atoms.FreightKindEnum;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.api.EventManager&#xA;import org.apache.log4j.Logger;&#xA;&#xA;public class GvySailBatchProcess extends GroovyInjectionBase&#xA;{&#xA;&#x9;public static final Logger LOGGER = Logger.getLogger(GvySailBatchProcess.class);&#xA;&#x9;private String outBoundCarrierId = null&#xA;&#x9;def inj = null;&#xA;&#x9;public void init(){&#xA;&#x9;&#x9;println(&quot;Inside Groovy plug in&quot;)&#xA;&#x9;&#x9;&#x9;inj = new GroovyInjectionBase();&#xA;&#x9;   }&#xA;&#xA;&#x9;// This report prints all the rehandled cotainers in the YARD or INBOUND vessel which are not loaded back to the vessel.&#xA;&#x9;public void  createRehandleContainerRpt(event) {&#xA;&#x9;&#x9;LOGGER.info(&quot;Begin createRehandleContainerRpt&quot;);&#xA;&#x9;&#x9;inj = inj==null ? new GroovyInjectionBase(): inj;&#xA;&#x9;&#x9;List restowList = new ArrayList(); &#xA;&#x9;&#x9;List rehandleRptList = new ArrayList();&#xA;&#x9;&#x9;HashMap map = null;&#xA;&#x9;&#x9;def visit = event.getEntity(); &#xA;&#x9;&#x9;def Id = visit.getCvdCv().getCvId()&#xA;&#x9;&#x9;def reportDesignName = null; def displayType = null;&#xA;&#x9;&#x9;outBoundCarrierId = &#x9;&#x9;&#xA;&#x9;&#x9;visit.vvdVessel.vesId+visit.getFieldValue(&quot;vvdObVygNbr&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_CATEGORY,UnitCategoryEnum.THROUGH))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID, Id));&#xA;&#xA;&#x9;&#x9;&#x9;List unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;Iterator iter = unitList.iterator();&#x9;&#xA;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;def equipType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def restow = unit.getFieldValue(&quot;unitActiveUfv.ufvRestowType&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;map = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;restow = restow != null ? restow.getKey(): ''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def transitState = unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;transitState = transitState != null ? transitState.getKey() : ''&#xA;&#x9;&#x9;&#x9;&#x9;def tState = transitState.split(&quot;_&quot;)  &#xA;&#x9;&#x9;&#x9;&#x9;transitState = tState[1]&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.info(&quot; Unit number is &quot;+unit.getFieldValue(&quot;unitId&quot;)+&quot;  restow is &quot;+restow);&#xA;&#x9;&#x9;&#x9;&#x9; if (&quot;RESTOW&quot;.equals(restow) &amp;&amp; &quot;YARD&quot;.equals(transitState))&#xA;&#x9;&#x9;&#x9;&#x9; {&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot; Unit number is &quot;+unit.getFieldValue(&quot;unitId&quot;));                                          &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;Remarks are &quot;+unit.getFieldValue(&quot;unitRemark&quot;));                                          &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot; position slot &quot;+unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)); &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;pos 1: &quot;+ unit.getFieldValue(&quot;unitActiveUfv.ufvArrivePosition.posSlot&quot;));               &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;pos 2: &quot;+ unit.getFieldValue(&quot;unitActiveUfv.ufvArrivePosition.posName&quot;));    &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitNbr&quot;,unit.getFieldValue(&quot;unitId&quot;));         &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;PositionSlot&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitRemark&quot;,unit.getFieldValue(&quot;unitRemark&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;VesselVisitId&quot;,Id);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;restowList.add(map);&#xA;&#x9;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;println('restowList ::'+(restowList!= null ? restowList.size() : '0'))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;    if (restowList != null &amp;&amp; restowList.size() &gt; 0 )&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;// Create data source with the restowlist to populate on the report.&#xA;&#x9;&#x9;&#x9;&#x9;JRDataSource ds = new JRMapCollectionDataSource(restowList);&#xA;&#x9;&#x9;&#x9;&#x9;// get report runner handle&#xA;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//Set report parameters&#xA;&#x9;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;// call report design of rehandle containers not loaded back to vessel report.&#xA;&#x9;&#x9;&#x9;&#x9;reportDesignName = &quot;REHANDLE CONTAINERS NOTLOADED BACK&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;// Emailing report&#xA;&#x9;&#x9;&#x9;&#x9; reportRunner.emailReport(ds, parameters,reportDesignName , &quot;1aktosdevteam@matson.com&quot;,&quot;Rehandle containers not loaded back to &quot;+Id,&quot;&quot;);&#xA;&#x9;&#x9;&#x9;&#x9; LOGGER.info(&quot;End createRehandleContainerRpt&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch(Exception ex) {&#xA;&#x9;&#x9;&#x9;LOGGER.info(&quot;ERROR createRehandleContainerRpt &quot;+ex.printStackTrace());&#xA;&#x9;&#x9;}&#xA;&#x9;}//method ends&#xA;&#xA;&#xA;&#x9;// This report prints all the empty reefers on the outbound vessel whose destination is &quot;OAK&quot; &#xA;&#x9;// and which are flagged as &quot;Clean and Caliberated&quot;.&#xA;&#x9;public void createCleanAndCaliberatedRpt(event) {&#xA;&#x9;&#x9;LOGGER.info(&quot;Begin createCleanAndCaliberatedRpt&quot;);&#xA;&#x9;&#x9;inj = inj==null ? new GroovyInjectionBase(): inj;&#xA;&#x9;&#x9;def visit = event.getEntity(); &#xA;&#x9;&#x9;def Id = visit.getCvdCv().getCvId()&#xA;&#x9;&#x9;HashMap resultMap = null;&#xA;&#x9;&#x9;List outputList = new ArrayList();&#xA;&#x9;&#x9;def reportDesignName = null;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID,Id))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UFV_FREIGHT_KIND, FreightKindEnum.MTY))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UFV_DESTIN, &quot;OAK&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqOrdering(Ordering.asc(UnitField.UFV_PRIMARY_EQTYPE_ID))&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;List unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;Iterator iter = unitList.iterator();&#x9;&#xA;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;resultMap = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;def eqType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def transitState = unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;def unitNotes = unit.getFieldValue(&quot;unitRemark&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;unitNotes = unitNotes != null ? unitNotes : ''&#xA;&#x9;&#x9;&#x9;&#x9;if (eqType[0] == &quot;R&quot; &amp;&amp; unitNotes.contains(&quot;CCR&quot;) ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot; Unit number is &quot;+unit.getFieldValue(&quot;unitId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot; Transit state is &quot;+transitState); &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot; Equipment type is &quot;+eqType); &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def cellLocation = unit.getFieldValue(&quot;unitActiveUfv.ufvArrivePosition.posSlot&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (cellLocation == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cellLocation = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;resultMap.put(&quot;UnitNbr&quot;,unit.getFieldValue(&quot;unitId&quot;));         &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;resultMap.put(&quot;EquipmentType&quot;,eqType);                                 &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;resultMap.put(&quot;ArrivalPositionSlot&quot;,cellLocation);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;resultMap.put(&quot;Destination&quot;,unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;));                            &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;resultMap.put(&quot;VesselVisitId&quot;,Id);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outputList.add(resultMap);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9; }&#xA;&#xA;&#x9;&#x9;&#x9; if (outputList != null &amp;&amp; outputList.size() !=0)&#xA;&#x9;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;&#x9;// Create data source with the restowlist to populate on the report.&#xA;&#x9;&#x9;&#x9;&#x9;JRDataSource ds = new JRMapCollectionDataSource(outputList);&#xA;&#x9;&#x9;&#x9;&#x9;// get report runner handle&#xA;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//Set report parameters&#xA;&#x9;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;// call report design of CLEAN AND CALIBERATE REPORT.&#xA;&#x9;&#x9;&#x9;&#x9;reportDesignName = &quot;CLEAN AND CALIBERATE REPORT&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;// Emailing report&#xA;&#x9;&#x9;&#x9;&#x9; reportRunner.emailReport(ds, parameters,reportDesignName , &quot;1aktosdevteam@matson.com&quot;,Id+&quot; MTY RFRS-CLEANED AND CALIBERATED &quot;,&quot;&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;    }&#xA;&#x9;&#x9;catch (Exception ex) {&#xA;&#x9;&#x9;&#x9;ex.printStackTrace()&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;}//method ends here&#xA;&#xA;&#xA;&#x9;// Creating ZIMX, NORA, FSCO and CCLU owner reports.&#xA;&#x9;public void createOwnerContainerReport(event) {&#xA;&#x9;&#x9;println(&quot;createOwnerContainerReport begins&quot;);&#xA;&#x9;&#x9;def visit = event.getEntity(); &#xA;&#x9;&#x9;def vesselId = visit.getCvdCv().getCvId();&#xA;&#x9;&#x9;HashMap ownerMap = null;&#xA;&#xA;&#x9;&#x9;List zimList = new ArrayList();&#xA;&#x9;&#x9;List noraList = new ArrayList();&#xA;&#x9;&#x9;List ccluList = new ArrayList();&#xA;&#x9;&#x9;List fscofhcuList = new ArrayList();&#xA;&#x9;&#x9;def owner = null;&#xA;&#x9;&#x9;def reportDesignName = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; .addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID,vesselId))&#xA; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;List unitOwnerist = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;Iterator iterOwner = unitOwnerist.iterator();&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;while(iterOwner.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;def ufv = iterOwner.next();&#xA;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;def unitOwner = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOwner.bzuId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if (unitOwner.contains(&quot;ZIM&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap = new HashMap()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def cellLocation = unit.getFieldValue(&quot;unitActiveUfv.ufvArrivePosition.posSlot&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (cellLocation == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cellLocation = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;UnitNbr&quot;,unit.getFieldValue(&quot;unitId&quot;));         &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;FreightKind&quot;,unit.getFieldValue(&quot;unitCategory&quot;).getKey());  // FrieghtKind is initally used just to match the report field. It is actually category.                                  &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;Destination&quot;,unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;));                            &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;POD&quot;,unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;ArrivalPositionSlot&quot;,cellLocation);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;VesselVisitId&quot;,vesselId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;EquipmentOwner&quot;,&quot;ZIM&quot;); &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;zimList.add(ownerMap);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else if (unitOwner.equals(&quot;NORA&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap = new HashMap()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def cellLocation = unit.getFieldValue(&quot;unitActiveUfv.ufvArrivePosition.posSlot&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (cellLocation == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cellLocation = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;UnitNbr&quot;,unit.getFieldValue(&quot;unitId&quot;));         &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;FreightKind&quot;,unit.getFieldValue(&quot;unitCategory&quot;).getKey());  // FrieghtKind is initally used just to match the report field. It is actually category.                                  &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;Destination&quot;,unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;));                            &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;POD&quot;,unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;ArrivalPositionSlot&quot;,cellLocation);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;VesselVisitId&quot;,vesselId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;EquipmentOwner&quot;,&quot;NORA&quot;); &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;noraList.add(ownerMap);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else if (unitOwner.equals(&quot;CCLU&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap = new HashMap()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def cellLocation = unit.getFieldValue(&quot;unitActiveUfv.ufvArrivePosition.posSlot&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (cellLocation == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cellLocation = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;UnitNbr&quot;,unit.getFieldValue(&quot;unitId&quot;));         &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;FreightKind&quot;,unit.getFieldValue(&quot;unitCategory&quot;).getKey());  // FrieghtKind is initally used just to match the report field. It is actually category.                                  &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;Destination&quot;,unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;));                            &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;POD&quot;,unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;ArrivalPositionSlot&quot;,cellLocation);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;VesselVisitId&quot;,vesselId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;EquipmentOwner&quot;,&quot;CCLU&quot;); &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ccluList.add(ownerMap);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else if (unitOwner.equals(&quot;FSCO&quot;) || unitOwner.equals(&quot;FHSU&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap = new HashMap()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def cellLocation = unit.getFieldValue(&quot;unitActiveUfv.ufvArrivePosition.posSlot&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (cellLocation == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cellLocation = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;UnitNbr&quot;,unit.getFieldValue(&quot;unitId&quot;));         &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;FreightKind&quot;,unit.getFieldValue(&quot;unitCategory&quot;).getKey());  // FrieghtKind is initally used just to match the report field. It is actually category.                                  &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;Destination&quot;,unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;));                            &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;POD&quot;,unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;ArrivalPositionSlot&quot;,cellLocation);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;VesselVisitId&quot;,vesselId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ownerMap.put(&quot;EquipmentOwner&quot;,&quot;FHSU&quot;); &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;fscofhcuList.add(ownerMap);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (zimList!= null &amp;&amp; zimList.size() != 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;owner=&quot;ZIM&quot;&#xA;&#x9;&#x9;&#x9;&#x9;createOwnerReport(zimList,vesselId,owner)&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (noraList!= null &amp;&amp; noraList.size() != 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;owner=&quot;NORA&quot;&#xA;&#x9;&#x9;&#x9;&#x9;createOwnerReport(noraList,vesselId,owner)&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (ccluList!= null &amp;&amp; ccluList.size() != 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;owner=&quot;CCLU&quot;&#xA;&#x9;&#x9;&#x9;&#x9;createOwnerReport(ccluList,vesselId,owner)&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (fscofhcuList!= null &amp;&amp; fscofhcuList.size() != 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;owner=&quot;FSCO-FHSU&quot;&#xA;&#x9;&#x9;&#x9;&#x9;createOwnerReport(fscofhcuList,vesselId,owner)&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (Exception ex)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;ex.printStackTrace()&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;println(&quot;createOwnerContainerReport ends&quot;);&#xA;&#x9;}&#xA;&#xA;&#x9;private createOwnerReport(ownerList,vesselId,owner) {&#xA;&#xA;&#x9;&#x9;def reportDesignName = null&#xA;&#x9;&#x9;inj = inj==null ? new GroovyInjectionBase(): inj;&#xA;&#x9;&#x9;JRDataSource ds = new JRMapCollectionDataSource(ownerList);&#xA;&#x9;&#x9;// get report runner handle&#xA;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#xA;&#x9;&#x9;//Set report parameters&#xA;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#xA;&#x9;&#x9;// call report design of rehandle containers not loaded back to vessel report.&#xA;&#x9;&#x9;reportDesignName = &quot;OWNER CONTAINER REPORT&quot;;&#xA;&#xA;&#x9;&#x9;// Emailing report&#xA;&#x9;&#x9; reportRunner.emailReport(ds, parameters,reportDesignName , &quot;1aktosdevteam@matson.com&quot;,owner+&quot; containers loaded to &quot;+vesselId,&quot;&quot;);&#x9;&#x9;&#xA;&#xA;&#x9;} // method ends here&#xA;&#xA;&#x9;public void createEBSailingWireRpt(event) {&#xA;&#x9;&#x9;println(&quot; Sail function : createEBSailingWireRpt begins&quot;)&#xA;&#xA;&#x9;&#x9;def visit = event.getEntity(); &#xA;&#x9;&#x9;def vesselId = visit.getCvdCv().getCvId();&#xA;&#x9;&#x9;List outputlist = new ArrayList()&#xA;&#x9;&#x9;HashMap outputMap = null&#xA;&#x9;&#x9;List intermediateList = new ArrayList();&#xA;&#x9;&#x9;inj = inj==null ? new GroovyInjectionBase(): inj;&#xA;&#x9;&#x9;def reportDesignName = null;&#xA;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; .addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID,vesselId))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; .addDqOrdering(Ordering.asc(UnitField.UFV_DESTIN))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; .addDqOrdering(Ordering.asc(UnitField.UFV_FREIGHT_KIND))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; .addDqOrdering(Ordering.asc(UnitField.UFV_PRIMARY_EQTYPE_ID));&#xA;&#x9;&#x9;&#x9;println(&quot;Domain query is &quot;+dq);&#xA;&#xA;&#x9;&#x9;&#x9;List resultList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#xA;&#x9;&#x9;&#x9;println(&quot;resultList size is &quot;+resultList.size())&#xA;&#xA;&#x9;&#x9;&#x9;Iterator itereb = resultList.iterator();&#xA;&#xA;&#x9;&#x9;&#x9;while (itereb.hasNext())&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;outputMap = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;def ufv = itereb.next();&#xA;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;def unitId = unit.getFieldValue(&quot;unitId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def dir = unit.getFieldValue(&quot;unitFreightKind&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;dir = dir != null ? dir.getKey() : '' &#xA;&#x9;&#x9;&#x9;&#x9;if (&quot;FCL&quot;.equals(dir) &amp;&amp; &quot;AUTO&quot;.equals(commodity))&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dir = &quot;AUTO&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;} else if (&quot;FCL&quot;.equals(dir) &amp;&amp; !&quot;AUTO&quot;.equals(commodity))&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dir = &quot;LOAD&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;def destination = unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def equipmentType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def loadPort = unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Before Map  &quot;+unitId+&quot; &quot;+destination+&quot; &quot;+equipmentType+&quot; &quot;+dir+&quot; &quot;+commodity+&quot; &quot;+loadPort)&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;UnitNbr&quot;,unitId);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;Destination&quot;,destination);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;FreightKind&quot;,dir);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;Commodity&quot;,commodity);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;EquipmentType&quot;,equipmentType);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;POL&quot;,loadPort);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;VesselVisitId&quot;,vesselId);&#xA;&#x9;&#x9;&#x9;&#x9;intermediateList.add(outputMap);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9; if (intermediateList != null &amp;&amp; intermediateList.size() !=0)&#xA;&#x9;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;&#x9; println(&quot;intermediateList size is &quot;+intermediateList.size())&#xA;&#x9;&#x9;&#x9;&#x9;// Create data source with the restowlist to populate on the report.&#xA;&#x9;&#x9;&#x9;&#x9;JRDataSource ds = new JRMapCollectionDataSource(intermediateList);&#xA;&#x9;&#x9;&#x9;&#x9;// get report runner handle&#xA;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//Set report parameters&#xA;&#x9;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;// call report design of CLEAN AND CALIBERATE REPORT.&#xA;&#x9;&#x9;&#x9;&#x9;reportDesignName = &quot;EB SAILING WIRE&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;// Emailing report&#xA;&#x9;&#x9;&#x9;&#x9; reportRunner.emailReport(ds, parameters,reportDesignName , &quot;1aktosdevteam@matson.com&quot;,vesselId+&quot; ailing wire report &quot;,vesselId+&quot; Sailing wire : Attached are the Total and Detail reports&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9; }&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (Exception ex)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;ex.printStackTrace()&#xA;&#x9;&#x9;}&#xA;&#xA;&#xA;&#xA;&#x9;} // method ends here&#xA;&#xA;public void createReportsAfterSail(event){&#xA;&#xA;def visit = event.getEntity(); &#xA;def vesselId = visit.getCvdCv().getCvId();&#xA;def facility = ContextHelper.getThreadFacility().getFcyId(); &#xA;def nextFacility = visit.getCvdCv().getCvNextFacility(); //&quot;KDK&quot;;&#xA;def reportName = &quot;OUTBOUND DCM - ANCHORAGE&quot;;&#xA;&#xA;try {&#xA;      //  generateDCMReports(visit,facility,reportName,&quot;OUTBOUND&quot;,event);&#xA;if(nextFacility != null){&#xA;reportName = &quot;INBOUND DCM - KODIAK&quot;&#xA;generateDCMReports(visit,nextFacility.getFcyId(),reportName,&quot;INBOUND&quot;,event);&#xA;generateReeferReport(visit,nextFacility.getFcyId(),event,&quot;INBOUND&quot;)&#xA;generateOversizeReport(visit,nextFacility.getFcyId(),event,&quot;INBOUND&quot;)&#xA;}&#xA;}&#xA;catch (Exception ex ){&#xA;ex.printStackTrace()&#xA;}&#xA;}//method ends here&#xA;&#xA;public void generateDCMReports(visit,facility,reportName,direction,event){&#xA;def outputMap = null;&#xA;inj = inj==null ? new GroovyInjectionBase(): inj;&#xA;def vesselId = visit.getCvdCv().getCvId();&#xA;List intermediateList = new ArrayList();&#xA;def fcyId = &quot;ANK&quot;; //facility.getFcyId();&#xA;def fcyName = &quot;Anchorage&quot;; //facility.getFcyName();&#xA;reportName = &quot;INBOUND DCM - ANCHORAGE&quot;&#xA;if (facility == &quot;KDK&quot;){&#xA;fcyId = &quot;KDK&quot;&#xA;fcyName = &quot;Kodiak&quot;&#xA;reportName = &quot;INBOUND DCM - KODIAK&quot;&#xA;}&#xA;if (facility == &quot;DUT&quot;){&#xA;fcyId = &quot;DUT&quot;&#xA;fcyName = &quot;Dutch&quot;&#xA;reportName = &quot;INBOUND DCM - DUTCH&quot;&#xA;}&#xA;try {&#xA;&#xA;println(&quot;createReportsAfterSail&quot;);&#xA;LOGGER.info(&quot;Begin createReportsAfterSail&quot;);&#xA;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; .addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID,vesselId))                                &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; .addDqPredicate(PredicateFactory.eq(UnitField.UFV_IS_HAZARDS,Boolean.TRUE))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; .addDqPredicate(PredicateFactory.eq(UnitField.UFV_CURRENT_POSITION_TYPE,LocTypeEnum.VESSEL))&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; .addDqOrdering(Ordering.asc(UnitField.UFV_DESTIN))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; .addDqOrdering(Ordering.asc(UnitField.UFV_FREIGHT_KIND))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; .addDqOrdering(Ordering.asc(UnitField.UFV_PRIMARY_EQTYPE_ID));&#xA;&#x9;&#x9;&#x9;println(&quot;Domain query is &quot;+dq);&#xA;&#xA;&#x9;&#x9;&#x9;List resultList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#xA;&#x9;&#x9;&#x9;println(&quot;resultList size is &quot;+resultList.size())&#xA;&#xA;&#x9;&#x9;&#x9;Iterator itereb = resultList.iterator();&#xA;&#xA;&#x9;&#x9;&#x9;while (itereb.hasNext())&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;def ufv = itereb.next();&#xA;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;                &#xA;&#xA;&#x9;&#x9;&#x9;&#x9;def unitId = unit.getFieldValue(&quot;unitId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def dir = unit.getFieldValue(&quot;unitFreightKind&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;def destination = unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def equipmentType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def loadPort = unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def discPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Before Map  &quot;+unitId+&quot; &quot;+destination+&quot; &quot;+equipmentType+&quot; &quot;+dir+&quot; &quot;+commodity+&quot; &quot;+loadPort)&#xA;LOGGER.info(&quot;Discharge Port ::&quot;+discPort);&#xA;&#x9;&#x9;&#x9;&#x9;Hazards hazards = unit.getUnitGoods().getGdsHazards();&#xA;&#x9;&#x9;&#x9;&#x9;if (hazards !=null){&#xA;&#x9;&#x9;&#x9;&#x9;Iterator hzrdItems = hazards.getHazardItemsIteratorOrderedBySeverity();&#xA;&#x9;&#x9;&#x9;&#x9;while(hzrdItems.hasNext()){&#xA;&#x9;&#x9;&#x9;&#x9;HazardItem hzdItem = (HazardItem)hzrdItems.next();&#xA;&#x9;&#x9;&#x9;&#x9;outputMap = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;OutboundCarrierId&quot;,vesselId);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;OutboundCarrierOutVoyageNbr&quot;,visit.getCarrierIbVoyNbrOrTrainId());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;OutboundCarrierType&quot;,visit.getCarrierTypeId());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;OutboundCarrierName&quot;,visit.getCarrierVehicleName());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;OutboundCarrierCountry&quot;,visit.getCarrierCountryName());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;OutboundCarrierOperatorName&quot;,visit.getCarrierOperator().getBzuId());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;OutboundCarrierETD&quot;,visit.getCvdETD());&#xA;&#xA;outputMap.put(&quot;InboundCarrierCountry&quot;,visit.getCarrierCountryName());&#xA;outputMap.put(&quot;InboundCarrierFacilityId&quot;,fcyId);&#xA;outputMap.put(&quot;InboundCarrierFacilityName&quot;,fcyName);&#xA;outputMap.put(&quot;InboundCarrierId&quot;,visit.getCvdCv().getCvId());&#xA;outputMap.put(&quot;InboundCarrierOutVoyageNbr&quot;,visit.getCarrierObVoyNbrOrTrainId());&#xA;outputMap.put(&quot;InboundCarrierDocumentationNbr&quot;,visit.getCarrierDocumentationNbr());&#xA;outputMap.put(&quot;InboundCarrierATA&quot;,visit.getCvdCv().getCvATA());&#xA;outputMap.put(&quot;InboundCarrierETA&quot;,visit.getCvdETA());&#xA;&#xA;&#xA;&#xA;outputMap.put(&quot;UnitNbr&quot;,unitId);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;EquipmentArcheTypeId&quot;,equipmentType);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;IsHazardous&quot;,&quot;true&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;HazardItemSequence&quot;,hzdItem.getHzrdiSeq());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;HazardItemUNNumber&quot;,hzdItem.getHzrdiUNnum());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;HazardItemProperName&quot;,hzdItem.getHzrdiProperName());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;HazardItemImdgClass&quot;,hzdItem.getHzrdiImdgClass().getKey());&#xA;outputMap.put(&quot;HazardItemPackingGroup&quot;,hzdItem.getHzrdiPackingGroup());&#xA;println(&quot;HazardItemPackingGroup:::&quot;+hzdItem.getHzrdiPackingGroup());&#xA;if(hzdItem.getHzrdiPackingGroup() !=null){&#xA;def pkgGroup= hzdItem.getHzrdiPackingGroup().getKey()&#xA;println(&quot;HazardItemPackageGroup:::&quot;+pkgGroup);&#xA;if(pkgGroup == &quot;I&quot;){&#xA;outputMap.put(&quot;HazardItemPackingGroup&quot;,&quot;1&quot;);&#xA;}&#xA;else if (pkgGroup == &quot;II&quot;){&#xA;outputMap.put(&quot;HazardItemPackingGroup&quot;,&quot;2&quot;);&#xA;}&#xA;else if (pkgGroup == &quot;III&quot;){&#xA;outputMap.put(&quot;HazardItemPackingGroup&quot;,&quot;3&quot;);&#xA;}&#xA;}&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;HazardItemFlashPoint&quot;,hzdItem.getHzrdiFlashPoint());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;HazardItemWeight&quot;,hzdItem.getHzrdiWeight());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;HazardItemQuantity&quot;,hzdItem.getHzrdiQuantity());&#xA;outputMap.put(&quot;HazardItemPackageType&quot;,hzdItem.getHzrdiPackageType());&#xA;println(&quot;HazardItemPackageType:::&quot;+hzdItem.getHzrdiPackageType());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;HazardItemEmergencyTelephone&quot;,hzdItem.getHzrdiEmergencyTelephone());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;HazardItemLimitedQty&quot;,hzdItem.getHzrdiLtdQty());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;HazardItemMarinePollutants&quot;,hzdItem.getHzrdiMarinePollutants());&#xA;if(unit.getUnitGoods().getGdsShipperBzu()!=null){&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;GoodsShipperName&quot;,unit.getUnitGoods().getGdsShipperBzu().getBzuName());&#xA;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;BlNbr&quot;,unit.getUnitGoods().getGdsBlNbr());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;POL&quot;,loadPort);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;POLPlaceName&quot;,loadPort);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;POD&quot;,discPort);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;PODPlaceName&quot;,discPort);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;OutboundCarrierFacilityId&quot;,visit.getCvdCv().getCvFacility().getFcyId());&#x9;&#x9;&#x9;outputMap.put(&quot;OutboundCarrierFacilityName&quot;,visit.getCvdCv().getCvFacility().getFcyName());&#x9;&#x9;&#x9;outputMap.put(&quot;PositionSlot&quot;,ufv.getUfvLastKnownPosition().getPosSlot());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;BookingNbr&quot;,unit.getUnitPrimaryUe().getUeDepartureOrderItem());&#xA;if(visit.getCvdCv().getCvATD() != null) {&#xA;outputMap.put(&quot;OutboundCarrierATD&quot;,visit.getCvdCv().getCvATD());&#xA;}&#xA;&#xA;if(visit.getCvdCv().getCvATA() != null){&#xA;&#xA;outputMap.put(&quot;OutboundCarrierATA&quot;,visit.getCvdCv().getCvATA());&#x9;&#xA;}&#xA;&#xA;if(visit.getCvdCv().getCvATA() != null) {&#xA;outputMap.put(&quot;InboundCarrierATA&quot;,visit.getCvdCv().getCvATA());&#xA;}&#xA;&#xA;if(visit.getCvdCv().getCvATA() != null){&#xA;&#xA;outputMap.put(&quot;InboundCarrierETA&quot;,visit.getCvdCv().getCvATA());&#x9;&#xA;}&#xA;&#x9;&#x9;outputMap.put(&quot;OutboundCarrierDocumentationNbr&quot;,visit.getCarrierDocumentationNbr());&#xA;&#xA;&#x9;&#x9;intermediateList.add(outputMap);&#xA;}&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;}&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;}&#xA;&#xA;&#xA;JRDataSource ds = new JRMapCollectionDataSource(intermediateList);&#xA;LOGGER.warn(&quot;createReportsAfterSail ds creation complted&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;// get report runner handle&#xA;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;LOGGER.warn(&quot;createReportsAfterSail - ReportRUnner&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;//Set report parameters&#xA;&#x9;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;parameters.put(&quot;Vessel_Visit&quot;,vesselId);&#xA;LOGGER.warn(&quot;createReportsAfterSai Parameterel&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;// call report design of DCM OUTBOUND.&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//String reportDesignName = &quot;OUTBOUND DCM - ANCHORAGE&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;// Emailing report&#xA;&#x9;&#x9;&#x9;&#x9; reportRunner.emailReport(ds, parameters,reportName , &quot;1aktosdevteam@matson.com&quot;,&quot;DCM &quot;+direction+&quot; REPORT - &quot;+facility+&quot; &quot;+vesselId,&quot;DCM &quot;+direction+&quot; REPORT - &quot;+facility+&quot; &quot;+vesselId);&#xA;LOGGER.info(&quot;createReportsAfterSail report generated&quot;);&#xA;&#xA;}&#xA;catch (Exception ex ){&#xA;ex.printStackTrace()&#xA;}&#xA;&#xA;}//method ends here&#xA;&#xA;public void generateReeferReport(visit,facility,event,direction){&#xA;def outputMap = null;&#xA;inj = inj==null ? new GroovyInjectionBase(): inj;&#xA;def vesselId = visit.getCvdCv().getCvId();&#xA;List intermediateList = new ArrayList();&#xA;def fcyId = facility; //facility.getFcyId();&#xA;def fcyName = facility; //facility.getFcyName();&#xA;&#xA;def reportName = &quot;REEFER CARGO - INBOUND - ANCHORAGE&quot;&#xA;if (facility == &quot;KDK&quot;) {&#xA;fcyId = &quot;KDK&quot;&#xA;fcyName = &quot;Kodiak&quot;&#xA;reportName = &quot;REEFER CARGO - INBOUND - KODIAK&quot;&#xA;}&#xA;if (facility == &quot;DUT&quot;) {&#xA;fcyId = &quot;DUT&quot;&#xA;fcyName = &quot;Dutch&quot;&#xA;reportName = &quot;REEFER CARGO - INBOUND - DUTCH&quot;&#xA;}&#xA;try {&#xA;println(&quot;reefer rpt starts&quot;);&#xA;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; .addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID,vesselId))                                &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; .addDqPredicate(PredicateFactory.isNotNull(UnitField.UFV_TEMP_REQUIRED_C))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; .addDqPredicate(PredicateFactory.eq(UnitField.UFV_CURRENT_POSITION_TYPE,LocTypeEnum.VESSEL))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9; .addDqOrdering(Ordering.asc(UnitField.UFV_PRIMARY_EQTYPE_ID));&#xA;&#x9;&#x9;&#x9;println(&quot;Domain query is &quot;+dq);&#xA;List resultList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;println(&quot;resultList size is &quot;+resultList.size())&#xA;Iterator itereb = resultList.iterator();&#xA;while (itereb.hasNext())&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;def ufv = itereb.next();&#xA;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;              &#xA;&#xA;&#x9;&#x9;&#x9;&#x9;def unitId = unit.getFieldValue(&quot;unitId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def dir = unit.getFieldValue(&quot;unitFreightKind&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def equipmentType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def loadPort = unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def discPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def destination = unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;outputMap = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;InboundCarrierCountry&quot;,visit.getCarrierCountryName());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;InboundCarrierATA&quot;,visit.getCvdCv().getCvATA());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;InboundCarrierETA&quot;,visit.getCvdETA());&#xA;outputMap.put(&quot;InboundCarrierFacilityId&quot;,fcyId);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;InboundCarrierFacilityName&quot;,fcyName);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;InboundCarrierId&quot;,visit.getCvdCv().getCvId());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;InboundCarrierOutVoyageNbr&quot;,visit.getCarrierObVoyNbrOrTrainId());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;InboundCarrierDocumentationNbr&quot;,visit.getCarrierDocumentationNbr());&#xA;&#x9;&#x9;&#x9;outputMap.put(&quot;CommodityDescription&quot;,commodity);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;UfvFlexString04&quot;,&quot;&quot;);&#xA;if(unit.getUnitGoods().getGdsReeferRqmnts()!=null){&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;RequiredMinTempC&quot;,unit.getUnitGoods().getGdsReeferRqmnts().getRfreqTempLimitMinC());&#xA;&#x9;&#x9;outputMap.put(&quot;RequiredMaxTempC&quot;,unit.getUnitGoods().getGdsReeferRqmnts().getRfreqTempLimitMaxC());&#xA;}&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;EquipmentNumberNoCD&quot;,unit.getUnitPrimaryUe().getUeEquipmentState().getEqsEquipment().getEqIdNoCheckDigit());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;EquipmentCD&quot;,unit.getUnitPrimaryUe().getUeEquipmentState().getEqsEquipment().getEqIdCheckDigit());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;PositionSlot&quot;,ufv.getUfvLastKnownPosition().getPosSlot());&#xA;def grossWeight = unit.getFieldValue(&quot;unitGoodsAndCtrWtKg&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;GrossWeight&quot;,grossWeight);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;POL&quot;,loadPort);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;POD&quot;,discPort);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;Destination&quot;,destination);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;LineOperator&quot;,unit.getUnitLineOperator().getBzuId());&#xA;&#x9;&#x9;&#x9;&#x9;if(unit.getUnitGoods().getGdsShipperBzu()!=null){&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;GoodsShipperName&quot;,unit.getUnitGoods().getGdsShipperBzu().getBzuName());&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(unit.getUnitGoods().getGdsConsigneeBzu()!=null){&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;GoodsConsigneeName&quot;,unit.getUnitGoods().getGdsConsigneeBzu().getBzuName());&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;intermediateList.add(outputMap);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;JRDataSource ds = new JRMapCollectionDataSource(intermediateList);&#xA;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;parameters.put(&quot;Vessel_Visit&quot;,vesselId);&#x9;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String reportDesignName = &quot;REEFER CARGO - INBOUND - KODIAK&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReport(ds, parameters,reportName , &quot;1aktosdevteam@matson.com&quot;,&quot;REEFER CARGO  &quot;+direction+&quot; REPORT - &quot;+fcyName+&quot; &quot;+vesselId,&quot;REEFER CARGO  &quot;+direction+&quot; REPORT - &quot;+fcyName+&quot; &quot;+vesselId);&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;}&#xA;catch(Exception ex){&#xA;ex.printStackTrace();&#xA;}&#xA;&#xA;}//method ends&#xA;&#xA;public void generateOversizeReport(visit,facility,event,direction){&#xA;def outputMap = null;&#xA;inj = inj==null ? new GroovyInjectionBase(): inj;&#xA;def vesselId = visit.getCvdCv().getCvId();&#xA;List intermediateList = new ArrayList();&#xA;&#xA;def fcyId = &quot;ANK&quot;; //facility.getFcyId();&#xA;def fcyName = &quot;Anchorage&quot;; //facility.getFcyName();&#xA;def reportName = &quot;OVERSIZE CARGO - INBOUND - ANCHORAGE&quot;&#xA;if (facility == &quot;KDK&quot;){&#xA;fcyId = &quot;KDK&quot;&#xA;fcyName = &quot;Kodiak&quot;&#xA;reportName = &quot;OVERSIZE CARGO - INBOUND - KODIAK&quot;&#xA;}&#xA;if (facility == &quot;DUT&quot;){&#xA;fcyId = &quot;DUT&quot;&#xA;fcyName = &quot;Dutch&quot;&#xA;reportName = &quot;OVERSIZE CARGO - INBOUND - DUTCH HARBOR&quot;&#xA;}&#xA;try {&#xA;println(&quot;oversize rpt starts&quot;);&#xA;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; .addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_ID,vesselId))                                &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; .addDqPredicate(PredicateFactory.eq(UnitField.UFV_IS_OOG,Boolean.TRUE))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; .addDqPredicate(PredicateFactory.eq(UnitField.UFV_CURRENT_POSITION_TYPE,LocTypeEnum.VESSEL))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9; .addDqOrdering(Ordering.asc(UnitField.UFV_PRIMARY_EQTYPE_ID));&#xA;&#x9;&#x9;&#x9;println(&quot;Domain query is &quot;+dq);&#xA;List resultList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;println(&quot;resultList size is &quot;+resultList.size())&#xA;Iterator itereb = resultList.iterator();&#xA;while (itereb.hasNext())&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;def ufv = itereb.next();&#xA;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;              &#xA;&#xA;&#x9;&#x9;&#x9;&#x9;def unitId = unit.getFieldValue(&quot;unitId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def commodity = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def dir = unit.getFieldValue(&quot;unitFreightKind&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def equipmentType = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def loadPort = unit.getFieldValue(&quot;unitRouting.rtgPOL.pointId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def discPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def destination = unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;outputMap = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;InboundCarrierCountry&quot;,visit.getCarrierCountryName());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;InboundCarrierATA&quot;,visit.getCvdCv().getCvATA());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;InboundCarrierETA&quot;,visit.getCvdETA());&#xA;outputMap.put(&quot;InboundCarrierFacilityId&quot;,fcyId);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;InboundCarrierFacilityName&quot;,fcyName);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;InboundCarrierId&quot;,visit.getCvdCv().getCvId());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;InboundCarrierOutVoyageNbr&quot;,visit.getCarrierObVoyNbrOrTrainId());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;InboundCarrierDocumentationNbr&quot;,visit.getCarrierDocumentationNbr());&#xA;&#x9;&#x9;&#x9;outputMap.put(&quot;CommodityDescription&quot;,commodity);&#xA;&#x9;&#x9;&#x9;outputMap.put(&quot;UnitNbr&quot;,unitId);&#xA;&#x9;&#x9;&#x9;outputMap.put(&quot;CargoWeight&quot;,unitId);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;UfvFlexString04&quot;,&quot;&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//outputMap.put(&quot;EquipmentNumberNoCD&quot;,unit.getUnitPrimaryUe().getUeEquipmentState().getEqsEquipment().getEqIdNoCheckDigit());&#xA;&#x9;&#x9;&#x9;&#x9;//outputMap.put(&quot;EquipmentCD&quot;,unit.getUnitPrimaryUe().getUeEquipmentState().getEqsEquipment().getEqIdCheckDigit());&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;PositionSlot&quot;,ufv.getUfvLastKnownPosition().getPosSlot());&#xA;def grossWeight = unit.getFieldValue(&quot;unitGoodsAndCtrWtKg&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;GrossWeight&quot;,grossWeight);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;CargoWeight&quot;,grossWeight);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;EquipmentArcheTypeId&quot;,equipmentType);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;BlNbr&quot;,unit.getUnitGoods().getGdsBlNbr());&#xA;&#x9;&#x9;&#x9;&#x9;def oogLeft = unit.getFieldValue(&quot;unitOogLeftCm&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def oogRight = unit.getFieldValue(&quot;unitOogRightCm&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def oogFront = unit.getFieldValue(&quot;unitOogFrontCm&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def oogBack = unit.getFieldValue(&quot;unitOogBackCm&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def oogTop = unit.getFieldValue(&quot;unitOogTopCm&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;DecimalFormat df = new DecimalFormat(&quot;#0.##&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;if(oogLeft!=null || oogLeft ==0){&#xA;&#x9;&#x9;&#x9;&#x9;def rawOogLeft= oogLeft/2.54;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;OOGLeft&quot;,df.format(rawOogLeft));&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(oogRight!=null || oogRight ==0){&#xA;&#x9;&#x9;&#x9;&#x9;def rawOogRight = oogRight/2.54;&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;OOGRight&quot;,df.format(rawOogRight));&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(oogFront!=null || oogFront ==0){&#xA;&#x9;&#x9;&#x9;&#x9;def rawOogFront = oogFront/2.54;&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;OOGFront&quot;,df.format(rawOogFront));&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(oogBack!=null || oogBack ==0){&#xA;&#x9;&#x9;&#x9;&#x9;def rawOogBack = oogBack/2.54;&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;OOGBack&quot;,df.format(rawOogBack));&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(oogTop!=null || oogTop ==0){&#xA;&#x9;&#x9;&#x9;&#x9;def rawOogTop = oogTop/2.54;&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;OOGTop&quot;,df.format(rawOogTop));&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;POL&quot;,loadPort);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;POD&quot;,discPort);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;Destination&quot;,destination);&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;LineOperator&quot;,unit.getUnitLineOperator().getBzuId());&#xA;&#x9;&#x9;&#x9;&#x9;if(unit.getUnitGoods().getGdsShipperBzu()!=null){&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;GoodsShipperName&quot;,unit.getUnitGoods().getGdsShipperBzu().getBzuName());&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(unit.getUnitGoods().getGdsConsigneeBzu()!=null){&#xA;&#x9;&#x9;&#x9;&#x9;outputMap.put(&quot;GoodsConsigneeName&quot;,unit.getUnitGoods().getGdsConsigneeBzu().getBzuName());&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;intermediateList.add(outputMap);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;JRDataSource ds = new JRMapCollectionDataSource(intermediateList);&#xA;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;parameters.put(&quot;Vessel_Visit&quot;,vesselId);&#x9;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;String reportDesignName = &quot;OVERSIZE CARGO - INBOUND - ANCHORAGE&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReport(ds, parameters,reportName , &quot;1aktosdevteam@matson.com&quot;,&quot;OVERSIZE CARGO  &quot;+direction+&quot; REPORT - &quot;+fcyName+&quot; &quot;+vesselId,&quot;OVERSIZE CARGO  &quot;+direction+&quot; REPORT - &quot;+fcyName+&quot; &quot;+vesselId);&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;}&#xA;catch(Exception ex){&#xA;ex.printStackTrace();&#xA;}&#xA;&#xA;}//method ends&#xA;&#xA;}//class ends&#xA;" />
<digital-asset id="MatUpdateTrucker" short-description="MatUpdateTrucker" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.road.business.model.*;&#xA;import java.util.Calendar;&#xA;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;&#xA;&#xA;import com.navis.argo.ArgoConfig;&#xA;import com.navis.argo.ArgoPropertyKeys;&#xA;import com.navis.argo.ArgoRefField;&#xA;import com.navis.argo.business.reference.AgentRepresentation;&#xA;import com.navis.argo.business.atoms.BizRoleEnum;&#xA;import com.navis.argo.business.reference.Agent;&#xA;import com.navis.argo.*;&#xA;import com.navis.road.business.model.TruckingCompany;&#xA;import com.navis.framework.business.atoms.LifeCycleStateEnum;&#xA;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 01/08/2013&#xA;* Description: This groovy is used to get the trucker Id attached for the input consignee/shipper&#xA;*/&#xA;&#xA;public class MatUpdateTrucker extends GroovyInjectionBase&#xA;&#x9;{&#xA;&#xA;&#x9;public boolean execute(Map params)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;MatUpdateTrucker&quot;)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String trucker = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String shipperBzuId = &quot;ABF CARTAGE INC&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;trucker = getTrucker(shipperBzuId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//createAgent();&#xA;&#x9;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(e)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;  private String getTruckerById(String ShipperBzuId)&#xA;  {&#xA;    String trucker = null;&#xA;&#xA;&#x9;DomainQuery dqShipper = QueryUtils.createDomainQuery(&quot;Shipper&quot;).addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_NAME,ShipperBzuId));&#xA;&#xA;&#x9;def shipperScopedBizUnit = ScopedBizUnit.findScopedBizUnit(ShipperBzuId, BizRoleEnum.SHIPPER);&#xA;&#xA;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;AgentRepresentation&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(ArgoRefField.AGENTREP_SCOPED_BUSINESS_UNIT, shipperScopedBizUnit.getBzuGkey()));&#xA;&#x9;println(dq);&#xA;&#x9;List agentRepList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#xA;&#x9;println (&quot;agentRepList.size()&quot; + agentRepList.size())&#xA;&#x9;if (agentRepList.size() &gt; 0)&#xA;&#x9;{&#xA;&#x9;&#x9;Iterator iter = agentRepList.iterator();&#xA;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;def agentRep = iter.next();&#xA;&#x9;&#x9;&#x9;println (&quot;agentListGkey &quot;+ agentRep.agentrepAgent);&#xA;&#x9;&#x9;&#x9;dq = QueryUtils.createDomainQuery(&quot;Agent&quot;).addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_GKEY,agentRep.agentrepAgent.getBzuGkey()));&#xA;&#x9;&#x9;&#x9;println(dq);&#xA;&#x9;&#x9;&#x9;List agentList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println (&quot;agentList.size()&quot; + agentList.size())&#xA;&#x9;&#x9;&#x9;Iterator iterAgent = agentList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(iterAgent.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def agent = iterAgent.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println (&quot;agentId &quot;+ agent.bzuId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;trucker = agent.bzuId&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;println(&quot;trucker &quot; + trucker);&#xA;&#x9;&#x9;}&#xA;&#x9;return (trucker)&#xA;  }&#xA;&#xA;private String getTrucker(String ShipperBzuName)&#xA;  {&#xA;    String trucker = null;&#xA;&#xA;&#x9;DomainQuery dqShipper = QueryUtils.createDomainQuery(&quot;Shipper&quot;).addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_NAME,ShipperBzuName));&#xA;&#xA;&#x9;println(dqShipper);&#xA;&#xA;&#x9;List shipperList = HibernateApi.getInstance().findEntitiesByDomainQuery(dqShipper);&#xA;&#x9;println (&quot;shipperList.size()&quot; + shipperList.size())&#xA;&#x9;if (shipperList.size() &gt; 0)&#xA;&#x9;{&#xA;&#x9;&#x9;Iterator iter = shipperList.iterator();&#xA;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;def shipper = iter.next();&#xA;&#x9;&#x9;&#x9;println (&quot;agentListGkey &quot;+ shipper.bzuId);&#xA;&#x9;&#x9;&#x9;def shipperScopedBizUnit = ScopedBizUnit.findScopedBizUnit(shipper.bzuId, BizRoleEnum.SHIPPER);&#xA;&#x9;&#x9;&#x9;println (&quot;shipperScopedBizUnit &quot;+ shipperScopedBizUnit);&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;AgentRepresentation&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(ArgoRefField.AGENTREP_SCOPED_BUSINESS_UNIT, shipperScopedBizUnit.getBzuGkey()))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqOrdering(Ordering.desc(ArgoRefField.AGENTREP_CREATED));&#xA;&#xA;&#x9;&#x9;&#x9;println(dq);&#xA;&#x9;&#x9;&#x9;List agentRepList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#xA;&#x9;&#x9;&#x9;println (&quot;agentRepList.size()&quot; + agentRepList.size())&#xA;&#x9;&#x9;&#x9;if (agentRepList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Iterator iter1 = agentRepList.iterator();&#xA;&#x9;&#x9;&#x9;while(iter1.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;def agentRep = iter1.next();&#xA;&#x9;&#x9;&#x9;&#x9;println (&quot;agentListGkey &quot;+ agentRep.agentrepAgent);&#xA;&#x9;&#x9;&#x9;&#x9;dq = QueryUtils.createDomainQuery(&quot;Agent&quot;).addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_GKEY,agentRep.agentrepAgent.getBzuGkey()))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.ne(ArgoRefField.BZU_ID,&quot;O/P&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;println(dq);&#xA;&#x9;&#x9;&#x9;&#x9;List agentList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;&#x9;println (&quot;agentList.size()&quot; + agentList.size())&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterAgent = agentList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while(iterAgent.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def agent = iterAgent.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println (&quot;agentId &quot;+ agent.bzuId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trucker = agent.bzuId;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;println(&quot;trucker &quot; + trucker);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return (trucker)&#xA;  }&#xA;&#xA;}" />
<digital-asset id="MatCheckNvProcess" short-description="MatCheckNvProcess" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import java.sql.ResultSet;&#xA;import java.sql.Connection;&#xA;&#xA;class MatCheckNvProcess {&#xA;&#x9;public String getNv(String vesVoy) {&#xA;&#x9;//public void execute(Map params) {&#xA;&#x9;    try{&#xA;&#x9;    String result = &quot;Y&quot;;&#xA;&#x9;    //String vesVoy = &quot;MAU728&quot;;&#xA;&#x9;    String cnt = &quot;0&quot;;&#xA;&#x9;    int vesCnt = 0;&#xA;&#x9;    def inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;&#x9;HashMap reportMap = null;&#xA;&#x9;&#x9;&#x9;def GvyRefDataLookup = inj.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;);&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;println(&quot;MatCheckNvProcess - Start&quot;)&#xA;&#x9;&#x9;&#x9;cnt = GvyRefDataLookup.lookupNv(vesVoy);&#xA;&#x9;&#x9;&#x9;vesCnt = cnt.toInteger()&#xA;&#x9;&#x9;&#x9;println(&quot;vesCnt ::::::::::::&quot;+vesCnt);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (vesCnt == 0 || vesCnt &gt;= 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;No of records in process logger table for :: &quot;+vesVoy +&quot; :: Is :&quot;+vesCnt +&quot; :: Result ::&quot;+result);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;return result;&#xA;&#x9;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;println (&quot;Error in MatCheckNvProcess ::&quot;+e);&#xA;&#x9;&#x9;&#x9;&#x9;return result;&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;}&#xA;}" />
<digital-asset id="MatReportMAEGateActivityFormat" short-description="MatReportMAEGateActivityFormat" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.road.business.model.*;&#xA;import java.util.Calendar;&#xA;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;&#xA;import com.navis.road.RoadField;&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 09/19/2012&#xA;* Description: This groovy is used to generate the Stowplan/Manifest Discrepancies after Stowplan and Manifest process&#xA;*/&#xA;&#xA;public class MatReportMAEGateActivityFormat extends GroovyInjectionBase&#xA;&#x9;{&#xA;&#x9;&#x9;/*private final String MAEemailTo = &quot;1aktosdevteam@matson.com&quot;;//&quot;Darlene.mckinley@maersk.com,Kristie.folk@maersk.com,liz.berry@maersk.com&quot;; */&#xA;private final String MAEemailTo = &quot;1aktosdevteam@matson.com&quot;; &#xA;&#x9;&#x9;//private final String MAEemailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;private String outBoundCarrierId = null&#xA;&#x9;&#x9;def inj = null;&#xA;&#x9;&#x9;String VesVoy = null;&#xA;&#x9;&#x9;String printRpt = &quot;N&quot;;&#xA;&#x9;&#x9;String inGateData = &quot;N&quot;;&#xA;&#x9;&#x9;String outGateData = &quot;N&quot;;&#xA;&#x9;&#x9;String emailBody = null;&#xA;&#xA;&#x9;public boolean execute(Map params)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;MatGetUnitDetails&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap reportDesignsmap = new HashMap();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList MAEDataList = new ArrayList();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;List trkTrans = getUnitTran(&quot;MAE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(trkTrans == null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;------------- NO REC ------------------&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}    &#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator iter = trkTrans.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def aTrans = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap gateActivityDataMap = populateReportData(aTrans)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(gateActivityDataMap != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MAEDataList.add(gateActivityDataMap);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;inGateData &quot; + inGateData +&quot; outGateData &quot; + outGateData);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (outGateData == &quot;N&quot; &amp;&amp; inGateData == &quot;N&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;emailBody =  &quot;\n \n&quot; + &quot;Note : No Ingate and Outgate activity recorded Today for MAERSK Gate&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else if (outGateData == &quot;Y&quot; &amp;&amp; inGateData == &quot;N&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;emailBody =  &quot;\n \n&quot; + &quot;Note : No Ingate activity recorded Today for MAERSK Gate&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else if (outGateData == &quot;N&quot; &amp;&amp; inGateData == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;emailBody =  &quot;\n \n&quot; + &quot;Note : No Outgate activity recorded Today for MAERSK Gate&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;emailBody = &quot;\n \n&quot; + &quot;Note : Attached Matson Client Report for MAERSK Gate&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(emailBody);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//Set Report Parameter&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;MAEDataList size is  ------- &quot;+ MAEDataList.size())&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (MAEDataList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource dsMae = new JRMapCollectionDataSource(MAEDataList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReport(dsMae, parameters, &quot;MAERSK_GATE_ACTIVITY&quot;, MAEemailTo, &quot;Matson_Client_Report - MAE&quot; ,emailBody);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;MaerskDataList ------- Success&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource dsMae = new JRMapCollectionDataSource(MAEDataList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReportWithoutAttachment(dsMae, parameters, &quot;MAERSK_GATE_ACTIVITY&quot;, MAEemailTo, &quot;Matson_Client_Report - MAE&quot; ,emailBody);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;MaerskDataList size is  ------- No Data to print&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;//Maps the SI gate data for the report&#xA;public HashMap populateReportData(Object gateTran)&#xA;    {&#xA;        HashMap map = null;&#xA;&#x9;&#x9;Object units = null;&#xA;&#x9;&#x9;String lineId = null;&#xA;&#x9;&#x9;String frightKind = &quot;MTY&quot;;&#xA;&#x9;&#x9;Double  cargoWeight = null;&#xA;&#xA;&#x9;try&#xA;&#x9;{&#xA;&#xA;&#x9;&#x9;DateFormat formatter = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);  &#xA;&#x9;&#x9;formatter.setTimeZone(TimeZone.getTimeZone(&quot;HST&quot;)); &#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Date date = new Date();&#xA;&#x9;&#x9;String runTime = formatter.format(date).substring(11,19);&#xA;&#x9;&#x9;//String runTime = date.format('h:mm a');&#xA;&#xA;&#x9;&#x9;int a = -1;&#xA;&#x9;&#x9;Calendar c = Calendar.getInstance();     &#xA;&#xA;&#x9;&#x9;c.setTime(date);     &#xA;&#x9;&#x9;c.add(Calendar.DATE,a);  &#xA;&#x9;&#x9;date.setTime( c.getTime().getTime() );&#xA;&#xA;&#x9;&#x9;String formattedDate = date.format('MM/dd/yyyy');&#xA;&#xA;&#x9;&#x9;&#x9;units = getUnit (gateTran.tranCtrNbr,gateTran.tranLineId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;String tranType = gateTran.getTranSubType().getKey();&#xA;&#x9;&#x9;&#x9;String blNbr = null;&#xA;&#xA;&#x9;&#x9;&#x9;if (tranType==&quot;DE&quot; || tranType==&quot;DI&quot; || tranType==&quot;DM&quot;) {&#xA;&#x9;&#x9;&#x9;&#x9;tranType = &quot;OUT Gate Containers&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;outGateData = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else if (tranType==&quot;RE&quot; || tranType==&quot;RI&quot; || tranType==&quot;RM&quot; || tranType==&quot;DC&quot;) {&#xA;&#x9;&#x9;&#x9;&#x9;tranType = &quot;IN Gate Containers&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;inGateData = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if (gateTran.tranCtrFreightKind.getKey() == &quot;FCL&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (units != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;blNbr = units.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;frightKind  = &quot;LOAD&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;if (gateTran.tranCtrTareWeight &lt;= 0)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//Convert KG to Lbs&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;cargoWeight = gateTran.tranCtrGrossWeight * 2.20462;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (units != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;blNbr = units.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (gateTran.tranLineId == &quot;MAE&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;lineId = &quot;MAERSK GATE ACTIVITY&quot;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Date tranDate = gateTran.tranCreated; &#xA;&#xA;&#x9;&#x9;&#x9;map = new HashMap();&#xA;&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranLineId&quot;, gateTran.tranLineId);&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranCtrNbr&quot;, gateTran.tranCtrNbr);&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranCtrTypeId&quot;, gateTran.tranCtrTypeId);&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranCtrFreightKind&quot;,frightKind)&#xA;&#x9;&#x9;&#x9;map.put(&quot;TruckingCompanyId&quot;, gateTran.tranTrkcId);&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranUnitFlexString01&quot;, formatter.format(tranDate).substring(11,19));&#xA;&#x9;&#x9;&#x9;if (units != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitInboundCarrierId&quot;, units.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;));//Inbound Vessel&#xA;&#x9;&#x9;&#x9;&#x9;map.put(&quot;TranDestination&quot;,units.getFieldValue(&quot;unitGoods.gdsDestination&quot;))//Destination&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranBlNbr&quot;,blNbr)&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranType&quot;,tranType)&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranCtrGrossWeight&quot;, cargoWeight);&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranUnitFlexString02&quot;, formattedDate);&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranUnitFlexString03&quot;, runTime);&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranUnitFlexString04&quot;, lineId);&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranUnitFlexString05&quot;, inGateData);//Ingate data flag&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranUnitFlexString06&quot;, inGateData);//Outgate data flag&#xA;&#xA;        }catch(Exception e){&#xA;&#x9;&#x9;println(&quot;Error in the report&quot;)&#xA;          e.printStackTrace();&#xA;            }&#xA;        return map;&#xA;}&#xA;&#xA;public Object getUnit(String unitId, String lineId)&#xA;&#x9;&#x9;   {&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;println(&quot;Inside getUnit&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;Long lineOpGkey = LineOperator.findLineOperatorById(lineId).bzuGkey&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Date date = new Date();&#xA;&#x9;&#x9;&#x9;String formattedDate = date.format('MM/dd/yyyy');&#xA;&#x9;&#x9;&#x9;List ufvGateUnits = null;&#xA;&#xA;&#x9;&#x9;&#x9;String startDateHST = formattedDate +&quot; &quot;+&quot;00:00:00 HST&quot;;//2012-07-19 00:00:00 HST&quot;;&#xA;&#x9;&#x9;&#x9;String endDateHST = formattedDate +&quot; &quot;+&quot;23:59:59 HST&quot;;//&quot;2012-07-19 23:59:59 HST&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;Date startDate = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss z&quot;, Locale.ENGLISH).parse(startDateHST);&#xA;&#x9;&#x9;&#x9;Date endDate = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss z&quot;, Locale.ENGLISH).parse(endDateHST);&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;);&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(InventoryField.UNIT_ID,unitId)).addDqPredicate(PredicateFactory.eq(InventoryField.UNIT_LINE_OPERATOR,lineOpGkey)).addDqPredicate(PredicateFactory.le(InventoryField.UNIT_TIME_LAST_STATE_CHANGE,endDate));&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;def unit = null;&#xA;&#xA;&#x9;&#x9;&#x9;//println(&quot;getUnit &quot;+dq);&#xA;&#x9;&#x9;&#x9;def unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println(&quot;After unitList&quot;+unitList.size());&#xA;&#x9;&#x9;&#x9;if (unitList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;return unit;&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;   }&#xA;&#xA;public List getUnitTran(String lineId)&#xA;&#x9;&#x9;   {&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;println(&quot;Inside getUnit&quot;);&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Date date = new Date();&#xA;&#xA;&#x9;&#x9;&#x9;String formattedDate = date.format('MM/dd/yyyy');&#xA;&#xA;&#x9;&#x9;&#x9;List ufvGateUnits = null;&#xA;&#xA;&#x9;&#x9;&#x9;String startDateHST = formattedDate +&quot; &quot;+&quot;00:00:00 HST&quot;;//2012-07-19 00:00:00 HST&quot;;&#xA;&#x9;&#x9;&#x9;String endDateHST = formattedDate +&quot; &quot;+&quot;23:59:59 HST&quot;;//&quot;2012-07-19 23:59:59 HST&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;Date startDate = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss z&quot;, Locale.ENGLISH).parse(startDateHST);&#xA;&#x9;&#x9;&#x9;println (&quot;PDT Start date time &quot; + startDate);&#xA;&#x9;&#x9;&#x9;Date endDate = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss z&quot;, Locale.ENGLISH).parse(endDateHST);&#xA;&#x9;&#x9;&#x9;println (&quot;PDT End date time &quot; + endDate);&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;TruckTransaction&quot;).addDqPredicate(PredicateFactory.ge(RoadField.TRAN_CREATED, startDate)).addDqPredicate(PredicateFactory.in(RoadField.TRAN_LINE_ID,lineId));//.addDqPredicate(PredicateFactory.in(RoadField.TRAN_LINE_ID,&quot;MAE&quot;,&quot;HLC&quot;,&quot;APL&quot;,&quot;ANL&quot;,&quot;HSD&quot;));//.addDqPredicate(PredicateFactory.eq(RoadField.TRAN_CTR_NBR,&quot;APZU4663320&quot;));&#xA;&#x9;&#x9;&#x9;&#xA;            println(&quot;dq---------------&quot;+dq);&#xA;            ufvGateUnits  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            println(&quot;Query executed&quot;);&#xA;            println(&quot;ufvGateUnits ::&quot;+ufvGateUnits != null ? ufvGateUnits.size() : 0) &#xA;&#xA;&#x9;&#x9;&#x9;return ufvGateUnits;&#xA;&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;   }&#xA;}" />
<digital-asset id="MatReportGateActivityFormat" short-description="MatReportGateActivityFormat" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.road.business.model.*;&#xA;import java.util.Calendar;&#xA;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;&#xA;import com.navis.road.RoadField;&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 09/19/2012&#xA;* Description: This groovy is used to generate the Stowplan/Manifest Discrepancies after Stowplan and Manifest process&#xA;*/&#xA;&#xA;public class MatReportGateActivityFormat extends GroovyInjectionBase&#xA;&#x9;{&#xA;&#x9;&#x9;private final String MAEemailTo = &quot;1aktosdevteam@matson.com&quot;; &#xA;&#x9;&#x9;private final String APLemailTo = &quot;1aktosdevteam@matson.com&quot;; &#xA;&#x9;&#x9;private final String ANLemailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;private final String HLCemailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;private final String HSDemailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;/*private final String MAEemailTo = &quot;1aktosdevteam@matson.com&quot;;//&quot;Darlene.mckinley@maersk.com,Kristie.folk@maersk.com,liz.berry@maersk.com&quot;; &#xA;&#x9;&#x9;private final String APLemailTo = &quot;1aktosdevteam@matson.com&quot;;//&quot;info.hon@nortonlilly.com,Joshua_sykes@apl.com&quot;; &#xA;&#x9;&#x9;private final String ANLemailTo = &quot;1aktosdevteam@matson.com&quot;;//&quot;usa.rbautista@cma-cgm.com,usa.sduggan@cma-cgm.com,info.hon@nortonlilly.com,Joshua_sykes@apl.com&quot;;&#xA;&#x9;&#x9;private final String HLCemailTo = &quot;1aktosdevteam@matson.com&quot;;//&quot;alloy.brownlow@hlag.com,tpa.ed@hlag.com,info.hon@nortonlilly.com,Joshua_sykes@apl.com&quot;;&#xA;&#x9;&#x9;private final String HSDemailTo = &quot;1aktosdevteam@matson.com&quot;;//&quot;mary.moyer@us.hamburgsud.com,paul.voorhees@us.hamburgsud.com,tony.anselmo@us.hamburgsud.com,info.hon@nortonlilly.com,Joshua_sykes@apl.com&quot;;&#xA;&#x9;*/&#xA;&#xA;//1TOSDevRpt@matson.com&#xA;&#x9;&#x9;private String outBoundCarrierId = null&#xA;&#x9;&#x9;def inj = null;&#xA;&#x9;&#x9;String VesVoy = null;&#xA;&#x9;&#x9;String printRpt = &quot;N&quot;;&#xA;&#x9;&#x9;String inGateData = &quot;N&quot;;&#xA;&#x9;&#x9;String outGateData = &quot;N&quot;;&#xA;&#x9;&#x9;String MAEemailBody = null;&#xA;&#x9;&#x9;String APLemailBody = null;&#xA;&#x9;&#x9;String ANLemailBody = null;&#xA;&#x9;&#x9;String HLCemailBody = null;&#xA;&#x9;&#x9;String HSDemailBody = null;&#xA;&#x9;&#x9;String emailBody = null;&#xA;&#xA;&#x9;public boolean execute(Map params)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;MatGetUnitDetails&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap reportDesignsmap = new HashMap();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList MAEDataList = new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList APLDataList = new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList ANLDataList = new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList HLCDataList = new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList HSDDataList = new ArrayList();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;List trkTrans = getUnitTran(&quot;MAE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(trkTrans == null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;------------- NO REC ------------------&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}    &#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator iter = trkTrans.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def aTrans = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap gateActivityDataMap = populateReportData(aTrans)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(gateActivityDataMap != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MAEDataList.add(gateActivityDataMap);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MAEemailBody = getEmailBody(inGateData,outGateData,&quot;MAE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;inGateData = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outGateData = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(MAEemailBody);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;trkTrans = getUnitTran(&quot;APL&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(trkTrans == null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;------------- NO REC ------------------&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}    &#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;iter = trkTrans.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def aTrans = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap gateActivityDataMap = populateReportData(aTrans)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(gateActivityDataMap != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;APLDataList.add(gateActivityDataMap);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;APLemailBody = getEmailBody(inGateData,outGateData,&quot;APL&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;inGateData = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outGateData = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(APLemailBody);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;trkTrans = getUnitTran(&quot;ANL&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(trkTrans == null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;------------- NO REC ------------------&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}    &#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;iter = trkTrans.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def aTrans = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap gateActivityDataMap = populateReportData(aTrans)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(gateActivityDataMap != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ANLDataList.add(gateActivityDataMap);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ANLemailBody = getEmailBody(inGateData,outGateData,&quot;ANL&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;inGateData = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outGateData = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(ANLemailBody);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;trkTrans = getUnitTran(&quot;HLC&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(trkTrans == null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;------------- NO REC ------------------&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}    &#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;iter = trkTrans.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def aTrans = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap gateActivityDataMap = populateReportData(aTrans)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(gateActivityDataMap != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HLCDataList.add(gateActivityDataMap);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HLCemailBody = getEmailBody(inGateData,outGateData,&quot;HLC&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;inGateData = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outGateData = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(HLCemailBody);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;trkTrans = getUnitTran(&quot;HSD&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(trkTrans == null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;------------- NO REC ------------------&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}    &#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;iter = trkTrans.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def aTrans = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap gateActivityDataMap = populateReportData(aTrans)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(gateActivityDataMap != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HSDDataList.add(gateActivityDataMap);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HSDemailBody = getEmailBody(inGateData,outGateData,&quot;HSD&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(HSDemailBody);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//Set Report Parameter&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;MAEDataList size is  ------- &quot;+ MAEDataList.size())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;APLDataList size is  ------- &quot;+ APLDataList.size())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;ANLDataList size is  ------- &quot;+ ANLDataList.size())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;HLCDataList size is  ------- &quot;+ HLCDataList.size())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;HSDDataList size is  ------- &quot;+ HSDDataList.size())&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (MAEDataList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource dsMae = new JRMapCollectionDataSource(MAEDataList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReport(dsMae, parameters, &quot;MAERSK_GATE_ACTIVITY&quot;, MAEemailTo, &quot;Matson_Client_Report - MAE&quot; ,MAEemailBody);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource dsMae = new JRMapCollectionDataSource(MAEDataList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReportWithoutAttachment(dsMae, parameters, &quot;MAERSK_GATE_ACTIVITY&quot;, MAEemailTo, &quot;Matson_Client_Report - MAE&quot; ,MAEemailBody);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Maresk Gate Report  ------- No Data to print&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (APLDataList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource dsApl = new JRMapCollectionDataSource(APLDataList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReport(dsApl, parameters, &quot;APL_GATE_ACTIVITY&quot;, APLemailTo, &quot;Matson_Client_Report - APL&quot; ,APLemailBody);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource dsApl = new JRMapCollectionDataSource(APLDataList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReportWithoutAttachment(dsApl, parameters, &quot;APL_GATE_ACTIVITY&quot;, APLemailTo, &quot;Matson_Client_Report - APL&quot; ,APLemailBody);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;APL Gate Report  ------- No Data to print&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (ANLDataList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource dsAnl = new JRMapCollectionDataSource(ANLDataList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReport(dsAnl, parameters, &quot;ANL_GATE_ACTIVITY&quot;, ANLemailTo, &quot;Matson_Client_Report - ANL&quot; ,ANLemailBody);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource dsAnl = new JRMapCollectionDataSource(ANLDataList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReportWithoutAttachment(dsAnl, parameters, &quot;ANL_GATE_ACTIVITY&quot;, ANLemailTo, &quot;Matson_Client_Report - ANL&quot; ,ANLemailBody);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;ANL Gate Report  ------- No Data to print&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (HLCDataList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource dsHlc = new JRMapCollectionDataSource(HLCDataList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReport(dsHlc, parameters, &quot;HAPAG_LLOYD_GATE_ACTIVITY&quot;, HLCemailTo, &quot;Matson_Client_Report - HLC&quot; ,HLCemailBody);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource dsHlc = new JRMapCollectionDataSource(HLCDataList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReportWithoutAttachment(dsHlc, parameters, &quot;HAPAG_LLOYD_GATE_ACTIVITY&quot;, HLCemailTo, &quot;Matson_Client_Report - HLC&quot; ,HLCemailBody);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Hapag Lloyd Sud Gate Report  ------- No Data to print&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (HSDDataList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource dsHsd = new JRMapCollectionDataSource(HSDDataList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReport(dsHsd, parameters, &quot;HAMBURG_SUD_GATE_ACTIVITY&quot;, HSDemailTo, &quot;Matson_Client_Report - HSD&quot; ,HSDemailBody);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;JRDataSource dsHsd = new JRMapCollectionDataSource(HSDDataList);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailReportWithoutAttachment(dsHsd, parameters, &quot;HAMBURG_SUD_GATE_ACTIVITY&quot;, HSDemailTo, &quot;Matson_Client_Report - HSD&quot; ,HSDemailBody);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Hapag Lloyd Sud Gate Report  ------- No Data to print&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;public String getEmailBody (String inGateFlag, String outGateFlag, String lineId)&#xA;&#x9;{&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;String lineOptr = null;&#xA;&#x9;&#x9;&#x9;String emailBody = null;&#xA;&#x9;&#x9;&#x9;if (lineId == &quot;MAE&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;lineOptr = &quot;MAERSK Gate&quot;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else if (lineId == &quot;ANL&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;lineOptr = &quot;ANL Gate&quot;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else if (lineId == &quot;HLC&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;lineOptr = &quot;HAPAG LLOYD Gate&quot;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else if (lineId == &quot;APL&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;lineOptr = &quot;APL Gate&quot;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else if (lineId == &quot;HSD&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;lineOptr = &quot;HAMBURG SUD Gate&quot;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (outGateFlag == &quot;N&quot; &amp;&amp; inGateFlag == &quot;N&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;emailBody =  &quot;\n \n&quot; + &quot;Note : No Ingate and Outgate activity recorded Yesterday for &quot; + lineOptr;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else if (outGateFlag == &quot;Y&quot; &amp;&amp; inGateFlag == &quot;N&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;emailBody =  &quot;\n \n&quot; + &quot;Note : No Ingate activity recorded Yesterday for &quot; + lineOptr;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else if (outGateFlag == &quot;N&quot; &amp;&amp; inGateFlag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;emailBody =  &quot;\n \n&quot; + &quot;Note : No Outgate activity recorded Yesterday for &quot; + lineOptr;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;emailBody = &quot;\n \n&quot; + &quot;Note : Attached Matson Client Report for &quot; + lineOptr;&#xA;&#x9;&#x9;&#x9;}&#xA;        return emailBody;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;println(&quot;Error in the report&quot;)&#xA;          e.printStackTrace();&#xA;            }&#xA;&#x9;}&#xA;&#xA;//Maps the SI gate data for the report&#xA;public HashMap populateReportData(Object gateTran)&#xA;    {&#xA;        HashMap map = null;&#xA;&#x9;&#x9;Object units = null;&#xA;&#x9;&#x9;String lineId = null;&#xA;&#x9;&#x9;String frightKind = &quot;MTY&quot;;&#xA;&#x9;&#x9;Double  cargoWeight = null;&#xA;&#xA;&#x9;try&#xA;&#x9;{&#xA;&#xA;&#x9;&#x9;DateFormat formatter = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);  &#xA;&#x9;&#x9;formatter.setTimeZone(TimeZone.getTimeZone(&quot;HST&quot;)); &#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Date date = new Date();&#xA;&#x9;&#x9;String runTime = formatter.format(date).substring(11,19);&#xA;&#x9;&#x9;//String runTime = date.format('h:mm a');&#xA;&#xA;&#x9;&#x9;int a = -1;&#xA;&#x9;&#x9;Calendar c = Calendar.getInstance();     &#xA;&#xA;&#x9;&#x9;c.setTime(date);     &#xA;&#x9;&#x9;c.add(Calendar.DATE,a);  &#xA;&#x9;&#x9;date.setTime( c.getTime().getTime() );&#xA;&#xA;&#x9;&#x9;String formattedDate = date.format('MM/dd/yyyy');&#xA;&#xA;&#x9;&#x9;&#x9;units = getUnit (gateTran.tranCtrNbr,gateTran.tranLineId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;String tranType = gateTran.getTranSubType().getKey();&#xA;&#x9;&#x9;&#x9;String blNbr = null;&#xA;&#xA;&#x9;&#x9;&#x9;if (tranType==&quot;DE&quot; || tranType==&quot;DI&quot; || tranType==&quot;DM&quot;) {&#xA;&#x9;&#x9;&#x9;&#x9;tranType = &quot;OUT Gate Containers&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;outGateData = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else if (tranType==&quot;RE&quot; || tranType==&quot;RI&quot; || tranType==&quot;RM&quot; || tranType==&quot;DC&quot;) {&#xA;&#x9;&#x9;&#x9;&#x9;tranType = &quot;IN Gate Containers&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;inGateData = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if (gateTran.tranCtrFreightKind.getKey() == &quot;FCL&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (units != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;blNbr = units.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;frightKind  = &quot;LOAD&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;if (gateTran.tranCtrTareWeight &lt;= 0)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//Convert KG to Lbs&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;cargoWeight = gateTran.tranCtrGrossWeight * 2.20462;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (units != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;blNbr = units.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (gateTran.tranLineId == &quot;MAE&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;lineId = &quot;MAERSK GATE ACTIVITY&quot;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else if (gateTran.tranLineId == &quot;ANL&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;lineId = &quot;ANL GATE ACTIVITY&quot;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else if (gateTran.tranLineId == &quot;HLC&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;lineId = &quot;HAPAG LLOYD GATE REPORT&quot;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else if (gateTran.tranLineId == &quot;APL&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;lineId = &quot;APL GATE REPORT&quot;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else if (gateTran.tranLineId == &quot;HSD&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;lineId = &quot;HAMBURG SUD GATE REPORT&quot;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;Date tranDate = gateTran.tranCreated; &#xA;&#xA;&#x9;&#x9;&#x9;map = new HashMap();&#xA;&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranLineId&quot;, gateTran.tranLineId);&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranCtrNbr&quot;, gateTran.tranCtrNbr);&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranCtrTypeId&quot;, gateTran.tranCtrTypeId);&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranCtrFreightKind&quot;,frightKind)&#xA;&#x9;&#x9;&#x9;map.put(&quot;TruckingCompanyId&quot;, gateTran.tranTrkcId);&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranUnitFlexString01&quot;, formatter.format(tranDate).substring(11,19));&#xA;&#x9;&#x9;&#x9;if (units != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitInboundCarrierId&quot;,units.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;));//Inbound Vessel&#xA;&#x9;&#x9;&#x9;&#x9;map.put(&quot;TranDestination&quot;,units.getFieldValue(&quot;unitGoods.gdsDestination&quot;))//Destination&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranBlNbr&quot;,blNbr)&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranType&quot;,tranType)&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranCtrGrossWeight&quot;, cargoWeight);&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranUnitFlexString02&quot;, formattedDate);&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranUnitFlexString03&quot;, runTime);&#xA;&#x9;&#x9;&#x9;map.put(&quot;TranUnitFlexString04&quot;, lineId);&#xA;&#xA;        }catch(Exception e){&#xA;&#x9;&#x9;println(&quot;Error in the report&quot;)&#xA;          e.printStackTrace();&#xA;            }&#xA;        return map;&#xA;}&#xA;&#xA;public Object getUnit(String unitId, String lineId)&#xA;&#x9;&#x9;   {&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;println(&quot;Inside getUnit&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;Long lineOpGkey = LineOperator.findLineOperatorById(lineId).bzuGkey&#xA;&#xA;&#x9;&#x9;&#x9;Date date = new Date();&#xA;&#x9;&#x9;&#x9;int a = -1;&#xA;&#x9;&#x9;&#x9;Calendar c = Calendar.getInstance();     &#xA;&#xA;&#x9;&#x9;&#x9;c.setTime(date);     &#xA;&#x9;&#x9;&#x9;c.add(Calendar.DATE,a);  &#xA;&#x9;&#x9;&#x9;date.setTime( c.getTime().getTime() );&#xA;&#xA;&#x9;&#x9;&#x9;String formattedDate = date.format('MM/dd/yyyy');&#xA;&#xA;&#x9;&#x9;&#x9;List ufvGateUnits = null;&#xA;&#xA;&#x9;&#x9;&#x9;String startDateHST = formattedDate +&quot; &quot;+&quot;00:00:00 HST&quot;;//2012-07-19 00:00:00 HST&quot;;&#xA;&#x9;&#x9;&#x9;String endDateHST = formattedDate +&quot; &quot;+&quot;23:59:59 HST&quot;;//&quot;2012-07-19 23:59:59 HST&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;Date startDate = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss z&quot;, Locale.ENGLISH).parse(startDateHST);&#xA;&#x9;&#x9;&#x9;Date endDate = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss z&quot;, Locale.ENGLISH).parse(endDateHST);&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;);&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(InventoryField.UNIT_ID,unitId))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(InventoryField.UNIT_LINE_OPERATOR,lineOpGkey))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.le(InventoryField.UNIT_TIME_LAST_STATE_CHANGE,endDate));&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;def unit = null;&#xA;&#xA;&#x9;&#x9;&#x9;//println(&quot;getUnit &quot;+dq);&#xA;&#x9;&#x9;&#x9;def unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;//println(&quot;After unitList&quot;+unitList.size());&#xA;&#x9;&#x9;&#x9;if (unitList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit = iterUnitList.next();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;return unit;&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;   }&#xA;&#xA;public List getUnitTran(String lineId)&#xA;&#x9;&#x9;   {&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;println(&quot;Inside getUnit&quot;);&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Date date = new Date();&#xA;&#x9;&#x9;&#x9;int a = -1;&#xA;&#x9;&#x9;&#x9;Calendar c = Calendar.getInstance();     &#xA;&#xA;&#x9;&#x9;&#x9;c.setTime(date);     &#xA;&#x9;&#x9;&#x9;c.add(Calendar.DATE,a);  &#xA;&#x9;&#x9;&#x9;date.setTime( c.getTime().getTime() );&#xA;&#xA;&#x9;&#x9;&#x9;String formattedDate = date.format('MM/dd/yyyy');&#xA;&#xA;&#x9;&#x9;&#x9;List ufvGateUnits = null;&#xA;&#xA;&#x9;&#x9;&#x9;String startDateHST = formattedDate +&quot; &quot;+&quot;00:00:00 HST&quot;;//2012-07-19 00:00:00 HST&quot;;&#xA;&#x9;&#x9;&#x9;String endDateHST = formattedDate +&quot; &quot;+&quot;23:59:59 HST&quot;;//&quot;2012-07-19 23:59:59 HST&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;Date startDate = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss z&quot;, Locale.ENGLISH).parse(startDateHST);&#xA;&#x9;&#x9;&#x9;println (&quot;PDT Start date time &quot; + startDate);&#xA;&#x9;&#x9;&#x9;Date endDate = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss z&quot;, Locale.ENGLISH).parse(endDateHST);&#xA;&#x9;&#x9;&#x9;println (&quot;PDT End date time &quot; + endDate);&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;TruckTransaction&quot;).addDqPredicate(PredicateFactory.ge(RoadField.TRAN_CREATED, startDate)).addDqPredicate(PredicateFactory.in(RoadField.TRAN_LINE_ID,lineId)).addDqPredicate(PredicateFactory.le(RoadField.TRAN_CREATED, endDate));//.addDqPredicate(PredicateFactory.in(RoadField.TRAN_LINE_ID,&quot;MAE&quot;,&quot;HLC&quot;,&quot;APL&quot;,&quot;ANL&quot;,&quot;HSD&quot;));//.addDqPredicate(PredicateFactory.eq(RoadField.TRAN_CTR_NBR,&quot;APZU4663320&quot;));&#xA;&#x9;&#x9;&#x9;//&#x9;.addDqPredicate(PredicateFactory.le(RoadField.TRAN_CREATED, endDate)).addDqPredicate(PredicateFactory.eq(RoadField.TRAN_LINE_ID,&quot;APL&quot;));//.addDqPredicate(PredicateFactory.in(RoadField.TRAN_LINE_ID,&quot;MAE&quot;,&quot;HLC&quot;,&quot;APL&quot;,&quot;ANL&quot;,&quot;HSD&quot;));//.addDqPredicate(PredicateFactory.eq(RoadField.TRAN_CTR_NBR,&quot;APZU4663320&quot;));&#xA;&#x9;&#x9;&#x9;//DomainQuery dq = QueryUtils.createDomainQuery(&quot;TruckTransaction&quot;).addDqPredicate(PredicateFactory.eq(RoadField.TRAN_CTR_NBR, &quot;MRKU2808305&quot;)).addDqPredicate(PredicateFactory.eq(RoadField.TRAN_LINE_ID, &quot;MAE&quot;));.addDqPredicate(PredicateFactory.eq(RoadField.TRAN_LINE_ID, &quot;HLC&quot;));//&#xA;&#x9;&#x9;&#x9;&#xA;            println(&quot;dq---------------&quot;+dq);&#xA;            ufvGateUnits  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            println(&quot;Query executed&quot;);&#xA;            println(&quot;ufvGateUnits ::&quot;+ufvGateUnits != null ? ufvGateUnits.size() : 0) &#xA;&#xA;&#x9;&#x9;&#x9;return ufvGateUnits;&#xA;&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;   }&#xA;}" />
<digital-asset id="MATFinalCheckNewVesComplete" short-description="MATFinalCheckNewVesComplete" is-pre-deployed="N" groovy-code="import java.util.List;&#xA; &#xA;import com.navis.argo.ContextHelper&#xA; &#xA;import com.navis.argo.business.api.ArgoUtils&#xA; &#xA;import com.navis.argo.business.api.GroovyApi&#xA; &#xA;import com.navis.framework.portal.UserContext&#xA; &#xA;import com.navis.inventory.business.units.Unit&#xA; &#xA;import com.navis.services.business.event.GroovyEvent&#xA; &#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA; &#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA; &#xA;import com.navis.argo.business.model.CarrierVisit          &#xA;&#xA;import java.sql.Connection&#xA; &#xA;import java.sql.ResultSet&#xA; &#xA;import java.util.ArrayList&#xA; &#xA;import com.navis.argo.business.atoms.EventEnum&#xA; &#xA;import com.navis.services.business.api.EventManager&#xA; &#xA;import com.navis.services.business.rules.EventType&#xA; &#xA;import com.navis.framework.business.Roastery&#xA; &#xA; &#xA; &#xA; &#xA;/* EP000220294 dkannadasan Feb 18 2015 - Code to prevent NewVes complete if any errors pending to be corrected */ &#xA;public class MATFinalCheckNewVesComplete extends GroovyApi {&#xA; &#xA;                &#xA;&#xA;def inj = new GroovyInjectionBase();&#xA; &#xA;def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;);&#xA; &#xA;List errors = null;&#xA; &#xA;Boolean canProceed = Boolean.TRUE;&#xA; &#xA;HashMap errorsData = null;&#xA; &#xA; &#xA; &#xA;public Boolean execute(GroovyEvent event, Object api)  {&#xA; &#xA;                // get vessel voyage id of the unit&#xA; &#xA;                Unit unit = (Unit) event.getEntity();&#xA; &#xA;                UnitFacilityVisit ufv = unit.getUnitActiveUfvNowActive();&#xA; &#xA;                CarrierVisit cv = ufv.getInboundCarrierVisit();&#xA; &#xA;                String vesVoy = cv.getCvId();&#xA; &#xA;                // vesVoy = &quot;MHI289&quot;;&#xA; &#xA;                ResultSet rs = null;&#xA; &#xA;                 ArrayList reportGenRefList =  new ArrayList();&#xA; &#xA; &#xA; &#xA;                // get a connection to TDP database source&#xA; &#xA;                try {&#xA; &#xA;                        def GvyRefDataLookup = inj.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;);&#xA; &#xA;                        Connection conn;&#xA; &#xA;                                try {&#xA; &#xA;                                conn = GvyRefDataLookup.connect();&#xA; &#xA;                                rs = GvyRefDataLookup.getTdpNewVesErrorData(vesVoy,conn);&#xA; &#xA;                                if(rs!=null){&#xA; &#xA;                while (rs.next()) {&#xA; &#xA;                errorsData = new HashMap();&#xA; &#xA;                errorsData.put(&quot;ERROR_ID&quot;,rs.getString(&quot;ERROR_MESSAGE_ID&quot;));&#xA; &#xA;                errorsData.put(&quot;ERROR_TYPE&quot;,rs.getString(&quot;ERROR_TYPE&quot;));&#xA; &#xA;                errorsData.put(&quot;ERROR_DESC&quot;,rs.getString(&quot;ERROR_DESC&quot;));&#xA; &#xA;                errorsData.put(&quot;VESVOY&quot;,rs.getString(&quot;VESVOY&quot;));&#xA; &#xA;println(&quot;errorsData:::&quot;+errorsData);&#xA; &#xA;                reportGenRefList.add(errorsData);&#xA; &#xA;                }&#xA; &#xA;                }                                                              &#xA;&#xA;                                } finally {&#xA; &#xA;                                GvyRefDataLookup.disconnect(conn);                                                  &#xA; &#xA;                                }&#xA; &#xA; &#xA; &#xA;                }&#xA; &#xA;                                &#xA;&#xA;                catch (e)&#xA; &#xA;                {&#xA; &#xA;                                                                &#xA;&#xA;                }&#xA; &#xA;                &#xA;&#xA;                                &#xA;&#xA;                // if there are errors, then send notification email and return false;&#xA; &#xA;                 if(reportGenRefList!=null &amp;&amp; reportGenRefList.size()&gt;0) {&#xA; &#xA;                canProceed = Boolean.FALSE;&#xA; &#xA;                // record a NEWVES_COMPLETE_FAILED service event&#xA; &#xA;                EventManager sem = (EventManager) Roastery.getBean(EventManager.BEAN_ID);&#xA; &#xA;                EventType eventType = EventType.findEventType(&quot;NEWVES_COMPLETE_FAILED&quot;);&#xA; &#xA;                unit.recordUnitEvent(eventType, null, &quot;Fix pending SN4 Errors before applying NEWVES_COMPLETED&quot;);&#xA; &#xA;                // send email&#xA; &#xA;                String emaiBody = &quot;NewVes process for &quot;+vesVoy+&quot; cannot be completed as  &quot;+reportGenRefList.size()+&quot; errors are pending to be corrected\n\n&quot;;&#xA; &#xA;                &#xA;&#xA;                &#xA;&#xA;                for (HashMap error : reportGenRefList)&#xA; &#xA;                {&#xA; &#xA;                                emaiBody +=error.get(&quot;ERROR_DESC&quot;);&#xA; &#xA;                                emaiBody +=&quot;\n\n&quot;;&#xA; &#xA;                }&#xA; &#xA;                emailSender.custSendEmail( &quot;1aktosdevteam@matson.com&quot;,  &quot;1aktosdevteam@matson.com&quot;, &quot;Error : NewVes cannot be completed for &quot;+vesVoy,emaiBody );&#xA; &#xA;                return canProceed;&#xA; &#xA;                }&#xA; &#xA;                                &#xA;&#xA;return canProceed;&#xA; &#xA;}&#xA; &#xA; &#xA; &#xA;}&#xA;" />
<digital-asset id="MatReportCustomsRadiationMonitorCY" short-description="MatReportCustomsRadiationMonitorCY" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.road.business.model.*;&#xA;import java.util.Calendar;&#xA;import java.util.List;&#xA;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 04/19/2013&#xA;* Description: This groovy is used to generate the CMC yard report&#xA;*/&#xA;&#xA;public class MatReportCustomsRadiationMonitorCY extends GroovyInjectionBase&#xA;&#x9;{&#xA;&#x9;    private final String  emailFrom = '1aktosdevteam@matson.com';&#xA;&#x9;&#x9;private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;//private final String emailTo = &quot;1aktosdevteam@matson.com;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;def inj = null;&#xA;&#xA;&#x9;public boolean execute(Map params)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;List unitList = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ArrayList reportUnitList =  new ArrayList();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitList = getUnits();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;unitList.size()&quot;+unitList.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator unitIterator = unitList.iterator(); &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while(unitIterator.hasNext()) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = unitIterator.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;HashMap unitsDataMap = populateUnitData(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(unitsDataMap != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportUnitList.add(unitsDataMap);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList -------------------- :&quot;+ (reportUnitList != null ? reportUnitList.size() : &quot;EMPTY&quot;))   &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//Set Report Parameter&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (reportUnitList.size() &gt; 0) {&#xA;                        HashMap parameters = new HashMap();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;    //Create and Mail Report&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;    def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;    reportRunner.emailCsvPDFReports(reportUnitList, parameters,&quot;CUSTOMS RADIATION MONITOR FOR CY&quot;, emailTo, &quot;CUSTOMS RADIATION MONITOR FOR CY&quot; ,&quot;Attached report for CUSTOMS RADIATION MONITOR FOR CY&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;    println(&quot;reportUnitList ------- Success&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;    println(&quot;reportUnitList ------- No data to print&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;                return true;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#xA;&#xA;//1.Maps unit Data to report file attribute&#xA;public HashMap populateUnitData(Object unit)&#xA;    {&#xA;        HashMap map = null;&#xA;        try&#xA;        {&#xA;&#x9;&#x9;String unitId =  unit.unitId;&#xA;        String equipType =  unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;);&#xA;        if ((unitId.startsWith(&quot;\$&quot;)) || (equipType.startsWith(&quot;C&quot;)))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;return map;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else{&#xA;&#xA;&#x9;&#x9;def transitState = unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;);&#xA;&#x9;&#x9;transitState = transitState != null ? transitState.getKey() : '';&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;transitState = transitState == &quot;S40_YARD&quot; ? &quot;Yard&quot; : &quot;&quot;;&#xA;&#xA;&#x9;&#x9;//println(&quot;unitId ::&quot;+unitId);&#xA;&#xA;&#x9;&#x9;map = new HashMap();&#xA;&#xA;        map.put(&quot;UnitNbr&quot;, unit.getFieldValue(&quot;unitId&quot;));&#xA;        map.put(&quot;InboundCarrierId&quot;, unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;));&#xA;&#x9;&#x9;map.put(&quot;PositionSlot&quot;,unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;));&#xA;        map.put(&quot;EquipmentType&quot;, unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypId&quot;));&#xA;&#x9;&#x9;map.put(&quot;GoodsConsigneeName&quot;,unit.getFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;));&#xA;&#xA;&#xA;&#x9;&#x9;}&#xA;        }catch(Exception e){&#xA;&#x9;&#x9;    println(&quot;Error in the report&quot;);&#xA;            e.printStackTrace();&#xA;        }&#xA;        return map;&#xA;    }&#xA;&#xA;public List getUnits() {&#xA;&#xA;&#x9;&#x9;try {&#xA;&#xA;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.in(UnitField.UFV_TRANSIT_STATE,&quot;S40_YARD&quot;));&#xA;            //dq.addDqPredicate(PredicateFactory.in(UnitField.UNIT_IMPEDIMENT_ROAD,&quot;RM&quot;));&#xA;&#xA;            println(&quot;DomainQuery :::: &quot;+ dq);&#xA;&#x9;&#x9;&#x9;def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println(&quot;After unitList&quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;if(unit.getFieldValue(&quot;unitVisitState&quot;).equals(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE) &amp;&amp;&#xA;                    (unit.getFieldValue(&quot;unitAppliedHoldOrPermName&quot;) != null &amp;&amp; unit.getFieldValue(&quot;unitAppliedHoldOrPermName&quot;).contains(&quot;RM&quot;))) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;units.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;  }&#xA;&#x9;&#x9;&#x9;println(&quot;unitsSize&quot; + units.size);&#xA;            return units;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;    }&#xA;}&#xA;}" />
<digital-asset id="MATProcessNewVess" short-description="MATProcessNewVess" is-pre-deployed="N" groovy-code="import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.atoms.EquipMaterialEnum&#xA;import com.navis.argo.business.atoms.FlagStatusEnum&#xA;import com.navis.argo.business.atoms.FlagPurposeEnum;&#xA;import com.navis.argo.business.atoms.FreightKindEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.services.business.rules.ServiceImpediment&#xA;import org.apache.log4j.Logger&#xA;import java.text.SimpleDateFormat&#xA;import javax.jms.JMSException&#xA;import javax.jms.Session&#xA;import javax.jms.Connection&#xA;import javax.jms.ConnectionFactory&#xA;import javax.jms.MessageProducer&#xA;import javax.jms.Destination&#xA;import javax.naming.Context&#xA;import javax.naming.InitialContext&#xA;import javax.jms.TextMessage&#xA;import javax.jms.*&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.reference.Group;&#xA;import com.navis.inventory.business.units.Routing;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import com.navis.services.business.event.*&#xA;import java.sql.Connection;&#xA;import java.sql.PreparedStatement;&#xA;import java.sql.ResultSet;&#xA;import javax.sql.DataSource;&#xA;import javax.naming.Context;&#xA;import javax.naming.InitialContext;&#xA;import org.apache.activemq.ActiveMQConnectionFactory;&#xA;import java.text.DateFormat;&#xA;&#xA;&#xA;/*&#xA;&#xA;Date Written: 07/06/2012&#xA;Author: Siva Raja&#xA;Description: Groovy to extract unit details based on ane event recorded and send xml data to MNS application using JMS.&#xA;  /*&#xA;   - &lt;unit snx-update-note=&quot;NewVes Holds:(CUS,CAR,RM)&quot; line=&quot;MAE&quot; freight-kind=&quot;FCL&quot; category=&quot;THROUGH&quot; id=&quot;PONU2897259&quot;&gt;&#xA;- &lt;equipment role=&quot;PRIMARY&quot; eq-flex-01=&quot;CLIENT&quot; material=&quot;UNKNOWN&quot; operator=&quot;MAE&quot; owner=&quot;MAEU&quot; strength-code=&quot;TM&quot; height-mm=&quot;2590&quot; tare-kg=&quot;1823.44&quot; type=&quot;R20&quot; class=&quot;CTR&quot; eqid=&quot;PONU2897259&quot;&gt;&#xA;  &lt;damages /&gt;&#xA;  &lt;/equipment&gt;&#xA;  &lt;position slot=&quot;350384&quot; location=&quot;CBL280&quot; loc-type=&quot;VESSEL&quot; /&gt;&#xA;- &lt;routing destination=&quot;LAX&quot; opl=&quot;TRG&quot; pod-1=&quot;LAX&quot; pol=&quot;TRG&quot;&gt;&#xA;  &lt;carrier id=&quot;CBL280&quot; facility=&quot;HON&quot; mode=&quot;VESSEL&quot; qualifier=&quot;DECLARED&quot; direction=&quot;IB&quot; /&gt;&#xA;  &lt;carrier id=&quot;CBL280&quot; facility=&quot;HON&quot; mode=&quot;VESSEL&quot; qualifier=&quot;ACTUAL&quot; direction=&quot;IB&quot; /&gt;&#xA;  &lt;carrier id=&quot;CBL280&quot; facility=&quot;HON&quot; mode=&quot;VESSEL&quot; qualifier=&quot;DECLARED&quot; direction=&quot;OB&quot; /&gt;&#xA;  &lt;carrier id=&quot;CBL280&quot; facility=&quot;HON&quot; mode=&quot;VESSEL&quot; qualifier=&quot;ACTUAL&quot; direction=&quot;OB&quot; /&gt;&#xA;  &lt;/routing&gt;&#xA;  &lt;reefer temp-display-unit=&quot;C&quot; temp-reqd-c=&quot;-20.00&quot; /&gt;&#xA;  &lt;handling remark=&quot;NO MNFST INFO&quot; /&gt;&#xA;  &lt;contents commodity-name=&quot;CUSTOMS&quot; commodity-id=&quot;CUS&quot; bl-nbr=&quot;&quot; weight-kg=&quot;21998.33&quot; /&gt;&#xA;- &lt;flags&gt;&#xA;  &lt;hold id=&quot;CUS&quot; /&gt;&#xA;  &lt;hold id=&quot;CAR&quot; /&gt;&#xA;  &lt;hold id=&quot;RM&quot; /&gt;&#xA;  &lt;/flags&gt;&#xA;  &lt;unit-etc requires-power=&quot;Y&quot; /&gt;&#xA;  &lt;/unit&gt;&#xA;  */&#xA;&#xA;public class  MATProcessNewVess extends GroovyApi {&#xA;&#xA;&#x9;UserContext context = ContextHelper.getThreadUserContext();&#xA;&#x9;Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#x9;String startDate = null;&#xA;&#x9;String endDate = null;&#xA;&#xA;&#x9;private static final String XML_OVERRIDE = &quot;\&quot;&quot;;&#xA;&#x9;private static final String honFacility = &quot;ANK&quot;;&#xA;&#x9;private static final String XML_END_ELEMENT = &quot;/&gt;&quot;;&#xA;&#x9;private static final String queueName = &quot;jms.tos.newvess.inbound&quot;;&#xA;    private static final String url = &quot;tcp://10.201.1.79:61616&quot;;//Prod&#xA;&#x9;private static final String topicName = &quot;jms.topic.tdp.newVesselHon&quot;;&#xA;&#xA;&#x9;def inj = new GroovyInjectionBase();&#xA;&#x9;int pos&#xA;&#x9;private String addNode = &quot;Y&quot;;&#xA;&#xA;  &#x9;private final String  emailFrom = '1aktosdevteam@matson.com'&#xA;  &#x9;private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#xA;&#x9;Integer totalContainers = 0;&#xA;&#xA;&#xA;  public void execute(Unit tempUnit)&#xA;  {&#xA;    LOGGER.warn(&quot;MATProcessNewVess started&quot; + timeNow);&#xA;&#x9;DateFormat dateFormat = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss&quot;);&#xA;&#x9;Date date = new Date();&#xA;&#x9;startDate = dateFormat.format(date);&#xA;&#xA;    if (tempUnit == null){&#xA;      LOGGER.warn (&quot; Unit is null&quot;);&#xA;      return;&#xA;    }&#xA;    UnitFacilityVisit ufv = tempUnit.getUnitActiveUfvNowActive();&#xA;    if (ufv == null){&#xA;      LOGGER.warn (&quot; Unit facility is null&quot;);&#xA;      return;&#xA;    }&#xA;    CarrierVisit cv = ufv.getInboundCarrierVisit();&#xA;&#xA;&#x9;List unitListForUpdate = this.getUnitListInCvForUpdate(cv);&#xA;&#x9;if (unitListForUpdate.isEmpty()) {&#xA;      LOGGER.warn (&quot;No Units in CV for update&quot;);&#xA;      return;&#xA;    }&#xA;&#xA;&#x9;LOGGER.warn(&quot;unitListForUpdate.size&quot; + unitListForUpdate.size);&#xA;&#x9;LOGGER.warn(&quot;unitListForUpdate Start&quot;);&#xA;&#x9;Iterator iter = unitListForUpdate.iterator();&#xA;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;def units = iter.next();&#xA;&#x9;&#x9;LOGGER.warn (&quot;BLNumberInit &quot; + units.unitId +&quot; --- &quot;+ units.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;));&#xA;&#x9;&#x9;def BLNumber=units.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;);&#xA;            //if(BLNumber.startsWith(&quot;Testing&quot;)) {&#xA;&#x9;&#x9;if (BLNumber != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if(BLNumber.startsWith(&quot;DO NOT EDIT - WAIT FOR NEWVES&quot;)) {&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn (&quot;InBL Number &quot; + units.unitId +&quot; --- &quot;+ units.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;units.setFieldValue(&quot;unitGoods.gdsBlNbr&quot;, null);&#xA;            }&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//units.setFieldValue(&quot;unitGoods.gdsBlNbr&quot;, &quot;DO NOT EDIT - WAIT FOR NEWVES&quot;);&#xA;&#x9;&#x9;LOGGER.warn (&quot;BLNumber &quot; + units.unitId +&quot; --- &quot;+ units.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;));&#xA;           }&#xA;&#x9;LOGGER.warn(&quot;unitListForUpdate End &quot; + cv);&#xA;&#xA;    List unitList = this.getUnitListInCv(cv);&#xA;    if (unitList.isEmpty()) {&#xA;      LOGGER.warn (&quot;No Units in CV&quot;);&#xA;      return;&#xA;    }&#xA;&#xA;&#x9;try&#xA;&#x9;{&#xA;&#x9;&#x9;println(&quot;buildXmlElement Start &quot; + cv);&#xA;&#x9;&#x9;LOGGER.warn(&quot;buildXmlElement Start &quot; + cv);&#xA;&#x9;&#x9;String vesVoy = cv;&#xA;&#x9;&#x9;StringBuffer xml = this.buildXmlElement(unitList, cv);&#xA;&#x9;&#x9;LOGGER.warn(&quot;CLIENT_XML &quot;+xml.toString());&#xA;&#x9;&#x9;println(&quot;CLIENT_XML &quot;+xml.toString());&#xA;&#x9;&#x9;date = new Date();&#xA;&#x9;&#x9;endDate = dateFormat.format(date);&#xA;&#xA;&#x9;&#x9;def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;&#x9;&#x9;if ((xml.toString() != &quot;null&quot;) || xml.toString().length() &gt; 4)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//Send the Complete XML string to MNS application using JMS queue.&#xA;&#x9;&#x9;&#x9;this.send(xml.toString());&#xA;&#x9;&#x9;&#x9;this.topicSend(xml.toString());&#xA;&#xA;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo,&quot;Client Vessel Notification for &quot;+cv+&quot; Count : &quot;+totalContainers,&quot;Clent vessel completed for &quot;+cv+ &quot; Count : &quot;+totalContainers+&quot; , xml posted to MNS application&quot;);&#xA;&#x9;&#x9;&#x9;println(&quot;CLIENT_VESSEL_STATUS: Clent vessel completed for &quot;+cv+ &quot; , xml posted to MNS application&quot;);&#xA;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;def GvyRefDataLookup = inj.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;Connection conn;&#xA;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;conn = GvyRefDataLookup.connect();&#xA;&#x9;&#x9;&#x9;&#x9;GvyRefDataLookup.insertTdpLogData(vesVoy,&quot;NV&quot;,startDate,endDate,&quot;Processed&quot;,conn);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;GvyRefDataLookup.insertTdpLogData Calling&quot;);&#xA;&#x9;&#x9;&#x9;} finally {&#xA;&#x9;&#x9;&#x9;&#x9;GvyRefDataLookup.disconnect(conn);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;GvyRefDataLookup.insertTdpLogData Ended&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;catch (e)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Error :::::::::::::::::::::::::::::::::::: GvyRefDataLookup.insertTdpLogData Ended &quot; + e);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else{&#xA;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo,&quot;Client Vessel Notification for &quot;+cv +&quot;,Clent vessel completed, xml has not been posted to MNS application due to error in data&quot;);&#xA;&#x9;&#x9;&#x9;println(&quot;CLIENT_VESSEL_STATUS: Client Vessel Notification for &quot;+cv+&quot;,Clent vessel completed, xml has not been posted to MNS application due to error in data&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;catch (xe)&#xA;&#x9;{&#xA;&#x9;&#x9;LOGGER.warn(&quot;MATProcessNewVess error while building xml&quot; + xe);&#xA;&#x9;&#x9;println(&quot;MATProcessNewVess error while building xml&quot; + xe);&#xA;&#x9;}&#xA;&#xA;    LOGGER.warn(&quot;MATProcessNewVess ended&quot; + timeNow);&#xA;  }&#xA;&#xA;public void send(String msg) throws JMSException, Exception {&#xA;      LOGGER.warn (&quot; in send message &quot;);&#xA;      String  cfName= &quot;jms.cf.oceanevent&quot;;&#xA;      Session                &#x9;session    = null;&#xA;      javax.jms.Connection&#x9;connection = null;&#xA;      ConnectionFactory      &#x9;cf         = null;&#xA;      MessageProducer        &#x9;mp         = null;&#xA;      Destination&#x9;&#x9;&#x9;&#x9;destination = null;&#xA;&#x9;  println( &quot;Calling MATProcessNewVess.send using ActiveMQConnectionFactory&quot;);&#xA;      try {&#xA;        LOGGER.warn( &quot;Getting Connection Factory&quot;);&#xA;        cf = new ActiveMQConnectionFactory(url);&#xA;        LOGGER.warn( &quot;Getting Queue&quot;);&#xA;        LOGGER.warn( &quot;Getting Connection for Queue &quot; + cf);&#xA;        connection = cf.createConnection();&#xA;        LOGGER.warn( &quot;staring the connection&quot;);&#xA;        connection.start();&#xA;        LOGGER.warn( &quot;creating session&quot;);&#xA;        session = connection.createSession(false, 1);&#xA;        LOGGER.warn( &quot;creating messageProducer&quot;);&#xA;&#x9;&#x9;destination = session.createQueue(queueName);&#xA;        mp = session.createProducer(destination);&#xA;&#x9;&#x9;LOGGER.warn( &quot;creating TextMessage&quot;);&#xA;        TextMessage outMessage = session.createTextMessage( msg);&#xA;        LOGGER.warn( &quot;sending Message to queue: &quot; + queueName);&#xA;        mp.send(outMessage);&#xA;        mp.close();&#xA;&#x9;&#x9;session.close();&#xA;        connection.close();&#xA;      }&#xA;      catch (Exception je)&#xA;      {&#xA;        LOGGER.warn(&quot;Exception in send:&quot; + je )&#xA;      }&#xA;    }&#xA;&#xA;   public void topicSend(String msg) throws JMSException, Exception {&#xA;   &#x9;LOGGER.warn (&quot; in topicSend message &quot;);&#xA;  &#x9;TopicSession               session    = null;&#xA;  &#x9;TopicConnection             connection = null;&#xA;  &#x9;TopicConnectionFactory      cf         = null;&#xA;  &#x9;MessageProducer        mp         = null;&#xA;  &#x9;Destination            destination = null;&#xA;    println( &quot;Calling MATProcessNewVess.topicSend using ActiveMQConnectionFactory&quot;);&#xA;  &#x9;try {&#xA;&#xA;  &#x9;&#x9;LOGGER.warn (&quot;Getting Connection Factory&quot;);&#xA;  &#x9;&#x9;cf = new ActiveMQConnectionFactory(url);&#xA;&#xA;  &#x9;&#x9;LOGGER.warn(&quot;Getting Connection for Topic&quot;);&#xA;  &#x9;&#x9;connection = cf.createTopicConnection();&#xA;&#xA;  &#x9;&#x9;LOGGER.warn( &quot;staring the connection&quot;);&#xA;  &#x9;&#x9;connection.start();&#xA;&#xA;  &#x9;&#x9;LOGGER.warn( &quot;creating session&quot;);&#xA;  &#x9;&#x9;session = connection.createTopicSession(false, 1);&#xA;  &#x9;&#x9;destination = session.createTopic(topicName);&#xA;&#xA;  &#x9;&#x9;LOGGER.warn( &quot;creating messageProducer&quot;);&#xA;  &#x9;&#x9;mp = session.createProducer(destination);&#xA;&#xA;  &#x9;&#x9;LOGGER.warn( &quot;creating TextMessage&quot;);&#xA;  &#x9;&#x9;TextMessage outMessage = session.createTextMessage( msg);&#xA;&#xA;  &#x9;&#x9;LOGGER.warn( &quot;sending Message to topic: &quot; + topicName);&#xA;  &#x9;&#x9;mp.send(outMessage);&#xA;&#xA;  &#x9;&#x9;mp.close();&#xA;  &#x9;&#x9;session.close();&#xA;  &#x9;&#x9;connection.close();&#xA;      }&#xA;      catch (Exception je)&#xA;      {&#xA;  &#x9;LOGGER.warn(&quot;Exception in topicSend:&quot; + je )&#xA;      }&#xA;}&#xA;&#xA;// Added by Raghu Iyer on 11/08/2012 to update the BL Number as blank where &quot;DO NOT EDIT .....&quot;&#xA;  private List&lt;Unit&gt; getUnitListInCvForUpdate(CarrierVisit inCv){&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;            .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_CURRENT_UFV_ACTUAL_IB_CV, inCv.getCvGkey()))&#xA;            .addDqPredicate(PredicateFactory.in(UnitField.UNIT_VISIT_STATE, Unit.LIVE_STATES));&#xA;&#x9;&#x9;//.addDqPredicate(PredicateFactory.in(UnitField.UNIT_ID, &quot;SUDU8670775&quot;));&#xA;&#xA;    HibernateApi hibernate = HibernateApi.getInstance();&#xA;    List unitList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#x9;println(&quot;getUnitListInCvForUpdate &quot; + unitList.size())&#xA;    return unitList;&#xA;  }&#xA;&#xA;&#xA;  private List&lt;Unit&gt; getUnitListInCv(CarrierVisit inCv){&#xA;&#x9;println (&quot;getUnitListInCv Start&quot;)&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;            .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_CURRENT_UFV_ACTUAL_IB_CV, inCv.getCvGkey()))&#xA;            .addDqPredicate(PredicateFactory.in(UnitField.UNIT_VISIT_STATE, Unit.LIVE_STATES));&#xA;&#x9;&#x9;//.addDqPredicate(PredicateFactory.in(UnitField.UNIT_ID, &quot;SUDU8670775&quot;));&#xA;&#x9;println(&quot;getUnitListInCvdq &quot; +dq)&#xA;    HibernateApi hibernate = HibernateApi.getInstance();&#xA;    List unitList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#x9;println(&quot;getUnitListInCv &quot; + unitList.size())&#xA;&#x9;totalContainers = unitList.size();&#xA;    println (&quot;getUnitListInCv End&quot;)&#xA;&#x9;return unitList;&#xA;  }&#xA;&#xA;  private StringBuffer buildXmlElement(List inUnitList, CarrierVisit inCv){&#xA;    StringBuffer elementList = new StringBuffer();&#xA;    //Build the XML Root Elements&#xA;    elementList.append(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot; standalone=\&quot;yes\&quot;?&gt;&quot;);&#xA;    elementList.append(&quot;&lt;ns2:snx xmlns:ns2=\&quot;http://www.navis.com/argo\&quot;&gt;&quot;);&#xA;    // Build the XML Shipper Consignee Elements&#xA;    for (int k=0; k &lt; inUnitList.size(); k++){&#xA;      //for (int k=0; k &lt; 5; k++){&#xA;      Unit unit = (Unit) inUnitList.get(k);&#xA;      this.getShipperConsigneeDetails(unit,elementList);&#xA;    }&#xA;    // Build the XML Vessel Visit Detail element&#xA;    this.getVesselVisitDetails(inCv,elementList);&#xA;    // Build the XML Unit detail elements&#xA;    try{&#xA;     int lastElement = inUnitList.size() - 1  ;&#xA;    for (int i=0; i &lt; inUnitList.size(); i++){&#xA;      Unit unit = (Unit) inUnitList.get(i);&#xA;      if (i.equals(lastElement)){&#xA;        LOGGER.warn(&quot;LAST ELEMENT:&quot; + i);&#xA;        this.getLastUnitDetails(unit, elementList, inUnitList.size());&#xA;      }else{&#xA;       this.getUnitDetails(unit, elementList);&#xA;      }&#xA;&#x9;&#x9;  elementList = this.getEquipmentDetails(unit, elementList);&#xA;&#x9;&#x9;  elementList = this.getPositionDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getRoutingDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getCarrierDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getHazard(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getOog(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getBookingNbr(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getReefer(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getHandlingDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getContentsDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getUnitEtc(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getFlagDetails(unit,elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getUnitFlexDetails(unit,elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getUfvDetails(unit,elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.geTimeStamp(unit,elementList, inCv);&#xA;      elementList.append(&quot;&lt;/unit&gt;&quot;);&#xA;    }&#xA;    elementList.append(&quot;&lt;/ns2:snx&gt;&quot;);&#xA;&#x9;//println(&quot;elementList=====================&gt;&quot;+elementList);&#xA;    return elementList;&#xA;  }catch (Exception e){&#xA;    LOGGER.warn (&quot;Exception in prining xml&quot; + e);&#xA;  }&#xA;  }&#xA;&#xA;public StringBuffer getShipperConsigneeDetails(Unit inUnit, StringBuffer inElementList){&#xA;&#xA;    GoodsBase goods = inUnit.getUnitGoods();&#xA;    String shipperName = &quot;&quot;;&#xA;    String shipperId = &quot;&quot;;&#xA;    String consigneeName = &quot;&quot;;&#xA;    String consigneeId = &quot;&quot;;&#xA;&#xA;    ScopedBizUnit shipper = goods.getGdsShipperBzu();&#xA;    if (shipper != null){&#xA;     try{&#xA;&#xA;&#x9;&#x9;shipperName = shipper.getBzuName();&#xA;        shipperName = removeDoubleQuotes(shipperName);&#xA;&#x9;&#x9;shipperId = shipper.getBzuId();&#xA;&#x9;&#x9;shipperId = removeDoubleQuotes(shipperId);&#xA;&#xA;&#xA;      String shipConOpenAttr = &quot;&lt;shipper-consignee&quot;;&#xA;      String shipperNameAttr = &quot; name=&quot;;&#xA;      String shipperNameValue = XML_OVERRIDE+shipperName+XML_OVERRIDE;&#xA;      String shipperIdAttr = &quot; id=&quot;;&#xA;      String shipperIdValue =  XML_OVERRIDE+shipperId+XML_OVERRIDE;&#xA;      String shipperString = shipConOpenAttr + shipperNameAttr+ shipperNameValue + shipperIdAttr + shipperIdValue + XML_END_ELEMENT;&#xA;      shipperString = this.stripInvalidXmlCharacters(shipperString);&#xA;&#x9;  shipperString = this.ModifyEscapeChar(shipperString);&#xA;      inElementList.append(shipperString);&#xA;    } catch (Exception e){&#xA;      LOGGER.warn (&quot;Exception in getting Shipper Info&quot; + e);&#xA;    }&#xA;  }&#xA;&#xA;    ScopedBizUnit consignee = goods.getGdsConsigneeBzu();&#xA;    if (consignee != null){&#xA;    try{&#xA;      consigneeName = consignee.getBzuName();&#xA;&#x9;  consigneeName = removeDoubleQuotes(consigneeName);&#xA;      consigneeId = consignee.getBzuId();&#xA;&#x9;  consigneeId = removeDoubleQuotes(consigneeId);&#xA;&#xA;&#x9;  String shipConOpenAttr = &quot;&lt;shipper-consignee&quot;;&#xA;      String shipperNameAttr = &quot; name=&quot;;&#xA;      String consigneeNameValue = XML_OVERRIDE+consigneeName+XML_OVERRIDE;&#xA;      String shipperIdAttr = &quot; id=&quot;;&#xA;      String consigneeIdValue =  XML_OVERRIDE+consigneeId+XML_OVERRIDE;&#xA;      String consigneeString = shipConOpenAttr + shipperNameAttr+ consigneeNameValue + shipperIdAttr + consigneeIdValue + XML_END_ELEMENT;&#xA;      consigneeString = this.stripInvalidXmlCharacters(consigneeString);&#xA;      consigneeString = this.ModifyEscapeChar(consigneeString);&#xA;&#x9;  inElementList.append(consigneeString);&#xA;    } catch (Exception e){&#xA;      LOGGER.warn (&quot;Exception in getting Consignee info&quot;+ e);&#xA;    }&#xA;    }&#xA;    return inElementList;&#xA;  }&#xA;&#xA;public StringBuffer getVesselVisitDetails(CarrierVisit inCv, StringBuffer inElementList){&#xA;&#xA;    def vvd = VesselVisitDetails.resolveVvdFromCv(inCv);&#xA;    Date timeFirstAvailable = vvd.getCvdTimeFirstAvailability();&#xA;    String timeFa = &quot;&quot;;&#xA;    if (timeFirstAvailable != null){&#xA;      timeFa = this.formatDate(timeFirstAvailable);&#xA;    }&#xA;    String vvOpenAttr = &quot;&lt;vessel-visit&quot;;&#xA;    String vvFirstTimeAvailabilityAttr = &quot; time-first-availability=&quot;;&#xA;    String vvFirstTimeAvailabilityValue = XML_OVERRIDE+timeFa+XML_OVERRIDE;&#xA;    String vvIdAttr = &quot; id=&quot;;&#xA;    String vvIdValue = XML_OVERRIDE+inCv.getCvId()+XML_OVERRIDE;&#xA;    String vesselVisitString = vvOpenAttr+vvFirstTimeAvailabilityAttr+vvFirstTimeAvailabilityValue+vvIdAttr+vvIdValue+ XML_END_ELEMENT;&#xA;    vesselVisitString = this.stripInvalidXmlCharacters(vesselVisitString);&#xA;    vesselVisitString = this.ModifyEscapeChar(vesselVisitString);&#xA;&#x9;inElementList.append(vesselVisitString);&#xA;    return inElementList;&#xA;  }&#xA;&#xA;public StringBuffer getLastUnitDetails(Unit inUnit, StringBuffer inElementList, int inUnitCount){&#xA;&#xA;    String unitOpenAttr = &quot;&lt;unit snx-update-note=&quot;;&#xA;    String unitOpenValue = XML_OVERRIDE+&quot;NewVes Completed&quot;+&quot; unitCnt=&quot;+ inUnitCount.toString()+ &quot; facility=&quot;+ honFacility + &quot; rdsDtTime=&quot;+&#xA;                           this.formatRdsDate(timeNow) + XML_OVERRIDE;&#xA;    String lineAttr = &quot; line=&quot;;&#xA;    String freightKindAttr = &quot; freight-kind=&quot;;&#xA;    String idAttr = &quot; id=&quot;;&#xA;    String categoryAttr = &quot; category=&quot;;&#xA;    String freightKindValue = this.findUnitFreightKind(inUnit);&#xA;    String idValue = this.findUnitNbr(inUnit);&#xA;    String categoryValue = this.findUnitCategory(inUnit);&#xA;    ScopedBizUnit lineOp = inUnit.getUnitLineOperator();&#xA;    String lineValue = XML_OVERRIDE+lineOp.getBzuId()+XML_OVERRIDE;&#xA;    String unitString = unitOpenAttr + unitOpenValue+ lineAttr + lineValue + freightKindAttr + freightKindValue + categoryAttr + categoryValue + idAttr + idValue + &quot;&gt;&quot;;&#xA;    unitString = this.stripInvalidXmlCharacters(unitString);&#xA;    unitString = this.ModifyEscapeChar(unitString);&#xA;&#x9;inElementList.append(unitString);&#xA;    return inElementList;&#xA;  }&#xA;&#xA;public StringBuffer getUnitDetails(Unit inUnit, StringBuffer inElementList){&#xA;&#xA;    List unitImpediments = this.getUnitImpediments(inUnit);&#xA;    String holds = &quot;&quot;;&#xA;    String unitOpenValue;&#xA;&#x9;addNode = &quot;N&quot;;&#xA;    if (!unitImpediments.isEmpty()) {&#xA;     for (int k=0; k &lt; unitImpediments.size(); k++){&#xA;     ServiceImpediment imp = (ServiceImpediment) unitImpediments.get(k);&#xA;      def status = imp.getStatus();&#xA;      if (FlagStatusEnum.ACTIVE.equals(status) || FlagStatusEnum.REQUIRED.equals(status)) {&#xA;        String holdId = imp.getFlagType().getId();&#xA;&#x9;&#x9;String flgtypPurpose = imp.getFlagType().getPurpose().getKey();&#xA;        //println (&quot;holdId &quot;+ holdId +&quot; flgtypPurpose &quot;+flgtypPurpose);&#xA;&#x9;&#x9;if (flgtypPurpose != &quot;PERMISSION&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;addNode = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;if (k == 0){&#xA;&#x9;&#x9;&#x9;holds = holds + holdId;&#xA;&#x9;&#x9;&#x9;}else {&#xA;&#x9;&#x9;&#x9;holds = holds + &quot;,&quot;+ holdId;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;      }&#xA;     }&#xA;&#x9;}&#xA;&#x9;if (addNode == &quot;Y&quot;)&#xA;&#x9;{&#xA;      unitOpenValue = XML_OVERRIDE+&quot;NewVes Holds:(&quot;+holds+&quot;)&quot;+XML_OVERRIDE;&#xA;    } else {&#xA;      unitOpenValue = XML_OVERRIDE+&quot;NewVes&quot;+XML_OVERRIDE;&#xA;    }&#xA;     String unitOpenAttr = &quot;&lt;unit snx-update-note=&quot;;&#xA;    String lineAttr = &quot; line=&quot;;&#xA;    String freightKindAttr = &quot; freight-kind=&quot;;&#xA;    String idAttr = &quot; id=&quot;;&#xA;    String categoryAttr = &quot; category=&quot;;&#xA;    String freightKindValue = this.findUnitFreightKind(inUnit);&#xA;    String idValue = this.findUnitNbr(inUnit);&#xA;    String categoryValue = this.findUnitCategory(inUnit);&#xA;    ScopedBizUnit lineOp = inUnit.getUnitLineOperator();&#xA;    String lineValue = XML_OVERRIDE+lineOp.getBzuId()+XML_OVERRIDE;&#xA;    String unitString = unitOpenAttr + unitOpenValue+ lineAttr + lineValue + freightKindAttr + freightKindValue + categoryAttr + categoryValue + idAttr + idValue + &quot;&gt;&quot;;&#xA;    unitString = this.stripInvalidXmlCharacters(unitString);&#xA;&#x9;unitString = this.ModifyEscapeChar(unitString);&#xA;&#x9;inElementList.append(unitString);&#xA;    return inElementList;&#xA;  }&#xA;&#xA;public StringBuffer getEquipmentDetails(Unit inUnit, StringBuffer inElementList){&#xA;&#x9;try&#xA;&#x9;{&#xA;&#x9;Equipment eq = inUnit.getPrimaryEq();&#xA;&#xA;&#x9;def unitEquipment = inUnit.getUnitPrimaryUe()&#xA;    def ueEquipmentState = unitEquipment.getUeEquipmentState()&#xA;    def equipFlex01 = ueEquipmentState != null ? ueEquipmentState.getEqsFlexString01() : ''&#xA;&#xA;    String equipmentOpenAttr = &quot;&lt;equipment&quot;;&#xA;    String equipmentRoleAttr = &quot; role=&quot;;&#xA;    String equipmentRoleValue = XML_OVERRIDE+&quot;PRIMARY&quot;+XML_OVERRIDE;&#xA;    String equipmentFlex01Attr = &quot; eq-flex-01=&quot;;&#xA;    String equipmentFlex01Value = XML_OVERRIDE+&quot;CLIENT&quot;+XML_OVERRIDE;&#xA;    String equipmentMaterialAttr = &quot; material=&quot;;&#xA;    String equipmentMaterialValue = this.findEquipmentMaterial(eq);&#xA;    String equipmentOperatorAttr = &quot; operator=&quot;&#xA;    String equipmentOperatorValue=XML_OVERRIDE+eq.getEquipmentOperatorId()+XML_OVERRIDE;&#xA;    String equipmentOwnerAttr = &quot; owner=&quot;&#xA;    String equipmentOwnerValue=XML_OVERRIDE+eq.getEquipmentOwnerId()+XML_OVERRIDE;&#xA;    String equipmentStrengthCodeAttr = &quot; strength-code=&quot;;&#xA;    String equipmentStrengthCodeValue = XML_OVERRIDE+eq.getEqStrengthCode()+XML_OVERRIDE;&#xA;    String equipmentHeightMmAttr = &quot; height-mm=&quot;;&#xA;    String equipmentHeightMmValue = XML_OVERRIDE+eq.getEqHeightMm().toString()+XML_OVERRIDE;&#xA;    String equipmentTareWeightKgAttr = &quot; tare-kg=&quot;;&#xA;    String equipmentTareWeightKgValue = XML_OVERRIDE+eq.getEqTareWeightKg().toString()+XML_OVERRIDE;&#xA;    String equipmentTypeAttr = &quot; type=&quot;;&#xA;    String equipmentTypeValue = XML_OVERRIDE+eq.getEqEquipType().eqtypId+XML_OVERRIDE;&#xA;    String equipmentClassAttr = &quot; class=&quot;;&#xA;&#x9;String equipClass = eq.getEqClass().getKey();&#xA;&#x9;equipClass = equipClass = &quot;CONTAINER&quot;?&quot;CTR&quot;:eq.getEqClass().getKey()&#xA;    String equipmentClassValue = XML_OVERRIDE+equipClass+XML_OVERRIDE&#xA;    String equipmentIdAttr = &quot; eqid=&quot;;&#xA;    String equipmentIdValue = this.findUnitNbr(inUnit);&#xA;&#xA;    String equipmentString = equipmentOpenAttr + equipmentRoleAttr+ equipmentRoleValue + equipmentFlex01Attr +&#xA;                             equipmentFlex01Value + equipmentMaterialAttr + equipmentMaterialValue+equipmentOperatorAttr+equipmentOperatorValue+&#xA;                             equipmentOwnerAttr+equipmentOwnerValue+equipmentStrengthCodeAttr+equipmentStrengthCodeValue+&#xA;                             equipmentHeightMmAttr+equipmentHeightMmValue+equipmentTareWeightKgAttr+equipmentTareWeightKgValue+&#xA;                             equipmentTypeAttr+equipmentTypeValue+equipmentClassAttr+equipmentClassValue+equipmentIdAttr+equipmentIdValue+ &quot;&gt;&quot;;&#xA;    equipmentString = this.stripInvalidXmlCharacters(equipmentString)&#xA;&#x9;equipmentString = this.ModifyEscapeChar(equipmentString);&#xA;&#x9;inElementList.append(equipmentString);&#xA;&#xA;&#x9;String grade = ueEquipmentState != null ? ueEquipmentState.getEqsGradeID() : ''&#xA;&#x9;if (grade != null)&#xA;&#x9;{&#xA;&#x9;&#x9;grade = grade.replace(&quot;EquipGrade Id:&quot;,&quot;&quot;)&#xA;&#x9;}&#xA;&#x9;String physicalOpenAttr = &quot;&lt;physical&quot;;&#xA;    String gradeAttr = &quot; grade=&quot;;&#xA;&#x9;if (grade!= null)&#xA;&#x9;{&#xA;&#x9;&#x9;String physicalString = physicalOpenAttr + gradeAttr+ XML_OVERRIDE+grade+XML_OVERRIDE +XML_END_ELEMENT&#xA;&#x9;&#x9;inElementList.append(physicalString);&#xA;&#x9;}&#xA;    //inElementList.append(&quot;&lt;damages&quot;);&#xA;&#xA;&#x9;String damageOpenAttr = &quot;&lt;damages&quot;;&#xA;&#x9;String damageSevAttr = &quot; severity=&quot;&#xA;&#x9;def eqsDamageSev = inUnit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsDamageSeverity&quot;);&#xA;&#x9;String damageSev = null;&#xA;&#x9;if (eqsDamageSev !=null)&#xA;&#x9;{&#xA;&#x9;&#x9;damageSev = eqsDamageSev.getKey();&#xA;&#x9;}&#xA;&#xA;&#x9;String damageString = null;&#xA;&#x9;if (damageSev != &quot;NONE&quot; &amp;&amp; damageSev!= null)&#xA;&#x9;{&#xA;&#x9;&#x9;damageString = damageOpenAttr+damageSevAttr+XML_OVERRIDE+damageSev+XML_OVERRIDE+XML_END_ELEMENT;&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;damageString = damageOpenAttr+XML_END_ELEMENT;&#xA;&#x9;}&#xA;&#xA;&#x9;//println(&quot;damageString &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+damageString)&#xA;&#x9;inElementList.append(damageString);&#xA;&#xA;&#xA;    inElementList.append(&quot;&lt;/equipment&gt;&quot;);&#xA;&#x9;}&#xA;&#x9;catch (e)&#xA;&#x9;{&#xA;&#x9;&#x9;println(&quot;Exception &quot;+e)&#xA;&#x9;}&#xA;&#xA;    return inElementList;&#xA;  }&#xA;&#xA;public StringBuffer getPositionDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;    String  positionLocationValue = &quot;&quot;;&#xA;    String positionLocTypeValue = &quot;&quot;;&#xA;    if (inCv != null){&#xA;      positionLocationValue = XML_OVERRIDE + inCv.getCvId()+XML_OVERRIDE;&#xA;      positionLocTypeValue = XML_OVERRIDE+ &quot;VESSEL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    String positionOpenAttr = &quot;&lt;position&quot;&#xA;    String positionSlotAttr = &quot; slot=&quot;;&#xA;    String positionSlotValue = XML_OVERRIDE+inUnit.getUnitArrivePositionSlot()+XML_OVERRIDE;&#xA;    String positionLocationAttr = &quot; location=&quot;;&#xA;    String positionLocTypeAttr = &quot; loc-type=&quot;;&#xA;&#xA;&#xA;    String positionString = positionOpenAttr+positionSlotAttr+positionSlotValue+positionLocationAttr+positionLocationValue+&#xA;                            positionLocTypeAttr+positionLocTypeValue+XML_END_ELEMENT;&#xA;&#x9;positionString = this.stripInvalidXmlCharacters(positionString)&#xA;&#x9;positionString = this.ModifyEscapeChar(positionString);&#xA;&#x9;inElementList.append(positionString);&#xA;&#xA;    return inElementList;&#xA;  }&#xA;&#xA;public StringBuffer getRoutingDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;String group = null;&#xA;&#x9;&#x9;String disc=&quot;&quot;;&#xA;&#x9;&#x9;String pod2=null;&#xA;&#x9;&#x9;String opl=&quot;&quot;;&#xA;&#x9;&#x9;String pol=&quot;&quot;;&#xA;&#x9;&#x9;String destination=&quot;&quot;;&#xA;&#x9;&#x9;String designatedTrucker=null;&#xA;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;designatedTrucker=inUnit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (te)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Exception in getting trucker details &quot; + te);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//try{&#xA;&#xA;&#x9;&#x9;Routing routing = inUnit.getUnitRouting();&#xA;&#xA;&#x9;&#x9;if (routing != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;String rtgGroup = routing.getRtgGroup();&#xA;&#x9;&#x9;&#x9;&#x9;group = rtgGroup.replace(&quot;Group Id:&quot;,&quot;&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;catch (e)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;RoutingPoint point = inUnit.getUnitRouting().getRtgPOD1();&#xA;&#x9;&#x9;RoutingPoint point2 = inUnit.getUnitRouting().getRtgPOD2();&#xA;&#x9;&#x9;RoutingPoint pointOpl = inUnit.getUnitRouting().getRtgOPL();&#xA;&#x9;&#x9;RoutingPoint pointPol = inUnit.getUnitRouting().getRtgPOL();&#xA;&#x9;&#x9;if (point != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;disc = point.getPointId();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (point2 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;pod2 = point2.getPointId();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (pointOpl != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;opl = pointOpl.getPointId();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (pointPol != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;pol = pointOpl.getPointId();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;destination = inUnit.getUnitGoods().getGdsDestination();&#xA;&#x9;&#x9;//} catch (Exception e){&#xA;&#x9;&#x9;  //LOGGER.warn(&quot;Exception in getting routing details &quot; + e);&#xA;&#x9;&#x9;//}&#xA;&#x9;&#x9;String rtgOpenAttr = &quot;&lt;routing&quot;&#xA;&#x9;&#x9;String groupAttr = &quot; group=&quot;&#xA;&#x9;&#x9;String groupValue = XML_OVERRIDE+group+XML_OVERRIDE;&#xA;&#x9;&#x9;String designatedTruckerAttr = &quot; designated-trucker=&quot;&#xA;&#x9;&#x9;String designatedTruckerValue = XML_OVERRIDE+designatedTrucker+XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgDestAttr = &quot; destination=&quot;;&#xA;&#x9;&#x9;String rtgDestValue = XML_OVERRIDE+destination+XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgOplAttr = &quot; opl=&quot;;&#xA;&#x9;&#x9;String rtgOplValue = XML_OVERRIDE+ opl +XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgPod1Attr = &quot; pod-1=&quot;;&#xA;&#x9;&#x9;String rtgPod2Attr = &quot; pod-2=&quot;;&#xA;&#x9;&#x9;String rtgPod1Value = XML_OVERRIDE+ disc +XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgPod2Value = XML_OVERRIDE+ pod2 +XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgPolAttr = &quot; pol=&quot;;&#xA;&#x9;&#x9;String rtgPolValue = XML_OVERRIDE+ pol +XML_OVERRIDE;&#xA;&#x9;&#x9;String routingString = null;&#xA;&#xA;&#xA;&#x9;&#x9;if (designatedTrucker!= null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;routingString = designatedTruckerAttr+designatedTruckerValue+rtgDestAttr+rtgDestValue+rtgOplAttr+rtgOplValue+rtgPod1Attr+rtgPod1Value+&#xA;&#x9;&#x9;&#x9;&#x9;rtgPolAttr+rtgPolValue;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;routingString = rtgDestAttr+rtgDestValue+rtgOplAttr+rtgOplValue+rtgPod1Attr+rtgPod1Value+&#xA;&#x9;&#x9;&#x9;&#x9;rtgPolAttr+rtgPolValue;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (pod2 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;//println(&quot;pod2&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot;+pod2);&#xA;&#x9;&#x9;routingString = routingString+rtgPod2Attr+rtgPod2Value&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (group != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;routingString = rtgOpenAttr + groupAttr + groupValue + routingString&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;  {&#xA;&#x9;&#x9;&#x9;routingString = rtgOpenAttr + routingString&#xA;&#x9;  }&#xA;&#x9;&#x9;routingString = routingString + &quot;&gt;&quot;&#xA;&#x9;&#x9;routingString = this.stripInvalidXmlCharacters(routingString);&#xA;&#x9;&#x9;routingString = this.ModifyEscapeChar(routingString);&#xA;&#x9;&#x9;inElementList.append(routingString);&#xA;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;public StringBuffer getCarrierDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;    UnitFacilityVisit ufv = inUnit.getUnitActiveUfvNowActive();&#xA;    CarrierVisit declaredIbCv = inUnit.getUnitDeclaredIbCv();&#xA;    String declaredIbCvMode = this.findCarrierVisitMode(declaredIbCv);&#xA;&#x9;//println(&quot;ufvPrint&quot;+ufv);&#xA;    CarrierVisit actualIbCv = ufv.getInboundCarrierVisit();&#xA;    String actualIbCvMode = this.findCarrierVisitMode(actualIbCv);&#xA;    CarrierVisit declaredObCv = inUnit.getUnitRouting().getRtgDeclaredCv();&#xA;    String declaredObCvMode = this.findCarrierVisitMode(declaredObCv);&#xA;    CarrierVisit actualObCv = ufv.getUfvObCv();&#xA;    String actualObCvMode = this.findCarrierVisitMode(actualObCv);&#xA;&#xA;    String cvOpenAttr = &quot;&quot;;&#xA;    String cvIdAttr = &quot;&quot;;&#xA;    String cvIdValue = &quot;&quot;;&#xA;    String cvFacilityAttr = &quot;&quot;;&#xA;    String cvFacilityValue = &quot;&quot;;&#xA;    String cvModeAttr = &quot;&quot;;&#xA;    String cvModeValue = &quot;&quot;;&#xA;    String cvQualifierAttr = &quot;&quot;;&#xA;    String cvQualiferValue = &quot;&quot;;&#xA;    String cvDirectionAttr = &quot;&quot;;&#xA;    String cvDirectionValue = &quot;&quot;;&#xA;    // Declared IB CV Details Block&#xA;    cvOpenAttr = &quot;&lt;carrier&quot;&#xA;    cvIdAttr = &quot; id=&quot;;&#xA;    cvIdValue = XML_OVERRIDE+declaredIbCv+XML_OVERRIDE;&#xA;    cvFacilityAttr = &quot; facility=&quot;;&#xA;    cvFacilityValue = XML_OVERRIDE+ honFacility +XML_OVERRIDE;&#xA;    cvModeAttr = &quot; mode=&quot;;&#xA;    cvModeValue = XML_OVERRIDE+ declaredIbCvMode +XML_OVERRIDE;&#xA;    cvQualifierAttr = &quot; qualifier=&quot;;&#xA;    cvQualiferValue = XML_OVERRIDE+ &quot;DECLARED&quot; +XML_OVERRIDE;&#xA;    cvDirectionAttr = &quot; direction=&quot;;&#xA;    cvDirectionValue = XML_OVERRIDE+ &quot;IB&quot; +XML_OVERRIDE;&#xA;&#xA;&#x9;&#x9;String cvDeclaredIbString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;            cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;    cvDeclaredIbString = this.stripInvalidXmlCharacters(cvDeclaredIbString)&#xA;&#x9;cvDeclaredIbString = this.ModifyEscapeChar(cvDeclaredIbString);&#xA;&#x9;inElementList.append(cvDeclaredIbString);&#xA;&#xA;    // Actual IB CV Details Block&#xA;    cvOpenAttr = &quot;&lt;carrier&quot;&#xA;    cvIdAttr = &quot; id=&quot;;&#xA;    cvIdValue = XML_OVERRIDE+actualIbCv+XML_OVERRIDE;&#xA;    cvFacilityAttr = &quot; facility=&quot;;&#xA;    cvFacilityValue = XML_OVERRIDE+ honFacility +XML_OVERRIDE;&#xA;    cvModeAttr = &quot; mode=&quot;;&#xA;    cvModeValue = XML_OVERRIDE+ actualIbCvMode +XML_OVERRIDE;&#xA;    cvQualifierAttr = &quot; qualifier=&quot;;&#xA;    cvQualiferValue = XML_OVERRIDE+ &quot;ACTUAL&quot; +XML_OVERRIDE;&#xA;    cvDirectionAttr = &quot; direction=&quot;;&#xA;    cvDirectionValue = XML_OVERRIDE+ &quot;IB&quot; +XML_OVERRIDE;&#xA;&#xA;&#x9;String cvActualIbString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;            cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;    cvActualIbString = this.stripInvalidXmlCharacters(cvActualIbString)&#xA;&#x9;cvActualIbString = this.ModifyEscapeChar(cvActualIbString);&#xA;&#x9;inElementList.append(cvActualIbString);&#xA;&#xA;    // Declared Ob CV Details Block&#xA;    cvOpenAttr = &quot;&lt;carrier&quot;&#xA;    cvIdAttr = &quot; id=&quot;;&#xA;    cvIdValue = XML_OVERRIDE+declaredObCv+XML_OVERRIDE;&#xA;    cvFacilityAttr = &quot; facility=&quot;;&#xA;    cvFacilityValue = XML_OVERRIDE+ honFacility +XML_OVERRIDE;&#xA;    cvModeAttr = &quot; mode=&quot;;&#xA;    cvModeValue = XML_OVERRIDE+ declaredObCvMode +XML_OVERRIDE;&#xA;    cvQualifierAttr = &quot; qualifier=&quot;;&#xA;    cvQualiferValue = XML_OVERRIDE+ &quot;DECLARED&quot; +XML_OVERRIDE;&#xA;    cvDirectionAttr = &quot; direction=&quot;;&#xA;    cvDirectionValue = XML_OVERRIDE+ &quot;OB&quot; +XML_OVERRIDE;&#xA;&#xA;&#x9; String cvDeclaredObString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;            cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;    cvDeclaredObString = this.stripInvalidXmlCharacters(cvDeclaredObString)&#xA;&#x9;cvDeclaredObString = this.ModifyEscapeChar(cvDeclaredObString);&#xA;&#x9;inElementList.append(cvDeclaredObString);&#xA;&#xA;    // Actual Ob CV Details Block&#xA;    cvOpenAttr = &quot;&lt;carrier&quot;&#xA;    cvIdAttr = &quot; id=&quot;;&#xA;    cvIdValue = XML_OVERRIDE+actualObCv+XML_OVERRIDE;&#xA;    cvFacilityAttr = &quot; facility=&quot;;&#xA;    cvFacilityValue = XML_OVERRIDE+ honFacility +XML_OVERRIDE;&#xA;    cvModeAttr = &quot; mode=&quot;;&#xA;    cvModeValue = XML_OVERRIDE+ actualObCvMode +XML_OVERRIDE;&#xA;    cvQualifierAttr = &quot; qualifier=&quot;;&#xA;    cvQualiferValue = XML_OVERRIDE+ &quot;ACTUAL&quot; +XML_OVERRIDE;&#xA;    cvDirectionAttr = &quot; direction=&quot;;&#xA;    cvDirectionValue = XML_OVERRIDE+ &quot;OB&quot; +XML_OVERRIDE;&#xA;&#xA;&#xA;&#x9;&#x9;String cvActualObString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;            cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;cvActualObString = this.stripInvalidXmlCharacters(cvActualObString)&#xA;&#x9;&#x9;cvActualObString = this.ModifyEscapeChar(cvActualObString);&#xA;&#x9;&#x9;inElementList.append(cvActualObString);&#xA;&#xA;    inElementList.append(&quot;&lt;/routing&gt;&quot;);&#xA;    return inElementList;&#xA;&#xA;  }&#xA;&#xA;public StringBuffer getHazard(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;def ufv = inUnit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;if (ufv != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;if (ufv.ufvUnit.getUnitGoods() != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;def haz = ufv.ufvUnit.getUnitGoods().getGdsHazards();&#xA;&#x9;&#x9;//println(&quot;hazard&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+haz)&#xA;&#xA;&#x9;&#x9;if (haz != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;String hazardsAttrOpn = &quot;&lt;hazards&gt;&quot;;&#xA;&#x9;&#x9;&#x9;String addtag = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;def hazardAttrOpn = &quot;&lt;hazard&quot;&#xA;&#x9;&#x9;&#x9;def hazardString = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;Iterator hazardIter = ufv.ufvUnit.getUnitGoods().getGdsHazards().getHazardItemsIterator();&#xA;&#x9;&#x9;&#x9;while(hazardIter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;def hazard = hazardIter.next();&#xA;&#x9;&#x9;&#x9;&#x9;def imdgClass = hazard.getHzrdiImdgCode() != null ? hazard.getHzrdiImdgCode().getKey() : null&#xA;&#x9;&#x9;&#x9;&#x9;def nbrType = hazard.getHzrdiNbrType() != null ? hazard.getHzrdiNbrType().getKey() : null&#xA;&#x9;&#x9;&#x9;&#x9;def qty = hazard.hzrdiQuantity;&#xA;&#x9;&#x9;&#x9;&#x9;def packageType = hazard.hzrdiPackageType;&#xA;&#x9;&#x9;&#x9;&#x9;def weight = hazard.hzrdiWeight;&#xA;&#x9;&#x9;&#x9;&#x9;String properName = hazard.hzrdiProperName;&#xA;&#x9;&#x9;&#x9;&#x9;String techName   = hazard.hzrdiTechName;&#xA;&#x9;&#x9;&#x9;&#x9;String imdgclass  = hazard.hzrdiImdgClass.name;&#xA;&#x9;&#x9;&#x9;&#x9;def im01 = hazard.hzrdiSecondaryIMO1;&#xA;&#x9;&#x9;&#x9;&#x9;def im02 = hazard.hzrdiSecondaryIMO2;&#xA;&#x9;&#x9;&#x9;&#x9;String un  = hazard.hzrdiUNnum;&#xA;&#x9;&#x9;&#x9;&#x9;def pkg = hazard.hzrdiPackingGroup;&#xA;&#x9;&#x9;&#x9;&#x9;if (pkg != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;pkg = pkg.getKey();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;def flashPoint = hazard.hzrdiFlashPoint;&#xA;&#x9;&#x9;&#x9;&#x9;def limited = hazard.hzrdiLtdQty ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;def marine = hazard.hzrdiMarinePollutants ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;def phone = hazard.hzrdiEmergencyTelephone;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiNotes = hazard.hzrdiNotes;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiInhalationZone = hazard.hzrdiInhalationZone;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiPageNumber = hazard.hzrdiPageNumber;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiEMSNumber = hazard.hzrdiEMSNumber;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiMFAG = hazard.hzrdiMFAG;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiHazIdUpper = hazard.hzrdiHazIdUpper;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiSubstanceLower = hazard.hzrdiSubstanceLower;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiPlannerRef = hazard.hzrdiPlannerRef;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiMoveMethod = hazard.hzrdiMoveMethod;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiExplosiveClass = hazard.hzrdiExplosiveClass;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiDcLgRef = hazard.hzrdiDcLgRef;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiDeckRestrictions = hazard.hzrdiDeckRestrictions;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + hazardAttrOpn;&#xA;&#x9;&#x9;&#x9;&#x9;if (nbrType != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; haz-nbr-type=&quot; + XML_OVERRIDE + nbrType + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiNotes != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hzrdiNotes = this.stripInvalidXmlCharacters(hzrdiNotes);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hzrdiNotes = this.removeDoubleQuotes(hzrdiNotes);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; notes=&quot; +XML_OVERRIDE + hzrdiNotes + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (phone != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; emergency-telephone=&quot; +XML_OVERRIDE + phone + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (marine == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; marine-pollutants=&quot; +XML_OVERRIDE + marine + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (im01 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; secondary-imo-1=&quot; +XML_OVERRIDE + im01 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (im02 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; secondary-imo-2=&quot; +XML_OVERRIDE + im02 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (qty != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; quantity=&quot; +XML_OVERRIDE + qty + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (weight != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; weight-kg=&quot; +XML_OVERRIDE + weight + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (pkg != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; packing-group=&quot; +XML_OVERRIDE + pkg + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (properName != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;properName = this.stripInvalidXmlCharacters(properName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;properName = this.removeDoubleQuotes(properName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; proper-name=&quot; +XML_OVERRIDE + properName + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (techName != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;techName = this.stripInvalidXmlCharacters(techName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;techName = this.removeDoubleQuotes(techName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; tech-name=&quot; +XML_OVERRIDE + techName + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (flashPoint != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; flash-point=&quot; +XML_OVERRIDE + flashPoint + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (packageType != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; package-type=&quot; +XML_OVERRIDE + packageType + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (limited == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; ltd-qty-flag=&quot; +XML_OVERRIDE + limited + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (un != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; un=&quot; +XML_OVERRIDE + un + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (imdgClass != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; imdg=&quot; +XML_OVERRIDE + imdgClass + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiInhalationZone != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; inhalation-zone=&quot; +XML_OVERRIDE + hzrdiInhalationZone + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiExplosiveClass != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; explosive-class=&quot; +XML_OVERRIDE + hzrdiExplosiveClass + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiEMSNumber != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; ems-nbr=&quot; +XML_OVERRIDE + hzrdiEMSNumber + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiMFAG != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; mfag=&quot; +XML_OVERRIDE + hzrdiMFAG + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiHazIdUpper != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; haz-id-upper=&quot; +XML_OVERRIDE + hzrdiHazIdUpper + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiSubstanceLower != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; substance-lower=&quot; +XML_OVERRIDE + hzrdiSubstanceLower + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiPlannerRef != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; planner-ref=&quot; +XML_OVERRIDE + hzrdiPlannerRef + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiMoveMethod != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; move-method=&quot; +XML_OVERRIDE + hzrdiMoveMethod + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiDeckRestrictions != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; deck-restrictions=&quot; +XML_OVERRIDE + hzrdiDeckRestrictions + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiDcLgRef != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; dc-lg-ref=&quot; +XML_OVERRIDE + hzrdiDcLgRef + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiPageNumber != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; page-number=&quot; +XML_OVERRIDE + hzrdiPageNumber + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (addtag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (addtag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;hazardsAttrOpn = hazardsAttrOpn + hazardString + &quot;&lt;/hazards&gt;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;hazardsAttrOpn = this.stripInvalidXmlCharacters(hazardsAttrOpn);&#xA;&#x9;&#x9;&#x9;&#x9;hazardsAttrOpn = this.ModifyEscapeChar(hazardsAttrOpn);&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(hazardsAttrOpn);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;}&#xA;&#x9;return inElementList;&#xA;}&#xA;&#xA;public StringBuffer getOog(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;{&#xA;&#x9;&#x9;if (inUnit.getFieldValue(&quot;unitIsOog&quot;))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;String backCm = inUnit.getFieldValue(&quot;unitOogBackCm&quot;);&#xA;&#x9;&#x9;&#x9;String frontCm = inUnit.getFieldValue(&quot;unitOogFrontCm&quot;) ;&#xA;&#x9;&#x9;&#x9;String leftCm = inUnit.getFieldValue(&quot;unitOogLeftCm&quot;);&#xA;&#x9;&#x9;&#x9;String rightCm = inUnit.getFieldValue(&quot;unitOogRightCm&quot;);&#xA;&#x9;&#x9;&#x9;String topCm = inUnit.getFieldValue(&quot;unitOogTopCm&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;backCm = backCm !=null ? backCm:0;&#xA;&#x9;&#x9;&#x9;frontCm = frontCm !=null ? frontCm:0;&#xA;&#x9;&#x9;&#x9;leftCm = leftCm !=null ? leftCm:0;&#xA;&#x9;&#x9;&#x9;rightCm = rightCm !=null ? rightCm:0;&#xA;&#x9;&#x9;&#x9;topCm = topCm !=null ? topCm:0;&#xA;&#xA;&#x9;&#x9;&#x9;String oogAttrOpn = &quot;&lt;oog&quot;;&#xA;&#x9;&#x9;&#x9;String oogString = oogAttrOpn&#xA;&#x9;&#x9;&#x9;if (rightCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; right-cm=&quot; + XML_OVERRIDE + rightCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (leftCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; left-cm=&quot; + XML_OVERRIDE + leftCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (backCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; back-cm=&quot; + XML_OVERRIDE + backCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (frontCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; front-cm=&quot; + XML_OVERRIDE + frontCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (topCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; top-cm=&quot; + XML_OVERRIDE + topCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;oogString = oogString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;inElementList.append(oogString);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;public StringBuffer getBookingNbr(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;String bookingId = null;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;bookingId = inUnit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (be)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Exception in getting routing details &quot; + be);&#xA;&#x9;&#x9;&#x9;println(&quot;Exception in getting routing details &quot; + be);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;String unitBkngOpenAttr = &quot;&lt;booking &quot;&#xA;&#x9;&#x9;String unitBkngAttr = &quot;id=&quot;;&#xA;&#x9;&#x9;if (bookingId != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;bookingId = XML_OVERRIDE+bookingId+XML_OVERRIDE&#xA;&#x9;&#x9;&#x9;String unitBkngString = unitBkngOpenAttr+unitBkngAttr+bookingId+XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;unitBkngString = this.stripInvalidXmlCharacters(unitBkngString);&#xA;&#x9;&#x9;&#x9;unitBkngString = this.ModifyEscapeChar(unitBkngString);&#xA;&#x9;&#x9;&#x9;inElementList.append(unitBkngString);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;public StringBuffer getReefer(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;&#x9;def tempReq = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempRequiredC&quot;);&#xA;&#x9;&#x9;&#x9;def tempMax = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempLimitMaxC&quot;);&#xA;&#x9;&#x9;&#x9;def tempMin = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempLimitMinC&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM1 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor1&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM2 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor2&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM3 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor3&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM4 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor4&quot;);&#xA;&#x9;&#x9;&#x9;def tempPwrOnTime = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqLatestOnPowerTime&quot;);&#xA;&#x9;&#x9;&#x9;def tempCo2Pct = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqCO2Pct&quot;);&#xA;&#x9;&#x9;&#x9;def tempHmdtyPct = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqHumidityPct&quot;);&#xA;&#x9;&#x9;&#x9;def tempO2Pct = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqO2Pct&quot;);&#xA;&#x9;&#x9;&#x9;def tempVentReq = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqVentRequired&quot;);&#xA;&#x9;&#x9;&#x9;def tempVentUnit = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqVentUnit&quot;);&#xA;&#x9;&#x9;&#x9;def tempShowFahrenhiet = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempShowFahrenheit&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;tempShowFahrenhiet = tempShowFahrenhiet ? &quot;F&quot; : &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;String reeferAttrOpn = &quot;&lt;reefer&quot;;&#xA;&#x9;&#x9;&#x9;String reeferString = reeferAttrOpn;&#xA;&#x9;&#x9;&#x9;String addtag = &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;if (tempShowFahrenhiet == &quot;F&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-display-unit=&quot; + XML_OVERRIDE + tempShowFahrenhiet + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempReq !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-reqd-c=&quot; + XML_OVERRIDE + tempReq + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempO2Pct !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; o2-pct=&quot; + XML_OVERRIDE + tempO2Pct + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempCo2Pct !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; co2-pct=&quot; + XML_OVERRIDE + tempCo2Pct + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempHmdtyPct !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; humidity-pct=&quot; + XML_OVERRIDE + tempHmdtyPct + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempVentReq !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; vent-required-value=&quot; + XML_OVERRIDE + tempVentReq + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempVentUnit !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; vent-required-unit=&quot; + XML_OVERRIDE + tempVentUnit + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempMin !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-min-c=&quot; + XML_OVERRIDE + tempMin + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempMax !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-max-c=&quot; + XML_OVERRIDE + tempMax + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempPwrOnTime !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-latest-on-power=&quot; + XML_OVERRIDE + tempPwrOnTime + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM1 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-1=&quot; + XML_OVERRIDE + tempTM1 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM2 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-2=&quot; + XML_OVERRIDE + tempTM2 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM3 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-3=&quot; + XML_OVERRIDE + tempTM3 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM4 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-4=&quot; + XML_OVERRIDE + tempTM4 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;//println(&quot;reeferString &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot; + addtag +&quot;  :   &quot;+reeferString)&#xA;&#xA;&#x9;&#x9;&#x9;if (addtag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;//println(&quot;Here reeferString &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot; + addtag +&quot;  :   &quot;+reeferString)&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = this.stripInvalidXmlCharacters(reeferString);&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = this.ModifyEscapeChar(reeferString);&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(reeferString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return inElementList;&#xA;&#x9;&#x9;}&#xA;&#xA;public StringBuffer getHandlingDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;def ufv = inUnit.getUnitActiveUfvNowActive();&#xA;&#xA;&#x9;String lastfreeDay = null;&#xA;    String handlingOpenAttr = &quot;&lt;handling&quot;&#xA;&#x9;String handlingString = handlingOpenAttr;&#xA;&#x9;String lastfreeDayAttr = &quot; last-free-day=&quot;;&#xA;    String handlingRemarkAttr = &quot; remark=&quot;;&#xA;    String handlingRemark = inUnit.getUnitRemark();&#xA;&#x9;if (ufv !=null)&#xA;&#x9;{&#xA;&#x9;&#x9;lastfreeDay = ufv.getFieldValue(&quot;ufvCalculatedLastFreeDay&quot;);&#xA;&#x9;&#x9;if (lastfreeDay != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;lastfreeDay = lastfreeDay.replace(&quot;!&quot;,&quot;&quot;)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;addNode = &quot;N&quot;;&#xA;&#x9;if (lastfreeDay != null)&#xA;&#x9;{&#xA;&#x9;&#x9;addNode = &quot;Y&quot;;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Date date = new SimpleDateFormat(&quot;yyyy-MMM-dd&quot;, Locale.ENGLISH).parse(lastfreeDay);&#xA;&#x9;&#x9;&#x9;DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#x9;&#x9;&#x9;lastfreeDay = df.format(date);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (Exception de){&#xA;&#x9;&#x9;&#x9;LOGGER.warn (&quot;Exception in while converting date &quot;+ lastfreeDay+&quot;:&quot;+de);&#xA;&#x9;&#x9;&#x9;lastfreeDay = null;&#xA;&#x9;&#x9;&#x9;addNode = &quot;N&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;if (addNode == &quot;Y&quot;)&#xA;&#x9;{&#xA;&#x9;&#x9;lastfreeDay=XML_OVERRIDE+lastfreeDay+XML_OVERRIDE;&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;addNode = &quot;N&quot;;&#xA;&#x9;}&#xA;&#xA;    if (handlingRemark != null)&#xA;&#x9;{&#xA;&#x9;&#x9;handlingRemark = removeDoubleQuotes(handlingRemark);&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;handlingRemark = &quot; &quot;&#xA;&#x9;}&#xA;&#x9;if (addNode == &quot;Y&quot; )&#xA;&#x9;{&#xA;&#x9;&#x9;handlingString = handlingString + lastfreeDayAttr + lastfreeDay;&#xA;&#x9;}&#xA;&#xA;&#x9;String handlingRemarkValue = XML_OVERRIDE+handlingRemark+XML_OVERRIDE;&#xA;    handlingString = handlingString+handlingRemarkAttr+handlingRemarkValue+ XML_END_ELEMENT;&#xA;&#x9;handlingString = this.stripInvalidXmlCharacters(handlingString);&#xA;&#x9;handlingString = this.ModifyEscapeChar(handlingString);&#xA;&#x9;inElementList.append(handlingString);&#xA;&#xA;    return inElementList;&#xA;  }&#xA;&#xA;&#xA;public StringBuffer getContentsDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;    GoodsBase goods = inUnit.getUnitGoods();&#xA;    String blNbr =  goods.getGdsBlNbr();&#xA;    ScopedBizUnit shipper = goods.getGdsShipperBzu();&#xA;    String shipperName = &quot;&quot;;&#xA;    String shipperId = &quot;&quot;;&#xA;    String consigneeName = &quot;&quot;;&#xA;    String consigneeId = &quot;&quot; ;&#xA;    String contentsShipperNameAttr = &quot; shipper-name=&quot;;&#xA;    String contentsShipperIdAttr = &quot; shipper-id=&quot;;&#xA;    String contentsConsigneeNameAttr = &quot; consignee-name=&quot;;&#xA;    String contentsConsigneeIdAttr = &quot; consignee-id=&quot;;&#xA;    String contentsConsigneeNameValue = &quot;&quot;;&#xA;    String contentsConsigneeIdValue = &quot;&quot;;&#xA;    String contentsShipperNameValue = &quot;&quot;;&#xA;    String contentsShipperIdValue = &quot;&quot;;&#xA;&#xA;    ScopedBizUnit consignee = goods.getGdsConsigneeBzu();&#xA;    if (consignee != null){&#xA;      try{&#xA;&#x9;&#x9;consigneeName = consignee.getBzuName();&#xA;&#x9;&#x9;consigneeName = removeDoubleQuotes(consigneeName);&#xA;        consigneeId = consignee.getBzuId();&#xA;&#x9;&#x9;consigneeId = removeDoubleQuotes(consigneeId);&#xA;&#xA;        contentsConsigneeNameValue = XML_OVERRIDE+consigneeName+XML_OVERRIDE;&#xA;        contentsConsigneeIdValue =  XML_OVERRIDE+consigneeId+XML_OVERRIDE;&#xA;      } catch (Exception e){&#xA;        LOGGER.warn (&quot;Exception in getting Consignee info&quot;+ e);&#xA;      }&#xA;    }&#xA;    if (blNbr == null){&#xA;      blNbr = &quot;&quot;;&#xA;    }&#xA;    String gdsWeight = inUnit.getUnitGoodsAndCtrWtKg().toString();&#xA;    String contentsOpenAttr = &quot;&lt;contents&quot;;&#xA;    String contentsCommodityNameAttr = &quot; commodity-name=&quot;;&#xA;    String contentsCommodityNameValue = XML_OVERRIDE+&quot;CUSTOMS&quot;+XML_OVERRIDE;&#xA;    String contentsCommodityIdAttr = &quot; commodity-id=&quot;;&#xA;    String contentsCommodityIdValue = XML_OVERRIDE+&quot;CUS&quot;+XML_OVERRIDE;&#xA;    String contentsBlNbrAttr = &quot; bl-nbr=&quot;;&#xA;    String contentsBlNbrValue = XML_OVERRIDE+blNbr+XML_OVERRIDE;&#xA;    String contentsWeightKgAttr = &quot; weight-kg=&quot;;&#xA;    String contentsWeightKgValue = XML_OVERRIDE+gdsWeight+XML_OVERRIDE;&#xA;&#xA;    if (shipper != null){&#xA;      try{&#xA;        shipperName = shipper.getBzuName();&#xA;        shipperName = removeDoubleQuotes(shipperName);&#xA;&#x9;&#x9;shipperId = shipper.getBzuId();&#xA;&#x9;&#x9;shipperId = removeDoubleQuotes(shipperId);&#xA;&#xA;        contentsShipperNameValue = XML_OVERRIDE+shipperName+XML_OVERRIDE;&#xA;        contentsShipperIdValue =  XML_OVERRIDE+shipperId+XML_OVERRIDE;&#xA;      } catch (Exception e){&#xA;        LOGGER.warn (&quot;Exception in getting Shipper Info&quot; + e);&#xA;      }&#xA;    }&#xA;    String handlingString = contentsOpenAttr+contentsCommodityNameAttr+contentsCommodityNameValue+contentsCommodityIdAttr+contentsCommodityIdValue;&#xA;    if (shipper != null){&#xA;      handlingString = handlingString+contentsShipperNameAttr+contentsShipperNameValue+contentsShipperIdAttr+contentsShipperIdValue;&#xA;&#xA;    }&#xA;    if (consignee != null){&#xA;      handlingString = handlingString+contentsConsigneeNameAttr+contentsConsigneeNameValue+contentsConsigneeIdAttr+contentsConsigneeIdValue;&#xA;    }&#xA;    if (blNbr !=null){&#xA;      handlingString = handlingString+contentsBlNbrAttr+contentsBlNbrValue;&#xA;    }&#xA;    if (gdsWeight != null){&#xA;      handlingString = handlingString+contentsWeightKgAttr+contentsWeightKgValue;&#xA;    }&#xA;&#xA;     handlingString = handlingString+XML_END_ELEMENT;&#xA;     handlingString = this.stripInvalidXmlCharacters(handlingString);&#xA;     inElementList.append(handlingString);&#xA;     //Add Seal Element&#xA;    String sealsOpenAttr = &quot;&lt;seals&quot;;&#xA;    String seals1Attr = &quot; seal-1=&quot;;&#xA;    String seals1Value = XML_OVERRIDE+inUnit.getUnitSealNbr1()+XML_OVERRIDE;&#xA;    if (inUnit.getUnitSealNbr1() != null){&#xA;      String sealsString = sealsOpenAttr+seals1Attr+seals1Value+XML_END_ELEMENT;&#xA;      inElementList.append(sealsString);&#xA;    }&#xA;    return inElementList;&#xA;  }&#xA;&#xA;&#xA;public StringBuffer getUnitEtc(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;def drayStatus = inUnit.getFieldValue(&quot;unitDrayStatus&quot;);&#xA;&#x9;&#x9;if (drayStatus != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;drayStatus = drayStatus.getKey();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;String requiredPower = inUnit.getFieldValue(&quot;unitRequiresPower&quot;) ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;String etcAttrOpn = &quot;&lt;unit-etc&quot;;&#xA;&#x9;&#x9;String etcString = etcAttrOpn;&#xA;&#x9;&#x9;if (requiredPower == &quot;Y&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;etcString = etcString + &quot; requires-power=&quot; + XML_OVERRIDE + requiredPower + XML_OVERRIDE;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (drayStatus !=null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;etcString = etcString + &quot; dray-status=&quot; + XML_OVERRIDE + drayStatus + XML_OVERRIDE;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (drayStatus != null || requiredPower == &quot;Y&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;etcString = etcString + XML_END_ELEMENT;&#xA;&#x9;&#x9;inElementList.append(etcString);&#xA;&#x9;&#x9;}&#xA;&#x9;return inElementList;&#xA;&#x9;}&#xA;&#xA;public getFlagDetails = {Unit inUnit, StringBuffer inElementList, CarrierVisit inCv -&gt;&#xA;&#xA;    String flagOpenCloseAttr = &quot;&lt;flags/&gt;&quot;;&#xA;    String flagOpenAttr = &quot;&lt;flags&gt;&quot;;&#xA;    String flagCloseAttr = &quot;&lt;/flags&gt;&quot;;&#xA;&#x9;String holdIdValue = &quot;&quot;;&#xA;&#x9;String holdString = &quot;&quot;;&#xA;&#x9;addNode = &quot;N&quot;;&#xA;    List unitImpediments = this.getUnitImpediments(inUnit);&#xA;&#xA;    if (unitImpediments.isEmpty()) {&#xA;      return inElementList;&#xA;    }&#xA;    for (ServiceImpediment imp : unitImpediments) {&#xA;      def status = imp.getStatus();&#xA;      if (FlagStatusEnum.ACTIVE.equals(status) || FlagStatusEnum.REQUIRED.equals(status)) {&#xA;        String holdOpenAttr = &quot;&lt;hold&quot;;&#xA;        String holdIdAttr = &quot; id=&quot;;&#xA;        String holdId = imp.getFlagType().getId();&#xA;&#x9;&#x9;String flgtypPurpose = imp.getFlagType().getPurpose().getKey();&#xA;&#x9;&#x9;//println (&quot;holdId &quot;+ holdId +&quot; flgtypPurpose &quot;+flgtypPurpose);&#xA;&#x9;&#x9;if (flgtypPurpose != &quot;PERMISSION&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;addNode = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;holdIdValue = XML_OVERRIDE + holdId + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;holdString = holdString + holdOpenAttr + holdIdAttr + holdIdValue + XML_END_ELEMENT;&#xA;&#x9;&#x9;}&#xA;&#x9;  }&#xA;    }&#xA;&#xA;&#x9;if (addNode == &quot;Y&quot;)&#xA;&#x9;{&#xA;&#x9;&#x9;holdString = this.stripInvalidXmlCharacters(holdString);&#xA;&#x9;&#x9;holdString = this.ModifyEscapeChar(holdString);&#xA;&#x9;&#x9;holdString = flagOpenAttr + holdString + flagCloseAttr&#xA;&#x9;&#x9;inElementList.append(holdString);&#xA;&#x9;}&#xA;&#xA;&#x9;return inElementList;&#xA;  }&#xA;&#xA;private List getUnitImpediments (Unit inUnit){&#xA;&#xA;    ServicesManager serviceManager = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;    List unitImpediments = serviceManager.getImpedimentsForEntity(inUnit);&#xA;    return unitImpediments;&#xA;  }&#xA;&#xA;private String formatDate(Date inDate) {&#xA;    SimpleDateFormat yyyyMMdd = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;    SimpleDateFormat hhmmss = new SimpleDateFormat(&quot;HH:mm:ss.SSS&quot;);&#xA;    String sDate = yyyyMMdd.format(inDate) + &quot;T&quot; + hhmmss.format(inDate);&#xA;    return sDate&#xA;  }&#xA;&#xA;private String formatRdsDate(Date inDate) {&#xA;    SimpleDateFormat yyyyMMdd = new SimpleDateFormat(&quot;MM/dd/yyyy&quot;);&#xA;    SimpleDateFormat hhmmss = new SimpleDateFormat(&quot;HH:mm:ss&quot;);&#xA;    String rdsDate = yyyyMMdd.format(inDate) + &quot; &quot; + hhmmss.format(inDate);&#xA;    return rdsDate&#xA;  }&#xA;&#xA;public String findCarrierVisitMode (CarrierVisit inCv){&#xA;&#xA;    final LocTypeEnum carrierMode = inCv.getCvCarrierMode();&#xA;    if (carrierMode.equals(LocTypeEnum.VESSEL)){&#xA;      return &quot;VESSEL&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.TRUCK)){&#xA;      return &quot;TRUCK&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.TRAIN)){&#xA;      return &quot;TRAIN&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.YARD)){&#xA;      return &quot;YARD&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.RAILCAR)){&#xA;      return &quot;TRAIN&quot;;&#xA;    }&#xA;&#x9;else{&#xA;      return &quot;UNKNOWN&quot;;&#xA;    }&#xA;  }&#xA;&#xA;&#xA;public String findEquipmentMaterial(Equipment inEq){&#xA;&#xA;    String material=&quot;&quot;;&#xA;    if ((EquipMaterialEnum.ALUMINUM.equals(inEq.getEqMaterial()))){&#xA;      material = XML_OVERRIDE+&quot;ALUMINUM&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((EquipMaterialEnum.STEEL.equals(inEq.getEqMaterial()))){&#xA;      material = XML_OVERRIDE+&quot;STEEL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((EquipMaterialEnum.UNKNOWN.equals(inEq.getEqMaterial()))){&#xA;      material = XML_OVERRIDE+&quot;UNKNOWN&quot;+XML_OVERRIDE;&#xA;    }&#xA;    return material;&#xA;  }&#xA;&#xA;public String findUnitNbr(Unit inUnit){&#xA;&#xA;    Equipment eq = inUnit.getPrimaryEq();&#xA;    String  equipId = eq.getEqIdFull();&#xA;    equipId = XML_OVERRIDE+equipId+XML_OVERRIDE;&#xA;    return equipId;&#xA;   }&#xA;&#xA;public String findUnitCategory(Unit inUnit){&#xA;&#xA;    String category=&quot;&quot;;&#xA;    if ((UnitCategoryEnum.EXPORT.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;EXPORT&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((UnitCategoryEnum.IMPORT.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;IMPORT&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((UnitCategoryEnum.THROUGH.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;THROUGH&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((UnitCategoryEnum.TRANSSHIP.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;TRANSSHIP&quot;+XML_OVERRIDE;&#xA;    }&#xA;    return category;&#xA;  }&#xA;&#xA;public String findUnitFreightKind(Unit inUnit){&#xA;&#xA;    String freightKind=&quot;&quot;;&#xA;    if ((FreightKindEnum.MTY.equals(inUnit.getUnitFreightKind()))){&#xA;      freightKind = XML_OVERRIDE+&quot;MTY&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((FreightKindEnum.LCL.equals(inUnit.getUnitFreightKind()))){&#xA;      freightKind = XML_OVERRIDE+&quot;LCL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((FreightKindEnum.FCL.equals(inUnit.getUnitFreightKind()))){&#xA;      freightKind = XML_OVERRIDE+&quot;FCL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    return freightKind;&#xA;  }&#xA;&#xA;public String getTimeFormat(String inDate)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;String outDate = null;&#xA;&#x9;&#x9;DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#xA;&#x9;&#x9;if (inDate != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Date date = new SimpleDateFormat(&quot;EEE MMM dd hh:mm:ss zzz yyyy&quot;, Locale.ENGLISH).parse(inDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outDate = df.format(date);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;catch (de)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Date date = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;, Locale.ENGLISH).parse(inDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outDate = df.format(date);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;outDate = outDate + &quot;T00:00:00.000&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;return outDate;&#xA;&#x9;&#x9;}&#xA;&#xA;public StringBuffer getUfvDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;def ufv = inUnit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#xA;&#x9;&#x9;if (ufv != null){&#xA;&#x9;&#x9;&#x9;String addTag = &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;String ufvflexdate1 = ufv.getFieldValue(&quot;ufvFlexDate01&quot;);&#xA;&#x9;&#x9;&#x9;String ufvflexdate2 = ufv.getFieldValue(&quot;ufvFlexDate02&quot;);&#xA;&#x9;&#x9;&#x9;String ufvflexdate3 = ufv.getFieldValue(&quot;ufvFlexDate03&quot;);&#xA;&#x9;&#x9;&#x9;String ufvflexdate4 = ufv.getFieldValue(&quot;ufvFlexDate04&quot;);&#xA;&#x9;&#x9;&#x9;String ufvflexdate5 = ufv.getFieldValue(&quot;ufvFlexDate05&quot;);&#xA;&#x9;&#x9;&#x9;String ufvflexdate6 = ufv.getFieldValue(&quot;ufvFlexDate06&quot;);&#xA;&#x9;&#x9;&#x9;String ufvflexdate7 = ufv.getFieldValue(&quot;ufvFlexDate07&quot;);&#xA;&#x9;&#x9;&#x9;String ufvflexdate8 = ufv.getFieldValue(&quot;ufvFlexDate08&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;String ufvflexString1 = ufv.getFieldValue(&quot;ufvFlexString1&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString1&quot;)) : null;&#xA;&#x9;&#x9;&#x9;String ufvflexString2 = ufv.getFieldValue(&quot;ufvFlexString2&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString2&quot;)) : null;&#xA;&#x9;&#x9;&#x9;String ufvflexString3 = ufv.getFieldValue(&quot;ufvFlexString3&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString3&quot;)) : null;&#xA;&#x9;&#x9;&#x9;String ufvflexString4 = ufv.getFieldValue(&quot;ufvFlexString4&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString4&quot;)) : null;&#xA;&#xA;&#x9;&#x9;&#x9;String date1Attr = &quot; ufv-flex-date-1=&quot;;&#xA;&#x9;&#x9;&#x9;String date2Attr = &quot; ufv-flex-date-2=&quot;;&#xA;&#x9;&#x9;&#x9;String date3Attr = &quot; ufv-flex-date-3=&quot;;&#xA;&#x9;&#x9;&#x9;String date4Attr = &quot; ufv-flex-date-4=&quot;;&#xA;&#x9;&#x9;&#x9;String date5Attr = &quot; ufv-flex-date-5=&quot;;&#xA;&#x9;&#x9;&#x9;String date6Attr = &quot; ufv-flex-date-6=&quot;;&#xA;&#x9;&#x9;&#x9;String date7Attr = &quot; ufv-flex-date-7=&quot;;&#xA;&#x9;&#x9;&#x9;String date8Attr = &quot; ufv-flex-date-8=&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;String string1Attr = &quot; uvf-flex-1=&quot;;&#xA;&#x9;&#x9;&#x9;String string2Attr = &quot; uvf-flex-2=&quot;;&#xA;&#x9;&#x9;&#x9;String string3Attr = &quot; uvf-flex-3=&quot;;&#xA;&#x9;&#x9;&#x9;String string4Attr = &quot; uvf-flex-4=&quot;;&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;String ufvFlexOpenAttr = &quot;&lt;ufv-flex&quot;&#xA;&#x9;&#x9;&#x9;String ufvFlexString = ufvFlexOpenAttr;&#xA;&#xA;&#x9;&#x9;&#x9;if (ufvflexdate8 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate8 = this.getTimeFormat(ufvflexdate8)&#xA;&#x9;&#x9;&#x9;&#x9;String date8Value = XML_OVERRIDE+ufvflexdate8+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date8Attr+date8Value;&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (ufvflexdate7 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate7 = this.getTimeFormat(ufvflexdate7)&#xA;&#x9;&#x9;&#x9;&#x9;String date7Value = XML_OVERRIDE+ufvflexdate7+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date7Attr+date7Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (ufvflexdate6 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate6 = this.getTimeFormat(ufvflexdate6)&#xA;&#x9;&#x9;&#x9;&#x9;String date6Value = XML_OVERRIDE+ufvflexdate6+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date6Attr+date6Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (ufvflexdate5 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate5 = this.getTimeFormat(ufvflexdate5)&#xA;&#x9;&#x9;&#x9;&#x9;String date5Value = XML_OVERRIDE+ufvflexdate5+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date5Attr+date5Value;&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (ufvflexdate4 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate4 = this.getTimeFormat(ufvflexdate4)&#xA;&#x9;&#x9;&#x9;&#x9;String date4Value = XML_OVERRIDE+ufvflexdate4+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date4Attr+date4Value;&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (ufvflexdate3 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate3 = this.getTimeFormat(ufvflexdate3)&#xA;&#x9;&#x9;&#x9;&#x9;String date3Value = XML_OVERRIDE+ufvflexdate3+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date3Attr+date3Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (ufvflexdate2 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate2 = this.getTimeFormat(ufvflexdate2)&#xA;&#x9;&#x9;&#x9;&#x9;String date2Value = XML_OVERRIDE+ufvflexdate2+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date2Attr+date2Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (ufvflexdate1 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate1 = this.getTimeFormat(ufvflexdate1)&#xA;&#x9;&#x9;&#x9;&#x9;String date1Value = XML_OVERRIDE+ufvflexdate1+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date1Attr+date1Value;&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (ufvflexString1 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string1Attr+string1Value;&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (ufvflexString2 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string2Attr+string2Value;&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (ufvflexString3 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string3Attr+string3Value;&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (ufvflexString4 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string4Attr+string4Value;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = this.stripInvalidXmlCharacters(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (addTag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;//ufvFlexString = this.stripInvalidXmlCharacters(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = this.ModifyEscapeChar(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(ufvFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;public StringBuffer getUnitFlexDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;String  unitflexString1 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString2 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString3 = &quot;&quot;;&#xA;&#x9;&#x9;String  unitflexString4 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString5 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString6 = &quot;&quot;;&#xA;&#x9;&#x9;String  unitflexString7 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString8 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString9 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString10 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString12 = &quot;&quot;;&#xA;&#xA;&#x9;&#x9;unitflexString1 = inUnit.getFieldValue(&quot;unitFlexString01&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString01&quot;)): null;&#xA;&#x9;&#x9;unitflexString2 = inUnit.getFieldValue(&quot;unitFlexString02&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString02&quot;)): null;&#xA;&#x9;&#x9;unitflexString3 = inUnit.getFieldValue(&quot;unitFlexString03&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString03&quot;)): null;&#xA;&#x9;&#x9;unitflexString4 = inUnit.getFieldValue(&quot;unitFlexString04&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString04&quot;)): null;&#xA;&#x9;&#x9;unitflexString5 = inUnit.getFieldValue(&quot;unitFlexString05&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString05&quot;)): null;&#xA;&#x9;&#x9;unitflexString6 = inUnit.getFieldValue(&quot;unitFlexString06&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString06&quot;)): null;&#xA;&#x9;&#x9;unitflexString7 = inUnit.getFieldValue(&quot;unitFlexString07&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString07&quot;)): null;&#xA;&#x9;&#x9;unitflexString8 = inUnit.getFieldValue(&quot;unitFlexString08&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString08&quot;)): null;&#xA;&#x9;&#x9;unitflexString9 = inUnit.getFieldValue(&quot;unitFlexString09&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString09&quot;)): null;&#xA;&#x9;&#x9;unitflexString10 = inUnit.getFieldValue(&quot;unitFlexString10&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString10&quot;)): null;&#xA;&#x9;&#x9;unitflexString12 = inUnit.getFieldValue(&quot;unitFlexString12&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString12&quot;)): null;&#xA;&#xA;&#xA;&#x9;&#x9;String unitFlexOpenAttr = &quot;&lt;unit-flex&quot;&#xA;&#x9;&#x9;String string1Attr = &quot; unit-flex-1=&quot;;&#xA;&#x9;&#x9;String string2Attr = &quot; unit-flex-2=&quot;;&#xA;&#x9;&#x9;String string3Attr = &quot; unit-flex-3=&quot;;&#xA;&#x9;&#x9;String string4Attr = &quot; unit-flex-4=&quot;;&#xA;&#x9;&#x9;String string5Attr = &quot; unit-flex-5=&quot;;&#xA;&#x9;&#x9;String string6Attr = &quot; unit-flex-6=&quot;;&#xA;&#x9;&#x9;String string7Attr = &quot; unit-flex-7=&quot;;&#xA;&#x9;&#x9;String string8Attr = &quot; unit-flex-8=&quot;;&#xA;&#x9;&#x9;String string9Attr = &quot; unit-flex-9=&quot;;&#xA;&#x9;&#x9;String string10Attr = &quot; unit-flex-10=&quot;;&#xA;&#x9;&#x9;String string12Attr = &quot; unit-flex-12=&quot;;&#xA;&#xA;&#x9;&#x9;String string1Value = XML_OVERRIDE+unitflexString1+XML_OVERRIDE;&#xA;&#x9;&#x9;String string2Value = XML_OVERRIDE+unitflexString2+XML_OVERRIDE;&#xA;&#x9;&#x9;String string3Value = XML_OVERRIDE+unitflexString3+XML_OVERRIDE;&#xA;&#x9;&#x9;String string4Value = XML_OVERRIDE+unitflexString4+XML_OVERRIDE;&#xA;&#x9;&#x9;String string5Value = XML_OVERRIDE+unitflexString5+XML_OVERRIDE;&#xA;&#x9;&#x9;String string6Value = XML_OVERRIDE+unitflexString6+XML_OVERRIDE;&#xA;&#x9;&#x9;String string7Value = XML_OVERRIDE+unitflexString7+XML_OVERRIDE;&#xA;&#x9;&#x9;String string8Value = XML_OVERRIDE+unitflexString8+XML_OVERRIDE;&#xA;&#x9;&#x9;String string9Value = XML_OVERRIDE+unitflexString9+XML_OVERRIDE;&#xA;&#x9;&#x9;String string10Value = XML_OVERRIDE+unitflexString10+XML_OVERRIDE;&#xA;&#x9;&#x9;String string12Value = XML_OVERRIDE+unitflexString12+XML_OVERRIDE;&#xA;&#xA;&#xA;&#x9;&#x9;String unitFlexString = unitFlexOpenAttr;&#xA;&#xA;&#x9;&#x9;if (unitflexString12 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string12Attr+string12Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString10 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string10Attr+string10Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString9 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string9Attr+string9Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (unitflexString8 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string8Attr+string8Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString7 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string7Attr+string7Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString6 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string6Attr+string6Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString5 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string5Attr+string5Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString4 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string4Attr+string4Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString3 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string3Attr+string3Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString2 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string2Attr+string2Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString1 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string1Attr+string1Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (unitflexString1 != null || unitflexString2 != null || unitflexString3 != null || unitflexString4 != null || unitflexString5 != null || unitflexString6 != null&#xA;&#x9;&#x9;&#x9;|| unitflexString7 != null || unitflexString8 != null || unitflexString9 != null || unitflexString10 != null || unitflexString12 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;//unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;unitFlexString = this.ModifyEscapeChar(unitFlexString);&#xA;&#x9;&#x9;&#x9;inElementList.append(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;public StringBuffer geTimeStamp(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;{&#xA;&#xA;&#x9;&#x9;def ufv = inUnit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;if (ufv !=null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;String timeIn = ufv.ufvTimeIn;&#xA;&#x9;&#x9;&#x9;String timeOut = ufv.ufvTimeOut;&#xA;&#x9;&#x9;&#x9;String timeLoad = ufv.ufvTimeOfLoading;&#xA;&#xA;&#x9;&#x9;    String timeStampAttrOpn = &quot;&lt;timestamps&quot;;&#xA;&#x9;&#x9;&#x9;String timeStampString = timeStampAttrOpn;&#xA;&#x9;&#x9;&#x9;if (timeIn !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + &quot; time-in=&quot; + XML_OVERRIDE + timeIn + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (timeOut !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + &quot; time-out=&quot; + XML_OVERRIDE + timeOut + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (timeLoad !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + &quot; time-load=&quot; + XML_OVERRIDE + timeLoad + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (timeIn != null || timeOut != null || timeLoad != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(timeStampString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;public String stripInvalidXmlCharacters(String input){&#xA;    String specialCharacter = &quot;&amp;&quot;;&#xA;    try {&#xA;    if (input.contains(specialCharacter)) {&#xA;       input = input.replaceAll(&quot;&amp;&quot;, &quot;&amp;amp;&quot;);&#xA;       //LOGGER.warn(&quot;sb:&quot; + input);&#xA;    }&#xA;&#xA;&#x9;if (input.contains(&quot;null&quot;)) {&#xA;       input = input.replaceAll(&quot;null&quot;, &quot; &quot;);&#xA;       //LOGGER.warn(&quot;sb:&quot; + input);&#xA;    }&#xA;    }&#xA;    catch (e){&#xA;&#xA;    }&#xA;    return input;&#xA;  }&#xA;&#xA; public String removeDoubleQuotes(String input){&#xA;    String specialCharacter = &quot;&amp;&quot;;&#xA;    try {&#xA;    if (input.contains(&quot;\&quot;&quot;)) {&#xA;       input = input.replaceAll(&quot;\&quot;&quot;, &quot;#quot;&quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;&lt;&quot;)) {&#xA;       input = input.replaceAll(&quot;&lt;&quot;, &quot;#lt;&quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;&gt;&quot;)) {&#xA;       input = input.replaceAll(&quot;&gt;&quot;, &quot;#gt;&quot;);&#xA;    }&#xA;    }&#xA;    catch (e){&#xA;&#xA;    }&#xA;    return input;&#xA;  }&#xA;&#xA; public String ModifyEscapeChar(String input){&#xA;    try {&#xA;    if (input.contains(&quot;#quot&quot;)) {&#xA;       input = input.replaceAll(&quot;#quot;&quot;, &quot;&amp;quot;&quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;#lt&quot;)) {&#xA;       input = input.replaceAll(&quot;#lt;&quot;, &quot;&amp;lt;&quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;#gt&quot;)) {&#xA;       input = input.replaceAll(&quot;#gt;&quot;, &quot;&amp;gt;&quot;);&#xA;    }&#xA;    }&#xA;    catch (e){&#xA;&#xA;    }&#xA;    return input;&#xA;  }&#xA;&#xA;    private static final Logger LOGGER = Logger.getLogger(MATProcessNewVess.class);&#xA;}" />
<digital-asset id="GvyMNSRefDataLookup" short-description="GvyMNSRefDataLookup" is-pre-deployed="N" groovy-code="import java.sql.Connection;&#xA;import java.sql.PreparedStatement;&#xA;import java.sql.ResultSet;&#xA;import javax.sql.DataSource;&#xA;import javax.naming.Context;&#xA;import javax.naming.InitialContext;&#xA;&#xA;/**&#xA;*  A1 SKB 05/11/2009  Added POD lookup&#xA;*  A2 SKB 06/25/2009  Removed connection to prevent memory leak&#xA;*  A3 GR  10/21/10    Added Chassis RFID WSDL lookup Code&#xA;                      Added Env Spec IP lookup code for JMS Server Connectivity&#xA;*  A4 GR  08/19/11    Added ActiveMQ InitiaContextFactory Lookup&#xA;*/&#xA;class GvyMNSRefDataLookup {&#xA;&#xA;&#x9;&#xA;&#x9;public Connection connect() {&#xA;&#xA;&#x9;&#x9;&#x9;// Obtain our environment naming context&#xA;&#x9;&#x9;&#x9;Context initCtx = new InitialContext();&#xA;&#x9;&#x9;&#x9;Context envCtx = (Context) initCtx.lookup(&quot;java:comp/env&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;// Look up our data source&#xA;&#x9;&#x9;&#x9;DataSource ds = (DataSource)envCtx.lookup(&quot;jdbc.ds.tdp.nontx&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;// Allocate and use a connection from the pool&#xA;&#x9;&#x9;&#x9;Connection conn = ds.getConnection();&#xA;&#x9;&#x9;&#x9;return conn;&#xA;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void disconnect(Connection conn) {&#xA;&#x9;&#x9;if(conn != null) conn.close();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public String lookup(String key, Connection conn) {&#xA;&#x9;&#x9;PreparedStatement stmt = null;&#xA;&#x9;&#x9;ResultSet rs = null;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;  String sql = &quot;select value from TOS_APP_PARAMETER where key = ?&quot;;&#xA;&#x9;&#x9;  stmt = conn.prepareStatement(sql);&#xA;&#x9;&#x9;  stmt.setString(1,key);&#xA;&#x9;&#x9;  //rs = stmt.executeQuery();&#xA;&#x9;      //if(rs.next()) {&#xA;&#x9;    //&#x9;  return rs.getString(1);&#xA;&#x9;     // }&#xA;&#x9;      &#xA;&#x9;    } finally {&#xA;&#x9;    &#x9;if(stmt != null) stmt.close();&#xA;&#x9;    &#x9;//if(rs != null )rs.close();&#xA;&#x9;    }&#xA;&#x9;    return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;&#xA;// Code for getNowServer&#xA;    public static String host;&#xA;&#x9;public static boolean dynamic = true;&#xA;&#x9;&#xA;&#x9;public static synchronized void initName() {&#xA;&#x9;&#x9;GvyMNSRefDataLookup lookup = new GvyMNSRefDataLookup();&#xA;&#x9;&#x9;Connection conn;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;conn = lookup.connect();&#xA;&#x9;&#x9;&#x9;host = lookup.lookup(&quot;NOW_URL&quot;, conn);&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;String dynamicString =  lookup.lookup(&quot;NOW_DYNAMIC&quot;,conn);&#xA;&#x9;&#x9;&#x9;dynamic = Boolean.parseBoolean(dynamicString);&#xA;&#x9;&#x9;    println(&quot;DEBUG UPDT getNowServer &quot;+host);&#xA;&#xA;&#x9;&#x9;} finally {&#xA;&#x9;&#x9;&#x9;lookup.disconnect(conn);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//println(&quot;initNowServer&quot;)&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public getNowServer() {&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if(dynamic == true) {&#xA;&#x9;&#x9;&#x9;initName();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return host;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;//A3 &#xA;&#x9;public static String chasRfidHost;&#xA;&#x9;public static String n4TopicHost;&#xA;&#x9;public static boolean chasRfidDynamic = true;&#xA;&#x9;&#xA;&#x9;public static synchronized void initChasRfid() {&#xA;&#x9;&#x9;GvyMNSRefDataLookup lookup = new GvyMNSRefDataLookup();&#xA;&#x9;&#x9;Connection conn;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;conn = lookup.connect();&#xA;&#x9;&#x9;&#x9;chasRfidHost = lookup.lookup(&quot;CHAS_RFID_NOW_URL&quot;, conn);&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;String dynamicChasStr =  lookup.lookup(&quot;NOW_DYNAMIC&quot;,conn);&#xA;&#x9;&#x9;&#x9;chasRfidDynamic = Boolean.parseBoolean(dynamicChasStr);&#xA;&#x9;&#x9;    println(&quot;DEBUG UPDT getNowServer &quot;+chasRfidHost);&#xA;&#xA;&#x9;&#x9;} finally {&#xA;&#x9;&#x9;&#x9;lookup.disconnect(conn);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//println(&quot;initNowServer&quot;)&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public getChasRfidUrl() {&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if(chasRfidDynamic == true) {&#xA;&#x9;&#x9;&#x9;initChasRfid();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//println(&quot;Called getChasRfidUrl&quot;);&#xA;&#x9;&#x9;return chasRfidHost;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#xA;&#x9;public static synchronized String getN4TopicAddress() {&#xA;&#x9;&#x9;GvyMNSRefDataLookup lookup = new GvyMNSRefDataLookup();&#xA;&#x9;&#x9;Connection conn;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;conn = lookup.connect();&#xA;&#x9;&#x9;&#x9;n4TopicHost = lookup.lookup(&quot;JMS_URL&quot;, conn);&#xA;&#xA;&#x9;&#x9;} finally {&#xA;&#x9;&#x9;&#x9;lookup.disconnect(conn);&#xA;&#x9;&#x9;}&#xA;       return n4TopicHost&#xA;&#x9;}&#xA;&#x9;&#xA;    //A3 Ends&#xA;}" />
<digital-asset id="ReviewForStowTempDiscrepancy" short-description="ReviewForStowTempDiscrepancy" is-pre-deployed="N" groovy-code="import com.navis.argo.ContextHelper;&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.framework.util.DateUtil;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import java.math.BigDecimal;&#xA;&#xA;/**&#xA; * Created with IntelliJ IDEA.&#xA; * User: lcrouch&#xA; * Date: 9/3/13&#xA; * Time: 10:10 AM&#xA; * Description: Email notification for Review for Stow Temp Discrepancy&#xA; */&#xA;public class ReviewForStowTempDiscrepancy extends GroovyApi{&#xA;&#xA;    public static String EMAIL_FROM = &quot;1aktosdevteam@matson.com&quot;;&#xA;    public static String EMAIL_TO = &quot;1aktosdevteam@matson.com&quot;;&#xA;    public static String SUBJECT = &quot;Review For Stow Temp. Discrepancy&quot;;&#xA;&#xA;    public void execute(Unit unit, Object event) {&#xA;        Double tempRequiredC;&#xA;        double tempRequiredF;&#xA;&#xA;        String tempSettingStr;&#xA;        Double tempSettingC;&#xA;        double tempSettingF;&#xA;&#xA;&#xA;        try {&#xA;&#xA;            String ctrNbr = unit.getUnitId();&#xA;            String dest = unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;);&#xA;            String blNbr = unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;);&#xA;&#xA;            if (unit != null &amp;&amp; unit.getUnitGoods() != null &amp;&amp; unit.getUnitGoods().getGdsReeferRqmnts() != null) {&#xA;                tempRequiredC = unit.getUnitGoods().getGdsReeferRqmnts().getRfreqTempRequiredC();&#xA;                tempRequiredF = celsiusToFahrenheit(tempRequiredC);&#xA;            }&#xA;&#xA;&#xA;            tempSettingStr = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexString07&quot;);&#xA;            tempSettingF = tempSettingStr != null &amp;&amp; tempSettingStr.trim().length() &gt; 0 ? getValue(tempSettingStr.replace('F','')) : 0.0;&#xA;            tempSettingC = tempSettingF == null ? null : (tempSettingF != 0.0 ? fahrenheitToCelsius(tempSettingF) : 0.0)&#xA;&#xA;            println(&quot;ReviewForStowTempDiscrepancy:: tempRequiredF:: &quot;+tempRequiredF);&#xA;            println(&quot;ReviewForStowTempDiscrepancy:: tempSettingF:: &quot;+tempSettingF);&#xA;&#xA;            if (tempRequiredC != null &amp;&amp; tempSettingC != null &amp;&amp; (tempRequiredC.compareTo(tempSettingC)!= 0)) {&#xA;                println(&quot;ReviewForStowTempDiscrepancy:: Sending email to notify discrepancy in temperature&quot;);&#xA;                String tempReq = tempRequiredF != null ? tempRequiredF : &quot;--&quot;;&#xA;                String tempSet = tempSettingF != null ? tempSettingF : &quot;--&quot;;&#xA;                String body = generateReport(ctrNbr, blNbr, tempReq, tempSet, dest, &quot;Review For Stow&quot;);&#xA;                def gvyEmailSender = getGroovyClassInstance(&quot;EmailSender&quot;);&#xA;                gvyEmailSender.custSendEmail(EMAIL_TO, SUBJECT, body);&#xA;            }&#xA;&#xA;&#xA;&#xA;        } catch (Exception e) {&#xA;            log(&quot;Exception in ReviewForStowTempDiscrepancy(): &quot; + e);&#xA;        }&#xA;    }&#xA;&#xA;    public Object getValue(Object tempvalue)&#xA;    {&#xA;        if(tempvalue != null)&#xA;        {&#xA;            double setDecimalPoint = new BigDecimal(&quot;&quot;+tempvalue).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();&#xA;            Double setDecimalPointTemp = new Double(setDecimalPoint);&#xA;            return setDecimalPointTemp;&#xA;        }&#xA;        return null;&#xA;    }&#xA;&#xA;    public double fahrenheitToCelsius(Double fahrenheit)&#xA;    {&#xA;        double fahr = (fahrenheit - 32) * 5/9;&#xA;        double result = new BigDecimal(&quot;&quot;+fahr).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();&#xA;        return result;&#xA;    }&#xA;&#xA;    public double celsiusToFahrenheit(Double celsius)&#xA;    {&#xA;        double fahr = (celsius * 9/5) + 32;&#xA;        double result = new BigDecimal(&quot;&quot;+fahr).setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue();&#xA;        return result;&#xA;    }&#xA;&#xA;    public String generateReport(String ctrNbr, String blNbr, Object tempReq, Object tempSet, String dest, String noticeFrom) {&#xA;        def timezone = ContextHelper.getThreadUserTimezone();&#xA;        def eventTime = DateUtil.convertDateToLocalTime(new Date(), timezone);&#xA;        StringBuffer header = new StringBuffer();&#xA;        header.append(&quot;    Date:&quot;+eventTime);&#xA;        header.append(&quot;\n\n\n                       MATSON TERMINALS - CONTAINER YARD     &quot;);&#xA;        header.append(&quot;\n\n\n    From    : &quot;+noticeFrom);&#xA;        header.append(&quot;\n    Subject : Review For Stow Temperature Discrepancy&quot;);&#xA;        header.append(&quot;\n\n\n    Container: &quot;+ctrNbr+&quot;   Booking # : &quot;+blNbr+&quot;   Temp Required: &quot;+tempReq+&quot;   Temp Setting: &quot;+tempSet+&quot;   Port: &quot;+dest);&#xA;        header.append(&quot;\n\n\n\n&quot;);&#xA;        return header.toString();&#xA;    }&#xA;}&#xA;" />
<digital-asset id="MatGetUpdatedConsignee" short-description="MatGetUpdatedConsignee" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.road.business.model.*;&#xA;import java.util.Calendar;&#xA;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;&#xA;import com.navis.road.RoadField;&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;&#xA;import com.navis.argo.ArgoConfig;&#xA;import com.navis.argo.ArgoPropertyKeys;&#xA;import com.navis.argo.ArgoRefField;&#xA;import com.navis.argo.business.reference.AgentRepresentation;&#xA;import com.navis.argo.business.atoms.BizRoleEnum;&#xA;import com.navis.argo.business.reference.Agent;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import java.sql.Connection;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 01/07/2013&#xA;* Description: This groovy is used to generate the Stowplan/Manifest Discrepancies after Stowplan and Manifest process&#xA;*/&#xA;&#xA;public class MatGetUpdatedConsignee extends GroovyInjectionBase&#xA;{&#xA;public boolean execute(Map params)&#xA;&#x9;{&#xA;&#x9;&#x9;def inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;//private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;//private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;  String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;  String  emailFrom = '1aktosdevteam@matson.com';&#xA;&#x9;&#x9;Connection conn;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;HashMap map = null;&#xA;&#x9;&#x9;&#x9;ArrayList reportUnitList =  new ArrayList();&#xA;&#x9;&#x9;&#x9;List shipperList = null;&#xA;&#x9;&#x9;&#x9;List unitList = null;&#xA;&#x9;&#x9;&#x9;shipperList = getConsigneeChangedYesterday();&#xA;&#x9;&#x9;&#x9;println(&quot;End : MatUpdateShipperNotes&quot;);&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;if(shipperList != null) {&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iter = shipperList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def shipper = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String shipperId = shipper.bzuId;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def GvyRefDataLookup = inj.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//conn = GvyRefDataLookup.connect();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//def orgnConsignee = GvyRefDataLookup.getOrgnlConsignee(shipperId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def orgnConsignee = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitList = getUnits(shipperId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(unitList != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator unitIter = unitList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;while(unitIter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = unitIter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map = new HashMap();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitNbr&quot;, unit.unitId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString01&quot;, shipperId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString02&quot;, shipper.bzuName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString03&quot;, orgnConsignee);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString04&quot;, shipper.bzuChanger);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate01&quot;, shipper.bzuChanged);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate02&quot;, unit.getFieldValue(&quot;unitActiveUfv.ufvTimeOfLastMove&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitActiveUfv.ufvTimeOfLastMove&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(map != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportUnitList.add(map);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;println(&quot;reportUnitList.size() &quot;+reportUnitList.size());&#xA;&#x9;&#x9;&#x9;if (reportUnitList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report&#xA;&#x9;&#x9;&#x9;&#x9;JRDataSource ds = new JRMapCollectionDataSource(reportUnitList);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;HashMap reportDesignsmap = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;CONSIGNEE CHANGE&quot;,ds);&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailExcelReport(ds,parameters, &quot;CONSIGNEE CHANGE&quot;,emailTo, &quot;Consignee Changes&quot; ,&quot;Attached consignee changed yesterday report &quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList ------- Success&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;}catch (Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;No design&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo, &quot;CONSIGNEE CHANGE&quot;,&quot;No Changes are reported&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;reportUnitList ------- No data to print&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;&#x9;println(e)&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;public void generateReport()&#xA;&#x9;{&#xA;&#x9;&#x9;def inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;//private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;//private final String emailTo = &quot;1aktosdevteam@matson.com;&quot;;&#xA;&#x9;&#x9; String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;  String  emailFrom = '1aktosdevteam@matson.com';&#xA;&#x9;&#x9;Connection conn;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;HashMap map = null;&#xA;&#x9;&#x9;&#x9;HashMap shipperMap = null;&#xA;&#x9;&#x9;&#x9;ArrayList reportUnitList =  new ArrayList();&#xA;&#x9;&#x9;&#x9;ArrayList reportShipperList =  new ArrayList();&#xA;&#x9;&#x9;&#x9;List shipperList = null;&#xA;&#x9;&#x9;&#x9;List unitList = null;&#xA;&#x9;&#x9;&#x9;shipperList = getConsigneeChangedYesterday();&#xA;&#x9;&#x9;&#x9;println(&quot;End : MatUpdateShipperNotes&quot;);&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;if(shipperList != null) {&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iter = shipperList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;shipperMap = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def shipper = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String shipperId = shipper.bzuId;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def GvyRefDataLookup = inj.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//conn = GvyRefDataLookup.connect();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;Connection ::&quot;+conn);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//def orgnConsignee = GvyRefDataLookup.getOrgnlConsignee(shipperId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def orgnConsignee = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;shipperMap.put(&quot;UnitFlexString01&quot;, shipperId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;shipperMap.put(&quot;UnitFlexString02&quot;, shipper.bzuName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;shipperMap.put(&quot;UnitFlexString03&quot;, orgnConsignee);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;shipperMap.put(&quot;UnitFlexString04&quot;, shipper.bzuChanger);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;shipperMap.put(&quot;UfvFlexDate01&quot;, shipper.bzuChanged);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;shipperMap.put(&quot;UnitFlexString05&quot;, shipper.bzuCreator);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;shipperMap.put(&quot;UfvFlexDate03&quot;, shipper.bzuCreated);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(shipperMap != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportShipperList.add(shipperMap);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/*unitList = getUnits(shipperId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(unitList != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator unitIter = unitList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;while(unitIter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = unitIter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map = new HashMap();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def tranState = unit.getFieldValue(&quot;unitActiveUfv.ufvTransitState&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;tranState = tranState != null ? tranState.getKey():null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;tranState ::::&quot;+tranState);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitNbr&quot;, unit.unitId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString01&quot;, shipperId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString02&quot;, shipper.bzuName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString03&quot;, orgnConsignee);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString04&quot;, shipper.bzuChanger);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate01&quot;, shipper.bzuChanged);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UfvFlexDate02&quot;, unit.getFieldValue(&quot;unitActiveUfv.ufvTimeOfLastMove&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;map.put(&quot;UnitFlexString05&quot;, tranState);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+unit.getFieldValue(&quot;unitActiveUfv.ufvTimeOfLastMove&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(map != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reportUnitList.add(map);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}*/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;println(&quot;reportUnitList.size() &quot;+reportUnitList.size());&#xA;&#x9;&#x9;&#x9;println(&quot;reportShipperList.size() &quot;+reportShipperList.size());&#xA;&#x9;&#x9;&#x9;HashMap parameters = new HashMap();&#xA;&#x9;&#x9;&#x9;HashMap reportDesignsmap = new HashMap();&#xA;&#x9;&#x9;&#x9;String printRpt = &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;if (reportUnitList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report&#xA;&#x9;&#x9;&#x9;&#x9;JRDataSource dsUnit = new JRMapCollectionDataSource(reportUnitList);&#xA;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;CONSIGNEE CHANGE UNIT&quot;,dsUnit);&#xA;&#x9;&#x9;&#x9;&#x9;printRpt = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (reportShipperList.size() &gt; 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;//Create and Mail Report&#xA;&#x9;&#x9;&#x9;&#x9;JRDataSource dsShip = new JRMapCollectionDataSource(reportShipperList);&#xA;&#x9;&#x9;&#x9;&#x9;reportDesignsmap.put(&quot;CONSIGNEE CHANGE&quot;,dsShip);&#xA;&#x9;&#x9;&#x9;&#x9;printRpt = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (&quot;Y&quot;.equals(printRpt)){&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reportRunner.emailXLSReports(reportDesignsmap,parameters, emailTo, &quot;Consignee Update&quot;,&quot;Attached consignee changed yesterday report&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Consignee Change ------- Success&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;}catch (Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;No design&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo, &quot;Consignee Update&quot;,&quot;No Changes are reported&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Consignee Change ------- No data to print&quot;)&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;&#x9;println(e)&#xA;&#x9;&#x9;}&#xA;&#x9;}//&#xA;&#xA;private List getConsigneeChangedYesterday()&#xA;  &#x9;{&#xA;    &#x9;//Date startDate = new Date() -1;&#xA;&#x9;&#x9;/*String trimDate = startDate.format('yyyy-MM-dd')&#xA;&#x9;&#x9;startDate = startDate.parse('yyyy-MM-dd', trimDate);&#xA;&#x9;&#x9;println(&quot;startDate &quot;+ startDate);*/&#xA;&#xA;&#x9;&#x9;Calendar cal = Calendar.getInstance();&#xA;&#x9;&#x9;cal.setTime(new Date());&#xA;&#x9;&#x9;cal.add(Calendar.HOUR_OF_DAY, -12);&#xA;&#x9;&#x9;Date startDate = cal.getTime();&#xA;&#x9;&#x9;println(&quot;startDate &quot;+ startDate);&#x9;&#xA;&#xA;    &#x9;def shipperName = null;&#xA;    &#x9;List shipperListFinal = null;&#xA;    &#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Shipper&quot;).addDqPredicate(PredicateFactory.ge(ArgoRefField.BZU_CHANGED,startDate));&#xA;    &#x9;println(dq);&#xA;    &#x9;List shipperList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;println(&quot;shipperList.size()&quot;+shipperList.size());&#xA;    &#x9;if (shipperList.size() &gt; 0){&#xA;&#x9;&#x9;&#x9;Iterator iterShipper = shipperList.iterator();&#xA;&#x9;&#x9;&#x9;while(iterShipper.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;def shipper = iterShipper.next();&#xA;&#x9;&#x9;&#x9;&#x9;shipperName = shipper.bzuName;&#xA;&#x9;&#x9;&#x9;&#x9;//println(&quot;Shippers change yesterday : &quot;+shipperName +&quot;&lt;&lt;&gt;&gt;&quot;+shipper.bzuId+&quot;&lt;&lt;&gt;&gt;&quot;+shipper.bzuGkey+&quot;&lt;&lt;&gt;&gt;&quot;+shipper.bzuChanged+&quot;&lt;&lt;&gt;&gt;&quot;+shipper.bzuChanger);&#xA;&#x9;&#x9;&#x9;&#x9;//break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return shipperList;&#xA;  &#x9;}&#xA;&#xA;public List getUnits(String shipperId)&#xA;&#x9;{&#xA;&#x9;Date startDate = new Date() - 12;&#xA;&#x9;//String trimDate = startDate.format('yyyy-MM-dd')&#xA;&#x9;//startDate = startDate.parse('yyyy-MM-dd', trimDate);&#xA;&#x9;//Date endDate = startDate + 1;&#xA;&#x9;//println(&quot;startDate &quot;+ startDate);&#xA;&#x9;//println(&quot;endDate &quot;+ endDate);&#xA;&#xA;&#xA;&#x9;&#x9;/*Calendar cal = Calendar.getInstance();&#xA;&#x9;&#x9;cal.setTime(new Date());&#xA;&#x9;&#x9;cal.add(Calendar.HOUR_OF_DAY, -5);&#xA;&#x9;&#x9;Date startDate = cal.getTime();&#xA;&#x9;&#x9;println(&quot;startDate &quot;+ startDate);*/&#xA;&#xA;&#x9;try {&#xA;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#x9;&#x9;&#x9;dq = dq.addDqPredicate(PredicateFactory.ge(UnitField.UFV_TIME_OUT,startDate))&#xA;&#x9;&#x9;&#x9;&#x9;//.addDqPredicate(PredicateFactory.le(UnitField.UFV_TIME_OUT,endDate))&#xA;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UFV_GDS_CONSIGNEE_ID,shipperId));&#xA;&#xA;&#x9;&#x9;&#x9;//println(dq);&#xA;&#x9;&#x9;&#x9;List ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println(&quot;After unitList&quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;return ufvList;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;&#x9;&#x9;println(e.getMessage());&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" />
<digital-asset id="MatCancelPermission" short-description="MatCancelPermission" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.services.business.rules.Flag;&#xA;import com.navis.services.business.rules.Veto;&#xA;import com.navis.services.business.rules.FlagType;&#xA;import com.navis.services.ServicesField;&#xA;import com.navis.argo.business.reference.Chassis;&#xA;import com.navis.argo.ArgoField;&#xA;&#xA;class MatCancelPermission{&#xA;&#xA;/*Cancel the permission by creating new record in Veto entity for the granted permission*/&#xA;&#xA;&#x9;public void execute(String unitId) {&#xA;&#x9;&#x9;println(&quot;Started calling MatCancelPermission.execute &lt;&lt;&gt;&gt;&gt; &quot;+unitId);&#xA;&#x9;  &#x9;def inj = new GroovyInjectionBase();&#xA;&#x9;  &#x9;FlagType ftype = FlagType.findFlagType(&quot;STOP - MTY CONTAINER TOO HEAVY- CALL GATE SUPPORT&quot;);&#xA;&#xA;&#x9;&#x9;List unitList = null;&#xA;&#x9;&#x9;List flagList = null;&#xA;&#x9;&#x9;unitList = getActiveUnits(unitId);&#xA;&#x9;&#x9;println(&quot;unitList.size() &quot;+unitList.size());&#xA;&#x9;&#x9;Iterator unitIterator = unitList.iterator();&#xA;&#x9;&#x9;String ueEquipment = null;&#xA;&#xA;&#x9;&#x9;while(unitIterator.hasNext())&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;def unit = unitIterator.next();&#xA;&#x9;&#x9;&#x9;ueEquipment = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqIdFull&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;flagList = getFlagDetails(ueEquipment,ftype);&#xA;&#xA;&#x9;&#x9;Iterator flagIterator = flagList.iterator();&#xA;&#x9;&#x9;while(flagIterator.hasNext())&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;def flag = flagIterator.next();&#xA;&#x9;&#x9;&#x9;println(&quot;Granter:::&quot;+flag.flagAppliedBy)&#xA;&#xA;&#x9;&#x9;&#x9;String vetoFound = getVetoDetails(flag);&#xA;&#x9;&#x9;&#x9;println(&quot;Is Permission Cancled :::&quot;+vetoFound);&#xA;&#xA;&#x9;&#x9;&#x9;if (vetoFound == &quot;N&quot;) {&#xA;&#x9;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Veto veto = new Veto();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;veto.setVetoBlockedFlag(flag);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;veto.setVetoAppliedToClass(flag.flagAppliedToClass);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;veto.setVetoAppliedToPrimaryKey(flag.flagAppliedToPrimaryKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;veto.setVetoAppliedToNaturalKey(flag.flagAppliedToNaturalKey);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;veto.setVetoAppliedDate(ArgoUtils.timeNow());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;veto.setVetoAppliedBy(flag.flagAppliedBy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;veto.setVetoCreated(ArgoUtils.timeNow());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;veto.setVetoCreator(flag.flagAppliedBy);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Roastery.getHibernateApi().save(veto);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;STOP - MTY CONTAINER TOO HEAVY- CALL GATE SUPPORT permission calcled for ::::&quot;+veto.vetoGkey + &quot; Equipment :::&quot;+flag.flagAppliedToNaturalKey + &quot; after UNIT INGATE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}catch (Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println (&quot;Error while inserting veto entity :::&quot;+e);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;STOP - MTY CONTAINER TOO HEAVY- CALL GATE SUPPORT Permission is already granted for Flag Gkey ::: &quot;+  flag.flagGkey +&quot; Equipment :::&quot;+ flag.flagAppliedToNaturalKey);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;public List getFlagDetails(String unitID, FlagType inFlagType)&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;ArrayList flags = new ArrayList();&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Flag&quot;).addDqPredicate(PredicateFactory.eq(ServicesField.FLAG_FLAG_TYPE, inFlagType.getFlgtypGkey())).addDqPredicate(PredicateFactory.eq(ServicesField.FLAG_APPLIED_TO_NATURAL_KEY, unitID)).addDqOrdering(Ordering.desc(ServicesField.FLAG_APPLIED_DATE));&#xA;&#x9;&#x9;&#x9;println(&quot;dq:::::::::&quot;+dq)&#xA;&#x9;&#x9;&#x9;def flagsList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println(&quot;After flagsList:::: &quot;+flagsList.size());&#xA;&#x9;&#x9;&#x9;if(flagsList != null) {&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iter = flagsList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def flag = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;flags.add(flag);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return flags;&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;println(e.getMessage());&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;public String getVetoDetails(Flag flag)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;String recFound = &quot;N&quot;;&#xA;&#x9;&#x9;try {&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Veto&quot;).addDqPredicate(PredicateFactory.eq(ServicesField.VETO_BLOCKED_FLAG, flag.getFlagGkey()));&#xA;&#x9;&#x9;&#x9;println(&quot;dq:::::::::&quot;+dq)&#xA;&#x9;&#x9;&#x9;def vetoList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println(&quot;After vetoList:::: &quot;+vetoList.size());&#xA;&#x9;&#x9;&#x9;if(vetoList != null) {&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iter = vetoList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def veto = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;recFound = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return recFound;&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;println(e.getMessage());&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;public List getActiveUnits(String unitId)&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;).addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID, unitId)).addDqOrdering(Ordering.desc(InventoryField.UFV_TIME_OF_LAST_MOVE));&#xA;&#xA;&#x9;&#x9;&#x9;println(&quot;dq:::::::::&quot;+dq)&#xA;&#x9;&#x9;&#x9;def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println(&quot;After unitList&quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;units.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;println(&quot;unitsSize&quot; + units.size);&#xA;&#x9;&#x9;&#x9;return units;&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;println(e.getMessage());&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;/* Get truck tare weight by passing UnitId */&#xA;&#xA;public Double getTareWt(String ctrId) {&#xA;&#xA;&#x9;  &#x9;Double tareWt = 0;&#xA;&#x9;&#x9;Container container = Container.findContainer(ctrId);&#xA;&#x9;&#x9;println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;container&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+container);&#xA;&#x9;&#x9;if(container != null) {&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iter = container.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def ctr = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;ctr&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+ctr);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;tareWt = ctr.eqTareWeightKg;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;eqTareWeightKg&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+ctr.eqTareWeightKg);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;return tareWt;&#xA;&#x9;}&#xA;}" />
<digital-asset id="MatGetFieldChange" short-description="MatGetFieldChange" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.atoms.EquipRfrTypeEnum&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.framework.metafields.Metafield&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.framework.util.internationalization.ITranslationContext&#xA;import com.navis.framework.util.internationalization.PropertyKey&#xA;import com.navis.framework.util.internationalization.PropertyKeyFactory&#xA;import com.navis.framework.util.internationalization.TranslationUtils&#xA;import com.navis.framework.util.message.MessageLevel&#xA;import com.navis.framework.util.unit.TemperatureUnit&#xA;import com.navis.framework.util.unit.UnitUtils&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import org.apache.commons.lang.StringUtils&#xA;import com.navis.road.business.atoms.TranSubTypeEnum&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.framework.util.DateUtil;&#xA;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.framework.portal.FieldChanges&#xA;&#xA;import com.navis.argo.business.atoms.BizRoleEnum;&#xA;import com.navis.argo.ArgoRefField;&#xA;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;import com.navis.road.business.model.TruckingCompany;&#xA;import com.navis.road.business.model.TruckingCompanyLine;&#xA;&#xA;import com.navis.framework.business.atoms.LifeCycleStateEnum;&#xA;import com.navis.argo.business.reference.*;&#xA;import com.navis.framework.persistence.*;&#xA;import com.navis.road.RoadField;&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;import com.navis.road.business.atoms.TrkcStatusEnum;&#xA;import com.navis.argo.UserArgoField;&#xA;import com.navis.argo.business.security.ArgoUser;&#xA;import com.navis.security.SecurityField;&#xA;&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 05/22/2014&#xA;* Description: This groovy is used to generate alert email for invalid trucker assignment&#xA;*/&#xA;&#xA;public class MatGetFieldChange extends GroovyInjectionBase&#xA;&#x9;{&#xA;&#x9;def inj = new GroovyInjectionBase();&#xA;&#x9;private final String  emailFrom = '1aktosdevteam@matson.com'&#xA;&#x9; String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#x9;//private final String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;&#xA;public void getEventChanges(Object event, String type)&#xA;&#x9;{&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;println(&quot;Calling getEventChangesTest :: &quot; + event.event.evntAppliedBy);&#xA;&#x9;&#x9;&#x9;def userId = event.event.evntAppliedBy;&#xA;&#x9;&#x9;&#x9;userId = userId != null ? userId.replace(&quot;user:&quot;,&quot;&quot;):userId;&#xA;&#x9;&#x9;&#x9;println(&quot;UserId :: &quot; + userId);&#xA;&#x9;&#x9;&#x9;def usrEmail = null;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;ArgoUser&quot;).addDqPredicate(PredicateFactory.eq(SecurityField.BUSER_UID, userId));&#xA;&#x9;&#x9;&#x9;println(dq);&#xA;&#x9;&#x9;&#x9;def user =  HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;if (user.size() &gt; 0) {&#xA;&#x9;&#x9;&#x9;&#x9;Iterator userIter = user.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while ( userIter.hasNext()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def usr = userIter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;usrEmail = usr.buserEMail;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;usrEmail = usrEmail != null ? usrEmail : userId+&quot;@matson.com&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;if (type.equalsIgnoreCase(&quot;Trucker&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;emailTo = emailTo + &quot;;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;&#x9;}else if (type.equalsIgnoreCase(&quot;YB Trucker&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;emailTo = emailTo + &quot;;1aktosdevteam@matson.com&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;def gvyBaseClass = new GroovyInjectionBase()&#xA;&#x9;&#x9;&#x9;Set set = event.getEvent().getEvntFieldChanges();&#xA;&#x9;&#x9;&#x9;Iterator iter = set.iterator();&#xA;&#x9;&#x9;&#x9;EventFieldChange efc;&#xA;&#x9;&#x9;&#x9;while ( iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;efc = (EventFieldChange)iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;get feild change Value :&quot;+efc.getMetafieldId() + &quot;--&gt;&quot;+ efc.getPrevVal() + &quot;--&gt;&quot;+ efc.getNewVal())&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (&quot;rtgTruckingCompany&quot;.equalsIgnoreCase(efc.getMetafieldId()))&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = event.entity;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def dischPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;&lt;&lt;&lt;&lt;unit&gt;&gt;&gt;&gt;&gt;&quot;+unit.unitId);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (type.equalsIgnoreCase(&quot;NIS Trucker&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (dischPort.equalsIgnoreCase(&quot;NAW&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;emailTo = emailTo + &quot;;MNSNewvesNAW@matson.com&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*if (dischPort.equalsIgnoreCase(&quot;KAH&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;emailTo = emailTo + &quot;;KAH@matson.com&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}else if (dischPort.equalsIgnoreCase(&quot;HIL&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;emailTo = emailTo + &quot;;HIL@matson.com&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}else if (dischPort.equalsIgnoreCase(&quot;KHI&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;emailTo = emailTo + &quot;;KHI@matson.com&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}else if (dischPort.equalsIgnoreCase(&quot;NAW&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;emailTo = emailTo + &quot;;MNSNewvesNAW@matson.com&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}*/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;emailTo = emailTo + &quot;;&quot;+usrEmail;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String ctrNbr = unit.unitId;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String oldVal = efc.getPrevVal();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String newVal = efc.getNewVal();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Values changed to ::&quot;+oldVal +&quot;::::&quot;+newVal);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;checkValidTrucker(newVal,ctrNbr,type);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;public void checkValidTrucker(String id, String unit, String type) {&#xA;&#x9;try {&#xA;&#x9;&#x9;def inj = new GroovyInjectionBase();&#xA;&#x9;&#x9;def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;);&#xA;&#x9;&#x9;def status = null;&#xA;&#xA;&#x9;&#x9;LineOperator lineMat = LineOperator.findLineOperatorById(&quot;MAT&quot;);&#xA;&#xA;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;TruckingCompany&quot;);&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_ROLE, BizRoleEnum.HAULIER));&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_LIFE_CYCLE_STATE, LifeCycleStateEnum.ACTIVE));&#xA;&#x9;&#x9;&#x9;dq.addDqPredicate(PredicateFactory.eq(ArgoRefField.BZU_GKEY, id));&#xA;&#xA;&#x9;&#x9;def truckList =  HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;for(atruck in truckList) {&#xA;&#x9;&#x9;&#x9;&#x9;TruckingCompanyLine truckingCompanyLineMat = TruckingCompanyLine.findTrukcingCompanyLineForLine(atruck,lineMat);&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;Trucker Id ::&quot;+atruck.bzuId);&#xA;&#x9;&#x9;&#x9;&#x9;String trucker = atruck.bzuId;&#xA;&#x9;&#x9;&#x9;&#x9;if (truckingCompanyLineMat != null){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for(atruckLineMat in truckingCompanyLineMat) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;status = atruckLineMat.getTrkclineStatus();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;status = status != null ? status.getKey():null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(unit +&quot; Trucker status for  &quot;+ trucker +&quot;:: Is ::&quot;+status);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (status != &quot;OK&quot;){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Sending Email::&quot;+emailTo);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo,&quot; Invalid &quot;+type+&quot; : &quot; + trucker + &quot; Assigned for &quot; + unit,unit +&quot; assigned with trucker &quot;+trucker+&quot; which has Line agreement set to &quot;+status+&quot;. Please verify and make the corrections if required.&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;emailSender.custSendEmail(emailFrom,emailTo,&quot; Invalid &quot;+type+&quot; : &quot; + trucker + &quot; Assigned for &quot; + unit,unit +&quot; assigned with trucker &quot;+trucker+&quot; which has no MAT Line agreement. Please verify and make the corrections if required.&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" />
<digital-asset id="MATProcessMatsonVessTest" short-description="MATProcessMatsonVessTest" is-pre-deployed="N" groovy-code="import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.atoms.EquipMaterialEnum&#xA;import com.navis.argo.business.atoms.FlagStatusEnum&#xA;import com.navis.argo.business.atoms.FlagPurposeEnum;&#xA;import com.navis.argo.business.atoms.FreightKindEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.services.business.rules.ServiceImpediment&#xA;import org.apache.log4j.Logger&#xA;import java.text.SimpleDateFormat&#xA;import javax.jms.JMSException&#xA;import javax.jms.Session&#xA;import javax.jms.Connection&#xA;import javax.jms.ConnectionFactory&#xA;import javax.jms.MessageProducer&#xA;import javax.jms.Destination&#xA;import javax.naming.Context&#xA;import javax.naming.InitialContext&#xA;import javax.jms.TextMessage&#xA;import javax.jms.*&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.reference.Group;&#xA;import com.navis.inventory.business.units.Routing;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import com.navis.services.business.event.*&#xA;&#xA;import org.apache.activemq.ActiveMQConnectionFactory;&#xA;&#xA;import java.text.DateFormat;&#xA;&#xA;&#xA;/*&#xA;&#xA;Date Written: 07/06/2012&#xA;Author: Siva Raja&#xA;Description: Groovy to extract unit details based on ane event recorded and send xml data to MNS application using JMS.&#xA;*/&#xA;&#xA;public class  MATProcessMatsonVessTest extends GroovyApi {&#xA;&#xA;  UserContext context = ContextHelper.getThreadUserContext();&#xA;  Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#xA;  private static final String XML_OVERRIDE = &quot;\&quot;&quot;;&#xA;  private static final String honFacility = &quot;HON&quot;;&#xA;  private static final String XML_END_ELEMENT = &quot;/&gt;&quot;;&#xA;  private static final String queueNameTdp = &quot;jms.distqueue.tdp.N4QueueOut&quot;; // TDP Queue&#xA;  private static final String queueName = &quot;jms.tos.newvess.inbound&quot;; // JMS Queue&#xA;  private static final String topicName = &quot;jms.topic.tdp.newVesselHon&quot; // DAS Topic;&#xA;  //private static final String jbossUrl = &quot;tcp://10.201.2.145:61616&quot;;//Preproduction&#xA;  //private static final String jbossUrl = &quot;tcp://10.201.1.79:61616&quot;;//Production&#xA;  private String jbossUrl = null;&#xA;&#xA;  def inj = new GroovyInjectionBase();&#xA;  int pos&#xA;&#xA;  private final String  emailFrom = '1TOSDevTeamHON@matson.com';&#xA;  private final String emailTo = &quot;riyer@matson.com&quot;;&#xA;  //private final String emailTo =  &quot;1Grp_SLC@matson.com;1BISUsersatHIL@matson.com;1CLAIM_HON@matson.com;1CMCGR_HON@matson.com;1DATAI_HON@matson.com;1TOSDevTeamHON@matson.com;DKong@matson.com;DWatanabe@matson.com;GKuia@matson.com;JYoshioka@matson.com;JSakoda@matson.com;JMorita@matson.com;KDelaCruz@matson.com;LYonamine@matson.com;RDomingo@matson.com;SImamura@matson.com;sysreports@matson.com&quot;;&#xA;  private String addNode = &quot;Y&quot;;&#xA;  private String fileName = &quot;&quot;;&#xA;&#xA;  Integer totalContainers = 0;&#xA;&#xA;&#xA;  public void execute1(Unit tempUnit)&#xA;  {&#xA;    jbossUrl = inj.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;).getN4TopicAddress();&#xA;    println(&quot;JMS_URL IS &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  &quot;+jbossUrl);&#xA;    LOGGER.warn(&quot;MATProcessMatsonVess started&quot; + timeNow);&#xA;    if (tempUnit == null){&#xA;      LOGGER.warn (&quot; Unit is null&quot;);&#xA;      return;&#xA;    }&#xA;    UnitFacilityVisit ufv = tempUnit.getUnitActiveUfvNowActive();&#xA;    if (ufv == null){&#xA;      LOGGER.warn (&quot; Unit facility is null&quot;);&#xA;      return;&#xA;    }&#xA;    CarrierVisit cv = ufv.getInboundCarrierVisit();&#xA;&#xA;&#x9;List unitListForUpdate = this.getUnitListInCvForUpdate(cv);&#xA;&#x9;if (unitListForUpdate.isEmpty()) {&#xA;      LOGGER.warn (&quot;No Units in CV for update&quot;);&#xA;      return;&#xA;    }&#xA;&#xA;&#x9;LOGGER.warn(&quot;unitListForUpdate.size&quot; + unitListForUpdate.size);&#xA;&#x9;LOGGER.warn(&quot;unitListForUpdate Start&quot;);&#xA;&#x9;Iterator iter = unitListForUpdate.iterator();&#xA;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;def units = iter.next();&#xA;&#x9;&#x9;LOGGER.warn (&quot;BLNumberInit &quot; + units.unitId +&quot; --- &quot;+ units.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;));&#xA;&#x9;&#x9;def unitRemarks = units.getFieldValue(&quot;unitRemark&quot;);&#xA;&#x9;&#x9;def BLNumber=units.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;);&#xA;&#x9;&#x9;if (BLNumber != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if(BLNumber.startsWith(&quot;DO NOT EDIT&quot;)) {&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn (&quot;BL/Number &quot; + units.unitId +&quot; --- &quot;+ units.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;BLNumber = BLNumber.replace(&quot;DO NOT EDIT-NEWVES:&quot;,&quot;&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;BLNumber = BLNumber.replace(&quot;DO NOT EDIT - WAIT FOR NEWVES&quot;,&quot; &quot;);&#xA;&#x9;&#x9;&#x9;&#x9;units.setFieldValue(&quot;unitGoods.gdsBlNbr&quot;, BLNumber);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (unitRemarks != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if(unitRemarks.contains(&quot;ZZZZ&quot;)) {&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn (&quot;unitRemarks &quot; + units.unitId +&quot; --- &quot;+ units.getFieldValue(&quot;unitRemark&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;unitRemarks = unitRemarks.replace(&quot;ZZZZ&quot;,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;units.setFieldValue(&quot;unitRemark&quot;, unitRemarks);&#xA;            }&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;LOGGER.warn(&quot;unitListForUpdate End &quot; + cv);&#xA;&#xA;    List unitList = this.getUnitListInCv(cv);&#xA;    if (unitList.isEmpty()) {&#xA;      LOGGER.warn (&quot;No Units in CV&quot;);&#xA;      return;&#xA;    }&#xA;&#x9;println(&quot;buildXmlElement Start &quot; + cv);&#xA;&#x9;LOGGER.warn(&quot;buildXmlElement Start &quot; + cv);&#xA;    StringBuffer xml = this.buildXmlElement(unitList, cv);&#xA;    LOGGER.warn(&quot;XMLString:&quot;+xml.toString());&#xA;&#x9;println(&quot;XMLString: &quot;+xml.toString());&#xA;&#xA;&#x9;def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;&#x9;if ((xml.toString() != &quot;null&quot;) || xml.toString().length() &gt; 4)&#xA;&#x9;{&#xA;&#xA;&#x9;&#x9;//Send the Complete XML string to MNS application using JMS queue.&#xA;    &#x9;this.send(xml.toString());&#xA;    &#x9;this.topicSend(xml.toString());&#xA;    &#x9;try{&#xA;&#x9;&#x9;&#x9;Date fileDate = new Date();&#xA;&#x9;&#x9;&#x9;DateFormat fileDateFormat = new SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;);&#xA;&#x9;&#x9;&#x9;String strDate = fileDateFormat.format(fileDate);&#xA;&#xA;&#x9;&#x9;&#x9;fileName = &quot;NV_&quot;+cv+&quot;_&quot;+strDate+&quot;.xml&quot;;&#xA;&#x9;&#x9;&#x9;println(&quot;fileName :::: &quot; + fileName);&#xA;&#x9;&#x9;&#x9;this.writeToFile(fileName,xml.toString());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (Exception e){&#xA;&#x9;&#x9;&#x9;println(&quot;Error while creating the file : &quot;+ fileName);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9; emailSender.custSendEmail(emailFrom,emailTo,&quot; NewVes Process Completed for  &quot;+ cv +&quot; In TOS. &quot; +totalContainers+ &quot; units processed.&quot;,&quot;NewVes Process Completed for  &quot;+cv+&quot; In TOS. &quot;+totalContainers+&quot; units processed , xml posted to MNS application&quot;);&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;  {&#xA;&#x9;&#x9; emailSender.custSendEmail(emailFrom,emailTo,&quot; NewVes Process Completed for  &quot;+cv+&quot; In TOS with Errors&quot;,&quot;NewVes Process Completed for  &quot;+cv+&quot; In TOS with Errors, xml has not been posted to MNS application due to error in data&quot;);&#xA;&#x9;  }&#xA;&#x9;println(&quot;MATProcessMatsonVess ended&quot; + timeNow);&#xA;    LOGGER.warn(&quot;MATProcessMatsonVess ended&quot; + timeNow);&#xA;  }&#xA;  &#xA;  &#xA;  public void execute(Map params)&#xA;    {&#xA;      jbossUrl = inj.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;).getN4TopicAddress();&#xA;      println(&quot;JMS_URL IS &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  &quot;+jbossUrl);&#xA;      LOGGER.warn(&quot;MATProcessMatsonVess started&quot; + timeNow);&#xA;      String unitNbr = &quot;TCLU8001357&quot;;&#xA;      def unitList1 = getActiveUnits(unitNbr);&#xA;      def tempUnit = null;&#xA;        Iterator iterUnitList = unitList1.iterator()&#xA;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;{&#xA;&#x9;&#x9;tempUnit = iterUnitList.next();&#xA;&#x9;}&#xA;      &#xA;      println(&quot;tempUnit::::::::::::&quot;+tempUnit);&#xA;      if (tempUnit == null){&#xA;        LOGGER.warn (&quot; Unit is null&quot;);&#xA;        return;&#xA;      }&#xA;      UnitFacilityVisit ufv = tempUnit.getUnitActiveUfvNowActive();&#xA;      if (ufv == null){&#xA;        LOGGER.warn (&quot; Unit facility is null&quot;);&#xA;        return;&#xA;      }&#xA;      CarrierVisit cv = ufv.getInboundCarrierVisit();&#xA;  &#xA;  &#x9;List unitListForUpdate = this.getUnitListInCvForUpdate(cv);&#xA;  &#x9;if (unitListForUpdate.isEmpty()) {&#xA;        LOGGER.warn (&quot;No Units in CV for update&quot;);&#xA;        return;&#xA;      }&#xA;  &#xA;  &#x9;LOGGER.warn(&quot;unitListForUpdate.size&quot; + unitListForUpdate.size);&#xA;  &#x9;LOGGER.warn(&quot;unitListForUpdate Start&quot;);&#xA;  &#x9;Iterator iter = unitListForUpdate.iterator();&#xA;  &#x9;&#x9;while(iter.hasNext()) {&#xA;  &#x9;&#x9;def units = iter.next();&#xA;  &#x9;&#x9;LOGGER.warn (&quot;BLNumberInit &quot; + units.unitId +&quot; --- &quot;+ units.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;));&#xA;  &#x9;&#x9;def unitRemarks = units.getFieldValue(&quot;unitRemark&quot;);&#xA;  &#x9;&#x9;def BLNumber=units.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;);&#xA;  &#x9;&#x9;if (BLNumber != null)&#xA;  &#x9;&#x9;{&#xA;  &#x9;&#x9;&#x9;if(BLNumber.startsWith(&quot;DO NOT EDIT&quot;)) {&#xA;  &#x9;&#x9;&#x9;&#x9;LOGGER.warn (&quot;BL/Number &quot; + units.unitId +&quot; --- &quot;+ units.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;));&#xA;  &#x9;&#x9;&#x9;&#x9;BLNumber = BLNumber.replace(&quot;DO NOT EDIT-NEWVES:&quot;,&quot;&quot;);&#xA;  &#x9;&#x9;&#x9;&#x9;BLNumber = BLNumber.replace(&quot;DO NOT EDIT - WAIT FOR NEWVES&quot;,&quot; &quot;);&#xA;  &#x9;&#x9;&#x9;&#x9;units.setFieldValue(&quot;unitGoods.gdsBlNbr&quot;, BLNumber);&#xA;  &#x9;&#x9;&#x9;}&#xA;  &#x9;&#x9;}&#xA;  &#xA;  &#x9;&#x9;if (unitRemarks != null)&#xA;  &#x9;&#x9;{&#xA;  &#x9;&#x9;&#x9;if(unitRemarks.contains(&quot;ZZZZ&quot;)) {&#xA;  &#x9;&#x9;&#x9;&#x9;LOGGER.warn (&quot;unitRemarks &quot; + units.unitId +&quot; --- &quot;+ units.getFieldValue(&quot;unitRemark&quot;));&#xA;  &#x9;&#x9;&#x9;&#x9;unitRemarks = unitRemarks.replace(&quot;ZZZZ&quot;,&quot;&quot;)&#xA;  &#x9;&#x9;&#x9;&#x9;units.setFieldValue(&quot;unitRemark&quot;, unitRemarks);&#xA;              }&#xA;  &#x9;&#x9;}&#xA;  &#x9;}&#xA;  &#x9;LOGGER.warn(&quot;unitListForUpdate End &quot; + cv);&#xA;  &#xA;      List unitList = this.getUnitListInCv(cv);&#xA;      if (unitList.isEmpty()) {&#xA;        LOGGER.warn (&quot;No Units in CV&quot;);&#xA;        return;&#xA;      }&#xA;  &#x9;println(&quot;buildXmlElement Start &quot; + cv);&#xA;  &#x9;LOGGER.warn(&quot;buildXmlElement Start &quot; + cv);&#xA;      StringBuffer xml = this.buildXmlElement(unitList, cv);&#xA;      LOGGER.warn(&quot;XMLString:&quot;+xml.toString());&#xA;  &#x9;println(&quot;XMLString: &quot;+xml.toString());&#xA;  &#xA;  &#x9;def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;  &#x9;if ((xml.toString() != &quot;null&quot;) || xml.toString().length() &gt; 4)&#xA;  &#x9;{&#xA;  &#xA;  &#x9;&#x9;//Send the Complete XML string to MNS application using JMS queue.&#xA;      &#x9;//this.send(xml.toString());&#xA;      &#x9;//this.topicSend(xml.toString());&#xA;      &#x9;try{&#xA;  &#x9;&#x9;&#x9;Date fileDate = new Date();&#xA;  &#x9;&#x9;&#x9;DateFormat fileDateFormat = new SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;);&#xA;  &#x9;&#x9;&#x9;String strDate = fileDateFormat.format(fileDate);&#xA;  &#xA;  &#x9;&#x9;&#x9;fileName = &quot;NV_&quot;+cv+&quot;_&quot;+strDate+&quot;.xml&quot;;&#xA;  &#x9;&#x9;&#x9;println(&quot;fileName :::: &quot; + fileName);&#xA;  &#x9;&#x9;&#x9;this.writeToFile(fileName,xml.toString());&#xA;  &#x9;&#x9;}&#xA;  &#x9;&#x9;catch (Exception e){&#xA;  &#x9;&#x9;&#x9;println(&quot;Error while creating the file : &quot;+ fileName);&#xA;  &#x9;&#x9;}&#xA;  &#xA;  &#x9;&#x9; emailSender.custSendEmail(emailFrom,emailTo,&quot; NewVes Process Completed for  &quot;+ cv +&quot; In TOS. &quot; +totalContainers+ &quot; units processed.&quot;,&quot;NewVes Process Completed for  &quot;+cv+&quot; In TOS. &quot;+totalContainers+&quot; units processed , xml posted to MNS application&quot;);&#xA;  &#x9;}&#xA;  &#x9;else&#xA;  &#x9;  {&#xA;  &#x9;&#x9; emailSender.custSendEmail(emailFrom,emailTo,&quot; NewVes Process Completed for  &quot;+cv+&quot; In TOS with Errors&quot;,&quot;NewVes Process Completed for  &quot;+cv+&quot; In TOS with Errors, xml has not been posted to MNS application due to error in data&quot;);&#xA;  &#x9;  }&#xA;  &#x9;println(&quot;MATProcessMatsonVess ended&quot; + timeNow);&#xA;      LOGGER.warn(&quot;MATProcessMatsonVess ended&quot; + timeNow);&#xA;    }&#xA;&#xA;&#xA;public List getActiveUnits(String unitNbr)&#xA;&#x9;&#x9;   {&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#x9;&#x9;&#x9;Long facilityGkey = ContextHelper.getThreadFacility().getFcyGkey();&#xA;&#x9;&#x9;&#x9;&#x9;println(&quot;ContextHelper.getThreadFacility().getFcyGkey() : &quot;+ContextHelper.getThreadFacility().getFcyGkey())&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;  dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_FACILITY, facilityGkey))&#xA;&#x9;&#x9;&#x9;&#x9;  .addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID, unitNbr));&#xA;&#x9;&#x9;&#x9;  println(dq);&#xA;&#x9;&#x9;&#x9;  def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;  println(&quot;After unitList&quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;  if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;&#x9; Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9; //println(ufvList)&#xA;&#x9;&#x9;&#x9;&#x9; //println(ufvList.ufvGkey)&#xA;&#x9;&#x9;&#x9;&#x9; //println(ufvList.ufvCalculatedLastFreeDay)&#xA;&#x9;&#x9;&#x9;&#x9; while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; def fcy = com.navis.argo.ContextHelper.getThreadFacility();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; def ufv1 = unit.getUfvForFacilityCompletedOnly(fcy);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; if(unit.getFieldValue(&quot;unitVisitState&quot;).equals(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; //def lastfreeDayStr = ufv1.getFieldValue(&quot;ufvCalculatedLastFreeDay&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; //println(&quot;lastfreeDayStr&quot;+lastfreeDayStr +&quot;:&quot;+ufv1.getFieldValue(&quot;ufvFlexDate02&quot;)+&quot;:&quot;+ufv1.getFieldValue(&quot;ufvFlexDate03&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; //println(&quot;ufvCalculatedLastFreeDay &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot; +unit.getFieldValue(&quot;unitActiveUfv.ufvCalculatedLastFreeDay&quot;)+&quot;:&quot;+unit.getFieldValue(&quot;unitActiveUfv.ufvTimeOfLastMove&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; units.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;  }&#xA;&#x9;&#x9;&#x9;  println(&quot;unitsSize&quot; + units.size);&#xA;&#x9;&#x9;&#x9;return units;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;  e.printStackTrace();&#xA;&#x9;&#x9;&#x9;&#x9;  println(e.getMessage());&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;   }&#xA;&#xA;  public void sendToTdp(String msg) throws JMSException, Exception {&#xA;&#xA;    LOGGER.warn (&quot; in sendToTdp message &quot;);&#xA;    String  cfName = &quot;jms/WLQueueConnectionFactory&quot;;&#xA;    Session                session    = null;&#xA;    Connection             connection = null;&#xA;    ConnectionFactory      cf         = null;&#xA;    MessageProducer        mp         = null;&#xA;    Destination            destination = null;&#xA;&#xA;    try {&#xA;&#xA;      LOGGER.warn( &quot;Getting Connection Factory&quot;);&#xA;&#xA;&#x9;  cf = new ActiveMQConnectionFactory(jbossUrl);&#xA;      LOGGER.warn( &quot;Getting Queue&quot;);&#xA;&#xA;      LOGGER.warn( &quot;Getting Connection for Queue&quot;);&#xA;      connection = cf.createConnection();&#xA;      LOGGER.warn( &quot;staring the connection&quot;);&#xA;      connection.start();&#xA;      LOGGER.warn( &quot;creating session&quot;);&#xA;      session = connection.createSession(false, 1);&#xA;      destination = session.createQueue(queueNameTdp);&#xA;      LOGGER.warn( &quot;creating messageProducer&quot;);&#xA;      mp = session.createProducer(destination);&#xA;      LOGGER.warn( &quot;creating TextMessage&quot;);&#xA;      TextMessage outMessage = session.createTextMessage( msg);&#xA;      LOGGER.warn( &quot;sending Message to queue: &quot; + queueNameTdp);&#xA;      mp.send(outMessage);&#xA;      mp.close();&#xA;     session.close();&#xA;      connection.close();&#xA;    }&#xA;    catch (Exception je)&#xA;    {&#xA;      LOGGER.warn(&quot;Exception in send:&quot; + je )&#xA;    }&#xA;  }&#xA;&#xA;  public void send(String msg) throws JMSException, Exception {&#xA;&#xA;    LOGGER.warn (&quot; in send message &quot;);&#xA;    String  cfName = &quot;jms/WLQueueConnectionFactory&quot;;&#xA;    LOGGER.warn (&quot;jbossUrl:&quot;+ jbossUrl);&#xA;    Session                session    = null;&#xA;    Connection             connection = null;&#xA;    ConnectionFactory      cf         = null;&#xA;    MessageProducer        mp         = null;&#xA;    Destination            destination = null;&#xA;&#xA;    try {&#xA;&#xA;      LOGGER.warn( &quot;Getting Connection Factory&quot;);&#xA;      cf = new ActiveMQConnectionFactory(jbossUrl);&#xA;      LOGGER.warn( &quot;Getting Queue&quot;);&#xA;      LOGGER.warn( &quot;Getting Connection for Queue&quot;);&#xA;      connection = cf.createConnection();&#xA;      LOGGER.warn( &quot;staring the connection&quot;);&#xA;      connection.start();&#xA;      LOGGER.warn( &quot;creating session&quot;);&#xA;      session = connection.createSession(false, 1);&#xA;      destination = session.createQueue(queueName);&#xA;      LOGGER.warn( &quot;creating messageProducer&quot;);&#xA;      mp = session.createProducer(destination);&#xA;      LOGGER.warn( &quot;creating TextMessage&quot;);&#xA;      TextMessage outMessage = session.createTextMessage( msg);&#xA;      println( &quot;sending Message to MNS AND DAS queue : &quot; + queueName);&#xA;      LOGGER.warn( &quot;sending Message to queue: &quot; + queueName);&#xA;      mp.send(outMessage);&#xA;      mp.close();&#xA;     session.close();&#xA;      connection.close();&#xA;    }&#xA;    catch (Exception je)&#xA;    {&#xA;      LOGGER.warn(&quot;Exception in send:&quot; + je )&#xA;    }&#xA;  }&#xA;&#xA; public void topicSend(String msg) throws JMSException, Exception {&#xA; &#x9;LOGGER.warn (&quot; in topicSend message &quot;);&#xA; &#x9;String  cfName                    = &quot;jms/WLQueueConnectionFactory&quot;;&#xA;&#x9;TopicSession               session    = null;&#xA;&#x9;TopicConnection             connection = null;&#xA;&#x9;TopicConnectionFactory      cf         = null;&#xA;&#x9;MessageProducer        mp         = null;&#xA;&#x9;Destination            destination = null;&#xA;&#x9;LOGGER.warn (&quot;topicSend&quot;);&#xA;&#x9;try {&#xA;&#xA;&#x9;&#x9;LOGGER.warn (&quot;Getting Connection Factory&quot;);&#xA;&#x9;  &#x9;cf = new ActiveMQConnectionFactory(jbossUrl);&#xA;&#x9;&#x9;LOGGER.warn(&quot;Getting Connection for Topic&quot;);&#xA;&#x9;&#x9;connection = cf.createTopicConnection();&#xA;&#xA;&#x9;&#x9;LOGGER.warn( &quot;staring the connection&quot;);&#xA;&#x9;&#x9;connection.start();&#xA;&#xA;&#x9;&#x9;LOGGER.warn( &quot;creating session&quot;);&#xA;&#x9;&#x9;session = connection.createTopicSession(false, 1);&#xA;&#x9;&#x9;destination = session.createTopic(topicName);&#xA;&#xA;&#x9;&#x9;LOGGER.warn( &quot;creating messageProducer&quot;);&#xA;&#x9;&#x9;mp = session.createProducer(destination);&#xA;&#xA;&#x9;&#x9;LOGGER.warn( &quot;creating TextMessage&quot;);&#xA;&#x9;&#x9;TextMessage outMessage = session.createTextMessage( msg);&#xA;&#xA;&#x9;&#x9;LOGGER.warn( &quot;sending Message to topic: &quot; + topicName);&#xA;&#x9;&#x9;mp.send(outMessage);&#xA;&#xA;&#x9;&#x9;mp.close();&#xA;&#x9;&#x9;session.close();&#xA;&#x9;&#x9;connection.close();&#xA;    }&#xA;    catch (Exception je)&#xA;    {&#xA;&#x9;LOGGER.warn(&quot;Exception in topicSend:&quot; + je )&#xA;    }&#xA;}&#xA;&#xA;// Added by Raghu Iyer on 11/08/2012 to update the BL Number as blank where &quot;DO NOT EDIT .....&quot;&#xA;  private List&lt;Unit&gt; getUnitListInCvForUpdate(CarrierVisit inCv){&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;            .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_DECLARED_IB_CV, inCv.getCvGkey()))&#xA;            .addDqPredicate(PredicateFactory.in(UnitField.UNIT_VISIT_STATE, Unit.LIVE_STATES));&#xA;//            .addDqPredicate(PredicateFactory.in(UnitField.UNIT_ID, &quot;TRLU8077808&quot;));&#xA;&#x9;println(&quot;getUnitListInCvForUpdate dq &quot; +dq)&#xA;    HibernateApi hibernate = HibernateApi.getInstance();&#xA;    List unitList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#x9;println(&quot;getUnitListInCvForUpdate &quot; + unitList.size())&#xA;    return unitList;&#xA;  }&#xA;&#xA;&#xA;  private List&lt;Unit&gt; getUnitListInCv(CarrierVisit inCv){&#xA;&#x9;println (&quot;getUnitListInCv Start&quot;)&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;            .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_DECLARED_IB_CV, inCv.getCvGkey()))&#xA;            .addDqPredicate(PredicateFactory.in(UnitField.UNIT_VISIT_STATE, Unit.LIVE_STATES));&#xA;//            .addDqPredicate(PredicateFactory.in(UnitField.UNIT_ID, &quot;TRLU8077808&quot;));&#xA;&#x9;&#x9;//UNIT_CURRENT_UFV_ACTUAL_IB_CV&#xA;&#x9;println(&quot;getUnitListInCvdq &quot; +dq)&#xA;    HibernateApi hibernate = HibernateApi.getInstance();&#xA;    List unitList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#x9;println(&quot;getUnitListInCv &quot; + unitList.size())&#xA;&#x9;totalContainers = unitList.size();&#xA;    println (&quot;getUnitListInCv End&quot;)&#xA;&#x9;return unitList;&#xA;  }&#xA;&#xA;  private StringBuffer buildXmlElement(List inUnitList, CarrierVisit inCv){&#xA;    StringBuffer elementList = new StringBuffer();&#xA;    //Build the XML Root Elements&#xA;    elementList.append(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot; standalone=\&quot;yes\&quot;?&gt;&quot;);&#xA;    elementList.append(&quot;&lt;ns2:snx xmlns:ns2=\&quot;http://www.navis.com/argo\&quot;&gt;&quot;);&#xA;    // Build the XML Shipper Consignee Elements&#xA;    for (int k=0; k &lt; inUnitList.size(); k++){&#xA;      //for (int k=0; k &lt; 5; k++){&#xA;      Unit unit = (Unit) inUnitList.get(k);&#xA;      this.getShipperConsigneeDetails(unit,elementList);&#xA;    }&#xA;    // Build the XML Vessel Visit Detail element&#xA;    this.getVesselVisitDetails(inCv,elementList);&#xA;    // Build the XML Unit detail elements&#xA;    try{&#xA;     int lastElement = inUnitList.size() - 1  ;&#xA;    for (int i=0; i &lt; inUnitList.size(); i++){&#xA;      Unit unit = (Unit) inUnitList.get(i);&#xA;      if (i.equals(lastElement)){&#xA;        LOGGER.warn(&quot;LAST ELEMENT:&quot; + i);&#xA;        this.getLastUnitDetails(unit, elementList, inUnitList.size());&#xA;      }else{&#xA;       this.getUnitDetails(unit, elementList);&#xA;      }&#xA;&#x9;&#x9;  elementList = this.getEquipmentDetails(unit, elementList);&#xA;&#x9;&#x9;  elementList = this.getPositionDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getRoutingDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getCarrierDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getHazard(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getOog(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getBookingNbr(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getReefer(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getHandlingDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getContentsDetails(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getUnitEtc(unit, elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getFlagDetails(unit,elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getUnitFlexDetails(unit,elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.getUfvDetails(unit,elementList, inCv);&#xA;&#x9;&#x9;  elementList = this.geTimeStamp(unit,elementList, inCv);&#xA;      elementList.append(&quot;&lt;/unit&gt;&quot;);&#xA;    }&#xA;    elementList.append(&quot;&lt;/ns2:snx&gt;&quot;);&#xA;&#x9;//println(&quot;elementList=====================&gt;&quot;+elementList);&#xA;    return elementList;&#xA;  }catch (Exception e){&#xA;    LOGGER.warn (&quot;Exception in prining xml&quot; + e);&#xA;  }&#xA;  }&#xA;&#xA;  public StringBuffer getShipperConsigneeDetails(Unit inUnit, StringBuffer inElementList){&#xA;&#xA;    GoodsBase goods = inUnit.getUnitGoods();&#xA;    String shipperName = &quot;&quot;;&#xA;    String shipperId = &quot;&quot;;&#xA;    String consigneeName = &quot;&quot;;&#xA;    String consigneeId = &quot;&quot;;&#xA;&#xA;    ScopedBizUnit shipper = goods.getGdsShipperBzu();&#xA;    if (shipper != null){&#xA;     try{&#xA;&#xA;&#x9;&#x9;shipperName = shipper.getBzuName();&#xA;        shipperName = removeDoubleQuotes(shipperName);&#xA;&#x9;&#x9;shipperId = shipper.getBzuId();&#xA;&#x9;&#x9;shipperId = removeDoubleQuotes(shipperId);&#xA;&#xA;&#xA;      String shipConOpenAttr = &quot;&lt;shipper-consignee&quot;;&#xA;      String shipperNameAttr = &quot; name=&quot;;&#xA;      String shipperNameValue = XML_OVERRIDE+shipperName+XML_OVERRIDE;&#xA;      String shipperIdAttr = &quot; id=&quot;;&#xA;      String shipperIdValue =  XML_OVERRIDE+shipperId+XML_OVERRIDE;&#xA;      String shipperString = shipConOpenAttr + shipperNameAttr+ shipperNameValue + shipperIdAttr + shipperIdValue + XML_END_ELEMENT;&#xA;      shipperString = this.stripInvalidXmlCharacters(shipperString);&#xA;&#x9;  shipperString = this.ModifyEscapeChar(shipperString);&#xA;      inElementList.append(shipperString);&#xA;    } catch (Exception e){&#xA;      LOGGER.warn (&quot;Exception in getting Shipper Info&quot; + e);&#xA;    }&#xA;  }&#xA;&#xA;    ScopedBizUnit consignee = goods.getGdsConsigneeBzu();&#xA;    if (consignee != null){&#xA;    try{&#xA;      consigneeName = consignee.getBzuName();&#xA;&#x9;  consigneeName = removeDoubleQuotes(consigneeName);&#xA;      consigneeId = consignee.getBzuId();&#xA;&#x9;  consigneeId = removeDoubleQuotes(consigneeId);&#xA;&#xA;&#x9;  String shipConOpenAttr = &quot;&lt;shipper-consignee&quot;;&#xA;      String shipperNameAttr = &quot; name=&quot;;&#xA;      String consigneeNameValue = XML_OVERRIDE+consigneeName+XML_OVERRIDE;&#xA;      String shipperIdAttr = &quot; id=&quot;;&#xA;      String consigneeIdValue =  XML_OVERRIDE+consigneeId+XML_OVERRIDE;&#xA;      String consigneeString = shipConOpenAttr + shipperNameAttr+ consigneeNameValue + shipperIdAttr + consigneeIdValue + XML_END_ELEMENT;&#xA;      consigneeString = this.stripInvalidXmlCharacters(consigneeString);&#xA;      consigneeString = this.ModifyEscapeChar(consigneeString);&#xA;&#x9;  inElementList.append(consigneeString);&#xA;    } catch (Exception e){&#xA;      LOGGER.warn (&quot;Exception in getting Consignee info&quot;+ e);&#xA;    }&#xA;    }&#xA;    return inElementList;&#xA;  }&#xA;&#xA;  public StringBuffer getVesselVisitDetails(CarrierVisit inCv, StringBuffer inElementList){&#xA;&#xA;    def vvd = VesselVisitDetails.resolveVvdFromCv(inCv);&#xA;    Date timeFirstAvailable = vvd.getCvdTimeFirstAvailability();&#xA;    String timeFa = &quot;&quot;;&#xA;    if (timeFirstAvailable != null){&#xA;      timeFa = this.formatDate(timeFirstAvailable);&#xA;    }&#xA;    String vvOpenAttr = &quot;&lt;vessel-visit&quot;;&#xA;    String vvFirstTimeAvailabilityAttr = &quot; time-first-availability=&quot;;&#xA;    String vvFirstTimeAvailabilityValue = XML_OVERRIDE+timeFa+XML_OVERRIDE;&#xA;    String vvIdAttr = &quot; id=&quot;;&#xA;    String vvIdValue = XML_OVERRIDE+inCv.getCvId()+XML_OVERRIDE;&#xA;    String vesselVisitString = vvOpenAttr+vvFirstTimeAvailabilityAttr+vvFirstTimeAvailabilityValue+vvIdAttr+vvIdValue+ XML_END_ELEMENT;&#xA;    vesselVisitString = this.stripInvalidXmlCharacters(vesselVisitString);&#xA;    vesselVisitString = this.ModifyEscapeChar(vesselVisitString);&#xA;&#x9;inElementList.append(vesselVisitString);&#xA;    return inElementList;&#xA;  }&#xA;&#xA;  public StringBuffer getLastUnitDetails(Unit inUnit, StringBuffer inElementList, int inUnitCount){&#xA;&#xA;    //unit snx-update-note=&quot;NewVes Completed Holds:(RM) unitCnt=1136 facility=HON rdsDtTime=05/01/2012 10:08:48&quot;&#xA;    // line=&quot;ANL&quot; freight-kind=&quot;FCL&quot; category=&quot;IMPORT&quot; id=&quot;UNIU5027989&quot;&gt;&#xA;&#xA;    String unitOpenAttr = &quot;&lt;unit snx-update-note=&quot;;&#xA;    String unitOpenValue = XML_OVERRIDE+&quot;NewVes Completed&quot;+&quot; unitCnt=&quot;+ inUnitCount.toString()+ &quot; facility=&quot;+ honFacility + &quot; rdsDtTime=&quot;+&#xA;                           this.formatRdsDate(timeNow) + XML_OVERRIDE;&#xA;    String lineAttr = &quot; line=&quot;;&#xA;    String freightKindAttr = &quot; freight-kind=&quot;;&#xA;    String idAttr = &quot; id=&quot;;&#xA;    String categoryAttr = &quot; category=&quot;;&#xA;    String freightKindValue = this.findUnitFreightKind(inUnit);&#xA;    String idValue = this.findUnitNbr(inUnit);&#xA;    String categoryValue = this.findUnitCategory(inUnit);&#xA;    ScopedBizUnit lineOp = inUnit.getUnitLineOperator();&#xA;    String lineValue = XML_OVERRIDE+lineOp.getBzuId()+XML_OVERRIDE;&#xA;    String unitString = unitOpenAttr + unitOpenValue+ lineAttr + lineValue + freightKindAttr + freightKindValue + categoryAttr + categoryValue + idAttr + idValue + &quot;&gt;&quot;;&#xA;    unitString = this.stripInvalidXmlCharacters(unitString);&#xA;    unitString = this.ModifyEscapeChar(unitString);&#xA;&#x9;inElementList.append(unitString);&#xA;    return inElementList;&#xA;  }&#xA;&#xA;  public StringBuffer getUnitDetails(Unit inUnit, StringBuffer inElementList){&#xA;&#xA;    List unitImpediments = this.getUnitImpediments(inUnit);&#xA;    String holds = &quot;&quot;;&#xA;    String unitOpenValue;&#xA;&#x9;addNode = &quot;N&quot;;&#xA;    if (!unitImpediments.isEmpty()) {&#xA;     for (int k=0; k &lt; unitImpediments.size(); k++){&#xA;     ServiceImpediment imp = (ServiceImpediment) unitImpediments.get(k);&#xA;      def status = imp.getStatus();&#xA;      if (FlagStatusEnum.ACTIVE.equals(status) || FlagStatusEnum.REQUIRED.equals(status)) {&#xA;        String holdId = imp.getFlagType().getId();&#xA;&#x9;&#x9;String flgtypPurpose = imp.getFlagType().getPurpose().getKey();&#xA;        //println (&quot;holdId &quot;+ holdId +&quot; flgtypPurpose &quot;+flgtypPurpose);&#xA;&#x9;&#x9;if (flgtypPurpose != &quot;PERMISSION&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;addNode = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;if (k == 0 || holds != null){&#xA;&#x9;&#x9;&#x9;holds = holds + holdId;&#xA;&#x9;&#x9;&#x9;}else {&#xA;&#x9;&#x9;&#x9;holds = holds + &quot;,&quot;+ holdId;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;      }&#xA;     }&#xA;&#x9;}&#xA;&#x9;if (addNode == &quot;Y&quot;)&#xA;&#x9;{&#xA;      unitOpenValue = XML_OVERRIDE+&quot;NewVes Holds:(&quot;+holds+&quot;)&quot;+XML_OVERRIDE;&#xA;    } else {&#xA;      unitOpenValue = XML_OVERRIDE+&quot;NewVes&quot;+XML_OVERRIDE;&#xA;    }&#xA;     String unitOpenAttr = &quot;&lt;unit snx-update-note=&quot;;&#xA;    String lineAttr = &quot; line=&quot;;&#xA;    String freightKindAttr = &quot; freight-kind=&quot;;&#xA;    String idAttr = &quot; id=&quot;;&#xA;    String categoryAttr = &quot; category=&quot;;&#xA;    String freightKindValue = this.findUnitFreightKind(inUnit);&#xA;    String idValue = this.findUnitNbr(inUnit);&#xA;    String categoryValue = this.findUnitCategory(inUnit);&#xA;    ScopedBizUnit lineOp = inUnit.getUnitLineOperator();&#xA;    String lineValue = XML_OVERRIDE+lineOp.getBzuId()+XML_OVERRIDE;&#xA;    String unitString = unitOpenAttr + unitOpenValue+ lineAttr + lineValue + freightKindAttr + freightKindValue + categoryAttr + categoryValue + idAttr + idValue + &quot;&gt;&quot;;&#xA;    unitString = this.stripInvalidXmlCharacters(unitString);&#xA;&#x9;unitString = this.ModifyEscapeChar(unitString);&#xA;&#x9;inElementList.append(unitString);&#xA;    return inElementList;&#xA;  }&#xA;&#xA;   public StringBuffer getEquipmentDetails(Unit inUnit, StringBuffer inElementList){&#xA;&#x9;try&#xA;&#x9;{&#xA;&#x9;Equipment eq = inUnit.getPrimaryEq();&#xA;&#xA;&#x9;def unitEquipment = inUnit.getUnitPrimaryUe()&#xA;    def ueEquipmentState = unitEquipment.getUeEquipmentState()&#xA;    def equipFlex01 = ueEquipmentState != null ? ueEquipmentState.getEqsFlexString01() : ''&#xA;&#xA;    String equipmentOpenAttr = &quot;&lt;equipment&quot;;&#xA;    String equipmentRoleAttr = &quot; role=&quot;;&#xA;    String equipmentRoleValue = XML_OVERRIDE+&quot;PRIMARY&quot;+XML_OVERRIDE;&#xA;    String equipmentFlex01Attr = &quot; eq-flex-01=&quot;;&#xA;    String equipmentFlex01Value = XML_OVERRIDE+equipFlex01+XML_OVERRIDE;&#xA;    String equipmentMaterialAttr = &quot; material=&quot;;&#xA;    String equipmentMaterialValue = this.findEquipmentMaterial(eq);&#xA;    String equipmentOperatorAttr = &quot; operator=&quot;&#xA;    String equipmentOperatorValue=XML_OVERRIDE+eq.getEquipmentOperatorId()+XML_OVERRIDE;&#xA;    String equipmentOwnerAttr = &quot; owner=&quot;&#xA;    String equipmentOwnerValue=XML_OVERRIDE+eq.getEquipmentOwnerId()+XML_OVERRIDE;&#xA;    String equipmentStrengthCodeAttr = &quot; strength-code=&quot;;&#xA;    String equipmentStrengthCodeValue = XML_OVERRIDE+eq.getEqStrengthCode()+XML_OVERRIDE;&#xA;    String equipmentHeightMmAttr = &quot; height-mm=&quot;;&#xA;    String equipmentHeightMmValue = XML_OVERRIDE+eq.getEqHeightMm().toString()+XML_OVERRIDE;&#xA;    String equipmentTareWeightKgAttr = &quot; tare-kg=&quot;;&#xA;    String equipmentTareWeightKgValue = XML_OVERRIDE+eq.getEqTareWeightKg().toString()+XML_OVERRIDE;&#xA;    String equipmentTypeAttr = &quot; type=&quot;;&#xA;    String equipmentTypeValue = XML_OVERRIDE+eq.getEqEquipType().eqtypId+XML_OVERRIDE;&#xA;    String equipmentClassAttr = &quot; class=&quot;;&#xA;&#x9;String equipClass = eq.getEqClass().getKey();&#xA;&#x9;equipClass = equipClass = &quot;CONTAINER&quot;?&quot;CTR&quot;:eq.getEqClass().getKey()&#xA;    String equipmentClassValue = XML_OVERRIDE+equipClass+XML_OVERRIDE&#xA;    String equipmentIdAttr = &quot; eqid=&quot;;&#xA;    String equipmentIdValue = this.findUnitNbr(inUnit);&#xA;&#xA;    String equipmentString = equipmentOpenAttr + equipmentRoleAttr+ equipmentRoleValue + equipmentFlex01Attr +&#xA;                             equipmentFlex01Value + equipmentMaterialAttr + equipmentMaterialValue+equipmentOperatorAttr+equipmentOperatorValue+&#xA;                             equipmentOwnerAttr+equipmentOwnerValue+equipmentStrengthCodeAttr+equipmentStrengthCodeValue+&#xA;                             equipmentHeightMmAttr+equipmentHeightMmValue+equipmentTareWeightKgAttr+equipmentTareWeightKgValue+&#xA;                             equipmentTypeAttr+equipmentTypeValue+equipmentClassAttr+equipmentClassValue+equipmentIdAttr+equipmentIdValue+ &quot;&gt;&quot;;&#xA;    equipmentString = this.stripInvalidXmlCharacters(equipmentString)&#xA;&#x9;equipmentString = this.ModifyEscapeChar(equipmentString);&#xA;&#x9;inElementList.append(equipmentString);&#xA;&#xA;&#x9;String grade = ueEquipmentState != null ? ueEquipmentState.getEqsGradeID() : ''&#xA;&#x9;if (grade != null)&#xA;&#x9;{&#xA;&#x9;&#x9;grade = grade.replace(&quot;EquipGrade Id:&quot;,&quot;&quot;)&#xA;&#x9;}&#xA;&#x9;String physicalOpenAttr = &quot;&lt;physical&quot;;&#xA;    String gradeAttr = &quot; grade=&quot;;&#xA;&#x9;if (grade!= null)&#xA;&#x9;{&#xA;&#x9;&#x9;String physicalString = physicalOpenAttr + gradeAttr+ XML_OVERRIDE+grade+XML_OVERRIDE +XML_END_ELEMENT&#xA;&#x9;&#x9;inElementList.append(physicalString);&#xA;&#x9;}&#xA;    //inElementList.append(&quot;&lt;damages&quot;);&#xA;&#xA;&#x9;String damageOpenAttr = &quot;&lt;damages&quot;;&#xA;&#x9;String damageSevAttr = &quot; severity=&quot;&#xA;&#x9;def eqsDamageSev = inUnit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsDamageSeverity&quot;);&#xA;&#x9;String damageSev = null;&#xA;&#x9;if (eqsDamageSev !=null)&#xA;&#x9;{&#xA;&#x9;&#x9;damageSev = eqsDamageSev.getKey();&#xA;&#x9;}&#xA;&#xA;&#x9;String damageString = null;&#xA;&#x9;if (damageSev != &quot;NONE&quot; &amp;&amp; damageSev!= null)&#xA;&#x9;{&#xA;&#x9;&#x9;damageString = damageOpenAttr+damageSevAttr+XML_OVERRIDE+damageSev+XML_OVERRIDE+XML_END_ELEMENT;&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;damageString = damageOpenAttr+XML_END_ELEMENT;&#xA;&#x9;}&#xA;&#xA;&#x9;//println(&quot;damageString &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+damageString)&#xA;&#x9;inElementList.append(damageString);&#xA;&#xA;&#xA;    inElementList.append(&quot;&lt;/equipment&gt;&quot;);&#xA;&#x9;}&#xA;&#x9;catch (e)&#xA;&#x9;{&#xA;&#x9;&#x9;println(&quot;Exception &quot;+e)&#xA;&#x9;}&#xA;&#xA;    return inElementList;&#xA;  }&#xA;&#xA;  public StringBuffer getPositionDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;    String  positionLocationValue = &quot;&quot;;&#xA;    String positionLocTypeValue = &quot;&quot;;&#xA;    if (inCv != null){&#xA;      positionLocationValue = XML_OVERRIDE + inCv.getCvId()+XML_OVERRIDE;&#xA;      positionLocTypeValue = XML_OVERRIDE+ &quot;VESSEL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    String positionOpenAttr = &quot;&lt;position&quot;&#xA;    String positionSlotAttr = &quot; slot=&quot;;&#xA;    String positionSlotValue = XML_OVERRIDE+inUnit.getUnitArrivePositionSlot()+XML_OVERRIDE;&#xA;    String positionLocationAttr = &quot; location=&quot;;&#xA;    String positionLocTypeAttr = &quot; loc-type=&quot;;&#xA;&#xA;&#xA;    String positionString = positionOpenAttr+positionSlotAttr+positionSlotValue+positionLocationAttr+positionLocationValue+&#xA;                            positionLocTypeAttr+positionLocTypeValue+XML_END_ELEMENT;&#xA;&#x9;positionString = this.stripInvalidXmlCharacters(positionString)&#xA;&#x9;positionString = this.ModifyEscapeChar(positionString);&#xA;&#x9;inElementList.append(positionString);&#xA;&#xA;    return inElementList;&#xA;  }&#xA;&#xA;  public StringBuffer getRoutingDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;String group = null;&#xA;&#x9;&#x9;String disc=&quot;&quot;;&#xA;&#x9;&#x9;String pod2=null;&#xA;&#x9;&#x9;String opl=&quot;&quot;;&#xA;&#x9;&#x9;String pol=&quot;&quot;;&#xA;&#x9;&#x9;String destination=&quot;&quot;;&#xA;&#x9;&#x9;String designatedTrucker=null;&#xA;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;designatedTrucker=inUnit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (te)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Exception in getting trucker details &quot; + te);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//try{&#xA;&#xA;&#x9;&#x9;Routing routing = inUnit.getUnitRouting();&#xA;&#xA;&#x9;&#x9;if (routing != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;String rtgGroup = routing.getRtgGroup();&#xA;&#x9;&#x9;&#x9;&#x9;group = rtgGroup.replace(&quot;Group Id:&quot;,&quot;&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;catch (e)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;RoutingPoint point = inUnit.getUnitRouting().getRtgPOD1();&#xA;&#x9;&#x9;RoutingPoint point2 = inUnit.getUnitRouting().getRtgPOD2();&#xA;&#x9;&#x9;RoutingPoint pointOpl = inUnit.getUnitRouting().getRtgOPL();&#xA;&#x9;&#x9;RoutingPoint pointPol = inUnit.getUnitRouting().getRtgPOL();&#xA;&#x9;&#x9;if (point != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;disc = point.getPointId();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (point2 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;pod2 = point2.getPointId();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (pointOpl != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;opl = pointOpl.getPointId();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (pointPol != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;pol = pointOpl.getPointId();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;destination = inUnit.getUnitGoods().getGdsDestination();&#xA;&#x9;&#x9;//} catch (Exception e){&#xA;&#x9;&#x9;  //LOGGER.warn(&quot;Exception in getting routing details &quot; + e);&#xA;&#x9;&#x9;//}&#xA;&#x9;&#x9;String rtgOpenAttr = &quot;&lt;routing&quot;&#xA;&#x9;&#x9;String groupAttr = &quot; group=&quot;&#xA;&#x9;&#x9;String groupValue = XML_OVERRIDE+group+XML_OVERRIDE;&#xA;&#x9;&#x9;String designatedTruckerAttr = &quot; designated-trucker=&quot;&#xA;&#x9;&#x9;String designatedTruckerValue = XML_OVERRIDE+designatedTrucker+XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgDestAttr = &quot; destination=&quot;;&#xA;&#x9;&#x9;String rtgDestValue = XML_OVERRIDE+destination+XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgOplAttr = &quot; opl=&quot;;&#xA;&#x9;&#x9;String rtgOplValue = XML_OVERRIDE+ opl +XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgPod1Attr = &quot; pod-1=&quot;;&#xA;&#x9;&#x9;String rtgPod2Attr = &quot; pod-2=&quot;;&#xA;&#x9;&#x9;String rtgPod1Value = XML_OVERRIDE+ disc +XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgPod2Value = XML_OVERRIDE+ pod2 +XML_OVERRIDE;&#xA;&#x9;&#x9;String rtgPolAttr = &quot; pol=&quot;;&#xA;&#x9;&#x9;String rtgPolValue = XML_OVERRIDE+ pol +XML_OVERRIDE;&#xA;&#x9;&#x9;String routingString = null;&#xA;&#xA;&#xA;&#x9;&#x9;if (designatedTrucker!= null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;routingString = designatedTruckerAttr+designatedTruckerValue+rtgDestAttr+rtgDestValue+rtgOplAttr+rtgOplValue+rtgPod1Attr+rtgPod1Value+&#xA;&#x9;&#x9;&#x9;&#x9;rtgPolAttr+rtgPolValue;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;routingString = rtgDestAttr+rtgDestValue+rtgOplAttr+rtgOplValue+rtgPod1Attr+rtgPod1Value+&#xA;&#x9;&#x9;&#x9;&#x9;rtgPolAttr+rtgPolValue;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (pod2 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;//println(&quot;pod2&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot;+pod2);&#xA;&#x9;&#x9;routingString = routingString+rtgPod2Attr+rtgPod2Value&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (group != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;routingString = rtgOpenAttr + groupAttr + groupValue + routingString&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;  {&#xA;&#x9;&#x9;&#x9;routingString = rtgOpenAttr + routingString&#xA;&#x9;  }&#xA;&#x9;&#x9;routingString = routingString + &quot;&gt;&quot;&#xA;&#x9;&#x9;routingString = this.stripInvalidXmlCharacters(routingString);&#xA;&#x9;&#x9;routingString = this.ModifyEscapeChar(routingString);&#xA;&#x9;&#x9;inElementList.append(routingString);&#xA;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;  public StringBuffer getCarrierDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;    UnitFacilityVisit ufv = inUnit.getUnitActiveUfvNowActive();&#xA;    CarrierVisit declaredIbCv = inUnit.getUnitDeclaredIbCv();&#xA;    String declaredIbCvMode = this.findCarrierVisitMode(declaredIbCv);&#xA;&#x9;//println(&quot;ufvPrint&quot;+ufv);&#xA;    CarrierVisit actualIbCv = ufv.getInboundCarrierVisit();&#xA;    String actualIbCvMode = this.findCarrierVisitMode(actualIbCv);&#xA;    CarrierVisit declaredObCv = inUnit.getUnitRouting().getRtgDeclaredCv();&#xA;    String declaredObCvMode = this.findCarrierVisitMode(declaredObCv);&#xA;    CarrierVisit actualObCv = ufv.getUfvObCv();&#xA;    String actualObCvMode = this.findCarrierVisitMode(actualObCv);&#xA;&#xA;    String cvOpenAttr = &quot;&quot;;&#xA;    String cvIdAttr = &quot;&quot;;&#xA;    String cvIdValue = &quot;&quot;;&#xA;    String cvFacilityAttr = &quot;&quot;;&#xA;    String cvFacilityValue = &quot;&quot;;&#xA;    String cvModeAttr = &quot;&quot;;&#xA;    String cvModeValue = &quot;&quot;;&#xA;    String cvQualifierAttr = &quot;&quot;;&#xA;    String cvQualiferValue = &quot;&quot;;&#xA;    String cvDirectionAttr = &quot;&quot;;&#xA;    String cvDirectionValue = &quot;&quot;;&#xA;    // Declared IB CV Details Block&#xA;    cvOpenAttr = &quot;&lt;carrier&quot;&#xA;    cvIdAttr = &quot; id=&quot;;&#xA;    cvIdValue = XML_OVERRIDE+declaredIbCv+XML_OVERRIDE;&#xA;    cvFacilityAttr = &quot; facility=&quot;;&#xA;    cvFacilityValue = XML_OVERRIDE+ honFacility +XML_OVERRIDE;&#xA;    cvModeAttr = &quot; mode=&quot;;&#xA;    cvModeValue = XML_OVERRIDE+ declaredIbCvMode +XML_OVERRIDE;&#xA;    cvQualifierAttr = &quot; qualifier=&quot;;&#xA;    cvQualiferValue = XML_OVERRIDE+ &quot;DECLARED&quot; +XML_OVERRIDE;&#xA;    cvDirectionAttr = &quot; direction=&quot;;&#xA;    cvDirectionValue = XML_OVERRIDE+ &quot;IB&quot; +XML_OVERRIDE;&#xA;&#xA;&#x9;&#x9;String cvDeclaredIbString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;            cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;    cvDeclaredIbString = this.stripInvalidXmlCharacters(cvDeclaredIbString)&#xA;&#x9;cvDeclaredIbString = this.ModifyEscapeChar(cvDeclaredIbString);&#xA;&#x9;inElementList.append(cvDeclaredIbString);&#xA;&#xA;    // Actual IB CV Details Block&#xA;    cvOpenAttr = &quot;&lt;carrier&quot;&#xA;    cvIdAttr = &quot; id=&quot;;&#xA;    cvIdValue = XML_OVERRIDE+actualIbCv+XML_OVERRIDE;&#xA;    cvFacilityAttr = &quot; facility=&quot;;&#xA;    cvFacilityValue = XML_OVERRIDE+ honFacility +XML_OVERRIDE;&#xA;    cvModeAttr = &quot; mode=&quot;;&#xA;    cvModeValue = XML_OVERRIDE+ actualIbCvMode +XML_OVERRIDE;&#xA;    cvQualifierAttr = &quot; qualifier=&quot;;&#xA;    cvQualiferValue = XML_OVERRIDE+ &quot;ACTUAL&quot; +XML_OVERRIDE;&#xA;    cvDirectionAttr = &quot; direction=&quot;;&#xA;    cvDirectionValue = XML_OVERRIDE+ &quot;IB&quot; +XML_OVERRIDE;&#xA;&#xA;&#x9;String cvActualIbString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;            cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;    cvActualIbString = this.stripInvalidXmlCharacters(cvActualIbString)&#xA;&#x9;cvActualIbString = this.ModifyEscapeChar(cvActualIbString);&#xA;&#x9;inElementList.append(cvActualIbString);&#xA;&#xA;    // Declared Ob CV Details Block&#xA;    cvOpenAttr = &quot;&lt;carrier&quot;&#xA;    cvIdAttr = &quot; id=&quot;;&#xA;    cvIdValue = XML_OVERRIDE+declaredObCv+XML_OVERRIDE;&#xA;    cvFacilityAttr = &quot; facility=&quot;;&#xA;    cvFacilityValue = XML_OVERRIDE+ honFacility +XML_OVERRIDE;&#xA;    cvModeAttr = &quot; mode=&quot;;&#xA;    cvModeValue = XML_OVERRIDE+ declaredObCvMode +XML_OVERRIDE;&#xA;    cvQualifierAttr = &quot; qualifier=&quot;;&#xA;    cvQualiferValue = XML_OVERRIDE+ &quot;DECLARED&quot; +XML_OVERRIDE;&#xA;    cvDirectionAttr = &quot; direction=&quot;;&#xA;    cvDirectionValue = XML_OVERRIDE+ &quot;OB&quot; +XML_OVERRIDE;&#xA;&#xA;&#x9; String cvDeclaredObString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;            cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;    cvDeclaredObString = this.stripInvalidXmlCharacters(cvDeclaredObString)&#xA;&#x9;cvDeclaredObString = this.ModifyEscapeChar(cvDeclaredObString);&#xA;&#x9;inElementList.append(cvDeclaredObString);&#xA;&#xA;    // Actual Ob CV Details Block&#xA;    cvOpenAttr = &quot;&lt;carrier&quot;&#xA;    cvIdAttr = &quot; id=&quot;;&#xA;    cvIdValue = XML_OVERRIDE+actualObCv+XML_OVERRIDE;&#xA;    cvFacilityAttr = &quot; facility=&quot;;&#xA;    cvFacilityValue = XML_OVERRIDE+ honFacility +XML_OVERRIDE;&#xA;    cvModeAttr = &quot; mode=&quot;;&#xA;    cvModeValue = XML_OVERRIDE+ actualObCvMode +XML_OVERRIDE;&#xA;    cvQualifierAttr = &quot; qualifier=&quot;;&#xA;    cvQualiferValue = XML_OVERRIDE+ &quot;ACTUAL&quot; +XML_OVERRIDE;&#xA;    cvDirectionAttr = &quot; direction=&quot;;&#xA;    cvDirectionValue = XML_OVERRIDE+ &quot;OB&quot; +XML_OVERRIDE;&#xA;&#xA;&#xA;&#x9;&#x9;String cvActualObString = cvOpenAttr+cvIdAttr+cvIdValue+cvFacilityAttr+cvFacilityValue+cvModeAttr+cvModeValue+&#xA;            cvQualifierAttr+cvQualiferValue+cvDirectionAttr+cvDirectionValue+XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;cvActualObString = this.stripInvalidXmlCharacters(cvActualObString)&#xA;&#x9;&#x9;cvActualObString = this.ModifyEscapeChar(cvActualObString);&#xA;&#x9;&#x9;inElementList.append(cvActualObString);&#xA;&#xA;    inElementList.append(&quot;&lt;/routing&gt;&quot;);&#xA;    return inElementList;&#xA;&#xA;  }&#xA;&#xA;public StringBuffer getHazard(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;def ufv = inUnit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;if (ufv != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;if (ufv.ufvUnit.getUnitGoods() != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;def haz = ufv.ufvUnit.getUnitGoods().getGdsHazards();&#xA;&#x9;&#x9;//println(&quot;hazard&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+haz)&#xA;&#xA;&#x9;&#x9;if (haz != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;String hazardsAttrOpn = &quot;&lt;hazards&gt;&quot;;&#xA;&#x9;&#x9;&#x9;String addtag = &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;def hazardAttrOpn = &quot;&lt;hazard&quot;&#xA;&#x9;&#x9;&#x9;def hazardString = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;Iterator hazardIter = ufv.ufvUnit.getUnitGoods().getGdsHazards().getHazardItemsIterator();&#xA;&#x9;&#x9;&#x9;while(hazardIter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;def hazard = hazardIter.next();&#xA;&#x9;&#x9;&#x9;&#x9;def imdgClass = hazard.getHzrdiImdgCode() != null ? hazard.getHzrdiImdgCode().getKey() : null&#xA;&#x9;&#x9;&#x9;&#x9;def nbrType = hazard.getHzrdiNbrType() != null ? hazard.getHzrdiNbrType().getKey() : null&#xA;&#x9;&#x9;&#x9;&#x9;def qty = hazard.hzrdiQuantity;&#xA;&#x9;&#x9;&#x9;&#x9;def packageType = hazard.hzrdiPackageType;&#xA;&#x9;&#x9;&#x9;&#x9;def weight = hazard.hzrdiWeight;&#xA;&#x9;&#x9;&#x9;&#x9;String properName = hazard.hzrdiProperName;&#xA;&#x9;&#x9;&#x9;&#x9;String techName   = hazard.hzrdiTechName;&#xA;&#x9;&#x9;&#x9;&#x9;String imdgclass  = hazard.hzrdiImdgClass.name;&#xA;&#x9;&#x9;&#x9;&#x9;def im01 = hazard.hzrdiSecondaryIMO1;&#xA;&#x9;&#x9;&#x9;&#x9;def im02 = hazard.hzrdiSecondaryIMO2;&#xA;&#x9;&#x9;&#x9;&#x9;String un  = hazard.hzrdiUNnum;&#xA;&#x9;&#x9;&#x9;&#x9;def pkg = hazard.hzrdiPackingGroup;&#xA;&#x9;&#x9;&#x9;&#x9;if (pkg != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;pkg = pkg.getKey();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;def flashPoint = hazard.hzrdiFlashPoint;&#xA;&#x9;&#x9;&#x9;&#x9;def limited = hazard.hzrdiLtdQty ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;def marine = hazard.hzrdiMarinePollutants ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;def phone = hazard.hzrdiEmergencyTelephone;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiNotes = hazard.hzrdiNotes;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiInhalationZone = hazard.hzrdiInhalationZone;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiPageNumber = hazard.hzrdiPageNumber;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiEMSNumber = hazard.hzrdiEMSNumber;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiMFAG = hazard.hzrdiMFAG;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiHazIdUpper = hazard.hzrdiHazIdUpper;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiSubstanceLower = hazard.hzrdiSubstanceLower;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiPlannerRef = hazard.hzrdiPlannerRef;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiMoveMethod = hazard.hzrdiMoveMethod;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiExplosiveClass = hazard.hzrdiExplosiveClass;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiDcLgRef = hazard.hzrdiDcLgRef;&#xA;&#x9;&#x9;&#x9;&#x9;def hzrdiDeckRestrictions = hazard.hzrdiDeckRestrictions;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + hazardAttrOpn;&#xA;&#x9;&#x9;&#x9;&#x9;if (nbrType != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; haz-nbr-type=&quot; + XML_OVERRIDE + nbrType + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiNotes != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hzrdiNotes = this.stripInvalidXmlCharacters(hzrdiNotes);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hzrdiNotes = this.removeDoubleQuotes(hzrdiNotes);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; notes=&quot; +XML_OVERRIDE + hzrdiNotes + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (phone != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; emergency-telephone=&quot; +XML_OVERRIDE + phone + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (marine == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; marine-pollutants=&quot; +XML_OVERRIDE + marine + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (im01 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; secondary-imo-1=&quot; +XML_OVERRIDE + im01 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (im02 != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; secondary-imo-2=&quot; +XML_OVERRIDE + im02 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (qty != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; quantity=&quot; +XML_OVERRIDE + qty + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (weight != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; weight-kg=&quot; +XML_OVERRIDE + weight + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (pkg != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; packing-group=&quot; +XML_OVERRIDE + pkg + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (properName != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;properName = this.stripInvalidXmlCharacters(properName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;properName = this.removeDoubleQuotes(properName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; proper-name=&quot; +XML_OVERRIDE + properName + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (techName != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;techName = this.stripInvalidXmlCharacters(techName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;techName = this.removeDoubleQuotes(techName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; tech-name=&quot; +XML_OVERRIDE + techName + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (flashPoint != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; flash-point=&quot; +XML_OVERRIDE + flashPoint + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (packageType != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; package-type=&quot; +XML_OVERRIDE + packageType + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (limited == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; ltd-qty-flag=&quot; +XML_OVERRIDE + limited + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (un != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; un=&quot; +XML_OVERRIDE + un + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (imdgClass != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; imdg=&quot; +XML_OVERRIDE + imdgClass + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiInhalationZone != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; inhalation-zone=&quot; +XML_OVERRIDE + hzrdiInhalationZone + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiExplosiveClass != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; explosive-class=&quot; +XML_OVERRIDE + hzrdiExplosiveClass + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiEMSNumber != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; ems-nbr=&quot; +XML_OVERRIDE + hzrdiEMSNumber + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiMFAG != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; mfag=&quot; +XML_OVERRIDE + hzrdiMFAG + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiHazIdUpper != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; haz-id-upper=&quot; +XML_OVERRIDE + hzrdiHazIdUpper + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiSubstanceLower != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; substance-lower=&quot; +XML_OVERRIDE + hzrdiSubstanceLower + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiPlannerRef != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; planner-ref=&quot; +XML_OVERRIDE + hzrdiPlannerRef + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiMoveMethod != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; move-method=&quot; +XML_OVERRIDE + hzrdiMoveMethod + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiDeckRestrictions != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; deck-restrictions=&quot; +XML_OVERRIDE + hzrdiDeckRestrictions + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiDcLgRef != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; dc-lg-ref=&quot; +XML_OVERRIDE + hzrdiDcLgRef + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (hzrdiPageNumber != null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + &quot; page-number=&quot; +XML_OVERRIDE + hzrdiPageNumber + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (addtag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hazardString = hazardString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (addtag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;hazardsAttrOpn = hazardsAttrOpn + hazardString + &quot;&lt;/hazards&gt;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;hazardsAttrOpn = this.stripInvalidXmlCharacters(hazardsAttrOpn);&#xA;&#x9;&#x9;&#x9;&#x9;hazardsAttrOpn = this.ModifyEscapeChar(hazardsAttrOpn);&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(hazardsAttrOpn);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;}&#xA;&#x9;return inElementList;&#xA;}&#xA;&#xA;&#x9;public StringBuffer getOog(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;{&#xA;&#x9;&#x9;if (inUnit.getFieldValue(&quot;unitIsOog&quot;))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;String backCm = inUnit.getFieldValue(&quot;unitOogBackCm&quot;);&#xA;&#x9;&#x9;&#x9;String frontCm = inUnit.getFieldValue(&quot;unitOogFrontCm&quot;) ;&#xA;&#x9;&#x9;&#x9;String leftCm = inUnit.getFieldValue(&quot;unitOogLeftCm&quot;);&#xA;&#x9;&#x9;&#x9;String rightCm = inUnit.getFieldValue(&quot;unitOogRightCm&quot;);&#xA;&#x9;&#x9;&#x9;String topCm = inUnit.getFieldValue(&quot;unitOogTopCm&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;backCm = backCm !=null ? backCm:0;&#xA;&#x9;&#x9;&#x9;frontCm = frontCm !=null ? frontCm:0;&#xA;&#x9;&#x9;&#x9;leftCm = leftCm !=null ? leftCm:0;&#xA;&#x9;&#x9;&#x9;rightCm = rightCm !=null ? rightCm:0;&#xA;&#x9;&#x9;&#x9;topCm = topCm !=null ? topCm:0;&#xA;&#xA;&#x9;&#x9;&#x9;String oogAttrOpn = &quot;&lt;oog&quot;;&#xA;&#x9;&#x9;&#x9;String oogString = oogAttrOpn&#xA;&#x9;&#x9;&#x9;if (rightCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; right-cm=&quot; + XML_OVERRIDE + rightCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (leftCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; left-cm=&quot; + XML_OVERRIDE + leftCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (backCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; back-cm=&quot; + XML_OVERRIDE + backCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (frontCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; front-cm=&quot; + XML_OVERRIDE + frontCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (topCm !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;oogString = oogString + &quot; top-cm=&quot; + XML_OVERRIDE + topCm + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;oogString = oogString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;inElementList.append(oogString);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;&#x9;public StringBuffer getBookingNbr(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;String bookingId = null;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;bookingId = inUnit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (be)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Exception in getting routing details &quot; + be);&#xA;&#x9;&#x9;&#x9;println(&quot;Exception in getting routing details &quot; + be);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;String unitBkngOpenAttr = &quot;&lt;booking &quot;&#xA;&#x9;&#x9;String unitBkngAttr = &quot;id=&quot;;&#xA;&#x9;&#x9;if (bookingId != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;bookingId = XML_OVERRIDE+bookingId+XML_OVERRIDE&#xA;&#x9;&#x9;&#x9;String unitBkngString = unitBkngOpenAttr+unitBkngAttr+bookingId+XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;unitBkngString = this.stripInvalidXmlCharacters(unitBkngString);&#xA;&#x9;&#x9;&#x9;unitBkngString = this.ModifyEscapeChar(unitBkngString);&#xA;&#x9;&#x9;&#x9;inElementList.append(unitBkngString);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;&#x9;  public StringBuffer getReefer(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;&#x9;def tempReq = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempRequiredC&quot;);&#xA;&#x9;&#x9;&#x9;def tempMax = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempLimitMaxC&quot;);&#xA;&#x9;&#x9;&#x9;def tempMin = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempLimitMinC&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM1 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor1&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM2 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor2&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM3 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor3&quot;);&#xA;&#x9;&#x9;&#x9;def tempTM4 = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTimeMonitor4&quot;);&#xA;&#x9;&#x9;&#x9;def tempPwrOnTime = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqLatestOnPowerTime&quot;);&#xA;&#x9;&#x9;&#x9;def tempCo2Pct = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqCO2Pct&quot;);&#xA;&#x9;&#x9;&#x9;def tempHmdtyPct = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqHumidityPct&quot;);&#xA;&#x9;&#x9;&#x9;def tempO2Pct = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqO2Pct&quot;);&#xA;&#x9;&#x9;&#x9;def tempVentReq = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqVentRequired&quot;);&#xA;&#x9;&#x9;&#x9;def tempVentUnit = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqVentUnit&quot;);&#xA;&#x9;&#x9;&#x9;def tempShowFahrenhiet = inUnit.getFieldValue(&quot;unitGoods.gdsReeferRqmnts.rfreqTempShowFahrenheit&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;tempShowFahrenhiet = tempShowFahrenhiet ? &quot;F&quot; : &quot;N&quot;;&#xA;&#x9;&#x9;&#x9;String reeferAttrOpn = &quot;&lt;reefer&quot;;&#xA;&#x9;&#x9;&#x9;String reeferString = reeferAttrOpn;&#xA;&#x9;&#x9;&#x9;String addtag = &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;if (tempShowFahrenhiet == &quot;F&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-display-unit=&quot; + XML_OVERRIDE + tempShowFahrenhiet + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempReq !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-reqd-c=&quot; + XML_OVERRIDE + tempReq + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempO2Pct !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; o2-pct=&quot; + XML_OVERRIDE + tempO2Pct + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempCo2Pct !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; co2-pct=&quot; + XML_OVERRIDE + tempCo2Pct + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempHmdtyPct !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; humidity-pct=&quot; + XML_OVERRIDE + tempHmdtyPct + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempVentReq !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; vent-required-value=&quot; + XML_OVERRIDE + tempVentReq + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempVentUnit !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; vent-required-unit=&quot; + XML_OVERRIDE + tempVentUnit + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempMin !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-min-c=&quot; + XML_OVERRIDE + tempMin + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempMax !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; temp-max-c=&quot; + XML_OVERRIDE + tempMax + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempPwrOnTime !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-latest-on-power=&quot; + XML_OVERRIDE + tempPwrOnTime + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM1 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-1=&quot; + XML_OVERRIDE + tempTM1 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM2 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-2=&quot; + XML_OVERRIDE + tempTM2 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM3 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-3=&quot; + XML_OVERRIDE + tempTM3 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (tempTM4 !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + &quot; time-monitor-4=&quot; + XML_OVERRIDE + tempTM4 + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;addtag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;//println(&quot;reeferString &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot; + addtag +&quot;  :   &quot;+reeferString)&#xA;&#xA;&#x9;&#x9;&#x9;if (addtag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;//println(&quot;Here reeferString &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot; + addtag +&quot;  :   &quot;+reeferString)&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = reeferString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = this.stripInvalidXmlCharacters(reeferString);&#xA;&#x9;&#x9;&#x9;&#x9;reeferString = this.ModifyEscapeChar(reeferString);&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(reeferString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return inElementList;&#xA;&#x9;&#x9;}&#xA;&#xA;  public StringBuffer getHandlingDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;def ufv = inUnit.getUnitActiveUfvNowActive();&#xA;&#xA;&#x9;String lastfreeDay = null;&#xA;    String handlingOpenAttr = &quot;&lt;handling&quot;&#xA;&#x9;String handlingString = handlingOpenAttr;&#xA;&#x9;String lastfreeDayAttr = &quot; last-free-day=&quot;;&#xA;    String handlingRemarkAttr = &quot; remark=&quot;;&#xA;    String handlingRemark = inUnit.getUnitRemark();&#xA;&#x9;if (ufv !=null)&#xA;&#x9;{&#xA;&#x9;&#x9;lastfreeDay = ufv.getFieldValue(&quot;ufvCalculatedLastFreeDay&quot;);&#xA;&#x9;&#x9;if (lastfreeDay != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;lastfreeDay = lastfreeDay.replace(&quot;!&quot;,&quot;&quot;)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;addNode = &quot;N&quot;;&#xA;&#x9;if (lastfreeDay != null)&#xA;&#x9;{&#xA;&#x9;&#x9;addNode = &quot;Y&quot;;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Date date = new SimpleDateFormat(&quot;yyyy-MMM-dd&quot;, Locale.ENGLISH).parse(lastfreeDay);&#xA;&#x9;&#x9;&#x9;DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#x9;&#x9;&#x9;lastfreeDay = df.format(date);&#xA;&#x9;&#x9;}&#xA;&#x9;catch (Exception de){&#xA;      LOGGER.warn (&quot;Exception in while converting date &quot;+ lastfreeDay+&quot;:&quot;+de);&#xA;&#x9;  lastfreeDay = null;&#xA;&#x9;  addNode = &quot;N&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;if (addNode == &quot;Y&quot;)&#xA;&#x9;{&#xA;&#x9;&#x9;lastfreeDay=XML_OVERRIDE+lastfreeDay+XML_OVERRIDE;&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;addNode = &quot;N&quot;;&#xA;&#x9;}&#xA;&#xA;    if (handlingRemark != null)&#xA;&#x9;{&#xA;&#x9;&#x9;handlingRemark = removeDoubleQuotes(handlingRemark);&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;handlingRemark = &quot; &quot;&#xA;&#x9;}&#xA;&#x9;if (addNode == &quot;Y&quot; )&#xA;&#x9;{&#xA;&#x9;&#x9;handlingString = handlingString + lastfreeDayAttr + lastfreeDay;&#xA;&#x9;}&#xA;&#xA;&#x9;String handlingRemarkValue = XML_OVERRIDE+handlingRemark+XML_OVERRIDE;&#xA;    handlingString = handlingString+handlingRemarkAttr+handlingRemarkValue+ XML_END_ELEMENT;&#xA;&#x9;handlingString = this.stripInvalidXmlCharacters(handlingString);&#xA;&#x9;handlingString = this.ModifyEscapeChar(handlingString);&#xA;&#x9;inElementList.append(handlingString);&#xA;&#xA;    return inElementList;&#xA;  }&#xA;&#xA;  public StringBuffer getContentsDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;    GoodsBase goods = inUnit.getUnitGoods();&#xA;    String blNbr =  goods.getGdsBlNbr();&#xA;    ScopedBizUnit shipper = goods.getGdsShipperBzu();&#xA;    String shipperName = &quot;&quot;;&#xA;    String shipperId = &quot;&quot;;&#xA;    String consigneeName = &quot;&quot;;&#xA;    String consigneeId = &quot;&quot; ;&#xA;    String contentsShipperNameAttr = &quot; shipper-name=&quot;;&#xA;    String contentsShipperIdAttr = &quot; shipper-id=&quot;;&#xA;    String contentsConsigneeNameAttr = &quot; consignee-name=&quot;;&#xA;    String contentsConsigneeIdAttr = &quot; consignee-id=&quot;;&#xA;    String contentsConsigneeNameValue = &quot;&quot;;&#xA;    String contentsConsigneeIdValue = &quot;&quot;;&#xA;    String contentsShipperNameValue = &quot;&quot;;&#xA;    String contentsShipperIdValue = &quot;&quot;;&#xA;&#xA;    ScopedBizUnit consignee = goods.getGdsConsigneeBzu();&#xA;    if (consignee != null){&#xA;      try{&#xA;        consigneeName = consignee.getBzuName();&#xA;&#x9;&#x9;consigneeName = removeDoubleQuotes(consigneeName);&#xA;        consigneeId = consignee.getBzuId();&#xA;&#x9;&#x9;consigneeId = removeDoubleQuotes(consigneeId);&#xA;        contentsConsigneeNameValue = XML_OVERRIDE+consigneeName+XML_OVERRIDE;&#xA;        contentsConsigneeIdValue =  XML_OVERRIDE+consigneeId+XML_OVERRIDE;&#xA;      } catch (Exception e){&#xA;        LOGGER.warn (&quot;Exception in getting Consignee info&quot;+ e);&#xA;      }&#xA;    }&#xA;    if (blNbr == null || blNbr.startsWith(&quot;DO NOT EDIT&quot;)){&#xA;      blNbr = &quot;&quot;;&#xA;    }&#xA;&#x9;/*else {&#xA;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;blNbr = blNbr.substring(0,7);&#xA;&#x9;&#x9;}catch (Exception e){&#xA;        LOGGER.warn (&quot;Bl Number is less than 7&quot;+ e);&#xA;      }&#xA;&#x9;}*/&#xA;&#xA;    //String gdsWeight = inUnit.getUnitGoodsAndCtrWtKg().toString();&#xA;    String gdsWeight = new BigDecimal(inUnit.getUnitGoodsAndCtrWtKg()).setScale(2, BigDecimal.ROUND_HALF_UP).toString();&#xA;    String contentsOpenAttr = &quot;&lt;contents&quot;;&#xA;    String contentsCommodityNameAttr = &quot; commodity-name=&quot;;&#xA;    //String contentsCommodityNameValue = XML_OVERRIDE+&quot;CUSTOMS&quot;+XML_OVERRIDE;&#xA;&#x9;String commodity = inUnit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;);&#xA;&#x9;String commodityName = inUnit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyShortName&quot;)&#xA;&#x9;String contentsCommodityNameValue = XML_OVERRIDE+commodityName+XML_OVERRIDE;&#xA;    String contentsCommodityIdAttr = &quot; commodity-id=&quot;;&#xA;   // String contentsCommodityIdValue = XML_OVERRIDE+&quot;CUS&quot;+XML_OVERRIDE;&#xA;    String contentsCommodityIdValue = XML_OVERRIDE+commodity+XML_OVERRIDE;&#xA;    String contentsBlNbrAttr = &quot; bl-nbr=&quot;;&#xA;    String contentsBlNbrValue = XML_OVERRIDE+blNbr+XML_OVERRIDE;&#xA;    String contentsWeightKgAttr = &quot; weight-kg=&quot;;&#xA;    String contentsWeightKgValue = XML_OVERRIDE+gdsWeight+XML_OVERRIDE;&#xA;&#xA;    if (shipper != null){&#xA;      try{&#xA;        shipperName = shipper.getBzuName();&#xA;        shipperName = removeDoubleQuotes(shipperName);&#xA;&#x9;&#x9;shipperId = shipper.getBzuId();&#xA;&#x9;&#x9;shipperId = removeDoubleQuotes(shipperId);&#xA;&#xA;        contentsShipperNameValue = XML_OVERRIDE+shipperName+XML_OVERRIDE;&#xA;        contentsShipperIdValue =  XML_OVERRIDE+shipperId+XML_OVERRIDE;&#xA;      } catch (Exception e){&#xA;        LOGGER.warn (&quot;Exception in getting Shipper Info&quot; + e);&#xA;      }&#xA;    }&#xA;&#x9; String handlingString = contentsOpenAttr;&#xA;&#x9;if (commodity != null)&#xA;&#x9;{&#xA;&#x9;&#x9;handlingString = handlingString + contentsCommodityNameAttr+contentsCommodityNameValue+contentsCommodityIdAttr+contentsCommodityIdValue;&#xA;&#x9;}&#xA;    if (shipper != null){&#xA;      handlingString = handlingString+contentsShipperNameAttr+contentsShipperNameValue+contentsShipperIdAttr+contentsShipperIdValue;&#xA;&#xA;    }&#xA;    if (consignee != null){&#xA;      handlingString = handlingString+contentsConsigneeNameAttr+contentsConsigneeNameValue+contentsConsigneeIdAttr+contentsConsigneeIdValue;&#xA;    }&#xA;    //if (blNbr !=null){&#xA;      handlingString = handlingString+contentsBlNbrAttr+contentsBlNbrValue;&#xA;    //}&#xA;    if (gdsWeight != null){&#xA;      handlingString = handlingString+contentsWeightKgAttr+contentsWeightKgValue;&#xA;    }&#xA;&#xA;     handlingString = handlingString+XML_END_ELEMENT;&#xA;     handlingString = this.stripInvalidXmlCharacters(handlingString);&#xA;     inElementList.append(handlingString);&#xA;     //Add Seal Element&#xA;    String sealsOpenAttr = &quot;&lt;seals&quot;;&#xA;    String seals1Attr = &quot; seal-1=&quot;;&#xA;    String seals1Value = XML_OVERRIDE+inUnit.getUnitSealNbr1()+XML_OVERRIDE;&#xA;    if (inUnit.getUnitSealNbr1() != null){&#xA;      String sealsString = sealsOpenAttr+seals1Attr+seals1Value+XML_END_ELEMENT;&#xA;      sealsString = this.stripInvalidXmlCharacters(sealsString);&#xA;&#x9;&#x9;sealsString = this.ModifyEscapeChar(sealsString);&#xA;&#x9;  inElementList.append(sealsString);&#xA;    }&#xA;    return inElementList;&#xA;  }&#xA;&#xA;public StringBuffer getUnitEtc(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;def drayStatus = inUnit.getFieldValue(&quot;unitDrayStatus&quot;);&#xA;&#x9;&#x9;if (drayStatus != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;drayStatus = drayStatus.getKey();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;String requiredPower = inUnit.getFieldValue(&quot;unitRequiresPower&quot;) ? &quot;Y&quot; : &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;String etcAttrOpn = &quot;&lt;unit-etc&quot;;&#xA;&#x9;&#x9;String etcString = etcAttrOpn;&#xA;&#x9;&#x9;if (requiredPower == &quot;Y&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;etcString = etcString + &quot; requires-power=&quot; + XML_OVERRIDE + requiredPower + XML_OVERRIDE;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (drayStatus !=null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;etcString = etcString + &quot; dray-status=&quot; + XML_OVERRIDE + drayStatus + XML_OVERRIDE;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (drayStatus != null || requiredPower == &quot;Y&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;etcString = etcString + XML_END_ELEMENT;&#xA;&#x9;&#x9;inElementList.append(etcString);&#xA;&#x9;&#x9;}&#xA;&#x9;return inElementList;&#xA;&#x9;}&#xA;&#xA;public getFlagDetails = {Unit inUnit, StringBuffer inElementList, CarrierVisit inCv -&gt;&#xA;&#xA;    String flagOpenCloseAttr = &quot;&lt;flags/&gt;&quot;;&#xA;    String flagOpenAttr = &quot;&lt;flags&gt;&quot;;&#xA;    String flagCloseAttr = &quot;&lt;/flags&gt;&quot;;&#xA;&#x9;String holdIdValue = &quot;&quot;;&#xA;&#x9;String holdString = &quot;&quot;;&#xA;&#x9;addNode = &quot;N&quot;;&#xA;    List unitImpediments = this.getUnitImpediments(inUnit);&#xA;&#xA;    if (unitImpediments.isEmpty()) {&#xA;      return inElementList;&#xA;    }&#xA;    for (ServiceImpediment imp : unitImpediments) {&#xA;      def status = imp.getStatus();&#xA;      if (FlagStatusEnum.ACTIVE.equals(status) || FlagStatusEnum.REQUIRED.equals(status)) {&#xA;        String holdOpenAttr = &quot;&lt;hold&quot;;&#xA;        String holdIdAttr = &quot; id=&quot;;&#xA;        String holdId = imp.getFlagType().getId();&#xA;&#x9;&#x9;String flgtypPurpose = imp.getFlagType().getPurpose().getKey();&#xA;&#x9;&#x9;//println (&quot;holdId &quot;+ holdId +&quot; flgtypPurpose &quot;+flgtypPurpose);&#xA;&#x9;&#x9;if (flgtypPurpose != &quot;PERMISSION&quot;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;addNode = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;holdIdValue = XML_OVERRIDE + holdId + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;holdString = holdString + holdOpenAttr + holdIdAttr + holdIdValue + XML_END_ELEMENT;&#xA;&#x9;&#x9;}&#xA;&#x9;  }&#xA;    }&#xA;&#xA;&#x9;if (addNode == &quot;Y&quot;)&#xA;&#x9;{&#xA;&#x9;&#x9;holdString = this.stripInvalidXmlCharacters(holdString);&#xA;&#x9;&#x9;holdString = this.ModifyEscapeChar(holdString);&#xA;&#x9;&#x9;holdString = flagOpenAttr + holdString + flagCloseAttr&#xA;&#x9;&#x9;inElementList.append(holdString);&#xA;&#x9;}&#xA;&#xA;&#x9;return inElementList;&#xA;  }&#xA;&#xA;  private List getUnitImpediments (Unit inUnit){&#xA;&#xA;    ServicesManager serviceManager = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;    List unitImpediments = serviceManager.getImpedimentsForEntity(inUnit);&#xA;    return unitImpediments;&#xA;  }&#xA;&#xA;/* public getFlagDetails = {Unit inUnit, StringBuffer inElementList, CarrierVisit inCv -&gt;&#xA;&#xA;    String flagOpenCloseAttr = &quot;&lt;flags/&gt;&quot;;&#xA;    String flagOpenAttr = &quot;&lt;flags&gt;&quot;;&#xA;    String flagCloseAttr = &quot;&lt;/flags&gt;&quot;;&#xA;&#xA;    List unitImpediments = this.getUnitImpediments(inUnit);&#xA;&#xA;    if (unitImpediments.isEmpty()) {&#xA;      String flagString = flagOpenCloseAttr;&#xA;      inElementList.append(flagString);&#xA;      return inElementList;&#xA;    }&#xA;    inElementList.append(flagOpenAttr);&#xA;    for (ServiceImpediment imp : unitImpediments) {&#xA;      def status = imp.getStatus();&#xA;      if (FlagStatusEnum.ACTIVE.equals(status) || FlagStatusEnum.REQUIRED.equals(status)) {&#xA;        String holdOpenAttr = &quot;&lt;hold&quot;;&#xA;        String holdIdAttr = &quot; id=&quot;;&#xA;        String holdId = imp.getFlagType().getId();&#xA;        String holdIdValue = XML_OVERRIDE + holdId + XML_OVERRIDE;&#xA;        String holdString = holdOpenAttr + holdIdAttr + holdIdValue + XML_END_ELEMENT;&#xA;        holdString = this.stripInvalidXmlCharacters(holdString);&#xA;&#x9;&#x9;holdString = this.ModifyEscapeChar(holdString);&#xA;&#x9;&#x9;inElementList.append(holdString);&#xA;      }&#xA;    }&#xA;    inElementList.append(flagCloseAttr);&#xA;    return inElementList;&#xA;  }&#xA;&#xA;  private List getUnitImpediments (Unit inUnit){&#xA;&#xA;    ServicesManager serviceManager = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;    List unitImpediments = serviceManager.getImpedimentsForEntity(inUnit);&#xA;    return unitImpediments;&#xA;  }&#xA;*/&#xA;  private String formatDate(Date inDate) {&#xA;    SimpleDateFormat yyyyMMdd = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;    SimpleDateFormat hhmmss = new SimpleDateFormat(&quot;HH:mm:ss.SSS&quot;);&#xA;    String sDate = yyyyMMdd.format(inDate) + &quot;T&quot; + hhmmss.format(inDate);&#xA;    return sDate&#xA;  }&#xA;&#xA;  private String formatRdsDate(Date inDate) {&#xA;    SimpleDateFormat yyyyMMdd = new SimpleDateFormat(&quot;MM/dd/yyyy&quot;);&#xA;    SimpleDateFormat hhmmss = new SimpleDateFormat(&quot;HH:mm:ss&quot;);&#xA;    String rdsDate = yyyyMMdd.format(inDate) + &quot; &quot; + hhmmss.format(inDate);&#xA;    return rdsDate&#xA;  }&#xA;&#xA;  public String findCarrierVisitMode (CarrierVisit inCv){&#xA;&#xA;    final LocTypeEnum carrierMode = inCv.getCvCarrierMode();&#xA;    if (carrierMode.equals(LocTypeEnum.VESSEL)){&#xA;      return &quot;VESSEL&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.TRUCK)){&#xA;      return &quot;TRUCK&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.TRAIN)){&#xA;      return &quot;TRAIN&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.YARD)){&#xA;      return &quot;YARD&quot;;&#xA;    }&#xA;    if (carrierMode.equals(LocTypeEnum.RAILCAR)){&#xA;      return &quot;TRAIN&quot;;&#xA;    }&#xA;&#x9;else{&#xA;      return &quot;UNKNOWN&quot;;&#xA;    }&#xA;  }&#xA;&#xA;&#xA;  public String findEquipmentMaterial(Equipment inEq){&#xA;&#xA;    String material=&quot;&quot;;&#xA;    if ((EquipMaterialEnum.ALUMINUM.equals(inEq.getEqMaterial()))){&#xA;      material = XML_OVERRIDE+&quot;ALUMINUM&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((EquipMaterialEnum.STEEL.equals(inEq.getEqMaterial()))){&#xA;      material = XML_OVERRIDE+&quot;STEEL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((EquipMaterialEnum.UNKNOWN.equals(inEq.getEqMaterial()))){&#xA;      material = XML_OVERRIDE+&quot;UNKNOWN&quot;+XML_OVERRIDE;&#xA;    }&#xA;    return material;&#xA;  }&#xA;&#xA;  public String findUnitNbr(Unit inUnit){&#xA;&#xA;    Equipment eq = inUnit.getPrimaryEq();&#xA;    String  equipId = eq.getEqIdFull();&#xA;    equipId = XML_OVERRIDE+equipId+XML_OVERRIDE;&#xA;    return equipId;&#xA;   }&#xA;&#xA;  public String findUnitCategory(Unit inUnit){&#xA;&#xA;    String category=&quot;&quot;;&#xA;    if ((UnitCategoryEnum.EXPORT.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;EXPORT&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((UnitCategoryEnum.IMPORT.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;IMPORT&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((UnitCategoryEnum.THROUGH.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;THROUGH&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((UnitCategoryEnum.TRANSSHIP.equals(inUnit.getUnitCategory()))){&#xA;      category = XML_OVERRIDE+&quot;TRANSSHIP&quot;+XML_OVERRIDE;&#xA;    }&#xA;    return category;&#xA;  }&#xA;&#xA;  public String findUnitFreightKind(Unit inUnit){&#xA;&#xA;    String freightKind=&quot;&quot;;&#xA;    if ((FreightKindEnum.MTY.equals(inUnit.getUnitFreightKind()))){&#xA;      freightKind = XML_OVERRIDE+&quot;MTY&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((FreightKindEnum.LCL.equals(inUnit.getUnitFreightKind()))){&#xA;      freightKind = XML_OVERRIDE+&quot;LCL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    if ((FreightKindEnum.FCL.equals(inUnit.getUnitFreightKind()))){&#xA;      freightKind = XML_OVERRIDE+&quot;FCL&quot;+XML_OVERRIDE;&#xA;    }&#xA;    return freightKind;&#xA;  }&#xA;&#xA;&#x9;public String getTimeFormat(String inDate)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;String outDate = null;&#xA;&#x9;&#x9;DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#xA;&#x9;&#x9;if (inDate != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Date date = new SimpleDateFormat(&quot;EEE MMM dd hh:mm:ss zzz yyyy&quot;, Locale.ENGLISH).parse(inDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outDate = df.format(date);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;catch (de)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Date date = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;, Locale.ENGLISH).parse(inDate);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outDate = df.format(date);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;outDate = outDate + &quot;T00:00:00.000&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;return outDate;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;  public StringBuffer getUfvDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;def ufv = inUnit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xA;&#xA;&#x9;&#x9;if (ufv != null){&#xA;&#x9;&#x9;&#x9;String addTag = &quot;N&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;String ufvflexdate1 = ufv.getFieldValue(&quot;ufvFlexDate01&quot;);&#xA;&#x9;&#x9;&#x9;String ufvflexdate2 = ufv.getFieldValue(&quot;ufvFlexDate02&quot;);&#xA;&#x9;&#x9;&#x9;String ufvflexdate3 = ufv.getFieldValue(&quot;ufvFlexDate03&quot;);&#xA;&#x9;&#x9;&#x9;String ufvflexdate4 = ufv.getFieldValue(&quot;ufvFlexDate04&quot;);&#xA;&#x9;&#x9;&#x9;String ufvflexdate5 = ufv.getFieldValue(&quot;ufvFlexDate05&quot;);&#xA;&#x9;&#x9;&#x9;String ufvflexdate6 = ufv.getFieldValue(&quot;ufvFlexDate06&quot;);&#xA;&#x9;&#x9;&#x9;String ufvflexdate7 = ufv.getFieldValue(&quot;ufvFlexDate07&quot;);&#xA;&#x9;&#x9;&#x9;String ufvflexdate8 = ufv.getFieldValue(&quot;ufvFlexDate08&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;String ufvflexString1 = ufv.getFieldValue(&quot;ufvFlexString1&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString1&quot;)) : null;&#xA;&#x9;&#x9;&#x9;String ufvflexString2 = ufv.getFieldValue(&quot;ufvFlexString2&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString2&quot;)) : null;&#xA;&#x9;&#x9;&#x9;String ufvflexString3 = ufv.getFieldValue(&quot;ufvFlexString3&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString3&quot;)) : null;&#xA;&#x9;&#x9;&#x9;String ufvflexString4 = ufv.getFieldValue(&quot;ufvFlexString4&quot;)!= null ? removeDoubleQuotes(ufv.getFieldValue(&quot;ufvFlexString4&quot;)) : null;&#xA;&#xA;&#x9;&#x9;&#x9;String date1Attr = &quot; ufv-flex-date-1=&quot;;&#xA;&#x9;&#x9;&#x9;String date2Attr = &quot; ufv-flex-date-2=&quot;;&#xA;&#x9;&#x9;&#x9;String date3Attr = &quot; ufv-flex-date-3=&quot;;&#xA;&#x9;&#x9;&#x9;String date4Attr = &quot; ufv-flex-date-4=&quot;;&#xA;&#x9;&#x9;&#x9;String date5Attr = &quot; ufv-flex-date-5=&quot;;&#xA;&#x9;&#x9;&#x9;String date6Attr = &quot; ufv-flex-date-6=&quot;;&#xA;&#x9;&#x9;&#x9;String date7Attr = &quot; ufv-flex-date-7=&quot;;&#xA;&#x9;&#x9;&#x9;String date8Attr = &quot; ufv-flex-date-8=&quot;;&#xA;&#xA;&#x9;&#x9;&#x9;String string1Attr = &quot; uvf-flex-1=&quot;;&#xA;&#x9;&#x9;&#x9;String string2Attr = &quot; uvf-flex-2=&quot;;&#xA;&#x9;&#x9;&#x9;String string3Attr = &quot; uvf-flex-3=&quot;;&#xA;&#x9;&#x9;&#x9;String string4Attr = &quot; uvf-flex-4=&quot;;&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;String ufvFlexOpenAttr = &quot;&lt;ufv-flex&quot;&#xA;&#x9;&#x9;&#x9;String ufvFlexString = ufvFlexOpenAttr;&#xA;&#xA;&#x9;&#x9;&#x9;if (ufvflexdate8 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate8 = this.getTimeFormat(ufvflexdate8)&#xA;&#x9;&#x9;&#x9;&#x9;String date8Value = XML_OVERRIDE+ufvflexdate8+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date8Attr+date8Value;&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (ufvflexdate7 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate7 = this.getTimeFormat(ufvflexdate7)&#xA;&#x9;&#x9;&#x9;&#x9;String date7Value = XML_OVERRIDE+ufvflexdate7+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date7Attr+date7Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (ufvflexdate6 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate6 = this.getTimeFormat(ufvflexdate6)&#xA;&#x9;&#x9;&#x9;&#x9;String date6Value = XML_OVERRIDE+ufvflexdate6+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date6Attr+date6Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (ufvflexdate5 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate5 = this.getTimeFormat(ufvflexdate5)&#xA;&#x9;&#x9;&#x9;&#x9;String date5Value = XML_OVERRIDE+ufvflexdate5+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date5Attr+date5Value;&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (ufvflexdate4 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate4 = this.getTimeFormat(ufvflexdate4)&#xA;&#x9;&#x9;&#x9;&#x9;String date4Value = XML_OVERRIDE+ufvflexdate4+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date4Attr+date4Value;&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (ufvflexdate3 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate3 = this.getTimeFormat(ufvflexdate3)&#xA;&#x9;&#x9;&#x9;&#x9;String date3Value = XML_OVERRIDE+ufvflexdate3+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date3Attr+date3Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (ufvflexdate2 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate2 = this.getTimeFormat(ufvflexdate2)&#xA;&#x9;&#x9;&#x9;&#x9;String date2Value = XML_OVERRIDE+ufvflexdate2+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date2Attr+date2Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (ufvflexdate1 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvflexdate1 = this.getTimeFormat(ufvflexdate1)&#xA;&#x9;&#x9;&#x9;&#x9;String date1Value = XML_OVERRIDE+ufvflexdate1+XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+date1Attr+date1Value;&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (ufvflexString1 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string1Attr+string1Value;&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (ufvflexString2 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string2Attr+string2Value;&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (ufvflexString3 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string3Attr+string3Value;&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (ufvflexString4 != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString+string4Attr+string4Value;&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = this.stripInvalidXmlCharacters(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;addTag = &quot;Y&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (addTag == &quot;Y&quot;)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = ufvFlexString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;//ufvFlexString = this.stripInvalidXmlCharacters(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;ufvFlexString = this.ModifyEscapeChar(ufvFlexString);&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(ufvFlexString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;&#x9;&#x9;public StringBuffer getUnitFlexDetails(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv){&#xA;&#xA;&#x9;&#x9;String  unitflexString1 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString2 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString3 = &quot;&quot;;&#xA;&#x9;&#x9;String  unitflexString4 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString5 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString6 = &quot;&quot;;&#xA;&#x9;&#x9;String  unitflexString7 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString8 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString9 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString10 = &quot;&quot;;&#xA;&#x9;&#x9;String&#x9;unitflexString12 = &quot;&quot;;&#xA;&#xA;&#x9;&#x9;unitflexString1 = inUnit.getFieldValue(&quot;unitFlexString01&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString01&quot;)): null;&#xA;&#x9;&#x9;unitflexString2 = inUnit.getFieldValue(&quot;unitFlexString02&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString02&quot;)): null;&#xA;&#x9;&#x9;unitflexString3 = inUnit.getFieldValue(&quot;unitFlexString03&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString03&quot;)): null;&#xA;&#x9;&#x9;unitflexString4 = inUnit.getFieldValue(&quot;unitFlexString04&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString04&quot;)): null;&#xA;&#x9;&#x9;unitflexString5 = inUnit.getFieldValue(&quot;unitFlexString05&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString05&quot;)): null;&#xA;&#x9;&#x9;unitflexString6 = inUnit.getFieldValue(&quot;unitFlexString06&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString06&quot;)): null;&#xA;&#x9;&#x9;unitflexString7 = inUnit.getFieldValue(&quot;unitFlexString07&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString07&quot;)): null;&#xA;&#x9;&#x9;unitflexString8 = inUnit.getFieldValue(&quot;unitFlexString08&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString08&quot;)): null;&#xA;&#x9;&#x9;unitflexString9 = inUnit.getFieldValue(&quot;unitFlexString09&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString09&quot;)): null;&#xA;&#x9;&#x9;unitflexString10 = inUnit.getFieldValue(&quot;unitFlexString10&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString10&quot;)): null;&#xA;&#x9;&#x9;unitflexString12 = inUnit.getFieldValue(&quot;unitFlexString12&quot;) != null ? removeDoubleQuotes(inUnit.getFieldValue(&quot;unitFlexString12&quot;)): null;&#xA;&#xA;&#xA;&#x9;&#x9;String unitFlexOpenAttr = &quot;&lt;unit-flex&quot;&#xA;&#x9;&#x9;String string1Attr = &quot; unit-flex-1=&quot;;&#xA;&#x9;&#x9;String string2Attr = &quot; unit-flex-2=&quot;;&#xA;&#x9;&#x9;String string3Attr = &quot; unit-flex-3=&quot;;&#xA;&#x9;&#x9;String string4Attr = &quot; unit-flex-4=&quot;;&#xA;&#x9;&#x9;String string5Attr = &quot; unit-flex-5=&quot;;&#xA;&#x9;&#x9;String string6Attr = &quot; unit-flex-6=&quot;;&#xA;&#x9;&#x9;String string7Attr = &quot; unit-flex-7=&quot;;&#xA;&#x9;&#x9;String string8Attr = &quot; unit-flex-8=&quot;;&#xA;&#x9;&#x9;String string9Attr = &quot; unit-flex-9=&quot;;&#xA;&#x9;&#x9;String string10Attr = &quot; unit-flex-10=&quot;;&#xA;&#x9;&#x9;String string12Attr = &quot; unit-flex-12=&quot;;&#xA;&#xA;&#x9;&#x9;String string1Value = XML_OVERRIDE+unitflexString1+XML_OVERRIDE;&#xA;&#x9;&#x9;String string2Value = XML_OVERRIDE+unitflexString2+XML_OVERRIDE;&#xA;&#x9;&#x9;String string3Value = XML_OVERRIDE+unitflexString3+XML_OVERRIDE;&#xA;&#x9;&#x9;String string4Value = XML_OVERRIDE+unitflexString4+XML_OVERRIDE;&#xA;&#x9;&#x9;String string5Value = XML_OVERRIDE+unitflexString5+XML_OVERRIDE;&#xA;&#x9;&#x9;String string6Value = XML_OVERRIDE+unitflexString6+XML_OVERRIDE;&#xA;&#x9;&#x9;String string7Value = XML_OVERRIDE+unitflexString7+XML_OVERRIDE;&#xA;&#x9;&#x9;String string8Value = XML_OVERRIDE+unitflexString8+XML_OVERRIDE;&#xA;&#x9;&#x9;String string9Value = XML_OVERRIDE+unitflexString9+XML_OVERRIDE;&#xA;&#x9;&#x9;String string10Value = XML_OVERRIDE+unitflexString10+XML_OVERRIDE;&#xA;&#x9;&#x9;String string12Value = XML_OVERRIDE+unitflexString12+XML_OVERRIDE;&#xA;&#xA;&#xA;&#x9;&#x9;String unitFlexString = unitFlexOpenAttr;&#xA;&#xA;&#x9;&#x9;if (unitflexString12 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string12Attr+string12Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString10 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string10Attr+string10Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString9 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string9Attr+string9Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (unitflexString8 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string8Attr+string8Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString7 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string7Attr+string7Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString6 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string6Attr+string6Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString5 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string5Attr+string5Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString4 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string4Attr+string4Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString3 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string3Attr+string3Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString2 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string2Attr+string2Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (unitflexString1 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+string1Attr+string1Value;&#xA;&#x9;&#x9;&#x9;unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (unitflexString1 != null || unitflexString2 != null || unitflexString3 != null || unitflexString4 != null || unitflexString5 != null || unitflexString6 != null&#xA;&#x9;&#x9;&#x9;|| unitflexString7 != null || unitflexString8 != null || unitflexString9 != null || unitflexString10 != null || unitflexString12 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unitFlexString = unitFlexString+XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;//unitFlexString = this.stripInvalidXmlCharacters(unitFlexString);&#xA;&#x9;&#x9;&#x9;unitFlexString = this.ModifyEscapeChar(unitFlexString);&#xA;&#x9;&#x9;&#x9;inElementList.append(unitFlexString);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;public StringBuffer geTimeStamp(Unit inUnit, StringBuffer inElementList, CarrierVisit inCv)&#xA;&#x9;{&#xA;&#xA;&#x9;&#x9;def ufv = inUnit.getUnitActiveUfvNowActive();&#xA;&#x9;&#x9;if (ufv !=null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;String timeIn = ufv.ufvTimeIn;&#xA;&#x9;&#x9;&#x9;String timeOut = ufv.ufvTimeOut;&#xA;&#x9;&#x9;&#x9;String timeLoad = ufv.ufvTimeOfLoading;&#xA;&#xA;&#x9;&#x9;    String timeStampAttrOpn = &quot;&lt;timestamps&quot;;&#xA;&#x9;&#x9;&#x9;String timeStampString = timeStampAttrOpn;&#xA;&#x9;&#x9;&#x9;if (timeIn !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + &quot; time-in=&quot; + XML_OVERRIDE + timeIn + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (timeOut !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + &quot; time-out=&quot; + XML_OVERRIDE + timeOut + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (timeLoad !=null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + &quot; time-load=&quot; + XML_OVERRIDE + timeLoad + XML_OVERRIDE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if (timeIn != null || timeOut != null || timeLoad != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;timeStampString = timeStampString + XML_END_ELEMENT;&#xA;&#x9;&#x9;&#x9;&#x9;inElementList.append(timeStampString);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return inElementList;&#xA;&#x9;  }&#xA;&#xA;  public String stripInvalidXmlCharacters(String input){&#xA;    String specialCharacter = &quot;&amp;&quot;;&#xA;    if (input.contains(specialCharacter)) {&#xA;       input = input.replaceAll(&quot;&amp;&quot;, &quot;&amp;amp;&quot;);&#xA;       //LOGGER.warn(&quot;sb:&quot; + input);&#xA;    }&#xA;    return input;&#xA;  }&#xA;&#xA; public String removeDoubleQuotes(String input){&#xA;    String specialCharacter = &quot;&amp;&quot;;&#xA;    if (input.contains(&quot;\&quot;&quot;)) {&#xA;       input = input.replaceAll(&quot;\&quot;&quot;, &quot;#quot;&quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;&lt;&quot;)) {&#xA;       input = input.replaceAll(&quot;&lt;&quot;, &quot;#lt;&quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;&gt;&quot;)) {&#xA;       input = input.replaceAll(&quot;&gt;&quot;, &quot;#gt;&quot;);&#xA;    }&#xA;    return input;&#xA;  }&#xA;&#xA; public String ModifyEscapeChar(String input){&#xA;    if (input.contains(&quot;#quot&quot;)) {&#xA;       input = input.replaceAll(&quot;#quot;&quot;, &quot;&amp;quot;&quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;#lt&quot;)) {&#xA;       input = input.replaceAll(&quot;#lt;&quot;, &quot;&amp;lt;&quot;);&#xA;    }&#xA;&#x9;if (input.contains(&quot;#gt&quot;)) {&#xA;       input = input.replaceAll(&quot;#gt;&quot;, &quot;&amp;gt;&quot;);&#xA;    }&#xA;    return input;&#xA;  }&#xA;&#xA;public void createBdaEdtEvent(Object event, Unit tempUnit)&#xA;  {&#xA;&#xA;&#x9;//Thread.sleep(600000);&#xA;&#x9;Thread.sleep(600);&#xA;&#xA;&#x9;LOGGER.warn(&quot;createBdaEdt started&quot; + timeNow);&#xA;    if (tempUnit == null){&#xA;      LOGGER.warn (&quot; Unit is null&quot;);&#xA;      return;&#xA;    }&#xA;    UnitFacilityVisit ufv = tempUnit.getUnitActiveUfvNowActive();&#xA;    if (ufv == null){&#xA;      LOGGER.warn (&quot; Unit facility is null&quot;);&#xA;      return;&#xA;    }&#xA;    CarrierVisit cv = ufv.getInboundCarrierVisit();&#xA;&#xA;&#x9;List unitListForUpdate = this.getUnitListInCvForUpdate(cv);&#xA;&#x9;if (unitListForUpdate.isEmpty()) {&#xA;      LOGGER.warn (&quot;No Units in CV for update&quot;);&#xA;      return;&#xA;    }&#xA;&#xA;&#x9;LOGGER.warn(&quot;unitListForUpdate.size&quot; + unitListForUpdate.size);&#xA;&#x9;LOGGER.warn(&quot;unitListForUpdate Start&quot;);&#xA;&#x9;Iterator iter = unitListForUpdate.iterator();&#xA;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;def units = iter.next();&#xA;&#x9;&#x9;println(&quot;Setting editFlag to empty ni MATProcess... &quot;+units.unitId)&#xA;&#x9;&#x9;units.setUnitFlexString11(&quot;&quot;);&#xA;&#x9;&#x9;this.procNewVes(event,units);&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#x9;LOGGER.warn(&quot;NEWVESSEL CODING COMPLETED-&quot;+cv+&quot;-NewVes &quot;+timeNow);&#xA;&#x9;println(&quot;NEWVESSEL CODING COMPLETED-&quot;+cv+&quot;-NewVes &quot;+timeNow);&#xA;&#x9;try {&#xA;&#x9;this.sendToTdp(&quot;NEWVESSEL CODING COMPLETED-&quot;+cv+&quot;-NewVes &quot;+timeNow);&#xA;&#x9;}&#xA;&#x9;catch (e){&#xA;&#x9;&#x9;println(&quot;ERROR IN NEWVESSEL CODING COMPLETED&quot; + e);&#xA;&#x9;}&#xA;    LOGGER.warn(&quot;createBdaEdt ended&quot; + timeNow);&#xA;  }&#xA;&#xA;public void procNewVes(Object event,Object unit){&#xA;      try{&#xA;&#x9;  def unitDetails = inj.getGroovyClassInstance(&quot;GvyCmisDataProcessor&quot;)&#xA;      def unitDtl = unitDetails.doItNewVess(event,unit)&#xA;      def gvyCmisUtil = inj.getGroovyClassInstance(&quot;GvyCmisUtil&quot;)&#xA;&#xA;      //Post Directly to Gems(N4Topic)Bypass TDP&#xA;      //def jmsTopicSender = api.getGroovyClassInstance(&quot;JMSTopicSender&quot;)&#xA;&#x9;  def jmsQueueSender = inj.getGroovyClassInstance(&quot;JMSQueueSender&quot;) //A5&#xA;      def groupCode = unit.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;)&#xA;&#x9;  //PDU for WO transfer units&#xA;&#x9;  if('XFER-WO'.equals(groupCode)){&#xA;&#x9;   def xmlpdu = gvyCmisUtil.eventSpecificFieldValue(unitDtl,&quot;action=&quot;,&quot;PDU&quot;)&#xA;       xmlpdu = gvyCmisUtil.eventSpecificFieldValue(xmlpdu,&quot;lastAction=&quot;,&quot;PDU&quot;)&#xA;       jmsQueueSender.send(xmlpdu);&#xA;       println(&quot;PDU DIRECT TO GEMS=&quot;+xmlpdu)&#xA;      }&#xA;&#xA;      //BDC&#xA;&#x9;  def xmlBdc = gvyCmisUtil.eventSpecificFieldValue(unitDtl,&quot;action=&quot;,&quot;BDC&quot;)&#xA;      xmlBdc = gvyCmisUtil.eventSpecificFieldValue(xmlBdc,&quot;lastAction=&quot;,&quot;BDC&quot;)&#xA;      jmsQueueSender.send(xmlBdc);&#xA;      println(&quot;BDC DIRECT TO GEMS=&quot;+xmlBdc)&#xA;&#xA;&#x9;  //EDT&#xA;&#x9;  def xmlEdt = gvyCmisUtil.eventSpecificFieldValue(unitDtl,&quot;action=&quot;,&quot;EDT&quot;)&#xA;      xmlEdt = gvyCmisUtil.eventSpecificFieldValue(xmlEdt,&quot;lastAction=&quot;,&quot;EDT&quot;)&#xA;      jmsQueueSender.send(xmlEdt);&#xA;&#x9;  println(&quot;EDT DIRECT TO GEMS=&quot;+xmlEdt)&#xA;&#xA;&#x9;  }catch(Exception e){&#xA;&#x9;&#x9;  e.printStackTrace();&#xA;      }&#xA;   }&#xA;&#xA;public void writeToFile(def fileName, def infoList) {&#xA;  String path = &quot;/var/tmp&quot;;&#xA;&#x9;LOGGER.warn(&quot;Inside writeToFile&quot; + timeNow);&#xA;&#x9;LOGGER.warn(&quot;writeToFile to &quot; + path+&quot;/&quot;+fileName);&#xA;&#x9;File file = new File(&quot;$path/$fileName&quot;)&#xA;&#x9;infoList.each {&#xA;       file &lt;&lt; (&quot;${it}&quot;)&#xA;    }&#xA;}&#xA;&#xA;    private static final Logger LOGGER = Logger.getLogger(MATProcessMatsonVessTest.class);&#xA;}&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;" />
<digital-asset id="MatUpdateOBIntended" short-description="MatUpdateOBIntended" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.argo.business.atoms.LocTypeEnum;&#xA;import com.navis.argo.business.model.CarrierVisit;&#xA;import com.navis.inventory.InventoryField;&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;&#xA;/*&#xA;* Author : Raghu Iyer&#xA;* Date Written : 09/19/2012&#xA;* Description: This groovy is used to generate the Stowplan/Manifest Discrepancies after Stowplan and Manifest process&#xA;*/&#xA;&#xA;public class MatUpdateOBIntended extends GroovyInjectionBase&#xA;{&#xA;&#x9;def inj = new GroovyInjectionBase();&#xA;&#x9;&#xA;&#x9;public void execute(Object unit)&#xA;&#x9;{&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;LocTypeEnum locEnum = LocTypeEnum.TRUCK;&#xA;&#x9;&#x9;&#x9;def carrier = CarrierVisit.getGenericCarrierVisitForMode(ContextHelper.getThreadComplex(),locEnum);&#xA;&#x9;&#x9;&#x9;println(&quot;Update OB intended and OB actual with :: &quot;+ carrier + &quot; for unit id ::&quot;+unit.unitId);&#xA;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitActiveUfv.ufvIntendedObCv&quot;,carrier);&#xA;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitActiveUfv.ufvActualObCv&quot;,carrier);&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;&#x9;println(e)&#xA;&#x9;&#x9;}&#xA;&#x9;}&#x9;&#xA;&#xA;&#x9;public boolean execute(Map params)&#xA;&#x9;{&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;List units = getActiveUnitsRi(&quot;MATU2545751&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if (units.size() &gt; 0) {&#xA;&#x9;&#x9;&#x9;&#x9;Iterator unitsIter = units.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while (unitsIter.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = unitsIter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;LocTypeEnum locEnum = LocTypeEnum.TRUCK;&#xA;    &#x9;&#x9;&#x9;&#x9;def carrier = CarrierVisit.getGenericCarrierVisitForMode(ContextHelper.getThreadComplex(),locEnum);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Update OB intended and OB actual with :: &quot;+ carrier + &quot; for unit id ::&quot;+unit.unitId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitActiveUfv.ufvIntendedObCv&quot;,carrier);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitActiveUfv.ufvActualObCv&quot;,carrier);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;&#x9;println(e)&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;public List getActiveUnitsRi(String unitId)&#xA;&#x9;{&#xA;&#x9;&#x9;try &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;).addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID, unitId)).addDqOrdering(Ordering.desc(InventoryField.UFV_TIME_OF_LAST_MOVE));&#xA;&#xA;&#x9;&#x9;&#x9;println(&quot;dq:::::::::&quot;+dq)&#xA;&#x9;&#x9;&#x9;def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;println(&quot;After unitList&quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;units.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;println(&quot;unitsSize&quot; + units.size);&#xA;&#x9;&#x9;&#x9;return units;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;e.printStackTrace();&#xA;&#x9;&#x9;&#x9;println(e.getMessage());&#xA;&#x9;&#x9;}&#xA;&#x9;}&#x9;&#x9;&#xA;&#xA; }&#xA;&#xA;&#xA;" />
<digital-asset id="MatAvailabilityandStorageDatesReport" short-description="MatAvailabilityandStorageDatesReport" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.atoms.CalendarTypeEnum&#xA;import com.navis.argo.business.calendar.ArgoCalendar&#xA;import com.navis.argo.business.calendar.ArgoCalendarEventType&#xA;import com.navis.argo.business.calendar.ArgoCalendarUtil&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import net.sf.jasperreports.engine.JRDataSource&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource&#xA;import org.apache.log4j.Logger&#xA;&#xA;import java.text.SimpleDateFormat&#xA;/*&#xA;&#xA;*/&#xA;&#xA;public class MatAvailabilityandStorageDatesReport extends GroovyApi{&#xA;&#xA;&#xA;  public void execute (GroovyEvent event, Object api){&#xA;&#xA;    def visit = event.getEntity();&#xA;    def facility = visit.getFieldValue(&quot;cvdCv.cvFacility.fcyId&quot;)&#xA;    def cls=visit.getCarrierVesselClassType().getKey();&#xA;    def nxtFcy=visit.getFieldValue(&quot;cvdCv.cvNextFacility.fcyId&quot;)&#xA;    def ves=visit.getFieldValue(&quot;cvdCv.cvId&quot;)&#xA;    Date timeATA = visit.getCvdCv().getCvATA();&#xA;    Date actualTimeOfDeparture = visit.getCvdCv().getCvATD();&#xA;    Date timeETA = visit.getCvdCv().getCvCvd().getCvdETA();&#xA;    Date estTimeOfDeparture = visit.getCvdCv().getCvCvd().getCvdETD();&#xA;    def beginDate = visit.getFieldValue(&quot;cvdCv.cvCvd.cvdTimeFirstAvailability&quot;);&#xA;    TimeZone zone = ContextHelper.getThreadFacility().getTimeZone();&#xA;&#xA;&#xA;&#xA;    LOGGER.warn (&quot;Facility: &quot; + facility);&#xA;    LOGGER.warn (&quot;Class: &quot; + cls);&#xA;    LOGGER.warn (&quot;Next Facility: &quot; + nxtFcy);&#xA;    LOGGER.warn (&quot;Vessel: &quot; + ves);&#xA;    LOGGER.warn (&quot;TimeATA: &quot; + timeATA);&#xA;    LOGGER.warn (&quot;TimeATD: &quot; + actualTimeOfDeparture);&#xA;    LOGGER.warn (&quot;beginDate: &quot; + beginDate);&#xA;    LOGGER.warn (&quot;TimeETA: &quot; + timeETA);&#xA;    LOGGER.warn (&quot;TimeETD: &quot; + estTimeOfDeparture);&#xA;&#xA;    //Date availTwoDays = addDays(beginDate, 2);&#xA;    Date availTwoDays = addBusinessDate(beginDate, zone, 2);&#xA;    //Date availTwoDays = formatDate(availTwoDays1);&#xA;&#xA;&#xA;    LOGGER.warn (&quot;availTwoDays: &quot; + availTwoDays);&#xA;&#xA;    Date availThreeDays = addBusinessDate(beginDate, zone, 3);&#xA;    Date availFourDays = addBusinessDate(beginDate, zone, 4);&#xA;    Date availFiveDays = addBusinessDate(beginDate, zone, 5);&#xA;    Date availSixDays = addBusinessDate(beginDate, zone, 6);&#xA;    Date availSevenDays = addBusinessDate(beginDate, zone, 7);&#xA;    Date availEightDays = addDays(beginDate, 7);&#xA;    Date availTenDays = addDays(beginDate, 9);&#xA;    Date availTenBusiDays = addBusinessDate(beginDate, zone, 10);&#xA;    Date availFourteenDays = addDays(beginDate, 13);&#xA;    Date availFifteenDays = addDays(beginDate, 14);&#xA;    Date availFifteenBusiDays = addBusinessDate(beginDate, zone, 15);&#xA;    Date availThirtyDays = addBusinessDate(beginDate, zone, 30);&#xA;&#xA;    LOGGER.warn (&quot;availTwoDays: &quot; + availTwoDays);&#xA;&#xA;    //Set Report Parameter&#xA;&#xA;    LOGGER.warn (&quot;Map setup: &quot;);&#xA;    def inj = new GroovyInjectionBase();&#xA;    HashMap parameters = new HashMap();&#xA;    //String strDate = ContextHelper.formatTimestamp(event.getEvent().getEventTime(), timezone)&#xA;    //parameters.put(&quot;Date&quot;,strDate);&#xA;    def emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;    LOGGER.warn (&quot;Email setup: &quot;);&#xA;    //Create and Mail Report&#xA;    //JRDataSource ds = new JRMapCollectionDataSource(unitRptList);&#xA;    //def reportRunner = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;    def reportDesignName = &quot;AVAILABILITY AND STORAGE&quot;;&#xA;    def displayType = null;&#xA;    ArrayList rptList = new ArrayList();&#xA;&#xA;    parameters.put(&quot;vesVoy&quot;, ves);&#xA;    parameters.put(&quot;destination&quot;, facility);&#xA;    parameters.put(&quot;depDate1&quot;, estTimeOfDeparture);&#xA;&#xA;    parameters.put(&quot;arrivalDate&quot;, timeETA);&#xA;    parameters.put(&quot;availableDate&quot;, beginDate);&#xA;&#xA;    parameters.put(&quot;twoDays&quot;, availTwoDays);&#xA;    parameters.put(&quot;threeDays&quot;, availThreeDays);&#xA;    parameters.put(&quot;fourDays&quot;, availFourDays);&#xA;    parameters.put(&quot;fiveDays&quot;, availFiveDays);&#xA;    parameters.put(&quot;sixDays&quot;, availSixDays);&#xA;    parameters.put(&quot;sevenDays&quot;, availSevenDays);&#xA;&#xA;    parameters.put(&quot;eightCalenderDays&quot;, availEightDays);&#xA;    parameters.put(&quot;tenCalenderDays&quot;, availTenDays);&#xA;    parameters.put(&quot;tenDays&quot;, availTenBusiDays);&#xA;    parameters.put(&quot;fourteenCalenderDays&quot;, availFourteenDays);&#xA;    parameters.put(&quot;fifteenCalenderDays&quot;, availFifteenDays);&#xA;    parameters.put(&quot;fifteenDays&quot;, availFifteenBusiDays);&#xA;    parameters.put(&quot;thirtyDays&quot;, availThirtyDays);&#xA;    HashMap dummyMap = new HashMap();&#xA;    dummyMap.put(&quot;UnitId&quot;, &quot;MATU000000&quot;);&#xA;    rptList.add(dummyMap);&#xA;    LOGGER.warn (&quot;Mail format: &quot;);&#xA;&#xA;    //Create and Mail Report&#xA;    JRDataSource ds = new JRMapCollectionDataSource(rptList);&#xA;&#xA;    LOGGER.warn (&quot;send mail: &quot;);&#xA;    LOGGER.warn (&quot;parameters: &quot; + parameters);&#xA;    def reportRun = inj.getGroovyClassInstance(&quot;ReportRunner&quot;);&#xA;    reportRun.emailReport(ds,parameters, reportDesignName,emailTo, &quot;Availability and Storage Dates : &quot; + ves  ,&quot;Attached report for AVSD&quot;);&#xA;&#xA;  }&#xA;&#xA;  public Date addBusinessDate(Date startDate, TimeZone zone, int addDays) {&#xA;    int altdays = addDays; //A5&#xA;    ArgoCalendarEventType[] exemptTypes = null;&#xA;    exemptTypes = new ArgoCalendarEventType[1];&#xA;    exemptTypes[0] = ArgoCalendarEventType.findOrCreateArgoCalendarEventType(&quot;EXEMPT_DAY&quot;);&#xA;    ///exemptTypes[1] = ArgoCalendarEventType.findOrCreateArgoCalendarEventType(&quot;GRATIS_DAY&quot;);&#xA;&#xA;    //println(&quot;addBusinessDate : altdays=&quot;+altdays+&quot;   addDays=&quot;+addDays)&#xA;    //def exemptCalendarEvents = AppCalendarUtil.getEvents(exemptTypes, ContextHelper.getThreadUserContext());&#xA;    CalendarTypeEnum calendarTypeEnum = CalendarTypeEnum.getEnum(&quot;STORAGE&quot;);&#xA;    ArgoCalendar argoCal = ArgoCalendar.findDefaultCalendar(calendarTypeEnum);&#xA;    def exemptCalendarEvents = ArgoCalendarUtil.getEvents(exemptTypes, argoCal);&#xA;    Date endDate = ArgoCalendarUtil.getEndDate(startDate, zone, altdays, exemptCalendarEvents, exemptTypes);&#xA;    if (endDate != null) {&#xA;      Calendar calendar = Calendar.getInstance(zone);&#xA;      calendar.setTimeInMillis(endDate.getTime());&#xA;      calendar.add(Calendar.DAY_OF_YEAR, -1);&#xA;      endDate = calendar.getTime();&#xA;    }&#xA;    return endDate;&#xA;  }&#xA;&#xA;  public static Date addDays(Date baseDate, int daysToAdd) {&#xA;    Calendar calendar = Calendar.getInstance();&#xA;    calendar.setTime(baseDate);&#xA;    calendar.add(Calendar.DAY_OF_YEAR, daysToAdd);&#xA;    return calendar.getTime();&#xA;  }&#xA;&#xA;  public Date formatDate(Date inDate) {&#xA;    LOGGER.warn (&quot;in formatDate: &quot;);&#xA;    SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;MM/DD/YYYY&quot;);&#xA;    LOGGER.warn (&quot;return formatDate: &quot;);&#xA;    Date formattedDate = dateFormat.format(inDate);&#xA;    return formattedDate;&#xA;  }&#xA;&#xA;  private static final Logger LOGGER = Logger.getLogger(MatAvailabilityandStorageDatesReport.class);&#xA;}" />
<digital-asset id="GvyCmisUnitCargoEdit" short-description="GvyCmisUnitCargoEdit" is-pre-deployed="N" groovy-code="/*&#xA;* A1  GR   12/21/09 Added trim to destination  and POD value&#xA;* A2  GR   01/28/10 Removed FREE Msg for Detention SIT&#xA;* A3 GR    10/08/10  Gems : Uptd message posting method to Incorporate&#xA;                     Message specific field updates(example : AVL)&#xA;&#x9;&#x9;&#x9;         Depending Class GvyCmisUtil&#xA;* A4  GR   11/09/10  Issue: Updating POD thats not on Obcarrier itinerary&#xA;                     Fix: for NIS Update the OBcarrier to BARGE and then update the POD&#xA;* A5 LC    10/18/12  Issue: Destination changed for SIT_ASSIGN, SIT_UNASSIGN, UNIT_PROPERTY_UPDATE&#xA;*                    and group id is 'YB', the group id remains = 'YB'&#xA;*                    Fix: when destination changes and group id = 'YB', YB_UNASSIGN event is invoked&#xA;*/&#xA;&#xA;import com.navis.argo.business.reference.RoutingPoint;&#xA;import com.navis.argo.business.model.CarrierVisit;&#xA;import com.navis.argo.ContextHelper;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;&#xA;public class GvyCmisUnitCargoEdit&#xA;{&#xA;   def cmisActionList = ''&#xA;   def locationStatus = ''&#xA;   def gvyEventUtil = null&#xA;   def isPodUpdated = false&#xA;   def _previousPod = ''&#xA;   def gvyCmisUtil = null&#xA;&#xA;    StringBuffer buffFieldName = new StringBuffer();&#xA;   /*&#xA;    * Method Processes the Updates fields in event UNIT_PROPERTY_UPDATE&#xA;    * 1] Read the event obj and stores the Updated Field Values&#xA;    * 2] Reads the field obj and process cmis msg for updates Fields&#xA;    */&#xA;   public String unitUpdateProcess(String xmlData,Object event,Object gvyBaseClass, boolean detnMsg,String previousDischPort)&#xA;   {&#xA;      def xmlGvyString = xmlData&#xA;      boolean postMsgEDT = false;&#xA;      try&#xA;      {&#xA;        //Read &amp; Store Event Fields into an EventField Object&#xA;        def unit = event.getEntity()&#xA;        gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;        gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;        cmisActionList = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisListAction&quot;);&#xA;&#xA;        //Set location status field&#xA;       locationStatus = getlocationStatus(unit,gvyCmisUtil)&#xA;&#xA;        Map mapEvntFld = gvyEventUtil.eventFieldChangedValues(event, gvyBaseClass)&#xA;&#xA;        //Read Fields and stores values into StringBuffer Objects for processing&#xA;        readEventChangedFields(mapEvntFld)&#xA;&#xA;        //Check For Detention Msg&#xA;        println(&quot;Detention MSG :::&quot;+detnMsg)&#xA;        if(detnMsg)&#xA;       {&#xA;          def eventId = event.event.eventTypeId&#xA;          if(!(eventId.equals(&quot;SIT_ASSIGN&quot;) || eventId.equals(&quot;SIT_UNASSIGN&quot;))){&#xA;             cmisActionList.setActionList(&quot;FREE&quot;)&#xA;&#x9;&#x9;  }&#xA;          cmisActionList.setActionList(&quot;EDT&quot;)&#xA;        }&#xA;&#xA;        //Gets Field specific action &amp; Post Message&#xA;        String evntFieldName = new String(buffFieldName)&#xA;        String [] fldNames = evntFieldName != null ? evntFieldName.split(' ') : null;&#xA;        for(aFldName in fldNames)&#xA;        {&#xA;           def fldAction = getChangedFieldAction(aFldName.trim())&#xA;           //println(&quot;unit_property_update::Field Action ::&quot;+fldAction)&#xA;           if(fldAction != null &amp;&amp; fldAction.length() &gt; 0 )&#xA;           {&#xA;             postFieldSpecMsg(xmlGvyString,gvyBaseClass,gvyCmisUtil,fldAction,unit,event,previousDischPort)&#xA;           }&#xA;        }&#xA;&#xA;&#x9;&#x9;if(event.event.eventTypeId.equals('REVIEW_FOR_STOW')){&#xA;&#x9;&#x9;&#x9;cmisActionList.setActionList(&quot;RFS&quot;)&#xA;        }&#xA;&#xA;      //Post Cmis msg after appending the required action&#xA;       LinkedHashSet actionList = cmisActionList.getActionList();&#xA;       println(&quot;actionList :::::&quot;+actionList.size())&#xA;       for(aAction in actionList)&#xA;       {&#xA;          println(&quot;UNIT_PROPERTY_UPDT_ACTION_MSG_POSTING ::&quot;+aAction);&#xA;         // gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,aAction)&#xA;&#x9;&#x9;  gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,aAction, unit, event,gvyEventUtil) //A3&#xA;       }&#xA;&#xA;      }catch(Exception e){&#xA;        e.printStackTrace()&#xA;      }&#xA;      return ''&#xA;   }//Method unitUpdateProcess Ends&#xA;&#xA;   /*&#xA;   * Method reads the Updated field values from the object&#xA;   * and stores the values in a string buffer for processing&#xA;   */&#xA;   public void readEventChangedFields(Object mapEvntField)&#xA;   {&#xA;      def processFlag = false;&#xA;&#x9;  def isappended = false;&#xA;      try&#xA;      {&#xA;        Iterator it = mapEvntField.keySet().iterator();&#xA;        while (it.hasNext())&#xA;        {&#xA;          def aField = it.next();&#xA;          def aEvntFieldObj = mapEvntField.get(aField)&#xA;&#xA;          //Fetch Updated Field Values&#xA;          def fieldname = aEvntFieldObj.getFieldName()&#xA;          def previousValue = aEvntFieldObj.getpreviousValue()&#xA;&#x9;      previousValue = previousValue != null ? previousValue : ''&#xA;          def currentValue = aEvntFieldObj.getCurrentValue()&#xA;          currentValue = currentValue != null ? currentValue : ''&#xA;&#xA;          /* Append updated Field Name and Prev Value.If previous value does not equal to&#xA;&#x9;     Current value then append as non build in events register fld in event history iwth no change */&#xA;          if(isPodUpdated &amp;&amp; !isappended){&#xA;               buffFieldName.append('rtgPOD1 ')&#xA;               isappended = true&#xA;          }&#xA;          else if(!previousValue.equals(currentValue)){&#xA;             buffFieldName.append(fieldname+' ')&#xA;          }&#xA;          //println('fieldname ::'+fieldname+'  previousValue::'+previousValue+'   currentValue::'+currentValue)&#xA;&#xA;        }//While Ends&#xA;     }catch(Exception e){&#xA;        e.printStackTrace()&#xA;     }&#xA;&#xA;   }//Method readEventChangedFields Ends&#xA;&#xA;&#xA;   /* Method post messages for Field Specific Cmis Action */&#xA;   public void postFieldSpecMsg(String xmlData,Object gvyBaseClass,Object gvyCmisUtil, String fieldAction, Object unit, Object event,String previousDischPort)&#xA;   {&#xA;     boolean msgPosted = false;&#xA;     def xmlGvyString = xmlData&#xA;     try&#xA;     {&#xA;       //OB Carrier msg flag&#xA;      def intdObCarrierId=unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvId&quot;)&#xA;       intdObCarrierId = intdObCarrierId != null ? intdObCarrierId : ''&#xA;       boolean postObCarrierMsg =  (intdObCarrierId.equals('GEN_TRUCK') || intdObCarrierId.equals('GEN_VESSEL')&#xA;                              || intdObCarrierId.equals('GEN_CARRIER')) ? false : true&#xA;&#xA;       //def locationStatus = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;locationStatus=&quot;)&#xA;       def destPort = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;dPort=&quot;)&#xA;       def srv = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;srv=&quot;)&#xA;&#xA;       //def islandPort =  gvyCmisUtil.isNISPort(destPort)&#xA;       //println(&quot;ISland POrt ::&quot;+islandPort+&quot;    locationStatus::&quot;+locationStatus+&quot;   svr ::&quot;+srv)&#xA;&#xA;       if(fieldAction.equals('RTG'))&#xA;       {&#xA;          def rerouteEvntFeed = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisCargoEditUnitReroute&quot;)&#xA;          rerouteEvntFeed.processUnitRerouteCmisFeed(xmlGvyString, gvyBaseClass, event, unit, cmisActionList, false, previousDischPort)&#xA;       }&#xA;      //Pass action BDC &amp; NIB Msg Type&#xA;      else if(fieldAction.equals('BDC'))&#xA;      {&#xA;        //Generating NIB &amp; NIE on cmis side&#xA;        /* if(locationStatus.equals('7')) {&#xA;             cmisActionList .setActionList(&quot;NIB&quot;)&#xA;         }&#xA;        else{&#xA;             cmisActionList .setActionList(&quot;BDC&quot;)&#xA;         }*/&#xA;           cmisActionList.setActionList(&quot;BDC&quot;)&#xA;     }&#xA;     else if(fieldAction.equals('INOB') &amp;&amp; postObCarrierMsg)&#xA;     {&#xA;        //overwrite ACTION=AVL &amp; Post Msg&#xA;        cmisActionList .setActionList(&quot;AVL&quot;)&#xA;        //overwrite ACTION=BDC &amp; Post Msg&#xA;        cmisActionList .setActionList(&quot;BDC&quot;)&#xA;     }&#xA;     else if(fieldAction.equals('NIT'))&#xA;     {   //NIT (Check if not on Barge and srv=MAT)&#xA;         if(/*islandPort &amp;&amp;*/ !locationStatus.equals('7') &amp;&amp; srv.equals('MAT'))   {&#xA;           //overwrite ACTION=NIT &amp; Post Msg&#xA;           cmisActionList .setActionList(&quot;NIT&quot;)&#xA;         }&#xA;         //EDT&#xA;         cmisActionList .setActionList(&quot;EDT&quot;)&#xA;      }&#xA;     //Check to pass other MSG types(TYP,TMP,PMR,PO#)&#xA;     else {&#xA;       //overwrite the ACTION Attr &amp; Post Msg&#xA;       cmisActionList .setActionList(fieldAction)&#xA;     }&#xA;&#xA;    }catch(Exception e){&#xA;      e.printStackTrace()&#xA;    }&#xA;   }//Method postUnitUpdateMsg Ends&#xA;&#xA;   /* Method Maps the Updated Field to the relevant Cmis Action */&#xA;   public Object getChangedFieldAction(String fieldName)&#xA;   {&#xA;      def chgFieldAction = ''&#xA;&#xA;      Map mapType = new HashMap()&#xA;      mapType.put('rtgPOD1','RTG')&#xA;      mapType.put('gdsDestination','BDC')&#xA;      mapType.put('gdsConsigneeBzu','NIT')&#xA;      mapType.put('gdsShipperBzu','EDT')&#xA;      mapType.put('gdsBlNbr','BDC')&#xA;      mapType.put('unitSealNbr1','EDT')&#xA;      mapType.put('gdsCommodity','EDT')&#xA;      mapType.put('unitRemark','EDT')&#xA;      mapType.put('unitFlexString02','EDT')&#xA;      mapType.put('unitGoodsAndCtrWtKg','EDT')&#xA;      mapType.put('gdsConsigneeAsString','NIT')&#xA;      mapType.put('rfreqTempRequiredC','TMP')&#xA;      //mapType.put('unitFlexString07','TMP')&#xA;      mapType.put('unitFreightKind','EDT')&#xA;      mapType.put('unitGoodsAndCtrWtKg','EDT')&#xA;      mapType.put('gdsShipperAsString','EDT')&#xA;      mapType.put('eqEquipType','TYP')&#xA;      mapType.put('ufvFlexDate01','PMR')&#xA;      mapType.put('rtgPOL','BDC')&#xA;      mapType.put('unitFlexString01','PO#')&#xA;      mapType.put('ufvIntendedObCv','INOB')&#xA;      mapType.put('unitLineOperator','EDT')&#xA;      mapType.put('ufvFlexDate02','EDT')&#xA;      mapType.put('ufvFlexDate03','EDT')&#xA;      mapType.put('unitFlexString04','EDT')&#xA;      mapType.put('unitFlexString05','EDT')&#xA;&#xA;      chgFieldAction = mapType.get(fieldName) != null ? mapType.get(fieldName) : null&#xA;&#xA;       return chgFieldAction&#xA;    }//Method getChangedFieldAction Ends&#xA;&#xA;&#xA;     public String AssignTrucker(String xmlData,Object gvyCmisUtil,Object unit )&#xA;    {&#xA;         def xmlGvyString = xmlData&#xA;         //overwrite ACTION=EDT&#xA;         def truck = unit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;          truck = truck != null ? truck : &quot;null&quot;&#xA;         xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;truck=&quot;,truck)&#xA;&#xA;         return  xmlGvyString&#xA;    }&#xA;&#xA;    public String getlocationStatus(Object unit, Object gvyCmisUtil){&#xA;     try&#xA;    {&#xA;       def lkpLocType=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;       lkpLocType = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;       def lkpCarrierId = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocId&quot;)&#xA;       def locStatus = lkpLocType.equals('VESSEL') &amp;&amp; gvyCmisUtil.getVesselClassType(lkpCarrierId).equals('BARGE') ? '7' : ''&#xA;&#x9;   return locStatus&#xA;     }catch(Exception e){&#xA;         e.printStackTrace()&#xA;       }&#xA;    }&#xA;&#xA;    /*&#xA;     * Method Updates&#xA;     * 1.Event Field Change History List&#xA;     * 2.Updates POD by Looking up the Destination value&#xA;     * 3.Looks up and Updates the OB carrier if POD is GUM&#xA;    */&#xA;/*    public String UpdateCargoEditFields(Object event,Object unit, Object gvyBaseClass,Object gvyEventUtil)&#xA;    {&#xA;       def prevDischPort = null;&#xA;       try{&#xA;        //UNIT_REROUTE_PROCESSING&#xA;       def destination = unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;)&#xA;       prevDischPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;       def podLookup = gvyBaseClass.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;);&#xA;       def pod = podLookup.lookupPod(destination);&#xA;       def podRgtPoint = RoutingPoint.findRoutingPoint(pod);&#xA;       if(podRgtPoint != null){&#xA;         unit.getUnitRouting().setRtgPOD1(podRgtPoint);&#xA;        }&#xA;       println(&quot;UpdateCargoEditFields - destination:&quot;+destination+&quot;  prevDischPort:&quot;+prevDischPort+&quot;  pod:&quot;+pod+&quot;podRgtPoint :&quot;+podRgtPoint)&#xA;&#xA;      }catch(Exception e){&#xA;         e.printStackTrace()&#xA;      }&#xA;      return  prevDischPort&#xA;    }&#xA;*/&#xA;  /*&#xA;    * Method Updates&#xA;    * 1.Event Field Change History List&#xA;    * 2.Updates POD by Looking up the Destination value&#xA;    */&#xA;   public void autoRollPod(Object event,Object unit, Object gvyBaseClass,Object gvyEventUtil)&#xA;   {&#xA;     def prevDischPort = null;&#xA;     def destination = null;&#xA;     def podRgtPoint = null;&#xA;     boolean doAutoRoll = false;&#xA;&#x9; gvyCmisUtil = gvyCmisUtil == null ? gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;) : gvyCmisUtil&#xA;     def doer = event.event.evntAppliedBy&#xA;     boolean gdsDestinationFlag;&#xA;     try&#xA;     {&#xA;       //A5;&#xA;       gdsDestinationFlag = checkFieldChanged(event, gvyBaseClass, &quot;gdsDestination&quot;);&#xA;       if (!gdsDestinationFlag){&#xA;              println(&quot;Destination Did not Change&quot;)&#xA;              return&#xA;&#x9;   }&#xA;       if(doer.contains('jms') || doer.contains('ACETS')){&#xA;              println(&quot;jms or Acets message&quot;)&#xA;              return&#xA;&#x9;   }&#xA;        //A1&#xA;       destination = unit.getFieldValue(&quot;unitGoods.gdsDestination&quot;);&#xA;       destination = destination != null ? destination.trim() : destination&#xA;       prevDischPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;       prevDischPort = prevDischPort != null ? prevDischPort.trim() : prevDischPort&#xA;&#xA;&#x9;   //def isNISport = gvyCmisUtil.isNISPort(destination);&#xA;       if((/*isNISport ||*/ ContextHelper.getThreadFacility().getFcyId().equals(destination)) &amp;&amp; !destination.equals(prevDischPort)){&#xA;         doAutoRoll = true;&#xA;&#x9;&#x9; podRgtPoint = RoutingPoint.findRoutingPoint(destination)&#xA;         CarrierVisit obCarrierVisit = unit.unitActiveUfv.ufvActualObCv&#xA;&#x9;&#x9; //A4 - validate if POD update is on itinerary&#xA;&#x9;&#x9; if(/*isNISport &amp;&amp;*/ obCarrierVisit != null &amp;&amp;&#xA;&#x9;&#x9;&#x9; !(obCarrierVisit.cvId.startsWith('GEN') &amp;&amp; obCarrierVisit.cvId.startsWith('BARGE'))){&#xA;            def isPortRotation = obCarrierVisit.isPointInItinerary(podRgtPoint)&#xA;           if(!isPortRotation){&#xA;            setObCarrierAsBarge(unit)&#xA;&#x9;&#x9;   } //Set ObCarrier as barge if portRotation dosent match&#xA;         }&#xA;       }else if(!destination.equals(prevDischPort)){&#xA;        def podLookup = gvyBaseClass.getGroovyClassInstance(&quot;GvyRefDataLookup&quot;);&#xA;        def pod = podLookup.lookupPod(destination);&#xA;        podRgtPoint = RoutingPoint.findRoutingPoint(pod);&#xA;&#xA;         if(podRgtPoint != null &amp;&amp; 'GUM'.equals(pod) || 'SHA'.equals(pod) || 'NGB'.equals(pod) || 'XMN'.equals(pod)){&#xA;          doAutoRoll = true;&#xA;         }&#xA;       }//else ends&#xA;&#x9;   else if(gvyEventUtil.wasFieldChanged(event, &quot;rtgPOD1&quot;)){&#xA;&#x9;&#x9; def currDischPort = prevDischPort&#xA;         def previousDischPort =  gvyEventUtil.getPreviousPropertyAsString(event, &quot;rtgPOD1&quot;);&#xA;         def gvyDomQueryObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisDomainQueryUtil&quot;)&#xA;   &#x9;     previousDischPort = gvyDomQueryObj.lookupRtgPOD(previousDischPort)&#xA;         previousDischPort = previousDischPort != null ? previousDischPort : &quot;&quot;&#xA;          if(!previousDischPort.equals(currDischPort)){&#xA;&#x9;&#x9;&#x9; isPodUpdated = true;&#xA;             prevDischPort = previousDischPort&#xA;          }&#xA;         println(&quot;previousDischPort :&quot;+previousDischPort+&quot; currDischPort&quot;+currDischPort)&#xA;       }&#xA;&#xA;&#xA;&#x9;  if(doAutoRoll){&#xA;       unit.getUnitRouting().setRtgPOD1(podRgtPoint);&#xA;       isPodUpdated = true;&#xA;      }&#xA;       setPreviousPod(prevDischPort)&#xA;&#xA;      println(&quot;AutoRollPOD- destination:&quot;+destination+&quot;  prevDischPort:&quot;+prevDischPort+&quot;podRgtPoint :&quot;+podRgtPoint+&quot; doAutoRoll :&quot;+doAutoRoll+&quot; isPodUpdated:&quot;+isPodUpdated)&#xA;&#xA;     //A5&#xA;     def sendEvent = new GroovyEvent(null,unit);&#xA;     if (gdsDestinationFlag){&#xA;         if(unit!=null &amp;&amp; unit.getFieldValue(&quot;unitRouting.rtgGroup.grpId&quot;) in ['YB']) {&#xA;               sendEvent.postNewEvent( &quot;YB_UNASSIGN&quot;,&quot;YB Barge Routing&quot;);&#xA;         }&#xA;     }&#xA;&#xA;&#x9; }catch(Exception e){&#xA;         gvyBaseClass.log(&quot;Exception in GvyCmisUnitCargoEdit.autoRollPod()&quot; + e);&#xA;&#x9; }&#xA;   }//Auto Roll pod&#xA;&#xA;   public boolean isPodUpdated(){&#xA;        return isPodUpdated;&#xA;   }&#xA;&#xA;   public void setPreviousPod(String previousPod){&#xA;       _previousPod = previousPod;&#xA;   }&#xA;&#xA;   public String getPreviousPod(){&#xA;         return _previousPod;&#xA;   }&#xA;&#xA;     /* Set barge Value before Updating the POD if Itinary Doent match */&#xA;   public setObCarrierAsBarge(Object unit){&#xA;     try{&#xA;&#x9; def facility = ContextHelper.getThreadFacility();&#xA;     def visit = CarrierVisit.findOrCreateVesselVisit(facility, &quot;BARGE&quot;)&#xA;     unit.getUfvForFacilityNewest(facility).setUfvIntendedObCv(visit);&#xA;     unit.getUfvForFacilityNewest(facility).setUfvActualObCv(visit);&#xA;&#x9; }catch(Exception e){&#xA;&#x9;&#x9; e.printStackTrace()&#xA;&#x9; }&#xA;   }&#xA;&#xA;   public boolean checkFieldChanged(Object event, Object gvyBaseClass, String checkFieldName){&#xA;       boolean changeFlag;&#xA;       gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;       try{&#xA;           Map mapEvntField = gvyEventUtil.eventFieldChangedValues(event, gvyBaseClass);&#xA;           Iterator it = mapEvntField.keySet().iterator();&#xA;           while (it.hasNext())&#xA;           {&#xA;              def aField = it.next();&#xA;              def aEvntFieldObj = mapEvntField.get(aField);&#xA;              //Fetch Updated Field Values&#xA;              def fieldname = aEvntFieldObj.getFieldName();&#xA;              def previousValue = aEvntFieldObj.getpreviousValue();&#xA;              previousValue = previousValue != null ? previousValue : '';&#xA;              def currentValue = aEvntFieldObj.getCurrentValue();&#xA;              currentValue = currentValue != null ? currentValue : '';&#xA;&#xA;              if(fieldname.equals(checkFieldName)) {&#xA;                  changeFlag = previousValue.equals(currentValue) ? false : true;&#xA;                  println(checkFieldName+&quot; changed::&quot;+changeFlag+&quot;  previousValue::&quot;+previousValue+&quot;   currentValue::&quot;+currentValue);&#xA;                  return changeFlag;&#xA;              }&#xA;           }//While Ends&#xA;       } catch(Exception e){&#xA;           gvyBaseClass.log(&quot;Exception in GvyCmisUnitCargoEdit.checkFieldChanged()&quot; + e);&#xA;       }&#xA;       return changeFlag;&#xA;   }&#xA;&#xA;&#xA;&#xA;}" />
<digital-asset id="MATUpdateUnitBkgDetails" short-description="MATUpdateUnitBkgDetails" is-pre-deployed="N" groovy-code="import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.atoms.EventEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.model.Facility&#xA;import com.navis.argo.business.model.VisitDetails&#xA;import com.navis.argo.business.reference.CarrierService&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.util.FieldChangeTracker&#xA;import com.navis.external.framework.entity.AbstractEntityLifecycleInterceptor&#xA;import com.navis.external.framework.entity.EEntityView&#xA;import com.navis.external.framework.util.EFieldChanges&#xA;import com.navis.external.framework.util.EFieldChangesView&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.api.UnitReroutePoster&#xA;import com.navis.inventory.business.units.EqBaseOrder&#xA;import com.navis.inventory.business.units.EqBaseOrderItem&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.Routing&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.orders.business.eqorders.EquipmentOrderItem&#xA;import com.navis.orders.business.util.OrderManagerUtils&#xA;import com.navis.services.business.api.EventManager&#xA;import com.navis.services.business.rules.EventType&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.services.business.event.Event;&#xA;import org.apache.log4j.Logger&#xA;import com.navis.argo.business.api.GroovyApi&#xA;&#xA;/*&#xA;* Copyright (c) 2014 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;&#xA;public class MATUpdateUnitBkgDetails extends GroovyApi {&#xA;&#xA;  UserContext context = ContextHelper.getThreadUserContext();&#xA;  Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#xA;  public void execute(GroovyEvent event, Object api)&#xA;  {&#xA;    LOGGER.info(&quot; MATUpdateUnitBkgDetails started &quot; + timeNow);&#xA;&#xA;    def unit = event.getEntity();&#xA;    def bookingNbr;&#xA;    def ue = unit.getUnitPrimaryUe();&#xA;    if (ue.getUeDepartureOrderItem() != null) {&#xA;      bookingNbr = ue.getUeDepartureOrderItem().getEqboiOrder().getEqboNbr();&#xA;    }&#xA;    LOGGER.info(&quot; Test1 Booking Nbr&quot; + bookingNbr);&#xA;    //unit.unitActiveUfv.ufvIntendedObCv = unit.unitRouting.rtgDeclaredCv&#xA;    //unit.unitActiveUfv.ufvActualObCv = unit.unitRouting.rtgDeclaredCv&#xA;&#xA;    Routing oldRtg = unit.getUnitRouting();&#xA;    Routing newRouting;&#xA;    if (oldRtg != null) {&#xA;      newRouting = oldRtg;&#xA;      // keep a copy of the old rtg to define changes for returned changed feilds&#xA;      oldRtg = oldRtg.getDefensiveCopy();&#xA;    } else {&#xA;      newRouting = new Routing();&#xA;    }&#xA;    LOGGER.info(&quot; Test2 &quot;);&#xA;    List bkgList = Booking.findBookingsByNbr(bookingNbr);&#xA;    Booking book;&#xA;    if (bkgList != null){&#xA;      book = (Booking) bkgList.get(0);&#xA;      newRouting.setRtgPOL(book.getEqoPol());&#xA;      newRouting.setRtgPOD1(book.getEqoPod1());&#xA;      newRouting.setRtgPOD2(book.getEqoPod2());&#xA;      newRouting.setRtgOPT1(book.getEqoPodOptional());&#xA;    }&#xA;    LOGGER.info(&quot; Test3 &quot;);&#xA;    String shipper = book.getShipperAsString();&#xA;    String consignee = book.getConsigneeAsString();&#xA;    String origin = book.getEqoOrigin();&#xA;    String destination = book.getEqoDestination();&#xA;    unit.modifyGoodsDetails(shipper, consignee, origin, destination);&#xA;    LOGGER.info(&quot;GvyUpdateUnitRemark ended&quot; + timeNow);&#xA;  }&#xA;  private static final Logger LOGGER = Logger.getLogger(MATUpdateUnitBkgDetails.class);&#xA;}" />
<digital-asset id="MatGetTranChassis" short-description="MatGetTranChassis" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.road.business.model.*;&#xA;import com.navis.road.RoadField;&#xA;import java.util.Calendar;&#xA;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;&#xA;import org.apache.log4j.Logger&#xA;&#xA;&#xA;&#xA;public class MatGetTranChassis extends GroovyInjectionBase&#xA;{&#xA;    //public boolean execute(Map params)&#xA;    public String execute(Long gkey)&#xA;    {&#xA;        try&#xA;        {&#xA;&#x9;&#x9;&#x9;//Long gkey = 155857830&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Calling MatGetTranChassis for ::&quot;+ gkey);&#xA;            def inj = new GroovyInjectionBase();&#xA;            inj = new GroovyInjectionBase();&#xA;   &#x9;&#x9;&#x9;List unitList = null;&#xA;            ArrayList trkTransList = new ArrayList();&#xA;            List trkTrans = getGateTrans(gkey);&#xA;            String accessory;&#xA;&#xA;            Iterator iter = trkTrans.iterator();&#xA;            while(iter.hasNext()) {&#xA;                def aTrans = iter.next();&#xA;                println(&quot;aTrans -----------&gt;&quot;+aTrans);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unitList = getActiveUnits(aTrans.tranChsNbr);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;unitList.size() &quot;+unitList.size());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Iterator unitIterator = unitList.iterator();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while(unitIterator.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = unitIterator.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;accessory = unit.getUnitAcryEquipIds();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;            }&#xA;            println(&quot;accessory ---&gt;&quot;+accessory);&#xA;            return accessory;&#xA;&#xA;        }catch(Exception e){&#xA;            LOGGER.warn(&quot;Exception ::&quot;+ e);&#xA;            }&#xA;    }&#xA;&#xA;    public List getGateTrans(Long gkey)&#xA;    {&#xA;&#xA;        List gateTranUnits = null;&#xA;        ArrayList trans = new ArrayList();&#xA;        try&#xA;        {&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;TruckTransaction&quot;)&#xA;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(RoadField.TRAN_GKEY, gkey));&#xA;&#xA;&#xA;            LOGGER.warn(&quot;dq---------------&quot;+dq);&#xA;            gateTranUnits  = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            LOGGER.warn(&quot;Query executed&quot;);&#xA;            LOGGER.warn(&quot;gateTranUnits ::&quot;+gateTranUnits != null ? gateTranUnits.size() : 0)&#xA;&#x9;&#x9;&#x9;if(gateTranUnits != null) {&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iter = gateTranUnits.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def tran = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;trans.add(tran);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;        }catch(Exception e){&#xA;          LOGGER.warn(&quot;Exception ::&quot;+ e);&#xA;            }&#xA;        return trans;&#xA;    }&#xA;&#xA;&#x9;public List getActiveUnits(String unitId)&#xA;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;ArrayList units = new ArrayList();&#xA;&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;).addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_ID, unitId)).addDqOrdering(Ordering.desc(InventoryField.UFV_TIME_OF_LAST_MOVE));&#xA;&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;dq:::::::::&quot;+dq)&#xA;&#x9;&#x9;&#x9;def ufvList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;After unitList&quot;+ufvList.size());&#xA;&#x9;&#x9;&#x9;if(ufvList != null) {&#xA;&#x9;&#x9;&#x9;&#x9;Iterator iter = ufvList.iterator();&#xA;&#x9;&#x9;&#x9;&#x9;while(iter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def ufv = iter.next();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = ufv.ufvUnit;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;units.add(unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;LOGGER.warn(&quot;unitsSize&quot; + units.size);&#xA;&#x9;&#x9;&#x9;return units;&#xA;&#x9;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#x9;LOGGER.warn(&quot;Exception ::&quot;+ e);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;private static final Logger LOGGER = Logger.getLogger(MatGetTranChassis.class);&#xA;}&#xA;" />
<digital-asset id="GvyCmisDetentionMsgProcess" short-description="GvyCmisDetentionMsgProcess" is-pre-deployed="N" groovy-code="/*&#xA;* SrNo Doer  Date       Change&#xA;* A1   GR    04/30/10   Add Code for Consignee Detention Change&#xA;* A2   GR    05/19/10   Add change to Lookup the Event object only Once&#xA;* A3   GR    05/19/10   DTD Msg With Previous Value Information&#xA;* A4   GR    05/27/10   Store mis3 in sealNbr4 and lastfree day in sealNbr3&#xA;* A5   GR    07/13/10   Corrected Previous Freight kind value.&#xA;* A6   GR    09/02/10   DAS Fix : Update Destination and Discharge port Seperately&#xA;* A7   GR    10/27/10   Gemes SIT : FREE and EDT posting Twice added UNIT_ROLL to Method&#xA;* A8   GR    01/27/11   Commodity Change to post detention msg&#xA;* A9   LC    10/15/2013 Block UNIT_STORAGE_UPDATE DTD and DTA msgs on the NIS_CODING_COMPLETE_BARGE event&#xA;* A10  RI&#x9; 01/15/2014 Added code to send previous Dport as Dport in DTD to Detention messages while UNIT_REROUTE&#xA;*/&#xA;&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.reference.Shipper&#xA;import com.navis.argo.business.reference.RoutingPoint;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.argo.ArgoRefField;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.inventory.InventoryField;&#xA;&#xA;import java.text.SimpleDateFormat;&#xA;import java.text.DateFormat;&#xA;import java.util.Calendar;&#xA;&#xA;public class GvyCmisDetentionMsgProcess&#xA;{&#xA;  def cmisActnList = '';   def misc3 = '';   def dir = '';   def dischPort = '';&#xA;  def locationStatus = '';  def detnMsg = false;  boolean availDateChng = false;  boolean detentionDateChng = false;&#xA;  def availDate = null;  def detentionDate = null;  def lastfreeDay=null; def unit=null;&#xA;&#xA;  //Lookup Event only Once and Set Values&#xA;  boolean freightkindChng = false; boolean consigneeChng = false; boolean updtdischPort = false;&#xA;  boolean lastFreeDateChng = false; boolean lineOperatorChng = false; boolean categoryChng = false;&#xA;  boolean commodityChng = false;&#xA;  // A10 to store previous Dport for DTD messages&#xA;  def previousDest = null;&#xA;&#xA;  def prevAvailDate = null; def prevDetentionDate = null;  def prevLastFreeDate = null;&#xA;  def prevDischPort = ''; def prevFreightKind = '';&#xA;  def gvyEventUtil = null; def gvyCmisUtil = null;  def commodity = null;&#xA;&#xA;  Map _mapPrevField = null;&#xA;&#xA;  //Initialize class for Global use&#xA;  public void init(Object gvyBaseClass){&#xA;&#x9;  gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;      gvyEventUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyEventUtil&quot;);&#xA;      cmisActnList = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisListAction&quot;);&#xA;  }&#xA;&#xA;  public boolean detentionProcess(String xmlData,Object event, Object gvyBaseClass)&#xA;  {&#xA;     def xmlGvyString = xmlData&#xA;     unit = event.getEntity()&#xA;     def gvyEventObj = event.getEvent()&#xA;     String eventType =  gvyEventObj.getEventTypeId()&#xA;    try&#xA;   {&#xA;&#xA;     def equiClass =unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;     def equiClassKey = equiClass != null ? equiClass.getKey() : equiClass&#xA;     if(equiClassKey.equals('CONTAINER'))&#xA;     {&#xA;&#x9;&#x9;init(gvyBaseClass);&#xA;&#xA;       availDate= unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate02&quot;)&#xA;       detentionDate = unit.getFieldValue(&quot;unitActiveUfv.ufvFlexDate03&quot;)&#xA;       lastfreeDay = unit.getFieldValue(&quot;unitActiveUfv.ufvCalculatedLastFreeDay&quot;)&#xA;       lastfreeDay = lastfreeDay != null &amp;&amp; lastfreeDay.indexOf(&quot;no&quot;) != -1 ? null : lastfreeDay&#xA;&#x9;   lastfreeDay =  lastfreeDay != null ? lastfreeDay.replace('!','') : lastfreeDay&#xA;        //A8&#xA;       commodity=unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;)&#xA;       commodity = commodity != null ? commodity : ''&#xA;&#xA;   &#x9;  setEvntFieldChngBuiltEvnt(event, gvyBaseClass)&#xA;&#xA;      //println(&quot;prevAvailDate ::&quot;+prevAvailDate+&quot;  prevDetentionDate:&quot;+prevDetentionDate+&quot;  prevLastFreeDate:&quot;+prevLastFreeDate)&#xA;      //println(&quot;AvailDate ::&quot;+availDate+&quot;  DetentionDate:&quot;+detentionDate+&quot;  LastFreeDate:&quot;+lastfreeDay)&#xA;      //println('detentionProcess : freightkindChng :'+freightkindChng+'  consigneeChng:'+consigneeChng+'   updtdischPort:'+updtdischPort+'   availDateChng:'+availDateChng+'   detentionDateChng:'+detentionDateChng+'  lastFreeDateChng:'+lastFreeDateChng)&#xA;      misc3 = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;misc3=&quot;)&#xA;      dir = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;dir=&quot;)&#xA;      dischPort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;      locationStatus = getlocationStatus(unit,gvyCmisUtil)&#xA;&#xA;     //A9&#xA;     boolean isNvBarge = false;&#xA;     def evntType = gvyEventUtil.getPrevEvent(&quot;NIS_DETENTION&quot;,unit);&#xA;     if(evntType!=null &amp;&amp; evntType.contains('NIS_DETENTION')){&#xA;        isNvBarge = true;&#xA;        //println(&quot;GvyCmisDetentionMsgProcess.detentionProcess()::&quot;+unit+&quot; Event Type = &quot;+evntType+&quot; isNvBarge=true&quot;);&#xA;     }&#xA;&#xA;&#xA;       if(updtdischPort)&#xA;      {&#xA;         detentionDischPortMsg(gvyCmisUtil,gvyEventUtil,event,gvyBaseClass,unit)&#xA;      }&#xA;      else if(freightkindChng)&#xA;      {&#xA;         detentionFreightMsg(gvyCmisUtil,gvyEventUtil,event,unit,freightkindChng)&#xA;      }&#xA;      else if(consigneeChng)&#xA;      {&#xA;         detentionConsigneeMsg(gvyCmisUtil,gvyEventUtil,event,unit)&#xA;      }&#xA;      else if(categoryChng)&#xA;      {&#xA;         detentionForCategory(unit)&#xA;      }&#xA;      else if(lineOperatorChng)&#xA;     {&#xA;        cmisActnList.setActionList(&quot;DTD&quot;)&#xA;        cmisActnList.setActionList(&quot;DTA&quot;)&#xA;        detnMsg = true&#xA;      }&#xA;&#x9; else if(commodityChng &amp;&amp; (_mapPrevField.get('commodity') != null &amp;&amp; _mapPrevField.get('commodity').contains('XMAS')) ||&#xA;&#x9;&#x9; commodity.contains('XMAS')) //A8&#xA;     {&#xA;        cmisActnList.setActionList(&quot;DTD&quot;)&#xA;        cmisActnList.setActionList(&quot;DTA&quot;)&#xA;        detnMsg = true&#xA;      }&#xA;&#xA;&#xA;      // Check Unit Property Update&#xA;      if((availDateChng || detentionDateChng) &amp;&amp; eventType.equals('UNIT_PROPERTY_UPDATE'))&#xA;      {&#xA;            if(prevAvailDate == null){&#xA;              cmisActnList.setActionList(&quot;DTA&quot;)&#xA;              detnMsg = true&#xA;           }&#xA;           else{&#xA;             cmisActnList.setActionList(&quot;DTD&quot;)&#xA;             cmisActnList.setActionList(&quot;DTA&quot;)&#xA;             detnMsg = true&#xA;           }&#xA;      }//All other Events&#xA;      else if((availDateChng || detentionDateChng || lastFreeDateChng) &amp;&amp;  eventType.equals('UNIT_STORAGE_UPDATE'))&#xA;      {&#xA;         if(availDateChng || detentionDateChng)&#xA;         {&#xA;            if(prevAvailDate == null &amp;&amp; prevDetentionDate == null){&#xA;               if(!isNvBarge) { //A9&#xA;               cmisActnList.setActionList(&quot;DTA&quot;)&#xA;               }&#xA;               detnMsg = true&#xA;            }else{&#xA;                if(!isNvBarge) { //A9&#xA;               cmisActnList.setActionList(&quot;DTD&quot;)&#xA;               cmisActnList.setActionList(&quot;DTA&quot;)&#xA;                }&#xA;               detnMsg = true&#xA;            }&#xA;         }//Avail date loop ends&#xA;         else if(lastFreeDateChng)&#xA;         {&#xA;            if(prevLastFreeDate == null){&#xA;               cmisActnList.setActionList(&quot;EDT&quot;)&#xA;               detnMsg = true;&#xA;             }&#xA;         }//lastFreeDate loop ends&#xA;      }//Outer Else if&#xA;&#xA;     //DetentionAcetsMessage Check Do not Append EDT &amp; FREE&#xA;     if(!detentionAcetsMsgFilter(gvyEventObj)){&#xA;       appendMsgOnEvent(eventType)&#xA;     }&#xA;&#xA;     //Post Detention MSG Action except DTA and DTD&#xA;&#x9;LinkedHashSet actionList = cmisActnList.getActionList();&#xA;&#xA;&#x9;for(aAction in actionList)&#xA;     {&#xA;&#x9;   //println(unit.getFieldValue(&quot;unitId&quot;)+&quot;-&gt; aAction:::&quot;+aAction);&#xA;&#x9;   if('DTD'.equals(aAction)){&#xA;&#x9;&#x9;&#x9;null;&#xA;       }else{&#xA;        println(&quot;:::::::::::::Posting &quot;+aAction+&quot; Message:::::::::::::::&quot;);&#xA;        gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,aAction)&#xA;&#x9;   }&#xA;  &#x9;  }&#xA;&#x9;&#x9; Thread.sleep(2000);&#xA;    //Post DTD message afrer 2 sec delay&#xA;&#x9;for(aAction in actionList)&#xA;     {&#xA;&#x9;   //println(unit.getFieldValue(&quot;unitId&quot;)+&quot;-&gt; aAction:::&quot;+aAction);&#xA;&#x9;   if('DTD'.equals(aAction)){&#xA;&#x9;&#x9;//A10 getting Previous Dport for DTD Start&#xA;&#xA; &#x9;&#x9; &#x9;if (event != null) {&#xA;&#x9;&#x9; &#x9;&#x9;def pointId = event.getPreviousPropertyAsString(&quot;PODRef&quot;);&#xA;&#x9;&#x9; &#x9;&#x9;def point = findRoutingPoint(pointId);&#xA;&#x9;&#x9; &#x9;&#x9;if (point != null) {&#xA;&#x9;&#x9; &#x9;&#x9;&#x9;previousDest = point.pointId;&#xA;&#x9;&#x9; &#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;//A10 getting Previous Dport for DTD End&#xA; &#x9;&#x9; String reFmtDtdXml = reformatDTDwithPrevValues(xmlGvyString)&#xA;         gvyCmisUtil.postMsgForAction(reFmtDtdXml,gvyBaseClass,aAction);&#xA;         println(&quot;:::::::::::::Posting DTD Message:::::::::::::::&quot;);&#xA;       }else{&#xA;        null;&#xA;&#x9;   }&#xA;&#x9;  }&#xA;&#xA;    /*//Post Detention MSG Action&#xA;     LinkedHashSet actionList = cmisActnList.getActionList();&#xA;     for(aAction in actionList)&#xA;     {&#xA;&#x9;   //println(unit.getFieldValue(&quot;unitId&quot;)+&quot;-&gt; aAction:::&quot;+aAction);&#xA;&#x9;   if('DTD'.equals(aAction)){&#xA;&#x9;&#x9;//A10 getting Previous Dport for DTD Start&#xA; &#x9;&#x9; &#x9;if (event != null) {&#xA;&#x9;&#x9; &#x9;&#x9;def pointId = event.getPreviousPropertyAsString(&quot;PODRef&quot;);&#xA;&#x9;&#x9; &#x9;&#x9;def point = findRoutingPoint(pointId);&#xA;&#x9;&#x9; &#x9;&#x9;if (point != null) {&#xA;&#x9;&#x9; &#x9;&#x9;&#x9;previousDest = point.pointId;&#xA;&#x9;&#x9; &#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;//A10 getting Previous Dport for DTD End&#xA; &#x9;&#x9; String reFmtDtdXml = reformatDTDwithPrevValues(xmlGvyString)&#xA;         gvyCmisUtil.postMsgForAction(reFmtDtdXml,gvyBaseClass,aAction)&#xA;       }else{&#xA;        gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,aAction)&#xA;&#x9;   }&#xA;     }*/&#xA;    }//IF Container Check Ends&#xA;   }catch(Exception e){&#xA;    e.printStackTrace()&#xA;   }&#xA;&#xA;  return detnMsg&#xA;}&#xA;&#xA;/*&#xA;* Method set the Detention Cmis action for Destination change&#xA;*/&#xA;public void detentionDischPortMsg(Object gvyCmisUtil,Object gvyEventUtil,Object event,Object gvyBaseClass,Object unit)&#xA;{&#xA;  try&#xA;  {&#xA;       //latest Code Updt Starts&#xA;       prevDischPort = prevDischPort != null ? prevDischPort : ''&#xA;       def gvyDomQueryObj = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisDomainQueryUtil&quot;)&#xA;       def prevDischPortVal = gvyDomQueryObj.lookupRtgPOD(prevDischPort)&#xA;&#xA;      def freightKind = unit.getFieldValue(&quot;unitFreightKind&quot;)&#xA;       freightKind = freightKind != null ? freightKind.getKey() : ''&#xA;       //latest Code Updt Ends&#xA;&#xA;      cmisActnList.setActionList(&quot;DTD&quot;)&#xA;      detnMsg = true&#xA;      if(misc3.length() &gt; 6  ){&#xA;          cmisActnList.setActionList(&quot;DTA&quot;)&#xA;      }&#xA;&#xA;       /*def prevPortNis = gvyCmisUtil.isNISPort(prevDischPortVal)&#xA;       def updtPortNis = gvyCmisUtil.isNISPort(dischPort)&#xA;       //println('prevDischPortVal::'+prevDischPortVal+'  updtPortNis ::'+updtPortNis+'   Detention NIS - prevPortNis: '+prevPortNis+'      updtPortNis:'+updtPortNis)&#xA;       if(freightKind.equals('FCL') &amp;&amp; ((prevDischPortVal.equals(ContextHelper.getThreadFacility().getFcyId()) )&#xA;               || ( locationStatus.equals('7'))))&#xA;       {&#xA;           cmisActnList.setActionList(&quot;DTD&quot;)&#xA;           detnMsg = true&#xA;        }&#xA;        else&#xA;       {&#xA;            cmisActnList.setActionList(&quot;DTD&quot;)&#xA;          if(misc3.length() &gt; 6 || updtPortNis ){&#xA;            cmisActnList.setActionList(&quot;DTA&quot;)&#xA;          }&#xA;          detnMsg = true&#xA;       }*///else Ends&#xA;    // }//If ends&#xA;  }catch(Exception e){&#xA;      e.printStackTrace()&#xA;  }&#xA;}&#xA;&#xA;/*&#xA;* Method set the Detention Cmis action for FreightKind and consignee change&#xA;*/&#xA;public void detentionFreightMsg(Object gvyCmisUtil,Object gvyEventUtil, Object event,Object unit, boolean freightkindChng)&#xA;{&#xA;  try&#xA;  {&#xA;    def currFreightKind = unit.getFieldValue(&quot;unitFreightKind&quot;)&#xA;    currFreightKind = currFreightKind != null ? currFreightKind.getKey() : ''&#xA;    //prevFreightKind = currFreightKind -//A5&#xA;    if(freightkindChng)&#xA;    {&#xA;     prevFreightKind = prevFreightKind != null ? prevFreightKind : ''&#xA;    }&#xA;&#xA;   // def dischPortNis = gvyCmisUtil.isNISPort(dischPort)&#xA;    if(dischPort.equals(ContextHelper.getThreadFacility().getFcyId()) &amp;&amp; prevFreightKind.equals('FCL'))&#xA;    {&#xA;        cmisActnList.setActionList(&quot;DTD&quot;)&#xA;        detnMsg = true&#xA;    }&#xA;    else if (dischPort.equals(ContextHelper.getThreadFacility().getFcyId()) &amp;&amp; currFreightKind.equals('FCL') &amp;&amp; misc3.length() &gt; 6)&#xA;    {&#xA;        cmisActnList.setActionList(&quot;DTA&quot;)&#xA;        detnMsg = true&#xA;    }&#xA;    else if ( locationStatus.equals('7') &amp;&amp; prevFreightKind.equals('FCL'))&#xA;    {&#xA;       cmisActnList.setActionList(&quot;DTD&quot;)&#xA;       detnMsg = true&#xA;    }&#xA;    else if( locationStatus.equals('7') &amp;&amp; currFreightKind.equals('FCL'))&#xA;    {&#xA;       cmisActnList.setActionList(&quot;DTA&quot;)&#xA;       detnMsg = true&#xA;    }&#xA;  }catch(Exception e){&#xA;    e.printStackTrace()&#xA;  }&#xA;}&#xA;&#xA;//A1&#xA;public void detentionConsigneeMsg(Object gvyCmisUtil,Object gvyEventUtil, Object event,Object unit)&#xA;{&#xA;  try&#xA;  {&#xA;    def currFreightKind = unit.getFieldValue(&quot;unitFreightKind&quot;)&#xA;    currFreightKind = currFreightKind != null ? currFreightKind.getKey() : ''&#xA;    //- A5 prevFreightKind = currFreightKind&#xA;&#x9;prevFreightKind = prevFreightKind != null ? prevFreightKind : ''&#xA;&#xA;    //def dischPortNis = gvyCmisUtil.isNISPort(dischPort)&#xA;    if(dischPort.equals(ContextHelper.getThreadFacility().getFcyId()) &amp;&amp; currFreightKind.equals('FCL'))&#xA;    {&#xA;        cmisActnList.setActionList(&quot;DTD&quot;)&#xA;        if(misc3.length() &gt; 6){&#xA;         cmisActnList.setActionList(&quot;DTA&quot;)&#xA;        }&#xA;        detnMsg = true&#xA;    }&#xA;    else if( locationStatus.equals('7') &amp;&amp; currFreightKind.equals('FCL'))&#xA;    {&#xA;       cmisActnList.setActionList(&quot;DTD&quot;)&#xA;       cmisActnList.setActionList(&quot;DTA&quot;)&#xA;       detnMsg = true&#xA;    }&#xA;  }catch(Exception e){&#xA;    e.printStackTrace()&#xA;  }&#xA;}&#xA;&#xA;&#xA;public void appendMsgOnEvent(String eventType)&#xA; {&#xA;     //A7&#xA;     if(!( eventType.equals('UNIT_PROPERTY_UPDATE') || eventType.equals('UNIT_REROUTE') || eventType.equals('UNIT_ROLL') ) )&#xA;   {&#xA;      //Passing Detention Msg&#xA;      if(detnMsg){&#xA;        cmisActnList.setActionList(&quot;FREE&quot;)&#xA;        cmisActnList.setActionList(&quot;EDT&quot;)&#xA;      }&#xA;   }&#xA; }//Method Ends&#xA;&#xA; public boolean detentionAcetsMsgFilter(Object gvyEventObj)&#xA; {&#xA;   try&#xA;   {&#xA;    //DOER&#xA;    def doer = gvyEventObj.getEvntAppliedBy();&#xA;    def eventNotes = gvyEventObj.getEventNote()&#xA;    eventNotes = eventNotes != null ? eventNotes : ''&#xA;    CharSequence acetsMsg = &quot;ACETS&quot;;&#xA;    boolean acetsRecorder = doer.contains(acetsMsg);&#xA;    boolean evntNotes = eventNotes.contains(acetsMsg);&#xA;&#xA;    if(acetsRecorder || evntNotes){&#xA;      return true&#xA;    }&#xA;  }catch(Exception e){&#xA;     e.printStackTrace()&#xA;  }&#xA;  return false&#xA; }&#xA;&#xA; public void detentionForCategory(Object unit)&#xA; {&#xA;   try&#xA;   {&#xA;       def category = unit.getFieldValue(&quot;unitCategory&quot;)&#xA;       category = category != null ? category.getKey() : ''&#xA;&#xA;       if(category.equals('EXPRT')){&#xA;            cmisActnList.setActionList(&quot;DTD&quot;)&#xA;            cmisActnList.setActionList(&quot;DTA&quot;)&#xA;            detnMsg = true&#xA;        }else if (category.equals('IMPRT')){&#xA;             cmisActnList.setActionList(&quot;DTA&quot;)&#xA;             detnMsg = true&#xA;        }&#xA;     }catch(Exception e){&#xA;          e.printStackTrace()&#xA;     }&#xA;  }//Method Ends&#xA;&#xA;  public void getlocationStatus(Object unit,Object gvyCmisUtil){&#xA;   try&#xA;   {&#xA;      def lkpLocType=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocType&quot;)&#xA;      lkpLocType = lkpLocType != null ? lkpLocType.getKey() : ''&#xA;      def lkpCarrierId = unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posLocId&quot;)&#xA;      locationStatus = lkpLocType.equals('VESSEL') &amp;&amp; gvyCmisUtil.getVesselClassType(lkpCarrierId).equals('BARGE') ? '7' : ''&#xA;    }catch(Exception e){&#xA;              e.printStackTrace()&#xA;    }&#xA;  }&#xA;&#xA;    public void setEvntFieldChngBuiltEvnt(Object event,Object gvyBaseClass)&#xA;  {&#xA;     //Reads and Maps Event Updated Field value&#xA;     Map mapEvntField = gvyEventUtil.eventFieldChangedValues(event, gvyBaseClass)&#xA;     boolean areBothPortsUpdt = (mapEvntField.get(&quot;rtgPOD1&quot;) != null &amp;&amp; mapEvntField.get(&quot;gdsDestination&quot;) != null) //A6&#xA;&#x9;&#x9; _mapPrevField = new HashMap();&#xA;&#xA;     String fieldArr = ['unitFreightKind','gdsConsigneeAsString','gdsShipperAsString','rtgPOD1','ufvFlexDate02','ufvFlexDate03','ufvLastFreeDay','unitLineOperator','unitCategory','gdsDestination','gdsCommodity']&#xA;     try&#xA;     {&#xA;       Iterator it = mapEvntField.keySet().iterator();&#xA;       while (it.hasNext())&#xA;       {&#xA;          def aField = it.next();&#xA;          if(!fieldArr.contains(aField)){ continue; }&#xA;&#xA;         //Fetch Event Updated Field : current and Previous value&#xA;         def aEvntFieldObj = mapEvntField.get(aField)&#xA;         def fieldname = aEvntFieldObj.getFieldName()&#xA;         def previousValue = aEvntFieldObj.getpreviousValue()&#xA;         previousValue = previousValue != null ? previousValue : ''&#xA;         def currentValue = aEvntFieldObj.getCurrentValue()&#xA;         currentValue = currentValue != null ? currentValue : ''&#xA;&#xA;          //println('aField :'+aField+'  fieldname ::'+fieldname+'  previousValue::'+previousValue+'   currentValue::'+currentValue)&#xA;&#xA;          if(!currentValue.equals(previousValue))&#xA;          {&#xA;            if(aField.equals(&quot;rtgPOD1&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;updtdischPort = true&#xA;                prevDischPort = previousValue&#xA;&#x9;&#x9;&#x9;&#x9;_mapPrevField.put('dischargePort',previousValue)&#xA;&#x9;&#x9;&#x9;&#x9;if(!areBothPortsUpdt){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;----------------------- 12 ----------------------------&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//_mapPrevField.put('dPort',previousValue)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} //A6&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//println(&quot;----------------------- 12.1 --aField=&quot;+aField+&quot;     previousValue=&quot;+previousValue)&#xA;            }else if(aField.equals(&quot;gdsDestination&quot;)){&#xA;                if(!areBothPortsUpdt){&#xA;&#x9;&#x9;&#x9;&#x9;    //println(&quot;----------------------- 13 ----------------------------&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//_mapPrevField.put('dischargePort',previousValue)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} //A6&#xA;&#x9;&#x9;&#x9;&#x9;_mapPrevField.put('dPort',previousValue)&#xA;&#x9;&#x9;&#x9;&#x9;//println(&quot;----------------------- 13.1 --aField=&quot;+aField+&quot;     previousValue=&quot;+previousValue)&#xA;            }&#xA;&#x9;&#x9;&#x9;else if(aField.equals(&quot;gdsConsigneeAsString&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9; consigneeChng = true&#xA;                _mapPrevField.put('consignee',previousValue)&#xA;&#xA; &#x9;&#x9;&#x9;}else if(aField.equals(&quot;unitFreightKind&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9; freightkindChng = true&#xA;                 prevFreightKind = previousValue&#xA;                _mapPrevField.put('orientation',previousValue)&#xA;&#xA; &#x9;&#x9;&#x9;}else if(aField.equals(&quot;unitCategory&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9; categoryChng = true&#xA;                _mapPrevField.put('category',previousValue)&#xA;&#xA;&#x9;&#x9;&#x9;}else if(aField.equals(&quot;unitLineOperator&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9; lineOperatorChng = true&#xA;                _mapPrevField.put('locationRow',previousValue)&#xA;&#xA;&#x9;&#x9;&#x9;}else if(aField.equals(&quot;gdsShipperAsString&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;_mapPrevField.put('shipper',previousValue)&#xA;&#xA;&#x9;&#x9;&#x9;}else if(aField.equals(&quot;ufvFlexDate02&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;availDateChng = true;&#xA;&#x9;&#x9;&#x9;&#x9;//_mapPrevField.put('misc3',previousValue)&#xA;&#x9;&#x9;&#x9;&#x9;prevAvailDate = previousValue&#xA;&#xA;&#x9;&#x9;&#x9;}else if(aField.equals(&quot;ufvFlexDate03&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;detentionDateChng = true&#xA;               // _mapPrevField.put('misc3',previousValue)&#xA;                 prevDetentionDate = previousValue&#xA;&#xA;&#x9;&#x9;&#x9;}else if(aField.equals(&quot;ufvLastFreeDay&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9; lastFreeDateChng = true;&#xA;&#x9;&#x9;&#x9;&#x9; def shipmentDetails = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisShipmentDetail&quot;)&#xA;                 def temp = unit.getFieldValue(&quot;unitSealNbr4&quot;)&#xA;                 temp = temp != null ? (temp.length() == 0 ? null : temp) : temp&#xA;&#x9;&#x9;&#x9;&#x9; previousValue = shipmentDetails.getlastFreeDate(temp, lastfreeDay, gvyBaseClass)&#xA; &#x9;&#x9;&#x9;&#x9; _mapPrevField.put('locationCategory',previousValue)&#xA;                 prevLastFreeDate= previousValue&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else if(aField.equals(&quot;gdsCommodity&quot;)){ //A8&#xA;&#x9;&#x9;&#x9;&#x9; commodityChng = true&#xA;&#x9;&#x9;&#x9;     //def gvyCmisEventSIT =  gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisEventSIT&quot;);&#xA;                 //def preCommodity  = gvyCmisEventSIT.lookupCommodity(previousValue)&#xA;                 _mapPrevField.put('commodity',previousValue)&#xA;&#x9;&#x9;&#x9;}&#xA;          }//Inner If&#xA;         }//While Ends&#xA;     }catch(Exception e){&#xA;        e.printStackTrace()&#xA;     }&#xA;   }&#xA;&#xA;&#xA;   //Method Reformats the messages with previous values&#xA;   public String reformatDTDwithPrevValues(String xmlGvyString)&#xA;   {&#xA;     String reformattedXmlStr = xmlGvyString&#xA;&#x9; try&#xA;&#x9; {&#xA;&#x9;   if(_mapPrevField == null) { return; }&#xA;&#x9;   Iterator it = _mapPrevField.keySet().iterator();&#xA;       while (it.hasNext()){&#xA;&#x9;&#x9; def aKey = it.next();&#xA;   &#x9;     def prevalue = _mapPrevField.get(aKey)&#xA;&#x9;&#x9; if('consignee'.equals(aKey)){&#xA;&#xA;&#x9;&#x9;&#x9; def shipper =  Shipper.findShipperByName(prevalue)&#xA;   &#x9;         def consigneeId = shipper != null ? shipper.bzuId : &quot;&quot;&#xA;             reformattedXmlStr = gvyCmisUtil.eventSpecificFieldValue(reformattedXmlStr,&quot;cneeCode=&quot;,consigneeId)&#xA;             //Add code to Overwrite Shipper &amp; Consignee Id&#xA;         }else if ('shipper'.equals(aKey)){&#xA;&#x9;&#x9;&#x9;def shipper =  Shipper.findShipperByName(prevalue)&#xA;   &#x9;        def shipperId = shipper != null ? shipper.bzuId : &quot;&quot;&#xA;            reformattedXmlStr = gvyCmisUtil.eventSpecificFieldValue(reformattedXmlStr,&quot;shipperId=&quot;,shipperId)&#xA;         }else if('orientation'.equals(aKey)){&#xA;&#x9;&#x9;&#x9; prevalue = 'MTY'.equals(prevalue) ? 'E' : (prevalue.length() &gt; 1 ? 'F' : '')&#xA;&#x9;&#x9; }&#xA;&#x9;&#x9; reformattedXmlStr = gvyCmisUtil.eventSpecificFieldValue(reformattedXmlStr,aKey+&quot;=&quot;,prevalue)&#xA;      }&#xA;       //A10 Set DTD dPort value as previous Dport value&#xA;&#xA;&#x9;&#x9;def aDate = gvyCmisUtil.getFieldValues(reformattedXmlStr, &quot;aDate=&quot;);&#xA;&#x9;&#x9;def aTime = gvyCmisUtil.getFieldValues(reformattedXmlStr, &quot;aTime=&quot;);&#xA;&#x9;&#x9;def lastADate = gvyCmisUtil.getFieldValues(reformattedXmlStr, &quot;lastADate=&quot;);&#xA;        def lastATime = gvyCmisUtil.getFieldValues(reformattedXmlStr, &quot;lastATime=&quot;);&#xA;&#xA;&#x9;&#x9;println(&quot;Time for DTD Details  &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;:&quot;+aDate+&quot;::&quot;+aTime+&quot;::&quot;+lastADate+&quot;::&quot;+lastATime);&#xA;&#xA;&#x9;&#x9;def oldATime = &quot;aTime='&quot;+aTime+&quot;'&quot;;&#xA;&#x9;&#x9;def oldLastATime = &quot;lastATime='&quot;+lastATime+&quot;'&quot;;&#xA;&#x9;&#x9;println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;aTime&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+ aTime);&#xA;&#x9;&#x9;SimpleDateFormat df = new SimpleDateFormat(&quot;HH:mm:ss&quot;);&#xA;&#x9;&#x9;Date d = df.parse(aTime);&#xA;&#x9;&#x9;Calendar cal = Calendar.getInstance();&#xA;&#x9;&#x9;cal.setTime(d);&#xA;&#x9;&#x9;cal.add(Calendar.SECOND, 2);&#xA;&#x9;&#x9;String aTimeNew = df.format(cal.getTime());&#xA;&#x9;&#x9;println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;newTime&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+ aTimeNew);&#xA;&#x9;&#x9;reformattedXmlStr = gvyCmisUtil.eventSpecificFieldValue(reformattedXmlStr,&quot;aTime=&quot;,aTimeNew)&#xA;&#x9;&#x9;reformattedXmlStr = gvyCmisUtil.eventSpecificFieldValue(reformattedXmlStr,&quot;lastATime=&quot;,aTimeNew)&#xA;&#xA;&#x9;   &#x9;def newDport = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;dPort=&quot;)&#xA;&#x9;   &#x9;if (previousDest == null){&#xA;&#x9;   &#x9;&#x9;previousDest = newDport;&#xA;&#x9;   &#x9;}&#xA;&#x9;&#x9;println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;Old and New Dports for DTD &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+previousDest + &quot;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&quot;+newDport);&#xA;&#x9;&#x9;reformattedXmlStr = gvyCmisUtil.eventSpecificFieldValue(reformattedXmlStr,&quot;dPort=&quot;,previousDest)&#xA;&#xA;       //Set DTD misc3 value&#xA;       def prevMisc3 = getPreviousMisc3(reformattedXmlStr);&#xA;&#x9;   reformattedXmlStr = gvyCmisUtil.eventSpecificFieldValue(reformattedXmlStr,&quot;misc3=&quot;,prevMisc3)&#xA;&#xA;&#x9;   //Set last Free Date&#xA;&#x9;   def prevlastFreeDay = getPrevLastFreeDay(reformattedXmlStr)&#xA;       reformattedXmlStr = gvyCmisUtil.eventSpecificFieldValue(reformattedXmlStr,&quot;locationCategory=&quot;,prevlastFreeDay)&#xA;&#xA;     }catch(Exception e){&#xA;&#x9;&#x9;e.printStackTrace();&#xA;&#x9; }&#xA;&#x9; return reformattedXmlStr&#xA;   }&#xA;&#xA;  public String getPreviousMisc3(String xmlGvyString)&#xA; {&#xA;    def currMisc3 = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;misc3=&quot;)&#xA;    def pervMis3 = unit.getFieldValue(&quot;unitSealNbr4&quot;)&#xA;    try{&#xA;       if(currMisc3 == null || !currMisc3.equals(pervMis3)){&#xA;         unit.setUnitSealNbr4(currMisc3)&#xA;       }&#xA;&#x9;}catch(Exception e){&#xA;&#x9;&#x9; e.printStackTrace()&#xA;&#x9;}&#xA;    return pervMis3&#xA; }&#xA;&#xA;&#xA; public String getPrevLastFreeDay(String xmlGvyString){&#xA;   def currFreeDay = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;locationCategory=&quot;)&#xA;   def pervLastFreeDay = unit.getFieldValue(&quot;unitSealNbr3&quot;)&#xA;  try{&#xA;   if(currFreeDay == null || !currFreeDay.equals(pervLastFreeDay)){&#xA;         unit.setUnitSealNbr3(currFreeDay)&#xA;   }&#xA;  }catch(Exception e){&#xA;    e.printStackTrace()&#xA;  }&#xA;&#xA;   return pervLastFreeDay&#xA; }&#xA;&#xA; // A10 Adding Domine query to get Routing Point&#xA; public RoutingPoint findRoutingPoint(String inPointId) {&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(&quot;RoutingPoint&quot;).addDqPredicate(PredicateFactory.eq(ArgoRefField.POINT_GKEY, inPointId));&#xA;    return (RoutingPoint) HibernateApi.getInstance().getUniqueEntityByDomainQuery(dq);&#xA; }&#xA;}//Class Ends" />
<digital-asset id="GvyEmailNotification" short-description="GvyEmailNotification" is-pre-deployed="N" groovy-code="/*&#xA;*&#xA;* 08/16/11 2.1 Updated Email Method&#xA;*/&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.business.atoms.EquipClassEnum&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.reference.Chassis&#xA;import com.navis.argo.business.atoms.LocTypeEnum;&#xA;&#xA;&#xA;public class GvyEmailNotification&#xA;{&#xA; private String dviEmailto = '1aktosdevteam@matson.com'&#xA; private static final String eol = &quot;\r\n&quot;;&#xA; private static final String tab = &quot;\t&quot;;&#xA;&#xA; public void notifyDviHold(Object event, Object api){&#xA;   def unit = event.getEntity();&#xA;   def eventId = event.event.eventTypeId&#xA;   def CntrNbr = null;    def chasId = null;&#xA;   try{&#xA;   chasId = unit.getFieldValue(&quot;unitCarriageUe.ueEquipment.eqIdFull&quot;)&#xA;   def primaryClass = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;)&#xA;&#xA;   if(EquipClassEnum.CONTAINER.equals(primaryClass)){&#xA;    &#x9;CntrNbr = unit.unitId&#xA;   }else if (EquipClassEnum.CHASSIS.equals(primaryClass)){&#xA;       chasId = unit.unitId&#xA;  &#x9;   CntrNbr = &quot;NA&quot;&#xA;   }&#xA;&#xA;   if(chasId == null){&#xA;&#x9;   return;&#xA;   }&#xA;&#xA;   Chassis chs = Chassis.findChassis(chasId);&#xA;   if('DVI'.equals(chs.eqLicenseNbr)){&#xA;     def blnbr=unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;)&#xA;     if(!LocTypeEnum.YARD.equals(unit.unitActiveUfv.ufvLastKnownPosition.posLocType)){&#xA;       return;&#xA;     }&#xA;     def lkpSlot=unit.getFieldValue(&quot;unitActiveUfv.ufvLastKnownPosition.posSlot&quot;)&#xA;     lkpSlot = lkpSlot != null ? lkpSlot : 'Y-SI'&#xA;&#xA;     def aobcarrierId=unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;)&#xA;     def aibcarrierId=unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;)&#xA;     def dischargePort = unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;)&#xA;     dischargePort = dischargePort != null ? dischargePort : ''&#xA;     def category=unit.getFieldValue(&quot;unitCategory&quot;).getKey()&#xA; &#x9; String strDate = ContextHelper.formatTimestamp(new Date(), ContextHelper.getThreadUserTimezone())&#xA;&#xA;     StringBuffer buf = new StringBuffer();&#xA;      buf.append(eol);&#xA;      buf.append(&quot;            INYARD CHASSIS WITH DVI HOLD NOTICE     Date:&quot;+strDate+eol);&#xA;&#x9;  buf.append(&quot;             Matson Navigation Honolulu, Hawaii                &quot;+eol);&#xA;&#x9;  buf.append(&quot;-------------------------------------------------------------------------&quot;);&#xA;&#x9;  buf.append(eol);&#xA;  &#x9;  buf.append(eol);&#xA;&#x9;  buf.append(&quot;Chassis ID         : &quot;+chasId);&#xA;&#x9;  buf.append(eol);&#xA;&#x9;  buf.append(&quot;Container Number   : &quot;+CntrNbr);&#xA;&#x9;  buf.append(eol);&#xA;&#x9;  buf.append(&quot;Category           : &quot;+category);&#xA;&#x9;  buf.append(eol);buf.append(eol)&#xA;&#x9;  buf.append(&quot;Yard Location      : &quot;+lkpSlot);&#xA;&#x9;  buf.append(eol);&#xA;&#x9;  buf.append(&quot;Carrier Inbound    : &quot;+aibcarrierId);&#xA;&#x9;  buf.append(eol);&#xA;  &#x9;  buf.append(&quot;Carrier Outbound   : &quot;+aobcarrierId);&#xA;&#x9;  buf.append(eol);&#xA;&#x9;  buf.append(&quot;Discharge Port     : &quot;+dischargePort);&#xA;  &#x9;  buf.append(eol);&#xA;&#x9;  buf.append(&quot;N4 Event           : &quot;+eventId);&#xA;&#x9;  buf.append(eol); buf.append(eol); buf.append(eol);&#xA;&#x9;  buf.append(eol); buf.append(eol); buf.append(eol);&#xA;&#xA;      //--  String body = getEmailContent(chasId,CntrNbr,category,lkpSlot,aibcarrierId,aobcarrierId,dischargePort,strDate)&#xA;      def emailSender = api.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;      emailSender.custSendEmail(dviEmailto, 'INYARD CHASSIS WITH DVI HOLD: '+chasId , buf.toString())&#xA;      //--HTML CODE emailSender.sendMail(emailfrom,emailTo, 'INYARD CHASSIS WITH DVI HOLD: '+chasId , body)&#xA;   }&#xA;   }catch(Exception e){&#xA;&#x9;   e.printStackTrace();&#xA;   }&#xA;&#xA; }&#xA;&#xA;&#xA;&#xA; public String getEmailContent(String chasId,String CntrNbr,String category,String lkpSlot, String aibcarrierId,String aobcarrierId,String dischargePort,String strDate)&#xA;{&#xA;String emailContent = &quot;&lt;html&gt;&lt;head&gt;&quot;+&#xA;&quot;&lt;meta http-equiv='Content-Language' content='en-us'&gt;&quot;+&#xA;&quot;&lt;meta http-equiv='Content-Type' content='text/html; charset=windows-1252'&gt;&quot;+&#xA;&quot;&lt;title&gt;New Page 1&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&quot;+&#xA;&quot;&lt;table border='0' width='67%' id='table1'&gt;&quot;+&#xA;  &quot;&lt;tr&gt;&lt;td height='79'&gt;&lt;table border='0' width='100%' id='table4'&gt;&quot;+&#xA;&#x9;&#x9;&quot;&lt;tr&gt;&lt;td&gt;&lt;p align='center'&gt;INYARD CHASSIS WITH DVI HOLD NOTICE&lt;/td&gt;&quot;+&#xA;&#x9;&#x9;&#x9;&#x9;&quot;&lt;td width='136'&gt;&lt;font SIZE='2'&gt;Date :&quot;+strDate+&quot;&lt;/font&gt;&lt;/td&gt;&quot;+&#xA;&#x9;&#x9;&#x9;&quot;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;p align='center'&gt;Matson Navigation Honolulu, Hawaii &lt;/td&gt;&quot;+&#xA;&#x9;&#x9;&#x9;&#x9;&quot;&lt;td width='136'&gt;&amp;nbsp;&lt;/td&gt;&quot;+&#xA;&#x9;&#x9;&#x9;&quot;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&quot;+&#xA;&#x9;&#x9;&quot;&lt;td&gt;&lt;table border='0' width='100%' id='table3'&gt;&quot;+&#xA;&#x9;&#x9;&#x9;&quot;&lt;tr nowrap&gt;&quot;+&#xA;&#x9;&#x9;&#x9;&#x9;&quot;&lt;td width='85'&gt;&lt;b&gt;&lt;span LANG='EN'&gt;&lt;font SIZE='2'&gt;Chassis Id&lt;/font&gt;&lt;/span&gt;&lt;/b&gt;&lt;/td&gt;&quot;+&#xA;&#x9;&#x9;&#x9;&#x9;&quot;&lt;td width='95'&gt;&lt;b&gt;&lt;span LANG='EN'&gt;&lt;font SIZE='2'&gt;Container Nbr&lt;/font&gt;&lt;/span&gt;&lt;/b&gt;&lt;/td&gt;&quot;+&#xA;&#x9;&#x9;&#x9;&#x9;&quot;&lt;td width='61'&gt;&lt;b&gt;&lt;font size='2'&gt;Category&lt;/font&gt;&lt;/b&gt;&lt;/td&gt;&quot;+&#xA;&#x9;&#x9;&#x9;&#x9;&quot;&lt;td width='65'&gt;&lt;b&gt;&lt;font size='2'&gt;Yard Loc&lt;/font&gt;&lt;/b&gt;&lt;/td&gt;&quot;+&#xA;&#x9;&#x9;&#x9;&#x9;&quot;&lt;td width='85'&gt;&lt;b&gt;&lt;font size='2'&gt;IB Carrier&lt;/font&gt;&lt;/b&gt;&lt;/td&gt;&quot;+&#xA;&#x9;&#x9;&#x9;&#x9;&quot;&lt;td width='100'&gt;&lt;b&gt;&lt;font size='2'&gt;OB Carrier&lt;/font&gt;&lt;/b&gt;&lt;/td&gt;&quot;+&#xA;&#x9;&#x9;&#x9;&#x9;&quot;&lt;td&gt;&lt;b&gt;&lt;font size='2'&gt;POD&lt;/font&gt;&lt;/b&gt;&lt;/td&gt;&quot;+&#xA;&#x9;&#x9;&#x9;&quot;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&quot;+&#xA;&#x9;        &quot;&lt;tr&gt;&lt;td&gt;&lt;table border='0' width='100%' id='table2'&gt;&lt;tr nowrap&gt;&quot;+&#xA;&#x9;&#x9;&#x9;&#x9;&quot;&lt;td width='84'&gt;&lt;font SIZE='2'&gt;&quot;+chasId+&quot;&lt;/font&gt;&lt;/td&gt;&quot;+&#xA;&#x9;&#x9;&#x9;&#x9;&quot;&lt;td width='97'&gt;&lt;font SIZE='2'&gt;&quot;+CntrNbr+&quot;&lt;/font&gt;&lt;/td&gt;&quot;+&#xA;&#x9;&#x9;&#x9;&#x9;&quot;&lt;td width='61'&gt;&lt;font SIZE='2'&gt;&quot;+category+&quot;&lt;/font&gt;&lt;/td&gt;&quot;+&#xA;&#x9;&#x9;&#x9;&#x9;&quot;&lt;td width='65'&gt;&lt;font SIZE='2'&gt;&quot;+lkpSlot+&quot;&lt;/font&gt;&lt;/td&gt;&quot;+&#xA;&#x9;&#x9;&#x9;&#x9;&quot;&lt;td width='85'&gt;&lt;font SIZE='2'&gt;&quot;+aibcarrierId+&quot;&lt;/font&gt;&lt;/td&gt;&quot;+&#xA;&#x9;&#x9;&#x9;&#x9;&quot;&lt;td width='100'&gt;&lt;font SIZE='2'&gt;&quot;+aobcarrierId+&quot;&lt;/font&gt;&lt;/td&gt;&quot;+&#xA;&#x9;&#x9;&#x9;&#x9;&quot;&lt;td&gt;&lt;font SIZE='2'&gt;&quot;+dischargePort+&quot;&lt;/font&gt;&lt;/td&gt;&quot;+&#xA;&#x9;&#x9;&#x9;&quot;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;&quot;;&#xA;&#x9;&#x9;return emailContent;&#xA;}&#xA;&#xA;}" />
<digital-asset id="GvyCmisEventPreAdvise" short-description="GvyCmisEventPreAdvise" is-pre-deployed="N" groovy-code="import com.navis.argo.ContextHelper;&#xA;&#xA;/*&#xA;* A1   KR    07/09/15  Alaska Ports&#xA;*/&#xA;&#xA;public class GvyCmisEventPreAdvise&#xA;{&#xA;  def deptUnitDischPort = null&#xA;&#xA;  public String processPreAdvise(String xmlData,Object event, Object gvyBaseClass)&#xA;  {&#xA;     def xmlGvyString = xmlData&#xA;     def unit = event.getEntity()&#xA;     def gvyEventObj = event.getEvent()&#xA;     String eventType =  gvyEventObj.getEventTypeId()&#xA;     println('EventType ::'+eventType)&#xA;&#xA;    try&#xA;   {&#xA;      def gvyCmisUtil = gvyBaseClass.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;      if (eventType.equals(&quot;UNIT_PREADVISE&quot;))&#xA;      {&#xA;         def bookingLineOperator = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqoLine.bzuId&quot;);&#xA;         bookingLineOperator = bookingLineOperator != null ? bookingLineOperator : ''&#xA;             //SET Discharge port of Departed unit ELSE if no Departed unit then set to ?HON?&#xA;             //[comments] = ?YB EX ?+&lt;port&gt;&#xA;            def port = deptUnitDischPort != null ? deptUnitDischPort : ContextHelper.getThreadFacility().getFcyId();&#xA;            def comments = gvyCmisUtil.getFieldValues(xmlGvyString, &quot;comments=&quot;)&#xA;            comments = comments.equals('null') ? '' : comments&#xA;            comments =  'YB EX '+port+' '+comments&#xA;              xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;comments=&quot;,comments)&#xA;              xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dss=&quot;,&quot;12&quot;)&#xA;           xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dsc=&quot;,&quot;C&quot;)&#xA;        }&#xA;        else if (eventType.equals(&quot;CANCEL PREADVISE&quot;))&#xA;       {&#xA;          xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dsc=&quot;,&quot;null&quot;)&#xA;          xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;dss=&quot;,&quot;null&quot;)&#xA;&#xA;          //CANCEL_PREADVISE&#xA;          def aibcarrierOperatorId=unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvId&quot;)&#xA;          def truck = aibcarrierOperatorId != null ? aibcarrierOperatorId : ''&#xA;           if(truck.equals('GEN_TRUCK')){&#xA;              truck = unit.getFieldValue(&quot;unitRouting.rtgTruckingCompany.bzuId&quot;)&#xA;           }&#xA;          xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;truck=&quot;,truck)&#xA;        }&#xA;        //Post Event&#xA;        def pol =  unit.unitRouting.rtgPOL;&#xA;        println(&quot;Preadvised for POL : &quot;+pol);&#xA;        if (!&quot;KQA&quot;.equalsIgnoreCase(pol)) {&#x9;&#x9;&#xA;&#x9;gvyCmisUtil.postMsgForAction(xmlGvyString,gvyBaseClass,&quot;EDT&quot;)&#xA;        }&#xA;&#xA;     }catch(Exception e){&#xA;          e.printStackTrace()&#xA;     }&#xA;      return xmlGvyString&#xA; }//Method Ends&#xA;}//Class PreAdvise Ends" />
<digital-asset id="testExp" short-description="testExp" is-pre-deployed="N" groovy-code="/*&#xA;*  A1    Raghu Pattangi      Intial groovy plug-in for sail function (longhaul and barge) reports.&#xA;*/&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DecimalFormat;&#xA;import java.text.DateFormat&#xA;import java.util.HashMap&#xA;import com.navis.argo.business.atoms.LocTypeEnum;&#xA;import com.navis.inventory.business.imdg.HazardItem;&#xA;import com.navis.inventory.business.imdg.Hazards;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;import com.navis.argo.ContextHelper;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;import com.navis.argo.business.atoms.FreightKindEnum;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.api.EventManager&#xA;import org.apache.log4j.Logger;&#xA;&#xA;public class testExp extends GroovyInjectionBase&#xA;{&#xA;&#x9;//public static final Logger LOGGER = Logger.getLogger(GtestExp.class);&#xA;&#x9;&#x9;public void init(){&#xA;&#x9;&#x9;println(&quot;Inside Groovy plug in&quot;)&#xA;&#x9;&#x9;&#x9;inj = new GroovyInjectionBase();&#xA;&#x9;   }&#xA;&#xA;&#x9;// This report prints all the rehandled cotainers in the YARD or INBOUND vessel which are not loaded back to the vessel.&#xA;&#x9;public void  testExps(event) throws Exception {&#xA;&#x9;&#x9;&#xA;&#x9;println(&quot; new Inside excep&quot;);&#x9;&#xA;&#x9;&#x9;try { &#xA;            throw new Exception(&quot;New Vess Process Incomplete&quot;) &#xA;        } catch (Throwable t) {&#xA;        } &#xA;&#x9;}//method ends&#xA;&#xA;&#x9;&#xA;}//class ends&#xA;" />
<digital-asset id="MatMassUpdateYardPosition" short-description="MatMassUpdateYardPosition" is-pre-deployed="N" groovy-code="import com.navis.argo.ContextHelper;&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.framework.util.BizViolation;&#xA;import com.navis.inventory.business.api.UnitManager;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;&#xA;import com.navis.security.business.user.BaseUser;&#xA;import org.apache.log4j.Logger;&#xA;&#xA;public class MatMassUpdateYardPosition {&#xA;    public void execute(Unit inUnit, String inSlot) {&#xA;        GroovyApi api = new GroovyApi();&#xA; &#x9;println(&quot;UPDATE POSITION executed  &quot;+inUnit);&#xA;&#xA;        if (inUnit != null &amp;&amp; inSlot!=null) {&#xA;            UnitFacilityVisit ufv = inUnit.getUfvForFacilityLiveOnly(ContextHelper.getThreadFacility());&#xA;&#x9; println(&quot;UPDATE POSITION executed for Unit  &quot;+ufv.getUfvUnit().getUnitId() );&#xA;            if (ufv!= null ) {&#xA;                UnitManager unitManager = (UnitManager) Roastery.getBean(UnitManager.BEAN_ID);&#xA;                try {&#xA;                    unitManager.recordUnitYardMove(ufv, inSlot, (String) null);&#xA;                } catch (BizViolation bizViolation) {&#xA;                    LOGGER.error(&quot;Cannot record yard move &quot;+bizViolation.toString());&#xA;                    String userId = ContextHelper.getThreadUserId();&#xA;                    String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;                    if (userId!= null) {&#xA;                        BaseUser baseUser = BaseUser.findBaseUser(userId);&#xA;                        if (baseUser!= null &amp;&amp; baseUser.getBuserEMail()!=null) {&#xA;                            emailTo = baseUser.getBuserEMail();&#xA;                        }&#xA;                    }&#xA;                    api.sendEmail(emailTo, &quot;gbabu@matson.com&quot;,&quot;Update Position Failed&quot;, &quot; Update of position failed for unit &quot;+ufv.getUfvUnit().getUnitId() +&quot; with error&quot;+bizViolation.toString());&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;    private static Logger LOGGER = Logger.getLogger(MatMassUpdateYardPosition.class);&#xA;}&#xA;" />
<digital-asset id="MatsonAncWriteTicketIntoFtpPath" short-description="MatsonAncWriteTicketIntoFtpPath" is-pre-deployed="N" groovy-code="/*&#xA; * Copyright (c) 2016 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.navis.extension.invocation.dynamiccode.IExtension&#xA;import com.navis.extension.invocation.dynamiccode.IExtensionClassProvider&#xA;import com.navis.extension.portal.IExtensionBizFacade&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.context.PortalApplicationContext&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.util.message.MessageCollector&#xA;import com.navis.framework.util.message.MessageLevel&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;import org.jetbrains.annotations.Nullable&#xA;&#xA;/**&#xA; * Open FTP connection, move the tickets to FTP path and close connection.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 02/09/2016&#xA; *&#xA; * Date: 02/09/2016: 5:41 PM&#xA; * JIRA: CSDV-3512&#xA; * SFDC: 00150390&#xA; * Called from: Groovy Job&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; *&#xA; *&#xA; */&#xA;public class MatsonAncWriteTicketIntoFtpPath extends GroovyApi {&#xA;&#xA;  /**&#xA;   * Print document based on the configuration docTypeId parameter&#xA;   *&#xA;   * @param inOutDao&#xA;   */&#xA;  public void execute(Map parameters) {&#xA;    LOGGER.setLevel(Level.INFO);&#xA;    LOGGER.info(&quot; MatsonAncWriteTicketIntoFtpPath execute Stared.&quot;);&#xA;    moveFilesToFTPPath();&#xA;    LOGGER.info(&quot; MatsonAncWriteTicketIntoFtpPath execute Completed.&quot;);&#xA;  }&#xA;&#xA;  @Override&#xA;  void registerOverridableError(String inFailureMessage) {&#xA;    super.registerOverridableError(inFailureMessage)&#xA;  }&#xA;&#xA;  private void moveFilesToFTPPath() {&#xA;    List&lt;GeneralReference&gt; localPathGeneralReferenceList = GeneralReference.findAllEntriesById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;LOCAL_PATH&quot;);&#xA;    def matsonAncFtpAdaptor = getLibrary(&quot;MatsonAncFtpAdaptor&quot;);&#xA;    for (GeneralReference reference : localPathGeneralReferenceList) {&#xA;      try {&#xA;        String id3 = reference.getRefId3();&#xA;        if (id3 == null) {&#xA;          LOGGER.error(&quot; MatsonAncWriteTicketIntoFtpPath, Ref Id3 value is null for General Reference:&quot; + reference.toString());&#xA;          continue;&#xA;        }&#xA;        String filePath = reference.getRefValue1();&#xA;        if (filePath == null) {&#xA;          LOGGER.error(&quot; MatsonAncWriteTicketIntoFtpPath, Ref Value1 is null for General Reference:&quot; + reference.toString());&#xA;          continue;&#xA;        }&#xA;        GeneralReference ftpGeneralReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;FTP&quot;, &quot;INFO&quot;, id3);&#xA;        if (ftpGeneralReference == null) {&#xA;          LOGGER.error(&quot;Couldn't find the FTP General Reference for Type:MATSON, ID-1:FTP,ID-2:INFO and ID-3:&quot; + id3);&#xA;          throw new Exception(&quot;Couldn't find the FTP General Reference for Type:MATSON, ID-1:FTP,ID-2:INFO and ID-3:&quot; + id3);&#xA;        }&#xA;        matsonAncFtpAdaptor.openConnection(ftpGeneralReference);&#xA;        File parentFile = new File(filePath);&#xA;        File[] files = parentFile.listFiles()&#xA;        if (files != null) {&#xA;          for (File file : files) {&#xA;            if (file.isFile()) {&#xA;              matsonAncFtpAdaptor.sendDocument(file);&#xA;            }&#xA;          }&#xA;        }&#xA;      } finally {&#xA;        matsonAncFtpAdaptor.closeConnection();&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;  private Object getLibrary(String inName) throws BizViolation {&#xA;    IExtension inPlugin = findLibrary(inName);&#xA;    // get from class provider&#xA;    return getProvider().getExtensionClassInstance(inPlugin);&#xA;  }&#xA;&#xA;  @Nullable&#xA;  protected static IExtension findLibrary(String inLibraryName) throws BizViolation {&#xA;    UserContext uc = ContextHelper.getThreadUserContext();&#xA;    IExtensionBizFacade extFacade = (IExtensionBizFacade) PortalApplicationContext.getBean(IExtensionBizFacade.BEAN_ID);&#xA;    MessageCollector mc = ContextHelper.getThreadMessageCollector();&#xA;    IExtension extension = extFacade.findLibrary(uc, mc, inLibraryName);&#xA;    if (mc.hasError()) {&#xA;      throw (BizViolation) mc.getMessages(MessageLevel.SEVERE).get(0);&#xA;    }&#xA;    return extension;&#xA;  }&#xA;&#xA;  private IExtensionClassProvider getProvider() {&#xA;    if (_provider == null) {&#xA;      _provider = (IExtensionClassProvider) PortalApplicationContext.getBean(IExtensionClassProvider.BEAN_ID);&#xA;    }&#xA;    return _provider;&#xA;  }&#xA;&#xA;  private IExtensionClassProvider _provider;&#xA;  private Logger LOGGER = Logger.getLogger(MatsonAncWriteTicketIntoFtpPath.class);&#xA;}" />
<digital-asset id="MATDetachContAcc" short-description="MATDetachContAcc" is-pre-deployed="N" groovy-code="package com.matson.tos.groovies&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.atoms.FreightKindEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.model.Complex&#xA;import com.navis.argo.business.model.Facility&#xA;import com.navis.argo.business.model.LocPosition&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.inventory.InventoryConfig&#xA;import com.navis.inventory.business.api.RectifyParms&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; * Created by VNatesan on 9/29/2016.&#xA; */&#xA;class MATDetachContAcc {&#xA;&#xA;    private Logger LOGGER = Logger.getLogger(MATDetachContAcc.class);&#xA;&#xA;    public void execute(Object event) {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot;MATDetachContAcc called on UNIT_LOAD to check and remove container accessories&quot;);&#xA;&#xA;        Unit unit = (Unit) event.getEntity();&#xA;&#xA;        if (unit == null) {&#xA;            return;&#xA;        }&#xA;        UnitFacilityVisit ufv = null;&#xA;        UnitEquipment ue = unit.getAccessoryOnCtr();&#xA;        if (ue != null &amp;&amp; ue.hasNotBeenDetached()) {&#xA;            ufv = unit.getUnitActiveUfvNowActive();&#xA;        }&#xA;        if (ufv == null) {&#xA;            //throw BizFailure.create(&quot;Unit.dismount - no Active UFV for Unit: &quot; + unit.getUnitId());&#xA;            LOGGER.info(&quot;Unit.dismount - no Active UFV for Unit: &quot; + unit.getUnitId());&#xA;        } else {&#xA;&#xA;           if (ufv.isTransitStateAtMost(UfvTransitStateEnum.S60_LOADED)) {&#xA;                LOGGER.info(&quot;MATDetachContAcc  isTransitStateAtMost &quot;);&#xA;                //get position and complex,facility&#xA;                LocPosition currentPos = unit.findCurrentPosition();&#xA;                Facility facility = currentPos.resolveFacility();&#xA;                Complex complex = facility.getFcyComplex();&#xA;&#xA;                //get equipment to detatch&#xA;                Equipment eqToDetach = ue.getUeEquipment();&#xA;                //detach the container accessories&#xA;                ue.detach(ue.getUeEquipment().getEqIdFull() + &quot; dismounted&quot;);&#xA;&#xA;                HibernateApi.getInstance().flush();&#xA;                String note = &quot;detached from &quot; + unit.getUnitId();&#xA;&#xA;                LOGGER.info(&quot;MATDetachContAcc &quot; + note);&#xA;                //create dummy truck&#xA;                CarrierVisit dummyTruck = CarrierVisit.getGenericTruckVisit(complex);&#xA;                //create new unit&#xA;                Unit newUnit = unit.createContainerizedUnit(note, complex, dummyTruck, dummyTruck, ue.getUeEquipment(), unit.getUnitLineOperator());&#xA;                LocPosition inboundPosition = LocPosition.createLocPosition(dummyTruck, (String)null, (String)null);&#xA;                UnitFacilityVisit newUfv = UnitFacilityVisit.createUnitFacilityVisit(newUnit, facility, inboundPosition, dummyTruck);&#xA;&#xA;                UnitEquipment newUe1 = newUnit.getCurrentlyAttachedUe(eqToDetach);&#xA;&#xA;                if(newUe1.getUeEquipmentState().getEqsEqOperator() != null) {&#xA;                    newUnit.setUnitLineOperator(newUe1.getUeEquipmentState().getEqsEqOperator());&#xA;                } else {&#xA;                    newUnit.setUnitLineOperator(newUe1.getUeEquipmentState().getEqsEqOwner());&#xA;                }&#xA;&#xA;                RectifyParms parms2 = new RectifyParms();&#xA;                parms2.setUfvTransitState(UfvTransitStateEnum.S40_YARD);&#xA;&#xA;                //since there is no default slot for Accessory when divorced ,i reused chassis dismount slot to accessory as well&#xA;                String accSlot1 = InventoryConfig.CHASSIS_DISMOUNT_SLOT.getSetting(ContextHelper.getThreadUserContext());&#xA;                if(&quot;GEN_YARD&quot;.equals(accSlot1)) {&#xA;                    accSlot1 = null;&#xA;                }&#xA;                newUfv.rectify(parms2);&#xA;                parms2.setSlot(accSlot1);&#xA;                newUnit.updateCategory(UnitCategoryEnum.STORAGE);&#xA;                newUnit.updateFreightKind(FreightKindEnum.MTY);&#xA;                HibernateApi.getInstance().update(newUnit);&#xA;            }&#xA;&#xA;&#xA;        }&#xA;&#xA;    }&#xA;&#xA;}" />
<digital-asset id="GvyReleaseSnxHold" short-description="GvyReleaseSnxHold" is-pre-deployed="N" groovy-code="import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import org.apache.log4j.Logger&#xA;&#xA;/*&#xA;* Copyright (c) 2012 Navis LLC. All Rights Reserved.&#xA;*  AUTHOR: Siva Raja&#xA;*  Date Written: July 23rd, 2012&#xA;*  Description: To be Written&#xA;*/&#xA;&#xA;public class GvyReleaseSnxHold extends GroovyApi {&#xA;&#xA;    UserContext context = ContextHelper.getThreadUserContext();&#xA;    Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;    private static final Logger LOGGER = Logger.getLogger(GvyReleaseSnxHold.class);&#xA;&#xA;&#xA;    public void releaseSnxHold(GroovyEvent event, Object api) {&#xA;try{&#xA;   println(&quot; Calling releaseSnxHold&quot; );&#xA;       /// String eventType = event.getEventTypeId()&#xA; println(&quot; 1 GvyReleaseSnxHold event &quot; + event );&#xA;      //  println(&quot; GvyReleaseSnxHold event &quot; + event + &quot;eventType--&gt;&quot; + eventType);&#xA;&#xA;      //  if (eventType.equalsIgnoreCase('NEWVES_COMPLETED')) {&#xA;            Unit snxUnit = (Unit) event.getEntity();&#xA;            def servicesMgr = (ServicesManager) Roastery.getBean(&quot;servicesManager&quot;);&#xA;           // servicesMgr.applyGuardedPermission(&quot;SNX-HOLD&quot;, snxUnit, null, null, &quot;SNX-HOLD release&quot;);&#xA;&#xA;         com.navis.argo.ContextHelper.setThreadExternalUser(&quot;-jms-&quot;);&#xA;          servicesMgr.applyPermission(&quot;SNX-HOLD&quot;, unit, null, &quot;SNX-HOLD Released Correction&quot;, true) &#xA;&#xA;            println(&quot; SNX Hold released for the unit &quot; + snxUnit.getUnitId());&#xA;            println(&quot; GvyReleaseSnxHold ended &quot; + timeNow);&#xA;      //  }&#xA;&#xA;&#x9;&#x9;}catch(Exception e){&#xA;&#x9;&#x9;&#x9;&#xA;println(&quot; Error in  releaseSnxHold&quot; +e.printStackTrace());&#xA;&#x9;&#x9;}&#xA;    }&#xA;&#xA;&#xA;}" />
<digital-asset id="GvyCheckSITIgtEmpty" short-description="GvyCheckSITIgtEmpty" is-pre-deployed="N" groovy-code="/**&#xA; * Description&#x9;:&#x9;This groovy generates an email alert if a SIT unit is being ingated as empty&#xA; *&#xA; * Srno  date       doer  change&#xA; * A1    10/31/13  LC    Added 1fwdrs group @ phx and 1reefers group at phx to this email&#xA; * A2    06/30/14  PS    Added 1aktosdevteam@matson.com group (Premium Group)&#xA; */&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.EventFieldChange&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;&#xA;class GvyCheckSITIgtEmpty extends GroovyApi {&#xA;    //&#xA;    final String EMAIL_FROM = &quot;1aktosdevteam@matson.com&quot;&#xA;    final String EMAIL_TO = &quot;1aktosdevteam@matson.com&quot;&#xA;    //&#xA;    public void check(Object event) {&#xA;        try{&#xA;            Unit unit = (Unit)event.getEntity()&#xA;            println(&quot;******* GvyCheckSITIgtEmpty STARTS*******&quot;)&#xA;            def cmdyId = unit.getFieldValue(&quot;unitGoods.gdsCommodity.cmdyId&quot;)&#xA;            def unitFreightKind = unit.getFieldValue(&quot;unitFreightKind&quot;)&#xA;            unitFreightKind = unitFreightKind == null ? &quot;&quot;: unitFreightKind.getKey()&#xA;&#xA;            def gvyUnitUtil = getGroovyClassInstance(&quot;GvyUnitUtility&quot;)&#xA;            def inFacility = com.navis.argo.ContextHelper.getThreadFacility();&#xA;             if(inFacility==null){&#xA;                 inFacility= unit.getLocFacility();&#xA;             }&#xA;&#xA;            def equiGkey = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.ueGkey&quot;)&#xA;&#xA;            def retiredUfv = gvyUnitUtil.findRetiredDepartedUfvUnit(inFacility, equiGkey)&#xA;            Unit retiredUnit = retiredUfv!=null?retiredUfv.ufvUnit:null;&#xA;            def prevCmdyId = retiredUnit!=null?retiredUnit.getUnitGoods().getGdsCommodity().getCmdyId():&quot;&quot;;&#xA;&#xA;            println(&quot;UNITID=&quot;+unit.unitId+&quot;,CMDY=&quot;+prevCmdyId+&quot;,FREIGHTKIND=&quot;+unitFreightKind)&#xA;            if(prevCmdyId.equals(&quot;SIT&quot;) &amp;&amp; unitFreightKind.equals('MTY')) {&#xA;                def gvyGateObj = getGroovyClassInstance(&quot;GvyCmisGateData&quot;)&#xA;                def carrierVisitGkey = unit.getFieldValue(&quot;unitActiveUfv.ufvActualIbCv.cvdGkey&quot;)&#xA;                carrierVisitGkey = carrierVisitGkey != null ? carrierVisitGkey : ''&#xA;                String laneId = gvyGateObj.getEntryLaneId(carrierVisitGkey)&#xA;                String subject = unit.unitId + &quot; flagged as SIT, IGT as Empty from Gate &quot;+laneId&#xA;                String body = &quot;The following ctr was flagged as a SIT but Ingated as an Empty : &quot; + unit.unitId&#xA;                def emailSender = getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;                emailSender.custSendEmail(EMAIL_FROM, EMAIL_TO, subject, body)&#xA;                println(&quot;Sending SIT IGT Empty alert to &quot;+EMAIL_TO)&#xA;            }&#xA;            println(&quot;******* GvyCheckSITIgtEmpty ENDS*******&quot;)&#xA;        }catch(Exception e){&#xA;            e.printStackTrace()&#xA;        }&#xA;    }&#xA;}&#xA;" />
<digital-asset id="MatGvyUpdateUEtoUnit" short-description="MatGvyUpdateUEtoUnit" is-pre-deployed="N" groovy-code="import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.api.UnitManager&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import org.apache.log4j.Level&#xA;&#xA;/**&#xA; * Created by psethuraman on 7/14/2016.&#xA; */&#xA;class MatGvyUpdateUEtoUnit extends GroovyApi {&#xA;    /**&#xA;     * Print document based on the configuration docTypeId parameter&#xA;     *&#xA;     * @param inOutDao&#xA;     */&#xA;    public void execute(Map parameters) throws Exception {&#xA;        //this.log(Level.INFO);&#xA;        this.log(&quot; MatGvyUpdateUEtoUnit execute Stared.&quot;);&#xA;        try {&#xA;            UnitManager manager = Roastery.getBean(UnitManager.BEAN_ID);&#xA;            UnitFacilityVisit ufv = manager.findActiveUfvForUnitDigits(&quot;CXCU8781421&quot;);&#xA;            Unit unit = ufv.getUfvUnit();&#xA;            UnitFinder finder = Roastery.getBean(UnitFinder.BEAN_ID);&#xA;            UnitEquipment ue = finder.findActiveUeUsingEqInAnyRole(ContextHelper.getThreadOperator(), ContextHelper.getThreadComplex(), Equipment.findEquipment(&quot;CXCU8781421&quot;));&#xA;            unit.setUnitPrimaryUe(ue);&#xA;        } catch (Exception e) {&#xA;            this.log(e)&#xA;            throw new BizViolation(e);&#xA;        }&#xA;&#xA;        this.log(&quot; MatGvyUpdateUEtoUnit execute Completed.&quot;);&#xA;    }&#xA;}&#xA;" />
<digital-asset id="MATProcessNewVessIncomplete" short-description="MATProcessNewVessIncomplete" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.model.VisitDetails&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;import org.apache.log4j.Logger&#xA;&#xA;import java.text.DateFormat&#xA;import java.text.SimpleDateFormat&#xA;&#xA;/*&#xA;&#xA;Date Written: 07/06/2012&#xA;Author: Siva Raja&#xA;Description: Groovy to extract unit details based on ane event recorded and send xml data to MNS application using JMS.&#xA;  /*&#xA;   - &lt;unit snx-update-note=&quot;NewVes Holds:(CUS,CAR,RM)&quot; line=&quot;MAE&quot; freight-kind=&quot;FCL&quot; category=&quot;THROUGH&quot; id=&quot;PONU2897259&quot;&gt;&#xA;- &lt;equipment role=&quot;PRIMARY&quot; eq-flex-01=&quot;CLIENT&quot; material=&quot;UNKNOWN&quot; operator=&quot;MAE&quot; owner=&quot;MAEU&quot; strength-code=&quot;TM&quot; height-mm=&quot;2590&quot; tare-kg=&quot;1823.44&quot; type=&quot;R20&quot; class=&quot;CTR&quot; eqid=&quot;PONU2897259&quot;&gt;&#xA;  &lt;damages /&gt;&#xA;  &lt;/equipment&gt;&#xA;  &lt;position slot=&quot;350384&quot; location=&quot;CBL280&quot; loc-type=&quot;VESSEL&quot; /&gt;&#xA;- &lt;routing destination=&quot;LAX&quot; opl=&quot;TRG&quot; pod-1=&quot;LAX&quot; pol=&quot;TRG&quot;&gt;&#xA;  &lt;carrier id=&quot;CBL280&quot; facility=&quot;HON&quot; mode=&quot;VESSEL&quot; qualifier=&quot;DECLARED&quot; direction=&quot;IB&quot; /&gt;&#xA;  &lt;carrier id=&quot;CBL280&quot; facility=&quot;HON&quot; mode=&quot;VESSEL&quot; qualifier=&quot;ACTUAL&quot; direction=&quot;IB&quot; /&gt;&#xA;  &lt;carrier id=&quot;CBL280&quot; facility=&quot;HON&quot; mode=&quot;VESSEL&quot; qualifier=&quot;DECLARED&quot; direction=&quot;OB&quot; /&gt;&#xA;  &lt;carrier id=&quot;CBL280&quot; facility=&quot;HON&quot; mode=&quot;VESSEL&quot; qualifier=&quot;ACTUAL&quot; direction=&quot;OB&quot; /&gt;&#xA;  &lt;/routing&gt;&#xA;  &lt;reefer temp-display-unit=&quot;C&quot; temp-reqd-c=&quot;-20.00&quot; /&gt;&#xA;  &lt;handling remark=&quot;NO MNFST INFO&quot; /&gt;&#xA;  &lt;contents commodity-name=&quot;CUSTOMS&quot; commodity-id=&quot;CUS&quot; bl-nbr=&quot;&quot; weight-kg=&quot;21998.33&quot; /&gt;&#xA;- &lt;flags&gt;&#xA;  &lt;hold id=&quot;CUS&quot; /&gt;&#xA;  &lt;hold id=&quot;CAR&quot; /&gt;&#xA;  &lt;hold id=&quot;RM&quot; /&gt;&#xA;  &lt;/flags&gt;&#xA;  &lt;unit-etc requires-power=&quot;Y&quot; /&gt;&#xA;  &lt;/unit&gt;&#xA;  */&#xA;&#xA;public class MATProcessNewVessIncomplete extends AbstractGeneralNoticeCodeExtension {&#xA;&#xA;    UserContext context = ContextHelper.getThreadUserContext();&#xA;    Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;    String startDate = null;&#xA;    String endDate = null;&#xA;&#xA;    private static final String XML_OVERRIDE = &quot;\&quot;&quot;;&#xA;    private static final String honFacility = &quot;ANK&quot;;&#xA;    private static final String XML_END_ELEMENT = &quot;/&gt;&quot;;&#xA;&#xA;    def inj = new GroovyInjectionBase();&#xA;    int pos&#xA;    private String addNode = &quot;Y&quot;;&#xA;&#xA;    private final String emailFrom = 'BRajamanickam@matson.com'&#xA;    private final String emailTo = &quot;BRajamanickam@matson.com&quot;;&#xA;&#xA;    Integer totalContainers = 0;&#xA;&#xA;    public void execute(GroovyEvent inEvent) {&#xA;        Event event = inEvent.getEvent();&#xA;&#xA;        LOGGER.warn(&quot;Calling execute event--&gt;&quot; + event);&#xA;&#xA;        if (event == null) {&#xA;            return&#xA;        };&#xA;&#xA;        /* Get the unit and the Booking */&#xA;&#xA;        VesselVisitDetails vesselVisitDetails = (VesselVisitDetails) inEvent.getEntity();&#xA;&#xA;        LOGGER.warn(&quot;Calling execute event vesselVisitDetails--&gt;&quot; + vesselVisitDetails);&#xA;&#xA;        if (vesselVisitDetails == null) {&#xA;            return;&#xA;        }&#xA;        final CarrierVisit cv = ((VisitDetails) vesselVisitDetails).getInboundCv();&#xA;&#xA;        List unitList = getAllUnits(cv);&#xA;&#xA;        LOGGER.warn(&quot;Calling execute event cv.toString()--&gt;&quot; + cv.toString());&#xA;&#xA;        if (unitList == null) unitList = new ArrayList();&#xA;&#xA;        LOGGER.warn(&quot;Calling execute event unitList--&gt;&quot; + unitList.size());&#xA;    }&#xA;&#xA;&#xA;    public void getAllUnits(CarrierVisit vesVoy) {&#xA;        GroovyApi api = new GroovyApi();&#xA;        try {&#xA;            DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;);&#xA;            dq = dq.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_IB_ID, vesVoy.toString()));&#xA;            List unitList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;            println(&quot;dq ====&quot; + dq + &quot; unitsList ====&quot; + (unitList != null ? unitList.size() : &quot;NO RESULT&quot;));&#xA;&#xA;            List vesVistUnitLists = new ArrayList();&#xA;&#xA;            if (unitList != null) {&#xA;                vesVistUnitLists.addAll(unitList);&#xA;            }//outer If&#xA;            LOGGER.warn(&quot;vesVistUnitLists&quot; + vesVistUnitLists.size());&#xA;            //def bookingNbr=unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;)&#xA;            for (aUnit in vesVistUnitLists) {&#xA;&#xA;                Object inUnit = aUnit.getUfvUnit();&#xA;&#xA;                LOGGER.warn(&quot;inside loop&quot;);&#xA;                //for (int k=0; k &lt; 5; k++){&#xA;                Unit unit = inUnit as Unit ;&#xA;&#xA;                LOGGER.warn(&quot;inside loop 2&quot;);&#xA;&#xA;                def unitBlNbr = unit.getUnitGoods().getGdsBlNbr();&#xA;&#xA;                LOGGER.warn(&quot;inside loop 3 --&gt; &quot; +unitBlNbr);&#xA;&#xA;              //  LOGGER.warn(&quot;unit.ufvTransitState()&quot; + &quot; 2 &quot; + unit.getunit);&#xA;&#xA;              //  if (unit.ufvTransitState().equals(UnitFacilityVisit.S20_INBOUND) &amp;&amp; unitBlNbr != null &amp;&amp; unitBlNbr.contains(&quot;DO NOT EDIT-NEWVES&quot;)) {&#xA;&#xA;                    LOGGER.warn(&quot;Sending mail&quot;);&#xA;              //  }&#xA;&#xA;            }&#xA;&#xA;        } catch (Exception e) {&#xA;            api.log(&quot;Exception in GvyCmisUnitDataRefresh.getAllUnits() &quot; + e);&#xA;        }&#xA;    }//Method ends&#xA;&#xA;&#xA;    public void sendMail() {&#xA;        LOGGER.warn(&quot;New MATProcessNewVessIncomplete started&quot; + timeNow);&#xA;        DateFormat dateFormat = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss&quot;);&#xA;        Date date = new Date();&#xA;        startDate = dateFormat.format(date);&#xA;&#xA;        def cv = &quot;test&quot;; def totalContainers = 0;&#xA;&#xA;&#xA;&#xA;        try {&#xA;&#xA;            def emailSender = inj.getGroovyClassInstance(&quot;EmailSender&quot;)&#xA;&#xA;            LOGGER.warn(&quot;before send  mail&quot;);&#xA;            // emailSender.custSendEmail(emailFrom,emailTo,&quot;New Vess InCompleteNotification for vessel &quot;+cv +&quot;,&quot;);&#xA;            emailSender.custSendEmail(emailFrom, emailTo, &quot;New Vess InCompleteNotification for vessel &quot; + cv + &quot; Count : &quot; + totalContainers, &quot;Clent vessel InCompleteNotification for &quot; + cv + &quot; Count : &quot; + totalContainers + &quot; , xml posted to  application&quot;);&#xA;&#xA;            LOGGER.warn(&quot;Sent mail&quot;);&#xA;        }&#xA;        catch (xe) {&#xA;            LOGGER.warn(&quot;Error MATProcessNewVessIncomplete&quot; + xe);&#xA;            println(&quot;Error MATProcessNewVessIncomplete&quot; + xe);&#xA;        }&#xA;&#xA;        LOGGER.warn(&quot;New MATProcessNewVessIncomplete ended&quot; + timeNow);&#xA;    }&#xA;&#xA;&#xA;    private static final Logger LOGGER = Logger.getLogger(MATProcessNewVessIncomplete.class);&#xA;}" />
<digital-asset id="GvyInjAvgx" short-description="GvyInjAvgx" is-pre-deployed="N" groovy-code="package com.matson.tos.groovies&#xA;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.model.Facility&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.inventory.InventoryBizMetafield&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.api.UnitManager&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.services.business.rules.EventType&#xA;&#xA;class GvyInjAvgx extends GroovyInjectionBase {&#xA;    public String execute(Map inParameters) {&#xA;&#xA;        String equipmentNumber = (String) inParameters.get(&quot;equipmentNumber&quot;);&#xA;        String bookingNumber = (String) inParameters.get(&quot;bookingNumber&quot;);&#xA;        String grossWeight = (String) inParameters.get(&quot;grossWeight&quot;);&#xA;        String verifierId = (String) inParameters.get(&quot;verifierId&quot;);&#xA;        String threadUser = &quot;ACETS&quot;;&#xA;        bookingNumber = bookingNumber != null &amp;&amp; !bookingNumber.isEmpty() ? bookingNumber.trim() : bookingNumber;&#xA;        equipmentNumber = equipmentNumber != null &amp;&amp; !equipmentNumber.isEmpty() ? equipmentNumber.trim() : equipmentNumber;&#xA;        if (verifierId != null &amp;&amp; !verifierId.isEmpty()) {&#xA;            threadUser = verifierId.trim();&#xA;        }&#xA;        com.navis.argo.ContextHelper.setThreadExternalUser(threadUser); // ACETS or ???&#xA;&#xA;        logInfo(&quot;GvyInjAvgx start for unitId: &quot; + equipmentNumber + &quot; for booking: &quot; + bookingNumber);&#xA;&#xA;        // find booking&#xA;        Facility facility = getFacility();&#xA;&#xA;&#xA;        List&lt;Booking&gt; bookingList = Booking.findBookingsByNbr(bookingNumber);&#xA;        Booking booking = !bookingList.isEmpty() ? bookingList.get(0) : null;&#xA;        if (booking == null) {&#xA;            sendFailureMail(equipmentNumber, &quot;Could not find booking: &quot; + bookingNumber);&#xA;            fail(&quot;ERR_GVY_VGX_001. Could not find booking: &quot; + bookingNumber);&#xA;        }&#xA;        //todo change the API to handle booking with carrier and all details&#xA;&#xA;        CarrierVisit cv = booking.getEqoVesselVisit();&#xA;        if (cv == null) {&#xA;            sendFailureMail(equipmentNumber, &quot;Could not find Carrier Visit&quot;)&#xA;            fail(&quot;ERR_GVY_VGX_002. Could not find the carrier visit: &quot;);&#xA;        }&#xA;&#xA;        // find unit in facility&#xA;        UnitManager unitMgr = (UnitManager) Roastery.getBean(UnitManager.BEAN_ID);&#xA;        UnitFacilityVisit ufv;&#xA;&#xA;        Unit unit;&#xA;        try {&#xA;            ufv = unitMgr.findActiveUfvForUnitDigits(equipmentNumber);&#xA;            if (ufv != null)&#xA;                unit = ufv.getUfvUnit();&#xA;&#xA;        } catch (Exception ex) {&#xA;            ex.printStackTrace()&#xA;            sendFailureMail(equipmentNumber, &quot; Could not find unit:&quot; + ex.message + &quot;\n&quot; + ex.toString());&#xA;            fail((new StringBuilder()).append(ex.toString()).append(&quot; ERR_GVY_VGX_004. Could not find unit: &quot;).append(ctrId).toString());&#xA;        }&#xA;&#xA;        String obDecVesvoy = ufv.getUfvIntendedObCv().getCvId();&#xA;        logInfo(&quot;obDecVesvoy=&quot; + obDecVesvoy);&#xA;        if (!obDecVesvoy.equals(cv.getCvId())) {&#xA;            //skip with sending mail&#xA;            sendFailureMail(equipmentNumber, &quot;ERR_GVY_VGX_005. Could not find unit with ob vesvoy :&quot; + cv.getCvId() + &quot; but an unit with ob vesvoy &quot; + obDecVesvoy + &quot; found&quot;);&#xA;            fail(&quot;ERR_GVY_VGX_005. Could not find unit with ob vesvoy :&quot; + cv.getCvId() + &quot; but an unit with ob vesvoy &quot; + obDecVesvoy + &quot; found&quot;);&#xA;        }&#xA;&#xA;&#xA;&#xA;&#xA;        String unitBookingNumber = unit.getUnitPrimaryUe().getUeDepartureOrderItem().getEqboiOrder().getEqboNbr();&#xA;        logInfo(&quot;unitBookingNumber=&quot; + unitBookingNumber);&#xA;        if (!unitBookingNumber.equals(bookingNumber)) {&#xA;            //skip after sending mail&#xA;            sendFailureMail(equipmentNumber, &quot;ERR_GVY_VGX_006. Could not find unit with booking number :&quot; + bookingNumber + &quot; but an unit with booking number &quot; + unitBookingNumber + &quot; found&quot;);&#xA;            fail(&quot;ERR_GVY_VGX_006. Could not find unit with booking number :&quot; + bookingNumber + &quot; but an unit with booking number &quot; + unitBookingNumber + &quot; found&quot;);&#xA;        }&#xA;&#xA;        unit.setUnitGoodsAndCtrWtKg(Double.parseDouble(grossWeight));&#xA;&#xA;&#xA;        EventType eventType = EventType.findEventType(&quot;VGM RELEASE&quot;);&#xA;        FieldChanges fieldChanges = new FieldChanges();&#xA;        fieldChanges.setFieldChange(InventoryField.UNIT_GOODS_AND_CTR_WT_KG, Double.parseDouble(grossWeight));&#xA;        fieldChanges.setFieldChange(InventoryBizMetafield.UNIT_GOODS_AND_CTR_WT_KG_LONG, Double.parseDouble(grossWeight).longValue());&#xA;        fieldChanges.setFieldChange(InventoryField.UNIT_GOODS_AND_CTR_WT_KG_VERFIED_GROSS, Double.parseDouble(grossWeight));&#xA;        fieldChanges.setFieldChange(InventoryField.UNIT_FLEX_STRING06, &quot;YES&quot;);&#xA;        fieldChanges.setFieldChange(InventoryField.UNIT_VGM_VERIFIED_DATE, ArgoUtils.timeNow());&#xA;        fieldChanges.setFieldChange(InventoryField.UNIT_VGM_ENTITY, verifierId);&#xA;        unit.recordUnitEvent(eventType, fieldChanges, &quot;VGM Value by AVGX Groovy&quot;);//servicemanager.recordservice event&#xA;        //ServicesManager servicesManager = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;        //servicesManager.recordEvent(eventType, (&quot;VGM updated by &quot; + verifierId), null, null, unit, fieldChanges, ArgoUtils.timeNow());&#xA;        HibernateApi.getInstance().flush();&#xA;        /**&#xA;         * The service event will not be able to refresh the impediments re-calculation on it's own (i.e., vessel stop)&#xA;         * it needs to be triggered by calling general notices with&#xA;         *&#xA;         * api.getGroovyClassInstance(&quot;MATUtil&quot;).refreshUnit(event.getEntity()); on the above registered event&#xA;         *&#xA;         * or by calling the code below&#xA;         *&#xA;         * ImpedimentsBean impedimentsBean = unit.calculateImpediments(Boolean.TRUE);&#xA;         * if (impedimentsBean != null) {* Date dateNow = new Date(ArgoUtils.timeNowMillis() + 1);&#xA;         * unit.updateImpediments(impedimentsBean, dateNow);&#xA;         * HibernateApi.getInstance().saveOrUpdate(inUnit);&#xA;         *}*&#xA;         */&#xA;&#xA;        logInfo(&quot;End GvyInjAvgx post event: &quot; + equipmentNumber + &quot; for booking: &quot; + bookingNumber);&#xA;        return &quot;SUCCESS&quot;;&#xA;    }&#xA;&#xA;    public void sendFailureMail(String inEquipmentId, String inErrorMessage) {&#xA;        GeneralReference genRef = GeneralReference.findUniqueEntryById(&quot;ENV&quot;, &quot;ENVIRONMENT&quot;);&#xA;        String environment = genRef.getRefValue1();&#xA;        genRef = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;EMAIL&quot;, &quot;NOTIFICATION&quot;);&#xA;        String emailFrom = &quot;1aktosdevteam@matson.com&quot;;&#xA;        String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;        String emailSubject = environment + &quot; - VGM Failure &quot; + inEquipmentId;&#xA;        String emailBody = inErrorMessage;&#xA;        sendEmail(emailTo, emailFrom, emailSubject, emailBody);&#xA;    }&#xA;&#xA;}" />
<digital-asset id="MATUtil" short-description="MATUtil" is-pre-deployed="N" groovy-code="import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.ImpedimentsBean&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;&#xA;/*&#xA;* Groovy for all utilities&#xA;*&#xA;*/&#xA;&#xA;public class MATUtil {&#xA;&#xA;  /*&#xA;  * Method to refresh the units on booking when haz permission is granted&#xA;   */&#xA;    public void refreshUnitsForBooking(Booking inBooking) {&#xA;        if (inBooking != null) {&#xA;            UnitFinder unitFinder = (UnitFinder) Roastery.getBean(UnitFinder.BEAN_ID);&#xA;            if (unitFinder != null) {&#xA;                List&lt;Unit&gt; units = unitFinder.findUnitsForOrder(inBooking);&#xA;                if (units != null &amp;&amp; units.size() &gt; 0) {&#xA;                    for (Unit unit : units) {&#xA;                        refreshUnit(unit);&#xA;                    }&#xA;                    RoadBizUtil.commit();&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    public String refreshUnit(Unit inUnit) {&#xA;&#xA;        if (inUnit != null) {&#xA;            ImpedimentsBean impedimentsBean = inUnit.calculateImpediments(Boolean.TRUE);&#xA;            if (impedimentsBean != null) {&#xA;                Date dateNow = new Date(ArgoUtils.timeNowMillis() + 1);&#xA;                inUnit.updateImpediments(impedimentsBean, dateNow);&#xA;                HibernateApi.getInstance().saveOrUpdate(inUnit);&#xA;            }&#xA;        }&#xA;&#xA;    }&#xA;&#xA;}" />
<digital-asset id="MATGvyMassGateProcess" short-description="MATGvyMassGateProcess" is-pre-deployed="N" groovy-code="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.model.Facility&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.business.reports.DigitalAsset&#xA;import org.apache.poi.ss.usermodel.Cell&#xA;import org.apache.poi.ss.usermodel.Row&#xA;import org.apache.poi.ss.usermodel.Sheet&#xA;import org.apache.poi.ss.usermodel.Workbook&#xA;import org.apache.poi.xssf.usermodel.XSSFWorkbook&#xA;&#xA;public class MATGvyMassGateProcess extends GroovyInjectionBase {&#xA;&#xA;&#xA; &#x9;public String execute(Map inParameters) {&#xA;        GroovyApi groovyApi = new GroovyApi();&#xA;&#x9;  String fileStr = null;&#xA;&#x9;  String fileName = null;&#xA;        boolean transationFailed = false;&#xA;        String emailBody = null;&#xA;        String mediaAssetName = null;&#xA;        String gateId=&quot;&quot;;&#xA;&#x9;  def units = null;&#xA;        groovyApi.sendEmail(&quot;gbabu@matson.com&quot;, &quot;gbabu@matson.com&quot;, &quot;Bulk Transaction &quot;, &quot;before calling ingate&quot;);&#xA;        try{&#xA;            Facility facility = ContextHelper.getThreadFacility();&#xA;            if (facility!= null) {&#xA;                if (&quot;DUT&quot;.equals(facility.getFcyId())) {&#xA;                    mediaAssetName = &quot;DUTMASSINGATE&quot;;&#xA;                    gateId = &quot;DUT_MASSGATE&quot;;&#xA;&#xA;                } else if (&quot;KDK&quot;.equals(facility.getFcyId())) {&#xA;                    mediaAssetName = &quot;KDKMASSINGATE&quot;;&#xA;                    gateId = &quot;KDK_MASSGATE&quot;;&#xA;                }&#xA;            }&#xA;            readBulkIngateMediaAsset(mediaAssetName);&#xA;            groovyApi.sendEmail(&quot;gbabu@matson.com&quot;, &quot;gbabu@matson.com&quot;, &quot;Bulk Transaction &quot;, &quot;after reading units&quot; +dataList + &quot; with size &quot;);&#xA;            if (dataList != null &amp;&amp; dataList.size()&gt;0 ) { //&amp;&amp; bookingList!= null &amp;&amp; bookingList.size() &gt; 0) {&#xA;                for (int i = 0; i &lt; dataList.size(); i++) {&#xA;                    Map&lt;String, String&gt; dataMap = dataList.get(i);&#xA;                    if (dataMap != null &amp;&amp; dataMap.size() &gt; 0) {&#xA;                        bookingNbr = dataMap.get(BOOK) != null ? (noBook.equals(dataMap.get(BOOK)) ? bookingNbr : dataMap.get(BOOK)) : bookingNbr;&#xA;                        String unitId = dataMap.get(UNITID);&#xA;                        String slot = dataMap.get(SLOT);&#xA;                        groovyApi.sendEmail(&quot;gbabu@matson.com&quot;, &quot;gbabu@matson.com&quot;, &quot;Bulk Transaction &quot;, &quot;after reading booking&quot; + bookingNbr);&#xA;                        transationFailed = false;&#xA;                        if (unitId != null &amp;&amp; unitId.length() &gt; 0) {&#xA;                            Equipment equipment = Equipment.findEquipment(unitId);&#xA;                            String tranStatus = &quot;new container not allowed&quot;;&#xA;                            if (equipment != null) {&#xA;                                tranStatus = groovyApi.getGroovyClassInstance(&quot;MATGvySubmitMassTransaction&quot;)&#xA;                                        .doSubmitTransaction(unitId.trim(), bookingNbr.trim(), slot,gateId );&#xA;                            }&#xA;                            if (tranStatus != statusOK) {&#xA;                                //send email&#xA;                                transationFailed = true;&#xA;                                emailBody = &quot;Transaction cannot be created for &quot; + unitId + &quot; with message &quot; + tranStatus;&#xA;                                groovyApi.sendEmail(&quot;gbabu@matson.com&quot;, &quot;gbabu@matson.com&quot;, &quot;Bulk Transaction Failed&quot;, emailBody);&#xA;                            }&#xA;                        }&#xA;                    } else {&#xA;                        emailBody = &quot;Transaction cannot be created as units/bookings cannot be read &quot;;&#xA;                    }&#xA;                }&#xA;            }&#xA;&#xA;           //clearBulkIngateDigitalAsset();&#xA;        }catch(Exception e){&#xA;            groovyApi.sendEmail(&quot;gbabu@matson.com&quot;, &quot;gbabu@matson.com&quot;, &quot;Bulk Transaction Failed&quot;, e.toString());&#xA;        }&#xA;        if (transationFailed){&#xA;            groovyApi.sendEmail(&quot;gbabu@matson.com&quot;, &quot;gbabu@matson.com&quot;, &quot;Bulk Transaction Failed&quot;, emailBody);&#xA;        }&#xA;    }&#xA;&#xA;&#xA;    public void readBulkIngateMediaAsset(String inMediaAssetName)&#xA;    {&#xA;        GroovyApi groovyApi = new GroovyApi();&#xA;        try {&#xA;            groovyApi.sendEmail(&quot;gbabu@matson.com&quot;, &quot;gbabu@matson.com&quot;, &quot;Bulk Transaction Failed&quot;, &quot;trying to find asset&quot;);&#xA;            byte[] bulkIngateData = DigitalAsset.findImage(inMediaAssetName);&#xA;            groovyApi.sendEmail(&quot;gbabu@matson.com&quot;, &quot;gbabu@matson.com&quot;, &quot;Bulk Transaction Failed&quot;, &quot;after finding data&quot;);&#xA;            InputStream inputStream = null;&#xA;            //byte[] b = new byte[bulkIngateData.length];&#xA;&#xA;            inputStream = new ByteArrayInputStream(bulkIngateData);&#xA;            Workbook workBook = new XSSFWorkbook(inputStream);&#xA;            Sheet firstSheet = workBook.getSheetAt(0);&#xA;            Iterator&lt;Row&gt; iterator = firstSheet.iterator();&#xA;&#xA;            while (iterator.hasNext()) {&#xA;                Row nextRow = iterator.next();&#xA;                Iterator&lt;Cell&gt; cellIterator = nextRow.cellIterator();&#xA;                if (nextRow.rowNum &gt; 0) {&#xA;                    Map&lt;String,String&gt; dataMap=new HashMap&lt;String, String&gt;();&#xA;                    while (cellIterator.hasNext()) {&#xA;                        Cell cell = cellIterator.next();&#xA;&#xA;                        switch (cell.getColumnIndex()) {&#xA;                            case 0:&#xA;                                String bookingNbr = getCellValue(cell);&#xA;                                if (bookingNbr != null &amp;&amp; bookingNbr.length()&gt;0) {&#xA;                                    dataMap.put(BOOK, bookingNbr);&#xA;                                } else&#xA;                                {&#xA;                                    dataMap.put(BOOK, noBook);&#xA;                                }&#xA;                                break;&#xA;                            case 1:&#xA;                                dataMap.put(UNITID, getCellValue(cell));&#xA;                                break;&#xA;                            case 2:&#xA;                                dataMap.put(SLOT, getCellValue(cell));&#xA;                                break;&#xA;                        }&#xA;                    }&#xA;                dataList.add(dataMap);&#xA;                }&#xA;            }&#xA;            //workBook.close();&#xA;            inputStream.close();&#xA;        } catch (Exception e) {&#xA;            groovyApi.sendEmail(&quot;gbabu@matson.com&quot;,&quot;gbabu@matson.com&quot;,&quot;Error in reading excel&quot;, e.toString());&#xA;        }&#xA;    }&#xA;&#xA;    private String getCellValue(Cell inCell) {&#xA;        String cellValue = null;&#xA;        if (inCell != null ) {&#xA;           switch (inCell.getCellType()) {&#xA;              case inCell.CELL_TYPE_STRING:&#xA;                cellValue = inCell.getStringCellValue();&#xA;                   break;&#xA;               case inCell.CELL_TYPE_NUMERIC:&#xA;                   int  intValue = (int) inCell.getNumericCellValue();&#xA;                   //if (doubleValue != null &amp;&amp; doubleValue.intValue())&#xA;                    cellValue = intValue;&#xA;                   break;&#xA;               case inCell.CELL_TYPE_BLANK:&#xA;                   break;&#xA;           }&#xA;        }&#xA;    }&#xA;    private String bookingNbr = null;&#xA;    private String statusOK = &quot;OK&quot;;&#xA;    private ArrayList&lt;String&gt; unitList = new ArrayList&lt;String&gt;();&#xA;    private ArrayList&lt;Map&lt;String, String&gt;&gt; dataList = new ArrayList&lt;Map&lt;String, String&gt;&gt;();&#xA;    private ArrayList&lt;String&gt; bookingList = new ArrayList&lt;String&gt;();&#xA;    private ArrayList&lt;String&gt; positionList = new ArrayList&lt;String&gt;();&#xA;    private String noBook = &quot;NOBOOK&quot;;&#xA;    private String BOOK = &quot;BOOK&quot;;&#xA;    private String UNITID = &quot;UNITID&quot;;&#xA;    private String SLOT = &quot;SLOT&quot;;&#xA;}" />
<digital-asset id="MATGvySubmitMassTransaction" short-description="MATGvySubmitMassTransaction" is-pre-deployed="N" groovy-code="package com.matson.tos;&#xA;&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.argo.business.atoms.DataSourceEnum&#xA;import com.navis.argo.business.atoms.FreightKindEnum;&#xA;import com.navis.argo.business.reference.Container;&#xA;import com.navis.argo.business.reference.EquipType&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.portal.*&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.road.RoadField&#xA;import com.navis.road.RoadPropertyKeys;&#xA;import com.navis.road.business.RoadFacade&#xA;import com.navis.road.business.api.RoadManager;&#xA;import com.navis.road.business.atoms.GateLaneClassEnum;&#xA;import com.navis.road.business.atoms.TranStatusEnum&#xA;import com.navis.road.business.atoms.TruckVisitStatusEnum;&#xA;import com.navis.road.business.model.Gate;&#xA;import com.navis.road.business.model.GateLane;&#xA;import com.navis.road.business.model.TruckVisitDetails;&#xA;import com.navis.road.business.model.TruckingCompany&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;&#xA;/**&#xA; * Created by psethuraman on 10/31/2015.&#xA; * api.getGroovyClassInstance(&quot;GvySubmitTransaction&quot;).doSubmitTransaction(&quot;TSTU1122160&quot;, &quot;TSTBKG1&quot;);&#xA; */&#xA;&#xA;/*&#xA;class GroovyHello  {&#xA;    public String execute() {&#xA;        com.navis.argo.business.api.GroovyApi api = new com.navis.argo.business.api.GroovyApi();&#xA;        return api.getGroovyClassInstance(&quot;GvySubmitTransaction&quot;).doSubmitTransaction(&quot;TSTU1122160&quot;, &quot;TSTBKG1&quot;);&#xA;        return &quot;Hello World!&quot;&#xA;    }&#xA;}&#xA;*/&#xA;&#xA;public class MATGvySubmitMassTransaction {&#xA;    String gateId = &quot;KDK_MASSGATE&quot;;&#xA;    String stageId = &quot;outgate&quot;;&#xA;    String laneNbr = &quot;1&quot;;&#xA;    //String ctrNbr;// = &quot;TSTU1122160&quot;;&#xA;    //String bkgNbr = &quot;TSTBKG12&quot;;&#xA;    String trkCo = &quot;APL&quot;;&#xA;    String lineId = &quot;APL&quot;;&#xA;    UserContext userContext = null;&#xA;    RoadFacade roadFacade = null;&#xA;    public String doSubmitTransaction(String inCtrNbr, String inBkgNbr, String inSlot, String inGateId ) throws Exception {&#xA;        try {&#xA;            GroovyApi groovyApi = new GroovyApi();&#xA;            if (inGateId != null) {&#xA;                gateId = inGateId;&#xA;            }&#xA;            roadFacade = (RoadFacade) Roastery.getBean(RoadFacade.BEAN_ID);&#xA;            userContext = ContextHelper.getThreadUserContext();&#xA;            LineOperator lineOperator = LineOperator.findLineOperatorById(lineId);&#xA;            if (inCtrNbr == null) {&#xA;                BizViolation.create(RoadPropertyKeys.GATE__CTR_REQUIRED, null, null);&#xA;            }&#xA;            TruckingCompany truckingCompany = TruckingCompany.findOrCreateTruckingCompany(trkCo);&#xA;            TruckVisitDetails tvd = this.createTruckVisit(gateId, stageId);&#xA;            FieldChanges fields = new FieldChanges();&#xA;            fields.setFieldChange(RoadField.TRAN_CTR_NBR, inCtrNbr);&#xA;            fields.setFieldChange(RoadField.TRAN_SUB_TYPE, &quot;RE&quot;);&#xA;            fields.setFieldChange(RoadField.TRAN_CTR_FREIGHT_KIND, FreightKindEnum.MTY);&#xA;            fields.setFieldChange(RoadField.TRAN_EQO_NBR, inBkgNbr);&#xA;            fields.setFieldChange(RoadField.TRAN_CHS_NBR, &quot;OWN&quot;);&#xA;            fields.setFieldChange(RoadField.TRAN_CHS_IS_OWNERS, Boolean.TRUE);&#xA;&#xA;            fields.setFieldChange(RoadField.TRAN_TRKC_ID, truckingCompany.getBzuId());&#xA;            fields.setFieldChange(RoadField.TRAN_CTR_OWNER, lineOperator);&#xA;            fields.setFieldChange(RoadField.TRAN_STATUS, TranStatusEnum.COMPLETE);&#xA;            if (inSlot!= null &amp;&amp; inSlot.length()&gt;0) {&#xA;                fields.setFieldChange(RoadField.TRAN_FLEX_STRING03, inSlot);&#xA;            }&#xA;            fields.setFieldChange(RoadField.TRAN_TRUCK_VISIT, tvd.getPrimaryKey());&#xA;            fields.setFieldChange(RoadField.TRAN_CREATED, getDate());&#xA;            fields.setFieldChange(RoadField.TRAN_CREATOR, userContext.getUserId());&#xA;            BizRequest req = new BizRequest(userContext);&#xA;            CrudOperation crud = new CrudOperation((Object)null, 1, &quot;TruckTransaction&quot;, fields, (Object[])null);&#xA;            req.addCrudOperation(crud);&#xA;            req.setParameter(RoadField.TRAN_STAGE_ID.getFieldId(), stageId);&#xA;            req.setParameter(RoadField.GATE_ID.getFieldId(), gateId);&#xA;            BizResponse response = new BizResponse();&#xA;            roadFacade.submitTransaction(req, response);&#xA;            groovyApi.sendEmail(&quot;gbabu@matson.com&quot;, &quot;gbabu@matson.com&quot;, &quot;Bulk Transaction &quot;, &quot;after submitting ingate&quot; + response);&#xA;            if (response.getStatus()== &quot;OK&quot;) {&#xA;                tvd.setTvdtlsStatus(TruckVisitStatusEnum.COMPLETE);&#xA;                HibernateApi.getInstance().saveOrUpdate(tvd);&#xA;                RoadBizUtil.commit();&#xA;            }&#xA;            return response.getStatus();&#xA;        } catch (Exception e) {&#xA;            return e;&#xA;        }&#xA;&#xA;        return &quot;ERR&quot;;&#xA;&#xA;    }//doSubmitTransaction Ends&#xA;&#xA;    private Gate findGate(String gateId) {&#xA;        Gate gate = Gate.findGateById(gateId);&#xA;        return gate;&#xA;    }&#xA;&#xA;    private EquipType findOrcreateTranCtrType(String inCtrNbr) {&#xA;        EquipType equipType = Container.findEquipment(inCtrNbr).getEqEquipType();&#xA;        return equipType;&#xA;    }&#xA;    private GateLane findOrCreateGateLane(String inGateId) {&#xA;        GateLane gateLane = GateLane.findOrCreateLane(laneNbr, GateLaneClassEnum.INOUT, this.findGate(inGateId));&#xA;        return gateLane;&#xA;    }&#xA;&#xA;    public static Date getDate() {&#xA;        Calendar cal = Calendar.getInstance();&#xA;        return cal.getTime();&#xA;    }&#xA;&#xA;    private TruckVisitDetails createTruckVisit(String inGateId, String inNextStageId) throws Exception {&#xA;        TruckingCompany tc = TruckingCompany.findOrCreateTruckingCompany(&quot;APL&quot;);&#xA;        Gate gate = this.findGate(inGateId);&#xA;        GateLane gateLane = this.findOrCreateGateLane(inGateId);&#xA;        FieldChanges fields = new FieldChanges();&#xA;        fields.setFieldChange(RoadField.TVDTLS_TRUCK_LICENSE_NBR, &quot;APLMASS&quot;);&#xA;        fields.setFieldChange(RoadField.TVDTLS_DRIVER_LICENSE_NBR, &quot;APLMASS&quot;);&#xA;        fields.setFieldChange(RoadField.TVDTLS_ENTRY_LANE, gateLane.getPrimaryKey());&#xA;        fields.setFieldChange(RoadField.TVDTLS_EXIT_LANE, gateLane.getPrimaryKey());&#xA;        fields.setFieldChange(RoadField.TVDTLS_GATE, gate.getGateGkey());&#xA;        fields.setFieldChange(RoadField.TVDTLS_CREATED, getDate());&#xA;        fields.setFieldChange(RoadField.TVDTLS_CREATOR, userContext.getUserId());&#xA;        fields.setFieldChange(RoadField.TVDTLS_TRK_COMPANY, tc.getBzuGkey());&#xA;        fields.setFieldChange(ArgoField.CVD_DATA_SOURCE, DataSourceEnum.TESTING);&#xA;        BizRequest req = new BizRequest(userContext);&#xA;        CrudOperation crud = new CrudOperation((Object)null, 1, &quot;TruckVisitDetails&quot;, fields, (Object[])null);&#xA;        req.addCrudOperation(crud);&#xA;        req.setParameter(RoadField.GATE_ID.getFieldId(), inGateId);&#xA;        req.setParameter(RoadField.TVDTLS_NEXT_STAGE_ID.getFieldId(), inNextStageId);&#xA;        BizResponse response = new BizResponse();&#xA;        roadFacade.createTruckVisit(req, response);&#xA;//        this.displayResponse(response);&#xA;        TruckVisitDetails tvd = (TruckVisitDetails) HibernateApi.getInstance().get(TruckVisitDetails.class, response.getCreatedPrimaryKey());&#xA;        return tvd;&#xA;    }&#xA;}&#xA;" />
<digital-asset id="MATUpdateClonedUnit" short-description="MATUpdateClonedUnit" is-pre-deployed="N" groovy-code="import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.atoms.CarrierVisitPhaseEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.atoms.ScopeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.model.Facility&#xA;import com.navis.argo.business.model.LocPosition&#xA;import com.navis.argo.business.model.N4EntityScoper&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.argo.portal.context.ArgoUserContextProvider&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.persistence.hibernate.CarinaPersistenceCallback&#xA;import com.navis.framework.persistence.hibernate.PersistenceTemplate&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.context.IUserContextProvider&#xA;import com.navis.framework.portal.context.PortalApplicationContext&#xA;import com.navis.framework.util.TransactionParms&#xA;import com.navis.framework.util.message.MessageCollector&#xA;import com.navis.framework.util.scope.ScopeCoordinates&#xA;import com.navis.inventory.business.api.RectifyParms&#xA;import com.navis.inventory.business.api.UnitManager&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.inventory.business.imdg.HazardItem&#xA;import com.navis.inventory.business.imdg.HazardItemPlacard&#xA;import com.navis.inventory.business.imdg.Hazards&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.ReeferRqmnts&#xA;import com.navis.inventory.business.units.Routing&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.spatial.business.model.Position&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;import org.apache.log4j.Logger&#xA;&#xA;public class MATUpdateClonedUnit {&#xA;&#xA;    public boolean createAndUpdateClonedUnit(Unit inOldUnit, CarrierVisit inCarrierVisit, UnitFacilityVisit inUFV, Facility inNewFacility, UnitFacilityVisit inUFVOldFac) {&#xA;&#xA;        /* rectify the unit to departed */&#xA;        this.log(&quot;DMATUpdateClonedUnit createAndUpdateClonedUnit &quot;);&#xA;        final UserContext userContext = ContextHelper.getThreadUserContext();&#xA;        final UserContext uc = getNewUserContext(inNewFacility);&#xA;        final Unit inUnit = inOldUnit;&#xA;        final Facility inFacility = inNewFacility;&#xA;        final CarrierVisit inCv = inCarrierVisit;&#xA;        final UnitFacilityVisit inExistingUFV = inUFV;&#xA;        final Facility oldFacility = ContextHelper.getThreadFacility();&#xA;        final UnitFacilityVisit inUFVForPrevFacility = inUFVOldFac;&#xA;&#xA;        PersistenceTemplate template = new PersistenceTemplate(uc);&#xA;        MessageCollector mc = template.invoke(new CarinaPersistenceCallback() {&#xA;            @Override&#xA;            protected void doInTransaction() {&#xA;                GroovyApi api = new GroovyApi();&#xA;                try {&#xA;                    TransactionParms.getBoundParms().setUserContext(uc);&#xA;                    this.log(&quot;Cloning UFV: &quot; + inExistingUFV);&#xA;                    /* create a new unit for the vessel */&#xA;                    UnitCategoryEnum newCategory = computeUnitCategory(inUnit.getUnitRouting().getRtgPOD1(), inFacility.getFcyRoutingPoint());&#xA;                    UnitManager unitMgr = (UnitManager) Roastery.getBean(UnitManager.BEAN_ID);&#xA;&#xA;                    UnitFacilityVisit newUfv = unitMgr.findOrCreateStowplanUnit(inUnit.getUnitPrimaryUe().getUeEquipment(),&#xA;                            inCv, inUnit.getUnitLineOperator(), inFacility, null, inUnit.getUnitFreightKind(), newCategory);&#xA;&#xA;                    if (newUfv == null) {&#xA;                        this.log(&quot;New Cloned UFV can't be created&quot;);&#xA;                        return;&#xA;                    }&#xA;&#xA;                    Unit newUnit = newUfv.getUfvUnit();&#xA;&#xA;                    this.log(&quot;New Cloned Unit &quot; + newUnit);&#xA;                    newUnit.updateCategory(newCategory);&#xA;                    newUnit.updateFreightKind(inUnit.getUnitFreightKind());&#xA;                    newUnit.updateRemarks(inUnit.getUnitRemark())&#xA;                    newUnit.updateSeals(inUnit.getUnitSealNbr1(), inUnit.getUnitSealNbr2(), inUnit.getUnitSealNbr3(),&#xA;                            inUnit.getUnitSealNbr4(), inUnit.getUnitIsCtrSealed());&#xA;                    newUnit.updateSpecialStow(inUnit.getUnitSpecialStow());&#xA;                    newUnit.setUnitGoodsAndCtrWtKg(inUnit.getUnitGoodsAndCtrWtKg());&#xA;&#xA;                    CarrierVisit GenTruck = CarrierVisit.getGenericTruckVisit(ContextHelper.getThreadComplex());&#xA;&#xA;                    Routing newRouting = newUnit.getUnitRouting();&#xA;&#xA;                    if (UnitCategoryEnum.IMPORT.equals(newCategory)) {&#xA;                        newRouting.setRtgDeclaredCv(GenTruck);&#xA;                    } else {&#xA;                        newRouting.setRtgDeclaredCv(inCv);&#xA;                    }&#xA;&#xA;&#xA;                    newRouting.setRtgPOL(inUnit.getUnitRouting().getRtgPOL());&#xA;                    newRouting.setRtgCarrierService(inUnit.getUnitRouting().getRtgCarrierService());&#xA;                    newRouting.setRtgPOD1(inUnit.getUnitRouting().getRtgPOD1());&#xA;                    newRouting.setRtgGroup(inUnit.getUnitRouting().getRtgGroup());&#xA;&#xA;                    newUnit.setUnitRouting(newRouting);&#xA;&#xA;                    GoodsBase NewGoodsBase = newUnit.getUnitGoods();&#xA;&#xA;                    GoodsBase ThisGoodsBase = inUnit.getUnitGoods();&#xA;&#xA;                    NewGoodsBase.setCommodity(ThisGoodsBase.getGdsCommodity());&#xA;                    NewGoodsBase.setOrigin(ThisGoodsBase.getGdsOrigin());&#xA;                    NewGoodsBase.setDestination(ThisGoodsBase.getGdsDestination());&#xA;                    NewGoodsBase.setGdsBlNbr(ThisGoodsBase.getGdsBlNbr());&#xA;                    NewGoodsBase.setGdsConsigneeBzu(ThisGoodsBase.getGdsConsigneeBzu());&#xA;                    NewGoodsBase.setGdsShipperBzu(ThisGoodsBase.getGdsShipperBzu());&#xA;&#xA;                    if (ThisGoodsBase.getGdsHazards() != null) {&#xA;                        NewGoodsBase.attachHazards(this.copyhazards(ThisGoodsBase.getGdsHazards()))&#xA;                    }&#xA;&#xA;                    if (inUnit.getUnitRequiresPower()) {&#xA;                        ReeferRqmnts thisGoodsBaseReeferReqs = ThisGoodsBase.getGdsReeferRqmnts();&#xA;                        if (thisGoodsBaseReeferReqs != null) {&#xA;                            NewGoodsBase.setGdsReeferRqmnts(thisGoodsBaseReeferReqs.makeCopy());&#xA;                        }&#xA;                        newUnit.updateRequiresPower(true);&#xA;                    }&#xA;&#xA;                    newUnit.updateOog(inUnit.getUnitOogBackCm(), inUnit.getUnitOogFrontCm(), inUnit.getUnitOogLeftCm(), inUnit.getUnitOogRightCm(), inUnit.getUnitOogTopCm());&#xA;&#xA;                    HibernateApi.getInstance().flush();&#xA;&#xA;                    this.log(&quot;newUnit.getUnitRouting().getRtgDeclaredCv() &quot; + newUnit.getUnitRouting().getRtgDeclaredCv())&#xA;                    this.log(&quot;newUfv.getUfvActualIbCv() &quot; + newUfv.getUfvActualIbCv());&#xA;&#xA;                    VesselVisitDetails newIbVisit = VesselVisitDetails.resolveVvdFromCv(inCv);&#xA;&#xA;                    CarrierVisitPhaseEnum newIbVVPhase = null;&#xA;                    if (newIbVisit != null) {&#xA;                        newIbVVPhase = newIbVisit.getVvdVisitPhase()&#xA;                    }&#xA;&#xA;                    if (CarrierVisitPhaseEnum.CREATED.equals(newIbVVPhase)) {&#xA;                        if (newUfv.getUfvVisitState() != UnitVisitStateEnum.ADVISED)&#xA;                            newUfv.setUfvVisitState(UnitVisitStateEnum.ADVISED);&#xA;&#xA;                        if (newUfv.getUfvTransitState() != UfvTransitStateEnum.S10_ADVISED)&#xA;                            newUfv.setUfvTransitState(UfvTransitStateEnum.S10_ADVISED);&#xA;&#xA;                        if (newUnit.getUnitVisitState() != UnitVisitStateEnum.ADVISED)&#xA;                            newUnit.updateUnitVisitState(UnitVisitStateEnum.ADVISED);&#xA;                    } else {&#xA;                        if (newUfv.getUfvVisitState() != UnitVisitStateEnum.ACTIVE)&#xA;                            newUfv.setUfvVisitState(UnitVisitStateEnum.ACTIVE);&#xA;&#xA;                        if (newUfv.getUfvTransitState() != UfvTransitStateEnum.S20_INBOUND)&#xA;                            newUfv.setUfvTransitState(UfvTransitStateEnum.S20_INBOUND);&#xA;&#xA;                        if (newUnit.getUnitVisitState() != UnitVisitStateEnum.ACTIVE)&#xA;                            newUnit.updateUnitVisitState(UnitVisitStateEnum.ACTIVE);&#xA;&#xA;                        newUfv.setUfvVisibleInSparcs(true);&#xA;                    }&#xA;&#xA;                    Position position = inExistingUFV.getUfvArrivePosition();&#xA;                    if (position != null) {&#xA;                        String slot = position.getPosSlot();&#xA;                        if (slot != null) {&#xA;                            Position newPosition = inCv.createInboundPosition(LocPosition.createVesselPosition(inCv, slot, null));&#xA;                            newUfv.updateArrivePosition(newPosition);&#xA;                            newUfv.setUfvLastKnownPosition(newPosition);&#xA;                        }&#xA;                    }&#xA;                    //newUfv.updateArrivePosition(inExistingUFV.getUfvArrivePosition());&#xA;                    //newUfv.setUfvLastKnownPosition(inExistingUFV.getUfvArrivePosition());&#xA;&#xA;                    if (UnitCategoryEnum.IMPORT.equals(newCategory)) {&#xA;                        newUfv.setUfvIntendedObCv(GenTruck);&#xA;                        newUfv.setUfvActualObCv(GenTruck);&#xA;                        newUfv.setUfvActualIbCv(inCv);&#xA;                    } else {&#xA;                        newUfv.setUfvIntendedObCv(inCv);&#xA;                        newUfv.setUfvActualObCv(inCv);&#xA;                        newUfv.setUfvActualIbCv(inCv);&#xA;                    }&#xA;&#xA;                    newUfv.setUfvFlexString01(inUFVForPrevFacility.getUfvFlexString01());&#xA;                    newUfv.setUfvFlexString05(inUFVForPrevFacility.getUfvFlexString05());&#xA;                    newUfv.setUfvFlexString03(inUFVForPrevFacility.getUfvFlexString03());&#xA;                    newUfv.setUfvFlexString04(inUFVForPrevFacility.getUfvFlexString04());&#xA;                    newUfv.setUfvFlexString02(&quot;CLONED&quot;);&#xA;                    newUfv.setUfvFlexString06(inUFVForPrevFacility.getUfvFlexString06());&#xA;                    newUfv.setUfvFlexString07(inUFVForPrevFacility.getUfvFlexString07());&#xA;                    newUfv.setUfvFlexString08(inUFVForPrevFacility.getUfvFlexString08());&#xA;                    newUfv.setUfvFlexString09(inUFVForPrevFacility.getUfvFlexString09());&#xA;                    newUfv.setUfvFlexString10(inUFVForPrevFacility.getUfvFlexString10());&#xA;                    newUfv.setUfvStowFactor(inUFVForPrevFacility.getUfvStowFactor());&#xA;                    inUnit.deleteUfv(inExistingUFV);&#xA;                    newUnit.setUnitFlexString06(inUnit.getUnitFlexString06());&#xA;                    newUnit.updateDenormalizedFields(true);&#xA;                    newUnit.setUnitActiveUfv(newUfv);&#xA;                    try {&#xA;                        this.log(&quot;Start Updating KQA units : &quot;+newUnit.getUnitGoods().getGdsDestination());&#xA;                        if (newUnit.getUnitGoods() != null &amp;&amp;&#xA;                                (&quot;KQA&quot;.equalsIgnoreCase(newUnit.getUnitGoods().getGdsDestination()) ||&#xA;                                        &quot;AKU&quot;.equalsIgnoreCase(newUnit.getUnitGoods().getGdsDestination()))) {&#xA;                            //                        UnitFacilityVisit ufv = newUnit.getUnitActiveUfvNowActive();&#xA;                            CarrierVisit cv = newUfv.getUfvActualObCv();&#xA;                            this.log(&quot;Updating KQA units : &quot;+newUnit.getUnitId());&#xA;                            if (inFacility != null &amp;&amp; &quot;DUT&quot;.equalsIgnoreCase(inFacility.getFcyId())) {&#xA;                                newUnit.getUnitRouting().setRtgPOD1(RoutingPoint.findRoutingPoint(&quot;KQA&quot;));&#xA;                                CarrierVisit kqaVisit = CarrierVisit.findVesselVisit(Facility.findFacility(&quot;ANK&quot;), &quot;BARGE&quot;);&#xA;                                newUnit.setFieldValue(&quot;unitRouting.rtgDeclaredCv&quot;, kqaVisit);&#xA;                                newUnit.setUnitCategory(UnitCategoryEnum.EXPORT);&#xA;                                newUfv.setFieldValue(&quot;ufvActualObCv&quot;, kqaVisit);&#xA;                                newUfv.setFieldValue(&quot;ufvIntendedObCv&quot;, kqaVisit);&#xA;                            }&#xA;                        }&#xA;                        this.log(&quot;Finished Updating KQA units : &quot;);&#xA;                    } catch (Exception e) {&#xA;                        this.log(&quot;Errored out while updating KQA units in DUT : &quot;+e.getMessage());&#xA;                        e.printStackTrace();&#xA;                    }&#xA;                    RoadBizUtil.commit();&#xA;                } catch (Exception e) {&#xA;                    api.sendEmail(&quot;gbabu@matson.com&quot;,&quot;gbabu@matson.com&quot;,&quot;failed&quot;,&quot;Failed iwth message &quot;+e.toString());&#xA;                    LOGGER.warn(&quot;Exception while cloning unit &quot; + e);&#xA;                }&#xA;            }&#xA;        }&#xA;        );&#xA;        return true;&#xA;    }&#xA;&#xA;&#xA;    public Hazards copyhazards(Hazards inHazards) {&#xA;&#xA;        /* Copy the hazards from the old unit onto the new unit */&#xA;&#xA;        Hazards hazards = Hazards.createHazardsEntity();&#xA;&#xA;        for (Iterator&lt;HazardItem&gt; itr = inHazards.getHazardItemsIterator(); itr.hasNext();) {&#xA;            HazardItem tranHazardItem = itr.next();&#xA;            HazardItem clonedItem = HazardItem.createHazardItemEntity(hazards,&#xA;                    tranHazardItem.getHzrdiImdgClass(), tranHazardItem.getHzrdiUNnum());&#xA;&#xA;            clonedItem.setHzrdiNbrType(tranHazardItem.getHzrdiNbrType());&#xA;            clonedItem.setHzrdiLtdQty(tranHazardItem.getHzrdiLtdQty());&#xA;            clonedItem.setHzrdiPackageType(tranHazardItem.getHzrdiPackageType());&#xA;            clonedItem.setHzrdiInhalationZone(tranHazardItem.getHzrdiInhalationZone());&#xA;            clonedItem.setHzrdiImdgCode(tranHazardItem.getHzrdiImdgCode());&#xA;            clonedItem.setHzrdiExplosiveClass(tranHazardItem.getHzrdiExplosiveClass());&#xA;            clonedItem.setHzrdiPageNumber(tranHazardItem.getHzrdiPageNumber());&#xA;            clonedItem.setHzrdiFlashPoint(tranHazardItem.getHzrdiFlashPoint());&#xA;            clonedItem.setHzrdiTechName(tranHazardItem.getHzrdiTechName());&#xA;            clonedItem.setHzrdiProperName(tranHazardItem.getHzrdiProperName());&#xA;            clonedItem.setHzrdiEMSNumber(tranHazardItem.getHzrdiEMSNumber());&#xA;            clonedItem.setHzrdiERGNumber(tranHazardItem.getHzrdiERGNumber());&#xA;            clonedItem.setHzrdiMFAG(tranHazardItem.getHzrdiMFAG());&#xA;            clonedItem.setHzrdiPackingGroup(tranHazardItem.getHzrdiPackingGroup());&#xA;            clonedItem.setHzrdiHazIdUpper(tranHazardItem.getHzrdiHazIdUpper());&#xA;            clonedItem.setHzrdiSubstanceLower(tranHazardItem.getHzrdiSubstanceLower());&#xA;            clonedItem.setHzrdiWeight(tranHazardItem.getHzrdiWeight());&#xA;            clonedItem.setHzrdiPlannerRef(tranHazardItem.getHzrdiPlannerRef());&#xA;            clonedItem.setHzrdiQuantity(tranHazardItem.getHzrdiQuantity());&#xA;            clonedItem.setHzrdiMoveMethod(tranHazardItem.getHzrdiMoveMethod());&#xA;            clonedItem.setHzrdiSecondaryIMO1(tranHazardItem.getHzrdiSecondaryIMO1());&#xA;            clonedItem.setHzrdiSecondaryIMO2(tranHazardItem.getHzrdiSecondaryIMO2());&#xA;            clonedItem.setHzrdiDeckRestrictions(tranHazardItem.getHzrdiDeckRestrictions());&#xA;            clonedItem.setHzrdiMarinePollutants(tranHazardItem.getHzrdiMarinePollutants());&#xA;            clonedItem.setHzrdiDcLgRef(tranHazardItem.getHzrdiDcLgRef());&#xA;            clonedItem.setHzrdiEmergencyTelephone(tranHazardItem.getHzrdiEmergencyTelephone());&#xA;            clonedItem.setHzrdiNotes(tranHazardItem.getHzrdiNotes());&#xA;            clonedItem.setHzrdiFireCode(tranHazardItem.getHzrdiFireCode());&#xA;            clonedItem.setHzrdiSeq(tranHazardItem.getHzrdiSeq());&#xA;            clonedItem.setHzrdiImdgClass(tranHazardItem.getHzrdiImdgClass());&#xA;&#xA;            Roastery.getHibernateApi().save(clonedItem);&#xA;&#xA;            if (tranHazardItem.getHzrdiPlacardSet() != null) {&#xA;                Set&lt;HazardItemPlacard&gt; clonedPlacardSet = new LinkedHashSet&lt;HazardItemPlacard&gt;();&#xA;                clonedItem.setHzrdiPlacardSet(clonedPlacardSet);&#xA;                for (HazardItemPlacard tranHazardItemPlacard : (Set&lt;HazardItemPlacard&gt;) tranHazardItem.getHzrdiPlacardSet()) {&#xA;                    HazardItemPlacard clonedPlacard = HazardItemPlacard.createHazardItemPlacardEntity(clonedItem);&#xA;                    clonedPlacard.setHzrdipPlacard(tranHazardItemPlacard.getHzrdipPlacard());&#xA;                    clonedPlacard.setHzrdipDescription(tranHazardItemPlacard.getHzrdipDescription());&#xA;                    clonedPlacardSet.add(clonedPlacard);&#xA;                }&#xA;            }&#xA;        }&#xA;        return (hazards);&#xA;    }&#xA;&#xA;    // compute the category for the next Unit, based on the current category of the Unit&#xA;    private UnitCategoryEnum computeUnitCategory(RoutingPoint inUnitPod, RoutingPoint inFacilityRouting) {&#xA;        if (inUnitPod == null || inFacilityRouting == null) {&#xA;            return;&#xA;        }&#xA;        if (inUnitPod.equals(inFacilityRouting)) {&#xA;            return UnitCategoryEnum.IMPORT;&#xA;        } else {&#xA;            return UnitCategoryEnum.THROUGH;&#xA;        }&#xA;    }&#xA;&#xA;    private final void log(String inMsg) {&#xA;        LOGGER.warn(inMsg);&#xA;    }&#xA;&#xA;    private UserContext getNewUserContext(Facility inFacility) {&#xA;        ScopeCoordinates scopeCoordinates = _scoper.getScopeCoordinates(ScopeEnum.YARD, inFacility.getActiveYard().getYrdGkey());&#xA;        UserContext uc = ContextHelper.getThreadUserContext();&#xA;        UserContext newUserContext = _contextProvider.createUserContext(uc.getUserKey(), uc.getUserId(), scopeCoordinates);&#xA;        //set security session id for the user&#xA;        newUserContext.setSecuritySessionId(uc.getSecuritySessionId());&#xA;        return newUserContext;&#xA;    }&#xA;&#xA;    private static final Logger LOGGER = Logger.getLogger(MATUpdateClonedUnit.class);&#xA;&#xA;    private final HibernateApi _hibernateApi = Roastery.getHibernateApi();&#xA;    private final _unitManager = (UnitManager) Roastery.getBean(UnitManager.BEAN_ID);&#xA;    private N4EntityScoper _scoper = (N4EntityScoper) Roastery.getBeanFactory().getBean(N4EntityScoper.BEAN_ID);&#xA;    private ArgoUserContextProvider _contextProvider = (ArgoUserContextProvider) PortalApplicationContext.getBean(IUserContextProvider.BEAN_ID);&#xA;}" />
<digital-asset id="MATPullChsAcc" short-description="MATPullChsAcc" is-pre-deployed="N" groovy-code="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.model.LocPosition&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.business.api.RectifyParms&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.api.UnitManager&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; * This will pull a chassis or accessory into the yard if it is referenced at the outgate and is notavailable in the yard&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 09/14/15&#xA; * JIRA: CSDV-3208&#xA; * SFDC: 144851&#xA; *&#xA; * Modified: Bruno Chiarini&#xA; * Date:     16-Sep-15&#xA; * Remark: modified code to account for case where both chassis and container accessories are present in the out gate.&#xA; */&#xA;&#xA;public class MATPullChsAcc extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot;Execution Started MATPullChsAcc&quot;);&#xA;&#xA;        TruckTransaction ThisTran = inDao.getTran();&#xA;&#xA;        /* get out if no gate transaction is found */&#xA;&#xA;        if (ThisTran == null)&#xA;            return;&#xA;&#xA;        //CONTAINER ACCESSORY&#xA;        String AccID = ThisTran.getTranCtrAccNbr();&#xA;&#xA;        if (AccID != null)&#xA;        {&#xA;            LOGGER.info(&quot;Container AccId: &quot; + AccID);&#xA;            /* see if the accessory exists as a bare unit */&#xA;&#xA;            Unit ThisAccUnit = this.findActiveUnitInYardByID(AccID);&#xA;            LOGGER.info(&quot;Active Unit for AccId: &quot; + ThisAccUnit);&#xA;&#xA;            if (ThisAccUnit == null)&#xA;            {&#xA;&#xA;                Unit ThisCtrUnit = this.findActiveUnitByAcc(AccID);&#xA;                LOGGER.info(&quot;Attached to Active Unit: &quot; + ThisCtrUnit);&#xA;&#xA;                if (ThisCtrUnit == null)&#xA;                {&#xA;&#xA;                    /* there is no unit in the yard that uses this accessory */&#xA;&#xA;                    /* get the equipment record for the accessory. */&#xA;&#xA;                    Equipment ThisAccEq = Equipment.findEquipment(AccID);&#xA;&#xA;                    if (ThisAccEq != null)&#xA;                    {&#xA;                        /* if it exists create a new bare accessory unit in the yard */&#xA;                        LOGGER.info(&quot;Accessory &quot;+ AccID + &quot; found. About to create active unit.&quot;);&#xA;                        UnitManager unitMgr = (UnitManager) Roastery.getBean(UnitManager.BEAN_ID);&#xA;                        LocPosition YardPos = LocPosition.createYardPosition(ContextHelper.getThreadYard(), 'DVRC', null, null, false);&#xA;&#xA;                        UnitFacilityVisit newUfv = unitMgr.createYardBornUnit(ThisAccEq, YardPos, 'Gate Fix It');&#xA;&#xA;                        /* rectify the unit into that yard position */&#xA;&#xA;                        RectifyParms thisRectifyParm = new RectifyParms();&#xA;&#xA;                        thisRectifyParm.setEraseHistory(false);&#xA;                        thisRectifyParm.setUfvTransitState(UfvTransitStateEnum.S40_YARD);&#xA;                        thisRectifyParm.setUnitVisitState(UnitVisitStateEnum.ACTIVE);&#xA;                        thisRectifyParm.setPosition(YardPos);&#xA;&#xA;                        newUfv.rectify(thisRectifyParm);&#xA;&#xA;                        HibernateApi.getInstance().flush();&#xA;                        LOGGER.info(&quot;Active unit for accessory created.&quot;);&#xA;                    }&#xA;                    else&#xA;                        LOGGER.error(&quot;Container Accessory not found.&quot;);&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        //CHASSIS ACCESSORY&#xA;        AccID = ThisTran.getTranChsAccNbr();&#xA;&#xA;        if (AccID != null)&#xA;        {&#xA;            LOGGER.info(&quot;Chassis AccId: &quot; + AccID);&#xA;            /* see if the accessory exists as a bare unit */&#xA;&#xA;            Unit ThisAccUnit = this.findActiveUnitInYardByID(AccID);&#xA;            LOGGER.info(&quot;Active Unit for AccId: &quot; + ThisAccUnit);&#xA;&#xA;            if (ThisAccUnit == null)&#xA;            {&#xA;&#xA;                Unit ThisCtrUnit = this.findActiveUnitByAcc(AccID);&#xA;                LOGGER.info(&quot;Attached to Active Unit: &quot; + ThisCtrUnit);&#xA;&#xA;                if (ThisCtrUnit == null)&#xA;                {&#xA;&#xA;                    /* there is no unit in the yard that uses this accessory */&#xA;&#xA;                    /* get the equipment record for the accessory. */&#xA;&#xA;                    Equipment ThisAccEq = Equipment.findEquipment(AccID);&#xA;&#xA;                    if (ThisAccEq != null)&#xA;                    {&#xA;                        /* if it exists create a new bare accessory unit in the yard */&#xA;                        LOGGER.info(&quot;Accessory &quot;+ AccID + &quot; found. About to create active unit.&quot;);&#xA;                        UnitManager unitMgr = (UnitManager) Roastery.getBean(UnitManager.BEAN_ID);&#xA;                        LocPosition YardPos = LocPosition.createYardPosition(ContextHelper.getThreadYard(), 'DVRC', null, null, false);&#xA;&#xA;                        UnitFacilityVisit newUfv = unitMgr.createYardBornUnit(ThisAccEq, YardPos, 'Gate Fix It');&#xA;&#xA;                        /* rectify the unit into that yard position */&#xA;&#xA;                        RectifyParms thisRectifyParm = new RectifyParms();&#xA;&#xA;                        thisRectifyParm.setEraseHistory(false);&#xA;                        thisRectifyParm.setUfvTransitState(UfvTransitStateEnum.S40_YARD);&#xA;                        thisRectifyParm.setUnitVisitState(UnitVisitStateEnum.ACTIVE);&#xA;                        thisRectifyParm.setPosition(YardPos);&#xA;&#xA;                        newUfv.rectify(thisRectifyParm);&#xA;&#xA;                        HibernateApi.getInstance().flush();&#xA;                        LOGGER.info(&quot;Active unit for accessory created.&quot;);&#xA;                    }&#xA;                    else&#xA;                        LOGGER.error(&quot;Chassis Accessory not found.&quot;);&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;&#xA;        /* process chassis only if a chassis is specified and it is not 'chassis is owners' */&#xA;&#xA;        if (ThisTran.getTranChsNbr() != null &amp;&amp; !ThisTran.getTranChsIsOwners())&#xA;        {&#xA;            String ChsNbr = ThisTran.getTranChsNbr();&#xA;            /* see if the chassis exists as a bare chassis unit */&#xA;&#xA;            Unit ThisChsUnit = this.findActiveUnitInYardByID(ChsNbr);&#xA;&#xA;            if (ThisChsUnit == null)&#xA;            {&#xA;                // no bare chassis, check if no unit has it attached&#xA;&#xA;                Unit ThisCtrUnit = this.findActiveUnitByChs(ChsNbr);&#xA;&#xA;                if (ThisCtrUnit == null)&#xA;                {&#xA;                    /* No bare chassis, and no unit in the yard that uses this chassis */&#xA;&#xA;                    /* get the equipment record for the chassis. */&#xA;&#xA;                    Equipment ThisChsEq = Equipment.findEquipment(ThisTran.getTranChsNbr());&#xA;&#xA;                    if (ThisChsEq != null) {&#xA;                        /* if it exists create a new bare accessory unit in the yard */&#xA;&#xA;                        UnitManager unitMgr = (UnitManager) Roastery.getBean(UnitManager.BEAN_ID);&#xA;                        LocPosition YardPos = LocPosition.createYardPosition(ContextHelper.getThreadYard(), 'DVRC', null, null, false);&#xA;&#xA;                        UnitFacilityVisit newUfv = unitMgr.createYardBornUnit(ThisChsEq, YardPos, 'Gate Fix It');&#xA;&#xA;                        /* rectify the unit into that yard position */&#xA;&#xA;                        RectifyParms thisRectifyParm = new RectifyParms();&#xA;&#xA;                        thisRectifyParm.setEraseHistory(false);&#xA;                        thisRectifyParm.setUfvTransitState(UfvTransitStateEnum.S40_YARD);&#xA;                        thisRectifyParm.setUnitVisitState(UnitVisitStateEnum.ACTIVE);&#xA;                        thisRectifyParm.setPosition(YardPos);&#xA;&#xA;                        newUfv.rectify(thisRectifyParm);&#xA;&#xA;                        HibernateApi.getInstance().flush();&#xA;&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;&#xA;        executeInternal(inDao);&#xA;    }&#xA;&#xA;    /* Local function to find the an active unit in the yard unit by ID */&#xA;&#xA;    private Unit findActiveUnitInYardByID(String chsId)&#xA;&#xA;    {&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_VISIT_STATE,  UnitVisitStateEnum.ACTIVE))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_ID, chsId))&#xA;&#xA;        Unit[] unitList=Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;&#xA;        if(unitList == null || unitList.size()==0)&#xA;        {&#xA;&#xA;            return null;&#xA;&#xA;        }&#xA;&#xA;        return unitList[0];&#xA;    }&#xA;&#xA;    /* Local function to find the an active unit in the yard unit based on the chsid */&#xA;&#xA;    private Unit findActiveUnitByChs(String chsId)&#xA;&#xA;    {&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_VISIT_STATE,  UnitVisitStateEnum.ACTIVE))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_CARRIAGE_UE_EQ_ID, chsId))&#xA;&#xA;        Unit[] unitList=Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;&#xA;        if(unitList == null || unitList.size()==0)&#xA;        {&#xA;&#xA;            return null;&#xA;&#xA;        }&#xA;&#xA;        return unitList[0];&#xA;    }&#xA;&#xA;    /* Local function to find the an active unit in the yard unit based on the chsid */&#xA;&#xA;    private Unit findActiveUnitByAcc(String chsId)&#xA;&#xA;    {&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_VISIT_STATE,  UnitVisitStateEnum.ACTIVE))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_ACRY_EQUIP_IDS, chsId))&#xA;&#xA;        Unit[] unitList=Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;&#xA;        if(unitList == null || unitList.size()==0)&#xA;        {&#xA;&#xA;            return null;&#xA;&#xA;        }&#xA;&#xA;        return unitList[0];&#xA;    }&#xA;&#xA;    private Logger LOGGER = Logger.getLogger(MATPullChsAcc.class);&#xA;}" />
<digital-asset id="MATSetGateCarrierVisit" short-description="MATSetGateCarrierVisit" is-pre-deployed="N" groovy-code="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.util.message.MessageLevel&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitManagerPea&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.model.TruckVisitDetails&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.road.business.model.TruckingCompany&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.road.business.model.TruckVisitDetailsHbr&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;import com.navis.framework.util.DateUtil&#xA;import com.navis.argo.ContextHelper&#xA;&#xA;/**&#xA; * This groovy customizes the carrier visit used in gate transactions&#xA; *&#xA; * Author: Bruno Chiarini&#xA; * Date: 19-Sep-2015&#xA; * JIRA: CDSV-3258&#xA; * SFDC: 145538&#xA; *&#xA; */&#xA;&#xA;public class MATSetGateCarrierVisit extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;    private Logger LOGGER = Logger.getLogger(MATSetGateCarrierVisit.class);&#xA;&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot;MATSetCarrierVisit Execution Started.&quot;);&#xA;&#xA;        /* Execute the built-in logic got the business task. */&#xA;&#xA;        executeInternal(inDao);&#xA;&#xA;        // get current transaction&#xA;        TruckTransaction ThisTran = inDao.getTran();&#xA;        if (ThisTran == null)&#xA;        {&#xA;            LOGGER.error(&quot;Truck Transaction not found!&quot;);&#xA;            return;&#xA;        }&#xA;        //LOGGER.info(&quot;Truck Transaction: &quot; + ThisTran);&#xA;&#xA;        // get transaction's truck visit&#xA;        TruckVisitDetails ThisTruckVisit = ThisTran.getTranTruckVisit();&#xA;        if (ThisTruckVisit == null)&#xA;        {&#xA;            LOGGER.error(&quot;Truck Visit not found!&quot;);&#xA;            return;&#xA;        }&#xA;        //LOGGER.info(&quot;Truck Visit: &quot; + ThisTruckVisit);&#xA;&#xA;        // get truck visit's carrier visit&#xA;        CarrierVisit ThisCV = ThisTruckVisit.getCv(ThisTruckVisit);&#xA;        if (ThisCV == null)&#xA;        {&#xA;            LOGGER.error(&quot;Carrier visit for Truck Visit not found!&quot;);&#xA;            return;&#xA;        }&#xA;&#xA;        Calendar cal = Calendar.getInstance();&#xA;        Date ThisDate = cal.time;&#xA;        String TruckingCoId =  ThisTruckVisit.getTvdtlsTrkCompany().getBzuId();&#xA;        if (TruckingCoId.length() &gt; 10)&#xA;            TruckingCoId = TruckingCoId.substring(0,9);&#xA;&#xA;        ThisCV.updateCvId( TruckingCoId                     //Trucking company id&#xA;            + &quot;-&quot; + ThisDate.format(&quot;ddMMM&quot;, ContextHelper.getThreadFacility().getTimeZone()) );  //Transaction Date&#xA;&#xA;        LOGGER.info(&quot;Carrier id set to: &quot; + ThisCV);&#xA;        LOGGER.info(&quot;MATSetCarrierVisit Execution Ended.&quot;);&#xA;    }&#xA;&#xA;}" />
<digital-asset id="MATDetachChsAcc" short-description="MATDetachChsAcc" is-pre-deployed="N" groovy-code="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import com.navis.road.business.atoms.TranSubTypeEnum&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;import com.navis.inventory.InventoryField&#xA;&#xA;/**&#xA; * This will pull a chassis or accessory out of the yard if the clerk has entered it at the ingate.&#xA; * This allows a chassis to be ingated that was no properly delivered earlier.&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 09/09/15&#xA; * JIRA: CSDV-3208&#xA; * SFDC: 144851&#xA; *&#xA; * -------------------------------------------------------------------------------------------------------------------&#xA; * In RC the accessory id is in the chassis accessory number field. Added code to get this value in case of an RC&#xA; *&#xA; * Author:  Bruno Chiarini&#xA; * Date:    2015-09-18&#xA; *&#xA; */&#xA;&#xA;public class MATDetachChsAcc extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;    private Logger LOGGER = Logger.getLogger(MATDetachChsAcc.class);&#xA;&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot;MATDetachChsAcc Execution Started&quot;);&#xA;&#xA;        TruckTransaction ThisTran = inDao.getTran();&#xA;&#xA;        /* get out if no gate transaction is found */&#xA;&#xA;        if (ThisTran == null)&#xA;            return;&#xA;&#xA;        // One single Accessory field in receive transactions&#xA;        // In RC is Chassis Accessory Number, In all others is Container Accessory Number&#xA;        String AccId;&#xA;        if (ThisTran.getTranSubType() == TranSubTypeEnum.RC)&#xA;            AccId = ThisTran.getTranChsAccNbr();&#xA;        else&#xA;            AccId = ThisTran.getTranCtrAccNbr();&#xA;&#xA;        LOGGER.info(&quot;Accessory Id: &quot; + AccId);&#xA;&#xA;        if (AccId != null)&#xA;        {&#xA;&#xA;            /* see if the accessory exists as a bare unit */&#xA;&#xA;            Unit ThisAccUnit = this.findActiveUnitInYardByID(AccId);&#xA;            LOGGER.info(&quot;Active unit for AccId: &quot; + ThisAccUnit);&#xA;&#xA;&#xA;            if (ThisAccUnit == null)&#xA;            {&#xA;                // It doesn't exist as bare unit, let's check if it's attached to another unit&#xA;&#xA;                Unit ThisCtrUnit = this.findActiveUnitByAcc(AccId);&#xA;                LOGGER.info(&quot;Attached to active unit: &quot; + ThisCtrUnit);&#xA;&#xA;                if (ThisCtrUnit != null)&#xA;                {&#xA;                    /* there is another unit with it as accessory  detach it */&#xA;                    UnitEquipment ThisCtrAccUnitUe = ThisCtrUnit.getAccessoryOnCtr();&#xA;                    UnitEquipment ThisChsAccUnitUe = ThisCtrUnit.getAccessoryOnChs();&#xA;&#xA;                    if (ThisCtrAccUnitUe == null)&#xA;                        //Not on Ctr, must be on Chs&#xA;                        ThisChsAccUnitUe.detach(&quot;Detached by MATDetachChsAcc&quot;);&#xA;                    else if (ThisChsAccUnitUe == null)&#xA;                        //Not on Chs, must be on Ctr&#xA;                        ThisCtrAccUnitUe.detach(&quot;Detached by MATDetachChsAcc&quot;);&#xA;                    else&#xA;                    {&#xA;                        //Chs and Ctr have accessories, check which one to detach based on id&#xA;                        //Can only be one of them, because ingate has only one acc field&#xA;                        LOGGER.info(&quot;CtrUnitUe ID: &quot; + ThisCtrAccUnitUe.getField(InventoryField.UNIT_EQ_ID_FULL));&#xA;                        if (ThisCtrAccUnitUe.getField(InventoryField.UNIT_EQ_ID_FULL) == AccId)&#xA;                            ThisCtrAccUnitUe.detach(&quot;Detached by MATDetachChsAcc&quot;);&#xA;                        else&#xA;                            ThisChsAccUnitUe.detach(&quot;Detached by MATDetachChsAcc&quot;);&#xA;                    }&#xA;&#xA;                    HibernateApi.getInstance().flush();&#xA;&#xA;                    LOGGER.info(&quot;Accessory Detached&quot;);&#xA;                }&#xA;            }&#xA;            &#xA;            /* if there is an accessory in the yard retire it */&#xA;&#xA;            if (ThisAccUnit != null)&#xA;            {&#xA;                ThisAccUnit.makeRetired();&#xA;                HibernateApi.getInstance().flush();&#xA;                LOGGER.info(&quot;Accessory Retired&quot;);&#xA;            }&#xA;        }&#xA;&#xA;        /* process chassis only if a chassis is specified and it is not 'chassis is owners' */&#xA;&#xA;        if (ThisTran.getTranChsNbr() != null &amp;&amp; !ThisTran.getTranChsIsOwners())&#xA;        {&#xA;&#xA;            /* see if the chassis exists as a bare chassis unit */&#xA;&#xA;            Unit ThisChsUnit = this.findActiveUnitInYardByID(ThisTran.getTranChsNbr());&#xA;&#xA;            /* if not see if there is a unit with that chassis as carrier */&#xA;&#xA;            if (ThisChsUnit == null)&#xA;            {&#xA;                Unit ThisCtrUnit = this.findActiveUnitByChs(ThisTran.getTranChsNbr());&#xA;&#xA;                if (ThisCtrUnit != null)&#xA;                {&#xA;&#xA;                    /* there is another unit with it as carrier  detach it */&#xA;&#xA;                    ThisChsUnit = ThisCtrUnit.dismount();&#xA;                    HibernateApi.getInstance().flush();&#xA;                }&#xA;            }&#xA;&#xA;            /* if there is a in the yard retire it */&#xA;&#xA;            if (ThisChsUnit != null)&#xA;&#xA;            {&#xA;                ThisChsUnit.makeRetired();&#xA;                HibernateApi.getInstance().flush();&#xA;            }&#xA;        }&#xA;&#xA;        LOGGER.info(&quot;MATDetachChsAcc Execution Ended&quot;)&#xA;        executeInternal(inDao);&#xA;    }&#xA;&#xA;    /* Local function to find the an active unit in the yard unit by ID */&#xA;&#xA;    private Unit findActiveUnitInYardByID(String chsId)&#xA;&#xA;    {&#xA;        //LOGGER.info(&quot;Finding units&quot;);&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_VISIT_STATE,  UnitVisitStateEnum.ACTIVE))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_ID, chsId))&#xA;&#xA;        Unit[] unitList=Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;        //LOGGER.info(&quot;Found &quot; + unitList.length);&#xA;        //for (int i=0; i&lt; unitList.length; i++)&#xA;        //    LOGGER.info(&quot;ActiveUnitInYardbyAccFound: &quot; + unitList[i]);&#xA;        if(unitList == null || unitList.size()==0)&#xA;        {&#xA;&#xA;            return null;&#xA;&#xA;        }&#xA;&#xA;        return unitList[0];&#xA;    }&#xA;&#xA;    /* Local function to find the an active unit in the yard unit based on the chsid */&#xA;&#xA;    private Unit findActiveUnitByChs(String chsId)&#xA;&#xA;    {&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_VISIT_STATE,  UnitVisitStateEnum.ACTIVE))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_CARRIAGE_UE_EQ_ID, chsId))&#xA;&#xA;        Unit[] unitList=Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;&#xA;        if(unitList == null || unitList.size()==0)&#xA;        {&#xA;&#xA;            return null;&#xA;&#xA;        }&#xA;&#xA;        return unitList[0];&#xA;    }&#xA;&#xA;    /* Local function to find the an active unit in the yard unit based on the chsid */&#xA;&#xA;    private Unit findActiveUnitByAcc(String chsId)&#xA;&#xA;    {&#xA;&#xA;        //LOGGER.info(&quot;Finding units By Acc&quot;);&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_VISIT_STATE,  UnitVisitStateEnum.ACTIVE))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_ACRY_EQUIP_IDS, chsId))&#xA;&#xA;        Unit[] unitList=Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;&#xA;        //LOGGER.info(&quot;Found &quot; + unitList.length);&#xA;        //for (int i=0; i&lt; unitList.length; i++)&#xA;        //    LOGGER.info(&quot;ActiveUnitInYardbyAccFound: &quot; + unitList[i]);&#xA;        if(unitList == null || unitList.size()==0)&#xA;        {&#xA;&#xA;            return null;&#xA;&#xA;        }&#xA;&#xA;        return unitList[0];&#xA;    }&#xA;}" />
<digital-asset id="GvyPodValidationForVesselUnit" short-description="GvyPodValidationForVesselUnit" is-pre-deployed="N" groovy-code="import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.road.business.model.*;&#xA;import java.util.Calendar;&#xA;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.ServicesField;&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.api.EventManager;&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;import com.navis.argo.business.api.ArgoUtils;&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;&#xA;import com.navis.framework.metafields.MetafieldId;&#xA;import com.navis.framework.metafields.MetafieldIdFactory;&#xA;&#xA;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.argo.business.model.Facility;&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import net.sf.jasperreports.engine.JRDataSource;&#xA;import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;&#xA;import com.navis.argo.business.reports.DigitalAsset;&#xA;import java.text.SimpleDateFormat&#xA;import java.text.DateFormat&#xA;import java.util.HashMap&#xA;&#xA;import com.navis.framework.portal.Ordering;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.persistence.Persister;&#xA;import  com.navis.framework.business.Roastery&#xA;import com.navis.argo.ArgoField;&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum;&#xA;import com.navis.argo.business.atoms.FreightKindEnum;&#xA;import com.navis.services.business.rules.EventType;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.api.EventManager&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;&#xA;&#xA;public class GvyPodValidationForVesselUnit extends GroovyInjectionBase {&#xA;&#x9;def inj = new GroovyInjectionBase();&#xA;&#xA;&#x9;public void execute(Map parameters)       {&#xA;&#xA;&#x9;&#x9;log(&quot;inside GvyPodValidationForVesselUnit&quot;);&#xA;&#x9;&#x9;ArrayList unitRptList = new ArrayList();&#xA;&#x9;&#x9;Long facilityGkey = ContextHelper.getThreadFacility().getFcyGkey();&#xA;&#x9;&#x9;log(&quot;Started : GvyPodValidationForVesselUnit&quot; +&quot;facilityGkey--&gt;&quot;+facilityGkey +&quot;id&quot;+ContextHelper.getThreadFacility().getFcyId());&#xA;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;List acctList = null;&#xA;&#x9;&#x9;&#x9;List resultAcctList = new ArrayList();&#xA;&#x9;&#x9;&#x9;def servicesMgr = (ServicesManager)Roastery.getBean(&quot;servicesManager&quot;);&#xA;&#x9;&#x9;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;UnitFacilityVisit&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UFV_FACILITY_ID, ContextHelper.getThreadFacility().getFcyId()))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UFV_ACTUAL_OB_CARRIER_MODE, LocTypeEnum.VESSEL))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UFV_UNIT_VISIT_STATE, UnitVisitStateEnum.ACTIVE))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UFV_TRANSIT_STATE, UfvTransitStateEnum.S40_YARD))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.in(UnitField.UFV_UNIT_CATEGORY, UnitCategoryEnum.EXPORT,UnitCategoryEnum.STORAGE))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;.addDqOrdering(Ordering.desc(InventoryField.UFV_TIME_OF_LAST_MOVE));&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;acctList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#x9;&#x9;&#x9;log(&quot;DomainQuery====&quot;+dq);&#xA;&#xA;&#x9;&#x9;&#x9;if(acctList!=null){&#xA;&#x9;&#x9;&#x9;&#x9;log(&quot;acctList size &quot;+acctList.size());&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;Iterator unitIter =acctList!=null ?acctList.iterator() :null;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;while( unitIter!=null &amp;&amp; unitIter.hasNext()) {&#xA;&#x9;&#x9;&#x9;&#x9;def ufv = unitIter.next();&#xA;&#x9;&#x9;&#x9;&#x9;def unit = ufv!=null ? ufv.ufvUnit :null;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if(unit==null || unit==&quot;&quot;){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;log(&quot; invalid unit found &quot;+unit);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;continue;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;def equiClass =unit.getFieldValue(&quot;unitPrimaryUe.ueEquipment.eqEquipType.eqtypClass&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;equiClass = equiClass != null ? equiClass.getKey() : '';&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;def unitVisitState = unit.getFieldValue(&quot;unitVisitState&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;def unitCategory = unit.getFieldValue(&quot;unitCategory&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;log(&quot;unit &quot;+unit.unitId + &quot; category &quot;+ unitCategory +&quot; state &quot;+ unitVisitState +&quot; equiClass &quot;+equiClass);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if(unitVisitState==null || unitVisitState==&quot;&quot; || unitCategory==null || unitCategory==&quot;&quot; ){&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;log(&quot; found invalid state for unit &quot;+unit.unitId + &quot; category &quot;+unitCategory +&quot; state &quot;+ unitVisitState);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;continue;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if(unit!=null  &amp;&amp; com.navis.inventory.business.atoms.UnitVisitStateEnum.ACTIVE.equals(unitVisitState) &amp;&amp;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;(UnitCategoryEnum.STORAGE.equals(unitCategory)  ||&#x9;UnitCategoryEnum.EXPORT.equals(unitCategory) )  &amp;&amp; 'CONTAINER'.equals(equiClass) ){&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;log(&quot; inside unit &quot;+unit.unitId + &quot; category &quot;+ unitCategory +&quot; state &quot; +unitVisitState);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def intdObCarrierId=unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvId&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;UnitFacilityVisit Unitufv = unit.getUnitActiveUfvNowActive();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CarrierVisit actualObCv =Unitufv!=null &amp;&amp; Unitufv!=&quot;&quot;? Unitufv.getUfvObCv():null;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;log(&quot;actualObCv: &quot;+actualObCv +&quot; intdObCarrierId --&gt;&quot;+intdObCarrierId);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(actualObCv!=null &amp;&amp; actualObCv!=&quot;&quot;){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;final LocTypeEnum carrierMode = actualObCv.getCvCarrierMode();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;log(&quot;carrierMode: &quot;+carrierMode +&quot;unit id &quot;+unit);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (carrierMode!=null &amp;&amp; carrierMode.equals(LocTypeEnum.VESSEL)){&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;def pod= unit.getFieldValue(&quot;unitRouting.rtgPOD1.pointId&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(pod==null || pod==&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;log(&quot;Outbound carrier for unitId: &quot;+unit.unitId + &quot; carrierMode &quot;+carrierMode +&quot;pod--&gt;&quot;+pod  +&quot; visit state &quot;+unitVisitState);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;log(&quot;applying hold for the unit id &quot; +unit.unitId +&quot; carrierMode &quot; +carrierMode +&quot;&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;servicesMgr.applyHold(&quot;PODCHECKFORVESS&quot;, unit, &quot;Applied Hold by PODCHECKFORVESS Hold&quot;, &quot;Applied Hold by PODCHECKFORVESS Hold&quot;, &quot;Applied Hold by PODCHECKFORVESS Hold&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;log(&quot;applied hold for the unit id &quot; +unit.unitId +&quot; carrierMode &quot; +carrierMode +&quot;&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultAcctList.add(unit);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;log(&quot;End GvyPodValidationForVesselUnit updated hold for the number of units &quot;+resultAcctList.size());&#xA;&#xA;&#x9;&#x9;} catch (Exception e){&#xA;&#x9;&#x9;&#x9;log(&quot;Exception in GvyPodValidationForVesselUnit &quot;+e.printStackTrace());&#xA;&#x9;&#x9;&#x9;log(&quot;Exception in GvyPodValidationForVesselUnit &quot;+e.getMessage());&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#xA;&#xA;&#xA;}&#xA;&#xA;" />
<digital-asset id="GvyCmisTxtMsgFormatter" short-description="GvyCmisTxtMsgFormatter" is-pre-deployed="N" groovy-code="/*&#xA;* SrNo       Name       Date             Comments&#xA;*  A1         GR           03/228/09      Updt ReplaceQuotes Method&#xA;*/&#xA;public class GvyCmisTxtMsgFormatter {&#xA;&#xA;  public String doIt(Object attrName,Object attrValue ) &#xA;  {&#xA;     def attrValueFmt = ''&#xA;     def fmtValue = ''&#xA;     try&#xA;    { &#xA;       //Converting value to String&#xA;        attrValue = replaceQuotes(''+attrValue)&#xA; &#xA;        if(attrValue == null || attrValue.trim().length() == 0){&#xA;            attrValueFmt = 'null'&#xA;         }else{&#xA;            attrValueFmt = attrValue  &#xA;         }&#xA;  &#xA;      fmtValue = attrName+'=\''+attrValueFmt+'\' '&#xA;    }catch(Exception e){&#xA;        e.printStackTrace()&#xA;    }&#xA; &#xA;     return fmtValue;&#xA;   }&#xA;&#xA;    public  String replaceQuotes(Object message)&#xA;   {&#xA;     def msg = message.toString();&#xA;     def replaceAmp = msg.replaceAll('&amp;', '&amp;amp;');&#xA;           replaceAmp = replaceAmp.replaceAll('\'', '&amp;apos;');&#xA;           replaceAmp = replaceAmp.replaceAll(&quot;&lt;&quot;, &quot;&amp;lt;&quot;)&#xA;           replaceAmp =  replaceAmp.replaceAll(&quot;&gt;&quot;, &quot;&amp;gt;&quot;)&#xA;           replaceAmp = replaceAmp.replaceAll(&quot;\&quot;&quot;, &quot;&amp;quot;&quot;)&#xA;     return replaceAmp; &#xA;    }&#xA;&#xA;   public String  createGroovyXml(String msgString)&#xA;  {&#xA;     def strBuff = new StringBuffer();&#xA;     strBuff.append( '&lt;GroovyMsg');&#xA;     strBuff.append(' '+msgString);&#xA;     strBuff.append( '/&gt;');&#xA;     return strBuff.toString();&#xA;   }&#xA;&#xA;}//Class Ends" />
<digital-asset id="GvyCmisSendOGSCLS" short-description="GvyCmisSendOGSCLS" is-pre-deployed="N" groovy-code="package com.matson.tos.groovies&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.IServiceEventFieldChange&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.framework.util.ValueObject&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; * Created by kramachandran on 11/14/2016.&#xA; */&#xA;class GvyCmisSendOGSCLS {&#xA;    public static final String CLS_EVENT_TYPE = 'UNIT_LOAD';&#xA;    private static final Logger LOGGER = Logger.getLogger(GvyCmisSendOGSCLS.class);&#xA;&#xA;&#xA;    /**&#xA;     * This method triggers CLS Message for UNIT_LOAD to Client Vessels, here MAE Vessels&#xA;     * @param initialGvyXml Unit_deliver&#xA;     * @param event event&#xA;     * @param api gvyBaseClass&#xA;     * @return CLS xml&#xA;     */&#xA;    public Boolean isProcessCLSOGSMessage(String initialGvyXml, Object event, Object api) {&#xA;        api.log(&quot;START -- processing GvyCmisSendOGSCLS.isProcessCLSOGSMessage&quot;);&#xA;        def unit = event.getEntity()&#xA;        def gvyEventObj = event.getEvent()&#xA;        String eventType = gvyEventObj.getEventTypeId();&#xA;&#xA;        def GvyCmisSrvMsgProcessor = api.getGroovyClassInstance(&quot;GvyCmisSrvMsgProcessor&quot;);&#xA;        Booking booking = null;&#xA;        VesselVisitDetails vvd = null;&#xA;        def vvdOperatorId = null;&#xA;        def bookingEqFlexString01 = null;&#xA;        Boolean inUseSuppliedCvId = Boolean.FALSE;&#xA;        def unitLineOperator = null;&#xA;        def equipmentOwner = null;&#xA;        if (unit != null) {&#xA;            UnitEquipment unitEquipment = unit.getUnitPrimaryUe();&#xA;            EquipmentState ueEquipmentState = unitEquipment.getUeEquipmentState()&#xA;            def equipFlex01 = ueEquipmentState != null ? ueEquipmentState.getEqsFlexString01() : null;&#xA;            unitLineOperator = ueEquipmentState != null ? ueEquipmentState.getEqsEqOperator().getBzuId() : null;&#xA;            equipmentOwner = ueEquipmentState != null ? ueEquipmentState.getEqsEqOwner().getBzuId() : null;&#xA;            bookingEqFlexString01 = equipFlex01;&#xA;        }&#xA;&#xA;        def freightkind = unit.getFieldValue(&quot;unitFreightKind&quot;);&#xA;        def category = unit.getFieldValue(&quot;unitCategory&quot;);&#xA;        category = category != null ? category.getKey() : null;&#xA;        Boolean isCLS = Boolean.FALSE;&#xA;        /**&#xA;         * Only for out by Client Vessels, Bookings are Available, so pull all the information from Event&#xA;         *&#xA;         */&#xA;        api.log(&quot;eventType &quot; + eventType);&#xA;        api.log(&quot;category  &quot; + category);&#xA;        if (eventType != null &amp;&amp; category != null &amp;&amp; CLS_EVENT_TYPE.equalsIgnoreCase(eventType)&#xA;                &amp;&amp; ('EXPRT'.equals(category))) {&#xA;            api.log(&quot;Inside if loop &quot;);&#xA;            Boolean isProcessFurther = Boolean.FALSE;&#xA;            try {&#xA;                def outboundCarrierOperator = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvOperator.bzuId&quot;);&#xA;                api.log(&quot;outboundCarrierOperator    &quot;+outboundCarrierOperator);&#xA;                def cvdGkey = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvdGkey&quot;);&#xA;                api.log(&quot;cvdGkey    &quot;+cvdGkey);&#xA;                CarrierVisit cv = CarrierVisit.loadByGkey(cvdGkey);&#xA;                api.log(&quot;cv &quot;+cv);&#xA;                //vvd = unit.getOutboundCv().getCvCvd();&#xA;                //api.log(&quot;VVD   &quot; + vvd);&#xA;                vvdOperatorId = outboundCarrierOperator;&#xA;                //vvdOperatorId = vvd != null ? vvd.getCarrierOperator().getBzuId() : null;&#xA;                //api.log(&quot;VVD Operator ID   &quot; + vvdOperatorId);&#xA;                def eqboNbr = unit.getFieldValue(&quot;unitPrimaryUe.ueDepartureOrderItem.eqboiOrder.eqboNbr&quot;);//unit.getUnitPrimaryUe().getUeDepartureOrderItem().getEqboiOrder().getEqboNbr();&#xA;                api.log(&quot;eqboNbr   &quot; + eqboNbr);&#xA;                ScopedBizUnit sb = ScopedBizUnit.findScopedBizUnit(outboundCarrierOperator,BizRoleEnum.LINEOP);&#xA;                booking = Booking.findBooking(eqboNbr, sb, cv);&#xA;                api.log(&quot;Booking   &quot; + booking);&#xA;                if (booking == null) {&#xA;                    try {&#xA;                        booking = Booking.findBookingWithoutLine(eqboNbr, cv);&#xA;                    } catch (Exception e) {&#xA;                        api.log(&quot;Couldnt find the booking with eqboNbr and Visit&quot;+e.getMessage());&#xA;                    }&#xA;                }&#xA;                if (booking == null) {&#xA;                    try {&#xA;                        List&lt;Booking&gt; bookingList = Booking.findBookingsByNbr(eqboNbr);&#xA;                        booking = bookingList.get(0);&#xA;                    } catch (Exception e) {&#xA;                        api.log(&quot;Couldnt find the booking only with eqboNbr&quot;+e.getMessage());&#xA;                    }&#xA;                }&#xA;&#xA;                //booking = unit.GvyCmisSrvMsgProcessor.findBookingFromEventChanges(event.getEvent(), unit);&#xA;                api.log(&quot;Booking from Unit Object : &quot; + booking);&#xA;                if (booking != null) {&#xA;                    bookingEqFlexString01 = booking.getEqoVesselVisit().getCarrierOperator().getBzuId() != null ? ('MAT'.equals(booking.getEqoVesselVisit().getCarrierOperator().getBzuId()) ? 'MAT' : 'CLI') : 'CLI';&#xA;                    api.log(&quot;bookingEqFlexString01 &quot;+bookingEqFlexString01);&#xA;                    vvd = VesselVisitDetails.resolveVvdFromCv(booking.getEqoVesselVisit());&#xA;                    if (vvd != null) {&#xA;                        vvdOperatorId = vvd.getCarrierOperator().getBzuId();&#xA;                        isProcessFurther = Boolean.TRUE;&#xA;                        api.log(&quot;isProcessFurther  &quot;+isProcessFurther);&#xA;                    }&#xA;                }&#xA;            } catch (Exception e) {&#xA;                api.log(&quot;Error in Processing Data for isProcessCLSOGSMessage    &quot;+e.getMessage())&#xA;            }&#xA;&#xA;            if (isProcessFurther) {&#xA;                api.log(&quot;bookingEqFlexString01  &quot;+bookingEqFlexString01);&#xA;                api.log(&quot;vvdOperatorId  &quot;+vvdOperatorId);&#xA;                api.log(&quot;equipmentOwner &quot;+equipmentOwner);&#xA;                api.log(&quot;unitLineOperator   &quot;+unitLineOperator);&#xA;                if (bookingEqFlexString01 != null &amp;&amp; 'CLI'.equals(bookingEqFlexString01)&#xA;                        &amp;&amp; vvdOperatorId != null &amp;&amp; !'MAT'.equals(vvdOperatorId)) {&#xA;                    if ('MAE'.equals(vvdOperatorId)&#xA;                            &amp;&amp; equipmentOwner != null &amp;&amp; ('MAE'.equals(equipmentOwner) || ('MAEU'.equals(equipmentOwner)))) {&#xA;                        def facilityId = unit.getFieldValue(&quot;unitActiveUfv.ufvFacility.fcyId&quot;)&#xA;                        facilityId = facilityId != null ? facilityId : ''&#xA;                        if (facilityId.equalsIgnoreCase('ANK') || facilityId.equalsIgnoreCase('DUT') || facilityId.equalsIgnoreCase('KDK')) {&#xA;                            isCLS = Boolean.TRUE;&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;        //isCLS = Boolean.TRUE;&#xA;        if (isCLS) {            &#xA;            api.sendXml(getCLSMessage(initialGvyXml, event, api));&#xA;            Thread.sleep(30000L);&#xA;            api.sendXml(getOGSMessage(initialGvyXml, event, api));&#xA;        }&#xA;        return isCLS;&#xA;    }&#xA;    /**&#xA;     * &lt;p&gt;Send CLS Message&lt;/p&gt;&#xA;     * @param initialGvyXml&#xA;     * @param event&#xA;     * @param api&#xA;     * @return&#xA;     */&#xA;    public String getCLSMessage(String xmlGvyString, Object event, Object api) {&#xA;        def gvyCmisUtil = api.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;        xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;msgType=&quot;, &quot;RETURN_TO_CUSTOMER_ASSIGN&quot;);&#xA;        xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;action=&quot;, &quot;CLS&quot;);&#xA;        xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;lastAction=&quot;, &quot;CLS&quot;);&#xA;        xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;srv=&quot;, &quot;MAT&quot;);&#xA;        xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;locationStatus=&quot;, &quot;A&quot;);&#xA;        xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;comments=&quot;,&quot;This unit will be departed in MAE vessel&quot;);&#xA;        api.log(&quot;XML Message &#x9;&quot; + xmlGvyString);&#xA;        return xmlGvyString;&#xA;    }&#xA;    /**&#xA;     * &lt;p&gt;Send 'OGS' Message&lt;/p&gt;&#xA;     * @param initialGvyXml&#xA;     * @param event&#xA;     * @param api&#xA;     * @return&#xA;     */&#xA;    public String getOGSMessage(String xmlGvyString, Object event, Object api) {&#xA;        def gvyCmisUtil = api.getGroovyClassInstance(&quot;GvyCmisUtil&quot;);&#xA;        xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;msgType=&quot;, &quot;RETURN_TO_CUSTOMER_ASSIGN&quot;);&#xA;        xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;action=&quot;, &quot;OGS&quot;);&#xA;        xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;lastAction=&quot;, &quot;OGS&quot;);&#xA;        xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;srv=&quot;, &quot;MAT&quot;);&#xA;        xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString, &quot;locationStatus=&quot;, &quot;A&quot;);&#xA;        xmlGvyString = gvyCmisUtil.eventSpecificFieldValue(xmlGvyString,&quot;comments=&quot;,&quot;This unit will be departed in MAE vessel&quot;);&#xA;        api.log(&quot;XML Message &#x9;&quot; + xmlGvyString);&#xA;        return xmlGvyString;&#xA;    }&#xA;&#xA;    public LocTypeEnum getActualObCvMode(Event event, Unit ThisUnit) {&#xA;        Booking booking = null;&#xA;        Iterator fcIt = event.getFieldChanges().iterator();&#xA;        String eqboNbr = null;&#xA;        String eqboObActualVisit = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv&quot;);&#xA;        String eqboObIntendedVisit = unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv&quot;);&#xA;        String actualObVisitMode = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCarrierMode&quot;);&#xA;        String intentedObVisitMode = unit.getFieldValue(&quot;unitActiveUfv.ufvIntendedObCv.cvCarrierMode&quot;);&#xA;        while (fcIt.hasNext()) {&#xA;            IServiceEventFieldChange fc = (IServiceEventFieldChange) fcIt.next();&#xA;            ValueObject fcVao = new ValueObject(&quot;IServiceEventFieldChange&quot;);&#xA;            MetafieldId metafieldId = MetafieldIdFactory.valueOf(fc.getMetafieldId());&#xA;            /*fcVao.setFieldValue(ArgoBizMetafield.EVENT_FIELD_CHANGE_METAFIELD_ID, metafieldId);&#xA;            fcVao.setFieldValue(ArgoBizMetafield.EVENT_FIELD_CHANGE_PREV_VALUE, ThisEvent.getFieldChangeValue(metafieldId, fc.getPrevVal()));&#xA;            fcVao.setFieldValue(ArgoBizMetafield.EVENT_FIELD_CHANGE_NEW_VALUE, ThisEvent.getFieldChangeValue(metafieldId, fc.getNewVal()));*/&#xA;            this.log(&quot;Field : &quot; + metafieldId.toString());&#xA;            this.log(&quot;Prev Value : &quot; + event.getFieldChangeValue(metafieldId, fc.getPrevVal()).toString());&#xA;            this.log(&quot;New Value  : &quot; + event.getFieldChangeValue(metafieldId, fc.getNewVal()).toString());&#xA;&#xA;            /*if (InventoryField.EQBO_NBR.equals(metafieldId)) {&#xA;                eqboNbr = event.getFieldChangeValue(metafieldId, fc.getNewVal()).toString();&#xA;            }*/&#xA;            if (InventoryField.UFV_ACTUAL_OB_CV.equals(metafieldId)) {&#xA;                eqboObActualVisit = event.getFieldChangeValue(metafieldId, fc.getNewVal()).toString();&#xA;            }&#xA;            if (InventoryField.UFV_INTENDED_OB_CV.equals(metafieldId)) {&#xA;                eqboObIntendedVisit = event.getFieldChangeValue(metafieldId, fc.getNewVal()).toString();&#xA;            }&#xA;        }&#xA;        if (actualObVisitMode == null) {&#xA;            actualObVisitMode = intentedObVisitMode;&#xA;        }&#xA;&#xA;        if (eqboObActualVisit == null) {&#xA;            eqboObActualVisit = eqboObIntendedVisit;&#xA;        }&#xA;        if (actualObVisitMode == null) {&#xA;            return LocTypeEnum.getEnum(actualObVisitMode);&#xA;        }&#xA;&#xA;        if (eqboObActualVisit != null) {&#xA;            // By Truck&#xA;            CarrierVisit cv = null;&#xA;            Boolean isTryByBarge = Boolean.FALSE;&#xA;            Boolean isByTruck = Boolean.FALSE;&#xA;            Boolean isByBarge = Boolean.FALSE;&#xA;            try {&#xA;                cv = CarrierVisit.findCarrierVisit(ContextHelper.getThreadFacility(), LocTypeEnum.TRUCK, eqboObActualVisit);&#xA;                if (cv == null) {&#xA;                    //try Barge&#xA;                    isTryByBarge = Boolean.TRUE;&#xA;                } else&#xA;                    isByTruck = Boolean.TRUE;&#xA;            } catch (Exception ex) {&#xA;&#xA;            }&#xA;            // if try brage flag&#xA;            if (isTryByBarge) {&#xA;                try {&#xA;                    cv = CarrierVisit.findCarrierVisit(ContextHelper.getThreadFacility(), LocTypeEnum.VESSEL, eqboObActualVisit);&#xA;                    if (cv != null) {&#xA;                        isByBarge = Boolean.TRUE;&#xA;                    }&#xA;                } catch (Exception ex) {&#xA;&#xA;                }&#xA;            }&#xA;&#xA;            if (isByBarge) {&#xA;                return LocTypeEnum.VESSEL;&#xA;            } else if (isByTruck) {&#xA;                return LocTypeEnum.TRUCK;&#xA;            } else&#xA;                return LocTypeEnum.UNKNOWN;&#xA;        }&#xA;        /*if (eqboNbr != null &amp;&amp; eqboObActualVisit != null) {&#xA;            this.log(&quot;eqboNBR : &quot; + eqboNbr + &quot; // eqboVisit : &quot; + eqboObActualVisit);&#xA;&#xA;            booking = Booking.findBooking(eqboNbr, ThisUnit.getUnitLineOperator(), cv);&#xA;            if (booking == null) {&#xA;                try {&#xA;                    booking = Booking.findBookingWithoutLine(eqboNbr, cv);&#xA;                } catch (Exception e) {&#xA;                    this.log(&quot;Couldnt find the booking with eqboNbr and Visit&quot;)&#xA;                }&#xA;            }&#xA;            if (booking == null) {&#xA;                try {&#xA;                    booking = Booking.findBookingsByNbr(eqboNbr);&#xA;                } catch (Exception e) {&#xA;                    this.log(&quot;Couldnt find the booking only with eqboNbr&quot;)&#xA;                }&#xA;            }&#xA;        }&#xA;        return booking;*/&#xA;    }&#xA;}" />
</argo:snx>

