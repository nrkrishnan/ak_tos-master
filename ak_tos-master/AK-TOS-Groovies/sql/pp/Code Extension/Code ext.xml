<?xml version="1.0" encoding="UTF-8"?>
<argo:snx xmlns:argo="http://www.navis.com/argo" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.navis.com/argo snx.xsd">
<extension name="TbdUnitLoadValidationSample" type="INV_TBD_UNIT_VALIDATION_MERGE" language="GROOVY" is-enabled="Y" contents="/*&#xD;&#xA; * Copyright (c) 2010 Zebra Technologies Corp. All Rights Reserved.&#xD;&#xA; * $Id: $&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;import com.navis.argo.business.reference.Equipment&#xD;&#xA;import com.navis.inventory.business.units.*&#xD;&#xA;import com.navis.inventory.external.inventory.AbstractTbdUnitValidationMerge&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * This is a sample Groovy Plug-in which illustrates how one could intercept and validate a TBD Unit load&#xD;&#xA; * by a hatch clerk and add to or replace the built-in product validations.&#xD;&#xA; * NOTE: This groovy should be copied and renamed as &quot;TbdUnitValidationMerge&quot; when used in Code Extensions&#xD;&#xA; * @author &lt;a href=&quot;mailto:ssampath@zebra.com&quot;&gt;Sumitha Sampath&lt;/a&gt;&#xD;&#xA; * @author &lt;a href=&quot;mailto:milind.padhye@navis.com&quot;&gt;Milind Padhye&lt;/a&gt;&#xD;&#xA; */&#xD;&#xA;public class TbdUnitLoadValidationSample extends AbstractTbdUnitValidationMerge&#xD;&#xA;{&#xD;&#xA;&#xD;&#xA;  /*&#xD;&#xA;  In this example, we want to do all the built-in validations but further add the condition that unit should not be damaged.&#xD;&#xA;   */&#xD;&#xA;  public void performVesselLoadValidations(TbdUnitLoadValidator inValidator, Map inArgs) {&#xD;&#xA;    logMsg(&quot;Groovy: performVesselLoadValidations started!&quot;);&#xD;&#xA;&#xD;&#xA;    UnitFacilityVisit ufv = inValidator.getUfv();&#xD;&#xA;    if(ufv == null) {&#xD;&#xA;      registerError(&quot;Excepted to receive a valid instance of UnitFacilityVisit in performVesselValidations&quot;);&#xD;&#xA;      logMsg(&quot;Done performVesselLoadValidations with Exceptions&quot;);&#xD;&#xA;      return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    TbdUnit tbdu = inValidator.getTbdUnit();&#xD;&#xA;    if(tbdu == null) {&#xD;&#xA;      registerError(&quot;Excepted to receive a valid instance of TbdUnit in performVesselValidations&quot;);&#xD;&#xA;      logMsg(&quot;Done performVesselLoadValidations with Exceptions&quot;);&#xD;&#xA;      return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    Unit unit = inValidator.getUfvUnit();&#xD;&#xA;    UnitEquipment unitEquip = inValidator.getUfvUnitEquipment();&#xD;&#xA;    Equipment equip = unitEquip.getUeEquipment();&#xD;&#xA;    UnitEquipDamages damages = unit.getDamages(equip);&#xD;&#xA;    if(damages != null) {&#xD;&#xA;      registerError(&quot;TBD Validation failed: Equipment is Damaged&quot;);&#xD;&#xA;      logMsg(&quot;Done performVesselLoadValidations with Exceptions&quot;);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    //do built-in validations&#xD;&#xA;    super.performVesselLoadValidations(inValidator, inArgs);&#xD;&#xA;&#xD;&#xA;    logMsg(&quot;Groovy: performVesselLoadValidations Done!&quot;);&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  @Override&#xD;&#xA;  /*&#xD;&#xA;  In this method, we want to do all the built-in validations but further add the condition that unit should not be damaged during rail load operation&#xD;&#xA;   */&#xD;&#xA;  void performRailLoadValidations(TbdUnitLoadValidator inValidator, Map inArgs) {&#xD;&#xA;    logMsg(&quot;Groovy: performRailLoadValidations started!&quot;);&#xD;&#xA;&#xD;&#xA;    UnitFacilityVisit ufv = inValidator.getUfv();&#xD;&#xA;    if(ufv == null) {&#xD;&#xA;      registerError(&quot;Excepted to receive a valid instance of UnitFacilityVisit in performRailValidations&quot;);&#xD;&#xA;      logMsg(&quot;Done performRailLoadValidations with Exceptions&quot;);&#xD;&#xA;      return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    TbdUnit tbdu = inValidator.getTbdUnit();&#xD;&#xA;    if(tbdu == null) {&#xD;&#xA;      registerError(&quot;Excepted to receive a valid instance of TbdUnit in performRailValidations&quot;);&#xD;&#xA;      logMsg(&quot;Done performRailLoadValidations with Exceptions&quot;);&#xD;&#xA;      return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    Unit unit = inValidator.getUfvUnit();&#xD;&#xA;    UnitEquipment unitEquip = inValidator.getUfvUnitEquipment();&#xD;&#xA;    Equipment equip = unitEquip.getUeEquipment();&#xD;&#xA;    UnitEquipDamages damages = unit.getDamages(equip);&#xD;&#xA;    if(damages != null) {&#xD;&#xA;      registerError(&quot;TBD Validation failed: Equipment is Damaged&quot;);&#xD;&#xA;      logMsg(&quot;Done performRailLoadValidations with Exceptions&quot;);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    //do built-in validations&#xD;&#xA;    super.performRailLoadValidations(inValidator, inArgs);&#xD;&#xA;&#xD;&#xA;    logMsg(&quot;Groovy: performRailLoadValidations Done!&quot;);&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  /**&#xD;&#xA;   * If True, Carry underway move stage WIs are allowed for TBD merge.&#xD;&#xA;   * If False, Carry underway move stage WIs are not allowed for TBD merge.&#xD;&#xA;   * @return boolean&#xD;&#xA;   */&#xD;&#xA;  @Override&#xD;&#xA;  public boolean performValidationToVesselLoadAtCarryUnderwayStage() {&#xD;&#xA;    return true;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  private void logMsg(String inMsg) {&#xD;&#xA;    log(inMsg);&#xD;&#xA;    System.out.println(inMsg);&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;" />
<extension name="JobListValidationHandlerSample" type="INV_JOB_LIST_VALIDATOR_HANDLER" language="GROOVY" is-enabled="Y" contents="/*&#xD;&#xA; * Copyright (c) 2012 Navis LLC. All Rights Reserved.&#xD;&#xA; *&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;package extension.system&#xD;&#xA;import com.navis.argo.ArgoEntity&#xD;&#xA;import com.navis.argo.ArgoField&#xD;&#xA;import com.navis.argo.business.atoms.WiMoveKindEnum&#xD;&#xA;import com.navis.argo.business.atoms.WiMoveStageEnum&#xD;&#xA;import com.navis.argo.business.xps.model.WorkAssignment&#xD;&#xA;import com.navis.framework.metafields.MetafieldId&#xD;&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xD;&#xA;import com.navis.framework.metafields.entity.EntityId&#xD;&#xA;import com.navis.framework.metafields.entity.EntityIdFactory&#xD;&#xA;import com.navis.framework.persistence.HibernateApi&#xD;&#xA;import com.navis.framework.portal.QueryUtils&#xD;&#xA;import com.navis.framework.portal.query.DomainQuery&#xD;&#xA;import com.navis.framework.portal.query.JoinType&#xD;&#xA;import com.navis.framework.portal.query.PredicateFactory&#xD;&#xA;import com.navis.framework.query.common.api.QueryResult&#xD;&#xA;import com.navis.inventory.InventoryEntity&#xD;&#xA;import com.navis.inventory.InventoryField&#xD;&#xA;import com.navis.inventory.MovesEntity&#xD;&#xA;import com.navis.inventory.MovesField&#xD;&#xA;import com.navis.inventory.business.atoms.WiEcStateEnum&#xD;&#xA;import com.navis.inventory.business.atoms.WiSuspendStateEnum&#xD;&#xA;import com.navis.inventory.business.moves.WorkInstruction&#xD;&#xA;import com.navis.inventory.business.moves.WorkQueue&#xD;&#xA;import com.navis.inventory.external.inventory.AbstractJobListValidator&#xD;&#xA;import com.navis.inventory.web.IYardInventoryConstants&#xD;&#xA;/**&#xD;&#xA; * Created with IntelliJ IDEA.&#xD;&#xA; * User: azharad&#xD;&#xA; * Date: 7/2/12&#xD;&#xA; * Time: 5:09 PM&#xD;&#xA; * To change this template use File | Settings | File Templates.&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;public class JobListValidationHandlerSample extends AbstractJobListValidator {&#xD;&#xA;&#xD;&#xA;  /*&#xD;&#xA;    In this example, we will extract WorkInstruction but want to do all the built-in filter&#xD;&#xA;  */&#xD;&#xA;&#xD;&#xA;  public void filterJobList(final Map inJobListData) {&#xD;&#xA;&#xD;&#xA;    logMsg(&quot;Groovy: filterJobList started!&quot;);&#xD;&#xA;    Map cheHolder = (HashMap) inJobListData.get(&quot;CHE_HOLDER&quot;);&#xD;&#xA;    List&lt;WorkInstruction&gt; jobListData = (LinkedList&lt;WorkInstruction&gt;) inJobListData.get(&quot;JOB_LIST&quot;);&#xD;&#xA;    computeChesJobList(cheHolder, jobListData);&#xD;&#xA;&#xD;&#xA;    logMsg(&quot;Groovy: filterJobList Done!&quot;);&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  private void computeChesJobList(Map inCheMap, List&lt;WorkInstruction&gt; inJobList) {&#xD;&#xA;&#xD;&#xA;    List&lt;WorkInstruction&gt; allFetchableWI = findExecutableWIs(inCheMap);&#xD;&#xA;&#xD;&#xA;    // Further refine the Work Instrunction with the remaining criteria...&#xD;&#xA;    for (WorkInstruction workInstruction : allFetchableWI) {&#xD;&#xA;      if (!workInstruction.isMarkedForFetch()) {&#xD;&#xA;        logMsg(&quot;...rejecting work instruction not marked for fetch %s&quot; + workInstruction.getWiEcStateFetch());&#xD;&#xA;        continue;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      final WiMoveStageEnum moveStage = workInstruction.getWiMoveStage();&#xD;&#xA;      if (moveStage == null) {&#xD;&#xA;        logMsg(&quot;...rejecting move stage not defined&quot; + workInstruction.toString());&#xD;&#xA;        continue;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      // restrict to WIs that are in appropriate move stage&#xD;&#xA;      if (isWrongMoveStage(moveStage, workInstruction.getWiMoveKind())) {&#xD;&#xA;        logMsg(&quot;...rejecting move stage %s is not appropriate&quot; + moveStage);&#xD;&#xA;        continue;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      //restrict WIs that has non active Work Queues&#xD;&#xA;      final Serializable yardGkey = workInstruction.getWiUyv().getUyvYard().getYrdGkey();&#xD;&#xA;      WorkQueue workQueue = WorkQueue.findByPkey(yardGkey, workInstruction.getWiWqPkey());&#xD;&#xA;      if (workQueue == null || !workQueue.getWqIsBlue()) {&#xD;&#xA;        logMsg(&quot;...rejecting work instruction has no work queue or work queue is not active&quot;);&#xD;&#xA;        continue;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      // restrict to WIs that are not part of a currently being executed WA (rejected and completed WIs should be included)&#xD;&#xA;      Long cheGkey = (Long) inCheMap.get(ArgoField.CHE_GKEY);&#xD;&#xA;      Long cheId = (Long) inCheMap.get(ArgoField.CHE_ID);&#xD;&#xA;      if (isNotWiExecutingWA(yardGkey, workInstruction,&#xD;&#xA;              workInstruction.getWiCheWorkAssignmentPkey(), cheGkey)) {&#xD;&#xA;        // Remove this WI since it is part of an executing WA... {&#xD;&#xA;        logMsg(&quot;...rejecting work assignment not associated and executed by che &quot; + cheId);&#xD;&#xA;        continue;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      // restrict to first non-completed WI for a unit (container/tbdUnit)&#xD;&#xA;      if (!isWiFirstForUnit(workInstruction)) {&#xD;&#xA;        logMsg(&quot;...Must be first non-completed WI for the target Unit&quot;);&#xD;&#xA;        continue;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      // any containers that this CHE has set aside should be on the job list - JPS 08.30.01&#xD;&#xA;      if (workInstruction.getWiIsBeingRehandled() &amp;&amp;&#xD;&#xA;              workInstruction.getWiIntendedCheIndex().equals((Long) inCheMap.get(ArgoField.CHE_ID))) {&#xD;&#xA;        logMsg(&quot;...added che has set it aside and it is being rehandled&quot;);&#xD;&#xA;      }&#xD;&#xA;      inJobList.add(workInstruction);&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  private static boolean isWrongMoveStage(final WiMoveStageEnum inMoveStageEnum,&#xD;&#xA;                                          final WiMoveKindEnum inMoveKindEnum) {&#xD;&#xA;    if (inMoveKindEnum.equals(WiMoveKindEnum.RailDisch)) {&#xD;&#xA;      return !(inMoveStageEnum.equals(WiMoveStageEnum.PLANNED));&#xD;&#xA;    } else {&#xD;&#xA;      return (inMoveStageEnum.equals(WiMoveStageEnum.NONE) ||&#xD;&#xA;              inMoveStageEnum.equals(WiMoveStageEnum.PUT_UNDERWAY) ||&#xD;&#xA;              inMoveStageEnum.equals(WiMoveStageEnum.PUT_COMPLETE) ||&#xD;&#xA;              inMoveStageEnum.equals(WiMoveStageEnum.COMPLETE));&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  private List&lt;WorkInstruction&gt; findExecutableWIs(Map inCheMap) {&#xD;&#xA;    // This query needs to be refined according to the requirement&#xD;&#xA;    List&lt;WorkInstruction&gt; wiMovesByPow = new ArrayList();&#xD;&#xA;&#xD;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(MovesEntity.WORK_INSTRUCTION)&#xD;&#xA;            .addDqPredicate(PredicateFactory.ne(MovesField.WI_EC_STATE_FETCH, WiEcStateEnum.NONE))&#xD;&#xA;            .addDqPredicate(PredicateFactory.ne(MovesField.WI_MOVE_STAGE, WiMoveStageEnum.COMPLETE))&#xD;&#xA;            .addDqPredicate(PredicateFactory.not(PredicateFactory.in(MovesField.WI_SUSPEND_STATE,&#xD;&#xA;            [WiSuspendStateEnum.SUSPEND, WiSuspendStateEnum.BYPASS])))&#xD;&#xA;            .addDqPredicate(PredicateFactory.in(MovesField.WI_MOVE_KIND, [&#xD;&#xA;            WiMoveKindEnum.RailLoad,&#xD;&#xA;            WiMoveKindEnum.RailDisch&#xD;&#xA;    ]));&#xD;&#xA;    try {&#xD;&#xA;      List&lt;WorkInstruction&gt; preWIs = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xD;&#xA;      for (WorkInstruction wi : preWIs) {&#xD;&#xA;        dq = QueryUtils.createDomainQuery(MovesEntity.WORK_QUEUE)&#xD;&#xA;                .addDqPredicate(PredicateFactory.eq(MovesField.WQ_PKEY, wi.getWiWqPkey()))&#xD;&#xA;                .addDqField(MovesField.WQ_FIRST_RELATED_SHIFT_PKEY);&#xD;&#xA;        QueryResult qr = HibernateApi.getInstance().findValuesByDomainQuery(dq);&#xD;&#xA;        if (qr.getTotalResultCount() &gt; 0) {&#xD;&#xA;          DomainQuery craneQuery = QueryUtils.createDomainQuery(ArgoEntity.WORK_SHIFT)&#xD;&#xA;                  .addDqPredicate(&#xD;&#xA;                  PredicateFactory.eq(ArgoField.WORKSHIFT_PKEY, qr.getValue(0, MovesField.WQ_FIRST_RELATED_SHIFT_PKEY)))&#xD;&#xA;                  .addDqField(ArgoField.WORKSHIFT_OWNER_POW_PKEY);&#xD;&#xA;          QueryResult qrPow = HibernateApi.getInstance().findValuesByDomainQuery(craneQuery);&#xD;&#xA;          if (qrPow.getTotalResultCount() &gt; 0) {&#xD;&#xA;            Long wiPowPkey = (Long) qrPow.getValue(0, ArgoField.WORKSHIFT_OWNER_POW_PKEY);&#xD;&#xA;            Long comparePowPkey = 0L;&#xD;&#xA;            if ((inCheMap.get(ArgoField.CHE_POW_PKEY) != null) &amp;&amp;&#xD;&#xA;                    ((Long) inCheMap.get(ArgoField.CHE_POW_PKEY) != 0)) {&#xD;&#xA;              comparePowPkey = (Long) inCheMap.get(ArgoField.CHE_POW_PKEY);&#xD;&#xA;              if (comparePowPkey.equals(wiPowPkey)) {&#xD;&#xA;                wiMovesByPow.add(wi);&#xD;&#xA;              }&#xD;&#xA;            } else {&#xD;&#xA;              DomainQuery poolQuery = QueryUtils.createDomainQuery(ArgoEntity.POINT_OF_WORK)&#xD;&#xA;                      .addDqPredicate(&#xD;&#xA;                      PredicateFactory.eq(ArgoField.POINTOFWORK_OWNER_POOL_REFERENCE,&#xD;&#xA;                              (Long) inCheMap.get(ArgoField.CHE_POOL_PKEY)))&#xD;&#xA;                      .addDqField(ArgoField.POINTOFWORK_PKEY);&#xD;&#xA;              QueryResult poolPow = HibernateApi.getInstance().findValuesByDomainQuery(poolQuery);&#xD;&#xA;              if (poolPow.getTotalResultCount() &gt; 0) {&#xD;&#xA;                for (int i = 0; i &lt; poolPow.getTotalResultCount(); i++) {&#xD;&#xA;                  comparePowPkey = (Long) poolPow.getValue(i, ArgoField.POINTOFWORK_PKEY);&#xD;&#xA;&#xD;&#xA;                  if (comparePowPkey.equals(wiPowPkey)) {&#xD;&#xA;                    wiMovesByPow.add(wi);&#xD;&#xA;                    break;&#xD;&#xA;                  }&#xD;&#xA;                }&#xD;&#xA;              }&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    } catch (Exception ex) {&#xD;&#xA;      logMsg(&quot;Fetching Work Instruction exception: &quot; + ex.getMessage());&#xD;&#xA;    }&#xD;&#xA;    finally {&#xD;&#xA;      logMsg(&quot;WorkInstruction: finding all executable WIs took : &quot;);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return wiMovesByPow;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  private Boolean isWiFirstForUnit(WorkInstruction inWorkInstruction) {&#xD;&#xA;    MetafieldId uyvUfv = MetafieldIdFactory.getCompoundMetafieldId(MovesField.WI_UYV, InventoryField.UYV_UFV);&#xD;&#xA;    String ufvAlias = new String(&quot;uyvufv&quot;);&#xD;&#xA;    EntityId ufvEntityId = EntityIdFactory.valueOf(InventoryEntity.UNIT_FACILITY_VISIT, ufvAlias);&#xD;&#xA;    MetafieldId entityAwareUnitGkey = MetafieldIdFactory.getEntityAwareMetafieldId(ufvEntityId, InventoryField.UFV_UNIT);&#xD;&#xA;    Long wiUnitGKey = inWorkInstruction.getWiUyv().getUyvUfv().getUfvUnit().getUnitGkey();&#xD;&#xA;    if (wiUnitGKey == null) {&#xD;&#xA;      return false;&#xD;&#xA;    }&#xD;&#xA;    DomainQuery queryFirstUnitWI = QueryUtils.createDomainQuery(MovesEntity.WORK_INSTRUCTION)&#xD;&#xA;            .addDqJoin(PredicateFactory.createJoin(JoinType.INNER_JOIN, uyvUfv, ufvAlias))&#xD;&#xA;            .addDqPredicate(PredicateFactory.ne(MovesField.WI_MOVE_STAGE, WiMoveStageEnum.COMPLETE))&#xD;&#xA;            .addDqPredicate(PredicateFactory.eq(entityAwareUnitGkey, wiUnitGKey))&#xD;&#xA;            .addDqPredicate(PredicateFactory.lt(MovesField.WI_MOVE_NUMBER, inWorkInstruction.getWiMoveNumber()));&#xD;&#xA;    try {&#xD;&#xA;      // If any query results at all, then inWiGkey is not the smallest move number for non-completed WI for this unit...&#xD;&#xA;      return HibernateApi.getInstance().findPrimaryKeysByDomainQuery(queryFirstUnitWI).length == 0;&#xD;&#xA;    } finally {&#xD;&#xA;      LOGGER.debug(&quot;WorkInstruction: checking if WI is Unit's first WI took : &quot;);&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  private Boolean isNotWiExecutingWA(Serializable inYardGkey, WorkInstruction inWorkInstruction,&#xD;&#xA;                                     Long inWAPkey, Long inCheGkey) {&#xD;&#xA;    Boolean isWiExecutingWA = false;&#xD;&#xA;    Long waPkey = inWorkInstruction == null ? null : inWorkInstruction.getWiItvWorkAssignmentPkey();&#xD;&#xA;    if (waPkey != null) {&#xD;&#xA;      WorkAssignment theWA = WorkAssignment.findByPkey(inYardGkey, inWAPkey);&#xD;&#xA;      isWiExecutingWA = theWA != null &amp;&amp;&#xD;&#xA;              (theWA.getWorkassignmentStatus() == 2 || theWA.getWorkassignmentStatus() == 4 ||&#xD;&#xA;                      (theWA.getWorkassignmentChe() != null &amp;&amp;&#xD;&#xA;                              theWA.getWorkassignmentChe().getCheGkey() != inCheGkey));&#xD;&#xA;    }&#xD;&#xA;    return isWiExecutingWA;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA;  In this example, we want to do built-in sort first and then additional sort based on Yard position.&#xD;&#xA;*/&#xD;&#xA;&#xD;&#xA;  public void sortJobList(final Map inJobListData) {&#xD;&#xA;    logMsg(&quot;Groovy: sortJobList started!&quot;);&#xD;&#xA;&#xD;&#xA;    //do built-in validations&#xD;&#xA;    super.sortJobList(inJobListData);&#xD;&#xA;    List&lt;WorkInstruction&gt; workInstructions = (LinkedList&lt;WorkInstruction&gt;) inJobListData.get(&quot;JOB_LIST&quot;);&#xD;&#xA;&#xD;&#xA;    Collections.sort(workInstructions, new Comparator&lt;WorkInstruction&gt;() {&#xD;&#xA;      public int compare(WorkInstruction inWorkInstructionA, WorkInstruction inWorkInstructionB) {&#xD;&#xA;        final String fromLocSlotA = inWorkInstructionA.getWiPosition().getPosName();&#xD;&#xA;        final String fromLocSlotB = inWorkInstructionB.getWiPosition().getPosName();&#xD;&#xA;        if (fromLocSlotA == null) {&#xD;&#xA;          return fromLocSlotB == null ? IYardInventoryConstants.A_EQUALS_B : IYardInventoryConstants.A_GREATER_THAN_B;&#xD;&#xA;        }&#xD;&#xA;        return fromLocSlotA.compareTo(fromLocSlotB);&#xD;&#xA;      }&#xD;&#xA;    });&#xD;&#xA;&#xD;&#xA;    logMsg(&quot;Groovy: sortJobList Done!&quot;);&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  private void logMsg(String inMsg) {&#xD;&#xA;    log(inMsg);&#xD;&#xA;    System.out.println(inMsg);&#xD;&#xA;  }&#xD;&#xA;}" />
<extension name="UpdateWIEstimatedMoveTimeSample" type="INV_UPDATE_WI_ESTIMATED_MOVE_TIME" language="GROOVY" is-enabled="Y" contents="/*&#xD;&#xA; * Copyright (c) 2014 Navis LLC. All Rights Reserved.&#xD;&#xA; *&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;package system&#xD;&#xA;&#xD;&#xA;import com.navis.argo.ArgoEntity&#xD;&#xA;import com.navis.argo.ArgoField&#xD;&#xA;import com.navis.argo.ContextHelper&#xD;&#xA;import com.navis.argo.XpsEntity&#xD;&#xA;import com.navis.argo.XpsField&#xD;&#xA;import com.navis.argo.business.api.ArgoUtils&#xD;&#xA;import com.navis.argo.business.atoms.WiMoveKindEnum&#xD;&#xA;import com.navis.argo.business.atoms.WiMoveStageEnum&#xD;&#xA;import com.navis.argo.business.model.Yard&#xD;&#xA;import com.navis.argo.business.xps.model.Che&#xD;&#xA;import com.navis.argo.business.xps.model.CheZone&#xD;&#xA;import com.navis.argo.business.xps.model.WorkShift&#xD;&#xA;import com.navis.argo.business.xps.model.XpeCraneActivity&#xD;&#xA;import com.navis.framework.metafields.MetafieldId&#xD;&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xD;&#xA;import com.navis.framework.persistence.HibernateApi&#xD;&#xA;import com.navis.framework.portal.Ordering&#xD;&#xA;import com.navis.framework.portal.QueryUtils&#xD;&#xA;import com.navis.framework.portal.UserContext&#xD;&#xA;import com.navis.framework.portal.query.DomainQuery&#xD;&#xA;import com.navis.framework.portal.query.PredicateFactory&#xD;&#xA;import com.navis.framework.query.common.api.QueryResult&#xD;&#xA;import com.navis.inventory.MovesEntity&#xD;&#xA;import com.navis.inventory.MovesField&#xD;&#xA;import com.navis.inventory.business.atoms.WiSuspendStateEnum&#xD;&#xA;import com.navis.inventory.business.moves.WorkInstruction&#xD;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xD;&#xA;import com.navis.inventory.external.inventory.AbstractUpdateWIEstimatedMoveTime&#xD;&#xA;import com.navis.spatial.BinEntity&#xD;&#xA;import com.navis.spatial.BinField&#xD;&#xA;import com.navis.spatial.business.model.AbstractBin&#xD;&#xA;import com.navis.spatial.business.model.BinContext&#xD;&#xA;import com.navis.yard.YardEntity&#xD;&#xA;import com.navis.yard.YardField&#xD;&#xA;import org.apache.log4j.Level&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * Created with IntelliJ IDEA.&#xD;&#xA; * User: kasinra&#xD;&#xA; * Date: 19/9/13&#xD;&#xA; * Time: 4:51 PM&#xD;&#xA; * To change this template use File | Settings | File Templates.&#xD;&#xA; */&#xD;&#xA;public class UpdateWIEstimatedMoveTimeSample extends AbstractUpdateWIEstimatedMoveTime {&#xD;&#xA;&#xD;&#xA;  public void updateWIEstimatedMoveTime() {&#xD;&#xA;&#xD;&#xA;    log(Level.INFO, &quot;Groovy : UpdateWIEstimatedMoveTimeSample Started&quot;);&#xD;&#xA;&#xD;&#xA;    //Gets the current time. all date and time comparision will be on this time&#xD;&#xA;    Date now = ArgoUtils.timeNow();&#xD;&#xA;&#xD;&#xA;    //Gets all rail POWs&#xD;&#xA;    QueryResult railPowsQr = findAllRailPows();&#xD;&#xA;&#xD;&#xA;    //Returns from this execution if rail pows are null&#xD;&#xA;    if (railPowsQr == null || railPowsQr.getTotalResultCount() == 0) {&#xD;&#xA;      log(Level.INFO, &quot;There are no rail pows found. so returning..&quot;);&#xD;&#xA;      return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    //For each rail pow&#xD;&#xA;    for (int i = 0; i &lt; railPowsQr.getTotalResultCount(); i++) {&#xD;&#xA;&#xD;&#xA;      //Gets the pow pkey amd double cycling from Pow.&#xD;&#xA;      Long powPkey = (Long) railPowsQr.getValue(i, ArgoField.POINTOFWORK_PKEY);&#xD;&#xA;      Boolean powDualCycling = (Boolean) railPowsQr.getValue(i, ArgoField.POINTOFWORK_DOUBLE_CYCLING);&#xD;&#xA;      String powName = (String) railPowsQr.getValue(i, ArgoField.POINTOFWORK_NAME);&#xD;&#xA;&#xD;&#xA;      log(Level.INFO, &quot;Computing EMT for work instructions of POW, Pkey[&quot; + powPkey + &quot;] and PowName [&quot; + powName + &quot;]&quot;);&#xD;&#xA;      //get workshift list for pow&#xD;&#xA;      List&lt;WorkShift&gt; wss = findAllWorkShiftsForPow(powPkey);&#xD;&#xA;      if (wss == null || wss.isEmpty()) {&#xD;&#xA;        log(Level.INFO, &quot;There are no work shifts, so continuing next pow pkey..&quot;);&#xD;&#xA;        continue;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      //find the current workshift among give&#xD;&#xA;      WorkShift ws = findWorkShiftForCurrentTime(wss, now);&#xD;&#xA;      if (ws == null) {&#xD;&#xA;        log(Level.INFO, &quot;There are no current or future scheduled work shift exist, so continuing next pow..&quot;);&#xD;&#xA;        continue;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      List&lt;Serializable&gt; wqPkeys = findAllWQsForWSs(wss);&#xD;&#xA;      if (wqPkeys == null || wqPkeys.isEmpty()) {&#xD;&#xA;        log(Level.INFO,&#xD;&#xA;                &quot;There are no active work queues exist for powPkey[&quot; + powPkey + &quot;] and PowName [&quot; + powName + &quot;], so continuing next pow..&quot;);&#xD;&#xA;        continue;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      //get the yard entity as it is required for finding transferzones&#xD;&#xA;      Serializable yardGkey = (Serializable) railPowsQr.getValue(i, ArgoField.POINTOFWORK_YARD);&#xD;&#xA;      Yard yard = null;&#xD;&#xA;      if (yardGkey == null) {&#xD;&#xA;        yard = ContextHelper.getThreadYard();&#xD;&#xA;      } else {&#xD;&#xA;        yard = Yard.hydrate(yardGkey);&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      //find all che zones(only rail)&#xD;&#xA;      List&lt;CheZone&gt; railRelatedCheZones = findRailCheZones(yard);&#xD;&#xA;      Set&lt;Long&gt; nominatedChesForPow = new HashSet&lt;Long&gt;();&#xD;&#xA;&#xD;&#xA;      //get current shift start and endTime&#xD;&#xA;      Date shiftStartTime = ws.getWorkshiftStartTime();&#xD;&#xA;      Date shiftEndTime = new Date(shiftStartTime.getTime() + ws.getWorkshiftDuration());&#xD;&#xA;      //map which holds CheId as key and Wis estimated move time that is operated by the CheId&#xD;&#xA;      Map&lt;Long, Date&gt; lastEmtsForChe = new HashMap&lt;Long, Date&gt;();&#xD;&#xA;&#xD;&#xA;      //get all breaks for the current shift&#xD;&#xA;      List&lt;XpeCraneActivity&gt; cas = findCraneActForWS(ws);&#xD;&#xA;&#xD;&#xA;      setWincForWIsInWQs(wqPkeys, railRelatedCheZones, nominatedChesForPow, yard);&#xD;&#xA;&#xD;&#xA;      for (Serializable wqPkey : wqPkeys) {&#xD;&#xA;&#xD;&#xA;        List&lt;WorkInstruction&gt; wis = findAllWIsForWq(wqPkey);&#xD;&#xA;        if (wis == null || wis.isEmpty()) {&#xD;&#xA;          log(Level.INFO, &quot;There are no work instructions exist for work queue pkey[&quot; + wqPkey + &quot;], so continuing next pow pkey..&quot;);&#xD;&#xA;          continue;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        List&lt;WorkInstruction&gt; ordWis = sortWIsGroupByWINCAndOrderByWiSequence(wis);&#xD;&#xA;        List&lt;Serializable&gt; pairedWIGkeys = new ArrayList&lt;Serializable&gt;();&#xD;&#xA;        for (WorkInstruction wi : ordWis) {&#xD;&#xA;          //second Part compute EMT for WIs those have WINC != null&#xD;&#xA;          //compute the move increment time for the work instruction.&#xD;&#xA;&#xD;&#xA;          //To skip the twin WI for which WINC and EMT are already set&#xD;&#xA;          if (pairedWIGkeys.contains(wi.getWiGkey())) {&#xD;&#xA;            continue;&#xD;&#xA;          }&#xD;&#xA;          int numOfWincs = nominatedChesForPow.size() == 0 ? 1 : nominatedChesForPow.size();&#xD;&#xA;          String wiLiftType = null;&#xD;&#xA;          Set&lt;WorkInstruction&gt; tandemSet = wi.getAllWorkInstructionsInTandemSet();&#xD;&#xA;          if (tandemSet != null &amp;&amp; !tandemSet.isEmpty()) {&#xD;&#xA;            int tandemWisSize = tandemSet.size();&#xD;&#xA;            if (tandemWisSize == 2) {&#xD;&#xA;              wiLiftType = WI_TANDEM_LIFT;&#xD;&#xA;            } else if (tandemWisSize == 4) {&#xD;&#xA;              wiLiftType = WI_QUAD_LIFT;&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;&#xD;&#xA;          if (wiLiftType == null &amp;&amp; (wi.getWiTwinWith().getName().equals(&quot;PREV&quot;) || wi.getWiTwinWith().getName().equals(&quot;NEXT&quot;))) {&#xD;&#xA;            wiLiftType = WI_TWIN_LIFT;&#xD;&#xA;          }&#xD;&#xA;&#xD;&#xA;          Long moveIncrTime = computeMoveIncrTime(powDualCycling, ws, wiLiftType, numOfWincs);&#xD;&#xA;&#xD;&#xA;          long timeToUpdate = 0L;&#xD;&#xA;          Che winc = wi.getWiNominatedChe();&#xD;&#xA;          Long wincCheId = winc == null ? null : winc.getCheId();&#xD;&#xA;&#xD;&#xA;          if (lastEmtsForChe.get(wincCheId) == null) {&#xD;&#xA;            //First WI for the WINC&#xD;&#xA;            //work shift start time is future time&#xD;&#xA;            if (shiftStartTime.after(now)) {&#xD;&#xA;&#xD;&#xA;              //emt = shift start time + move increment time&#xD;&#xA;              timeToUpdate = shiftStartTime.getTime() + moveIncrTime;&#xD;&#xA;            } else {&#xD;&#xA;              //work shift start time is not future time&#xD;&#xA;              //check if current time falls during shift break times&#xD;&#xA;              Date breakEndTime = getBreakETIfTimeForBreak(now, cas);&#xD;&#xA;              if (breakEndTime != null) {&#xD;&#xA;                // it is a break time&#xD;&#xA;                //emt is break end time + move increment time&#xD;&#xA;                timeToUpdate = breakEndTime.getTime() + moveIncrTime;&#xD;&#xA;              } else {&#xD;&#xA;                //current time does not fall during shift break time&#xD;&#xA;                //current time before shift end time&#xD;&#xA;                if (now.before(shiftEndTime)) {&#xD;&#xA;                  //emt is current time + move increment time&#xD;&#xA;                  timeToUpdate = now.getTime() + moveIncrTime;&#xD;&#xA;                } else {&#xD;&#xA;&#xD;&#xA;                  //current time is after shift end time&#xD;&#xA;                  //get the following shift&#xD;&#xA;                  WorkShift nextWS = ws.getWorkshiftNextShift();&#xD;&#xA;                  //if there is a following shift&#xD;&#xA;                  if (nextWS != null) {&#xD;&#xA;                    timeToUpdate = nextWS.getWorkshiftStartTime().getTime() + moveIncrTime;&#xD;&#xA;                  } else {&#xD;&#xA;                    // there is no following shift&#xD;&#xA;                    //next iteration will set the correct EMT for this work instructions&#xD;&#xA;                    timeToUpdate = now.getTime() + moveIncrTime;&#xD;&#xA;                  }&#xD;&#xA;                }&#xD;&#xA;              }&#xD;&#xA;            }&#xD;&#xA;          } else {&#xD;&#xA;            //If this work instruction is not the first one&#xD;&#xA;            Date lastEmtGivenForWINC = lastEmtsForChe.get(wincCheId);&#xD;&#xA;            Date lastEmtWithIncr = new Date(lastEmtGivenForWINC.getTime() + moveIncrTime);&#xD;&#xA;&#xD;&#xA;            //check if lastEmtWithIncr falls during shift break times&#xD;&#xA;            Date breakEndTime = getBreakETIfTimeForBreak(lastEmtWithIncr, cas);&#xD;&#xA;&#xD;&#xA;            if (breakEndTime != null) {&#xD;&#xA;              // it is a break time&#xD;&#xA;              //emt is break end time + move increment time&#xD;&#xA;              timeToUpdate = breakEndTime.getTime() + moveIncrTime;&#xD;&#xA;            } else {&#xD;&#xA;              //lastEmtWithIncr does not fall during shift break time&#xD;&#xA;              //check lastEmtWithIncr before shift end time&#xD;&#xA;              if (lastEmtWithIncr.before(shiftEndTime)) {&#xD;&#xA;                timeToUpdate = lastEmtWithIncr.getTime();&#xD;&#xA;              } else {&#xD;&#xA;                //current time is after shift end time&#xD;&#xA;                //get the following shift&#xD;&#xA;                WorkShift nextWS = ws.getWorkshiftNextShift();&#xD;&#xA;                if (nextWS != null) {&#xD;&#xA;                  timeToUpdate = nextWS.getWorkshiftStartTime().getTime() + moveIncrTime;&#xD;&#xA;                } else {&#xD;&#xA;                  // there is no following shift&#xD;&#xA;                  //next iteration will set the correct EMT for this work instructions&#xD;&#xA;                  timeToUpdate = lastEmtWithIncr.getTime();&#xD;&#xA;                }&#xD;&#xA;              }&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;          Date emtToUpdate = new Date(timeToUpdate);&#xD;&#xA;          wi.setFieldValue(MovesField.WI_ESTIMATED_MOVE_TIME, emtToUpdate);&#xD;&#xA;          lastEmtsForChe.put(wincCheId, emtToUpdate);&#xD;&#xA;          //Twin WIs should have the same WINC and EMT&#xD;&#xA;          boolean updateTwinWithSameEmt = false;&#xD;&#xA;&#xD;&#xA;          if (WI_TWIN_LIFT.equals(wiLiftType)) {&#xD;&#xA;            WorkInstruction twinWi = wi.getTwinCompanion(false);&#xD;&#xA;            twinWi.setFieldValue(MovesField.WI_NOMINATED_CHE, winc.getCheGkey());&#xD;&#xA;            twinWi.setFieldValue(MovesField.WI_ESTIMATED_MOVE_TIME, emtToUpdate);&#xD;&#xA;            pairedWIGkeys.add(twinWi.getWiGkey());&#xD;&#xA;          } else if (WI_TANDEM_LIFT.equals(wiLiftType) || WI_QUAD_LIFT.equals(wiLiftType)) {&#xD;&#xA;            for (WorkInstruction tanWI : tandemSet) {&#xD;&#xA;              tanWI.setFieldValue(MovesField.WI_NOMINATED_CHE, winc.getCheGkey());&#xD;&#xA;              tanWI.setFieldValue(MovesField.WI_ESTIMATED_MOVE_TIME, emtToUpdate);&#xD;&#xA;              pairedWIGkeys.add(tanWI.getWiGkey());&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  private void setWincForWIsInWQs(List&lt;Serializable&gt; inWqPkeys, List&lt;CheZone&gt; inCheZones, Set&lt;Long&gt; inNCsForPow, Yard inYard) {&#xD;&#xA;&#xD;&#xA;    for (Serializable wqPkey : inWqPkeys) {&#xD;&#xA;&#xD;&#xA;      //finds all the work instructions belongs to given work shifts&#xD;&#xA;      List&lt;WorkInstruction&gt; wis = findAllWIsForWq(wqPkey);&#xD;&#xA;      if (wis == null || wis.isEmpty()) {&#xD;&#xA;        log(Level.INFO, &quot;There are no work instructions exist for work queue pkey[&quot; + wqPkey + &quot;], so continuing next Work Queue..&quot;);&#xD;&#xA;        continue;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      //for each WI&#xD;&#xA;      for (WorkInstruction wi : wis) {&#xD;&#xA;        Che winc = null;&#xD;&#xA;        //check and assign the che from railRelatedCheZones&#xD;&#xA;        if (inCheZones != null &amp;&amp; !inCheZones.isEmpty()) {&#xD;&#xA;&#xD;&#xA;          //find the maching che from list of che zones based on work instructions from or to position&#xD;&#xA;          Long cheId = findMatchingCheIdForWi(wi, inCheZones, inYard);&#xD;&#xA;          if (cheId != null) {&#xD;&#xA;            Che matchingChe = Che.findChe(cheId, inYard);&#xD;&#xA;            //if Che is not found for che id then just log a warning and  continue.&#xD;&#xA;            if (matchingChe == null) {&#xD;&#xA;              //very rare case .&#xD;&#xA;              log(Level.WARN, &quot;Che is not found for the che id[&quot; + cheId + &quot;]&quot;);&#xD;&#xA;            } else {&#xD;&#xA;              winc = matchingChe;&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        //local variable winc is not null then update the work instructions with winc.&#xD;&#xA;        if (winc != null) {&#xD;&#xA;          wi.setFieldValue(MovesField.WI_NOMINATED_CHE, winc.getCheGkey());&#xD;&#xA;          inNCsForPow.add(winc.getCheId());&#xD;&#xA;        } else {&#xD;&#xA;          //If winc is not updated by this iteration then we don't need to calculate EMT&#xD;&#xA;          wi.setFieldValue(MovesField.WI_NOMINATED_CHE, null);&#xD;&#xA;          inNCsForPow.add(null);&#xD;&#xA;        }&#xD;&#xA;      } //first part is ended&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  //this returns the break end time if given time is falls any break times&#xD;&#xA;  private static Date getBreakETIfTimeForBreak(Date inCurTime, List&lt;XpeCraneActivity&gt; inShiftBreaks) {&#xD;&#xA;    for (XpeCraneActivity sbreak : inShiftBreaks) {&#xD;&#xA;      Date breakStartTime = sbreak.getCraneactivityAbsoluteStartTime();&#xD;&#xA;      Date breakEndTime = new Date(breakStartTime.getTime() + sbreak.getCraneactivityDuration());&#xD;&#xA;      if (breakStartTime != null &amp;&amp; inCurTime.after(breakStartTime) &amp;&amp; inCurTime.before(breakEndTime)) {&#xD;&#xA;        return breakEndTime;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    return null;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  //this method returns all creane activities for the current work shift&#xD;&#xA;  private static List&lt;XpeCraneActivity&gt; findCraneActForWS(WorkShift inWs) {&#xD;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(XpsEntity.XPE_CRANE_ACTIVITY)&#xD;&#xA;            .addDqPredicate(PredicateFactory.eq(XpsField.CRANEACTIVITY_POSITIONING_OBJ, inWs.getWorkshiftPkey()));&#xD;&#xA;    return HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  //this methods returns the current work shift for current time&#xD;&#xA;  private static WorkShift findWorkShiftForCurrentTime(List&lt;WorkShift&gt; inWss, Date inNow) {&#xD;&#xA;    for (WorkShift ws : inWss) {&#xD;&#xA;      Date wsStartTime = ws.getWorkshiftStartTime();&#xD;&#xA;      if (wsStartTime.after(inNow)) {&#xD;&#xA;        //this work shift will start in future&#xD;&#xA;        return ws;&#xD;&#xA;      } else {&#xD;&#xA;        Long duration = ws.getWorkshiftDuration();&#xD;&#xA;        Date wsEndTime = new Date(wsStartTime.getTime() + duration);&#xD;&#xA;        if (wsEndTime.after(inNow)) {&#xD;&#xA;          return ws;&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    return null;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  //This method compute the move increment time to update with WI.&#xD;&#xA;  public static Long computeMoveIncrTime(Boolean powDualCycle, WorkShift inWs, final String inWiLiftType, int inWincs) {&#xD;&#xA;    Long incrementTime = 0L;&#xD;&#xA;&#xD;&#xA;    boolean isTwinLift = false;&#xD;&#xA;    boolean isTandemLift = false;&#xD;&#xA;    boolean isQuadLift = false;&#xD;&#xA;&#xD;&#xA;    if (inWiLiftType != null &amp;&amp; !inWiLiftType.isEmpty()) {&#xD;&#xA;      if (WI_QUAD_LIFT.equals(inWiLiftType)) {&#xD;&#xA;        isQuadLift = true;&#xD;&#xA;      } else if (WI_TANDEM_LIFT.equals(inWiLiftType)) {&#xD;&#xA;        isTandemLift = true;&#xD;&#xA;      } else if (WI_TWIN_LIFT.equals(inWiLiftType)) {&#xD;&#xA;        isTwinLift = true;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    //check if pow is dual cycle&#xD;&#xA;    if (powDualCycle != null &amp;&amp; powDualCycle) {&#xD;&#xA;      long dualProduction = inWs.getWorkshiftDualProduction();&#xD;&#xA;      if (isQuadLift) {&#xD;&#xA;        incrementTime = ((4 * 3600) / dualProduction);&#xD;&#xA;      } else if (isTandemLift || isTwinLift) {&#xD;&#xA;        incrementTime = ((2 * 3600) / dualProduction);&#xD;&#xA;      } else {&#xD;&#xA;        incrementTime = (3600 / dualProduction);&#xD;&#xA;      }&#xD;&#xA;    } else {&#xD;&#xA;      if (isQuadLift) {&#xD;&#xA;        incrementTime = ((4 * 3600) / inWs.getWorkshiftQuadProduction());&#xD;&#xA;      } else if (isTandemLift) {&#xD;&#xA;        incrementTime = ((2 * 3600) / inWs.getWorkshiftTandemProduction());&#xD;&#xA;      } else if (isTwinLift) {&#xD;&#xA;        incrementTime = ((2 * 3600) / inWs.getWorkshiftTwinProduction());&#xD;&#xA;      } else {&#xD;&#xA;        incrementTime = (3600 / inWs.getWorkshiftProduction());&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    return incrementTime * 10 * 1000 * inWincs;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  //finds all rail pow entries&#xD;&#xA;  private static QueryResult findAllRailPows() {&#xD;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(ArgoEntity.POINT_OF_WORK)&#xD;&#xA;            .addDqPredicate(PredicateFactory.eq(ArgoField.POINTOFWORK_IS_RAIL_POW, Boolean.TRUE))&#xD;&#xA;            .addDqField(ArgoField.POINTOFWORK_YARD)&#xD;&#xA;            .addDqField(ArgoField.POINTOFWORK_PKEY)&#xD;&#xA;            .addDqField(ArgoField.POINTOFWORK_DOUBLE_CYCLING)&#xD;&#xA;            .addDqField(ArgoField.POINTOFWORK_NAME);&#xD;&#xA;    return HibernateApi.getInstance().findValuesByDomainQuery(dq);&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  //finds all work shifts for the given pow&#xD;&#xA;  private static List&lt;WorkShift&gt; findAllWorkShiftsForPow(Serializable inPowPkey) {&#xD;&#xA;    DomainQuery craneQuery = QueryUtils.createDomainQuery(ArgoEntity.WORK_SHIFT)&#xD;&#xA;            .addDqPredicate(PredicateFactory.eq(ArgoField.WORKSHIFT_OWNER_POW_PKEY, inPowPkey))&#xD;&#xA;            .addDqField(ArgoField.WORKSHIFT_PKEY)&#xD;&#xA;            .addDqOrdering(Ordering.asc(ArgoField.WORKSHIFT_START_TIME));&#xD;&#xA;    return HibernateApi.getInstance().findEntitiesByDomainQuery(craneQuery);&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  //this method returns all the WIs belongs to given WQ excludes if their suspendstate is suspend or bypass and movestage is put complete or complete&#xD;&#xA;  //ascending order wi sequence&#xD;&#xA;  private static List&lt;Serializable&gt; findAllWQsForWSs(List&lt;WorkShift&gt; inWss) {&#xD;&#xA;&#xD;&#xA;    List&lt;Long&gt; wsPkeys = new ArrayList();&#xD;&#xA;    for (WorkShift ws : inWss) {&#xD;&#xA;      wsPkeys.add(ws.getWorkshiftGkey());&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    Ordering[] orderings = new Ordering[2];&#xD;&#xA;    orderings[0] = Ordering.asc(WI_WQ_ORDER);&#xD;&#xA;    orderings[1] = Ordering.asc(MovesField.WI_SEQUENCE);&#xD;&#xA;&#xD;&#xA;    DomainQuery wqDq = QueryUtils.createDomainQuery(MovesEntity.WORK_QUEUE)&#xD;&#xA;            .addDqField(MovesField.WQ_PKEY)&#xD;&#xA;            .addDqPredicate(PredicateFactory.eq(MovesField.WQ_IS_BLUE, Boolean.TRUE))&#xD;&#xA;            .addDqPredicate(PredicateFactory.in(MovesField.WQ_FIRST_RELATED_SHIFT, wsPkeys))&#xD;&#xA;            .addDqOrdering(Ordering.asc(MovesField.WQ_ORDER));&#xD;&#xA;&#xD;&#xA;    QueryResult qr = HibernateApi.getInstance().findValuesByDomainQuery(wqDq);&#xD;&#xA;    return (List&lt;Serializable&gt;) getGivenFieldValueListFromQR(qr, MovesField.WQ_PKEY);&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  private List&lt;WorkInstruction&gt; sortWIsGroupByWINCAndOrderByWiSequence(List&lt;WorkInstruction&gt; inWis) {&#xD;&#xA;    if (inWis == null || inWis.isEmpty()) {&#xD;&#xA;      return inWis;&#xD;&#xA;    }&#xD;&#xA;    Collections.sort(inWis, new WorkInstructionComparator());&#xD;&#xA;    return inWis;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  //this method returns all the WIs belongs to given WQ excludes if their suspendstate is suspend or bypass and movestage is put complete or complete&#xD;&#xA;  //ascending order wi sequence&#xD;&#xA;  private static List&lt;WorkInstruction&gt; findAllWIsForWq(Serializable inWqPkey) {&#xD;&#xA;&#xD;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(MovesEntity.WORK_INSTRUCTION)&#xD;&#xA;            .addDqPredicate(PredicateFactory.eq(MovesField.WI_WQ_PKEY, inWqPkey))&#xD;&#xA;            .addDqPredicate(PredicateFactory.in(MovesField.WI_MOVE_KIND, Arrays.asList(WiMoveKindEnum.RailLoad, WiMoveKindEnum.RailDisch)))&#xD;&#xA;            .addDqPredicate(PredicateFactory.not(PredicateFactory.in(MovesField.WI_MOVE_STAGE, Arrays.asList(WiMoveStageEnum.PUT_COMPLETE,&#xD;&#xA;            WiMoveStageEnum.COMPLETE))))&#xD;&#xA;            .addDqPredicate(PredicateFactory.not(PredicateFactory.in(MovesField.WI_SUSPEND_STATE, Arrays.asList(WiSuspendStateEnum.SUSPEND,&#xD;&#xA;            WiSuspendStateEnum.BYPASS,&#xD;&#xA;            WiSuspendStateEnum.SYSTEM_BYPASS))))&#xD;&#xA;            .addDqOrdering(Ordering.asc(MovesField.WI_SEQUENCE));&#xD;&#xA;    return HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  //This should find all CHEs assigned to given pow order by assigned date and .First assigned Che to pow should be first in list.&#xD;&#xA;  private List&lt;CheZone&gt; findRailCheZones(Yard inYard) {&#xD;&#xA;    if (inYard == null) {&#xD;&#xA;      log(Level.WARN, &quot;Could not find Yard so unable to find Che zones.&quot;);&#xD;&#xA;      return null;&#xD;&#xA;    }&#xD;&#xA;    //find the binmodel for yard&#xD;&#xA;    AbstractBin binModel = inYard.getYrdBinModel();&#xD;&#xA;    //if binmodel is null then return null&#xD;&#xA;    if (binModel == null) {&#xD;&#xA;      return null;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(BinEntity.ABSTRACT_BIN)&#xD;&#xA;            .addDqPredicate(PredicateFactory.eq(ABN_BIN_TYPE_ID, &quot;TRACK_PLAN&quot;))&#xD;&#xA;            .addDqField(BinField.ABN_GKEY);&#xD;&#xA;&#xD;&#xA;    QueryResult qr = HibernateApi.getInstance().findValuesByDomainQuery(dq);&#xD;&#xA;    List&lt;Object&gt; abnGkeys = getGivenFieldValueListFromQR(qr, BinField.ABN_GKEY);&#xD;&#xA;    if (abnGkeys.isEmpty()) {&#xD;&#xA;      return null;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    DomainQuery tzAssocDq = QueryUtils.createDomainQuery(YardEntity.TRANSFER_ZONE_ASSOCIATION)&#xD;&#xA;            .addDqPredicate(PredicateFactory.in(YardField.TZA_STOWAGE_BIN, abnGkeys))&#xD;&#xA;            .addDqField(BLOCK_NAME);&#xD;&#xA;    QueryResult railTzaQr = HibernateApi.getInstance().findValuesByDomainQuery(tzAssocDq);&#xD;&#xA;    List&lt;Object&gt; abnNames = getGivenFieldValueListFromQR(railTzaQr, BLOCK_NAME);&#xD;&#xA;    if (abnNames.isEmpty()) {&#xD;&#xA;      return null;&#xD;&#xA;    }&#xD;&#xA;    DomainQuery dq1 = QueryUtils.createDomainQuery(ArgoEntity.CHE_ZONE)&#xD;&#xA;            .addDqPredicate(PredicateFactory.in(ArgoField.CHEZONE_SEL_BLOCK, abnNames));&#xD;&#xA;    return HibernateApi.getInstance().findEntitiesByDomainQuery(dq1);&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  //this method should find Che zone for the given WI's from or two position and return the Che Id of found Che zone&#xD;&#xA;  private Long findMatchingCheIdForWi(WorkInstruction inWi, List&lt;CheZone&gt; inCheZones, Yard inYard) {&#xD;&#xA;    String yardBlock = &quot;&quot;;&#xD;&#xA;    //get the WI's Ufv&#xD;&#xA;    UnitFacilityVisit wiUfv = inWi.getWiUfv();&#xD;&#xA;    //If Ufv is null return null&#xD;&#xA;    if (wiUfv != null) {&#xD;&#xA;      //gets the UFV's optimalRailTzSolt. Assumption optimal rail tz slot groovy is triggered and value is set&#xD;&#xA;      String ufvOptimalRailTZSlot = inWi.getWiUfv().getUfvOptimalRailTZSlot();&#xD;&#xA;      //If  ufvOptimalRailTZSlot == null then find the Che zone based on Wi's to or from position&#xD;&#xA;      if (ufvOptimalRailTZSlot == null) {&#xD;&#xA;        String posName = &quot;&quot;;&#xD;&#xA;        if (inWi.getWiMoveKind().equals(WiMoveKindEnum.RailDisch)) {&#xD;&#xA;          yardBlock = inWi.getWiToPosition().getBlockName();&#xD;&#xA;          posName = inWi.getWiToPosition().getPosName();&#xD;&#xA;        } else {&#xD;&#xA;          yardBlock = inWi.getWiFromPosition().getBlockName();&#xD;&#xA;          posName = inWi.getWiFromPosition().getPosName();&#xD;&#xA;        }&#xD;&#xA;        if (yardBlock == null || yardBlock.isEmpty()) {&#xD;&#xA;          log(Level.DEBUG, &quot;findMatchingCheIdForWi() yardBlock is null so returning null CHE Id&quot;);&#xD;&#xA;          return null;&#xD;&#xA;        }&#xD;&#xA;        int index = posName.lastIndexOf('-');&#xD;&#xA;        String yardSlot = posName.substring(index + 1);&#xD;&#xA;        for (CheZone chezone : inCheZones) {&#xD;&#xA;          if (chezone.getChezoneSelBlock().equals(yardBlock)) {&#xD;&#xA;            int wiTZSlot = Integer.parseInt(yardSlot);&#xD;&#xA;            Long chezoneOrdFirstColumn = chezone.getChezoneOrdFirstColumn();&#xD;&#xA;            Long chezoneOrdLastColumn = chezone.getChezoneOrdLastColumn();&#xD;&#xA;            //check if wi transfer zone slot falls with in che zone coverage.&#xD;&#xA;            //return the che if range matches&#xD;&#xA;            if ((wiTZSlot &lt;= chezoneOrdFirstColumn &amp;&amp; wiTZSlot &gt;= chezoneOrdLastColumn) ||&#xD;&#xA;                    (wiTZSlot &lt;= chezoneOrdLastColumn &amp;&amp; wiTZSlot &gt;= chezoneOrdFirstColumn)) {&#xD;&#xA;              return chezone.getChezoneCheId();&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;      //If ufvOptimalRailTZSlot is not null then find the matching Che zone based on this field&#xD;&#xA;      else if (inYard != null) {&#xD;&#xA;        UserContext uc = ContextHelper.getThreadUserContext();&#xD;&#xA;        AbstractBin yardBinModel = inYard.getYrdBinModel();&#xD;&#xA;        if (yardBinModel != null) {&#xD;&#xA;          BinContext stowageContext = BinContext.findBinContext(Yard.CONTAINER_STOWAGE_BIN_CONTEXT);&#xD;&#xA;          AbstractBin abin = yardBinModel.findDescendantBinFromInternalSlotString(ufvOptimalRailTZSlot, stowageContext);&#xD;&#xA;          if (abin == null) {&#xD;&#xA;            log(Level.DEBUG,&#xD;&#xA;                    &quot;findMatchingCheIdForWi() unable to find AbstractBin for [&quot; + ufvOptimalRailTZSlot + &quot;] so returning null CHE Id&quot;);&#xD;&#xA;            return null;&#xD;&#xA;          }&#xD;&#xA;          yardBlock = abin.getAbnName();&#xD;&#xA;          for (CheZone chezone : inCheZones) {&#xD;&#xA;            if (chezone.getChezoneSelBlock().equals(yardBlock)) {&#xD;&#xA;              return chezone.getChezoneCheId();&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    return null;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  private static List&lt;Object&gt; getGivenFieldValueListFromQR(QueryResult inWsQr, MetafieldId inField) {&#xD;&#xA;    List&lt;Object&gt; wsPkeys = new ArrayList&lt;Object&gt;();&#xD;&#xA;    if (inWsQr != null) {&#xD;&#xA;      for (int i = 0; i &lt; inWsQr.getTotalResultCount(); i++) {&#xD;&#xA;        wsPkeys.add(inWsQr.getValue(i, inField));&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    return wsPkeys;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  private class WorkInstructionComparator implements Comparator {&#xD;&#xA;&#xD;&#xA;    @Override&#xD;&#xA;    public int compare(Object inObj01, Object inObj02) {&#xD;&#xA;&#xD;&#xA;      if (inObj01 == null &amp;&amp; inObj02 == null) {&#xD;&#xA;        return 0;&#xD;&#xA;      } else if (inObj01 == null) {&#xD;&#xA;        return -1;&#xD;&#xA;      } else if (inObj02 == null) {&#xD;&#xA;        return 1;&#xD;&#xA;      }&#xD;&#xA;      if (!(inObj01 instanceof WorkInstruction) || !(inObj02 instanceof WorkInstruction)) {&#xD;&#xA;        return -1;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      WorkInstruction Wi1 = (WorkInstruction) inObj01;&#xD;&#xA;      WorkInstruction Wi2 = (WorkInstruction) inObj02;&#xD;&#xA;&#xD;&#xA;      Che che1 = Wi1.getWiNominatedChe();&#xD;&#xA;      Che che2 = Wi1.getWiNominatedChe();&#xD;&#xA;      Long wi1Seq = Wi1.getWiSequence();&#xD;&#xA;      Long wi2Seq = Wi2.getWiSequence();&#xD;&#xA;&#xD;&#xA;      if (che1 == null &amp;&amp; che2 == null) {&#xD;&#xA;        return wi1Seq.compareTo(wi2Seq);&#xD;&#xA;      } else if (che1 != null &amp;&amp; che2 != null) {&#xD;&#xA;        if (che1.getCheGkey().equals(che2.getCheGkey())) {&#xD;&#xA;          return wi1Seq.compareTo(wi2Seq);&#xD;&#xA;        } else {&#xD;&#xA;          return che1.getCheGkey().compareTo(che2.getCheGkey());&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;      if (che1 == null) {&#xD;&#xA;        return -1;&#xD;&#xA;      }&#xD;&#xA;      return 1;&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  public static MetafieldId BLOCK_NAME = MetafieldIdFactory.getCompoundMetafieldId(YardField.TZA_TRANSFER_ZONE_BIN, BinField.ABN_NAME);&#xD;&#xA;  public static MetafieldId ABN_BIN_TYPE_ID = MetafieldIdFactory.getCompoundMetafieldId(BinField.ABN_BIN_TYPE, BinField.BTP_ID);&#xD;&#xA;  public static MetafieldId WI_WQ_ORDER = MetafieldIdFactory.getCompoundMetafieldId(MovesField.WI_WORK_QUEUE, MovesField.WQ_ORDER);&#xD;&#xA;  public static String WI_TWIN_LIFT = &quot;TWIN&quot;;&#xD;&#xA;  public static String WI_TANDEM_LIFT = &quot;TANDEM&quot;;&#xD;&#xA;  public static String WI_QUAD_LIFT = &quot;QUAD&quot;;&#xD;&#xA;}&#xD;&#xA;" />
<extension name="OrphanContainerValidatorSample" type="INV_ORPHAN_CTR_VALIDATOR" language="GROOVY" is-enabled="Y" contents="/*&#xD;&#xA; * Copyright (c) 2014 Navis LLC. All Rights Reserved.&#xD;&#xA; *&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;package extension.system&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * Created by perumsu on 21/8/14.&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; * Orphan Container Validator in N4 Mobile Hatch Clerk&#xD;&#xA; *&#xD;&#xA; * Description :&#xD;&#xA; * The sample groovy to validate the orphan container.&#xD;&#xA; * NOTE: This groovy should be copied and renamed as &quot;OrphanContainerValidator&quot; when used in Code Extensions&#xD;&#xA; *&#xD;&#xA; *  * Installation Instructions:&#xD;&#xA; *     1. Go to Administration &gt;&gt; System &gt;&gt; Code Extensions&#xD;&#xA; *     2. Click Add (+)&#xD;&#xA; *     3. Input details as below:  Extension Type -&gt; INV_ORPHAN_CTR_VALIDATOR, Code Extension Name -&gt; OrphanContainerValidator&#xD;&#xA; *     4. Click Edit Contents and paste the contents of MTLCodecoEdiPostInterceptor.groovy into the Contents Edit Area.&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;import com.navis.argo.business.atoms.WiMoveKindEnum&#xD;&#xA;import com.navis.framework.business.Roastery&#xD;&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xD;&#xA;import com.navis.framework.portal.FieldChange&#xD;&#xA;import com.navis.framework.portal.FieldChanges&#xD;&#xA;import com.navis.inventory.business.api.SearchResults&#xD;&#xA;import com.navis.inventory.business.api.UnitFinder&#xD;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xD;&#xA;import com.navis.inventory.external.inventory.AbstractOrphanContainerValidator&#xD;&#xA;import com.navis.inventory.external.inventory.EOrphanContainerValidator&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * Created by perumsu on 17/8/14.&#xD;&#xA; */&#xD;&#xA;class OrphanContainerValidatorSample extends AbstractOrphanContainerValidator {&#xD;&#xA;&#xD;&#xA;  public void validateOrphanContainer(Map inParams) {&#xD;&#xA;    log(&quot;Groovy : OrphanContainerValidator started!&quot;);&#xD;&#xA;    Map programData = (HashMap) inParams.get(EOrphanContainerValidator.TRIGGER_FIELD_CHANGES);&#xD;&#xA;    FieldChange fc = ((FieldChanges) programData.get(&quot;MNHCContainer&quot;)).getFieldChange(MetafieldIdFactory.valueOf(&quot;mnhcCntrID1&quot;));&#xD;&#xA;    String ctrId = fc.getNewValue();&#xD;&#xA;    UnitFinder unitFinder = (UnitFinder) Roastery.getBean(UnitFinder.BEAN_ID);&#xD;&#xA;    SearchResults results = unitFinder.findUfvByExactDigits(ctrId, true, true);&#xD;&#xA;    UnitFacilityVisit ufv = UnitFacilityVisit.hydrate(results.getFoundPrimaryKey());&#xD;&#xA;    if (ufv != null) {&#xD;&#xA;      boolean hasPlan = ufv.hasPlannedWi(WiMoveKindEnum.VeslDisch);&#xD;&#xA;      if (hasPlan) {&#xD;&#xA;        registerError(CANNOT_DISCHARGE_UNIT_WITH_DISCH_PLAN_IN_ORPHAN_MODE);&#xD;&#xA;        log(&quot;Groovy : OrphanContainerValidator : &quot; + CANNOT_DISCHARGE_UNIT_WITH_DISCH_PLAN_IN_ORPHAN_MODE);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    log(&quot;Groovy : OrphanContainerValidator done!&quot;)&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  private final String CANNOT_DISCHARGE_UNIT_WITH_DISCH_PLAN_IN_ORPHAN_MODE = &quot;Cannot discharge actual unit with plan to yard in orphan mode&quot;;&#xD;&#xA;}&#xD;&#xA;" />
<extension name="MATPopulateEqTypeInGateTrans" scope="MATSON" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;&#xA;/**&#xA; * This groovy sets Equipment Container Type on the receive transactions.&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 06/07/15&#xA; * JIRA: ARGO-75843&#xA; * SFDC: 141197&#xA; *&#xA; */&#xA;&#xA;public class MATPopulateEqTypeInGateTrans extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;{&#xA;&#xA;    GroovyApi gapi = new GroovyApi();&#xA;&#xA;    public void execute(TransactionAndVisitHolder inOutDao)&#xA;    {&#xA;        executeInternal(inOutDao);&#xA;&#xA;        gapi.log(&quot;Begin Groovy MATPopulateEqTypeinGateTrans&quot;);&#xA;&#xA;        if (inOutDao.getTv() == null || inOutDao.getTran() == null)&#xA;        {&#xA;            gapi.log(&quot;Null Truck Visit or Null Transaction&quot;);&#xA;            return;&#xA;        }&#xA;&#xA;        TruckTransaction thisTran = inOutDao.getTran();&#xA;&#xA;        Equipment thisContainer = thisTran.getTranEq();&#xA;&#xA;        if (thisContainer == null)&#xA;        {&#xA;            gapi.log(&quot;Null equipment&quot;);&#xA;            return;&#xA;        }&#xA;&#xA;        thisTran.setTranCtrTypeId(thisContainer.getEqEquipType().getEqtypId());&#xA;&#xA;    }&#xA;}&#xA;" />
<extension name="MATPlaceUnitInYard" scope="MATSON" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.IEvent&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.model.LocPosition&#xA;import com.navis.argo.business.model.Yard&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.inventory.business.api.RectifyParms&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.road.business.atoms.TranStatusEnum&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.model.TruckVisitDetails&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import com.navis.services.business.rules.EventType&#xA;&#xA;/**&#xA; * This groovy places the unit in yard position specified on receive transaction&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 06/29/15&#xA; * JIRA: CSDV-3063&#xA; * SFDC: 142561&#xA; *&#xA; * 7/2/2015 - Insert UNIT_RECEIVE and UNIT_IN_GATE events into the units' history.&#xA; *&#xA; * 7/12/2015 - Remove 'executeInternal'&#xA; *&#xA; * 7/30/2015 - Add code to update UCC and ECC codes&#xA; * &#xA; * 9/2/2015 - Remove the ECC and UCC code maitenance &#xA; *&#xA; * 10/16/2015 BG - Added validation for UNIT_IN_GATE through service business rule check&#xA; */&#xA;&#xA;public class MATPlaceUnitInYard extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        this.log(&quot;Execution Started MATPlaceUnitInYard&quot;);&#xA;&#xA;&#xA;        /* check various components of the gate transaction to insure everything needed is present. */&#xA;&#xA;        if (inDao == null)&#xA;            return;&#xA;&#xA;        TruckVisitDetails ThisTV = inDao.getTv();&#xA;&#xA;        if (ThisTV == null)&#xA;            return;&#xA;&#xA;        /* Get the trasnactions from the truck visit. */&#xA;&#xA;        Set&lt;TruckTransaction&gt; TheseTransactions = ThisTV.getTvdtlsTruckTrans();&#xA;&#xA;        if (TheseTransactions != null &amp;&amp; !TheseTransactions.isEmpty())&#xA;        {&#xA;&#xA;            Yard ThisYard = ContextHelper.getThreadYard();&#xA;&#xA;            for (TruckTransaction ThisTran : TheseTransactions)&#xA;            {&#xA;&#xA;                if (ThisTran.isReceival() &amp;&amp; ThisTran.getTranStatus() == TranStatusEnum.COMPLETE)&#xA;                {&#xA;&#xA;                    /* get the position specified in the transaction */&#xA;&#xA;                    UnitFacilityVisit ThisUFV = ThisTran.getTranUfv();&#xA;&#xA;                    String ThisYardRow = ThisTran.getTranFlexString03();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;INGATE EMPTY ThisYard&quot;+ThisYard);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;INGATE EMPTY ThisYardRow&quot;+ThisYardRow);&#xA;                    LocPosition ThisCtrPos = LocPosition.createYardPosition(ThisYard, ThisYardRow, null, null, false);&#xA;&#xA;                    /* rectify the unit into that yard position */&#xA;&#xA;                    RectifyParms thisRectifyParm = new RectifyParms();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;INGATE EMPTY 1&quot;+UfvTransitStateEnum.S40_YARD);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;INGATE EMPTY 2&quot;+UnitVisitStateEnum.ACTIVE);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;INGATE EMPTY 3&quot;+ThisCtrPos);&#xA;                    thisRectifyParm.setEraseHistory(false);&#xA;                    thisRectifyParm.setUfvTransitState(UfvTransitStateEnum.S40_YARD);&#xA;                    thisRectifyParm.setUnitVisitState(UnitVisitStateEnum.ACTIVE);&#xA;                    thisRectifyParm.setPosition(ThisCtrPos);&#xA;                    println(&quot;INGATE EMPTYthisRectifyParm&quot;+thisRectifyParm);&#xA;                    ThisUFV.rectify(thisRectifyParm);&#xA;&#xA;                    /* insert a unit_receive event into the history */&#xA;&#xA;                    ServicesManager sm = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;&#xA;                    Unit ThisUnit = ThisTran.getTranUnit();&#xA;&#xA;&#xA;                    EventType InGateEventType = EventType.findEventType('UNIT_IN_GATE');&#xA;&#xA;                    if (sm != null &amp;&amp; InGateEventType != null &amp;&amp; ThisUnit != null)&#xA;                    {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BizViolation bizViolation = sm.verifyEventAllowed(InGateEventType, ThisUnit);&#xA;                        if (bizViolation!= null) {&#xA;                            RoadBizUtil.appendExceptionChainAsWarnings(bizViolation);&#xA;                           //throw bizViolation;&#xA;                        }&#xA;                        (IEvent) sm.recordEvent(InGateEventType, &quot;Unit received &quot;, null, null, ThisUnit, null, null);&#xA;                    }&#xA;&#xA;                    EventType receiveEventType = EventType.findEventType('UNIT_RECEIVE');&#xA;&#xA;                    if (sm != null &amp;&amp; receiveEventType != null &amp;&amp; ThisUnit != null)&#xA;                    {&#xA;                        (IEvent) sm.recordEvent(receiveEventType, &quot;Unit received &quot;, null, null, ThisUnit, null, null);&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}" />
<extension name="ConsigneeShipperNamesToUpper" scope="MATSON" type="ENTITY_LIFECYCLE_INTERCEPTION" language="GROOVY" is-enabled="Y" contents="/**&#xA; * Author: Karthik Rajendran&#xA; * Created date: 06/29/2013&#xA; * Description: This Groovy sets the Consignee, Shipper fields to upper case and invoke update MatUpdateUnitConsigneeNotes groovy&#xA; * &#xA; */&#xA;&#xA;import com.navis.external.framework.entity.AbstractEntityLifecycleInterceptor&#xA;import com.navis.external.framework.entity.EEntityView&#xA;import com.navis.external.framework.util.EFieldChanges&#xA;import com.navis.external.framework.util.EFieldChangesView&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.apex.business.model.GroovyInjectionBase&#xA;&#xA;public class ConsigneeShipperNamesToUpper extends AbstractEntityLifecycleInterceptor {&#xA;&#x9;public void onUpdate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges) {&#xA;&#x9;&#x9;this.log(&quot;START : ******* ConsigneeShipperNamesToUpper.onUpdate() *******&quot;)&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;Unit unit =  inEntity._entity&#xA;&#x9;&#x9;&#x9;this.log(&quot;Unit ID = &quot;+unit.unitId+&quot;\t BLNBR = &quot;+unit.getFieldValue(&quot;unitGoods.gdsBlNbr&quot;))&#xA;&#x9;&#x9;&#x9;GoodsBase goods = unit.getUnitGoods()&#xA;&#x9;&#x9;&#x9;def inj = new GroovyInjectionBase()&#xA;&#x9;&#x9;&#x9;// Shipper Name To Upper case&#xA;&#x9;&#x9;&#x9;def unitShipper = unit.getFieldValue(&quot;unitGoods.gdsShipperAsString&quot;)&#xA;&#x9;&#x9;&#x9;def unitShipperUpper = null&#xA;&#x9;&#x9;&#x9;if(!unitShipper.equals(null)) {&#xA;&#x9;&#x9;&#x9;&#x9;unitShipperUpper = unitShipper.toUpperCase()&#xA;&#x9;&#x9;&#x9;&#x9;if(!unitShipper.equals(unitShipperUpper)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsShipperBzu.bzuName&quot;,unitShipperUpper)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsShipperBzu.bzuId&quot;,unitShipperUpper)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;this.log(&quot;ORIG SHIPPER=&quot;+unitShipper+&quot;\t -&gt; \t NEW SHIPPER=&quot;+unitShipperUpper)&#xA;&#x9;&#x9;&#x9;// Consignee Name To Upper case&#xA;&#x9;&#x9;&#x9;def unitConsignee = unit.getFieldValue(&quot;unitGoods.gdsConsigneeAsString&quot;)&#xA;&#x9;&#x9;&#x9;def unitConsigneeUpper = null&#xA;&#x9;&#x9;&#x9;if(!unitConsignee.equals(null)) {&#xA;&#x9;&#x9;&#x9;&#x9;unitConsigneeUpper = unitConsignee.toUpperCase()&#xA;&#x9;&#x9;&#x9;&#x9;boolean isOrigConsigneeUpper = unitConsignee.equals(unitConsigneeUpper)&#xA;&#x9;&#x9;&#x9;&#x9;if(!isOrigConsigneeUpper) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuName&quot;,unitConsigneeUpper)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit.setFieldValue(&quot;unitGoods.gdsConsigneeBzu.bzuId&quot;,unitConsigneeUpper)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;this.log(&quot;ORIG CONSIGNEE=&quot;+unitConsignee+&quot;\t -&gt; \t NEW CONSIGNEE=&quot;+unitConsigneeUpper)&#xA;&#x9;&#x9;&#x9;// Consignee Notes Update&#xA;&#x9;&#x9;&#x9;def MatUpdateUnitConsigneeNotes = inj.getGroovyClassInstance(&quot;MatUpdateUnitConsigneeNotes&quot;)&#xA;&#x9;&#x9;&#x9;MatUpdateUnitConsigneeNotes.updateNotes(unit)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch (Throwable e) {&#xA;&#x9;&#x9;&#x9;this.log(&quot;ConsigneeShipperNamesToUpper.onUpdate(): error occured while attempting to set ShipperName/ConsigneeName field to uppercase \n&quot; + e.getMessage())&#xA;&#x9;&#x9;&#x9;e.printStackTrace()&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.log(&quot;END : ******* ConsigneeShipperNamesToUpper.onUpdate() *******&quot;)&#xA;&#x9;}&#xA;}&#xA;" />
<extension name="DischargeCompleteGroovy" scope="MATSON" type="ENTITY_LIFECYCLE_INTERCEPTION" language="GROOVY" is-enabled="Y" contents="import com.navis.argo.business.model.Facility;&#xA;import com.navis.external.framework.entity.AbstractEntityLifecycleInterceptor&#xA;import com.navis.external.framework.entity.EEntityView&#xA;import com.navis.external.framework.util.EFieldChanges&#xA;import com.navis.external.framework.util.EFieldChangesView&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.rules.EventType&#xA;import com.navis.argo.business.atoms.WiMoveKindEnum;&#xA;import com.navis.inventory.business.moves.MoveEvent&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;//import com.navis.argo.business.model.Position;&#xA;import com.navis.spatial.business.model.Position;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import org.apache.log4j.Logger;&#xA;import com.navis.framework.portal.FieldChanges;&#xA;&#xA;/**&#xA; * 2011.10.30 Gbabu Unit discharge is created when the container is placed on the truck, so updates&#xA; * are not being sent to other interfaces with the correct position&#xA; * This Groovy records a custom event UNIT_DISCH_COMPLETE&#xA; */&#xA;class DischargeCompleteGroovy extends AbstractEntityLifecycleInterceptor {&#xA;&#xA;    void onCreate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges) {&#xA;        if (inOriginalFieldChanges == null) {&#xA;            log(&quot;MoveEvent(onupdate) Groovy called with null field changes, ignoring the call&quot;);&#xA;            return;&#xA;        }&#xA;&#xA;        try {&#xA;            recordServiceEventOnDischargeCompletion(inEntity, inOriginalFieldChanges, inMoreFieldChanges)&#xA;        } catch (Throwable e) {&#xA;            log(&quot;MoveEventGroovy: Problem occured while attempting to write custom event on discharge/deramp completion &quot; + e.getMessage());&#xA;            e.printStackTrace();&#xA;            LOGGER.error(&quot;MoveEventGroovy: error occured while attempting to write custom event&quot;, e);&#xA;        }&#xA;&#xA;    }&#xA;&#xA;    public void onUpdate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges) {&#xA;        if (inOriginalFieldChanges == null) {&#xA;            log(&quot;MoveEvent(onupdate) Groovy called with null field changes, ignoring the call&quot;);&#xA;            return;&#xA;        }&#xA;&#xA;        try {&#xA;            recordServiceEventOnDischargeCompletion(inEntity, inOriginalFieldChanges, inMoreFieldChanges)&#xA;        } catch (Throwable e) {&#xA;            log(&quot;MoveEventGroovy: Problem occured while attempting to write custom event on discharge/deramp completion &quot; + e.getMessage());&#xA;            e.printStackTrace();&#xA;            LOGGER.error(&quot;MoveEventGroovy: error occured while attempting to write custom event&quot;, e);&#xA;        }&#xA;    }&#xA;&#xA;    public void validateChanges(EEntityView inEntity, EFieldChangesView inFieldChanges) {&#xA;&#xA;// Extra logging for debuggin, can be removed.&#xA;&#xA;    }&#xA;&#xA;    private void recordServiceEventOnDischargeCompletion(EEntityView inEntity, EFieldChangesView inFieldChanges, EFieldChanges inMoreFieldChanges) {&#xA;&#xA;        Object entityObject = inEntity._entity&#xA;        if (!(entityObject instanceof MoveEvent)) {&#xA;            log(&quot;ignoring the call as the underlying entity is not MoveEntity&quot;)&#xA;            return;&#xA;        }&#xA;&#xA;        MoveEvent thisEvent = inEntity._entity&#xA;&#xA;        WiMoveKindEnum moveKind = thisEvent.getMveMoveKind();&#xA;        if (moveKind != null &amp;&amp; WiMoveKindEnum.VeslDisch.equals(moveKind) &amp;&amp; thisEvent.mveTimePut != null) {&#xA;&#xA;            UnitFacilityVisit inUfv = thisEvent.getMveUfv();&#xA;&#xA;            String completionStringFromXps = thisEvent.getEvntAppliedBy();&#xA;            Facility eventFacility = thisEvent.getEvntFacility();&#xA;            String completionStringExpectedFromXps = &quot;COMPLETE_MOVE&quot;;&#xA;            Position toPos = thisEvent.getMveToPosition();&#xA;            Position fromPos = thisEvent.getMveFromPosition();&#xA;            boolean isTimeComplete = thisEvent.mveTimePut != null;&#xA;            ServicesManager sm = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID)&#xA;            EventType eventType = EventType.findEventType('UNIT_DISCH_COMPLETE')&#xA;            if (sm != null &amp;&amp; eventType != null) {&#xA;                if (inUfv != null) {&#xA;                    Unit unit = inUfv.getUfvUnit();&#xA;                    if (unit != null) {&#xA;                        String unitId = unit.getUnitId();&#xA;                        String eventNote = &quot;Discharge completed for unit : &quot; + unitId;&#xA;                        try {&#xA;                            sm.recordEvent(eventType, eventNote, null, null, unit, (FieldChanges) null)&#xA;                            log(&quot;MoveEventGroovy: Recorded Event : &quot; + eventNote);&#xA;                            if (eventFacility != null) {&#xA;                                Event event = (Event) sm.getMostRecentEvent(eventType, unit);&#xA;                                if (event != null) {&#xA;                                    event.setEvntFacility(eventFacility);&#xA;                                    event.setEvntYard(eventFacility.getActiveYard());&#xA;                                }&#xA;                            }&#xA;&#xA;                        } catch (Exception e) {&#xA;                            // do not throw error for now&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;    private Logger LOGGER = Logger.getLogger(MoveEvent.class);&#xA;}" />
<extension name="MATCtrScanLifeCyleInterceptor" scope="MATSON" type="ENTITY_LIFECYCLE_INTERCEPTION" language="GROOVY" is-enabled="N" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;import com.navis.external.framework.entity.AbstractEntityLifecycleInterceptor&#xA;import com.navis.external.framework.entity.EEntityView&#xA;import com.navis.external.framework.util.EFieldChange&#xA;import com.navis.external.framework.util.EFieldChanges&#xA;import com.navis.external.framework.util.EFieldChangesView&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.road.RoadField&#xA;&#xA;/**&#xA; * This groovy pulls the seal number from a unit in the yard and adds it to the scan data when record-scan is processed&#xA; * The process needs the existing unit's seals to populate on the gate screen for the outgate.&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 06/09/19&#xA; * JIRA: ARGO-75840&#xA; * SFDC: 141196&#xA; *&#xA; */&#xA;&#xA;public class MATCtrScanLifeCyleInterceptor extends AbstractEntityLifecycleInterceptor&#xA;{&#xA;    @Override&#xA;    void onCreate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges)&#xA;    {&#xA;        this.onCreateOrUpdate(inEntity, inOriginalFieldChanges, inMoreFieldChanges);&#xA;    }&#xA;&#xA;    @Override&#xA;    void onUpdate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges)&#xA;    {&#xA;&#xA;        this.onCreateOrUpdate(inEntity, inOriginalFieldChanges, inMoreFieldChanges);&#xA;    }&#xA;&#xA;    @Override&#xA;    void onCreateOrUpdate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges)&#xA;&#xA;    {&#xA;        this.log (&quot;MATCtrScanLifeCyleInterceptor: Started&quot;);&#xA;&#xA;        this.log (&quot;inOriginalFieldChanges &quot; + inOriginalFieldChanges)&#xA;&#xA;        /* exit if no changes */&#xA;&#xA;        if (inOriginalFieldChanges == null || inOriginalFieldChanges.getFieldChangeCount() == 0)&#xA;            return;&#xA;&#xA;        /* find the active unit for the container in the scan */&#xA;&#xA;        if (inOriginalFieldChanges.hasFieldChange(RoadField.SCANCTR_ID))&#xA;        {&#xA;&#xA;            /* if there is a container ID in the scan being saved get the ID */&#xA;            &#xA;            EFieldChange scanContainer = inOriginalFieldChanges.findFieldChange(RoadField.SCANCTR_ID);&#xA;            String ctrId = scanContainer.getNewValue();&#xA;&#xA;            /* find any active unit in the yard with that ID */&#xA;            &#xA;            Unit thisUnit = findActiveUnitInYard(ctrId);&#xA;&#xA;            this.log (&quot;thisUnit &quot; + thisUnit)&#xA;&#xA;            if (thisUnit != null)&#xA;            {&#xA;                &#xA;                /* if there is an active unit in the yard copy it's seal number into the scan so that it will populate on the gate screen */&#xA;                &#xA;                inMoreFieldChanges.setFieldChange(RoadField.SCANCTR_SEAL_NBR1, thisUnit.getUnitSealNbr1());&#xA;&#xA;                this.log(&quot;inMoreFieldChanges &quot; + inMoreFieldChanges)&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;&#xA;    /* Local function to find the an active container unit in the yard unit */&#xA;&#xA;    private Unit findActiveUnitInYard (String ctrId)&#xA;&#xA;    {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_VISIT_STATE,  UnitVisitStateEnum.ACTIVE))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_CURRENT_UFV_TRANSIT_STATE, UfvTransitStateEnum.S40_YARD))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_ID, ctrId))&#xA;&#xA;        Unit[] unitList=Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;&#xA;        if(unitList == null || unitList.size()==0)&#xA;        {&#xA;            return null;&#xA;        }&#xA;        return unitList[0];&#xA;    }&#xA;}" />
<extension name="MATSetHoldForOOG" scope="MATSON" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;/**&#xA; * This groovy checks if the transaction OOG flag is set and applies a OOG_PENDING hold&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 07/29/15&#xA; * JIRA: CSDV-3063&#xA; * SFDC: 142561&#xA; *&#xA; * Peter Seiler&#xA; * 09/08/2015&#xA; *&#xA; * Fix null pointer exception if transaction has error&#xA; *&#xA; */&#xA;&#xA;public class MATSetHoldForOOG extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        this.log(&quot;Execution Started MATSetHoldForOOG&quot;);&#xA;&#xA;        if (inDao == null)&#xA;            return;&#xA;&#xA;        TruckTransaction ThisTran = inDao.getTran();&#xA;&#xA;        this.log(&quot;ThisTV &quot; + ThisTran)&#xA;&#xA;        if (ThisTran == null)&#xA;            return;&#xA;&#xA;        /* if the transaction is flagged as OOG, place a OOG_PENDING hold on the unit */&#xA;&#xA;        Unit ThisUnit = ThisTran.getTranUnit();&#xA;&#xA;        if (ThisTran.tranIsOog &amp;&amp; ThisUnit != null)&#xA;        {&#xA;&#xA;            ServicesManager servicesMgr = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;&#xA;            servicesMgr.applyHold('OOG_PENDING', ThisUnit, null, null, null);&#xA;&#xA;        }&#xA;    }&#xA;}" />
<extension name="MATSyncUnitFlexWithBooking" scope="MATSON" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;&#xA;import com.navis.argo.ArgoBizMetafield&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.api.IServiceEventFieldChange&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.util.ValueObject&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.units.EqBaseOrder&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.orders.OrdersField&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.orders.business.eqorders.EquipmentOrder&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; * This groovy applies the booking stow block to the unit's priority stow (UnitFlexSting08) when the unit is rolled to a new booking&#xA; * This is triggered with a UNIT_ROLL event&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 08/05/15&#xA; * JIRA: ARGO-76865&#xA; * SFDC: 142550&#xA; *&#xA; */&#xA;&#xA;public class MATSyncUnitFlexWithBooking extends AbstractGeneralNoticeCodeExtension&#xA;&#xA;{&#xA;    public void execute(GroovyEvent inEvent)&#xA;&#xA;    {&#xA;        this.log(&quot;Execution Started MATSyncUnitFlexWithBooking&quot;);&#xA;&#xA;        /* get the event */&#xA;&#xA;        Event ThisEvent = inEvent.getEvent();&#xA;&#xA;        if (ThisEvent == null)&#xA;            return;&#xA;&#xA;        /* Get the unit and the Booking */&#xA;&#xA;        Unit ThisUnit = (Unit) inEvent.getEntity();&#xA;&#xA;        this.log(&quot;Unit is &quot; + ThisUnit)&#xA;&#xA;        EqBaseOrder ThisBaseOrder = ThisUnit.getDepartureOrder();&#xA;&#xA;        this.log(&quot;Depart order &quot; + ThisBaseOrder)&#xA;&#xA;        EquipmentOrder ThisEqOrd = EquipmentOrder.resolveEqoFromEqbo(ThisBaseOrder);&#xA;&#xA;        this.log(&quot;Equipmnet Order &quot; + ThisEqOrd)&#xA;        Booking ThisBooking = findBookingFromEventChanges(ThisEvent, ThisUnit);&#xA;&#xA;        this.log(&quot;Booking from new value is &quot; + ThisBooking)&#xA;        if (ThisBooking == null) {&#xA;            ThisBooking = Booking.resolveBkgFromEqo(ThisEqOrd);&#xA;        }&#xA;&#xA;        this.log(&quot;Booking is &quot; + ThisBooking);&#xA;&#xA;        /* set the unit's priority stow value */&#xA;&#xA;        ThisUnit.setUnitFlexString08(ThisBooking.getEqoStowBlock());&#xA;&#xA;&#xA;        //INCORPORATES THE CODE FROM GvyCmisEquiDetail GROOVY, AS CODE IS NOT WORKING THERE&#xA;        this.log(&quot;Updating srv company : 989898&quot;);&#xA;        update(inEvent, ThisBooking);&#xA;    }&#xA;&#xA;    public Booking findBookingFromEventChanges(Event event, Unit ThisUnit) {&#xA;        Booking  booking = null;&#xA;        Iterator fcIt = event.getFieldChanges().iterator();&#xA;        String eqboNbr = null;&#xA;        String eqboVisit = null;&#xA;        String eqboDclrdVisit = null;&#xA;        while(fcIt.hasNext()) {&#xA;            IServiceEventFieldChange fc = (IServiceEventFieldChange)fcIt.next();&#xA;            ValueObject fcVao = new ValueObject(&quot;IServiceEventFieldChange&quot;);&#xA;            MetafieldId metafieldId = MetafieldIdFactory.valueOf(fc.getMetafieldId());&#xA;            /*fcVao.setFieldValue(ArgoBizMetafield.EVENT_FIELD_CHANGE_METAFIELD_ID, metafieldId);&#xA;            fcVao.setFieldValue(ArgoBizMetafield.EVENT_FIELD_CHANGE_PREV_VALUE, ThisEvent.getFieldChangeValue(metafieldId, fc.getPrevVal()));&#xA;            fcVao.setFieldValue(ArgoBizMetafield.EVENT_FIELD_CHANGE_NEW_VALUE, ThisEvent.getFieldChangeValue(metafieldId, fc.getNewVal()));*/&#xA;            this.log(&quot;Field : &quot;+metafieldId.toString());&#xA;            this.log(&quot;Prev Value : &quot;+event.getFieldChangeValue(metafieldId, fc.getPrevVal()).toString());&#xA;            this.log(&quot;New Value  : &quot;+event.getFieldChangeValue(metafieldId, fc.getNewVal()).toString());&#xA;&#xA;            if (InventoryField.EQBO_NBR.equals(metafieldId)) {&#xA;                eqboNbr = event.getFieldChangeValue(metafieldId, fc.getNewVal()).toString();&#xA;            }&#xA;            if (InventoryField.UFV_INTENDED_OB_CV.equals(metafieldId)) {&#xA;                eqboVisit = event.getFieldChangeValue(metafieldId, fc.getNewVal()).toString();&#xA;            }&#xA;            if (InventoryField.RTG_DECLARED_CV.equals(metafieldId)) {&#xA;                eqboDclrdVisit = event.getFieldChangeValue(metafieldId, fc.getNewVal()).toString();&#xA;            }&#xA;        }&#xA;        if (eqboVisit == null) {&#xA;            eqboVisit = eqboDclrdVisit;&#xA;        }&#xA;        if (eqboNbr != null &amp;&amp; eqboVisit != null) {&#xA;            this.log(&quot;eqboNBR : &quot;+eqboNbr + &quot; // eqboVisit : &quot;+eqboVisit);&#xA;            CarrierVisit cv = CarrierVisit.findVesselVisit(ContextHelper.getThreadFacility(), eqboVisit);&#xA;            booking = Booking.findBooking(eqboNbr, ThisUnit.getUnitLineOperator(), cv);&#xA;            if (booking == null) {&#xA;                try {&#xA;                    booking = Booking.findBookingWithoutLine(eqboNbr, cv);&#xA;                } catch (Exception e) {&#xA;                    this.log(&quot;Couldnt find the booking with eqboNbr and Visit&quot;)&#xA;                }&#xA;            }&#xA;            if (booking == null) {&#xA;                try {&#xA;                    booking = Booking.findBookingsByNbr(eqboNbr);&#xA;                } catch (Exception e) {&#xA;                    this.log(&quot;Couldnt find the booking only with eqboNbr&quot;)&#xA;                }&#xA;            }&#xA;        }&#xA;        return booking;&#xA;    }&#xA;&#xA;    public void update(GroovyEvent inEvent, Booking thisBooking) {&#xA;&#xA;        GroovyApi api = new GroovyApi();&#xA;        Event  thisEvent = inEvent.getEvent();&#xA;        this.log(&quot;inside update srv company : &quot;+thisBooking.getEqboNbr());&#xA;        if (thisEvent == null) {&#xA;            return;&#xA;        }&#xA;&#xA;        Unit unit = (Unit) inEvent.getEntity();&#xA;&#xA;        if (unit == null) {&#xA;            return;&#xA;        }&#xA;        this.log(&quot;Start Event ---:&quot;+thisEvent.getEventTypeId()+ &quot; on Unit :&quot;+unit.getUnitId()+&quot; ---:&quot;)&#xA;&#xA;        def doer = thisEvent.getEvntAppliedBy()&#xA;        boolean isAlwaysSendIGT = false;&#xA;        try {&#xA;            if (unit != null) {&#xA;&#xA;                this.log(&quot;56565656Loaded unit from DB : &quot;+unit.getUnitId());&#xA;                UnitEquipment unitEquipment = unit.getUnitPrimaryUe();&#xA;                EquipmentState ueEquipmentState = unitEquipment.getUeEquipmentState()&#xA;                def equipFlex01 = ueEquipmentState != null ? ueEquipmentState.getEqsFlexString01() : ''&#xA;                this.log(&quot;ueEquipmentState :equipFlex01(getEqsFlexString01) Value---:&quot;+equipFlex01)&#xA;                String serviceId = setEqCntrSvr(inEvent, thisBooking);&#xA;                this.log(&quot;ueEquipmentState :equipFlex01(getEqsFlexString01) Value1---:&quot;+equipFlex01)&#xA;                /**&#xA;                 * For creating the case with Navis, Logging required details.&#xA;                 */&#xA;                this.log(Level.INFO, &quot;UNIT_ROLL details from unit Object&quot;);&#xA;                this.log(Level.INFO, &quot;The value of getEqsFlexString01 from Unit Object &quot; + equipFlex01);&#xA;                this.log(Level.INFO, &quot;Equipment Operator &quot; + unit.getUnitPrimaryUe().getUeEqOperator().getBzuId());&#xA;                this.log(Level.INFO, &quot;Vessel Line Operator &quot; + unit.getOutboundCv().getCvOperator().getBzuId());&#xA;                this.log(Level.INFO, &quot;Vessel Line Operator from Booking &quot; + thisBooking.getEqoVesselVisit().getCarrierOperator().getBzuId());&#xA;                this.log(Level.INFO, &quot;getEqsFlexString01 from booking&quot; + serviceId);&#xA;                /**&#xA;                 * For creating the case with Navis, Logging required details.&#xA;                 * Ends here, this block can be removed after the case is resolved.&#xA;                 */&#xA;                //unitEquipment = unit.getUnitPrimaryUe();&#xA;                if (equipFlex01 != null) {&#xA;                    //ueEquipmentState = unitEquipment.getUeEquipmentState();&#xA;                    //ueEquipmentState.setEqsFlexString01(serviceId);&#xA;                    def newEquipFlex01 = serviceId;&#xA;                    //ueEquipmentState != null ? ueEquipmentState.getEqsFlexString01() : '';&#xA;                    this.log(&quot;ueEquipmentState :newEquipFlex01(getEqsFlexString01) Value-11--:&quot;+newEquipFlex01);&#xA;                    if (newEquipFlex01!= null &amp;&amp; &quot;MAT&quot;.equalsIgnoreCase(newEquipFlex01) &amp;&amp; !&quot;MAT&quot;.equalsIgnoreCase(equipFlex01)) {&#xA;                        isAlwaysSendIGT = true;&#xA;                        this.log(&quot;isAlwaysSendIGT true&quot;)&#xA;                    }&#xA;                }&#xA;&#xA;            }&#xA;        } catch(Exception e) {&#xA;            this.log(&quot;exception thrown : &quot;+e.getMessage());&#xA;        }&#xA;        if(!doer.contains('FRUCTOSE_MTY')){&#xA;            this.log(&quot; ! FRUCTOSE_MTY&quot;)&#xA;            def gvyPropUpdtObj = api.getGroovyClassInstance(&quot;GvyCmisEventUnitPropertyUpdate&quot;)&#xA;            gvyPropUpdtObj.processUnitPropertyUpdate(inEvent,api,  isAlwaysSendIGT)&#xA;        }&#xA;    }&#xA;&#xA;    public String setEqCntrSvr(GroovyEvent event, Booking thisBooking) {&#xA;        String srvId = &quot;MAT&quot;;&#xA;        LOGGER.setLevel(Level.DEBUG);&#xA;        LOGGER.info(&quot;Inside GvyCmisEquiDetail.setEqCntrSvr&quot;)&#xA;        Unit unit = event.getEntity();&#xA;&#xA;        String eventId = event.getEvent().getEventTypeId()&#xA;        LOGGER.debug(&quot;Event ID  &quot;+eventId);&#xA;        try {&#xA;            //Get Equi SRV&#xA;            UnitEquipment unitEquipment = unit.getUnitPrimaryUe()&#xA;            LOGGER.debug(&quot;Unit Equipment    &quot;+unitEquipment);&#xA;            EquipmentState ueEquipmentState = unitEquipment.getUeEquipmentState()&#xA;            String equipFlex01 = ueEquipmentState != null ? ueEquipmentState.getEqsFlexString01() : null&#xA;            LOGGER.info(&quot;getEqsFlexString01/ Eq Srv Company : &quot;+equipFlex01);&#xA;            if (equipFlex01 != null &amp;&amp; !(eventId.equals('UNIT_DISCH_COMPLETE') || eventId.equals('UNIT_IN_GATE') ||&#xA;                    eventId.equals('UNIT_ROLL'))) {&#xA;                return;&#xA;            }&#xA;            String unitLineOperator = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOperator.bzuId&quot;)&#xA;            LOGGER.info(&quot;Unit Line Operator &quot;+unitLineOperator);&#xA;            unitLineOperator = unitLineOperator != null ? unitLineOperator : ''&#xA;            String equiSrv = &quot;&quot;;&#xA;            String vesLineOptr = &quot;&quot;;&#xA;            //Thread.sleep(1000);&#xA;            if (eventId.equals('UNIT_ROLL')) {&#xA;                //Ingate Bkg Line Operator&#xA;//                vesLineOptr = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdBizu.bzuId&quot;);&#xA;                vesLineOptr = thisBooking.getEqoVesselVisit().getCarrierOperator().getBzuId();&#xA;                LOGGER.debug(unit.getUnitId() + &quot; -&gt;Value of UNIT OB vesLineOptr from Object is &quot;+vesLineOptr);&#xA;            }&#xA;            LOGGER.info(&quot;vesLineOptr    &quot;+vesLineOptr+&quot; : unitLineOperator &quot;+unitLineOperator);&#xA;            //verify and set EqSrv Cntr&#xA;            vesLineOptr = vesLineOptr != null ? vesLineOptr : (unitLineOperator.equals('MAT') ? 'MAT' : '')&#xA;            vesLineOptr = !vesLineOptr.equals('MAT') ? 'CLI' : 'MAT'&#xA;            LOGGER.debug(&quot;Value of vesLineOptr after manipulation is    &quot;+vesLineOptr);&#xA;            ueEquipmentState.setEqsFlexString01(vesLineOptr)&#xA;            LOGGER.info(&quot;setEqsFlexString01 / New Eq Container Service   &quot;+vesLineOptr);&#xA;            LOGGER.info(&quot;eventId ::&quot; + eventId + &quot; Eq SRV :&quot; + equipFlex01 + &quot; vesLineOptr :&quot; + vesLineOptr + &quot;    unitLineOperator::&quot; + unitLineOperator)&#xA;            srvId = vesLineOptr;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return srvId;&#xA;    }&#xA;    private static final Logger LOGGER = Logger.getLogger(MATSyncUnitFlexWithBooking.class);&#xA;}" />
<extension name="MATBookingLifeCyleInterceptor" scope="MATSON" type="ENTITY_LIFECYCLE_INTERCEPTION" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;import com.navis.external.framework.entity.AbstractEntityLifecycleInterceptor&#xA;import com.navis.external.framework.entity.EEntityView&#xA;import com.navis.external.framework.util.EFieldChange&#xA;import com.navis.external.framework.util.EFieldChanges&#xA;import com.navis.external.framework.util.EFieldChangesView&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.orders.OrdersField&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.orders.business.eqorders.EquipmentOrderItem&#xA;&#xA;/**&#xA; * The priory code passed in the booking SNX needs to be populated onto unitFlexString08&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 08/04/15&#xA; * JIRA: ARGO-76865&#xA; * SFDC: 142550&#xA; *&#xA; */&#xA;&#xA;public class MATBookingLifeCyleInterceptor extends AbstractEntityLifecycleInterceptor&#xA;{&#xA;&#xA;    @Override&#xA;    void onUpdate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges)&#xA;    {&#xA;&#xA;        String ThisStowBlock = null;&#xA;&#xA;        this.log(&quot;MATBookingLifeCyleInterceptor: Started&quot;);&#xA;&#xA;        /* get the equipment order entity */&#xA;&#xA;        Booking ThisEqOrder = inEntity._entity;&#xA;&#xA;        if (inOriginalFieldChanges.hasFieldChange(OrdersField.EQO_STOW_BLOCK))&#xA;        {&#xA;&#xA;            EFieldChange RemarksChng = inOriginalFieldChanges.findFieldChange(OrdersField.EQO_STOW_BLOCK);&#xA;&#xA;            ThisStowBlock = RemarksChng.getNewValue();&#xA;        }&#xA;        else&#xA;        {&#xA;            /* if the stow block is not updated, exit */&#xA;&#xA;            return;&#xA;        }&#xA;&#xA;        /* get the order items on the booking */&#xA;        &#xA;        for (EquipmentOrderItem ThisEQOI : ThisEqOrder.getEqboOrderItems())&#xA;        {&#xA;            &#xA;            /* get the units for each order item */&#xA;&#xA;            List&lt;UnitEquipment&gt; UE_OnEQOI = this.findUnitEqForOrderItem(ThisEQOI.getEqboiGkey());&#xA;&#xA;            for (UnitEquipment ThisUE : UE_OnEQOI)&#xA;            {&#xA;                &#xA;                /* set the priority stow for each unit associated with the booking */&#xA;                &#xA;                Unit ThisUnit = ThisUE.getUeUnit();&#xA;                ThisUnit.setUnitFlexString08(ThisStowBlock);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    /* local function to find UnitEquipment associated with an EquipmentOrderItem */&#xA;&#xA;    private List&lt;UnitEquipment&gt; findUnitEqForOrderItem(long inEQOI)&#xA;    {&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT_EQUIPMENT)&#xA;                .addDqPredicate(PredicateFactory.eq(InventoryField.UE_DEPARTURE_ORDER_ITEM, inEQOI));&#xA;&#xA;        List&lt;UnitEquipment&gt; UEList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#xA;        this.log (&quot;UEList &quot; + UEList)&#xA;&#xA;        return UEList;&#xA;    }&#xA;}" />
<extension name="MATDepartUnit" scope="MATSON" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.util.message.MessageLevel&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.api.UnitManager&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitManagerPea&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;&#xA;/**&#xA; * Check * This groovy departs the unit in a one-stage gate&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 06/30/15&#xA; * JIRA: CSDV-3063&#xA; * SFDC: 142561&#xA; *&#xA; */&#xA;&#xA;public class MATDepartUnit extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        this.log(&quot;Execution Started MATDepartUnit&quot;);&#xA;&#xA;        /* Execute the built-in logic got the business task. */&#xA;&#xA;        executeInternal(inDao);&#xA;&#xA;        TruckTransaction ThisTran = inDao.getTran();&#xA;&#xA;        /* get out if no gate transaction is found */&#xA;&#xA;        if (ThisTran == null)&#xA;            return;&#xA;&#xA;        Unit ThisUnit = this.findActiveUnitInYard(ThisTran.getTranCtrNbr());&#xA;&#xA;        /* Unit ThisUnit = ThisTran.getTranUnit();  */&#xA;&#xA;        this.log(&quot;ThisUnit &quot; + ThisUnit)&#xA;&#xA;        if (ThisUnit == null)&#xA;            return;&#xA;&#xA;        /*  Before continuing, make sure there are no errors exist in the main session */&#xA;&#xA;        if (RoadBizUtil.getMessageCollector().getMessageCount(MessageLevel.SEVERE) &gt; 0)&#xA;            return;&#xA;&#xA;        this.log (&quot;no errors&quot;)&#xA;        this.log(&quot;ThisUnit.getUnitActiveUfvNowActive() &quot; + ThisUnit.getUnitActiveUfvNowActive())&#xA;&#xA;        Equipment ThisChassisEq = Equipment.findEquipment(ThisTran.getTranChassis());&#xA;        Equipment ThisCtrAcc = Equipment.findEquipment(ThisTran.getTranCtrAccessory());&#xA;        Equipment ThisChsAcc = Equipment.findEquipment(ThisTran.getTranChsAccNbr());&#xA;&#xA;        UnitManager UnitMgr = Roastery.getBean(UnitManager.BEAN_ID);&#xA;&#xA;        UnitMgr.confirmUnitEquipment(ThisUnit, ThisChassisEq, null, ThisCtrAcc, ThisChsAcc);&#xA;&#xA;        /* set the unit to departed */&#xA;&#xA;        ThisUnit.deliverOutOfFacility(ThisTran.getTranFacility());&#xA;&#xA;        /* RectifyParms thisRectifyParm = new RectifyParms();&#xA;&#xA;        thisRectifyParm.setEraseHistory(false);&#xA;        thisRectifyParm.setUfvTransitState(UfvTransitStateEnum.S70_DEPARTED);&#xA;        thisRectifyParm.setUnitVisitState(UnitVisitStateEnum.DEPARTED);&#xA;&#xA;        ThisUnit.getUnitActiveUfvNowActive().rectify(thisRectifyParm); */&#xA;    }&#xA;&#xA;&#xA;    /* Local function to find the an active container unit in the yard unit */&#xA;&#xA;    private Unit findActiveUnitInYard (String ctrId)&#xA;&#xA;    {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_VISIT_STATE,  UnitVisitStateEnum.ACTIVE))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_CURRENT_UFV_TRANSIT_STATE, UfvTransitStateEnum.S40_YARD))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_ID, ctrId))&#xA;&#xA;        Unit[] unitList=Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;&#xA;        if(unitList == null || unitList.size()==0)&#xA;        {&#xA;            return null;&#xA;        }&#xA;        return unitList[0];&#xA;    }&#xA;}" />
<extension name="MATReeferRqmntsLifeCyleInterceptor" scope="MATSON" type="ENTITY_LIFECYCLE_INTERCEPTION" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;import com.navis.external.framework.entity.AbstractEntityLifecycleInterceptor&#xA;import com.navis.external.framework.entity.EEntityView&#xA;import com.navis.external.framework.util.EFieldChange&#xA;import com.navis.external.framework.util.EFieldChanges&#xA;import com.navis.external.framework.util.EFieldChangesView&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.units.ReeferRqmnts&#xA;&#xA;/**&#xA; * Check This groovy:&#xA; *     1. Ensures that the 'display in fahrenheit' is set on the reefer requirements.&#xA; *     2. For dual temperature it makes sure the over-all reefer requires temperature is the minimum temperature (temperature 1)&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 06/18/15&#xA; * JIRA: CSDV-3035&#xA; * SFDC: 138256&#xA; *&#xA; */&#xA;&#xA;public class MATReeferRqmntsLifeCyleInterceptor extends AbstractEntityLifecycleInterceptor&#xA;{&#xA;    @Override&#xA;    void onCreate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges)&#xA;    {&#xA;        this.onCreateOrUpdate(inEntity, inOriginalFieldChanges, inMoreFieldChanges);&#xA;    }&#xA;&#xA;    @Override&#xA;    void onUpdate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges)&#xA;    {&#xA;&#xA;        this.onCreateOrUpdate(inEntity, inOriginalFieldChanges, inMoreFieldChanges);&#xA;    }&#xA;&#xA;    @Override&#xA;    void onCreateOrUpdate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges)&#xA;&#xA;    {&#xA;        this.log(&quot;MATReeferRqmntsLifeCyleInterceptor: Started&quot;);&#xA;&#xA;        /* exit if no changes */&#xA;&#xA;        if (inOriginalFieldChanges == null || inOriginalFieldChanges.getFieldChangeCount() == 0)&#xA;            return;&#xA;&#xA;        /* find update to reefer requirements */&#xA;&#xA;        if (inOriginalFieldChanges.hasFieldChange(InventoryField.GDS_REEFER_RQMNTS))&#xA;        {&#xA;            Boolean SomethingChanged = Boolean.FALSE;&#xA;&#xA;            /* make sure the display is fahrenheit */&#xA;&#xA;            EFieldChange ReeferChng = inOriginalFieldChanges.findFieldChange(InventoryField.GDS_REEFER_RQMNTS);&#xA;&#xA;            ReeferRqmnts NewReeferReq = ReeferChng.getNewValue();&#xA;&#xA;            if (!NewReeferReq.getRfreqTempShowFahrenheit())&#xA;            {&#xA;                NewReeferReq.setRfreqTempShowFahrenheit(Boolean.TRUE);&#xA;                SomethingChanged = Boolean.TRUE;&#xA;            }&#xA;&#xA;            /* set the required temperature to the minimum temperature */&#xA;&#xA;            if ((NewReeferReq.rfreqTempLimitMinC != null) &amp;&amp; (NewReeferReq.rfreqTempRequiredC != NewReeferReq.rfreqTempLimitMinC))&#xA;            {&#xA;                NewReeferReq.setRfreqTempRequiredC(NewReeferReq.rfreqTempLimitMinC);&#xA;                SomethingChanged = Boolean.TRUE;&#xA;            }&#xA;            &#xA;            /* if the required temperature is set make sure the minimum is set also */ &#xA;            &#xA;            if (NewReeferReq.rfreqTempRequiredC != null &amp;&amp; NewReeferReq.rfreqTempLimitMinC == null)&#xA;            {&#xA;                NewReeferReq.setRfreqTempLimitMinC(NewReeferReq.rfreqTempRequiredC);&#xA;                SomethingChanged = Boolean.TRUE;&#xA;            }&#xA;&#xA;            if (SomethingChanged)&#xA;            {&#xA;                inMoreFieldChanges.setFieldChange(InventoryField.GDS_REEFER_RQMNTS, NewReeferReq);&#xA;            }&#xA;        }&#xA;    }&#xA;}" />
<extension name="MATHazardItemLifeCyleInterceptor" scope="MATSON" type="ENTITY_LIFECYCLE_INTERCEPTION" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;import com.navis.argo.business.api.IEvent&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.external.framework.entity.AbstractEntityLifecycleInterceptor&#xA;import com.navis.external.framework.entity.EEntityView&#xA;import com.navis.external.framework.util.EFieldChange&#xA;import com.navis.external.framework.util.EFieldChanges&#xA;import com.navis.external.framework.util.EFieldChangesView&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.imdg.HazardItem&#xA;import com.navis.inventory.business.imdg.Hazards&#xA;import com.navis.inventory.business.units.EqBaseOrder&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.orders.business.eqorders.EquipmentOrder&#xA;import com.navis.services.business.rules.EventType&#xA;&#xA;/**&#xA; * This groovy checks the hazard items to ensure that the unit and the booking hazard items are kept in sync&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 07/27/15&#xA; * JIRA: CSDV-3117&#xA; * SFDC: 143518&#xA; *&#xA; * Peter Seiler 07/28/15 Add logic to deal with all hazards removed from the booking &#xA; *&#xA; */&#xA;&#xA;public class MATHazardItemLifeCyleInterceptor extends AbstractEntityLifecycleInterceptor&#xA;{&#xA;&#xA;    @Override&#xA;    void onUpdate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges)&#xA;    {&#xA;        this.log(&quot;MATHazardItemLifeCyleInterceptor: Started&quot;);&#xA;this.log(&quot;inOriginalFieldChanges - &quot; + inOriginalFieldChanges)&#xA;&#xA;        /* get the hazard item entity */&#xA;&#xA;        HazardItem ThisHazItm = inEntity._entity;&#xA;&#xA;        if (ThisHazItm == null)&#xA;        {&#xA;            return;&#xA;        }&#xA;this.log(&quot;ThisHazItm - &quot; + ThisHazItm )&#xA;&#xA;        Hazards ThisHazard =  ThisHazItm.getHzrdiHazards();&#xA;&#xA;this.log(&quot;ThisHazard - &quot; + ThisHazard)&#xA;&#xA;        if (ThisHazard == null)&#xA;        {&#xA;&#xA;            /* the existing entity has null hazard.  Get it from the changes */&#xA;&#xA;            if (inOriginalFieldChanges.hasFieldChange(InventoryField.HZRDI_HAZARDS))&#xA;            {&#xA;&#xA;                EFieldChange HazardChng = inOriginalFieldChanges.findFieldChange(InventoryField.HZRDI_HAZARDS);&#xA;&#xA;                ThisHazard = HazardChng.getNewValue();&#xA;            }&#xA;&#xA;            if (ThisHazard == null)&#xA;            {&#xA;                return;&#xA;            }&#xA;        }&#xA;&#xA;        if (ThisHazard.getHzrdOwnerEntityName() == 'Booking')&#xA;        {&#xA;&#xA;this.log(&quot;Update is for booking&quot;)&#xA;&#xA;            Booking ThisBooking = this.findBookingFromGkey(ThisHazard.getHzrdOwnerEntityGkey());&#xA;&#xA;            /* insert BOOKING_HAZARDS_UPADTE event into Booking history */&#xA;&#xA;            ServicesManager sm = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;&#xA;            EventType HazardUpdateEvent = EventType.findEventType('BOOKING_HAZARDS_UPDATE');&#xA;&#xA;            if (sm != null &amp;&amp; HazardUpdateEvent != null &amp;&amp; ThisBooking != null)&#xA;            {&#xA;                (IEvent) sm.recordEvent(HazardUpdateEvent, &quot;Booking Hazards Updated &quot;, null, null, ThisBooking, null, null);&#xA;            }&#xA;        }&#xA;        else&#xA;        {&#xA;            if(ThisHazard.getHzrdOwnerEntityName() == 'GoodsBase')&#xA;            {&#xA;                Unit ThisUnit = this.findUnitFromGDSGkey(ThisHazard.getHzrdOwnerEntityGkey());&#xA;            }&#xA;        }&#xA;    }&#xA;    @Override&#xA;    void validateDelete(EEntityView inEntity)&#xA;    {&#xA;        this.log(&quot;MATHazardItemLifeCyleInterceptor: validateDelete Started&quot;);&#xA;&#xA;        /* get the hazard item entity */&#xA;&#xA;        HazardItem ThisHazItm = inEntity._entity;&#xA;&#xA;        if (ThisHazItm == null)&#xA;        {&#xA;            return;&#xA;        }&#xA;&#xA;        Hazards ThisHazard =  ThisHazItm.getHzrdiHazards();&#xA;&#xA;        if (ThisHazard.getHzrdOwnerEntityName() == 'Booking')&#xA;        {&#xA;&#xA;            Booking ThisBooking = this.findBookingFromGkey(ThisHazard.getHzrdOwnerEntityGkey());&#xA;&#xA;            /* insert BOOKING_HAZARDS_DELETE event into Booking history */&#xA;&#xA;            ServicesManager sm = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;&#xA;            EventType HazardUpdateEvent = EventType.findEventType('BOOKING_HAZARDS_DELETE');&#xA;&#xA;            if (sm != null &amp;&amp; HazardUpdateEvent != null &amp;&amp; ThisBooking != null)&#xA;            {&#xA;                (IEvent) sm.recordEvent(HazardUpdateEvent, &quot;Booking Hazards Updated &quot;, null, null, ThisBooking, null, null);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    private Booking findBookingFromGkey (Long inBaseOderGkey)&#xA;    {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.EQ_BASE_ORDER)&#xA;                .addDqPredicate(PredicateFactory.eq(InventoryField.EQBO_GKEY, inBaseOderGkey));&#xA;&#xA;        List&lt;EqBaseOrder&gt; EBO_List = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#xA;        if (EBO_List == null || EBO_List.size() == 0)&#xA;        {&#xA;            return(null);&#xA;        }&#xA;        else&#xA;        {&#xA;            return(Booking.resolveBkgFromEqo(EquipmentOrder.resolveEqoFromEqbo(EBO_List[0])));&#xA;        }&#xA;    }&#xA;&#xA;    private Unit findUnitFromGDSGkey (Long inGDSGkey)&#xA;    {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.GOODS_BASE)&#xA;                .addDqPredicate(PredicateFactory.eq(InventoryField.GDS_GKEY, inGDSGkey));&#xA;&#xA;        List&lt;GoodsBase&gt; GDS_List = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#xA;        if (GDS_List == null || GDS_List.size() == 0)&#xA;        {&#xA;            return(null);&#xA;        }&#xA;        else&#xA;        {&#xA;            return(GDS_List[0].getGdsUnit());&#xA;        }&#xA;    }&#xA;}" />
<extension name="MATSyncBookingHazOntoUnits" scope="MATSON" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.imdg.HazardItem&#xA;import com.navis.inventory.business.imdg.HazardItemPlacard&#xA;import com.navis.inventory.business.imdg.Hazards&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;/**&#xA; * This groovy checks the booking hazards to ensure that the unit and the booking hazard items are kept in sync&#xA; * This is triggered by a BOOKING_HAZARDS_UPDATE event&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 07/27/15&#xA; * JIRA: CSDV-3117&#xA; * SFDC: 143518&#xA; *&#xA; * Peter Seiler 07/30/2015 If all hazards are deleted from the booking clear the hazards from the unit&#xA; *&#xA; * Peter Seiler 09/03/2015&#xA; *&#xA; * JIRA: ARGO-79452&#xA; *&#xA; * Implement Groovy workaround for bug in 'cloneHazards' not copying all the hazard items attributes&#xA; *&#xA; */&#xA;&#xA;public class MATSyncBookingHazOntoUnits extends AbstractGeneralNoticeCodeExtension&#xA;&#xA;{&#xA;    public void execute(GroovyEvent inEvent)&#xA;&#xA;    {&#xA;        this.log(&quot;Execution Started MATSyncBookingHazOntoUnits&quot;);&#xA;&#xA;        /* get the event */&#xA;&#xA;        Event ThisEvent = inEvent.getEvent();&#xA;&#xA;        if (ThisEvent == null)&#xA;            return;&#xA;&#xA;        /* Get the booking and the Booking Hazards */&#xA;&#xA;        Booking ThisBooking = (Booking) inEvent.getEntity();&#xA;&#xA;        Hazards BookingHazards = ThisBooking.getEqoHazards();&#xA;&#xA;        /* Get the Units for the Booking */&#xA;&#xA;        List&lt;Unit&gt; UnitsForBooking = this.findUnitsForBooking(ThisBooking);&#xA;&#xA;        /* Step through all the units */&#xA;&#xA;        for (Unit ThisUnit : UnitsForBooking)&#xA;        {&#xA;&#xA;            /* get the hazards for the unit */&#xA;&#xA;            GoodsBase ThisGDS = ThisUnit.getUnitGoods();&#xA;&#xA;            if (ThisGDS.getGdsHazards() != null)&#xA;            {&#xA;&#xA;                /* Delete the existing hazards for he unit */&#xA;&#xA;                ThisGDS.getGdsHazards().deleteAllHazardItems();&#xA;            }&#xA;&#xA;            /* Copy the booking hazards onto the unit */&#xA;&#xA;            if (BookingHazards == null)&#xA;            {&#xA;                /* if there are no booking hazards clear the unit hazards */&#xA;&#xA;                ThisGDS.clearHazardsRef();&#xA;                ThisGDS.calculateDenormalizedHazardFields();&#xA;            }&#xA;            else&#xA;            {&#xA;                /* clone the booking hazards onto the unit. */&#xA;&#xA;                // ThisGDS.attachHazards(BookingHazards.cloneHazards());&#xA;&#xA;                /* Copy the booking hazards onto the unit */&#xA;&#xA;                Hazards hazards = Hazards.createHazardsEntity();&#xA;&#xA;                for (Iterator&lt;HazardItem&gt; itr = BookingHazards.getHazardItemsIterator(); itr.hasNext(); )&#xA;                {&#xA;                    HazardItem tranHazardItem = itr.next();&#xA;                    HazardItem clonedItem = HazardItem.createHazardItemEntity(hazards, tranHazardItem.getHzrdiImdgClass(), tranHazardItem.getHzrdiUNnum());&#xA;&#xA;                    clonedItem.setHzrdiNbrType(tranHazardItem.getHzrdiNbrType());&#xA;                    clonedItem.setHzrdiLtdQty(tranHazardItem.getHzrdiLtdQty());&#xA;                    clonedItem.setHzrdiPackageType(tranHazardItem.getHzrdiPackageType());&#xA;                    clonedItem.setHzrdiInhalationZone(tranHazardItem.getHzrdiInhalationZone());&#xA;                    clonedItem.setHzrdiImdgCode(tranHazardItem.getHzrdiImdgCode());&#xA;                    clonedItem.setHzrdiExplosiveClass(tranHazardItem.getHzrdiExplosiveClass());&#xA;                    clonedItem.setHzrdiPageNumber(tranHazardItem.getHzrdiPageNumber());&#xA;                    clonedItem.setHzrdiFlashPoint(tranHazardItem.getHzrdiFlashPoint());&#xA;                    clonedItem.setHzrdiTechName(tranHazardItem.getHzrdiTechName());&#xA;                    clonedItem.setHzrdiProperName(tranHazardItem.getHzrdiProperName());&#xA;                    clonedItem.setHzrdiEMSNumber(tranHazardItem.getHzrdiEMSNumber());&#xA;                    clonedItem.setHzrdiERGNumber(tranHazardItem.getHzrdiERGNumber());&#xA;                    clonedItem.setHzrdiMFAG(tranHazardItem.getHzrdiMFAG());&#xA;                    clonedItem.setHzrdiPackingGroup(tranHazardItem.getHzrdiPackingGroup());&#xA;                    clonedItem.setHzrdiHazIdUpper(tranHazardItem.getHzrdiHazIdUpper());&#xA;                    clonedItem.setHzrdiSubstanceLower(tranHazardItem.getHzrdiSubstanceLower());&#xA;                    clonedItem.setHzrdiWeight(tranHazardItem.getHzrdiWeight());&#xA;                    clonedItem.setHzrdiPlannerRef(tranHazardItem.getHzrdiPlannerRef());&#xA;                    clonedItem.setHzrdiQuantity(tranHazardItem.getHzrdiQuantity());&#xA;                    clonedItem.setHzrdiMoveMethod(tranHazardItem.getHzrdiMoveMethod());&#xA;                    clonedItem.setHzrdiSecondaryIMO1(tranHazardItem.getHzrdiSecondaryIMO1());&#xA;                    clonedItem.setHzrdiSecondaryIMO2(tranHazardItem.getHzrdiSecondaryIMO2());&#xA;                    clonedItem.setHzrdiDeckRestrictions(tranHazardItem.getHzrdiDeckRestrictions());&#xA;                    clonedItem.setHzrdiMarinePollutants(tranHazardItem.getHzrdiMarinePollutants());&#xA;                    clonedItem.setHzrdiDcLgRef(tranHazardItem.getHzrdiDcLgRef());&#xA;                    clonedItem.setHzrdiEmergencyTelephone(tranHazardItem.getHzrdiEmergencyTelephone());&#xA;                    clonedItem.setHzrdiNotes(tranHazardItem.getHzrdiNotes());&#xA;                    clonedItem.setHzrdiFireCode(tranHazardItem.getHzrdiFireCode());&#xA;                    clonedItem.setHzrdiSeq(tranHazardItem.getHzrdiSeq());&#xA;                    clonedItem.setHzrdiImdgClass(tranHazardItem.getHzrdiImdgClass());&#xA;&#xA;                    Roastery.getHibernateApi().save(clonedItem);&#xA;&#xA;                    if (tranHazardItem.getHzrdiPlacardSet() != null)&#xA;                    {&#xA;                        Set&lt;HazardItemPlacard&gt; clonedPlacardSet = new LinkedHashSet&lt;HazardItemPlacard&gt;();&#xA;                        clonedItem.setHzrdiPlacardSet(clonedPlacardSet);&#xA;                        for (HazardItemPlacard tranHazardItemPlacard : (Set&lt;HazardItemPlacard&gt;) tranHazardItem.getHzrdiPlacardSet())&#xA;                        {&#xA;                            HazardItemPlacard clonedPlacard = HazardItemPlacard.createHazardItemPlacardEntity(clonedItem);&#xA;                            clonedPlacard.setHzrdipPlacard(tranHazardItemPlacard.getHzrdipPlacard());&#xA;                            clonedPlacard.setHzrdipDescription(tranHazardItemPlacard.getHzrdipDescription());&#xA;                            clonedPlacardSet.add(clonedPlacard);&#xA;                        }&#xA;                    }&#xA;                }&#xA;                ThisGDS.attachHazards(hazards);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    /* Local function to find the units received for booking */&#xA;&#xA;    private List&lt;Unit&gt; findUnitsForBooking (Booking inBooking)&#xA;    {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_DEPARTURE_ORDER_NBR, inBooking.getEqboNbr()))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_LINE_OPERATOR_GKEY, inBooking.getEqoLine().getBzuGkey()));&#xA;&#xA;        List&lt;Unit&gt; unitList = Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;&#xA;        if(unitList == null || unitList.size()==0)&#xA;        {&#xA;            return null;&#xA;        }&#xA;        return unitList;&#xA;    }&#xA;}" />
<extension name="UpdateBlNumber" scope="MATSON" type="ENTITY_LIFECYCLE_INTERCEPTION" language="GROOVY" is-enabled="Y" contents="import com.navis.external.framework.entity.AbstractEntityLifecycleInterceptor&#xA;import com.navis.external.framework.entity.EEntityView&#xA;import com.navis.external.framework.util.EFieldChanges&#xA;import com.navis.external.framework.util.EFieldChangesView&#xA;import com.navis.inventory.InventoryField;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.business.units.GoodsBase;&#xA;import com.navis.argo.business.reference.Shipper;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import org.apache.log4j.Logger;&#xA;import com.navis.cargo.business.model.BillOfLading;&#xA;import com.navis.inventory.business.api.UnitField;&#xA;import com.navis.framework.portal.query.DomainQuery;&#xA;import com.navis.framework.portal.QueryUtils;&#xA;import com.navis.framework.portal.query.PredicateFactory;&#xA;import com.navis.argo.business.reference.RoutingPoint;&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;import com.navis.apex.business.model.GroovyInjectionBase;&#xA;&#xA;&#xA;import com.navis.services.business.api.EventManager&#xA;import com.navis.services.business.rules.EventType&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.argo.ArgoBizMetafield&#xA;import com.navis.argo.ArgoField&#xA;&#xA;/**&#xA;  * &#xA;  */&#xA;public class UpdateBlNumber extends AbstractEntityLifecycleInterceptor {&#xA;&#xA;&#x9;String  blNumber = null;&#xA;&#x9;String&#x9;blDest = null;&#xA;&#x9;String  blLinrOptr = null;&#xA;&#x9;String&#x9;blPod1 = null;&#xA;&#x9;String  blPod2 = null;&#xA;&#x9;String  blPol = null;&#xA;&#x9;String  blOrgn = null;&#xA;&#x9;&#xA;&#x9;def inj = new GroovyInjectionBase();&#xA;&#xA;  public void onUpdate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges) {&#xA;&#x9;println(&quot;Groovy call: UpdateBlNumber.onUpdate()&quot;);&#xA;&#x9;try {&#xA;&#x9;&#x9;BillOfLading blNbr =  inEntity._entity;&#x9;&#xA;&#x9;&#x9;System.out.println(&quot;BillOfLading&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+blNbr.blNbr+&quot; inOriginalFieldChanges &quot;+inOriginalFieldChanges) ;&#xA;&#xA;&#x9;&#x9;blNumber = blNbr.blNbr;&#xA;&#x9;&#x9;blDest = blNbr.blDestination;&#xA;&#x9;&#x9;blLinrOptr = blNbr.blLineOperator.bzuId;&#xA;&#x9;&#x9;blOrgn = blNbr.blOrigin;&#xA;&#x9;&#xA;&#x9;&#x9;if (blNbr.blPol != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;blPol = blNbr.blPol.pointId;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (blNbr.blPod1 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;blPod1 = blNbr.blPod1.pointId;&#xA;&#x9;&#x9;}&#x9;&#xA;&#x9;&#x9;if (blNbr.blPod2 != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;blPod2 = blNbr.blPod2.pointId;&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;println(&quot;Bl Details:&quot;+blNumber+&quot;:&quot;+blDest+&quot;:&quot;+blLinrOptr+&quot;:&quot;+blOrgn+&quot;:&quot;+blPol+&quot;:&quot;+blPod1+&quot;:&quot;+blPod2);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;getUnitListForAttachEvent(blNumber)&#xA;&#x9;&#x9;} catch (Throwable e) {&#xA;      &#x9;&#x9;log(&quot;Testing &quot; + e.getMessage());&#xA;      &#x9;&#x9;e.printStackTrace();&#xA;    &#x9;}&#xA;  }&#xA;&#xA;&#x9;private void getUnitListForAttachEvent(String blNbr){&#xA;&#x9;println(&quot;MatUnitUpdateWithBlDetails.getUnitListForAttachEvent&quot;)&#xA;&#x9;DomainQuery dq = QueryUtils.createDomainQuery(&quot;Unit&quot;)&#xA;            .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_GDS_BL_NBR,blNbr));&#xA;//&#x9;&#x9;&#x9;.addDqPredicate(PredicateFactory.eq(UnitField.UNIT_ID,&quot;GLDU0570236&quot;));&#xA; &#x9;println(&quot;dq:::::::::&quot;+dq)&#xA;    HibernateApi hibernate = HibernateApi.getInstance();&#xA;    List unitList  = hibernate.findEntitiesByDomainQuery(dq);&#xA;&#x9;Iterator iterUnitList = unitList.iterator()&#xA;&#x9;&#x9;&#x9;&#x9;while (iterUnitList.hasNext())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;def unit = iterUnitList.next();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String eventId = &quot;BL_UPDATE&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println (&quot;recordManifetEvent&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EventManager sem = (EventManager) Roastery.getBean(EventManager.BEAN_ID);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EventType eventType = EventType.findEventType(eventId);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;FieldChanges fld = new FieldChanges();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;fld.setFieldChange(ArgoBizMetafield.EVENT_APPLIED_TO_NATURAL_KEY,  unit.getUnitId());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;fld.setFieldChange(ArgoBizMetafield.EVENT_APPLIED_TO_GKEY, unit.getPrimaryKey());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;fld.setFieldChange(ArgoBizMetafield.EVENT_APPLIED_TO_CLASS, unit.getClass());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;unit.recordUnitEvent(eventType, fld, null);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;catch (Throwable throwable) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;println(&quot;Unexpected Error occured while recording service event&quot; + throwable);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;  }&#xA;&#xA;" />
<extension name="MATDeliverImport" scope="MATSON" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;/**&#xA; * This groovy fixes the transaction so that an import can be delivered in a one-stage gate&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 06/30/15&#xA; * JIRA: CSDV-3063&#xA; * SFDC: 142561&#xA; *&#xA; */&#xA;&#xA;public class MATDeliverImport extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        this.log(&quot;Execution Started MATDeliverImport&quot;);&#xA;&#xA;&#xA;        TruckTransaction ThisTran = inDao.getTran();&#xA;&#xA;        /* get out if no gate transaction is found */&#xA;&#xA;        if (ThisTran == null)&#xA;            return;&#xA;        &#xA;        /* copy the container number to the assigned and provided number */&#xA;&#xA;        ThisTran.setTranCtrNbrAssigned(ThisTran.getTranCtrNbr());&#xA;        ThisTran.setTranCtrNbrProvided(ThisTran.getTranCtrNbr());&#xA;&#xA;        /* Execute the built-in logic got the business task. */&#xA;&#xA;        executeInternal(inDao);&#xA;    }&#xA;}" />
<extension name="MATBookingReeferRequirements" scope="MATSON" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.ReeferRqmnts&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.orders.business.eqorders.EquipmentOrder&#xA;import com.navis.orders.business.eqorders.EquipmentOrderItem&#xA;import com.navis.services.business.event.GroovyEvent&#xA;&#xA;/**&#xA; * This groovy checks the booking item remarks.  If the remarks start with 'DUAL' the following is /x/y where x is temp 1 and y is temp 1&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 07/06/15&#xA; * JIRA: CSDV-3035&#xA; * SFDC: 138256&#xA; *&#xA; */&#xA;&#xA;public class MATBookingReeferRequirements extends AbstractGeneralNoticeCodeExtension&#xA;{&#xA;    public void execute(GroovyEvent inEvent)&#xA;    {&#xA;        this.log(&quot;MATBookingReeferRequirements: Started&quot;);&#xA;&#xA;        EquipmentOrder ThisBooking = (EquipmentOrder) inEvent.getEntity();&#xA;&#xA;        if (ThisBooking == null)&#xA;            return;&#xA;&#xA;        Set&lt;EquipmentOrderItem&gt; TheseEQOIs = ThisBooking.getEqboOrderItems();&#xA;&#xA;        if (TheseEQOIs == null || TheseEQOIs.size() == 0)&#xA;            return;&#xA;&#xA;        for (EquipmentOrderItem ThisEQOI : TheseEQOIs)&#xA;        {&#xA;&#xA;            /* get the equipment order item entity */&#xA;&#xA;            String ThisEQOIRemarks = ThisEQOI.getEqoiRemarks();&#xA;&#xA;            if (ThisEQOIRemarks != null &amp;&amp; ThisEQOIRemarks.size() &gt; 4 &amp;&amp; ThisEQOIRemarks.indexOf('DUAL') == 0)&#xA;            {&#xA;&#xA;                List&lt;UnitEquipment&gt; UE_OnEQOI = this.findUnitEqForOrderItem(ThisEQOI.getEqboiGkey());&#xA;&#xA;                if (UE_OnEQOI == null || UE_OnEQOI.size() == 0)&#xA;                    return;&#xA;&#xA;                String Temp1Txt = null;&#xA;                String Temp2Txt = null;&#xA;                Double Temp1Num = null;&#xA;                Double Temp2Num = null;&#xA;&#xA;                int FirstSlash = ThisEQOIRemarks.indexOf('/');&#xA;                int SecondSlash = ThisEQOIRemarks.indexOf('/', FirstSlash + 1);&#xA;&#xA;&#xA;                if (FirstSlash &lt; SecondSlash)&#xA;                {&#xA;&#xA;                    /* get the values of the two tempuratures */&#xA;&#xA;                    Temp1Txt = ThisEQOIRemarks[FirstSlash + 1..SecondSlash - 1];&#xA;                    Temp2Txt = ThisEQOIRemarks[SecondSlash + 1..ThisEQOIRemarks.length() - 1]&#xA;                }&#xA;&#xA;                /* the text of the reefer settings have been parsed */&#xA;&#xA;                if (Temp1Txt != null &amp;&amp; Temp2Txt != null &amp;&amp; Temp1Txt.isNumber() &amp;&amp; Temp2Txt.isNumber())&#xA;                {&#xA;                    Temp1Num = Double.parseDouble(Temp1Txt);&#xA;                    Temp2Num = Double.parseDouble(Temp2Txt);&#xA;                }&#xA;&#xA;                this.log(&quot;After asigning to Double &quot; + Temp1Num + &quot; &quot; + Temp2Num)&#xA;&#xA;                /* Find any associated equipment */&#xA;&#xA;                if (Temp1Num != null)&#xA;                {&#xA;                    for (UnitEquipment EQOI_UE : UE_OnEQOI)&#xA;                    {&#xA;&#xA;                        GoodsBase thisUnitGoods = null;&#xA;                        ReeferRqmnts thisReeferReq = null;&#xA;&#xA;                        Unit thisUnit = EQOI_UE.getUeUnit();&#xA;&#xA;                        if (thisUnit != null)&#xA;                        {&#xA;                            thisUnitGoods = thisUnit.getUnitGoods();&#xA;                        }&#xA;&#xA;                        if (thisUnitGoods != null)&#xA;                        {&#xA;                            thisReeferReq = thisUnitGoods.getGdsReeferRqmnts();&#xA;                        }&#xA;&#xA;                        if (thisReeferReq != null)&#xA;                        {&#xA;&#xA;                            thisReeferReq.setRfreqTempRequiredC((Temp1Num - 32.0) / 1.8);&#xA;                            thisReeferReq.setRfreqTempLimitMinC((Temp1Num - 32.0) / 1.8);&#xA;                            thisReeferReq.setRfreqTempLimitMaxC((Temp2Num - 32.0) / 1.8);&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    /* local function to find UnitEquipment associated with an EquipmentOrderItem */&#xA;&#xA;    private List&lt;UnitEquipment&gt; findUnitEqForOrderItem(long inEQOI)&#xA;    {&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT_EQUIPMENT)&#xA;                .addDqPredicate(PredicateFactory.eq(InventoryField.UE_DEPARTURE_ORDER_ITEM, inEQOI));&#xA;&#xA;        List&lt;UnitEquipment&gt; UEList = HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;&#xA;        this.log (&quot;UEList &quot; + UEList)&#xA;&#xA;        return UEList;&#xA;    }&#xA;}" />
<extension name="MatsonAncCreateDocument" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;import com.navis.argo.*&#xA;import com.navis.argo.business.atoms.EquipRfrTypeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.model.*&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.edi.business.util.XmlUtil&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.AllOtherFrameworkPropertyKeys&#xA;import com.navis.framework.business.atoms.MassUnitEnum&#xA;import com.navis.framework.business.atoms.TemperatureUnitEnum&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.util.DateUtil&#xA;import com.navis.framework.util.internationalization.ITranslationContext&#xA;import com.navis.framework.util.internationalization.TranslationUtils&#xA;import com.navis.framework.util.time.TimeUtils&#xA;import com.navis.framework.util.unit.UnitUtils&#xA;import com.navis.inventory.business.imdg.HazardItem&#xA;import com.navis.inventory.business.imdg.HazardItemPlacard&#xA;import com.navis.inventory.business.imdg.ImdgClass&#xA;import com.navis.inventory.business.imdg.Placard&#xA;import com.navis.inventory.business.units.ReeferRqmnts&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipDamageItem&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.road.RoadBizMetafield&#xA;import com.navis.road.RoadPropertyKeys&#xA;import com.navis.road.business.appointment.model.GateAppointment&#xA;import com.navis.road.business.appointment.model.TruckVisitAppointment&#xA;import com.navis.road.business.atoms.TranStatusEnum&#xA;import com.navis.road.business.atoms.TranSubTypeEnum&#xA;import com.navis.road.business.atoms.TruckerFriendlyTranSubTypeEnum&#xA;import com.navis.road.business.model.*&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.road.business.util.TransactionTypeUtil&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import com.navis.road.portal.configuration.CachedGateConfiguration&#xA;import com.navis.road.portal.configuration.CachedGateStage&#xA;import org.apache.commons.io.IOUtils&#xA;import org.apache.commons.lang.StringUtils&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;import org.apache.xmlbeans.XmlException&#xA;import org.apache.xmlbeans.XmlObject&#xA;import org.jetbrains.annotations.Nullable&#xA;import org.w3c.dom.Element&#xA;import org.w3c.dom.Node&#xA;import org.w3c.dom.NodeList&#xA;&#xA;import java.math.RoundingMode&#xA;import java.text.DateFormat&#xA;import java.text.DecimalFormat&#xA;import java.text.SimpleDateFormat&#xA;&#xA;/**&#xA; Create gate document.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 07/17/2015&#xA; *&#xA; * Date: 07/17/2015: 5:41 PM&#xA; * JIRA: CSDV-3024&#xA; * SFDC: 00138337&#xA; * Called from: Gate Configuration&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;class MatsonAncCreateDocument extends AbstractGateTaskInterceptor implements EGateTaskInterceptor {&#xA;&#xA;  /**&#xA;   * Create document based on the configuration docTypeId parameter&#xA;   *&#xA;   * @param inOutDao&#xA;   */&#xA;  public void execute(TransactionAndVisitHolder inOutDao) {&#xA;    LOGGER.setLevel(Level.INFO);&#xA;    LOGGER.info(&quot; MatsonAncCreateDocument execute Stared.&quot;);&#xA;    /**&#xA;     * Before continuing, make sure there are no errors exist in the main session&#xA;     */&#xA;    if (!RoadBizUtil.getMessageCollector().hasError() &amp;&amp; !inOutDao.hasTransaction()) {&#xA;      LOGGER.error(&quot; MatsonAncCreateDocument: No truck transaction found or transaction has one or more errors.&quot;);&#xA;      return;&#xA;    }&#xA;    def matsonAncValidateGateDocuments = getLibrary(&quot;MatsonAncValidateGateDocuments&quot;);&#xA;    LOGGER.info(&quot;MatsonAncCreateDocument about to execute MatsonAncValidateGateDocuments&quot;);&#xA;    if (!matsonAncValidateGateDocuments.isValidationSuccess(inOutDao)) {&#xA;      return;&#xA;    }&#xA;&#xA;    TruckTransaction tran = inOutDao.getTran();&#xA;    boolean isChsDamaged = tran.getTranChsDmg() != null &amp;&amp; tran.getTranChsDmg().getDmgsItems() != null &amp;&amp;&#xA;            !tran.getTranChsDmg().getDmgsItems().isEmpty();&#xA;    GeneralReference generalReferenceDamages = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;DAMAGES&quot;);&#xA;    GeneralReference generalReferenceTir = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;TIR&quot;);&#xA;    GeneralReference generalReferenceTirLoad = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;TIR_LOAD&quot;);&#xA;    GeneralReference generalReferenceDeliveryReceipt = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;DR&quot;);&#xA;    GeneralReference generalReferenceDNB = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;DNB&quot;);&#xA;    GeneralReference multiStopCommodityIdReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;MULTISTOP&quot;, &quot;COMMODITY_ID&quot;);&#xA;    String cmdyId = tran.getTranCommodity() != null ? tran.getTranCommodity().getCmdyId() : null;&#xA;    boolean isMultiStop = cmdyId != null &amp;&amp;&#xA;            (cmdyId.equals(multiStopCommodityIdReference.getRefValue1()) || cmdyId.equals(multiStopCommodityIdReference.getRefValue2()) ||&#xA;                    cmdyId.equals(multiStopCommodityIdReference.getRefValue3()) || cmdyId.equals(multiStopCommodityIdReference.getRefValue4()));&#xA;&#xA;    if (tran.isReceival()) {&#xA;      //1) create TIR document for Receival transaction&#xA;      DocumentType docType = DocumentType.findDocumentType(generalReferenceTir.getRefValue1());&#xA;      createTranDocument(inOutDao, docType, isMultiStop, null);&#xA;&#xA;      //2) create damage document&#xA;      if (isChsDamaged) {&#xA;        docType = DocumentType.findDocumentType(generalReferenceDamages.getRefValue1());&#xA;        createTranDocument(inOutDao, docType, isMultiStop, null);&#xA;      }&#xA;    } else if (tran.isDelivery()) {&#xA;      //1) create TIR document for delivery transaction&#xA;      DocumentType docType = DocumentType.findDocumentType(generalReferenceTir.getRefValue1());&#xA;      createTranDocument(inOutDao, docType, isMultiStop, null);&#xA;&#xA;      //2) create TIR Load Info &amp; Delivery Receipt&#xA;      if (isMultiStop) {&#xA;        docType = DocumentType.findDocumentType(generalReferenceTirLoad.getRefValue1());&#xA;        String ctrNbr = tran.getTranContainer() != null ? tran.getTranContainer().getEqIdFull() : tran.getTranCtrNbr();&#xA;        String bookingNbr = null;&#xA;        Unit unit = tran.getTranUnit();&#xA;        //first look for BL nbr, if exist then use it to call webservice. If BL is null then look for booking Nbr.&#xA;        bookingNbr = getBLNbr(tran);&#xA;        if (bookingNbr == null) {&#xA;          if (tran.getTranEqoNbr() != null) {&#xA;            bookingNbr = tran.getTranEqoNbr();&#xA;          } else if (unit != null &amp;&amp; unit.getUnitPrimaryUe().getUeDepartureOrderItem() != null) {&#xA;            bookingNbr = unit.getUnitPrimaryUe().getUeDepartureOrderItem().getEqboiOrder().getEqboNbr();&#xA;          }&#xA;        }&#xA;        if (ctrNbr != null &amp;&amp; bookingNbr != null) {&#xA;          //Element rootElement = getMultiStopRootElement(ctrNbr, bookingNbr);&#xA;          Element rootElement = null;&#xA;          //if record doesn't exist then look without check digit.&#xA;          // if (rootElement == null || rootElement.getChildNodes().length == 0) {&#xA;          //As per Bruno's suggestion, changed code to looking into the web service without container check digit.&#xA;          Container ctr = Container.findContainerWithoutValidation(ctrNbr);&#xA;          if (ctr != null) {&#xA;            rootElement = getMultiStopRootElement(ctr.getEqIdNoCheckDigit(), bookingNbr);&#xA;          }&#xA;//          }&#xA;          if (rootElement != null) {&#xA;            NodeList stopElement = rootElement.getElementsByTagName(&quot;stop&quot;);&#xA;            if (stopElement != null) {&#xA;              for (int i = stopElement.getLength() - 1; i &gt;= 0; i--) {&#xA;                createTranDocument(inOutDao, docType, isMultiStop, stopElement.item(i));&#xA;              }&#xA;            }&#xA;          }&#xA;        } else {&#xA;          LOGGER.error(&#xA;                  &quot;MatsonAncCreateDocument, couldn't create multistop ticket. Either container nbr[&quot; + ctrNbr + &quot;] or booking nbr[&quot; + bookingNbr +&#xA;                          &quot;] is null&quot;);&#xA;        }&#xA;      } else if (tran.isHazardous()) {&#xA;        docType = DocumentType.findDocumentType(generalReferenceTirLoad.getRefValue1());&#xA;        createTranDocument(inOutDao, docType, isMultiStop, null);&#xA;      } else {&#xA;        if (!(TranSubTypeEnum.DM.equals(tran.getTranSubType()) &amp;&amp; TranSubTypeEnum.DC.equals(tran.getTranSubType()))) {&#xA;          //3) create Delivery Receipt Alone(without TIR)&#xA;          docType = DocumentType.findDocumentType(generalReferenceDeliveryReceipt.getRefValue1());&#xA;          createTranDocument(inOutDao, docType, isMultiStop, null);&#xA;        }&#xA;      }&#xA;&#xA;      //4) create DNB&#xA;      boolean isDoNotBackLoad = tran.getTranUfv() != null &amp;&amp;&#xA;              (&quot;Y&quot;.equals(tran.getTranUfv().getUfvFlexString09()) || &quot;Yes&quot;.equals(tran.getTranUfv().getUfvFlexString09()));&#xA;      if (isDoNotBackLoad) {&#xA;        docType = DocumentType.findDocumentType(generalReferenceDNB.getRefValue1());&#xA;        createTranDocument(inOutDao, docType, isMultiStop, null);&#xA;      }&#xA;&#xA;      //5) create damage document&#xA;      if (isChsDamaged) {&#xA;        docType = DocumentType.findDocumentType(generalReferenceDamages.getRefValue1());&#xA;        createTranDocument(inOutDao, docType, isMultiStop, null);&#xA;      }&#xA;    }&#xA;&#xA;    LOGGER.info(&quot; MatsonAncCreateDocument execute Completed.&quot;);&#xA;  }&#xA;&#xA;  private static Element getMultiStopRootElement(String inUnitNbr, String inBookingNbr) {&#xA;    GeneralReference multiStopUrlReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;MULTISTOP&quot;, &quot;URL&quot;);&#xA;    String urlString = multiStopUrlReference.getRefValue2() != null ? multiStopUrlReference.getRefValue1() + multiStopUrlReference.getRefValue2() :&#xA;            multiStopUrlReference.getRefValue1();&#xA;    URL url = new URL(urlString + &quot;cn=&quot; + inUnitNbr + &quot;&amp;bn=&quot; + inBookingNbr);&#xA;    URLConnection connection = url.openConnection();&#xA;    InputStream stream = connection.getInputStream();&#xA;    if (stream != null) {&#xA;      String StringFromInputStream = IOUtils.toString(stream, &quot;UTF-8&quot;);&#xA;      return XmlUtil.getXmlRootElement(StringFromInputStream);&#xA;    } else {&#xA;      RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;              &quot;No multistop record found from webservice for Unit:&quot; + inUnitNbr + &quot; and Booking Nbr:&quot; + inBookingNbr));&#xA;      return null;&#xA;    }&#xA;  }&#xA;&#xA;  private void createTranDocument(TransactionAndVisitHolder inOutDao, DocumentType inDocType, boolean inIsMultiStop, Node inMultiStopNode) {&#xA;    TruckTransaction tran = inOutDao.getTran();&#xA;    if (inDocType.isDocumentRequired(&#xA;            tran.getTranIsHazard(),&#xA;            tran.getTranUnit() != null &amp;&amp; tran.getTranUnit().isReefer(),&#xA;            TranStatusEnum.TROUBLE.equals(tran.getTranStatus()))&#xA;    ) {&#xA;      DocumentDocument documentdoc = DocumentDocument.Factory.newInstance();&#xA;      DocumentDocument.Document doc = documentdoc.addNewDocument();&#xA;      DocDescriptionDocument.DocDescription descr = doc.addNewDocDescription();&#xA;      descr.setDocType(inDocType.getDoctypePk().toString());&#xA;      descr.setDocName(inDocType.getDoctypeId());&#xA;&#xA;      addDocBody(doc, inOutDao, inIsMultiStop, inDocType, inMultiStopNode);&#xA;      MessagesDocument.Messages msgs = doc.addNewMessages();&#xA;      String xmlText = documentdoc.xmlText();&#xA;      validateXML(xmlText);&#xA;      String documentStageId = tran.getTranStageId();&#xA;      if (inOutDao.getParameters() != null &amp;&amp; inOutDao.getParameters().containsKey(RoadBizMetafield.GATE_API_STAGE_ID)) {&#xA;        String apiGateStageId = (String) inOutDao.getParameters().get(RoadBizMetafield.GATE_API_STAGE_ID);&#xA;        if (inOutDao.getTv() != null &amp;&amp; inOutDao.getTv().getTvdtlsGate() != null) {&#xA;          CachedGateConfiguration config = inOutDao.getTv().getGateConfiguration();&#xA;          if (apiGateStageId != null) {&#xA;            boolean isExchangeLaneAssignmentBooth = config.getStage(apiGateStageId).isExchangeLaneAssignmentBooth();&#xA;            if (isExchangeLaneAssignmentBooth) {&#xA;              documentStageId = apiGateStageId;&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;      com.navis.road.business.model.Document document = saveDocument(&#xA;              inDocType,&#xA;              inOutDao.getDocumentBatchNbr(),&#xA;              documentStageId,&#xA;              tran,&#xA;              xmlText,&#xA;      );&#xA;      inOutDao.addDocument(tran.getTranGkey(), document);&#xA;    }&#xA;  }&#xA;&#xA;  /**&#xA;   * This method validates the generated xml&#xA;   *&#xA;   * @param inXmlDoc : Generated Xml document.&#xA;   */&#xA;  private static void validateXML(String inXmlDoc) throws BizFailure {&#xA;    try {&#xA;      XmlObject.Factory.parse(inXmlDoc);&#xA;    } catch (XmlException e) {&#xA;      throw BizFailure.create(RoadPropertyKeys.ROAD__UNABLE_TO_PARSE_GENERATED_XML, e, inXmlDoc);&#xA;    }&#xA;  }&#xA;&#xA;  private static void addDocBody(DocumentDocument.Document inDocument, TransactionAndVisitHolder inOutDao, boolean inIsMultiStop,&#xA;                                 DocumentType inDocType, Node inMultiStopNode) {&#xA;    DocBodyDocument.DocBody body = inDocument.addNewDocBody();&#xA;    TruckVisitDetails tvdtls = inOutDao.getTv();&#xA;    addTruckVisit(tvdtls, body, inOutDao);&#xA;    if (inOutDao.getTran() != null) {&#xA;      addTruckTransaction(inOutDao, body, inIsMultiStop, inDocType, inMultiStopNode);&#xA;    }&#xA;  }&#xA;&#xA;  @Nullable&#xA;  private static GateConfigStage getConfigStage(Gate inGate, String inTtstageId) {&#xA;    GateConfigStage gateStage = null;&#xA;    if (inGate != null &amp;&amp; inGate.getGateConfig() != null) {&#xA;      gateStage = inGate.getGateConfig().getStageById(inTtstageId);&#xA;    }&#xA;&#xA;    return gateStage;&#xA;  }&#xA;&#xA;  private static List&lt;TruckTransactionStage&gt; sortTranStagesByStageOrder(Collection&lt;TruckTransactionStage&gt; inTruckTranStages) {&#xA;    List list = new ArrayList(inTruckTranStages);&#xA;    Collections.sort(list, new Comparator&lt;TruckTransactionStage&gt;() {&#xA;      public int compare(TruckTransactionStage inS1, TruckTransactionStage inS2) {&#xA;        Long s1Order = inS1.getTtstageOrder();&#xA;        Long s2Order = inS2.getTtstageOrder();&#xA;        return s1Order.compareTo(s2Order);&#xA;      }&#xA;    });&#xA;&#xA;    return list;&#xA;  }&#xA;&#xA;  private static void addTruckTransaction(TransactionAndVisitHolder inOutDao, DocBodyDocument.DocBody inDocBody, boolean inIsMultiStop,&#xA;                                          DocumentType inDocType, Node inMultiStopNode) {&#xA;    TruckTransaction tran = inOutDao.getTran();&#xA;    TrkTransactionDocument.TrkTransaction docTran = inDocBody.addNewTrkTransaction();&#xA;    GeneralReference companyNameGeneralReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;LABEL&quot;, &quot;COMPANY_NAME&quot;);&#xA;    docTran.setTranUfvFlexString01(companyNameGeneralReference.getRefValue1());&#xA;    docTran.setTranUfvFlexString02(companyNameGeneralReference.getRefValue2());&#xA;    ITranslationContext translator = TranslationUtils.getTranslationContext(ContextHelper.getThreadUserContext());&#xA;    docTran.setTranNbr(tran.getTranNbr() == null ? String.valueOf(tran.getTranGkey()) : String.valueOf(tran.getTranNbr()));&#xA;    Unit unit = tran.getTranUnit();&#xA;    String docTypeId = inDocType.getDoctypeId();&#xA;    String notes = tran.getTranNotes();&#xA;    if (notes != null) {&#xA;      if (notes.length() &gt; 236) {&#xA;        docTran.setTranNotes(notes.substring(0, 112));&#xA;        docTran.setTranFlexString04(notes.substring(112, 236));&#xA;        if (notes.length() &gt; 360) {&#xA;          docTran.setTranFlexString05(notes.substring(236, 360));&#xA;        } else {&#xA;          docTran.setTranFlexString05(notes.substring(236));&#xA;        }&#xA;      } else if (notes.length() &gt; 112) {&#xA;        docTran.setTranNotes(notes.substring(0, 112));&#xA;        docTran.setTranFlexString04(notes.substring(112));&#xA;      } else {&#xA;        docTran.setTranNotes(notes);&#xA;      }&#xA;    }&#xA;    TruckerFriendlyTranSubTypeEnum truckerFriendlySubType = null;&#xA;    TranSubTypeEnum subType = tran.getTranSubType();&#xA;    if (subType != null) {&#xA;      if (TranSubTypeEnum.DE.equals(subType)) {&#xA;        if (inIsMultiStop) {&#xA;          //set deliver Import&#xA;          docTran.setTranSubType(translator.getMessageTranslator().getMessage(TranSubTypeEnum.DI.getDescriptionPropertyKey()));&#xA;        } else {&#xA;          docTran.setTranSubType(&quot;Deliver Work Order&quot;);&#xA;        }&#xA;      } else if (TranSubTypeEnum.RI.equals(subType)) {&#xA;        if (inIsMultiStop) {&#xA;          //set Receive Export&#xA;          docTran.setTranSubType(translator.getMessageTranslator().getMessage(TranSubTypeEnum.RE.getDescriptionPropertyKey()));&#xA;        } else {&#xA;          docTran.setTranSubType(&quot;Receive Work Order&quot;);&#xA;        }&#xA;      } else {&#xA;        docTran.setTranSubType(translator.getMessageTranslator().getMessage(tran.getTranSubType().getDescriptionPropertyKey()));&#xA;      }&#xA;      truckerFriendlySubType = TransactionTypeUtil.getTruckerFriendlyTranSubTypeEnum(subType);&#xA;    }&#xA;    if (tran.getTranUnitCategory() != null) {&#xA;      docTran.setTranUnitCategory(tran.getTranUnitCategory().toString());&#xA;    }&#xA;    docTran.setTranTrouble(tran.getTranTrouble());&#xA;    docTran.setTranTroubleStatus(tran.getTranTroubleStatus());&#xA;    boolean tranHadTrouble = tran.getTranHadTrouble() != null &amp;&amp; tran.getTranHadTrouble();&#xA;    docTran.setTranHadTrouble(Boolean.valueOf(tranHadTrouble).toString());&#xA;&#xA;    docTran.setTranTrkcId(tran.getTranTrkcId());&#xA;&#xA;    if (tran.getTranCreated() != null) {&#xA;      docTran.setTranCreated(getDateFormatter().format(tran.getTranCreated()));&#xA;    }&#xA;    docTran.setTranCreator(tran.getTranCreator());&#xA;&#xA;    if (tran.getTranTruckTareWeight() != null) {&#xA;      docTran.setTranTruckTareWeight(tran.getTranTruckTareWeight().toString());&#xA;    }&#xA;    docTran.setTranCtrNbr(tran.getTranCtrNbr());&#xA;    docTran.setTranCtrOwnerId(tran.getTranCtrOwnerId());&#xA;&#xA;    if (tran.getTranCtrFreightKind() != null) {&#xA;      docTran.setTranCtrFreightKind(tran.getTranCtrFreightKind().getKey());&#xA;    }&#xA;&#xA;    String eqTypeId = tran.getTranCtrTypeId() != null ? tran.getTranCtrTypeId() : tran.getTranChsTypeId();&#xA;    EquipType equipType = EquipType.findEquipType(eqTypeId);&#xA;    EquipGrade equipGrade = unit != null ? unit.getUnitPrimaryUe().getUeGradeID() : null;&#xA;&#xA;    String typeId = &quot;&quot;;&#xA;    String desc = &quot;&quot;;&#xA;    if (equipType != null &amp;&amp; equipGrade != null) {&#xA;      typeId = equipType.getEqtypId() + &quot;-&quot; + equipGrade.getEqgrdId() + &quot;:&quot;;&#xA;      if (equipType.getEqtypDescription() != null &amp;&amp; equipGrade.getEqgrdDescription() != null) {&#xA;        desc = equipType.getEqtypDescription() + &quot; &quot; + equipGrade.getEqgrdDescription();&#xA;      } else if (equipType.getEqtypDescription() != null) {&#xA;        desc = equipType.getEqtypDescription();&#xA;      } else if (equipGrade.getEqgrdDescription() != null) {&#xA;        desc = equipGrade.getEqgrdDescription();&#xA;      }&#xA;      docTran.setTranCtrTypeId(typeId);&#xA;      docTran.setTranGradeId(desc);&#xA;    } else if (equipType != null) {&#xA;      typeId = equipType.getEqtypId();&#xA;      if (equipType.getEqtypDescription() != null) {&#xA;        typeId = typeId + &quot;:&quot; + equipType.getEqtypDescription();&#xA;      }&#xA;      docTran.setTranCtrTypeId(typeId);&#xA;    }&#xA;&#xA;    if (tran.getTranCtrGrossWeight() != null) {&#xA;//      double grossWeight = new BigDecimal(UnitUtils.convertTo(tran.getTranCtrGrossWeight(), MassUnitEnum.KILOGRAMS, MassUnitEnum.POUNDS)).&#xA;//              setScale(2, RoundingMode.HALF_UP).doubleValue();&#xA;      double grossWeight = UnitUtils.convertTo(tran.getTranCtrGrossWeight(), MassUnitEnum.KILOGRAMS, MassUnitEnum.POUNDS);&#xA;      docTran.setTranCtrGrossWeight(&quot;&quot; + Math.round(grossWeight));&#xA;    }&#xA;&#xA;    docTran.setTranCtrTicketPosId(tran.getTranCtrTicketPosId());&#xA;    docTran.setTranChsNbr(tran.getTranChsNbr());&#xA;    docTran.setTranChsOwnerId(tran.getTranChsOwnerId());&#xA;&#xA;    if (tran.getTranChsIsOwners() != null) {&#xA;      docTran.setTranChsIsOwners(tran.getTranChsIsOwners().toString());&#xA;    }&#xA;&#xA;    docTran.setTranChsTypeId(tran.getTranChsTypeId());&#xA;    if (tran.getTranChsIsDamaged() != null) {&#xA;      docTran.setTranChsIsDamaged(tran.getTranChsIsDamaged().toString());&#xA;    }&#xA;&#xA;    if (tran.getTranDischargePoint1() != null) {&#xA;      TranDischargePoint1Document.TranDischargePoint1 point1 = docTran.addNewTranDischargePoint1();&#xA;      docTran.setTranDischargePoint1(point1);&#xA;      point1.setPointId(tran.getTranDischargePoint1().getPointId());&#xA;    }&#xA;    if (tran.getTranDischargePoint2() != null) {&#xA;      TranDischargePoint2Document.TranDischargePoint2 point2 = docTran.addNewTranDischargePoint2();&#xA;      docTran.setTranDischargePoint2(point2);&#xA;      point2.setPointId(tran.getTranDischargePoint2().getPointId());&#xA;    }&#xA;    if (tran.getTranLoadPoint() != null) {&#xA;      TranLoadPointDocument.TranLoadPoint point = docTran.addNewTranLoadPoint();&#xA;      docTran.setTranLoadPoint(point);&#xA;      point.setPointId(tran.getTranLoadPoint().getPointId());&#xA;    }&#xA;&#xA;    docTran.setTranOrigin(tran.getTranOrigin());&#xA;    docTran.setTranDestination(tran.getTranDestination());&#xA;    docTran.setTranLineId(tran.getTranLineId());&#xA;    docTran.setTranShipper(tran.getTranShipper());&#xA;    docTran.setTranConsignee(tran.getTranConsignee());&#xA;    ScopedBizUnit consignee = null;&#xA;    ScopedBizUnit shipper = null;&#xA;&#xA;    if (UnitCategoryEnum.IMPORT.equals(tran.getTranUnitCategory())) {&#xA;      if (unit != null &amp;&amp; unit.getUnitGoods() != null) {&#xA;        consignee = unit.getUnitGoods().getGdsConsigneeBzu();&#xA;        shipper = unit.getUnitGoods().getGdsShipperBzu();&#xA;      }&#xA;    } else if (UnitCategoryEnum.EXPORT.equals(tran.getTranUnitCategory())) {&#xA;      if (tran.getTranEqo() != null) {&#xA;        shipper = tran.getTranEqo().getEqoShipper();&#xA;        // Consignee may not be needed during export&#xA;        consignee = tran.getTranEqo().getEqoConsignee();&#xA;      } else {&#xA;        //Dray-Off of the Import container&#xA;        if (unit != null &amp;&amp; unit.getUnitGoods() != null) {&#xA;          consignee = unit.getUnitGoods().getGdsConsigneeBzu();&#xA;          shipper = unit.getUnitGoods().getGdsShipperBzu();&#xA;        }&#xA;      }&#xA;      //delivered against a Booking/Order&#xA;    } else if (UnitCategoryEnum.STORAGE.equals(tran.getTranUnitCategory())) {&#xA;      if (tran.getTranEqo() != null) {&#xA;        shipper = tran.getTranEqo().getEqoShipper();&#xA;      }&#xA;    }&#xA;&#xA;    if (consignee != null &amp;&amp; !inIsMultiStop) {&#xA;      docTran.setTranConsigneeId(getAddress(consignee.getBzuCtct()));&#xA;      String name = consignee.getBzuName() != null &amp;&amp; consignee.getBzuName().length() &gt; 30 ? consignee.getBzuName().substring(0, 30) :&#xA;              consignee.getBzuName();&#xA;      docTran.setTranConsigneeName(name);&#xA;    }&#xA;&#xA;    if (shipper != null) {&#xA;      docTran.setTranShipperId(shipper.getBzuId());&#xA;      String name = shipper.getBzuName() != null &amp;&amp; shipper.getBzuName().length() &gt; 30 ? shipper.getBzuName().substring(0, 30) :&#xA;              shipper.getBzuName();&#xA;      docTran.setTranShipperName(name);&#xA;    }&#xA;&#xA;    String tranLineId = tran.getTranLine() != null ? tran.getTranLine().getBzuId() :&#xA;            (tran.getTranLineId() != null ? tran.getTranLineId() : null);&#xA;    if (tranLineId != null) {&#xA;      docTran.setTranLineId(tranLineId);&#xA;    }&#xA;&#xA;    if (tran.getTranChassis() != null) {&#xA;      if (tran.getTranChassis().getEqEquipType() != null) {&#xA;        docTran.setTranChsTypeId(tran.getTranChassis().getEqEquipType().getEqtypId());&#xA;      }&#xA;    }&#xA;    if (tran.getTranChsOwner() != null) {&#xA;      docTran.setTranChsOwnerId(tran.getTranChsOwner().getBzuId());&#xA;    }&#xA;&#xA;    if (tran.getTranCtrOwner() != null) {&#xA;      docTran.setTranCtrOwnerId(tran.getTranCtrOwner().getBzuId());&#xA;    }&#xA;&#xA;    if (tran.getTranCtrOperator() != null) {&#xA;      TranCtrOperatorDocument.TranCtrOperator ctropr = docTran.addNewTranCtrOperator();&#xA;      ctropr.setBizuId(tran.getTranCtrOperator().getBzuId());&#xA;    }&#xA;    if (tran.getTranUnit() != null) {&#xA;      TranUnitDocument.TranUnit tranUnit = docTran.addNewTranUnit();&#xA;      tranUnit.setUnitId(tran.getTranUnit().getUnitId());&#xA;    }&#xA;&#xA;    if (tran.getTranEqo() != null) {&#xA;      TranEqoDocument.TranEqo docTranEqo = docTran.addNewTranEqo();&#xA;      docTranEqo.setEqboNbr(tran.getTranEqo().getEqboNbr());&#xA;      docTranEqo.setEqoLineId(tran.getTranEqo().getEqoLine().getBzuId());&#xA;      docTranEqo.setEqoLineName(tran.getTranEqo().getEqoLine().getBzuName());&#xA;    }&#xA;&#xA;    if (tran.getTranCarrierVisit() != null) {&#xA;      TranCarrierVisitDocument.TranCarrierVisit cv = docTran.addNewTranCarrierVisit();&#xA;      CarrierVisit carrierVisit = tran.getTranCarrierVisit();&#xA;      cv.setCvId(carrierVisit.getCvId());&#xA;      VisitDetails vstDtls = carrierVisit.getCvCvd();&#xA;      DateFormat dateFormatter = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.SHORT);&#xA;&#xA;      if (carrierVisit.getCvATA() != null) {&#xA;        cv.setCvATA(dateFormatter.format(carrierVisit.getCvATA()));&#xA;      }&#xA;      if (carrierVisit.getCvATD() != null) {&#xA;        cv.setCvATD(dateFormatter.format(carrierVisit.getCvATD()));&#xA;      }&#xA;&#xA;      if (vstDtls != null) {&#xA;        cv.setCvCvdCarrierIbVygNbr(vstDtls.getCarrierIbVoyNbrOrTrainId());&#xA;        cv.setCvCvdCarrierObVygNbr(vstDtls.getCarrierObVoyNbrOrTrainId());&#xA;        cv.setCvCvdCarrierVehicleName(vstDtls.getCarrierVehicleName());&#xA;        if (vstDtls.getCvdETA() != null) {&#xA;          cv.setCvCvdETA(dateFormatter.format(vstDtls.getCvdETA()));&#xA;        }&#xA;        if (vstDtls.getCvdETD() != null) {&#xA;          cv.setCvCvdETD(dateFormatter.format(vstDtls.getCvdETD()));&#xA;        }&#xA;      }&#xA;    }&#xA;&#xA;    if (tran.getTranOperator() != null) {&#xA;      TranOperatorDocument.TranOperator opr = docTran.addNewTranOperator();&#xA;      opr.setOprId(tran.getTranOperator().getOprId());&#xA;    }&#xA;&#xA;    if (tran.getTranContainer() != null) {&#xA;      docTran.setTranCtrNbr(tran.getTranContainer().getEqIdFull());&#xA;    }&#xA;    GeneralReference generalReferenceDNB = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;DNB&quot;);&#xA;    GeneralReference generalReferenceTirLoad = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;TIR_LOAD&quot;);&#xA;    String ctrNbr = docTran.getTranCtrNbr();&#xA;    if (ctrNbr != null &amp;&amp; !generalReferenceDNB.getRefValue1().equals(docTypeId) &amp;&amp; !generalReferenceTirLoad.getRefValue1().equals(docTypeId)) {&#xA;      if (tran.getTranCtrOwnerId() != null) {&#xA;        docTran.setTranCtrNbr(ctrNbr + &quot; &quot; + tran.getTranCtrOwnerId());&#xA;      } else if (tran.getTranCtrOwner() != null) {&#xA;        docTran.setTranCtrNbr(ctrNbr + &quot; &quot; + tran.getTranCtrOwner().getBzuId());&#xA;      }&#xA;    }&#xA;    String chsNbr = docTran.getTranChsNbr();&#xA;    if (chsNbr != null &amp;&amp; !generalReferenceDNB.getRefValue1().equals(docTypeId) &amp;&amp; !generalReferenceTirLoad.getRefValue1().equals(docTypeId)) {&#xA;      if (tran.getTranChsOwnerId() != null) {&#xA;        chsNbr = chsNbr + &quot; &quot; + tran.getTranChsOwnerId();&#xA;      } else if (tran.getTranChsOwner() != null) {&#xA;        chsNbr = chsNbr + &quot; &quot; + tran.getTranChsOwner().getBzuId();&#xA;      }&#xA;      docTran.setTranChsNbr(chsNbr);&#xA;    }&#xA;    if (tran.getTranChsAccessory() != null) {&#xA;      if (tran.getTranChsAccessory().getEqEquipType() != null) {&#xA;        docTran.setTranChsAccTypeId(tran.getTranChsAccessory().getEqEquipType().getEqtypId());&#xA;      }&#xA;    }&#xA;&#xA;    if (unit != null) {&#xA;      if (tran.isReceival()) {&#xA;        docTran.setTranCtrAccNbr(tran.getCtrAccessoryId());&#xA;      } else if (tran.isDelivery()) {&#xA;        String ctrAccNbr = null;&#xA;        String chsAccNbr = null;&#xA;        Accessory accessory = unit.getUnitCtrAccessory();&#xA;        if (accessory != null) {&#xA;          ctrAccNbr = accessory.getEqIdFull();&#xA;        } else {&#xA;          ctrAccNbr = tran.getCtrAccessoryId();&#xA;        }&#xA;        accessory = unit.getUnitChsAccessory();&#xA;        if (accessory != null) {&#xA;          chsAccNbr = accessory.getEqIdFull();&#xA;        } else {&#xA;          chsAccNbr = tran.getChsAccessoryId();&#xA;        }&#xA;        if (ctrAccNbr != null &amp;&amp; chsAccNbr != null) {&#xA;          docTran.setTranCtrAccNbr(ctrAccNbr + &quot;/&quot; + chsAccNbr);&#xA;        } else if (ctrAccNbr != null) {&#xA;          docTran.setTranCtrAccNbr(ctrAccNbr);&#xA;        } else if (chsAccNbr != null) {&#xA;          docTran.setTranChsAccNbr(chsAccNbr);&#xA;        }&#xA;      }&#xA;    }&#xA;&#xA;    String blNbr = getBLNbr(tran);&#xA;    if (blNbr == null) {&#xA;      if (tran.getTranEqoNbr() != null) {&#xA;        blNbr = tran.getTranEqoNbr();&#xA;      } else if (unit != null &amp;&amp; unit.getUnitPrimaryUe().getUeDepartureOrderItem() != null) {&#xA;        blNbr = unit.getUnitPrimaryUe().getUeDepartureOrderItem().getEqboiOrder().getEqboNbr();&#xA;      }&#xA;    }&#xA;    docTran.setTranEqoNbr(blNbr);&#xA;    if (tran.getTranSealNbr1() != null) {&#xA;      docTran.setTranSealNbr1(tran.getTranSealNbr1());&#xA;    } else if (unit != null) {&#xA;      docTran.setTranSealNbr1(unit.getUnitSealNbr1());&#xA;    }&#xA;    if (tran.getTranChsDmg() != null) {&#xA;      TranCtrDmgDocument.TranCtrDmg dmg = docTran.addNewTranCtrDmg();&#xA;      for (Iterator itr = tran.getTranChsDmg().getDamageItemsIterator(); itr.hasNext();) {&#xA;        UnitEquipDamageItem item = (UnitEquipDamageItem) itr.next();&#xA;        if (dmg.getDmgitemType() != null) {&#xA;          dmg.setDmgitemType(dmg.getDmgitemType() + &quot;, &quot; + item.getDmgitemType().getEqdmgtypDescription());&#xA;        } else {&#xA;          dmg.setDmgitemType(item.getDmgitemType().getEqdmgtypDescription());&#xA;        }&#xA;        if (dmg.getDmgitemDescription() != null) {&#xA;          dmg.setDmgitemDescription(dmg.getDmgitemDescription() + &quot;, &quot; + item.getDmgitemDescription());&#xA;        } else {&#xA;          dmg.setDmgitemDescription(item.getDmgitemDescription());&#xA;        }&#xA;      }&#xA;    } else {&#xA;      TranCtrDmgDocument.TranCtrDmg dmg = docTran.addNewTranCtrDmg();&#xA;      dmg.setDmgitemType(&quot;None&quot;);&#xA;    }&#xA;&#xA;    if (inIsMultiStop) {&#xA;      if (inMultiStopNode != null) {&#xA;        Element stopElement = (Element) inMultiStopNode;&#xA;        NodeList consigneeNodeList = stopElement.getElementsByTagName(&quot;stopOffConsignee&quot;);&#xA;        NodeList hazdousCommodityNodeList = stopElement.getElementsByTagName(&quot;hazCommodity&quot;);&#xA;        NodeList nonHazousCommodityNodeList = stopElement.getElementsByTagName(&quot;nonHazCommodity&quot;);&#xA;        NodeList totalNbrOfStopsNodeList = stopElement.getElementsByTagName(&quot;totalNumberOfStops&quot;);&#xA;        NodeList stopSequenceNodeList = stopElement.getElementsByTagName(&quot;StopSequenceNumber&quot;);&#xA;        NodeList addressNodeList = stopElement.getElementsByTagName(&quot;address&quot;);&#xA;&#xA;        //Set Consignee&#xA;        if (consigneeNodeList != null &amp;&amp; consigneeNodeList.length == 1) {&#xA;          String name = consigneeNodeList.item(0).getTextContent() != null &amp;&amp; consigneeNodeList.item(0).getTextContent().length() &gt; 30 ?&#xA;                  consigneeNodeList.item(0).getTextContent().substring(0, 30) :&#xA;                  consigneeNodeList.item(0).getTextContent();&#xA;          docTran.setTranConsigneeName(name);&#xA;        }&#xA;&#xA;        //set Address&#xA;        docTran.setTranConsigneeId(getMultiStopAddress(addressNodeList));&#xA;&#xA;        //Set Page Nbr&#xA;        String pageNbr = &quot;&quot;;&#xA;        if (totalNbrOfStopsNodeList != null &amp;&amp; totalNbrOfStopsNodeList.length == 1) {&#xA;          pageNbr = totalNbrOfStopsNodeList.item(0).getTextContent();&#xA;        }&#xA;        if (stopSequenceNodeList != null &amp;&amp; stopSequenceNodeList.length == 1) {&#xA;          pageNbr = &quot;Page: &quot; + stopSequenceNodeList.item(0).getTextContent() + &quot; of &quot; + pageNbr;&#xA;        }&#xA;        docTran.setTranFlexString02(pageNbr);&#xA;        if (hazdousCommodityNodeList != null) {&#xA;          for (Node hazdousCommodityNode : hazdousCommodityNodeList) {&#xA;            TranHazardDocument.TranHazard haz = docTran.addNewTranHazard();&#xA;            NodeList emergencyContactNameNodeList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazEmergencyContactName&quot;);&#xA;            NodeList emergencyContactPhoneNodeList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazEmergencyPhone&quot;);&#xA;&#xA;            //Set Emergency Contact Name and Number&#xA;            if (emergencyContactNameNodeList != null &amp;&amp; emergencyContactNameNodeList.length == 1) {&#xA;              docTran.setTranFlexString01(emergencyContactNameNodeList.item(0).getTextContent());&#xA;            }&#xA;            if (emergencyContactPhoneNodeList != null &amp;&amp; emergencyContactPhoneNodeList.length == 1) {&#xA;              docTran.setTranFlexString01(docTran.getTranFlexString01() + &quot;, &quot; + emergencyContactPhoneNodeList.item(0).getTextContent());&#xA;            }&#xA;&#xA;            //Set HM&#xA;            haz.setHzrdiInhalationZone(&quot;X&quot;);&#xA;&#xA;            //Set UN/NA Number&#xA;            NodeList hazNumberNodeList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazNumber&quot;);&#xA;            if (hazNumberNodeList != null &amp;&amp; hazNumberNodeList.length == 1) {&#xA;              haz.setHzrdiUNnum(hazNumberNodeList.item(0).getTextContent());&#xA;            }&#xA;&#xA;            //Set Description&#xA;            NodeList hazCommodityNameNodeList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazCommodityName&quot;);&#xA;            if (hazCommodityNameNodeList != null &amp;&amp; hazCommodityNameNodeList.length == 1) {&#xA;              haz.setHzrdiProperName(hazCommodityNameNodeList.item(0).getTextContent());&#xA;              String hazardDesc = haz.getHzrdiProperName();&#xA;              if (hazardDesc != null) {&#xA;                if (hazardDesc.length() &gt; 100) {&#xA;                  haz.setHzrdiProperName(hazardDesc.substring(0, 50));&#xA;                  haz.setHzrdiHazIdUpper(hazardDesc.substring(50, 100));&#xA;                  haz.setHzrdiSubstanceLower(hazardDesc.substring(100));&#xA;                } else if (hazardDesc.length() &gt; 50) {&#xA;                  haz.setHzrdiProperName(hazardDesc.substring(0, 50));&#xA;                  haz.setHzrdiHazIdUpper(hazardDesc.substring(50));&#xA;                }&#xA;              }&#xA;            }&#xA;&#xA;            //Set Class&#xA;            NodeList hazClassNodeList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazPrimaryClass&quot;);&#xA;            if (hazClassNodeList != null &amp;&amp; hazClassNodeList.length == 1) {&#xA;              haz.setHzrdiDescription(hazClassNodeList.item(0).getTextContent());&#xA;            }&#xA;&#xA;            //Set P group&#xA;            NodeList hazPGrpNodeList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazPackageGroup&quot;);&#xA;            if (hazPGrpNodeList != null &amp;&amp; hazPGrpNodeList.length == 1) {&#xA;              haz.setHzrdiPackingGroup(hazPGrpNodeList.item(0).getTextContent());&#xA;            }&#xA;&#xA;            //Set Flash Point&#xA;            String flashPoint = &quot;&quot;;&#xA;            NodeList hazFlashPointList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazFlashPoint&quot;);&#xA;            if (hazFlashPointList != null &amp;&amp; hazFlashPointList.length == 1) {&#xA;              flashPoint = hazFlashPointList.item(0).getTextContent();&#xA;            }&#xA;            NodeList hazFlashPointUOMList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazFlashPointUOM&quot;);&#xA;            if (hazFlashPointUOMList != null &amp;&amp; hazFlashPointUOMList.length == 1) {&#xA;              flashPoint = flashPoint + hazFlashPointUOMList.item(0).getTextContent();&#xA;            }&#xA;            haz.setHzrdiMFAG(flashPoint);&#xA;&#xA;            //Set ERG Number&#xA;            NodeList ergNumberNodeList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;ergNumber&quot;);&#xA;            if (ergNumberNodeList != null &amp;&amp; ergNumberNodeList.length == 1) {&#xA;              haz.setHzrdiERGNumber(ergNumberNodeList.item(0).getTextContent());&#xA;            }&#xA;&#xA;            //Set Qty/Unit&#xA;            String qty = &quot;&quot;;&#xA;            NodeList qtyList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazPieces&quot;);&#xA;            if (qtyList != null &amp;&amp; qtyList.length == 1) {&#xA;              qty = qtyList.item(0).getTextContent();&#xA;            }&#xA;            NodeList qtyUnitList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazPiecesUOM&quot;);&#xA;            if (qtyUnitList != null &amp;&amp; qtyUnitList.length == 1) {&#xA;              qty = qty + &quot;/&quot; + qtyUnitList.item(0).getTextContent();&#xA;            }&#xA;            haz.setHzrdiLtdQty(qty);&#xA;&#xA;            //Set Weight&#xA;            NodeList weightList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazWeight&quot;);&#xA;            if (weightList != null &amp;&amp; weightList.length == 1) {&#xA;              String weight = weightList.item(0).getTextContent();&#xA;              if (weight != null) {&#xA;                haz.setHzrdiWeight(Double.valueOf(weight));&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;&#xA;        if (nonHazousCommodityNodeList != null) {&#xA;          for (Node nonHazdousCommodityNode : nonHazousCommodityNodeList) {&#xA;            TranHazardDocument.TranHazard haz = docTran.addNewTranHazard();&#xA;            //Set Description&#xA;            NodeList hazCommodityDescNodeList = ((Element) nonHazdousCommodityNode).getElementsByTagName(&quot;commodityDescription&quot;);&#xA;            if (hazCommodityDescNodeList != null &amp;&amp; hazCommodityDescNodeList.length == 1) {&#xA;              haz.setHzrdiProperName(hazCommodityDescNodeList.item(0).getTextContent());&#xA;              String hazardDesc = haz.getHzrdiProperName();&#xA;              if (hazardDesc != null) {&#xA;                if (hazardDesc.length() &gt; 100) {&#xA;                  haz.setHzrdiProperName(hazardDesc.substring(0, 50));&#xA;                  haz.setHzrdiHazIdUpper(hazardDesc.substring(50, 100));&#xA;                  haz.setHzrdiSubstanceLower(hazardDesc.substring(100));&#xA;                } else if (hazardDesc.length() &gt; 50) {&#xA;                  haz.setHzrdiProperName(hazardDesc.substring(0, 50));&#xA;                  haz.setHzrdiHazIdUpper(hazardDesc.substring(50));&#xA;                }&#xA;              }&#xA;            }&#xA;&#xA;            //Set Qty/Unit&#xA;            String qty = &quot;&quot;;&#xA;            NodeList qtyList = ((Element) nonHazdousCommodityNode).getElementsByTagName(&quot;countOfPieces&quot;);&#xA;            if (qtyList != null &amp;&amp; qtyList.length == 1) {&#xA;              qty = qtyList.item(0).getTextContent();&#xA;            }&#xA;            NodeList qtyUnitList = ((Element) nonHazdousCommodityNode).getElementsByTagName(&quot;unitOfMeasure&quot;);&#xA;            if (qtyUnitList != null &amp;&amp; qtyUnitList.length == 1) {&#xA;              qty = qty + &quot;/&quot; + qtyUnitList.item(0).getTextContent();&#xA;            }&#xA;            haz.setHzrdiLtdQty(qty);&#xA;&#xA;            //Set Weight&#xA;            NodeList weightList = ((Element) nonHazdousCommodityNode).getElementsByTagName(&quot;weight&quot;);&#xA;            if (weightList != null &amp;&amp; weightList.length == 1) {&#xA;              String weight = weightList.item(0).getTextContent();&#xA;              if (weight != null) {&#xA;                haz.setHzrdiWeight(Double.valueOf(weight));&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    } else {&#xA;      if (tran.getTranHaz() != null) {&#xA;        for (Iterator itr = tran.getTranHaz().getHazardItemsIterator(); itr.hasNext();) {&#xA;          HazardItem hazi = (HazardItem) itr.next();&#xA;          TranHazardDocument.TranHazard haz = docTran.addNewTranHazard();&#xA;          haz.setHzrdiImdgCode(hazi.getHzrdiImdgCode().getKey());&#xA;          haz.setHzrdiUNnum(hazi.getHzrdiUNnum());&#xA;          if (hazi.getHzrdiNbrType() != null) {&#xA;            haz.setHzrdiNbrType(translator.getMessageTranslator().getMessage(hazi.getHzrdiNbrType().getDescriptionPropertyKey()));&#xA;          }&#xA;          ImdgClass imdg = hazi.getHzrdiImdgClass();&#xA;          haz.setHzrdiDescription(translator.getMessageTranslator().getMessage(imdg.getCodePropertyKey()));&#xA;          if (hazi.getHzrdiQuantity() != null) {&#xA;            haz.setHzrdiQuantity(hazi.getHzrdiQuantity().intValue());&#xA;          }&#xA;          haz.setHzrdiPackageType(hazi.getHzrdiPackageType());&#xA;          haz.setHzrdiProperName(hazi.getHzrdiProperName());&#xA;          if (hazi.getHzrdiLtdQty()) {&#xA;            haz.setHzrdiProperName(haz.getHzrdiProperName() + &quot; (LTD QTY)&quot;);&#xA;          }&#xA;          String hazardDesc = haz.getHzrdiProperName();&#xA;          if (hazardDesc != null) {&#xA;            if (hazardDesc.length() &gt; 100) {&#xA;              haz.setHzrdiProperName(hazardDesc.substring(0, 50));&#xA;              haz.setHzrdiHazIdUpper(hazardDesc.substring(50, 100));&#xA;              haz.setHzrdiSubstanceLower(hazardDesc.substring(100));&#xA;            } else if (hazardDesc.length() &gt; 50) {&#xA;              haz.setHzrdiProperName(hazardDesc.substring(0, 50));&#xA;              haz.setHzrdiHazIdUpper(hazardDesc.substring(50));&#xA;            }&#xA;          }&#xA;          haz.setHzrdiEmergencyTelephone(hazi.getHzrdiEmergencyTelephone());&#xA;          if (docTran.getTranFlexString01() == null) {&#xA;            docTran.setTranFlexString01(hazi.getHzrdiEmergencyTelephone());&#xA;          }&#xA;          docTran.setTranFlexString02(&quot;Page: 2 of 2&quot;);&#xA;          if (hazi.getHzrdiPackingGroup() != null) {&#xA;            haz.setHzrdiPackingGroup(&#xA;                    customizePackingGroup(translator.getMessageTranslator().getMessage(hazi.getHzrdiPackingGroup().getDescriptionPropertyKey())));&#xA;          }&#xA;          // No need for null check because in hzrd item constructor it is set to false as default value.&#xA;          haz.setHzrdiLtdQty(hazi.getHzrdiQuantity().toString() + &quot;/&quot; + hazi.getHzrdiPackageType());&#xA;          if (hazi.getHzrdiWeight() != null) {&#xA;            double weight = new BigDecimal(UnitUtils.convertTo(hazi.getHzrdiWeight().doubleValue(), MassUnitEnum.KILOGRAMS, MassUnitEnum.POUNDS)).&#xA;                    setScale(2, RoundingMode.HALF_UP).doubleValue();&#xA;            haz.setHzrdiWeight(weight);&#xA;          }&#xA;          //This field used for HM&#xA;          haz.setHzrdiInhalationZone(&quot;X&quot;);&#xA;          haz.setHzrdiExplosiveClass(hazi.getHzrdiExplosiveClass());&#xA;          haz.setHzrdiPageNumber(hazi.getHzrdiPageNumber());&#xA;          if (hazi.getHzrdiFlashPoint() != null) {&#xA;            DecimalFormat format = new DecimalFormat(&quot;000C&quot;);&#xA;            haz.setHzrdiMFAG(&quot;&quot; + Math.round(hazi.getHzrdiFlashPoint()));&#xA;          }&#xA;//          haz.setHzrdiTechName(hazi.getHzrdiTechName());&#xA;          haz.setHzrdiEMSNumber(hazi.getHzrdiEMSNumber());&#xA;          haz.setHzrdiERGNumber(hazi.getHzrdiERGNumber());&#xA;//          haz.setHzrdiMFAG(hazi.getHzrdiMFAG());&#xA;//          haz.setHzrdiHazIdUpper(hazi.getHzrdiHazIdUpper());&#xA;//          haz.setHzrdiSubstanceLower(hazi.getHzrdiSubstanceLower());&#xA;          haz.setHzrdiPlannerRef(hazi.getHzrdiPlannerRef());&#xA;          haz.setHzrdiMoveMethod(hazi.getHzrdiMoveMethod());&#xA;          if (hazi.getHzrdiSecondaryIMO1() != null) {&#xA;            haz.setHzrdiSecondaryIMO1(&#xA;                    translator.getMessageTranslator().getMessage(hazi.getHzrdiSecondaryIMO1().getDescriptionPropertyKey()));&#xA;          }&#xA;          if (hazi.getHzrdiSecondaryIMO2() != null) {&#xA;            haz.setHzrdiSecondaryIMO2(&#xA;                    translator.getMessageTranslator().getMessage(hazi.getHzrdiSecondaryIMO2().getDescriptionPropertyKey()));&#xA;          }&#xA;          haz.setHzrdiDeckRestrictions(hazi.getHzrdiDeckRestrictions());&#xA;          //This field is used to populate Consignee&#xA;          haz.setHzrdiMarinePollutants(hazi.getHzrdiMarinePollutants().toString());&#xA;          haz.setHzrdiDcLgRef(hazi.getHzrdiDcLgRef());&#xA;          haz.setHzrdiNotes(hazi.getHzrdiNotes());&#xA;          if (hazi.getHzrdiPlacardSet() != null) {&#xA;            for (Object object : hazi.getHzrdiPlacardSet()) {&#xA;              HazardItemPlacard itemPlacard = (HazardItemPlacard) object;&#xA;              // create a new tranHazardPlacard in XML&#xA;              TranHazardPlacardDocument.TranHazardPlacard hazardPlacard = haz.addNewTranHazardPlacard();&#xA;              hazardPlacard.setHzrdipDescription(itemPlacard.getHzrdipDescription());&#xA;              Placard placard = itemPlacard.getHzrdipPlacard();&#xA;              if (placard != null) {&#xA;                hazardPlacard.setPlacardText(placard.getPlacardText());&#xA;                hazardPlacard.setPlacardFurtherExplanation(placard.getPlacardFurtherExplanation());&#xA;                if (placard.getPlacardMinWtKg() != null) {&#xA;                  hazardPlacard.setPlacardMinWtKg(placard.getPlacardMinWtKg());&#xA;                }&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;    if (docTran.getTranCtrOperator() == null) {&#xA;      TranCtrOperatorDocument.TranCtrOperator ctrOpr = docTran.addNewTranCtrOperator();&#xA;      if (tran.getTranLineId() != null) {&#xA;        ctrOpr.setBizuId(tran.getTranLineId());&#xA;      }&#xA;    }&#xA;    boolean isLastStage = tran.getTranNextStageId() == null;&#xA;    setTruckTranTimes(tran, docTran, isLastStage);&#xA;&#xA;    if (tran.getTranUfvFlexString01() != null) {&#xA;      docTran.setTranUfvFlexString01(tran.getTranUfvFlexString01());&#xA;    }&#xA;    if (tran.getTranUfvFlexString02() != null) {&#xA;      docTran.setTranUfvFlexString02(tran.getTranUfvFlexString02());&#xA;    }&#xA;    if (tran.getTranUfvFlexString03() != null) {&#xA;      docTran.setTranUfvFlexString03(tran.getTranUfvFlexString03());&#xA;    }&#xA;    if (tran.getTranUfvFlexString04() != null) {&#xA;      docTran.setTranUfvFlexString04(tran.getTranUfvFlexString04());&#xA;    }&#xA;    if (tran.getTranUfvFlexString05() != null) {&#xA;      docTran.setTranUfvFlexString05(tran.getTranUfvFlexString05());&#xA;    }&#xA;    if (tran.getTranUfvFlexString06() != null) {&#xA;      docTran.setTranUfvFlexString06(tran.getTranUfvFlexString06());&#xA;    }&#xA;    if (tran.getTranUfvFlexString07() != null) {&#xA;      docTran.setTranUfvFlexString07(tran.getTranUfvFlexString07());&#xA;    }&#xA;    if (tran.getTranUfvFlexString08() != null) {&#xA;      docTran.setTranUfvFlexString08(tran.getTranUfvFlexString08());&#xA;    }&#xA;    if (tran.isDelivery()) {&#xA;      UnitFacilityVisit ufv = tran.getTranUfv();&#xA;      if (ufv != null &amp;&amp; (&quot;Y&quot;.equals(ufv.getUfvFlexString09()) || &quot;Yes&quot;.equals(ufv.getUfvFlexString09()))) {&#xA;        docTran.setTranUfvFlexString09(&quot;DO NOT BACKLOAD&quot;);&#xA;      }&#xA;    }&#xA;    if (tran.getTranUfvFlexString10() != null) {&#xA;      docTran.setTranUfvFlexString10(tran.getTranUfvFlexString10());&#xA;    }&#xA;    if (tran.getTranUfvFlexDate01() != null) {&#xA;      Calendar cal = Calendar.getInstance();&#xA;      cal.setTime(tran.getTranUfvFlexDate01());&#xA;      docTran.setTranUfvFlexDate01(cal);&#xA;    }&#xA;    if (tran.getTranUfvFlexDate02() != null) {&#xA;      Calendar cal = Calendar.getInstance();&#xA;      cal.setTime(tran.getTranUfvFlexDate02());&#xA;      docTran.setTranUfvFlexDate02(cal);&#xA;    }&#xA;    if (tran.getTranUfvFlexDate03() != null) {&#xA;      Calendar cal = Calendar.getInstance();&#xA;      cal.setTime(tran.getTranUfvFlexDate03());&#xA;      docTran.setTranUfvFlexDate03(cal);&#xA;    }&#xA;    if (tran.getTranUfvFlexDate04() != null) {&#xA;      Calendar cal = Calendar.getInstance();&#xA;      cal.setTime(tran.getTranUfvFlexDate04());&#xA;      docTran.setTranUfvFlexDate04(cal);&#xA;    }&#xA;    if (tran.getTranUnitFlexString01() != null) {&#xA;      docTran.setTranUnitFlexString01(tran.getTranUnitFlexString01());&#xA;    }&#xA;    if (tran.getTranUnitFlexString02() != null) {&#xA;      docTran.setTranUnitFlexString02(tran.getTranUnitFlexString02());&#xA;    }&#xA;    if (tran.getTranUnitFlexString03() != null) {&#xA;      docTran.setTranUnitFlexString03(tran.getTranUnitFlexString03());&#xA;    }&#xA;    if (tran.getTranUnitFlexString04() != null) {&#xA;      docTran.setTranUnitFlexString04(tran.getTranUnitFlexString04());&#xA;    }&#xA;    if (tran.getTranUnitFlexString05() != null) {&#xA;      docTran.setTranUnitFlexString05(tran.getTranUnitFlexString05());&#xA;    }&#xA;    if (tran.getTranUnitFlexString06() != null) {&#xA;      docTran.setTranUnitFlexString06(tran.getTranUnitFlexString06());&#xA;    }&#xA;    if (tran.getTranUnitFlexString07() != null) {&#xA;      docTran.setTranUnitFlexString07(tran.getTranUnitFlexString07());&#xA;    }&#xA;    if (tran.getTranUnitFlexString08() != null) {&#xA;      docTran.setTranUnitFlexString08(tran.getTranUnitFlexString08());&#xA;    }&#xA;    if (tran.getTranUnitFlexString09() != null) {&#xA;      docTran.setTranUnitFlexString09(tran.getTranUnitFlexString09());&#xA;    }&#xA;    if (tran.getTranUnitFlexString10() != null) {&#xA;      docTran.setTranUnitFlexString10(tran.getTranUnitFlexString10());&#xA;    }&#xA;    if (tran.getTranUnitFlexString11() != null) {&#xA;      docTran.setTranUnitFlexString11(tran.getTranUnitFlexString11());&#xA;    }&#xA;    if (tran.getTranUnitFlexString12() != null) {&#xA;      docTran.setTranUnitFlexString12(tran.getTranUnitFlexString12());&#xA;    }&#xA;    if (tran.getTranUnitFlexString13() != null) {&#xA;      docTran.setTranUnitFlexString13(tran.getTranUnitFlexString13());&#xA;    }&#xA;    if (tran.getTranUnitFlexString14() != null) {&#xA;      docTran.setTranUnitFlexString14(tran.getTranUnitFlexString14());&#xA;    }&#xA;    if (tran.getTranUnitFlexString15() != null) {&#xA;      docTran.setTranUnitFlexString15(tran.getTranUnitFlexString15());&#xA;    }&#xA;&#xA;    //Set Yard Row&#xA;    if (tran.getTranFlexString03() != null) {&#xA;      docTran.setTranFlexString03(tran.getTranFlexString03());&#xA;    }&#xA;&#xA;    //Temp&#xA;    if (unit != null) {&#xA;      UnitFacilityVisit ufv = tran.getTranUfv();&#xA;      if (ufv != null) {&#xA;        String flexString07 = ufv.getUfvFlexString07();&#xA;        if (&quot;KFF&quot;.equals(flexString07) || &quot;AMB&quot;.equals(flexString07)) {&#xA;          docTran.setTranFlexString06(flexString07);&#xA;        } else if (unit.getUnitGoods() != null) {&#xA;          ReeferRqmnts reeferRqmnts = unit.getUnitGoods().getGdsReeferRqmnts();&#xA;          if (reeferRqmnts != null) {&#xA;            Double minC = reeferRqmnts.getRfreqTempLimitMinC();&#xA;            Double maxC = reeferRqmnts.getRfreqTempLimitMaxC();&#xA;            if (minC != null &amp;&amp; maxC != null) {&#xA;              minC = UnitUtils.convertTo(minC, TemperatureUnitEnum.C, TemperatureUnitEnum.F);&#xA;              maxC = UnitUtils.convertTo(maxC, TemperatureUnitEnum.C, TemperatureUnitEnum.F);&#xA;              docTran.setTranFlexString06(Math.round(minC) + &quot;/&quot; + Math.round(maxC));&#xA;            } else if (minC != null) {&#xA;              minC = UnitUtils.convertTo(minC, TemperatureUnitEnum.C, TemperatureUnitEnum.F);&#xA;              docTran.setTranFlexString06(&quot;&quot; + Math.round(minC));&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;    //Carrier Service&#xA;    CarrierVisit cv = tran.getCarrierVisit();&#xA;    if (cv != null &amp;&amp; cv.getCvCvd() != null &amp;&amp; cv.getCvCvd().getCvdService() != null) {&#xA;      docTran.setTranFlexString07(cv.getCvCvd().getCvdService().getSrvcId());&#xA;    }&#xA;&#xA;    //Is reefer&#xA;    if (equipType != null) {&#xA;      docTran.setTranFlexString08(EquipRfrTypeEnum.NON_RFR.equals(equipType.getEqtypRfrType()) ? &quot;No&quot; : &quot;Yes&quot;);&#xA;    } else {&#xA;      docTran.setTranFlexString08(&quot;No&quot;);&#xA;    }&#xA;&#xA;    if (tran.getTranFlexDate01() != null) {&#xA;      Calendar cal = Calendar.getInstance();&#xA;      cal.setTime(tran.getTranFlexDate01());&#xA;      docTran.setTranFlexDate01(cal);&#xA;    }&#xA;    if (tran.getTranFlexDate02() != null) {&#xA;      Calendar cal = Calendar.getInstance();&#xA;      cal.setTime(tran.getTranFlexDate02());&#xA;      docTran.setTranFlexDate02(cal);&#xA;    }&#xA;    if (tran.getTranFlexDate03() != null) {&#xA;      Calendar cal = Calendar.getInstance();&#xA;      cal.setTime(tran.getTranFlexDate03());&#xA;      docTran.setTranFlexDate03(cal);&#xA;    }&#xA;    if (tran.getTranFlexDate04() != null) {&#xA;      Calendar cal = Calendar.getInstance();&#xA;      cal.setTime(tran.getTranFlexDate04());&#xA;      docTran.setTranFlexDate04(cal);&#xA;    }&#xA;&#xA;    GateAppointment gappt = tran.getTranAppointment();&#xA;    if (gappt != null) {&#xA;      docTran.setTranAppointmentState(gappt.getGapptState().getKey());&#xA;    }&#xA;  }&#xA;&#xA;  private static String getBLNbr(TruckTransaction inTran) {&#xA;    Unit unit = inTran.getTranUnit();&#xA;    if (unit != null &amp;&amp; unit.getUnitGoods() != null) {&#xA;      return unit.getUnitGoods().getGdsBlNbr();&#xA;    }&#xA;    return null;&#xA;  }&#xA;&#xA;  private static String customizePackingGroup(String inPackingGroup) {&#xA;    if (&quot;Packaging Group - I&quot;.equals(inPackingGroup)) {&#xA;      return &quot;I&quot;;&#xA;    } else if (&quot;Packaging Group - II&quot;.equals(inPackingGroup)) {&#xA;      return &quot;II&quot;;&#xA;    } else if (&quot;Packaging Group - III&quot;.equals(inPackingGroup)) {&#xA;      return &quot;III&quot;;&#xA;    }&#xA;    return inPackingGroup&#xA;  }&#xA;&#xA;  private static String getAddress(ContactInfo inContactInfo) {&#xA;    if (inContactInfo == null) {&#xA;      return null;&#xA;    }&#xA;    String returnValue = &quot;&quot;;&#xA;    if (inContactInfo.getCtctAddressLine1() != null) {&#xA;      returnValue = inContactInfo.getCtctAddressLine1();&#xA;    }&#xA;&#xA;    if (inContactInfo.getCtctAddressLine2() != null) {&#xA;      returnValue = returnValue + &quot;, &quot; + inContactInfo.getCtctAddressLine2();&#xA;    }&#xA;&#xA;    if (inContactInfo.getCtctAddressLine3() != null) {&#xA;      returnValue = returnValue + &quot;, &quot; + inContactInfo.getCtctAddressLine3();&#xA;    }&#xA;&#xA;    if (inContactInfo.getCtctCity() != null) {&#xA;      returnValue = returnValue + &quot;, &quot; + inContactInfo.getCtctCity();&#xA;    }&#xA;&#xA;    if (inContactInfo.getCtctState() != null) {&#xA;      returnValue = returnValue + &quot;, &quot; + inContactInfo.getCtctState().getStateName();&#xA;    }&#xA;&#xA;    if (inContactInfo.getCtctMailCode() != null) {&#xA;      returnValue = returnValue + &quot;, &quot; + inContactInfo.getCtctMailCode();&#xA;    }&#xA;&#xA;    if (inContactInfo.getCtctCountry() != null) {&#xA;      returnValue = returnValue + &quot;, &quot; + inContactInfo.getCtctCountry().getCntryName();&#xA;    }&#xA;&#xA;    return returnValue;&#xA;  }&#xA;&#xA;  private static String getMultiStopAddress(NodeList inNodeList) {&#xA;    if (inNodeList == null || inNodeList.getLength() == 0) {&#xA;      return null;&#xA;    }&#xA;    Node node = inNodeList.item(0);&#xA;    String returnValue = &quot;&quot;;&#xA;    NodeList addressLine1List = ((Element) node).getElementsByTagName(&quot;addressLine1&quot;);&#xA;    if (addressLine1List != null &amp;&amp; addressLine1List.length == 1) {&#xA;      String value = addressLine1List.item(0).getTextContent();&#xA;      if (StringUtils.isNotBlank(value)) {&#xA;        returnValue = value;&#xA;      }&#xA;    }&#xA;    NodeList addressLine2List = ((Element) node).getElementsByTagName(&quot;addressLine2&quot;);&#xA;    if (addressLine2List != null &amp;&amp; addressLine2List.length == 1) {&#xA;      String value = addressLine2List.item(0).getTextContent();&#xA;      if (StringUtils.isNotBlank(value)) {&#xA;        returnValue = returnValue + &quot;, &quot; + value;&#xA;      }&#xA;    }&#xA;    NodeList cityList = ((Element) node).getElementsByTagName(&quot;city&quot;);&#xA;    if (cityList != null &amp;&amp; cityList.length == 1) {&#xA;      String value = cityList.item(0).getTextContent();&#xA;      if (StringUtils.isNotBlank(value)) {&#xA;        returnValue = returnValue + &quot;, &quot; + value;&#xA;      }&#xA;    }&#xA;    NodeList stateList = ((Element) node).getElementsByTagName(&quot;state&quot;);&#xA;    if (stateList != null &amp;&amp; stateList.length == 1) {&#xA;      String value = stateList.item(0).getTextContent();&#xA;      if (StringUtils.isNotBlank(value)) {&#xA;        returnValue = returnValue + &quot;, &quot; + value;&#xA;      }&#xA;    }&#xA;    NodeList zipList = ((Element) node).getElementsByTagName(&quot;zip&quot;);&#xA;    if (zipList != null &amp;&amp; zipList.length == 1) {&#xA;      String value = zipList.item(0).getTextContent();&#xA;      if (StringUtils.isNotBlank(value)) {&#xA;        returnValue = returnValue + &quot;, &quot; + value;&#xA;      }&#xA;    }&#xA;    return returnValue;&#xA;  }&#xA;&#xA;  private static void setTruckVisitTimes(TruckVisitStats inStats, TruckVisitDocument.TruckVisit inDocTv, boolean inIsLastStage) {&#xA;    if (inStats != null &amp;&amp; inStats.getTvstatStart() != null) {&#xA;      TimeZone tz;&#xA;      Facility facility = ContextHelper.getThreadFacility();&#xA;      if (facility != null) {&#xA;        tz = facility.getTimeZone();&#xA;      } else {&#xA;        tz = ContextHelper.getThreadComplex().getTimeZone();&#xA;      }&#xA;      inDocTv.setTvdtlsTrkStartTime(convertDateToLocalTime(inStats.getTvstatStart(), tz));&#xA;      if (inIsLastStage) {&#xA;        StringBuilder duration = new StringBuilder();&#xA;        long durationMins = (TimeUtils.getCurrentTimeMillis() - inStats.getTvstatStart().getTime()) / 1000 / 60;&#xA;        long hours = durationMins / 60;&#xA;        long minutes = durationMins % 60;&#xA;        duration.append(hours).append(':');&#xA;        if (minutes &lt; 10) {&#xA;          duration.append('0');&#xA;        }&#xA;        duration.append(minutes);&#xA;        inDocTv.setTvdtlsDuration(duration.toString());&#xA;        Date tvEndTime = TimeUtils.getCurrentTime();&#xA;        inDocTv.setTvdtlsTrkEndTime(convertDateToLocalTime(tvEndTime, tz));&#xA;      }&#xA;&#xA;      TruckVisitStage yardStageStats = inStats.findStageById(CachedGateStage.STAGE_ID__YARD);&#xA;      if (yardStageStats != null &amp;&amp; yardStageStats.getTvstageEnd() != null) {&#xA;        inDocTv.setTvdtlsYardCompletionTime(DateUtil.convertDateToLocalTime(yardStageStats.getTvstageEnd(), tz));&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;  private static String convertDateToLocalTime(Date inDate, TimeZone inTimeZone) {&#xA;    if (inDate == null) {&#xA;      return null;&#xA;    }&#xA;    SimpleDateFormat formatter = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss&quot;);&#xA;    formatter.setTimeZone(inTimeZone);&#xA;    return formatter.format(inDate);&#xA;  }&#xA;&#xA;  private static void addTruckVisit(TruckVisitDetails inTvdtls, DocBodyDocument.DocBody inDocBody, TransactionAndVisitHolder inOutDao) {&#xA;    TruckVisitDocument.TruckVisit docTv = inDocBody.addNewTruckVisit();&#xA;    if (inTvdtls != null) {&#xA;      docTv.setTvdtlsLicNbr(inTvdtls.getTvdtlsTruckLicenseNbr());&#xA;      docTv.setTvdtlsTruckId(inTvdtls.getTvdtlsTruckId());&#xA;      if (inTvdtls.getTvdtlsTruckId() != null) {&#xA;        docTv.setTvdtlsTrkId(inTvdtls.getTvdtlsTruckId());&#xA;      }&#xA;      docTv.setTvdtlsDriverCardId(inTvdtls.getTvdtlsDriverCardId());&#xA;      docTv.setTvdtlsDriverLicenseNbr(inTvdtls.getTvdtlsDriverLicenseNbr());&#xA;      docTv.setTvdtlsDriverName(inTvdtls.getTvdtlsDriverName());&#xA;      docTv.setTvdtlsBatNbr(inTvdtls.getTvdtlsBatNbr());&#xA;      docTv.setTvdtlsTvKey(inTvdtls.getCvdGkey());&#xA;      if (inTvdtls.getTvdtlsGosTvKey() != null) {&#xA;        docTv.setTvdtlsGosTvKey(inTvdtls.getTvdtlsGosTvKey());&#xA;      }&#xA;      if (inTvdtls.getTvdtlsTrkCompany() != null) {&#xA;        docTv.setTvdtlsTrkCompany(inTvdtls.getTvdtlsTrkCompany().getBzuId());&#xA;        String name = inTvdtls.getTvdtlsTrkCompany().getBzuName();&#xA;        if (name != null &amp;&amp; name.length() &gt; 25) {&#xA;          docTv.setTvdtlsTrkCompanyName(name.substring(0, 25));&#xA;        } else {&#xA;          docTv.setTvdtlsTrkCompanyName(name);&#xA;        }&#xA;      }&#xA;      docTv.setTvdtlsFlexString01(inTvdtls.getTvdtlsFlexString01());&#xA;      docTv.setTvdtlsFlexString02(inTvdtls.getTvdtlsFlexString02());&#xA;      docTv.setTvdtlsFlexString03(inTvdtls.getTvdtlsFlexString03());&#xA;&#xA;      if (inTvdtls.getTvdtlsFlexDate01() != null) {&#xA;        Calendar cal = Calendar.getInstance();&#xA;        cal.setTime(inTvdtls.getTvdtlsFlexDate01());&#xA;        docTv.setTvdtlsFlexDate01(cal);&#xA;      }&#xA;&#xA;      if (inTvdtls.getTvdtlsEntryLane() != null) {&#xA;        GateLaneType laneType = docTv.addNewTvdtlsEntryLane();&#xA;        laneType.setLaneId(inTvdtls.getTvdtlsEntryLane().getLaneId());&#xA;      }&#xA;      if (inTvdtls.getTvdtlsExchangeLane() != null) {&#xA;        GateLaneType laneType = docTv.addNewTvdtlsExchangeLane();&#xA;        laneType.setLaneId(inTvdtls.getTvdtlsExchangeLane().getLaneId());&#xA;      }&#xA;      if (inTvdtls.getTvdtlsExitLane() != null) {&#xA;        GateLaneType laneType = docTv.addNewTvdtlsExitLane();&#xA;        laneType.setLaneId(inTvdtls.getTvdtlsExitLane().getLaneId());&#xA;      }&#xA;      if (inTvdtls.getTvdtlsTroubleLane() != null) {&#xA;        GateLaneType laneType = docTv.addNewTvdtlsTroubleLane();&#xA;        laneType.setLaneId(inTvdtls.getTvdtlsTroubleLane().getLaneId());&#xA;      }&#xA;      String nextExchangeAreaId = inTvdtls.getTvdtlsNextExchangeAreaId();&#xA;      if (nextExchangeAreaId != null) {&#xA;        docTv.setTvdtlsNextExchangeAreaId(nextExchangeAreaId);&#xA;      }&#xA;      List&lt;TruckTransactionStage&gt; gateStages = inTvdtls.findTruckVisitsStages();&#xA;      if (gateStages != null &amp;&amp; !gateStages.isEmpty()) {&#xA;        List&lt;TruckTransactionStage&gt; sortedStages = sortTranStagesByStageOrder(gateStages);&#xA;        for (Object gateStage : sortedStages) {&#xA;          TruckTransactionStage item = (TruckTransactionStage) gateStage;&#xA;          TvdtlsRequiredStagesDocument.TvdtlsRequiredStages stage = docTv.addNewTvdtlsRequiredStages();&#xA;          String stageId = item.getTtstageId();&#xA;          stage.setStageId(stageId);&#xA;          if (item.getTtstageOrder() != null) {&#xA;            stage.setStageOrder(item.getTtstageOrder().intValue());&#xA;          }&#xA;          if (item.getStageTransaction() != null) {&#xA;            GateConfigStage configStage = getConfigStage(item.getStageTransaction().getGate(), stageId);&#xA;            if (configStage != null) {&#xA;              stage.setStageDescription(configStage.getStageDescription());&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;&#xA;      String nextStageId;&#xA;      if (inOutDao.hasTransaction()) {&#xA;        nextStageId = inTvdtls.getNextStageIdFromTransactions(inOutDao.getStage());&#xA;      } else {&#xA;        nextStageId = inTvdtls.getTvdtlsNextStageId();&#xA;      }&#xA;      boolean isLastStage = nextStageId == null;&#xA;&#xA;      setTruckVisitTimes(inTvdtls.getStats(), docTv, isLastStage);&#xA;      docTv.setTvdtlsAppointmentNbr(String.valueOf(inTvdtls.getTvdtlsTvAppointmentNbr()));&#xA;      TruckVisitAppointment tva = inTvdtls.getTvdtlsTruckVisitAppointment();&#xA;      if (tva != null) {&#xA;        docTv.setTvdtlsAppointmentState(tva.getTvapptState().getKey());&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;  private static com.navis.road.business.model.Document saveDocument(&#xA;          DocumentType inDoctype,&#xA;          Long inBatchNbr,&#xA;          String inStageId,&#xA;          TruckTransaction inTrkTran,&#xA;          String inDocData&#xA;  ) {&#xA;    return com.navis.road.business.model.Document.&#xA;            createDocument(inDoctype, inBatchNbr, inStageId, inTrkTran, inDocData);&#xA;  }&#xA;&#xA;  private static void setTruckTranTimes(TruckTransaction inTransaction, TrkTransactionDocument.TrkTransaction inDocTran, boolean inIsLastStage) {&#xA;    if (inTransaction != null &amp;&amp; inTransaction.getTranCreated() != null) {&#xA;      TimeZone tz;&#xA;      Facility facility = ContextHelper.getThreadFacility();&#xA;      if (facility != null) {&#xA;        tz = facility.getTimeZone();&#xA;      } else {&#xA;        tz = ContextHelper.getThreadComplex().getTimeZone();&#xA;      }&#xA;&#xA;      // tranStartTime is the transaction's created time&#xA;      inDocTran.setTranStartTime(convertDateToLocalTime(inTransaction.getTranCreated(), tz));&#xA;&#xA;      // tranEndTime is set only if the transaction is at the last stage. If so, the current time is set as the tranEndTime&#xA;      if (inIsLastStage) {&#xA;        Date tranEndTime = TimeUtils.getCurrentTime();&#xA;        inDocTran.setTranEndTime(convertDateToLocalTime(tranEndTime, tz));&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;  private static DateFormat getDateFormatter() {&#xA;    DateFormat dateFormatter = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.SHORT);&#xA;    dateFormatter.setTimeZone(ContextHelper.getThreadUserTimezone());&#xA;    return dateFormatter;&#xA;  }&#xA;&#xA;  private Logger LOGGER = Logger.getLogger(MatsonAncCreateDocument.class);&#xA;}" />
<extension name="MATUnitFacilityVisitLifeCyleInterceptor" scope="MATSON" type="ENTITY_LIFECYCLE_INTERCEPTION" language="GROOVY" is-enabled="N" contents="/*&#xD;&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xD;&#xA; *&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;package com.navis.road.business.adaptor.document&#xD;&#xA;&#xD;&#xA;import com.navis.argo.business.api.IEvent&#xD;&#xA;import com.navis.argo.business.api.ServicesManager&#xD;&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xD;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xD;&#xA;import com.navis.argo.business.model.Facility&#xD;&#xA;import com.navis.argo.business.model.LocPosition&#xD;&#xA;import com.navis.argo.business.reference.RoutingPoint&#xD;&#xA;import com.navis.external.framework.entity.AbstractEntityLifecycleInterceptor&#xD;&#xA;import com.navis.external.framework.entity.EEntityView&#xD;&#xA;import com.navis.external.framework.util.EFieldChange&#xD;&#xA;import com.navis.external.framework.util.EFieldChanges&#xD;&#xA;import com.navis.external.framework.util.EFieldChangesView&#xD;&#xA;import com.navis.framework.business.Roastery&#xD;&#xA;import com.navis.framework.portal.FieldChanges&#xD;&#xA;import com.navis.inventory.InventoryField&#xD;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xD;&#xA;import com.navis.inventory.business.units.Unit&#xD;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xD;&#xA;import com.navis.services.business.rules.EventType&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * This groovy checks the category of units that should be imports but the advance VV leaves them as Exports and leaves the OB carrier vessel&#xD;&#xA; *&#xD;&#xA; * Author: Peter Seiler&#xD;&#xA; * Date: 08/13/15&#xD;&#xA; * JIRA: CSDV-3123&#xD;&#xA; * SFDC: 143603&#xD;&#xA; *&#xD;&#xA; * Peter Seiler 09/12/2015&#xD;&#xA; *&#xD;&#xA; * Create a second unit for a unit moving from one facility to another on the ship&#xD;&#xA; *&#xD;&#xA; * Modified: 9/25/2015: Imran Ahmad: do not log duplicate events. Handle Storge Empties also.&#xD;&#xA; * Modified: 10/6/2015: Imran Ahmad: To handle category computation for the new Unit&#xD;&#xA; * Modified: 10/14/2015: Bruno Chiarini: Changed ufvFlexString used to flag cloned units from 05 to 02&#xD;&#xA; *&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;public class MATUnitFacilityVisitLifeCyleInterceptor extends AbstractEntityLifecycleInterceptor {&#xD;&#xA;  @Override&#xD;&#xA;  void onCreate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges) {&#xD;&#xA;    //this.onCreateOrUpdate(inEntity, inOriginalFieldChanges, inMoreFieldChanges);&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  @Override&#xD;&#xA;  void onUpdate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges) {&#xD;&#xA;    this.onCreateOrUpdate(inEntity, inOriginalFieldChanges, inMoreFieldChanges);&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  @Override&#xD;&#xA;  void onCreateOrUpdate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges)&#xD;&#xA;&#xD;&#xA;  {&#xD;&#xA;    this.log(&quot;MATUnitFacilityVisitLifeCyleInterceptor: Started&quot;);&#xD;&#xA;&#xD;&#xA;    /* get the unit entity */&#xD;&#xA;&#xD;&#xA;    UnitFacilityVisit ufv = inEntity._entity;&#xD;&#xA;&#xD;&#xA;    if (ufv == null || &quot;CLONED&quot;.equals(ufv.getUfvFlexString02())) {&#xD;&#xA;      return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    Unit unit = ufv.getUfvUnit();&#xD;&#xA;&#xD;&#xA;    if (unit == null) {&#xD;&#xA;      return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    /* get the routing point for the POD for the Unit */&#xD;&#xA;&#xD;&#xA;    RoutingPoint pod = unit.getUnitRouting().getRtgPOD1();&#xD;&#xA;&#xD;&#xA;    /* get the facility that the UFV is associated with */&#xD;&#xA;&#xD;&#xA;    Facility ThisUFVFacility = ufv.getUfvFacility();&#xD;&#xA;&#xD;&#xA;    if (inOriginalFieldChanges.hasFieldChange(InventoryField.UFV_FACILITY)) {&#xD;&#xA;      EFieldChange FacilityChg = inOriginalFieldChanges.findFieldChange(InventoryField.UFV_FACILITY);&#xD;&#xA;      ThisUFVFacility = FacilityChg.getNewValue() as Facility;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    /* if this is not the facility that is the POD for the UFV, exit */&#xD;&#xA;&#xD;&#xA;    this.log(&quot;ThisUFV &quot; + ufv); //added by Bruno&#xD;&#xA;    this.log(&quot;ThisUnit &quot; + unit); // added by Bruno&#xD;&#xA;    this.log(&quot;ThisUnitPOD &quot; + pod)&#xD;&#xA;    this.log(&quot;ThisUFVFacility routing point &quot; + ThisUFVFacility.getFcyRoutingPoint())&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    if (ThisUFVFacility.getFcyRoutingPoint() != pod) {&#xD;&#xA;      if (UnitCategoryEnum.THROUGH.equals(unit.getUnitCategory())) {&#xD;&#xA;        // if the unit is a through unit and if the POD is not this Facility's routing point then exit. In all other cases we may want to&#xD;&#xA;        //  change category and create a new Unit&#xD;&#xA;        return;&#xD;&#xA;      } else if (unit.getUnitCreateTime() &gt; (new Date(System.currentTimeMillis() - (1000 * 60)))) {&#xD;&#xA;        // exit if the existing Unit was just created (within one minute) e.g. from Barge Stowplan or other&#xD;&#xA;        return;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    /* get the carrier for the UFV */&#xD;&#xA;&#xD;&#xA;    LocPosition Curr_CV = ufv.getUfvLastKnownPosition();&#xD;&#xA;&#xD;&#xA;    if (inOriginalFieldChanges.hasFieldChange(InventoryField.UFV_LAST_KNOWN_POSITION)) {&#xD;&#xA;      EFieldChange Pos_CVChg = inOriginalFieldChanges.findFieldChange(InventoryField.UFV_LAST_KNOWN_POSITION);&#xD;&#xA;      Curr_CV = Pos_CVChg.getNewValue() as LocPosition;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    /* if the current carrier is designated as vessel, and the category is Import, Export or Through, log an event on the Unit to trigger a&#xD;&#xA;     Geberal Notice to clone the unit for the next facility.&#xD;&#xA;     */&#xD;&#xA;&#xD;&#xA;    this.log(&quot;ThisUnit.getUnitCategory() &quot; + unit.getUnitCategory())&#xD;&#xA;    this.log(&quot;Curr_CV &quot; + Curr_CV)&#xD;&#xA;    this.log(&quot;Curr_CV.getLocType() &quot; + Curr_CV.getPosLocType())&#xD;&#xA;&#xD;&#xA;    UfvTransitStateEnum stateEnum = ufv.getUfvTransitState();&#xD;&#xA;    if (inOriginalFieldChanges.hasFieldChange(InventoryField.UFV_TRANSIT_STATE)) {&#xD;&#xA;      stateEnum = (UfvTransitStateEnum) inOriginalFieldChanges.findFieldChange(InventoryField.UFV_TRANSIT_STATE).getNewValue();&#xD;&#xA;    }&#xD;&#xA;    if ((UnitCategoryEnum.IMPORT.equals(unit.getUnitCategory()) || UnitCategoryEnum.EXPORT.equals(unit.getUnitCategory()) ||&#xD;&#xA;            UnitCategoryEnum.THROUGH.equals(unit.getUnitCategory())) &amp;&amp; LocTypeEnum.VESSEL.equals(Curr_CV.getPosLocType()) &amp;&amp;&#xD;&#xA;            (UfvTransitStateEnum.S70_DEPARTED.equals(stateEnum) || UfvTransitStateEnum.S20_INBOUND.equals(stateEnum))) {&#xD;&#xA;      /* insert event into unit to trigger a general notice to clone the unit to a new a */&#xD;&#xA;&#xD;&#xA;      ServicesManager sm = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xD;&#xA;&#xD;&#xA;      EventType cloneUnitEventType = EventType.findEventType('UNIT_CLONE_NEXT_FACILITY');&#xD;&#xA;&#xD;&#xA;      if (sm != null &amp;&amp; cloneUnitEventType != null &amp;&amp; !sm.hasEventTypeBeenRecorded(cloneUnitEventType, unit)) {&#xD;&#xA;        (IEvent) sm.recordEvent(cloneUnitEventType, &quot;Clone Unit for next facility &quot;, null, null, unit, (FieldChanges) null);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;}" />
<extension name="MATGateReeferTemp" scope="MATSON" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA;*  Change   Changer  Date       Desc&#xA;*  A1       GR       12/16/11   Updated Reefer Variable for navis case#89220&#xA;*  A2       GR       02/17/12   TOS2.1 : Updt Field unitFlexString07 to UfvFlexString07&#xA;*  A3       LC       07/20/12   Create Temp discrepancy report on Dray-In&#xA;*  A4       LC       04/16/13   Check for the Receive Export Ingate, copies booking req temp to unit req temp&#xA;*  A5       LC       09/25/13   Get the trans booking temp required&#xA;*  A6       PS       07/30/15   Change to code extension.  Implement for Alaska.  Add KFF logic&#xA;*  A7       Bruno Chiarini 27-Sep-2015 Added AMB logic, added comments, reorganized code&#xA;*  A8       Bruno Chiarini 23-Oct-2015 Removed validation. Code is now used only to retrieve values from booking and&#xA;*                                       apply to unit in transaction.&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.atoms.EquipRfrTypeEnum&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.argo.business.reference.EquipGrade&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.metafields.Metafield&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.framework.util.internationalization.ITranslationContext&#xA;import com.navis.framework.util.internationalization.PropertyKey&#xA;import com.navis.framework.util.internationalization.PropertyKeyFactory&#xA;import com.navis.framework.util.internationalization.TranslationUtils&#xA;import com.navis.framework.util.message.MessageLevel&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.ReeferRqmnts&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.orders.business.eqorders.EquipmentOrder&#xA;import com.navis.orders.business.eqorders.EquipmentOrderItem&#xA;import com.navis.road.RoadPropertyKeys&#xA;import com.navis.road.business.atoms.TranSubTypeEnum&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import org.apache.commons.lang.StringUtils&#xA;&#xA;&#xA;/**&#xA; * Validates and applies the reefer temperature entered in the gate screen.&#xA; * The reefer temperature is captured in a unit flex field.&#xA; * The validation rules will result in an error if any of the conditions below is true:&#xA; * 1) Any Unit with KFF&#xA; * 2) Any Unit with AMB&#xA; * 3) Non-reefer with temp. entered&#xA; * 4) Reefer equipment and reefer temperature is not entered.&#xA; *&#xA; * Date: Aug. 14, 2015&#xA; * Peter Seiler (A6)&#xA; * SFDC: 142197&#xA; * JIRA: CSDV-3161&#xA; *&#xA; */&#xA;&#xA;public class MATGateReeferTemp extends AbstractGateTaskInterceptor implements EGateTaskInterceptor //A6&#xA;{&#xA;    // These properties defined in the resource bundle&#xA;&#xA;    public static String BEAN_ID = &quot;applyReeferTempToTranTempSetting&quot;&#xA;    // {0} translated field name&#xA;    // {1} equipment type&#xA;    public static PropertyKey REEFER_TEMP_NOT_ALLOWED = PropertyKeyFactory.valueOf(&quot;gate.reefer_temp_not_allowed&quot;)&#xA;    // {0} translated field name&#xA;    // {1} equipment type&#xA;    public static PropertyKey REEFER_TEMP_REQUIRED = PropertyKeyFactory.valueOf(&quot;gate.reefer_temp_required&quot;)&#xA;    // {0} translated field name&#xA;    public static PropertyKey REEFER_TEMP_INVALID = PropertyKeyFactory.valueOf(&quot;gate.reefer_temp_invalid&quot;)&#xA;&#xA;    public static String REEFER_TEMP_FLEX_FIELD = &quot;ufvFlexString07&quot; //A2&#xA;    public static String AMB_REEFER_TEMP_STRING = &quot;AMB&quot;&#xA;    public static String KFF_REEFER_TEMP_STRING = &quot;KFF&quot;&#xA;    public static String DUAL_REEFER_TEMP_STRING = &quot;DUAL&quot;//A6&#xA;    public static PropertyKey BOOKING_REQUIRES_KFF = PropertyKeyFactory.valueOf(&quot;gate.keep_from_freezing_required&quot;)//A6&#xA;    // {1} booking number&#xA;    public static PropertyKey BOOKING_REQUIRES_AMB = PropertyKeyFactory.valueOf(&quot;gate.ambient_required&quot;)  //A7&#xA;    // {1} booking number&#xA;&#xA;    public void execute(TransactionAndVisitHolder dao)&#xA;    {&#xA;&#xA;        TruckTransaction tran = dao.tran;&#xA;        Container container = tran.tranContainer;&#xA;&#xA;        // No container, exit&#xA;        if (container == null) {&#xA;            return&#xA;        }&#xA;&#xA;        EquipRfrTypeEnum rfrType = container.eqRfrType;&#xA;        String fieldValue = tran.getFieldString(getFlexFieldMetafieldId(REEFER_TEMP_FLEX_FIELD));&#xA;        String fieldName = getFlexFieldTranslatedName(REEFER_TEMP_FLEX_FIELD);&#xA;        String eqTypeId = container.eqEquipType.eqtypId&#xA;        String ctrNbr = tran.getTranCtrNbr();   //A6&#xA;        String dest = tran.getTranDestination();   //A6&#xA;&#xA;        // GET BOOKING TEMP REQUIREMENTS (STORED IN BOOKING ITEM REMARKS)&#xA;        EquipmentOrderItem ThisEQOI = tran.getTranEqoItem();&#xA;        String bkItemRemarks = &quot;&quot;;&#xA;        if (ThisEQOI != null)&#xA;        {&#xA;            bkItemRemarks = ThisEQOI.getEqoiRemarks();&#xA;            if (bkItemRemarks == null || bkItemRemarks.length() == 0) {&#xA;                bkItemRemarks = &quot;&quot;;&#xA;            }&#xA;        }&#xA;&#xA;        fieldValue = bkItemRemarks;                 // A8&#xA;        tran.setTranUfvFlexString07(bkItemRemarks); // A8&#xA;&#xA;        this.log(&quot;Booking Item Remarks: [&quot; + bkItemRemarks + &quot;]&quot;);&#xA;&#xA;        // CASE 1: ANY UNIT (REEFER OR NON-REEFER) WITH KFF SETTING&#xA;        if (bkItemRemarks == KFF_REEFER_TEMP_STRING)    //Booking says it should be a KF&#xA;        {&#xA;//            if (fieldValue != KFF_REEFER_TEMP_STRING )   //but field value in gate doesn't match&#xA;//            {&#xA;//                EquipmentOrder ThisEQO = tran.getTranEqo(); //Booking Number&#xA;//                RoadBizUtil.appendMessage(MessageLevel.SEVERE, BOOKING_REQUIRES_KFF, fieldName, ThisEQO.getEqboNbr());  //A6&#xA;//            }&#xA;            return;&#xA;        }&#xA;&#xA;        // CASE 2: ANY UNIT (REEFER OR NON-REEFER) WITH AMB SETTING&#xA;        if (bkItemRemarks == AMB_REEFER_TEMP_STRING)     //Booking says it should be an AMB&#xA;        {&#xA;//            if (fieldValue != AMB_REEFER_TEMP_STRING )  //but field value in gate doesn't match&#xA;//            {&#xA;//                EquipmentOrder ThisEQO = tran.getTranEqo(); //Booking Number&#xA;//                RoadBizUtil.appendMessage(MessageLevel.SEVERE, BOOKING_REQUIRES_AMB, fieldName, ThisEQO.getEqboNbr());  //A6&#xA;//            }&#xA;            return;&#xA;        }&#xA;&#xA;        // CASE 3: NON-REEFER WITH TEMP SETTING ENTERED (NOT AMB or KFF)&#xA;        if (EquipRfrTypeEnum.NON_RFR.equals(rfrType))&#xA;        {&#xA;            //Unit is not a reefer, check if there's a temp.&#xA;            if (StringUtils.isNotEmpty(fieldValue))&#xA;            {&#xA;                RoadBizUtil.appendMessage(MessageLevel.SEVERE, REEFER_TEMP_NOT_ALLOWED, fieldName, eqTypeId);&#xA;            }&#xA;            return;&#xA;        }&#xA;&#xA;        // CASE 4: Reefer equipment types must have a value in the &quot;Reefer Temp&quot; flex field.&#xA;        if (!EquipRfrTypeEnum.NON_RFR.equals(rfrType)       //It's a reefer&#xA;                &amp;&amp; StringUtils.isEmpty(fieldValue))         //and Temp field in gate is empty&#xA;        {&#xA;            RoadBizUtil.appendMessage(MessageLevel.SEVERE, REEFER_TEMP_REQUIRED, fieldName, eqTypeId, bkItemRemarks);&#xA;            return;&#xA;        }&#xA;&#xA;        Unit unit = tran.getTranUnit();&#xA;        if (unit != null) {&#xA;            UnitEquipment unitEquipment = unit.getUnitPrimaryUe();&#xA;            EquipmentState eqs = unitEquipment.getUeEquipmentState();&#xA;            if (eqs != null ){&#xA;                EquipGrade equipGrade = eqs.getEqsGradeID();&#xA;                Boolean isDualBooking = bkItemRemarks!= null &amp;&amp; bkItemRemarks.toUpperCase().contains(DUAL_REEFER_TEMP_STRING);&#xA;                Boolean isDualCtr = equipGrade!= null &amp;&amp; (DT.equals(equipGrade.getEqgrdId()) || DV.equals(equipGrade.getEqgrdId()))&#xA;                if (isDualCtr) {&#xA;                    if (!isDualBooking) {&#xA;                        RoadBizUtil.appendMessage(MessageLevel.SEVERE, RoadPropertyKeys.GATE__USER_MESSAGE_3,&#xA;                                &quot;Cannot receive an Unit of dual temperature grade against this booking with single or no temperature&quot;, null);&#xA;                        return;&#xA;                    }&#xA;                } else&#xA;                if (isDualBooking)&#xA;                {&#xA;                    RoadBizUtil.appendMessage(MessageLevel.SEVERE, RoadPropertyKeys.GATE__USER_MESSAGE_2,&#xA;                            &quot;Unit not of type dual temp, cannot be received against this booking&quot;, null);&#xA;                    return;&#xA;                }&#xA;            }&#xA;        }&#xA;        // Reefer equipment type and non-empty temp value.&#xA;&#xA;        Double reefer1TempC = 0.0;  //A6&#xA;        Double reefer1TempF = 0.0;  //A6&#xA;        Double reefer2TempC = null;  //A6&#xA;        Double reefer2TempF = null;  //A6&#xA;&#xA;        /* parse out both reefer temperatures */&#xA;&#xA;        String Temp1Txt = null;  //A6&#xA;        String Temp2Txt = null;  //A6&#xA;&#xA;        /* find if there is a slash in the string */&#xA;&#xA;        int SlashPos = fieldValue.indexOf('/');  //A6&#xA;&#xA;        if (SlashPos == -1)  //A6&#xA;        {&#xA;            /* there is no slash assume only the first temperature is specified. */&#xA;            Temp1Txt = fieldValue;  //A6&#xA;        }&#xA;        else&#xA;        {&#xA;            /* two temperature were entered parse them both */&#xA;//            Temp1Txt = fieldValue[0 .. SlashPos-1];  //A6&#xA;//            Temp2Txt = fieldValue[SlashPos+1 .. value.length()-1];  //A6&#xA;&#xA;            def tokens = fieldValue.split('/'); //A8&#xA;            Temp1Txt = tokens[1];&#xA;            Temp2Txt = tokens[2];&#xA;        }&#xA;&#xA;&#xA;        // Parse and convert temp 1&#xA;        try  //A6&#xA;        {&#xA;            /* convert the first entry to numeric */&#xA;            reefer1TempF = Double.parseDouble(Temp1Txt);  //A6&#xA;            reefer1TempC = this.fahrenheitToCelsius(reefer1TempF);  //A6&#xA;&#xA;            // if dual temp, parse and convert temp 2&#xA;            if (Temp2Txt != null)&#xA;            {&#xA;                reefer2TempF = Double.parseDouble(Temp2Txt);    //A6&#xA;                reefer2TempC = this.fahrenheitToCelsius(reefer2TempF);  //A6&#xA;            }&#xA;        }&#xA;        catch (Exception e)&#xA;        {&#xA;            RoadBizUtil.appendMessage(MessageLevel.SEVERE, REEFER_TEMP_INVALID, fieldName);&#xA;            this.log(&quot;Exception parsing temperatures: &quot; + e);&#xA;            return;&#xA;        }&#xA;&#xA;        //gvyApi.logWarn(&quot;reeferTempC:&quot;+reeferTempC);&#xA;        //gvyApi.logWarn(&quot;reeferTempF:&quot;+reeferTempF);&#xA;        // Copy the temp value entered to the tranTempSetting field on the transaction so that CreateContainerVisit&#xA;        // will create a ReeferRecord&#xA;        // with this value in the rfrecSetPointTmp field.&#xA;        TranSubTypeEnum tranType = tran.getTranSubType(); //A1&#xA;        //For DrayIn Set TempRequired for RE set TempSetting&#xA;        if(TranSubTypeEnum.RI.equals(tranType)){&#xA;            unit = tran.getTranUnit();&#xA;            //gets the unit temp to check for temp discrepancy&#xA;            if (unit != null &amp;&amp; unit.getUnitGoods() != null &amp;&amp; unit.getUnitGoods().getGdsReeferRqmnts() != null)&#xA;            {&#xA;                Double tempRequiredC = unit.getUnitGoods().getGdsReeferRqmnts().getRfreqTempRequiredC();&#xA;                Double tempRequiredF = this.celsiusToFahrenheit(tempRequiredC);&#xA;&#xA;                def blNbr = unit.getUnitGoods().getGdsBlNbr();  //A6&#xA;                int comparisonVal = 0;&#xA;                unit.updateRequiresPower(true); //A8&#xA;&#xA;                //if (tempRequiredF != null &amp;&amp; (tempRequiredF.compareTo(reefer1TempF)!= 0)) {&#xA;                //    log(&quot;Sending email to notify discrepancy in temperature&quot;);&#xA;                // }&#xA;            }&#xA;            tran.tranTempRequired = reefer1TempC;  //A6&#xA;        }&#xA;        else&#xA;        {&#xA;            tran.tranTempSetting = reefer1TempC;  //A6&#xA;&#xA;            if(TranSubTypeEnum.RE.equals(tranType)){&#xA;                //for RE - copy unit's booking temp required&#xA;                def tranBooking;&#xA;                def tranBookingTemp;&#xA;                if(tran != null &amp;&amp; tran.getTranEqoItem()!=null)  {&#xA;                    tranBooking = tran.getTranEqoNbr();  //get the booking number at the ingate&#xA;                    log(&quot;Booking Number:&quot;+tranBooking);&#xA;                    tranBookingTemp = tran.getTranEqoItem().getEqoiTempRequired(); //get the temp req from booking&#xA;                    log(&quot;tranTempRequired----&gt;&quot;+tranBookingTemp);&#xA;                    log(&quot;Booking Item Remarks (temp setting): &quot; + bkItemRemarks);&#xA;                }&#xA;                tran.tranTempRequired =  tranBookingTemp;&#xA;&#xA;                /* set the unit's temperatures to be the values entered */&#xA;&#xA;                GoodsBase ThisUnitGoods = null;  //A6&#xA;                ReeferRqmnts ThisReeferReq = null;  //A6&#xA;&#xA;                Unit ThisUnit = tran.getTranUnit();  //A6&#xA;                if (ThisUnit != null)  //A6&#xA;                {&#xA;                    ThisUnitGoods = ThisUnit.getUnitGoods();  //A6&#xA;                    ThisUnit.updateRequiresPower(true); //A8&#xA;                }&#xA;                if (ThisUnitGoods != null)  //A6&#xA;                {&#xA;                    ThisReeferReq = ThisUnitGoods.getGdsReeferRqmnts();  //A6&#xA;                }&#xA;                // if not temp is set then use the temp in the gate&#xA;                if (ThisReeferReq != null)  //A6&#xA;                {&#xA;                    ThisReeferReq.setRfreqTempRequiredC(reefer1TempC);  //A6&#xA;                    ThisReeferReq.setRfreqTempLimitMinC(reefer1TempC);  //A6&#xA;                    ThisReeferReq.setRfreqTempLimitMaxC(reefer2TempC);  //A6&#xA;                }&#xA;            }&#xA;        }&#xA;        /* Execute the built-in logic got the business task. */&#xA;        executeInternal(dao); //A6&#xA;    }&#xA;&#xA;    // Returns the MetafieldId of the flex field on the truck transaction.&#xA;    private MetafieldId getFlexFieldMetafieldId(String idString) {&#xA;        MetafieldIdFactory.valueOf(&quot;tran${idString[0].toUpperCase()}${idString[1..-1]}&quot;)&#xA;    }&#xA;&#xA;    // Returns the user-friendly name for the flex field.&#xA;    private String getFlexFieldTranslatedName(String idString) {&#xA;        MetafieldId fieldId = MetafieldIdFactory.valueOf(idString)&#xA;        ITranslationContext translator = TranslationUtils.getTranslationContext(ContextHelper.getThreadUserContext())&#xA;        Metafield metafield = translator.getIMetafieldDictionary().findMetafield(fieldId)&#xA;&#xA;        return translator.getMessageTranslator().getMessage(metafield.getLongLabelKey())&#xA;    }&#xA;&#xA;    private Double fahrenheitToCelsius(Double fahrenheit)&#xA;    {&#xA;        Double result = (fahrenheit - 32) * 5.0/9;&#xA;        return result;&#xA;    }&#xA;&#xA;    private Double celsiusToFahrenheit(Double celsius)&#xA;    {&#xA;        Double result = (celsius * 9.0/5) + 32;&#xA;        return result;&#xA;    }&#xA;    private String DT = &quot;DT&quot;;&#xA;    private String DV = &quot;DV&quot;;&#xA;&#xA;}&#xA;" />
<extension name="MatsonAncValidateGateDocuments" type="LIBRARY" language="GROOVY" is-enabled="Y" contents="/*&#xD;&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xD;&#xA; *&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;import com.navis.argo.business.model.DocumentType&#xD;&#xA;import com.navis.argo.business.model.GeneralReference&#xD;&#xA;import com.navis.external.framework.AbstractExtensionCallback&#xD;&#xA;import com.navis.framework.AllOtherFrameworkPropertyKeys&#xD;&#xA;import com.navis.framework.util.BizViolation&#xD;&#xA;import com.navis.framework.util.message.MessageLevel&#xD;&#xA;import com.navis.road.RoadPropertyKeys&#xD;&#xA;import com.navis.road.business.model.GateLane&#xD;&#xA;import com.navis.road.business.util.RoadBizUtil&#xD;&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xD;&#xA;import org.apache.log4j.Level&#xD;&#xA;import org.apache.log4j.Logger&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; Class for validation. This class is being used from MatsonAncCreateDocument and MatsonAncPrintDocument.&#xD;&#xA; *&#xD;&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 07/17/2015&#xD;&#xA; *&#xD;&#xA; * Date: 07/17/2015: 5:41 PM&#xD;&#xA; * JIRA: CSDV-3024&#xD;&#xA; * SFDC: 00138337&#xD;&#xA; * Called from: Gate Configuration&#xD;&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xD;&#xA; * Revision History&#xD;&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xD;&#xA; */&#xD;&#xA;class MatsonAncValidateGateDocuments extends AbstractExtensionCallback {&#xD;&#xA;  public boolean isValidationSuccess(TransactionAndVisitHolder inOutDao) {&#xD;&#xA;    LOGGER.setLevel(Level.INFO);&#xD;&#xA;    LOGGER.info(&quot; MatsonAncValidateGateDocuments execute Stared.&quot;);&#xD;&#xA;    try {&#xD;&#xA;      GeneralReference generalReferenceDamages = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;DAMAGES&quot;);&#xD;&#xA;      if (generalReferenceDamages == null || generalReferenceDamages.getRefValue1() == null) {&#xD;&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;Please configure Document Type Id in General Reference for DAMAGES.&quot;));&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;      GeneralReference generalReferenceTir = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;TIR&quot;);&#xD;&#xA;      if (generalReferenceTir == null || generalReferenceTir.getRefValue1() == null) {&#xD;&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;Please configure Document Type Id in General Reference for TIR.&quot;));&#xD;&#xA;        return;&#xD;&#xA;      }&#xD;&#xA;      GeneralReference generalReferenceTirLoad = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;TIR_LOAD&quot;);&#xD;&#xA;      if (generalReferenceTirLoad == null || generalReferenceTirLoad.getRefValue1() == null) {&#xD;&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;Please configure Document Type Id in General Reference for TIR_LOAD.&quot;));&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;      GeneralReference generalReferenceDeliveryReceipt = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;DR&quot;);&#xD;&#xA;      if (generalReferenceDeliveryReceipt == null || generalReferenceDeliveryReceipt.getRefValue1() == null) {&#xD;&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;Please configure Document Type Id in General Reference for DR.&quot;));&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;      GeneralReference generalReferenceDNB = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;DNB&quot;);&#xD;&#xA;      if (generalReferenceDNB == null || generalReferenceDNB.getRefValue1() == null) {&#xD;&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;Please configure Document Type Id in General Reference for DNB.&quot;));&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      GeneralReference emailIdGeneralReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;EMAIL&quot;, &quot;NOTIFICATION&quot;);&#xD;&#xA;      if (emailIdGeneralReference == null) {&#xD;&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;please configure General Reference for  Notification(Damage) Email Id.&quot;));&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;      if (emailIdGeneralReference.getRefValue1() == null || emailIdGeneralReference.getRefValue2() == null) {&#xD;&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;please configure From and To Email Id in General Reference(Notification).&quot;));&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      GeneralReference multiStopUrlReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;MULTISTOP&quot;, &quot;URL&quot;);&#xD;&#xA;      if (multiStopUrlReference == null || multiStopUrlReference.getRefValue1() == null) {&#xD;&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;please configure multistop URL in General Reference.&quot;));&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      GeneralReference multiStopCommodityIdReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;MULTISTOP&quot;, &quot;COMMODITY_ID&quot;);&#xD;&#xA;      if (multiStopCommodityIdReference == null || multiStopCommodityIdReference.getRefValue1() == null) {&#xD;&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;please configure multistop Commodity Id in General Reference.&quot;));&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      GeneralReference damagePrinterIpReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;PRINTER_NAME&quot;, &quot;DAMAGES&quot;);&#xD;&#xA;      if (damagePrinterIpReference == null || damagePrinterIpReference.getRefValue1() == null) {&#xD;&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;please configure printer IP address for Damages in General Reference.&quot;));&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      GeneralReference troubleIpReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;PRINTER_NAME&quot;, &quot;TROUBLE&quot;);&#xD;&#xA;      if (troubleIpReference == null || troubleIpReference.getRefValue1() == null) {&#xD;&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;please configure printer IP address for Trouble in General Reference.&quot;));&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      GateLane lane = inOutDao.getTran().getTranTruckVisit().getTvdtlsExitLane();&#xD;&#xA;      if (lane == null) {&#xD;&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;Couldn't find Gate Exit Lane.&quot;));&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      GeneralReference ftpGeneralReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;FTP&quot;, &quot;INFO&quot;, lane.getLaneId());&#xD;&#xA;      if (ftpGeneralReference == null) {&#xD;&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;Please configure FTP Connection Info in General Reference for Lane Id.&quot; + lane.getLaneId()));&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      if (ftpGeneralReference.getRefValue1() == null) {&#xD;&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;Please configure FTP IP address in General Reference.&quot;));&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      if (ftpGeneralReference.getRefValue2() == null) {&#xD;&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;Please configure FTP directory in General Reference.&quot;));&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      if (ftpGeneralReference.getRefValue3() == null) {&#xD;&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;Please configure FTP user Id in General Reference.&quot;));&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      if (ftpGeneralReference.getRefValue4() == null) {&#xD;&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;Please configure FTP user password in General Reference.&quot;));&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      if (ftpGeneralReference.getRefValue5() == null) {&#xD;&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;Please configure FTP default time out in General Reference.&quot;));&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;      if (ftpGeneralReference.getRefValue6() == null) {&#xD;&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;Please configure FTP read write time out in General Reference.&quot;));&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;      DocumentType docType = DocumentType.findDocumentType(generalReferenceDamages.getRefValue1());&#xD;&#xA;      if (docType == null) {&#xD;&#xA;        RoadBizUtil.getMessageCollector().appendMessage(&#xD;&#xA;                MessageLevel.WARNING, RoadPropertyKeys.GATE__PRINT_INVALID_DOC_TYPE, null, [generalReferenceDamages.getRefValue1()]);&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;      docType = DocumentType.findDocumentType(generalReferenceTir.getRefValue1());&#xD;&#xA;      if (docType == null) {&#xD;&#xA;        RoadBizUtil.getMessageCollector().appendMessage(&#xD;&#xA;                MessageLevel.WARNING, RoadPropertyKeys.GATE__PRINT_INVALID_DOC_TYPE, null, [generalReferenceTir.getRefValue1()]);&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;      docType = DocumentType.findDocumentType(generalReferenceTirLoad.getRefValue1());&#xD;&#xA;      if (docType == null) {&#xD;&#xA;        RoadBizUtil.getMessageCollector().appendMessage(&#xD;&#xA;                MessageLevel.WARNING, RoadPropertyKeys.GATE__PRINT_INVALID_DOC_TYPE, null, [generalReferenceTirLoad.getRefValue1()]);&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;      docType = DocumentType.findDocumentType(generalReferenceDeliveryReceipt.getRefValue1());&#xD;&#xA;      if (docType == null) {&#xD;&#xA;        RoadBizUtil.getMessageCollector().appendMessage(&#xD;&#xA;                MessageLevel.WARNING, RoadPropertyKeys.GATE__PRINT_INVALID_DOC_TYPE, null, [generalReferenceDeliveryReceipt.getRefValue1()]);&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;      docType = DocumentType.findDocumentType(generalReferenceDNB.getRefValue1());&#xD;&#xA;      if (docType == null) {&#xD;&#xA;        RoadBizUtil.getMessageCollector().appendMessage(&#xD;&#xA;                MessageLevel.WARNING, RoadPropertyKeys.GATE__PRINT_INVALID_DOC_TYPE, null, [generalReferenceDNB.getRefValue1()]);&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;      GeneralReference companyNameGeneralReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;LABEL&quot;, &quot;COMPANY_NAME&quot;);&#xD;&#xA;      if (companyNameGeneralReference == null) {&#xD;&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;MatsonAncValidateGateDocuments: Please configure Company Name(Label1 in Data Value1 and Label2 in Data Value2) in General Reference.&quot;));&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;      if (companyNameGeneralReference.getRefValue1() == null) {&#xD;&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;MatsonAncValidateGateDocuments: Please configure Label1(Company Name) in Data Value1 in General Reference.&quot;));&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;      if (companyNameGeneralReference.getRefValue2() == null) {&#xD;&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;MatsonAncValidateGateDocuments: Please configure Label2(Legal Form) in Data Value2 in General Reference.&quot;));&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;    } finally {&#xD;&#xA;      LOGGER.info(&quot; MatsonAncValidateGateDocuments execute completed.&quot;);&#xD;&#xA;    }&#xD;&#xA;    return true;&#xD;&#xA;  }&#xD;&#xA;  private Logger LOGGER = Logger.getLogger(MatsonAncValidateGateDocuments.class);&#xD;&#xA;}" />
<extension name="MatsonAncPrintDocument" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.navis.argo.util.PrintUtil&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.AllOtherFrameworkPropertyKeys&#xA;import com.navis.framework.MailServerConfig&#xA;import com.navis.framework.business.atoms.PrinterDriverEnum&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.Ordering&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.printing.PrintRequest&#xA;import com.navis.framework.printing.PrintServiceManager&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.util.io.ResourceUtils&#xA;import com.navis.road.RoadEntity&#xA;import com.navis.road.RoadField&#xA;import com.navis.road.business.atoms.TranStatusEnum&#xA;import com.navis.road.business.model.Document&#xA;import com.navis.road.business.model.GateLane&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.reference.Printer&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;import org.springframework.core.io.Resource&#xA;import org.springframework.mail.MailSendException&#xA;import org.springframework.mail.javamail.JavaMailSenderImpl&#xA;import org.springframework.mail.javamail.MimeMessageHelper&#xA;&#xA;import javax.mail.internet.MimeMessage&#xA;import java.nio.charset.Charset&#xA;&#xA;import static com.navis.argo.business.reference.HardwareDevice.findHardwareDeviceById&#xA;&#xA;/**&#xA; * Print document.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 07/17/2015&#xA; *&#xA; * Date: 07/17/2015: 5:41 PM&#xA; * JIRA: CSDV-3024&#xA; * SFDC: 00138337&#xA; * Called from: Gate Configuration&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;public class MatsonAncPrintDocument extends AbstractGateTaskInterceptor implements EGateTaskInterceptor {&#xA;&#xA;  /**&#xA;   * Print document based on the configuration docTypeId parameter&#xA;   *&#xA;   * @param inOutDao&#xA;   */&#xA;  public void execute(TransactionAndVisitHolder inOutDao) {&#xA;    LOGGER.setLevel(Level.INFO);&#xA;    LOGGER.info(&quot; MatsonAncPrintDocument execute Stared.&quot;);&#xA;    def matsonAncValidateGateDocuments = getLibrary(&quot;MatsonAncValidateGateDocuments&quot;);&#xA;    LOGGER.info(&quot;MatsonAncCreateDocument about to execute MatsonAncValidateGateDocuments&quot;);&#xA;    if (!matsonAncValidateGateDocuments.isValidationSuccess(inOutDao)) {&#xA;      return;&#xA;    }&#xA;    if (!inOutDao.hasTransaction()) {&#xA;      LOGGER.error(&quot; MatsonAncPrintDocument: No truck transaction found to print gate ticket(s).&quot;);&#xA;      return;&#xA;    }&#xA;    TruckTransaction tran = inOutDao.getTran();&#xA;    if (RoadBizUtil.getMessageCollector().hasError()) {&#xA;      LOGGER.error(&quot; MatsonAncPrintDocument: Transaction has one or more errors. Cannot print tickets.&quot;);&#xA;      return;&#xA;    }&#xA;    GateLane lane = inOutDao.getTran().getTranTruckVisit().getTvdtlsExitLane();&#xA;    GeneralReference ftpGeneralReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;FTP&quot;, &quot;INFO&quot;, lane.getLaneId());&#xA;    List&lt;Document&gt; docList = findDocByTransaction(inOutDao.getTran());&#xA;    if (docList == null) {&#xA;      LOGGER.error(&quot; MatsonAncPrintDocument: No document found for transaction Nbr:&quot; + tran.getTranNbr());&#xA;      return;&#xA;    }&#xA;    for (Document doc : docList) {&#xA;      saveDocument(doc, inOutDao, ftpGeneralReference);&#xA;    }&#xA;&#xA;    LOGGER.info(&quot; MatsonAncPrintDocument execute Completed.&quot;);&#xA;  }&#xA;&#xA;  private static List&lt;Document&gt; findDocByTransaction(TruckTransaction inTran) {&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(RoadEntity.DOCUMENT);&#xA;    dq.addDqPredicate(PredicateFactory.eq(RoadField.DOC_TRANSACTION, inTran.getTranGkey()));&#xA;    dq.addDqOrdering(Ordering.asc(RoadField.DOC_CREATED));&#xA;    return (List&lt;Document&gt;) HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;  }&#xA;&#xA;  private void saveDocument(final Document inDocument, TransactionAndVisitHolder inOutDao, GeneralReference inReference) {&#xA;    String docTypeId = inDocument.getDocDocType().getDoctypeId();&#xA;    try {&#xA;      TruckTransaction tran = inOutDao.getTran();&#xA;      GeneralReference generalReferenceDamages = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;DAMAGES&quot;);&#xA;      boolean printDamage = tran.getTranChsDmg() != null &amp;&amp; tran.getTranChsDmg().getDmgsItems() != null &amp;&amp;&#xA;              !tran.getTranChsDmg().getDmgsItems().isEmpty() &amp;&amp; generalReferenceDamages.getRefValue1().equals(docTypeId);&#xA;      if (Boolean.TRUE.equals(printDamage) || TranStatusEnum.TROUBLE.equals(inOutDao.getTran().getTranStatus())) {&#xA;        printFile(inDocument, inOutDao, printDamage);&#xA;      } else {&#xA;        // printFile(inDocument, inOutDao, false);&#xA;        GateLane lane = tran.getTranTruckVisit().getTvdtlsExitLane();&#xA;        if (lane == null) {&#xA;          RoadBizUtil.&#xA;                  appendExceptionChain(&#xA;                          BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null, &quot;Couldn't find Gate Entry Lane.&quot;));&#xA;          return;&#xA;        }&#xA;        String laneId = lane.getLaneId();&#xA;        String fileName = inOutDao.getTran().getTranNbr() + &quot;_&quot; + docTypeId + &quot;_&quot; + com.navis.argo.business.api.ArgoUtils.timeNowMillis() + &quot;.txt&quot;;&#xA;        byte[] printByte = inDocument.transformData(PrinterDriverEnum.CUSTOM);&#xA;        InputStream is = new ByteArrayInputStream(printByte);&#xA;        def matsonAncFtpAdaptor = getLibrary(&quot;MatsonAncFtpAdaptor&quot;);&#xA;        try {&#xA;          LOGGER.info(&quot;MatsonAncPrintDocument about to execute MatsonAncFtpAdaptor&quot;);&#xA;          matsonAncFtpAdaptor.openConnection(inReference);&#xA;          matsonAncFtpAdaptor.sendDocument(fileName, is);&#xA;        } finally {&#xA;          matsonAncFtpAdaptor.closeConnection();&#xA;        }&#xA;      }&#xA;    } catch (BizViolation bizViolation) {&#xA;      RoadBizUtil.appendExceptionChain(bizViolation);&#xA;    }&#xA;  }&#xA;&#xA;  private void printFile(Document inDocument, TransactionAndVisitHolder inOutDao, boolean isDamage) {&#xA;    GeneralReference reference = null;&#xA;//    boolean isTrouble = TranStatusEnum.TROUBLE.equals(inOutDao.getTran().getTranStatus());&#xA;    if (isDamage) {&#xA;      reference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;PRINTER_NAME&quot;, &quot;DAMAGES&quot;);&#xA;    } else {&#xA;      reference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;PRINTER_NAME&quot;, &quot;TROUBLE&quot;);&#xA;    }&#xA;    Printer printer = findHardwareDeviceById(reference.getRefValue1()) as Printer;&#xA;    byte[] data = inDocument.transformData(printer.getPrinterDriver());&#xA;    //com.navis.argo.business.api.GroovyApi.displayMessage(&quot;...&quot; + new String(data, &quot;UTF-8&quot;));&#xA;    if (printer != null) {&#xA;      //email notification for chassis damage.&#xA;      if (isDamage) {&#xA;        GeneralReference emailIdGeneralReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;EMAIL&quot;, &quot;NOTIFICATION&quot;);&#xA;        String fromEmailId = emailIdGeneralReference.getRefValue1();&#xA;        String toEmailId = emailIdGeneralReference.getRefValue2();&#xA;        String subject = &quot;Damage Report for Chassis: &quot; + inOutDao.getTran().getTranChsNbr();&#xA;        boolean result = sendEmail(toEmailId, fromEmailId, subject, new String(transformData(inDocument.getDocData()), &quot;UTF-8&quot;));&#xA;        if (result) {&#xA;          LOGGER.info(&quot;MatsonAncPrintDocument:Email notification has been sent to &quot; + toEmailId);&#xA;        } else {&#xA;          LOGGER.error(&quot;MatsonAncPrintDocument:Failed to send Email notification to &quot; + toEmailId);&#xA;        }&#xA;      }&#xA;      PrintUtil.print(data, printer.getHwHostAddress(), printer.getPrtrQueueName(), 1);&#xA;    } else {&#xA;      String msg = &quot;Couldn't find printer for ID:&quot; + reference.getRefValue1() + &quot;. Please configure correct printer IP address in General reference.&quot;;&#xA;      LOGGER.error(msg);&#xA;      RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null, msg));&#xA;      return;&#xA;    }&#xA;  }&#xA;&#xA;/**&#xA; * Send simple email message&#xA; *&#xA; * @param inTo TO email address&#xA; * @param inFrom FROM email address&#xA; * @param inSubject Text in the subject line&#xA; * @param inBody Text in the body of the email&#xA; * @return TRUE/FALSE     True if email has been sent or not&#xA; */&#xA;  public Boolean sendEmail(String inTo, String inFrom, String inSubject, String inBody) {&#xA;    GroovyEmailSender sender = new GroovyEmailSender();&#xA;    MimeMessage msg = sender.createMimeMessage();&#xA;    MimeMessageHelper helper = new MimeMessageHelper(msg, &quot;UTF-8&quot;);&#xA;    helper.setFrom(inFrom);&#xA;    helper.setReplyTo(inFrom);&#xA;    helper.setTo(inTo);&#xA;    helper.setSubject(inSubject);&#xA;    helper.setText(inBody, true);&#xA;    try {&#xA;      sender.send(msg);&#xA;    } catch (Exception inException) {&#xA;      LOGGER.error(&quot;MatsonAncPrintDocument: Exception in email attempt: &quot; + inException);&#xA;      return false;&#xA;    }&#xA;    return true;&#xA;  }&#xA;&#xA;  private class GroovyEmailSender extends JavaMailSenderImpl {&#xA;    GroovyEmailSender() {&#xA;      setMailServerPropertiesFromUserContext();&#xA;    }&#xA;    /**&#xA;     * Sets the Host, Port, and Protocol from the config settings based on the UserContext from the email message.&#xA;     *&#xA;     * @param inEmailMessage&#xA;     */&#xA;    private void setMailServerPropertiesFromUserContext() {&#xA;      try {&#xA;        UserContext userContext = ContextHelper.getThreadUserContext();&#xA;        setHost(MailServerConfig.HOST.getSetting(userContext));&#xA;        setPort(Integer.parseInt(MailServerConfig.PORT.getSetting(userContext)));&#xA;        String protocol = MailServerConfig.PROTOCOL.getSetting(userContext);&#xA;        long timeout = MailServerConfig.TIMEOUT.getValue(userContext);&#xA;        Properties props = new Properties();&#xA;        props.setProperty(&quot;mail.pop3.timeout&quot;, String.valueOf(timeout));&#xA;        setProtocol(protocol);&#xA;        if (&quot;smtps&quot;.equals(protocol)) {&#xA;          setUsername(MailServerConfig.SMTPS_USER.getSetting(userContext));&#xA;          setPassword(MailServerConfig.SMTPS_PASSWORD.getSetting(userContext));&#xA;          props.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);&#xA;          props.put(&quot;mail.smtps.auth&quot;, &quot;true&quot;);&#xA;          props.put(&quot;mail.smtp.ssl.enable&quot;, &quot;true&quot;);&#xA;          props.put(&quot;mail.transport.protocol&quot;, &quot;smtps&quot;);&#xA;        }&#xA;        setJavaMailProperties(props);&#xA;        LOGGER.info(&quot;Initialized SMTP Mail Server Configuration.&quot;);&#xA;      } catch (Throwable throwable) {&#xA;        String error = &quot;Initializing the SMTP Mail Server configuration encountered the following error:&quot;;&#xA;        LOGGER.error(error, throwable);&#xA;        throw new MailSendException(error, throwable);&#xA;      }&#xA;    }&#xA;    private Logger LOGGER = Logger.getLogger(GroovyEmailSender.class);&#xA;  }&#xA;&#xA;  private static byte[] transformData(String inInputData) {&#xA;    PrintRequest printRequest = new PrintRequest();&#xA;    ByteArrayInputStream byteStream = null;&#xA;    try {&#xA;      byte[] xslLayout = htmlLayout.getBytes(Charset.forName(&quot;UTF-8&quot;));&#xA;      byteStream = new ByteArrayInputStream(xslLayout);&#xA;      Resource resource = ResourceUtils.loadSerializableInputStreamResource(byteStream);&#xA;      printRequest.setSource(inInputData.getBytes(Charset.forName(&quot;UTF-8&quot;)));&#xA;      printRequest.setPrintDriverFormat(PrinterDriverEnum.CUSTOM);&#xA;      printRequest.setPrintDriverResource(resource);&#xA;    } catch (IOException ioe) {&#xA;      throw BizFailure.wrap(ioe);&#xA;    }&#xA;    return new PrintServiceManager().convertToDriverFormat(printRequest);&#xA;  }&#xA;&#xA;  private static htmlLayout = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +&#xA;          &quot;&lt;xsl:stylesheet xmlns:xsl=\&quot;http://www.w3.org/1999/XSL/Transform\&quot; xmlns:fo=\&quot;http://www.w3.org/1999/XSL/Format\&quot; xmlns:argo=\&quot;http://www.navis.com/argo\&quot; version=\&quot;1.1\&quot; &gt;\n&quot; +&#xA;          &quot;\t&lt;xsl:template match=\&quot;argo:docDescription\&quot;/&gt;\n&quot; +&#xA;          &quot;\t&lt;xsl:template name=\&quot;argo:docBody\&quot;/&gt;\n&quot; +&#xA;          &quot;\t&lt;xsl:template match=\&quot;argo:truckVisit\&quot;/&gt;\n&quot; +&#xA;          &quot;\t&lt;xsl:template match=\&quot;argo:trkTransaction\&quot;&gt;\n&quot; +&#xA;          &quot;\t\t&lt;html&gt;\n&quot; +&#xA;          &quot;\t\t\t&lt;body&gt;\n&quot; +&#xA;          &quot;\t\t\t\t&lt;table cellspacing =\&quot;20\&quot;&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t&lt;tr&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;Chassis# / Owner:&lt;/td&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;tranChsNbr\&quot;/&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;/td&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t&lt;/tr&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t&lt;tr&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;Container# / Owner:&lt;/td&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;tranCtrNbr\&quot;/&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;/td&gt;\t\t\t\t\t\n&quot; +&#xA;          &quot;\t\t\t\t\t&lt;/tr&gt;\t\t\t\t\t\n&quot; +&#xA;          &quot;\t\t\t\t\t&lt;tr&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;Equipment Type:&lt;/td&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;tranCtrTypeId\&quot;/&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;tranGradeId\&quot; /&gt;\t\t\t\t\t\t\t\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;/td&gt;\t\t\t\t\t\n&quot; +&#xA;          &quot;\t\t\t\t\t&lt;/tr&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t&lt;tr&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;Yard Row:&lt;/td&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;tranFlexString03\&quot;/&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;/td&gt;\t\t\t\t\t\n&quot; +&#xA;          &quot;\t\t\t\t\t&lt;/tr&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t&lt;tr&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;Trucking Code:&lt;/td&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;../argo:truckVisit/tvdtlsTrkCompany\&quot;/&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;/td&gt;\t\t\t\t\t\n&quot; +&#xA;          &quot;\t\t\t\t\t&lt;/tr&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t&lt;tr&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;Trucking Company:&lt;/td&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;../argo:truckVisit/tvdtlsTrkCompanyName\&quot;/&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;/td&gt;\t\t\t\t\t\n&quot; +&#xA;          &quot;\t\t\t\t\t&lt;/tr&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t&lt;tr&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;Driver Name:&lt;/td&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;../argo:truckVisit/tvdtlsDriverName\&quot;/&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;/td&gt;\t\t\t\t\t\n&quot; +&#xA;          &quot;\t\t\t\t\t&lt;/tr&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t&lt;tr&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;Clerk:&lt;/td&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;tranCreator\&quot;/&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;/td&gt;\t\t\t\t\t\n&quot; +&#xA;          &quot;\t\t\t\t\t&lt;/tr&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t&lt;tr&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;Defects:&lt;/td&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t\t&lt;xsl:for-each select=\&quot;argo:tranCtrDmg\&quot;&gt;\t\t\t\n&quot; +&#xA;          &quot;\t\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;dmgitemType\&quot; /&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t\t&lt;/xsl:for-each&gt;\t\t\t\t\t\t\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;/td&gt;\t\t\t\t\t\n&quot; +&#xA;          &quot;\t\t\t\t\t&lt;/tr&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t&lt;tr&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;Comments:&lt;/td&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t\t&lt;xsl:for-each select=\&quot;argo:tranCtrDmg\&quot;&gt;\t\t\t\n&quot; +&#xA;          &quot;\t\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;dmgitemDescription\&quot; /&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t\t&lt;/xsl:for-each&gt;\t\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;/td&gt;\t\t\t\t\t\n&quot; +&#xA;          &quot;\t\t\t\t\t&lt;/tr&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t&lt;tr&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;Date:&lt;/td&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;tranStartTime\&quot;/&gt;\n&quot; +&#xA;          &quot;\t\t\t\t\t\t&lt;/td&gt;\t\t\t\t\t\n&quot; +&#xA;          &quot;\t\t\t\t\t&lt;/tr&gt;\n&quot; +&#xA;          &quot;\t\t\t\t&lt;/table&gt;\n&quot; +&#xA;          &quot;\t\t\t&lt;/body&gt;\n&quot; +&#xA;          &quot;\t\t&lt;/html&gt;\n&quot; +&#xA;          &quot;\t&lt;/xsl:template&gt;\n&quot; +&#xA;          &quot;&lt;/xsl:stylesheet&gt;&quot;;&#xA;  private Logger LOGGER = Logger.getLogger(MatsonAncPrintDocument.class);&#xA;}" />
<extension name="MatsonAncFtpAdaptor" type="LIBRARY" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.navis.external.framework.AbstractExtensionCallback&#xA;import com.navis.framework.AllOtherFrameworkPropertyKeys&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.framework.util.CarinaUtils&#xA;import org.apache.commons.lang.StringUtils&#xA;import org.apache.commons.net.ftp.FTP&#xA;import org.apache.commons.net.ftp.FTPClient&#xA;import org.apache.commons.net.ftp.FTPReply&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; Open FTP connection, send files and close connection.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 07/17/2015&#xA; *&#xA; * Date: 07/17/2015: 5:41 PM&#xA; * JIRA: CSDV-3024&#xA; * SFDC: 00138337&#xA; * Called from: Gate Configuration&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;class MatsonAncFtpAdaptor extends AbstractExtensionCallback {&#xA;  MatsonAncFtpAdaptor() {&#xA;    LOGGER.setLevel(Level.INFO);&#xA;  }&#xA;  /**&#xA;   * Open the Ftp Connection&#xA;   *&#xA;   * @param inMlbx&#xA;   * @throws com.navis.framework.util.BizFailure&#xA;   */&#xA;  public void openConnection(GeneralReference inGeneralReference) throws BizFailure {&#xA;    _ftpClient = new FTPClient();&#xA;    _generalReference = inGeneralReference;&#xA;    String mailBoxAddr = inGeneralReference.getRefValue1();&#xA;    String userId = inGeneralReference.getRefValue3();&#xA;    String pwd = inGeneralReference.getRefValue4();&#xA;    Long timeoutValue = new Long(inGeneralReference.getRefValue5());&#xA;&#xA;    try {&#xA;      _ftpClient.setDefaultTimeout(timeoutValue.intValue());&#xA;&#xA;      boolean isAddWithPort = false;&#xA;      //communication address&#xA;&#xA;      if (mailBoxAddr.contains(PORT_DELIMITER)) {&#xA;        isAddWithPort = true;&#xA;        String[] ftpPortAddress = mailBoxAddr.split(PORT_DELIMITER);&#xA;&#xA;        if (ftpPortAddress.length == 2) {&#xA;          String address = ftpPortAddress[0].trim()&#xA;&#xA;          if (StringUtils.isNotEmpty(address)) {&#xA;            String ftpAddr = address;&#xA;            String port = ftpPortAddress[1].trim();&#xA;&#xA;            if (StringUtils.isNumeric(port)) {&#xA;              int ftpPort = Integer.parseInt(port);&#xA;              _ftpClient.connect(ftpAddr, ftpPort);&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;&#xA;      if (!isAddWithPort) {&#xA;        _ftpClient.connect(mailBoxAddr);&#xA;      }&#xA;      LOGGER.info(&quot;connect--&quot; + _ftpClient.getReplyCode() + &quot;-&quot; + _ftpClient.getReplyString());&#xA;      if (!FTPReply.isPositiveCompletion(_ftpClient.getReplyCode())) {&#xA;        _ftpClient.disconnect();&#xA;        String param = &quot;Unable to Connect to Host &quot; + mailBoxAddr + &quot; for the following reason :&quot; + _ftpClient.getReplyCode() +&#xA;                _ftpClient.getReplyString();&#xA;        LOGGER.error(param);&#xA;        throw BizFailure.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null, param);&#xA;      }&#xA;      if (!_ftpClient.login(userId, pwd)) {&#xA;        _ftpClient.disconnect();&#xA;        String param = &quot;User Name : &quot; + userId + &quot; or Password is Invalid&quot;;&#xA;        LOGGER.error(param);&#xA;        throw BizFailure.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null, param);&#xA;      } else {&#xA;        _ftpClient.enterLocalPassiveMode();&#xA;      }&#xA;&#xA;      LOGGER.info(&quot;login--&quot; + _ftpClient.getReplyCode() + &quot;-&quot; + _ftpClient.getReplyString());&#xA;      LOGGER.info(&quot;data connection mode--&quot; + _ftpClient.getDataConnectionMode());&#xA;    } catch (Exception inEx) {&#xA;      String exception = CarinaUtils.getStackTrace(inEx);&#xA;      LOGGER.error(&quot;Unable to Open Connection to Host &quot; + mailBoxAddr + &quot; with user name &quot; + userId +&#xA;              &quot; for the following reason &quot; + exception);&#xA;      //throw BizFailure.wrap(e);&#xA;      if (inEx instanceof BizFailure) {&#xA;        throw (BizFailure) inEx;&#xA;      }&#xA;      //for avoiding Socket time out error (caused by the value for FTP_DEFAULT_TIMEOUT setting).&#xA;      if (inEx instanceof SocketTimeoutException) {&#xA;        String param = &quot;Request timed out. Retry with an increased value for FTP_DEFAULT_TIMEOUT setting&quot;;&#xA;        LOGGER.error(param);&#xA;        throw BizFailure.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null, param);&#xA;      } else {&#xA;        throw BizFailure.wrap(inEx);&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;  /**&#xA;   * Send the file to mailbox folder&#xA;   *&#xA;   * @param inInputStream&#xA;   * @param inFileName&#xA;   * @return success&#xA;   * @throws BizFailure&#xA;   */&#xA;  public boolean sendDocument(String inFileName, InputStream inInputStream) throws BizFailure {&#xA;    boolean success = false;&#xA;    String mailBoxAddr = _generalReference.getRefValue1();&#xA;    String communicationFolder = _generalReference.getRefValue2();&#xA;    String userId = _generalReference.getRefValue3();&#xA;    Long soTimeoutValue = new Long(_generalReference.getRefValue6());&#xA;    try {&#xA;&#xA;      _ftpClient.changeWorkingDirectory(communicationFolder);&#xA;      LOGGER.info(&quot;cwd--&quot; + _ftpClient.getReplyCode() + &quot;-&quot; + _ftpClient.getReplyString());&#xA;      if (_ftpClient.getReplyCode() == 501) {&#xA;        String param = &quot;Given directory path &quot; + communicationFolder + &quot; is invalid - use proper path separator&quot;;&#xA;        LOGGER.error(param);&#xA;        throw BizFailure.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null, param);&#xA;      }&#xA;      if (_ftpClient.getReplyCode() == 550) {&#xA;        String param = &quot;Failed to change directory: &quot; + communicationFolder;&#xA;        LOGGER.error(param);&#xA;        throw BizFailure.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null, param);&#xA;      }&#xA;&#xA;      _ftpClient.setFileType(FTP.BINARY_FILE_TYPE);&#xA;      LOGGER.info(&quot;type--&quot; + _ftpClient.getReplyCode() + &quot;-&quot; + _ftpClient.getReplyString());&#xA;&#xA;      //mode.&#xA;      try {&#xA;        _ftpClient.setSoTimeout(soTimeoutValue.intValue());&#xA;&#xA;        success = _ftpClient.storeFile(inFileName, inInputStream);&#xA;&#xA;        if (!success) {&#xA;          LOGGER.info(&quot;Sending Failed, Resending the file&quot;);&#xA;          _ftpClient.enterLocalActiveMode();&#xA;          success = _ftpClient.storeFile(inFileName, inInputStream);&#xA;        }&#xA;      } catch (Exception ftpEx) {&#xA;        LOGGER.info(&quot;Exception occured during file sending, so trying to send again in Active mode : &quot; + ftpEx);&#xA;        _ftpClient.enterLocalActiveMode();&#xA;        success = _ftpClient.storeFile(inFileName, inInputStream);&#xA;      }&#xA;      LOGGER.info(&quot;send(storeFile)--&quot; + _ftpClient.getReplyCode() + &quot;-&quot; + _ftpClient.getReplyString());&#xA;    } catch (Exception inEx) {&#xA;      String exception = CarinaUtils.getStackTrace(inEx);&#xA;      LOGGER.error(&quot;Unable to send file &quot; + inFileName + &quot; to mailbox folder &quot; + communicationFolder + &quot; on Host &quot; + communicationFolder +&#xA;              &quot; for the following reason &quot; + exception);&#xA;      if (inEx instanceof BizFailure) {&#xA;        throw (BizFailure) inEx;&#xA;      }&#xA;      String param = &quot;Can not send file &quot; + inFileName + &quot; to Host &quot; + communicationFolder + &quot; for the following reason: &quot; + inEx.getMessage();&#xA;      LOGGER.error(param);&#xA;      throw BizFailure.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null, param);&#xA;    } finally {&#xA;      if (inInputStream != null) {&#xA;        try {&#xA;          inInputStream.close();&#xA;        } catch (IOException ex) {&#xA;          // nothing we can do&#xA;          LOGGER.error(&quot;Unexpected Error: Unable to close the inputstream &quot; + ex);&#xA;        }&#xA;      }&#xA;    }&#xA;    return success;&#xA;  }&#xA;&#xA;  /**&#xA;   * Close the Ftp Connection&#xA;   *&#xA;   * @throws BizFailure&#xA;   */&#xA;  public void closeConnection() {&#xA;    if (_ftpClient != null) {&#xA;      try {&#xA;        if (_ftpClient.isConnected()) {&#xA;          _ftpClient.logout();&#xA;          _ftpClient.disconnect();&#xA;          LOGGER.info(&quot;logout--&quot; + _ftpClient.getReplyCode() + &quot;-&quot; + _ftpClient.getReplyString());&#xA;        }&#xA;      } catch (Exception inEx) {&#xA;        String exception = CarinaUtils.getStackTrace(inEx);&#xA;        LOGGER.error(&quot;Unable to Close Connection for Host &quot; + _generalReference.getRefValue1() + &quot; for the following reason &quot; + exception);&#xA;      }&#xA;    } else {&#xA;      LOGGER.debug(&quot;No need to close connection since ftpClient is not initialized...&quot;);&#xA;    }&#xA;  }&#xA;&#xA;  private FTPClient _ftpClient;&#xA;  private static String PORT_DELIMITER = &quot;:&quot;;&#xA;  private GeneralReference _generalReference;&#xA;  private static Logger LOGGER = Logger.getLogger(MatsonAncFtpAdaptor.class);&#xA;}" />
<extension name="MATGateDisconnectTDP" scope="MATSON/ALASKA/ANK" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" description="This groovy will send a disconnect SOAP Request to TDP. It will aslo set GateLane status to Empty and will clear the lane from the Console" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;import com.navis.argo.business.atoms.LaneTruckStatusEnum&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.navis.argo.portal.context.ArgoUserContext&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.presentation.FrameworkPresentationUtils&#xA;import com.navis.road.business.model.GateLane&#xA;import com.navis.road.business.model.TruckVisitDetails&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import com.sun.jersey.api.client.Client&#xA;import com.sun.jersey.api.client.ClientResponse&#xA;import com.sun.jersey.api.client.WebResource&#xA;import com.sun.jersey.api.client.config.DefaultClientConfig&#xA;import org.apache.commons.lang.StringUtils&#xA;import org.w3c.dom.Element&#xA;import wslite.soap.SOAPClient&#xA;import wslite.soap.SOAPResponse&#xA;&#xA;import javax.ws.rs.core.MediaType&#xA;&#xA;/**&#xA; * This groovy will send a disconnect SOAP Request to TDP. It will aslo set GateLane status to Empty and will clear the lane from the Console&#xA; *&#xA; * Author: Anburaja&#xA; * Date: 20-Jul-2015&#xA; * SFDC-142304/CSDV-3055&#xA; * Called from: Gate Configuration (Truck Visit Level)&#xA; *&#xA; * Sample SOAP Request for CONNECT and DISCONNECT message:&#xA;&#xA; &lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:now=&quot;nowsol&quot;&gt;&#xA; &lt;soapenv:Header/&gt;&#xA; &lt;soapenv:Body&gt;&#xA; &lt;now:realtime_update&gt;&#xA; &lt;now:ConnectionType&gt;CONNECT&lt;/now:ConnectionType&gt;&#xA; &lt;now:GateLaneId&gt;Lane 1&lt;/now:GateLaneId&gt;&#xA; &lt;now:ExtConsoleId&gt;CONS1&lt;/now:ExtConsoleId&gt;&#xA; &lt;/now:realtime_update&gt;&#xA; &lt;/soapenv:Body&gt;&#xA; &lt;/soapenv:Envelope&gt;&#xA;&#xA; **/&#xA;&#xA;public class MATGateDisconnectTDP extends AbstractGateTaskInterceptor implements EGateTaskInterceptor {&#xA;&#xA;    private logMsg(String inMsg) {&#xA;        log(&quot;MATGateDisconnectTDP : &quot; + inMsg);&#xA;    }&#xA;&#xA;    public void execute(TransactionAndVisitHolder inDao) {&#xA;&#xA;        logMsg(&quot;Started&quot;);&#xA;&#xA;        ArgoUserContext userContext = (ArgoUserContext) FrameworkPresentationUtils.getUserContext();&#xA;        com.navis.road.business.reference.Console console = (userContext ? (com.navis.road.business.reference.Console) HibernateApi.getInstance().load(com.navis.road.business.reference.Console.class, userContext.getConsoleGkey()) : null)&#xA;&#xA;        if (inDao == null) {&#xA;            log(&quot;inDao is null&quot;);&#xA;            return;&#xA;        }&#xA;&#xA;        TruckVisitDetails tvd = inDao.getTv();&#xA;        if (tvd == null) {&#xA;            log(&quot;TruckVisitDetails is null&quot;);&#xA;            return;&#xA;        }&#xA;&#xA;        GateLane gateLane = tvd.getTvdtlsExitLane();&#xA;        GateLane null_value;&#xA;        //Update GateLane, Console and send SOAP Request&#xA;        if (gateLane &amp;&amp; console) {&#xA;            gateLane.setLaneTruckStatus(LaneTruckStatusEnum.EMPTY);&#xA;            console.setHwLaneSelected(null_value);&#xA;            sendRestfulDisconnectMsgToTDP(gateLane, console);&#xA;            //sendRestfulMsgToTDP(&quot;DISCONNECT&quot;, gateLane, console);&#xA;        }&#xA;    }&#xA;    /**&#xA;     * Send restful Disconnect Request&#xA;     * @param inLaneId&#xA;     * @param inConsoleId&#xA;     * @return&#xA;     */&#xA;    private Element sendDisConnectRequest(String inLaneId, String inConsoleId) {&#xA;        GeneralReference genRef = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;RESTFULLTDP&quot;, &quot;URL&quot;);&#xA;        logMsg(genRef.getRefValue1());&#xA;        URL url = new URL(genRef.getRefValue2() + &quot;laneId=&quot; + inLaneId.substring(5) + &quot;&amp;clerkId=&quot; + inConsoleId+&quot;&amp;printTicketCount=3&quot;);&#xA;        logMsg(url.toString());&#xA;        DefaultClientConfig clientConfig1 = new DefaultClientConfig();&#xA;        Client client = Client.create(clientConfig1);&#xA;        WebResource resource = client.resource(url.toString());&#xA;        ClientResponse response = (ClientResponse) resource.accept(MediaType.TEXT_XML).get(ClientResponse.class);&#xA;        if (response.getStatus() != 200) {&#xA;            logMsg(&quot;Request failed&quot;);&#xA;            logMsg(response.toString());&#xA;        } else {&#xA;            logMsg(&quot;Request Success&quot;);&#xA;            logMsg(response.toString());&#xA;        }&#xA;        return null;&#xA;    }&#xA;    /**&#xA;     * Build the SOAP request&#xA;     * @param inMsgType&#xA;     * @param inGateLane&#xA;     * @param inConsole&#xA;     * @return&#xA;     */&#xA;    private sendRestfulMsgToTDP(String inMsgType, GateLane inGateLane, com.navis.road.business.reference.Console inConsole) {&#xA;        SOAPResponse response;&#xA;        String xmlMessage = (String.format(RESTFULL_CONNECT_MESSAGE.toString(), inMsgType, inGateLane.getLaneId(), inConsole.getHwconsoleIdExternal()));&#xA;        logMsg(xmlMessage);&#xA;        if (StringUtils.isBlank(xmlMessage))&#xA;            log(inMsgType + &quot; : Message failed to build&quot;);&#xA;        else&#xA;            response = sendSOAPRequest(xmlMessage);&#xA;        //for now eat the SOAP Response&#xA;    }&#xA;    /**&#xA;     *&#xA;     * @param inMsgType&#xA;     * @param inGateLane&#xA;     * @param inConsole&#xA;     * @return&#xA;     */&#xA;    private sendRestfulDisconnectMsgToTDP(GateLane inGateLane, com.navis.road.business.reference.Console inConsole) {&#xA;        SOAPResponse response;&#xA;        response = sendDisConnectRequest(inGateLane.getLaneId(), inConsole.getHwconsoleIdExternal());&#xA;        //todo, what to do with SOAp message??&#xA;    }&#xA;&#xA;    /**&#xA;     * Send SOAP Request to TDP&#xA;     * @param xmlMessage&#xA;     * @return&#xA;     */&#xA;    private SOAPResponse sendSOAPRequest(String xmlMessage) {&#xA;        try {&#xA;            GeneralReference genRef = GeneralReference.findUniqueEntryById(&quot;RESTFULLTDP&quot;, &quot;URL&quot;);&#xA;            String wsUrl = (genRef ? genRef.getRefValue1() : null);&#xA;            SOAPClient client = new SOAPClient(wsUrl);&#xA;            SOAPResponse response = client.send(xmlMessage);&#xA;            log(&quot;Connect Response = &quot; + response.getText());&#xA;            return response;&#xA;        } catch (Exception ex) {&#xA;            log(&quot;sendSOAPRequest message failed to sent due to &quot; + ex.toString());&#xA;            return null;&#xA;        }&#xA;    }&#xA;&#xA;    /**&#xA;     *  Build SOAP Request XML format&#xA;     */&#xA;    private static final StringBuilder RESTFULL_CONNECT_MESSAGE = new StringBuilder().append(&#xA;            &quot;&lt;?xml version='1.0' encoding='UTF-8'?&gt;\n&quot;).append(&#xA;            &quot;&lt;soapenv:Envelope xmlns:soapenv=\&quot;http://schemas.xmlsoap.org/soap/envelope/\&quot; xmlns:now=\&quot;nowsol\&quot;&gt;\n&quot;).append(&#xA;            &quot;   &lt;soapenv:Header/&gt;\n&quot;).append(&#xA;            &quot;   &lt;soapenv:Body&gt;\n&quot;).append(&#xA;            &quot;      &lt;now:realtime_update&gt;\n&quot;).append(&#xA;            &quot;         &lt;now:ConnectionType&gt;%s&lt;/now:ConnectionType&gt;\n&quot;).append(&#xA;            &quot;         &lt;now:GateLaneId&gt;%s&lt;/now:GateLaneId&gt;\n&quot;).append(&#xA;            &quot;         &lt;now:ExtConsoleId&gt;%s&lt;/now:ExtConsoleId&gt;\n&quot;).append(&#xA;            &quot;      &lt;/now:realtime_update&gt;\n&quot;).append(&#xA;            &quot;   &lt;/soapenv:Body&gt;\n&quot;).append(&#xA;            &quot;&lt;/soapenv:Envelope&gt;\n&quot;);&#xA;&#xA;}" />
<extension name="MatsonAncActivityExtractInterceptorTest" type="EDI_EXTRACT_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;import com.navis.argo.util.XmlUtil&#xA;import com.navis.external.edi.entity.AbstractEdiExtractInterceptor&#xA;import com.navis.inventory.business.units.Routing&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.services.business.event.Event&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;import org.jdom.Element&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.argo.business.model.CarrierVisit;&#xA;&#xA;/**&#xA; Set UNLOC code for Port of load.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 09/22/2015&#xA; *&#xA; * Date: 09/22/2015: 5:41 PM&#xA; * JIRA: CSDV-&#xA; * SFDC: 00145621&#xA; * Called from: Edi Session extract code extension for activity message&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;class MatsonAncActivityExtractInterceptorTest extends AbstractEdiExtractInterceptor {&#xA;  @Override&#xA;  public Element beforeEdiMap(Map inParams) {&#xA;    LOGGER.setLevel(Level.INFO);&#xA;    LOGGER.info(&quot;MatsonAncActivityExtractInterceptor, Started beforeEdiMap Method.&quot;);&#xA;    if (inParams == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor inParams is null.&quot;);&#xA;      return null;&#xA;    }&#xA;    Element xmlTransaction = (Element) inParams.get(&quot;XML_TRANSACTION&quot;);&#xA;    Event event = (Event) inParams.get(&quot;ENTITY&quot;);&#xA;    if (xmlTransaction == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor, xmlTransaction element is null.&quot;);&#xA;      return null;&#xA;    }&#xA;    if (event == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor, event entity is null.&quot;);&#xA;      return null;&#xA;    }&#xA;&#xA;    Unit unit = Unit.hydrate(event.getEventAppliedToGkey());&#xA;    if (Unit == null) {&#xA;      LOGGER.error(&#xA;              &quot;MatsonAncActivityExtractInterceptor, Unit not found for gkey&quot; + event.getEventAppliedToGkey());&#xA;      return null;&#xA;    }&#xA;   UnitFacilityVisit ufv =  unit.findMostRecentHistoryUfv();&#xA;LOGGER.info(&quot;UFV::::&quot;+ufv);&#xA; if(ufv!=null){&#xA;   CarrierVisit cv = ufv.getUfvActualIbCv();&#xA;   LOGGER.info(&quot;Vessel Classification::::&quot;+cv.getCvCvd().getCvdClassification());&#xA;}&#xA;   &#xA;   &#xA;   /* if(unit.findMostRecentHistoryUfv().getUfvActualIBCv()){&#xA;&#xA;    &#xA;    }*/&#xA;    Element tranElement = changePOL(inParams, unit);&#xA;    LOGGER.info(&quot;MatsonAncActivityExtractInterceptor, completed beforeEdiMap Method.&quot;);&#xA;    return tranElement;&#xA;  }&#xA;  private Logger LOGGER = Logger.getLogger(MatsonAncActivityExtractInterceptor.class);&#xA;&#xA;  private Element changePOL(Map inParams, Unit inUnit) {&#xA;    Routing routing = inUnit.getUnitRouting();&#xA;    Element xmlTransaction = (Element) inParams.get(&quot;XML_TRANSACTION&quot;);&#xA;    if (xmlTransaction == null || routing == null || routing.getRtgPOL() == null) {&#xA;      return null;&#xA;    }&#xA;    String unLocId = routing.getRtgPOL().getPointUnlocId();&#xA;    if (unLocId == null) {&#xA;      return null;&#xA;    }&#xA;    Element containerElement = xmlTransaction.getChild(&quot;ediContainer&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;    if (containerElement != null) {&#xA;      Element originalLoadPortElement = containerElement.getChild(&quot;loadPort&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;      if (originalLoadPortElement != null) {&#xA;        Element portCodesElement = originalLoadPortElement.getChild(&quot;portCodes&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;        if (portCodesElement != null) {&#xA;          portCodesElement.setAttribute(&quot;unLocCode&quot;, unLocId, XmlUtil.ARGO_NAMESPACE);&#xA;          return xmlTransaction;&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}" />
<extension name="MATApplyUnitHazards" scope="MATSON/ALASKA" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.inventory.business.imdg.HazardItem&#xA;import com.navis.inventory.business.imdg.HazardItemPlacard&#xA;import com.navis.inventory.business.imdg.Hazards&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.orders.business.eqorders.EquipmentOrder&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;&#xA;/**&#xA; * This groovy fixes the problem that the 'Move Method' is not copied by the CloneHazards metod&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 08/26/15&#xA; * JIRA: ARGO-79452&#xA; * SFDC: 144566&#xA; *&#xA; */&#xA;&#xA;public class MATApplyUnitHazards extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        this.log(&quot;Execution Started MATApplyUnitHazards&quot;);&#xA;&#xA;        if (inDao == null)&#xA;            return;&#xA;&#xA;        TruckTransaction ThisTran = inDao.getTran();&#xA;&#xA;        if (ThisTran == null)&#xA;            return;&#xA;&#xA;        /* get the booking and the unit for the transaction */&#xA;&#xA;        EquipmentOrder ThisEqOrdr = ThisTran.getTranEqo();&#xA;&#xA;        Unit ThisUnit = ThisTran.getTranUnit();&#xA;&#xA;        if (ThisEqOrdr == null || ThisUnit == null)&#xA;        {&#xA;            return;&#xA;        }&#xA;&#xA;        /* get the hazards for the booking */&#xA;&#xA;        Booking ThisBooking = Booking.resolveBkgFromEqo(ThisEqOrdr);&#xA;&#xA;        Hazards BookingHazards = ThisBooking.getEqoHazards();&#xA;&#xA;        if (BookingHazards == null)&#xA;        {&#xA;            return;&#xA;        }&#xA;&#xA;        /* get the hazards for the unit */&#xA;&#xA;        GoodsBase ThisGDS = ThisUnit.getUnitGoods();&#xA;&#xA;        /* Copy the booking hazards onto the unit */&#xA;&#xA;        Hazards hazards = Hazards.createHazardsEntity();&#xA;&#xA;        for (Iterator&lt;HazardItem&gt; itr = BookingHazards.getHazardItemsIterator(); itr.hasNext(); )&#xA;        {&#xA;            HazardItem tranHazardItem = itr.next();&#xA;            HazardItem clonedItem = HazardItem.createHazardItemEntity(hazards, tranHazardItem.getHzrdiImdgClass(), tranHazardItem.getHzrdiUNnum());&#xA;            clonedItem.setHzrdiDcLgRef(tranHazardItem.getHzrdiDcLgRef());&#xA;            clonedItem.setHzrdiDeckRestrictions(tranHazardItem.getHzrdiDeckRestrictions());&#xA;            clonedItem.setHzrdiEmergencyTelephone(tranHazardItem.getHzrdiEmergencyTelephone());&#xA;            clonedItem.setHzrdiEMSNumber(tranHazardItem.getHzrdiEMSNumber());&#xA;            clonedItem.setHzrdiERGNumber(tranHazardItem.getHzrdiERGNumber());&#xA;            clonedItem.setHzrdiExplosiveClass(tranHazardItem.getHzrdiExplosiveClass());&#xA;            clonedItem.setHzrdiFireCode(tranHazardItem.getHzrdiFireCode());&#xA;            clonedItem.setHzrdiFlashPoint(tranHazardItem.getHzrdiFlashPoint());&#xA;            clonedItem.setHzrdiHazIdUpper(tranHazardItem.getHzrdiHazIdUpper());&#xA;            clonedItem.setHzrdiImdgClass(tranHazardItem.getHzrdiImdgClass());&#xA;            clonedItem.setHzrdiInhalationZone(tranHazardItem.getHzrdiInhalationZone());&#xA;            clonedItem.setHzrdiLtdQty(tranHazardItem.getHzrdiLtdQty());&#xA;            clonedItem.setHzrdiMarinePollutants(tranHazardItem.getHzrdiMarinePollutants());&#xA;            clonedItem.setHzrdiMFAG(tranHazardItem.getHzrdiMFAG());&#xA;            clonedItem.setHzrdiPackageType(tranHazardItem.getHzrdiPackageType());&#xA;            clonedItem.setHzrdiPackingGroup(tranHazardItem.getHzrdiPackingGroup());&#xA;            clonedItem.setHzrdiPageNumber(tranHazardItem.getHzrdiPageNumber());&#xA;            clonedItem.setHzrdiProperName(tranHazardItem.getHzrdiProperName());&#xA;            clonedItem.setHzrdiQuantity(tranHazardItem.getHzrdiQuantity());&#xA;            clonedItem.setHzrdiSecondaryIMO1(tranHazardItem.getHzrdiSecondaryIMO1());&#xA;            clonedItem.setHzrdiSecondaryIMO2(tranHazardItem.getHzrdiSecondaryIMO2());&#xA;            clonedItem.setHzrdiSubstanceLower(tranHazardItem.getHzrdiSubstanceLower());&#xA;            clonedItem.setHzrdiTechName(tranHazardItem.getHzrdiTechName());&#xA;            clonedItem.setHzrdiWeight(tranHazardItem.getHzrdiWeight());&#xA;            clonedItem.setHzrdiMoveMethod(tranHazardItem.getHzrdiMoveMethod());&#xA;            Roastery.getHibernateApi().save(clonedItem);&#xA;&#xA;            if (tranHazardItem.getHzrdiPlacardSet() != null)&#xA;            {&#xA;                Set&lt;HazardItemPlacard&gt; clonedPlacardSet = new LinkedHashSet&lt;HazardItemPlacard&gt;();&#xA;                clonedItem.setHzrdiPlacardSet(clonedPlacardSet);&#xA;                for (HazardItemPlacard tranHazardItemPlacard : (Set&lt;HazardItemPlacard&gt;) tranHazardItem.getHzrdiPlacardSet())&#xA;                {&#xA;                    HazardItemPlacard clonedPlacard = HazardItemPlacard.createHazardItemPlacardEntity(clonedItem);&#xA;                    clonedPlacard.setHzrdipPlacard(tranHazardItemPlacard.getHzrdipPlacard());&#xA;                    clonedPlacard.setHzrdipDescription(tranHazardItemPlacard.getHzrdipDescription());&#xA;                    clonedPlacardSet.add(clonedPlacard);&#xA;                }&#xA;            }&#xA;        }&#xA;        ThisGDS.attachHazards(hazards);&#xA;    }&#xA;}" />
<extension name="MATSyncUnitECCUCConUpdate" scope="MATSON/ALASKA" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.inventory.business.units.EqBaseOrder&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.orders.business.eqorders.EquipmentOrder&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.model.Facility&#xA;&#xA;/**&#xA; * Copies values of ECC and UCC from unit and ufv flex fields to corresponding flex fields in Equipment State&#xA; * values are required in unit and flex field for visibility in XPS&#xA; * and copied to Equipment state to persist&#xA; *&#xA; * Author: Bruno Chiarini&#xA; * Date: 17-Sep-2015&#xA; * JIRA: CSDV-3208&#xA; * SFDC: 145020&#xA; *&#xA; *=====================================================================================================&#xA; * Requirement is to no longer persist value of UCC in equipment. Commented out unnecessary code.&#xA; *&#xA; * Bruno Chiarini&#xA; * Date: 2016-02-19&#xA; * SFDC: 150685&#xA; * JIRA: CSDV-3208&#xA; * =====================================================================================================&#xA; *&#xA; */&#xA;&#xA;public class MATSyncUnitECCUCConUpdate extends AbstractGeneralNoticeCodeExtension&#xA;&#xA;{&#xA;    private Logger LOGGER = Logger.getLogger(MATSyncUnitECCUCConUpdate.class);&#xA;&#xA;    public void execute(GroovyEvent inEvent)&#xA;&#xA;    {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot;MATSyncUnitECCUCConUpdate Execution Started&quot;);&#xA;&#xA;        try {&#xA;            Unit ThisUnit = (Unit)inEvent.getEntity();&#xA;            if (ThisUnit == null) {&#xA;                LOGGER.error(&quot;Reference to Unit not found!&quot;);&#xA;                return;&#xA;            }&#xA;            else&#xA;                LOGGER.info(&quot;Unit: &quot; + ThisUnit);&#xA;&#xA;            Facility ThisFacility = ContextHelper.getThreadFacility();&#xA;            UnitFacilityVisit ThisUFV = ThisUnit.getUfvForFacilityAndEventTime(ThisFacility,&#xA;                    inEvent.getEvent().getEventTime());&#xA;            if (ThisUFV == null) {&#xA;                LOGGER.error(&quot;Reference to UFV not found!&quot;);&#xA;                return;&#xA;            }&#xA;            else&#xA;                LOGGER.info(&quot;UFV: &quot; + ThisUFV);&#xA;&#xA;            UnitEquipment ThisUnitEquip = ThisUnit.getUnitPrimaryUe();&#xA;            EquipmentState ThisEqState = ThisUnitEquip.getUeEquipmentState();&#xA;&#xA;            ThisEqState.setEqsFlexString03(ThisUFV.getUfvFlexString08());     // ECC&#xA;            LOGGER.info(&quot;Eq ECC set to: &quot; + ThisUFV.getUfvFlexString08());&#xA;&#xA;            //ThisEqState.setEqsFlexString02(ThisUnit.getUnitFlexString15());     // UCC&#xA;            //LOGGER.info(&quot;Eq UCC set to: &quot; + ThisUnit.getUnitFlexString15());&#xA;&#xA;            LOGGER.info(&quot;Update Successful.&quot;)&#xA;        }&#xA;        catch (Exception e) {&#xA;            LOGGER.error(&quot;Update Failed. Exception [&quot; + e + &quot;].&quot;);&#xA;        }&#xA;        finally {&#xA;            LOGGER.info(&quot;MATSyncUnitECCUCCOnUpdate Execution Ended.&quot;)&#xA;        }&#xA;    }&#xA;}" />
<extension name="MATPullChsAcc" scope="MATSON" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.model.LocPosition&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.business.api.RectifyParms&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.api.UnitManager&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;/**&#xA; * This will pull a chassis or accessory into the yard if it is referenced at the outgate and is notavailable in the yard&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 09/14/15&#xA; * JIRA: CSDV-3208&#xA; * SFDC: 144851&#xA; *&#xA; */&#xA;&#xA;public class MATPullChsAcc extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        this.log(&quot;Execution Started MATPullChsAcc&quot;);&#xA;&#xA;        TruckTransaction ThisTran = inDao.getTran();&#xA;&#xA;        /* get out if no gate transaction is found */&#xA;&#xA;        if (ThisTran == null)&#xA;            return;&#xA;&#xA;        String AccID = ThisTran.getTranCtrAccNbr();&#xA;&#xA;        if (AccID == null)&#xA;        {&#xA;            AccID = ThisTran.getTranChsAccNbr();&#xA;        }&#xA;&#xA;        if (AccID != null)&#xA;        {&#xA;&#xA;            /* see if the accessory exists as a bare unit */&#xA;&#xA;            Unit ThisAccUnit = this.findActiveUnitInYardByID(AccID);&#xA;&#xA;            if (ThisAccUnit == null)&#xA;            {&#xA;&#xA;                Unit ThisCtrUnit = this.findActiveUnitByAcc(AccID);&#xA;                if (ThisCtrUnit == null)&#xA;                {&#xA;&#xA;                    /* there is no unit in the yard that uses this accessory */&#xA;&#xA;                    /* get the equipment record for the accessory. */&#xA;&#xA;                    Equipment ThisAccEq = Equipment.findEquipment(AccID);&#xA;&#xA;                    if (ThisAccEq != null)&#xA;                    {&#xA;                        /* if it exists create a new bare accessory unit in the yard */&#xA;&#xA;                        UnitManager unitMgr = (UnitManager) Roastery.getBean(UnitManager.BEAN_ID);&#xA;                        LocPosition YardPos = LocPosition.createYardPosition(ContextHelper.getThreadYard(), 'DVRC', null, null, false);&#xA;&#xA;                        UnitFacilityVisit newUfv = unitMgr.createYardBornUnit(ThisAccEq, YardPos, 'Gate Fix It');&#xA;&#xA;                        /* rectify the unit into that yard position */&#xA;&#xA;                        RectifyParms thisRectifyParm = new RectifyParms();&#xA;&#xA;                        thisRectifyParm.setEraseHistory(false);&#xA;                        thisRectifyParm.setUfvTransitState(UfvTransitStateEnum.S40_YARD);&#xA;                        thisRectifyParm.setUnitVisitState(UnitVisitStateEnum.ACTIVE);&#xA;                        thisRectifyParm.setPosition(YardPos);&#xA;&#xA;                        newUfv.rectify(thisRectifyParm);&#xA;&#xA;                        HibernateApi.getInstance().flush();&#xA;&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        /* process chassis only if a chassis is specified and it is not 'chassis is owners' */&#xA;&#xA;        if (ThisTran.getTranChsNbr() != null &amp;&amp; !ThisTran.getTranChsIsOwners())&#xA;        {&#xA;&#xA;            /* see if the chassis exists as a bare chassis unit */&#xA;&#xA;            Unit ThisChsUnit = this.findActiveUnitInYardByID(ThisTran.getTranChsNbr());&#xA;&#xA;            /* if not see if there is a unit with that chassis as carrier */&#xA;&#xA;            if (ThisChsUnit == null)&#xA;            {&#xA;&#xA;                /* there is no unit in the yard that uses this chassis */&#xA;&#xA;                /* get the equipment record for the chassis. */&#xA;&#xA;                Equipment ThisChsEq = Equipment.findEquipment(ThisTran.getTranChsNbr());&#xA;&#xA;                if (ThisChsEq != null)&#xA;                {&#xA;                    /* if it exists create a new bare accessory unit in the yard */&#xA;&#xA;                    UnitManager unitMgr = (UnitManager) Roastery.getBean(UnitManager.BEAN_ID);&#xA;                    LocPosition YardPos = LocPosition.createYardPosition(ContextHelper.getThreadYard(), 'DVRC', null, null, false);&#xA;&#xA;                    UnitFacilityVisit newUfv = unitMgr.createYardBornUnit(ThisChsEq, YardPos, 'Gate Fix It');&#xA;&#xA;                    /* rectify the unit into that yard position */&#xA;&#xA;                    RectifyParms thisRectifyParm = new RectifyParms();&#xA;&#xA;                    thisRectifyParm.setEraseHistory(false);&#xA;                    thisRectifyParm.setUfvTransitState(UfvTransitStateEnum.S40_YARD);&#xA;                    thisRectifyParm.setUnitVisitState(UnitVisitStateEnum.ACTIVE);&#xA;                    thisRectifyParm.setPosition(YardPos);&#xA;&#xA;                    newUfv.rectify(thisRectifyParm);&#xA;&#xA;                    HibernateApi.getInstance().flush();&#xA;&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        executeInternal(inDao);&#xA;    }&#xA;&#xA;    /* Local function to find the an active unit in the yard unit by ID */&#xA;&#xA;    private Unit findActiveUnitInYardByID(String chsId)&#xA;&#xA;    {&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_VISIT_STATE,  UnitVisitStateEnum.ACTIVE))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_ID, chsId))&#xA;&#xA;        Unit[] unitList=Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;&#xA;        if(unitList == null || unitList.size()==0)&#xA;        {&#xA;&#xA;            return null;&#xA;&#xA;        }&#xA;&#xA;        return unitList[0];&#xA;    }&#xA;&#xA;    /* Local function to find the an active unit in the yard unit based on the chsid */&#xA;&#xA;    private Unit findActiveUnitByChs(String chsId)&#xA;&#xA;    {&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_VISIT_STATE,  UnitVisitStateEnum.ACTIVE))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_CARRIAGE_UE_EQ_ID, chsId))&#xA;&#xA;        Unit[] unitList=Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;&#xA;        if(unitList == null || unitList.size()==0)&#xA;        {&#xA;&#xA;            return null;&#xA;&#xA;        }&#xA;&#xA;        return unitList[0];&#xA;    }&#xA;&#xA;    /* Local function to find the an active unit in the yard unit based on the chsid */&#xA;&#xA;    private Unit findActiveUnitByAcc(String chsId)&#xA;&#xA;    {&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_VISIT_STATE,  UnitVisitStateEnum.ACTIVE))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_ACRY_EQUIP_IDS, chsId))&#xA;&#xA;        Unit[] unitList=Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;&#xA;        if(unitList == null || unitList.size()==0)&#xA;        {&#xA;&#xA;            return null;&#xA;&#xA;        }&#xA;&#xA;        return unitList[0];&#xA;    }&#xA;}" />
<extension name="MATDetachChsAcc" scope="MATSON" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;/**&#xA; * This will pull a chassis or accessory out of the yard if the clerk has entered it at the ingate.&#xA; * This allows a chassis to be ingated that was no properly delivered earlier.&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 09/09/15&#xA; * JIRA: CSDV-3208&#xA; * SFDC: 144851&#xA; *&#xA; */&#xA;&#xA;public class MATDetachChsAcc extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        this.log(&quot;Execution Started MATDetachChsAcc&quot;);&#xA;&#xA;        TruckTransaction ThisTran = inDao.getTran();&#xA;&#xA;        /* get out if no gate transaction is found */&#xA;&#xA;        if (ThisTran == null)&#xA;            return;&#xA;&#xA;        if (ThisTran.getTranCtrAccNbr() != null)&#xA;        {&#xA;&#xA;            /* see if the accessory exists as a bare unit */&#xA;&#xA;            Unit ThisAccUnit = this.findActiveCHSInYardByID(ThisTran.getTranCtrAccNbr());&#xA;&#xA;            if (ThisAccUnit == null)&#xA;            {&#xA;&#xA;                Unit ThisCtrUnit = this.findActiveUnitByAcc(ThisTran.getTranCtrAccNbr());&#xA;                if (ThisCtrUnit != null)&#xA;                {&#xA;                    /* there is another unit with it as accessory  detach it */&#xA;&#xA;                    ThisAccUnit = ThisCtrUnit.dismount();&#xA;                    HibernateApi.getInstance().flush();&#xA;                }&#xA;            }&#xA;&#xA;            /* if there is an accessory in the yard retire it */&#xA;&#xA;            if (ThisAccUnit != null)&#xA;&#xA;            {&#xA;                ThisAccUnit.makeRetired();&#xA;                HibernateApi.getInstance().flush();&#xA;            }&#xA;        }&#xA;&#xA;        /* process chassis only if a chassis is specified and it is not 'chassis is owners' */&#xA;&#xA;        if (ThisTran.getTranChsNbr() != null &amp;&amp; !ThisTran.getTranChsIsOwners())&#xA;        {&#xA;&#xA;            /* see if the chassis exists as a bare chassis unit */&#xA;&#xA;            Unit ThisChsUnit = this.findActiveCHSInYardByID(ThisTran.getTranChsNbr());&#xA;&#xA;            /* if not see if there is a unit with that chassis as carrier */&#xA;&#xA;            if (ThisChsUnit == null)&#xA;            {&#xA;                Unit ThisCtrUnit = this.findActiveUnitByChs(ThisTran.getTranChsNbr());&#xA;&#xA;                if (ThisCtrUnit != null)&#xA;                {&#xA;&#xA;                    /* there is another unit with it as carrier  detach it */&#xA;&#xA;                    ThisChsUnit = ThisCtrUnit.dismount();&#xA;                    HibernateApi.getInstance().flush();&#xA;                }&#xA;            }&#xA;&#xA;            /* if there is a in the yard retire it */&#xA;&#xA;            if (ThisChsUnit != null)&#xA;&#xA;            {&#xA;                ThisChsUnit.makeRetired();&#xA;                HibernateApi.getInstance().flush();&#xA;            }&#xA;        }&#xA;&#xA;        executeInternal(inDao);&#xA;    }&#xA;&#xA;    /* Local function to find the an active unit in the yard unit by ID */&#xA;&#xA;    private Unit findActiveCHSInYardByID(String chsId)&#xA;&#xA;    {&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_VISIT_STATE,  UnitVisitStateEnum.ACTIVE))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_ID, chsId))&#xA;&#xA;        Unit[] unitList=Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;&#xA;        if(unitList == null || unitList.size()==0)&#xA;        {&#xA;&#xA;            return null;&#xA;&#xA;        }&#xA;&#xA;        return unitList[0];&#xA;    }&#xA;&#xA;    /* Local function to find the an active unit in the yard unit based on the chsid */&#xA;&#xA;    private Unit findActiveUnitByChs(String chsId)&#xA;&#xA;    {&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_VISIT_STATE,  UnitVisitStateEnum.ACTIVE))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_CARRIAGE_UE_EQ_ID, chsId))&#xA;&#xA;        Unit[] unitList=Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;&#xA;        if(unitList == null || unitList.size()==0)&#xA;        {&#xA;&#xA;            return null;&#xA;&#xA;        }&#xA;&#xA;        return unitList[0];&#xA;    }&#xA;&#xA;    /* Local function to find the an active unit in the yard unit based on the chsid */&#xA;&#xA;    private Unit findActiveUnitByAcc(String chsId)&#xA;&#xA;    {&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_VISIT_STATE,  UnitVisitStateEnum.ACTIVE))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_ACRY_EQUIP_IDS, chsId))&#xA;&#xA;        Unit[] unitList=Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;&#xA;        if(unitList == null || unitList.size()==0)&#xA;        {&#xA;&#xA;            return null;&#xA;&#xA;        }&#xA;&#xA;        return unitList[0];&#xA;    }&#xA;}" />
<extension name="MATSetUnitFlex" scope="MATSON" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;import bsh.This&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.road.business.atoms.TranSubTypeEnum&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;&#xA;/**&#xA; * This groovy set the unit flex on receive export.&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 08/05/15&#xA; * JIRA: ARGO-76865&#xA; * SFDC: 142550&#xA; *&#xA; * Aug. 12, 2015 Peter Seiler Add defensive code to exit if no Unit or no booking found&#xA; *&#xA; * Peter Seiler&#xA; * Date: 09/03/15&#xA; * JIRA: CSDV-3208 &#xA; *&#xA; * Synchronize the UCC code on the Unit (UnitFlexString15) with the Equipment State UCC (eqsFlexString02)&#xA; *&#xA; * Peter Seiler&#xA; * Date: 09/03/2015&#xA; * SFDC: 144915&#xA; *&#xA; * If RM transaction and VV/POD are specified set the unit's routing to that&#xA; * =====================================================================================================&#xA; * Modified to sync ECC code on the ufv (ufvFlexString08) with Equipment State ECC (eqsFlexString03)&#xA; *&#xA; * Bruno Chiarini&#xA; * Date: 16-Sep-2015&#xA; * =====================================================================================================&#xA; * Wrapped code retrieving booking in a try block to handle RI transactions&#xA; *&#xA; * Bruno Chiarini&#xA; * Date: 03-Oct-2015&#xA; * =====================================================================================================&#xA; * Removed change done on 2015-09-03. Requirement is to no longer persist value of UCC in equipment&#xA; *&#xA; * Bruno Chiarini&#xA; * Date: 2016-02-19&#xA; * SFDC: 150685&#xA; * JIRA: CSDV-3208&#xA; * =====================================================================================================&#xA; */&#xA;&#xA;public class MATSetUnitFlex extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;&#xA;private Logger LOGGER = Logger.getLogger(MATSetUnitFlex.class);&#xA;&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        this.log(&quot;Execution Started MATSetUnitFlex&quot;);&#xA;&#xA;        /* check various components of the gate transaction to insure everything needed is present. */&#xA;&#xA;        if (inDao == null)&#xA;            return;&#xA;&#xA;        TruckTransaction ThisTran = inDao.getTran();&#xA;&#xA;        if (ThisTran == null)&#xA;            return;&#xA;&#xA;        /* Execute the built-in logic got the business task. */&#xA;&#xA;        executeInternal(inDao);&#xA;&#xA;        /* set the unit priority stow code to the booking stow block */&#xA;&#xA;        Unit ThisUnit = ThisTran.getTranUnit();&#xA;&#xA;        if (ThisUnit == null)&#xA;        {&#xA;            return;&#xA;        }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9; this.log(&quot;Gate Transaction  No.[&quot; + ThisTran.getTranNbr() + &quot;]&quot;);&#xA;&#xA;        /* for RM transactions set OB routing if VV/POD specified */&#xA;&#xA;        if (ThisTran.getTranSubType() == TranSubTypeEnum.RM&#xA;                &amp;&amp; ThisTran.getTranCarrierVisit() != null&#xA;                &amp;&amp; ThisTran.getTranDischargePoint1() != null)&#xA;        {&#xA;&#xA;            UnitFacilityVisit ThisUFV = ThisTran.getTranUfv();&#xA;&#xA;            if(ThisUFV != null)&#xA;            {&#xA;                Routing ThisRouting = ThisUnit.getUnitRouting();&#xA;                ThisRouting.setRtgPOD1(ThisTran.getTranDischargePoint1());&#xA;                ThisRouting.setRtgDeclaredCv(ThisTran.getTranCarrierVisit());&#xA;                ThisUnit.setUnitRouting(ThisRouting);&#xA;&#xA;                ThisUFV.setUfvObCv(ThisTran.getTranCarrierVisit().getCvGkey());&#xA;            }&#xA;        }&#xA;&#xA;        try {&#xA;            // Added try block to handle cast exception when doing RI transactions&#xA;            Booking ThisBooking = ThisTran.getTranEqo();&#xA;&#xA;        /* if a booking is found copy the Priority stow to the unit flex string */&#xA;&#xA;            if (ThisBooking != null) {&#xA;                ThisUnit.setUnitFlexString08(ThisBooking.getEqoStowBlock());&#xA;            }&#xA;        }&#xA;        catch(Exception) {}&#xA;&#xA;        UnitEquipment ThisUnitEquip = ThisUnit.getUnitPrimaryUe();&#xA;        EquipmentState ThisEqState = ThisUnitEquip.getUeEquipmentState();&#xA;&#xA;        // UCC SYNCING&#xA;&#xA;//        /* if the gate screen did not update the UCC code copy the value from the EQS */&#xA;//        /* if the UCC value is not set on the gate screen copy the EQS UCC code to the Unit */&#xA;//&#xA;//        if (ThisUnit.getUnitFlexString15() == null)&#xA;//        {&#xA;//            if (ThisEqState.getEqsFlexString02() != null)&#xA;//            {&#xA;//                /* set the Unit UCC code to the Equipment State's value */&#xA;//                ThisUnit.setUnitFlexString15(ThisEqState.getEqsFlexString02());&#xA;//            }&#xA;//        }&#xA;//        else&#xA;//        {&#xA;//            /* UCC exists, overwrite equipment's value */&#xA;//            ThisEqState.setEqsFlexString02(ThisUnit.getUnitFlexString15());&#xA;//        }&#xA;&#xA; /* set the unit UCC code */&#xA;         this.log(&quot;UCC--&gt;&quot; + ThisTran.getTranUnitFlexString15() + &quot;]&quot;);&#xA;        ThisUnit.setUnitFlexString15(ThisTran.getTranUnitFlexString15());&#xA;&#xA;        // ECC SYNCING&#xA;&#xA;        /* if the gate screen did not update the ECC code copy the value from the EQS */&#xA;&#xA;        UnitFacilityVisit ThisUFV = ThisTran.getTranUfv();&#xA;&#xA;        /* if the ECC value is not set on the gate screen copy the EQS ECC code to the Unit */&#xA;&#xA;       if (ThisUFV != null) {&#xA;&#x9;this.log(&quot;ThisUFV   &quot;+ThisUFV);&#xA;           &#x9;this.log(&quot;Transaction Type  &quot; + ThisTran.getTranSubType());&#xA;            &#x9;this.log(&quot;ThisUFV.getUfvFlexString08()  &quot; + ThisUFV.getUfvFlexString08());&#xA;            &#x9;this.log(&quot;ThisEqState.getEqsFlexString03()  &quot; + ThisEqState.getEqsFlexString03());&#xA;            &#x9;this.log(&quot;ThisUFV.getUfvFlexString08() == null&quot; + (ThisUFV.getUfvFlexString08() == null));&#xA;&#xA;        if (ThisUFV.getUfvFlexString08() == null)&#xA;        {&#xA;            if (ThisEqState.getEqsFlexString03() != null)&#xA;            {&#xA;                /* set the Unit ECC code to the Equipment State's value */&#xA;                ThisUFV.setUfvFlexString08(ThisEqState.getEqsFlexString03());&#xA;            }&#xA;        }&#xA;        else&#xA;        {&#xA;            /* ECC exists, overwrite equipment's value */&#xA;            ThisEqState.setEqsFlexString03(ThisUFV.getUfvFlexString08());&#xA;        }&#xA;}&#xA;&#xA; this.log(&quot;2 UCC--&gt;&quot; + ThisTran.getTranUnitFlexString15() + &quot;]&quot;);&#xA;    }&#xA;}" />
<extension name="MATGvy301MsgFunctionCheck" scope="MATSON/ALASKA" type="EDI_POST_INTERCEPTOR" language="GROOVY" is-enabled="Y" description="MATGvy301MsgFunctionCheck" contents="import com.navis.argo.*&#xA;import com.navis.argo.BookingTransactionDocument.BookingTransaction&#xA;import com.navis.argo.BookingTransactionsDocument.BookingTransactions&#xA;import com.navis.argo.BookingTransactionDocument.BookingTransaction.EdiBookingItem&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.api.VesselVisitFinder&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.model.Complex&#xA;import com.navis.argo.business.model.Facility&#xA;import com.navis.argo.business.reference.CarrierItinerary&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.external.edi.entity.AbstractEdiPostInterceptor&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernatingEntity&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.orders.OrdersPropertyKeys&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import org.apache.log4j.Logger&#xA;import org.apache.xmlbeans.XmlObject;&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails;&#xA;import com.navis.vessel.business.schedule.VesselVisitLine;&#xA;&#xA;public class MATGvy301MsgFunctionCheck extends AbstractEdiPostInterceptor {&#xA;    UserContext context = ContextHelper.getThreadUserContext();&#xA;    Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#xA;    @Override&#xA;    public void beforeEdiPost(Serializable inSessionGkey, XmlObject inXmlObject) throws BizViolation {&#xA;        com.navis.argo.business.api.GroovyApi groovyApi =new GroovyApi();&#xA;        LOGGER.warn(&quot;in MATGvy301MsgFunctionCheck Started&quot; + timeNow);&#xA;&#xA;        if (inXmlObject == null) {&#xA;            LOGGER.warn(&quot;Input XML Object is null&quot;);&#xA;            throw BizFailure.create(OrdersPropertyKeys.ERRKEY__NULL_XMLBEAN, null);&#xA;        }&#xA;        if (!BookingTransactionsDocument.class.isAssignableFrom(inXmlObject.getClass())) {&#xA;            throw BizFailure.create(OrdersPropertyKeys.ERRKEY__TYPE_MISMATCH_XMLBEAN, null, inXmlObject.getClass().getName());&#xA;        }&#xA;        BookingTransactionsDocument bkgDocument = (BookingTransactionsDocument) inXmlObject;&#xA;        final BookingTransactions bkgtrans = bkgDocument.getBookingTransactions();&#xA;        final BookingTransaction[] bkgtransArray = bkgtrans.getBookingTransactionArray();&#xA;        if (bkgtransArray.length != 1) {&#xA;            throw BizFailure.create(OrdersPropertyKeys.ERRKEY__XML_TRANSACTION_DOCUMENT_LENGTH_EXCEED, null, String.valueOf(bkgtransArray.length));&#xA;        }&#xA;        BookingTransaction bkgTrans = bkgtransArray[0];&#xA;        try {&#xA;            EdiOperator ediOp = bkgTrans.getLineOperator();&#xA;            Facility facility = ContextHelper.getThreadFacility();&#xA;            Complex complex = ContextHelper.getThreadComplex();&#xA;            EdiVesselVisit EdiVv = bkgTrans.getEdiVesselVisit();&#xA;            ScopedBizUnit bkgLineOp = this.resolveLineOperator(EdiVv, ediOp);&#xA;            CarrierVisit ediCv = this.resolveCarrierVisit(EdiVv, complex, facility, bkgLineOp);&#xA;            Booking book = this.getBookingDetails(bkgTrans, ediCv, bkgLineOp);&#xA;            // if user changed the O/B carrier or POD of any units manually, then skip updating the Booking with NSS700&#xA;            // Update the booking with its old VV and POD.&#xA;            String vslId = EdiVv.getVesselId();&#xA;            try {&#xA;                if (vslId != null &amp;&amp; vslId.equalsIgnoreCase(&quot;DUMMY&quot;) &amp;&amp; book != null &amp;&amp; book.eqoTally != null &amp;&amp; book.eqoTally &gt; 0&#xA;                        &amp;&amp; book.getEqoVesselVisit() != null &amp;&amp; !vslId.equalsIgnoreCase(book.getEqoVesselVisit().getCvId())) {&#xA;                    CarrierVisit carrierVisit = book.getEqoVesselVisit();&#xA;                    VesselVisitDetails vesselVisitDetails = VesselVisitDetails.resolveVvdFromCv(carrierVisit);&#xA;                    String lyoldsId = vesselVisitDetails.getVvdVessel().getVesLloydsId();&#xA;                    String vesselName = vesselVisitDetails.getVvdVessel().getVesName();&#xA;                    EdiVv.setVesselId(lyoldsId);&#xA;                    EdiVv.setVesselName(vesselName);&#xA;                    VesselVisitLine vslVisitLine = VesselVisitLine.findVesselVisitLine(vesselVisitDetails, bkgLineOp);&#xA;                    if (vslVisitLine!= null) {&#xA;                        EdiVv.setOutOperatorVoyageNbr(vslVisitLine.getVvlineOutVoyNbr());&#xA;                    }&#xA;&#xA;                    EdiVv&#xA;                    if (bkgTrans.getDischargePort1() != null &amp;&amp; &quot;TBA&quot;.equalsIgnoreCase(bkgTrans.getDischargePort1().getPortId())) {&#xA;                        bkgTrans.getDischargePort1().setPortId(book.getEqoPod1().pointUnlocId);&#xA;                        bkgTrans.getDischargePort1().setPortName(book.getEqoPod1().pointId);&#xA;                    }&#xA;                }&#xA;            } catch (Exception e) {&#xA;                //groovyApi.sendEmail(&quot;gbabu@matson.com&quot;, &quot;gbabu@matson.com&quot;,&quot;edi error &quot;, e.toString());&#xA;                //ignore any errors&#xA;            }&#xA;            //bkg msg function code.&#xA;            this.checkMsgFunctionCode(bkgTrans, book);&#xA;            //update dates to null as the date format is not correct&#xA;            this.checkDateFormat(bkgTrans, book);&#xA;            // dkanndasan - Fix to consolidate booking items quantity&#xA;           this.checkBookingItems(bkgTrans);&#xA;        } catch (Exception e) {&#xA;            LOGGER.warn(&quot;Error while processing before edi post&quot;);&#xA;        }&#xA;        LOGGER.warn(&quot;in MATGvy301MsgFunctionCheck Ended&quot; + timeNow);&#xA;    }&#xA;&#xA;    @Override&#xA;    public void afterEdiPost(XmlObject inXmlObject, HibernatingEntity inHibernatingEntity, Map inParams) throws BizViolation {&#xA;        LOGGER.warn(&quot;in MATGvy301MsgFunctionCheck after EDI Post Started&quot;);&#xA;    }&#xA;&#xA;    public void checkDateFormat(BookingTransaction inBkgTrans, Booking inBook) throws BizViolation {&#xA;        try {&#xA;            inBkgTrans.setMsgProducedDateTime(null);&#xA;            Interchange interchange = inBkgTrans.getInterchange();&#xA;            interchange.setDate(null);&#xA;            interchange.setTime(null);&#xA;            inBkgTrans.setInterchange(interchange);&#xA;        } catch (Exception e) {&#xA;            LOGGER.warn(&quot; date and time set to null exception &quot; + e);&#xA;        }&#xA;    }&#xA;&#xA;    private void checkMsgFunctionCode(BookingTransaction inBkgTrans, Booking inBook) throws BizViolation {&#xA;        String msgFunction = this.getMsgFunction(inBkgTrans);&#xA;        if (msgFunction == null) {&#xA;            LOGGER.warn(&quot;msgFunction is Null&quot;);&#xA;            this.reportUserError(&quot;Message Function cannot be Null&quot;);&#xA;            return;&#xA;        }&#xA;        if (msgFunction.equalsIgnoreCase(&quot;D&quot;) || msgFunction.equalsIgnoreCase(&quot;R&quot;) || msgFunction.equalsIgnoreCase(&quot;E&quot;)) {&#xA;            LOGGER.warn(&quot;Booking Cancel is received No Action is Taken&quot;);&#xA;            return;&#xA;        }&#xA;        LOGGER.warn(&quot;msgFunction:&quot; + msgFunction);&#xA;        if (inBook == null) {&#xA;            inBkgTrans.setMsgFunction(&quot;N&quot;);&#xA;            LOGGER.warn(&quot;Msg Function:&quot; + &quot;N&quot;);&#xA;        }&#xA;    }&#xA;&#xA;    private Booking getBookingDetails(BookingTransaction inBkgTrans, CarrierVisit inCv, ScopedBizUnit inBkgLineOp) {&#xA;        EdiBooking bkgNbr = inBkgTrans.getEdiBooking();&#xA;        String bookingNumber = bkgNbr.getBookingNbr();&#xA;        Booking book = null;&#xA;        try {&#xA;            book = this.checkBooking(bookingNumber, inBkgLineOp, inCv);&#xA;            return book;&#xA;        } catch (Exception e) {&#xA;            LOGGER.warn(&quot; Exception:&quot; + e);&#xA;            return book;&#xA;        }&#xA;    }&#xA;&#xA;    private String getMsgFunction(BookingTransaction inBkgTrans) {&#xA;        return inBkgTrans.getMsgFunction();&#xA;    }&#xA;&#xA;    private CarrierVisit resolveCarrierVisit(EdiVesselVisit inEdiVv, Complex complex, Facility inFacility, ScopedBizUnit bkgLineOp) throws BizViolation {&#xA;        if (complex == null) {&#xA;            LOGGER.warn(&quot; Thread Complex is Null&quot;);&#xA;        }&#xA;        String vvConvention = null;&#xA;        String vvId = null;&#xA;        final String ibVoyg = null;&#xA;        final String obVoyg = null;&#xA;        if (inEdiVv != null) {&#xA;            vvConvention = inEdiVv.getVesselIdConvention();&#xA;            vvId = inEdiVv.getVesselId();&#xA;            ibVoyg = inEdiVv.getInVoyageNbr();&#xA;            if (ibVoyg == null) {&#xA;                ibVoyg = inEdiVv.getInOperatorVoyageNbr();&#xA;            }&#xA;            obVoyg = inEdiVv.getOutVoyageNbr();&#xA;            if (obVoyg == null) {&#xA;                obVoyg = inEdiVv.getOutOperatorVoyageNbr();&#xA;            }&#xA;        }&#xA;        CarrierVisit cv;&#xA;        VesselVisitFinder vvf = (VesselVisitFinder) Roastery.getBean(VesselVisitFinder.BEAN_ID);&#xA;        // Note: This will throw a BizViolation if the vessel visit can not be found&#xA;        LOGGER.warn('Convention ' + vvConvention + ' vvId' + vvId + &quot; voyage &quot; + ibVoyg);&#xA;        if (ibVoyg != null) {&#xA;            cv = vvf.findVesselVisitForInboundStow(complex, vvConvention, vvId, ibVoyg, null, null);&#xA;        } else {&#xA;            cv = vvf.findOutboundVesselVisit(complex, vvConvention, vvId, obVoyg, bkgLineOp, null);&#xA;        }&#xA;        LOGGER.warn(cv);&#xA;        return cv;&#xA;    }&#xA;&#xA;    private ScopedBizUnit resolveLineOperator(EdiVesselVisit inEdiVesselVisit, EdiOperator inEdiOperator) {&#xA;        LOGGER.warn(&quot; in Resolve Line Operator&quot;);&#xA;        ScopedBizUnit inLine = null;&#xA;        String lineCode;&#xA;        String lineCodeAgency;&#xA;        try {&#xA;            if (inEdiOperator != null) {&#xA;                lineCode = inEdiOperator.getOperator();&#xA;                lineCodeAgency = inEdiOperator.getOperatorCodeAgency();&#xA;                inLine = ScopedBizUnit.resolveScopedBizUnit(lineCode, lineCodeAgency, BizRoleEnum.LINEOP);&#xA;            }&#xA;            if (inLine == null &amp;&amp; inEdiVesselVisit != null &amp;&amp; inEdiVesselVisit.getShippingLine() != null) {&#xA;                lineCode = inEdiVesselVisit.getShippingLine().getShippingLineCode();&#xA;                lineCodeAgency = inEdiVesselVisit.getShippingLine().getShippingLineCodeAgency();&#xA;                inLine = ScopedBizUnit.resolveScopedBizUnit(lineCode, lineCodeAgency, BizRoleEnum.LINEOP);&#xA;            }&#xA;        } catch (Exception e) {&#xA;            LOGGER.warn(&quot;Cannot Resolve Line Operator&quot; + e);&#xA;        }&#xA;        return inLine;&#xA;    }&#xA;&#xA;    private Booking checkBooking(String inBkgNbr, ScopedBizUnit inLineOperator, CarrierVisit inCv) {&#xA;        LOGGER.warn(&quot; in Check Booking&quot;);&#xA;        if (inBkgNbr == null) {&#xA;            LOGGER.warn(&quot;inBkgNbr is null&quot;);&#xA;        }&#xA;        if (inLineOperator == null) {&#xA;            LOGGER.warn(&quot;inLineOperator is Null&quot;);&#xA;        }&#xA;        if (inCv == null) {&#xA;            LOGGER.warn(&quot;inCv is Null&quot;);&#xA;        }&#xA;        Booking bkg = Booking.findBookingByUniquenessCriteria(inBkgNbr, inLineOperator, inCv);&#xA;        LOGGER.warn(&quot;bkg:&quot; + bkg.toString());&#xA;        return bkg;&#xA;    }&#xA;&#xA;    private ScopedBizUnit getLineOperator(EdiVesselVisit inEdiVv) throws BizViolation {&#xA;        ScopedBizUnit line = null;&#xA;        String lineCode = null;&#xA;        String lineCodeAgency = null;&#xA;        if (inEdiVv != null &amp;&amp; inEdiVv.getShippingLine() != null) {&#xA;            lineCode = inEdiVv.getShippingLine().getShippingLineCode();&#xA;            lineCodeAgency = inEdiVv.getShippingLine().getShippingLineCodeAgency();&#xA;            line = ScopedBizUnit.resolveScopedBizUnit(lineCode, lineCodeAgency, BizRoleEnum.LINEOP);&#xA;        }&#xA;        if (line == null) {&#xA;            throw BizViolation.create(OrdersPropertyKeys.ERRKEY__UNKNOWN_ENCODED_LINE_ID, null, lineCodeAgency, lineCode);&#xA;        }&#xA;        return line;&#xA;    }&#xA;&#xA;    private boolean fcyPortNotInItinerary(CarrierVisit inCarrierVisit, RoutingPoint inRoutingPoint) {&#xA;        boolean notInItin = false;&#xA;        CarrierItinerary itin = inCarrierVisit.getCvCvd().getCvdItinerary();&#xA;        if (itin != null) {&#xA;            notInItin = itin.isPointInItinerary(inRoutingPoint);&#xA;        }&#xA;        return notInItin;&#xA;    }&#xA;    // Adds an error to the list of errors that will be displayed&#xA;    private void reportUserError(String message) {&#xA;        RoadBizUtil.messageCollector.appendMessage(BizFailure.create(message));&#xA;    }&#xA;&#xA;public void checkBookingItems(BookingTransaction inBkgTran)  throws BizViolation{&#xA;  List&lt;BookingTransactionDocument.BookingTransaction.EdiBookingItem&gt; bkgItems =  inBkgTran.getEdiBookingItemList();&#xA;LOGGER.warn(&quot;Bookings Items Size::&quot;+bkgItems.size());&#xA; HashMap&lt;String,Integer&gt; uniqueItemMap = new HashMap();&#xA;  for (EdiBookingItem bkgItem : bkgItems){&#xA;       String isoCode = bkgItem.getISOcode();&#xA;       int newQuantity = Integer.parseInt(bkgItem.getQuantity());&#xA;       int  quantity = uniqueItemMap.get(isoCode) == null?0:uniqueItemMap.get(isoCode);&#xA;        int finalQuantity = newQuantity+quantity;&#xA;       uniqueItemMap.put(isoCode,finalQuantity);&#xA;&#xA;}&#xA;LOGGER.warn(&quot;Unique Items Map ::::&quot;+uniqueItemMap);&#xA;&#xA; for (EdiBookingItem bkgItem : bkgItems){&#xA;int finalQty = uniqueItemMap.get(bkgItem.getISOcode());&#xA;if(finalQty!=null || finalQty==0){&#xA;bkgItem.setQuantity(String.valueOf(finalQty));&#xA;}&#xA;}&#xA;}&#xA;    private static final Logger LOGGER = Logger.getLogger(MATGvy301MsgFunctionCheck.class);&#xA;}" />
<extension name="MATApplyUnitHazards" scope="MATSON" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.inventory.business.imdg.HazardItem&#xA;import com.navis.inventory.business.imdg.HazardItemPlacard&#xA;import com.navis.inventory.business.imdg.Hazards&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.orders.business.eqorders.EquipmentOrder&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;&#xA;/**&#xA; * This groovy fixes the problem that the 'Move Method' is not copied by the CloneHazards metod&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 08/26/15&#xA; * JIRA: ARGO-79452&#xA; * SFDC: 144566&#xA; *&#xA; * Date 09/03/15&#xA; *&#xA; * Add additional hazard fields that are missing from the 'clone hazards'&#xA; *&#xA; */&#xA;&#xA;public class MATApplyUnitHazards extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        this.log(&quot;Execution Started MATApplyUnitHazards&quot;);&#xA;&#xA;        if (inDao == null)&#xA;            return;&#xA;&#xA;        TruckTransaction ThisTran = inDao.getTran();&#xA;&#xA;        if (ThisTran == null)&#xA;            return;&#xA;&#xA;        /* get the booking and the unit for the transaction */&#xA;&#xA;        EquipmentOrder ThisEqOrdr = ThisTran.getTranEqo();&#xA;&#xA;        Unit ThisUnit = ThisTran.getTranUnit();&#xA;&#xA;        if (ThisEqOrdr == null || ThisUnit == null)&#xA;        {&#xA;            return;&#xA;        }&#xA;&#xA;        /* get the hazards for the booking */&#xA;&#xA;        Booking ThisBooking = Booking.resolveBkgFromEqo(ThisEqOrdr);&#xA;&#xA;        Hazards BookingHazards = ThisBooking.getEqoHazards();&#xA;&#xA;        if (BookingHazards == null)&#xA;        {&#xA;            return;&#xA;        }&#xA;&#xA;        /* get the hazards for the unit */&#xA;&#xA;        GoodsBase ThisGDS = ThisUnit.getUnitGoods();&#xA;&#xA;        /* Copy the booking hazards onto the unit */&#xA;&#xA;        Hazards hazards = Hazards.createHazardsEntity();&#xA;&#xA;        for (Iterator&lt;HazardItem&gt; itr = BookingHazards.getHazardItemsIterator(); itr.hasNext(); )&#xA;        {&#xA;            HazardItem tranHazardItem = itr.next();&#xA;            HazardItem clonedItem = HazardItem.createHazardItemEntity(hazards, tranHazardItem.getHzrdiImdgClass(), tranHazardItem.getHzrdiUNnum());&#xA;&#xA;            clonedItem.setHzrdiNbrType(tranHazardItem.getHzrdiNbrType());&#xA;            clonedItem.setHzrdiLtdQty(tranHazardItem.getHzrdiLtdQty());&#xA;            clonedItem.setHzrdiPackageType(tranHazardItem.getHzrdiPackageType());&#xA;            clonedItem.setHzrdiInhalationZone(tranHazardItem.getHzrdiInhalationZone());&#xA;            clonedItem.setHzrdiImdgCode(tranHazardItem.getHzrdiImdgCode());&#xA;            clonedItem.setHzrdiExplosiveClass(tranHazardItem.getHzrdiExplosiveClass());&#xA;            clonedItem.setHzrdiPageNumber(tranHazardItem.getHzrdiPageNumber());&#xA;            clonedItem.setHzrdiFlashPoint(tranHazardItem.getHzrdiFlashPoint());&#xA;            clonedItem.setHzrdiTechName(tranHazardItem.getHzrdiTechName());&#xA;            clonedItem.setHzrdiProperName(tranHazardItem.getHzrdiProperName());&#xA;            clonedItem.setHzrdiEMSNumber(tranHazardItem.getHzrdiEMSNumber());&#xA;            clonedItem.setHzrdiERGNumber(tranHazardItem.getHzrdiERGNumber());&#xA;            clonedItem.setHzrdiMFAG(tranHazardItem.getHzrdiMFAG());&#xA;            clonedItem.setHzrdiPackingGroup(tranHazardItem.getHzrdiPackingGroup());&#xA;            clonedItem.setHzrdiHazIdUpper(tranHazardItem.getHzrdiHazIdUpper());&#xA;            clonedItem.setHzrdiSubstanceLower(tranHazardItem.getHzrdiSubstanceLower());&#xA;            clonedItem.setHzrdiWeight(tranHazardItem.getHzrdiWeight());&#xA;            clonedItem.setHzrdiPlannerRef(tranHazardItem.getHzrdiPlannerRef());&#xA;            clonedItem.setHzrdiQuantity(tranHazardItem.getHzrdiQuantity());&#xA;            clonedItem.setHzrdiMoveMethod(tranHazardItem.getHzrdiMoveMethod());&#xA;            clonedItem.setHzrdiSecondaryIMO1(tranHazardItem.getHzrdiSecondaryIMO1());&#xA;            clonedItem.setHzrdiSecondaryIMO2(tranHazardItem.getHzrdiSecondaryIMO2());&#xA;            clonedItem.setHzrdiDeckRestrictions(tranHazardItem.getHzrdiDeckRestrictions());&#xA;            clonedItem.setHzrdiMarinePollutants(tranHazardItem.getHzrdiMarinePollutants());&#xA;            clonedItem.setHzrdiDcLgRef(tranHazardItem.getHzrdiDcLgRef());&#xA;            clonedItem.setHzrdiEmergencyTelephone(tranHazardItem.getHzrdiEmergencyTelephone());&#xA;            clonedItem.setHzrdiNotes(tranHazardItem.getHzrdiNotes());&#xA;            clonedItem.setHzrdiFireCode(tranHazardItem.getHzrdiFireCode());&#xA;            clonedItem.setHzrdiSeq(tranHazardItem.getHzrdiSeq());&#xA;            clonedItem.setHzrdiImdgClass(tranHazardItem.getHzrdiImdgClass());&#xA;            &#xA;            Roastery.getHibernateApi().save(clonedItem);&#xA;&#xA;            if (tranHazardItem.getHzrdiPlacardSet() != null)&#xA;            {&#xA;                Set&lt;HazardItemPlacard&gt; clonedPlacardSet = new LinkedHashSet&lt;HazardItemPlacard&gt;();&#xA;                clonedItem.setHzrdiPlacardSet(clonedPlacardSet);&#xA;                for (HazardItemPlacard tranHazardItemPlacard : (Set&lt;HazardItemPlacard&gt;) tranHazardItem.getHzrdiPlacardSet())&#xA;                {&#xA;                    HazardItemPlacard clonedPlacard = HazardItemPlacard.createHazardItemPlacardEntity(clonedItem);&#xA;                    clonedPlacard.setHzrdipPlacard(tranHazardItemPlacard.getHzrdipPlacard());&#xA;                    clonedPlacard.setHzrdipDescription(tranHazardItemPlacard.getHzrdipDescription());&#xA;                    clonedPlacardSet.add(clonedPlacard);&#xA;                }&#xA;            }&#xA;        }&#xA;        ThisGDS.attachHazards(hazards);&#xA;    }&#xA;}" />
<extension name="MatsonAncMultiStopImportDelivery" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="/*&#xD;&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xD;&#xA; *&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;import com.navis.argo.ContextHelper&#xD;&#xA;import com.navis.argo.business.api.Serviceable&#xD;&#xA;import com.navis.argo.business.atoms.DrayStatusEnum&#xD;&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xD;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xD;&#xA;import com.navis.argo.business.model.Complex&#xD;&#xA;import com.navis.argo.business.model.GeneralReference&#xD;&#xA;import com.navis.argo.business.reference.Commodity&#xD;&#xA;import com.navis.argo.business.reference.Equipment&#xD;&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xD;&#xA;import com.navis.framework.AllOtherFrameworkPropertyKeys&#xD;&#xA;import com.navis.framework.business.Roastery&#xD;&#xA;import com.navis.framework.persistence.HibernateApi&#xD;&#xA;import com.navis.framework.portal.*&#xD;&#xA;import com.navis.framework.portal.query.DomainQuery&#xD;&#xA;import com.navis.framework.portal.query.PredicateFactory&#xD;&#xA;import com.navis.framework.util.BizFailure&#xD;&#xA;import com.navis.framework.util.BizViolation&#xD;&#xA;import com.navis.framework.util.message.MessageCollector&#xD;&#xA;import com.navis.inventory.InventoryEntity&#xD;&#xA;import com.navis.inventory.business.InventoryFacade&#xD;&#xA;import com.navis.inventory.business.api.UnitField&#xD;&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xD;&#xA;import com.navis.inventory.business.units.GoodsBase&#xD;&#xA;import com.navis.inventory.business.units.Unit&#xD;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xD;&#xA;import com.navis.services.business.event.Event&#xD;&#xA;import com.navis.services.business.event.GroovyEvent&#xD;&#xA;import com.navis.services.business.event.GroovyEventFailure&#xD;&#xA;import org.apache.log4j.Level&#xD;&#xA;import org.apache.log4j.Logger&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; When user record “Set Multistop Returning”, “Set Multistop Non-Returning” and “Clear Multistop” events, through the groovy we have to manually set or&#xD;&#xA; clear the status of a unit as multi-stop by means of a service.&#xD;&#xA; *&#xD;&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 07/17/2015&#xD;&#xA; *&#xD;&#xA; * Date: 07/17/2015: 5:41 PM&#xD;&#xA; * JIRA: CSDV-3025&#xD;&#xA; * SFDC: 00137329&#xD;&#xA; * Called from: General Notices&#xD;&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xD;&#xA; * Revision History&#xD;&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xD;&#xA; */&#xD;&#xA;class MatsonAncMultiStopImportDelivery extends AbstractGeneralNoticeCodeExtension {&#xD;&#xA;  public void execute(GroovyEvent inEvent) {&#xD;&#xA;    LOGGER.setLevel(Level.INFO);&#xD;&#xA;    LOGGER.info(&quot; MatsonAncMultiStopImportDelivery execute Stared.&quot;);&#xD;&#xA;    Event event = inEvent.getEvent();&#xD;&#xA;    Serviceable serviceable = inEvent.getEntity();&#xD;&#xA;    MessageCollector collector = getMessageCollector();&#xD;&#xA;    try {&#xD;&#xA;&#xD;&#xA;      //validation&#xD;&#xA;      if (serviceable == null) {&#xD;&#xA;        LOGGER.error(&quot;MatsonAncMultiStopImportDelivery, couldn't execute the groovy MatsonAncMultiStopImportDelivery since the event:&quot; + event +&#xD;&#xA;                &quot; has null value for serviceable entity.&quot;);&#xD;&#xA;        return;&#xD;&#xA;      }&#xD;&#xA;      if (!serviceable instanceof Unit) {&#xD;&#xA;        LOGGER.error(&quot;MatsonAncMultiStopImportDelivery, couldn't execute the groovy MatsonAncMultiStopImportDelivery since the event:&quot; + event +&#xD;&#xA;                &quot; is not applicable to Unit Entity.&quot;);&#xD;&#xA;        return;&#xD;&#xA;      }&#xD;&#xA;      GeneralReference multiStopCommodityIdReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;MULTISTOP&quot;, &quot;COMMODITY_ID&quot;);&#xD;&#xA;      if (multiStopCommodityIdReference == null || multiStopCommodityIdReference.getRefValue1() == null) {&#xD;&#xA;        collector.appendMessage(BizViolation.&#xD;&#xA;                create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null, &quot;please configure multistop Commodity Id in General Reference.&quot;));&#xD;&#xA;        return;&#xD;&#xA;      }&#xD;&#xA;      Commodity cmdy = Commodity.findCommodity(multiStopCommodityIdReference.getRefValue1());&#xD;&#xA;      if (cmdy == null) {&#xD;&#xA;        collector.appendMessage(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xD;&#xA;                &quot;No Commodity found for the Id:&quot; + multiStopCommodityIdReference.getRefValue1()));&#xD;&#xA;        return;&#xD;&#xA;      }&#xD;&#xA;      Unit unit = serviceable as Unit;&#xD;&#xA;      GoodsBase goodsBase = unit.getUnitGoods();&#xD;&#xA;      if (&quot;SET MULTISTOP RETURNING&quot;.equals(event.getEvntEventType().getEvnttypeId())) {&#xD;&#xA;        //set commodity code&#xD;&#xA;        if (goodsBase != null) {&#xD;&#xA;          goodsBase.setCommodity(cmdy);&#xD;&#xA;          HibernateApi.getInstance().update(goodsBase);&#xD;&#xA;        }&#xD;&#xA;        //resurrect delivered&#xD;&#xA;        UnitFacilityVisit ufv = unit.getUnitActiveUfv();&#xD;&#xA;        if (ufv != null &amp;&amp; UfvTransitStateEnum.S70_DEPARTED.equals(ufv.getUfvTransitState())) {&#xD;&#xA;          BizRequest request = new BizRequest(getUserContext());&#xD;&#xA;          Serializable[] ufvGkeys = new Serializable[1];&#xD;&#xA;          ufvGkeys[0] = ufv.getUfvGkey();&#xD;&#xA;          CrudOperation crud = new CrudOperation(null, CrudOperation.TASK_UPDATE, InventoryEntity.UNIT_FACILITY_VISIT, null, ufvGkeys);&#xD;&#xA;          request.addCrudOperation(crud);&#xD;&#xA;          BizResponse response = new BizResponse();&#xD;&#xA;          INVENTORY_FACADE.resurrectUnit(request, response);&#xD;&#xA;          collector.getMessages().addAll(response.getMessages());&#xD;&#xA;        } else {&#xD;&#xA;          //set Dray status to Dray out and back&#xD;&#xA;          unit.updateDrayStatus(DrayStatusEnum.OFFSITE);&#xD;&#xA;          HibernateApi.getInstance().update(unit);&#xD;&#xA;        }&#xD;&#xA;      } else {&#xD;&#xA;        if (&quot;SET MULTISTOP NON-RETURNING&quot;.equals(event.getEvntEventType().getEvnttypeId())) {&#xD;&#xA;          //set commodity code&#xD;&#xA;          if (goodsBase != null) {&#xD;&#xA;            goodsBase.setCommodity(cmdy);&#xD;&#xA;            HibernateApi.getInstance().update(goodsBase);&#xD;&#xA;          }&#xD;&#xA;          //set Dray status to null&#xD;&#xA;          unit.updateDrayStatus(null);&#xD;&#xA;          HibernateApi.getInstance().update(unit);&#xD;&#xA;&#xD;&#xA;          //cancel advised units if any.&#xD;&#xA;          BizRequest request = new BizRequest(getUserContext());&#xD;&#xA;          Serializable[] advisedUfvs = findAdvisedImportUfvGekys(unit.getPrimaryEq());&#xD;&#xA;          if (advisedUfvs != null &amp;&amp; advisedUfvs.length &gt; 0) {&#xD;&#xA;            CrudOperation crud =&#xD;&#xA;                    new CrudOperation(null, CrudOperation.TASK_UPDATE, InventoryEntity.UNIT_FACILITY_VISIT, null, advisedUfvs);&#xD;&#xA;            request.addCrudOperation(crud);&#xD;&#xA;            BizResponse response = new BizResponse();&#xD;&#xA;            INVENTORY_FACADE.cancelAdvisedUfv(request, response);&#xD;&#xA;            collector.getMessages().addAll(response.getMessages());&#xD;&#xA;          }&#xD;&#xA;        } else if (&quot;CLEAR MULTISTOP&quot;.equals(event.getEvntEventType().getEvnttypeId())) {&#xD;&#xA;          //set commodity code to null&#xD;&#xA;          if (goodsBase != null) {&#xD;&#xA;            goodsBase.setCommodity(null);&#xD;&#xA;            HibernateApi.getInstance().update(goodsBase);&#xD;&#xA;          }&#xD;&#xA;          //set Dray status to null&#xD;&#xA;          unit.updateDrayStatus(null);&#xD;&#xA;          //cancel advised/inbound units if any.&#xD;&#xA;          BizRequest request = new BizRequest(getUserContext());&#xD;&#xA;          Serializable[] advisedUfvs = findAdvisedOrInboundImportUfvGkeys(unit.getPrimaryEq());&#xD;&#xA;          if (advisedUfvs != null &amp;&amp; advisedUfvs.length &gt; 0) {&#xD;&#xA;            CrudOperation crud =&#xD;&#xA;                    new CrudOperation(null, CrudOperation.TASK_UPDATE, InventoryEntity.UNIT_FACILITY_VISIT, null, advisedUfvs);&#xD;&#xA;            request.addCrudOperation(crud);&#xD;&#xA;            BizResponse response = new BizResponse();&#xD;&#xA;            INVENTORY_FACADE.cancelAdvisedUfv(request, response);&#xD;&#xA;            collector.getMessages().addAll(response.getMessages());&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    } catch (BizViolation inBizViolation) {&#xD;&#xA;      collector.registerExceptions(GroovyEventFailure.create(&quot;Groovy event has failed&quot;, inBizViolation, event));&#xD;&#xA;    } catch (BizFailure inBizFailure) {&#xD;&#xA;      collector.registerExceptions(GroovyEventFailure.create(&quot;Groovy event has failed&quot;, inBizFailure, event));&#xD;&#xA;    } catch (Throwable inException) {&#xD;&#xA;      collector.registerExceptions(inException);&#xD;&#xA;    }&#xD;&#xA;    finally {&#xD;&#xA;      LOGGER.info(&quot; MatsonAncMultiStopImportDelivery execute Completed.&quot;);&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  private static Serializable[] findAdvisedImportUfvGekys(Equipment inEquipment) {&#xD;&#xA;    List&lt;Unit&gt; unitList = findUnitList(ContextHelper.getThreadComplex(), inEquipment, null, UnitCategoryEnum.IMPORT);&#xD;&#xA;    if (unitList != null &amp;&amp; !unitList.isEmpty()) {&#xD;&#xA;      List&lt;Serializable&gt; ufvGkeyList = new ArrayList();&#xD;&#xA;      for (Unit unit : unitList) {&#xD;&#xA;        Set&lt;UnitFacilityVisit&gt; ufvSet = unit.getUnitUfvSet();&#xD;&#xA;        if (ufvSet != null) {&#xD;&#xA;          for (UnitFacilityVisit ufv : ufvSet) {&#xD;&#xA;            if (ufv.isFuture()) {&#xD;&#xA;              ufvGkeyList.add(ufv.getUfvGkey());&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;      return ufvGkeyList.toArray(new Serializable[ufvGkeyList.size()]);&#xD;&#xA;    }&#xD;&#xA;    return null;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  /**&#xD;&#xA;   * Finds Container Units given Complex, Primary Equipment, VisitState and optionally one or more arrival modes.&#xD;&#xA;   *&#xD;&#xA;   * @param inComplex complex of the Unit&#xD;&#xA;   * @param inPrimaryEq the primary equipment for the Unit.&#xD;&#xA;   * @param inCategory unit category&#xD;&#xA;   * @return a List of Unit&#xD;&#xA;   */&#xD;&#xA;  private static List&lt;Unit&gt; findUnitList(Complex inComplex, Equipment inPrimaryEq,&#xD;&#xA;                                         LocTypeEnum[] inArrivalModes,&#xD;&#xA;                                         UnitCategoryEnum inCategory) {&#xD;&#xA;&#xD;&#xA;    Serializable cpxGkey = inComplex == null ? null : inComplex.getCpxGkey();&#xD;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xD;&#xA;            .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_COMPLEX, cpxGkey))&#xD;&#xA;            .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_CURRENT_UFV_TRANSIT_STATE, UfvTransitStateEnum.S10_ADVISED))&#xD;&#xA;            .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_PRIMARY_EQ, inPrimaryEq.getEqGkey()))&#xD;&#xA;            .addDqOrdering(Ordering.desc(UnitField.UNIT_CREATE_TIME));&#xD;&#xA;&#xD;&#xA;    if (inArrivalModes != null) {&#xD;&#xA;      dq.addDqPredicate(PredicateFactory.in(UnitField.UNIT_DECLARED_IB_CARRIER_MODE, inArrivalModes));&#xD;&#xA;    }&#xD;&#xA;    if (inCategory != null) {&#xD;&#xA;      dq.addDqPredicate(PredicateFactory.eq(UnitField.UNIT_CATEGORY, inCategory));&#xD;&#xA;    }&#xD;&#xA;    Serializable[] unitGkey = HibernateApi.getInstance().findPrimaryKeysByDomainQuery(dq);&#xD;&#xA;&#xD;&#xA;    List&lt;Unit&gt; unitList = new ArrayList&lt;Unit&gt;();&#xD;&#xA;    if (unitGkey == null || unitGkey.length == 0) {&#xD;&#xA;      return unitList;&#xD;&#xA;    }&#xD;&#xA;    for (int i = 0; i &lt; unitGkey.length; i++) {&#xD;&#xA;      Unit unit = (Unit) HibernateApi.getInstance().load(Unit.class, unitGkey[i]);&#xD;&#xA;      unitList.add(unit);&#xD;&#xA;    }&#xD;&#xA;    return unitList;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  private static Serializable[] findAdvisedOrInboundImportUfvGkeys(Equipment inPrimaryEq) {&#xD;&#xA;    UfvTransitStateEnum[] states = [UfvTransitStateEnum.S10_ADVISED, UfvTransitStateEnum.S20_INBOUND];&#xD;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT_FACILITY_VISIT)&#xD;&#xA;            .addDqPredicate(PredicateFactory.eq(UnitField.UFV_PRIMARY_EQ, inPrimaryEq.getEqGkey()))&#xD;&#xA;            .addDqPredicate(PredicateFactory.eq(UnitField.UFV_CATEGORY, UnitCategoryEnum.IMPORT))&#xD;&#xA;            .addDqPredicate(PredicateFactory.in(UnitField.UFV_TRANSIT_STATE, states));&#xD;&#xA;    return HibernateApi.getInstance().findPrimaryKeysByDomainQuery(dq);&#xD;&#xA;  }&#xD;&#xA;  private Logger LOGGER = Logger.getLogger(MatsonAncMultiStopImportDelivery.class);&#xD;&#xA;  private static InventoryFacade INVENTORY_FACADE = (InventoryFacade) Roastery.getBean(InventoryFacade.BEAN_ID);&#xD;&#xA;}" />
<extension name="MatsonAncGateWebServiceCall" type="GROOVY_WS_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.webservice.ArgoWebServicesFacade&#xA;import com.navis.argo.webservice.IArgoWebService&#xA;import com.navis.external.argo.AbstractGroovyWSCodeExtension&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.util.scope.ScopeCoordinates&#xA;import org.apache.commons.lang.StringEscapeUtils&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;&#xA;class MatsonAncGateWebServiceCall extends AbstractGroovyWSCodeExtension {&#xA;&#xA;  public String execute(Map&lt;String, Object&gt; inParams) {&#xA;    LOGGER.setLevel(Level.INFO);&#xA;    LOGGER.info(&quot;MatsonAncGateWebServiceCall,execute method Stared.&quot;);&#xA;    if (inParams == null) {&#xA;      LOGGER.error(&quot;Null Parameters received!&quot;);&#xA;      return &quot;Null Parameters received!&quot;;&#xA;    }&#xA;    if (!inParams.containsKey(&quot;xml-request&quot;)) {&#xA;      LOGGER.error(&quot;No key found with the name: xml-request&quot;);&#xA;      return &quot;No key found with the name: xml-request&quot;;&#xA;    }&#xA;    String request = inParams.get(&quot;xml-request&quot;);&#xA;    ScopeCoordinates scope = ContextHelper.getThreadUserContext().getScopeCoordinate();&#xA;    UserContext uc = ContextHelper.getThreadUserContext();&#xA;    IArgoWebService ws = new ArgoWebServicesFacade(uc);&#xA;    LOGGER.info(&quot;MatsonAncGateWebServiceCall, request string:&quot; + request);&#xA;    LOGGER.info(&quot;MatsonAncGateWebServiceCall, User Id:&quot; + ContextHelper.getThreadUserId());&#xA;    LOGGER.info(&quot;MatsonAncGateWebServiceCall, Scope:&quot; + scope.getBusinessCoords());&#xA;    String returnVal = ws.basicInvoke(scope.getBusinessCoords(), StringEscapeUtils.unescapeXml(request));&#xA;    LOGGER.info(&quot;MatsonAncGateWebServiceCall, retured Value:&quot; + returnVal);&#xA;    LOGGER.info(&quot;MatsonAncGateWebServiceCall,execute method Completed.&quot;);&#xA;    return returnVal;&#xA;  }&#xA;  private static Logger LOGGER = Logger.getLogger(MatsonAncGateWebServiceCall.class);&#xA;}" />
<extension name="MATSetGateCarrierVisitDUT" scope="MATSON/ALASKA/DUT" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" description="Sets the carrier visit id of the gate transaction to the name of the driver entered in the gate screen." contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.model.TruckVisitDetails&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;//import com.navis.argo.ContextHelper&#xA;&#xA;/**&#xA; * This groovy customizes the carrier visit used in gate transactions&#xA; *&#xA; * Author: Bruno Chiarini&#xA; * Date: 19-Sep-2015&#xA; * JIRA: CSDV-3258&#xA; * SFDC: 145538&#xA; *&#xA; * -----------------------------------------------------------------&#xA; * Updated, cleared code and added more information in log&#xA; * Author: Bruno Chiarini&#xA; * Date: 23-Sep-2015&#xA; * -----------------------------------------------------------------&#xA; * Changed carrier visit id per customer requirement. From date to driver name.&#xA; * Author: Bruno Chiarini&#xA; * Date: 03-Oct-2015&#xA; *------------------------------------------------------------------&#xA; * Modified for facility DUT facility. Carrier visit set to driver's name.&#xA; * Class name changed to MATSetGateCarrierDUT to differentiate from the code used for facility ANK&#xA; * Author: Bruno Chiarini&#xA; * Date: 06-Oct-2015&#xA; */&#xA;&#xA;public class MATSetGateCarrierVisitDUT extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;    private Logger LOGGER = Logger.getLogger(MATSetGateCarrierVisitDUT.class);&#xA;&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot;MATSetCarrierVisitDUT Execution Started.&quot;);&#xA;&#xA;        /* Execute the built-in logic got the business task. */&#xA;&#xA;        executeInternal(inDao);&#xA;&#xA;        // get current transaction&#xA;        TruckTransaction thisTran = inDao.getTran();&#xA;        if (thisTran == null)&#xA;        {&#xA;            LOGGER.error(&quot;Truck Transaction not found!&quot;);&#xA;            return;&#xA;        }&#xA;        //LOGGER.info(&quot;Truck Transaction: &quot; + ThisTran);&#xA;&#xA;        // get transaction's truck visit&#xA;        TruckVisitDetails thisTruckVisit = thisTran.getTranTruckVisit();&#xA;        if (thisTruckVisit == null)&#xA;        {&#xA;            LOGGER.error(&quot;Truck Visit not found. &quot;&#xA;                    + &quot;Gate Transaction [&quot; + thisTran.getTranNbr() + &quot;], &quot;&#xA;                    + ( (!thisTran.isBareChassis())&#xA;                        ? (&quot;Unit [&quot; + thisTran.getTranCtrNbr())&#xA;                        : (&quot;Chassis [&quot; + thisTran.getTranChsNbr() )&#xA;                    )&#xA;                    + &quot;]&quot;);&#xA;            return;&#xA;        }&#xA;        //LOGGER.info(&quot;Truck Visit: &quot; + ThisTruckVisit);&#xA;&#xA;        // get truck visit's carrier visit&#xA;        CarrierVisit thisCV = thisTruckVisit.getCv(thisTruckVisit);&#xA;        if (thisCV == null)&#xA;        {&#xA;            LOGGER.error(&quot;Carrier visit not found. &quot;&#xA;                    + &quot;Gate Transaction [&quot; + thisTran.getTranNbr() + &quot;], &quot;&#xA;                    + ( (!thisTran.isBareChassis())&#xA;                            ? (&quot;Unit [&quot; + thisTran.getTranCtrNbr())&#xA;                            : (&quot;Chassis [&quot; + thisTran.getTranChsNbr() )&#xA;                      )&#xA;                    + &quot;]&quot;);&#xA;            return;&#xA;        }&#xA;&#xA;        // this no longer required, changed from date to driver's name&#xA;//        Calendar cal = Calendar.getInstance();&#xA;//        Date thisDate = cal.time;                                                   //get current time&#xA;&#xA;        //String truckingCoId = thisTruckVisit.getTvdtlsTrkCompany().getBzuId();&#xA;&#xA;//        if (truckingCoId.length() &gt; 10)&#xA;//        {&#xA;//            truckingCoId = truckingCoId.substring(0, 9);&#xA;//        }&#xA;&#xA;//        thisCV.updateCvId( truckingCoId                     //Trucking company id&#xA;//            + &quot;-&quot; + thisDate.format(&quot;ddMMM&quot;, ContextHelper.getThreadFacility().getTimeZone()) );  //Transaction Date&#xA;&#xA;        //new code to set carrier visit to driver's name in gate transaction&#xA;        String newCVId = &quot;&quot;;&#xA;        String driverName = thisTruckVisit.getTvdtlsDriverName();&#xA;        if (driverName != null)&#xA;        {&#xA;            newCVId = driverName;  //driver name&#xA;        }&#xA;        else&#xA;        {&#xA;            newCVId = &quot;NoDriver&quot;;   //making sure we get a value in case it is null&#xA;        }&#xA;&#xA;        //trim to a max of 16 chars (max length allowed for carrier visit id)&#xA;        if (newCVId.length() &gt; 16) {&#xA;            newCVId = newCVId.substring(0,16);&#xA;        }&#xA;&#xA;        thisCV.updateCvId(newCVId);&#xA;&#xA;        LOGGER.info(&quot;Carrier Visit Id set to [&quot;  + thisCV.getCvId()&#xA;                + &quot;] for transaction [&quot; + thisTran.getTranNbr() + &quot;], &quot;&#xA;                + ( (!thisTran.isBareChassis())&#xA;                    ? (&quot;Unit [&quot; + thisTran.getTranCtrNbr())&#xA;                    : (&quot;Chassis [&quot; + thisTran.getTranChsNbr() )&#xA;                    )&#xA;                + &quot;]&quot;);&#xA;        LOGGER.info(&quot;MATSetCarrierVisitDUT Execution Ended.&quot;);&#xA;    }&#xA;&#xA;}&#xA;" />
<extension name="MATSetGateCarrierVisit" scope="MATSON" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.model.TruckVisitDetails&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;//import com.navis.argo.ContextHelper&#xA;&#xA;/**&#xA; * This groovy customizes the carrier visit used in gate transactions&#xA; *&#xA; * Author: Bruno Chiarini&#xA; * Date: 19-Sep-2015&#xA; * JIRA: CSDV-3258&#xA; * SFDC: 145538&#xA; *&#xA; * -----------------------------------------------------------------&#xA; * Updated, cleared code and added more information in log&#xA; * Author: Bruno Chiarini&#xA; * Date: 23-Sep-2015&#xA; * -----------------------------------------------------------------&#xA; * Changed carrier visit id per customer requirement. From date to driver name.&#xA; * Author: Bruno Chiarini&#xA; * Date: 03-Oct-2015&#xA; *&#xA; */&#xA;&#xA;public class MATSetGateCarrierVisit extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;    private Logger LOGGER = Logger.getLogger(MATSetGateCarrierVisit.class);&#xA;&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot;MATSetCarrierVisit Execution Started.&quot;);&#xA;&#xA;        /* Execute the built-in logic got the business task. */&#xA;&#xA;        executeInternal(inDao);&#xA;&#xA;        // get current transaction&#xA;        TruckTransaction thisTran = inDao.getTran();&#xA;        if (thisTran == null)&#xA;        {&#xA;            LOGGER.error(&quot;Truck Transaction not found!&quot;);&#xA;            return;&#xA;        }&#xA;        //LOGGER.info(&quot;Truck Transaction: &quot; + ThisTran);&#xA;&#xA;        // get transaction's truck visit&#xA;        TruckVisitDetails thisTruckVisit = thisTran.getTranTruckVisit();&#xA;        if (thisTruckVisit == null)&#xA;        {&#xA;            LOGGER.error(&quot;Truck Visit not found. &quot;&#xA;                    + &quot;Gate Transaction [&quot; + thisTran.getTranNbr() + &quot;], &quot;&#xA;                    + ( (!thisTran.isBareChassis())&#xA;                        ? (&quot;Unit [&quot; + thisTran.getTranCtrNbr())&#xA;                        : (&quot;Chassis [&quot; + thisTran.getTranChsNbr() )&#xA;                    )&#xA;                    + &quot;]&quot;);&#xA;            return;&#xA;        }&#xA;        //LOGGER.info(&quot;Truck Visit: &quot; + ThisTruckVisit);&#xA;&#xA;        // get truck visit's carrier visit&#xA;        CarrierVisit thisCV = thisTruckVisit.getCv(thisTruckVisit);&#xA;        if (thisCV == null)&#xA;        {&#xA;            LOGGER.error(&quot;Carrier visit not found. &quot;&#xA;                    + &quot;Gate Transaction [&quot; + thisTran.getTranNbr() + &quot;], &quot;&#xA;                    + ( (!thisTran.isBareChassis())&#xA;                            ? (&quot;Unit [&quot; + thisTran.getTranCtrNbr())&#xA;                            : (&quot;Chassis [&quot; + thisTran.getTranChsNbr() )&#xA;                      )&#xA;                    + &quot;]&quot;);&#xA;            return;&#xA;        }&#xA;&#xA;        // this no longer required, changed from date to driver's name&#xA;//        Calendar cal = Calendar.getInstance();&#xA;//        Date thisDate = cal.time;                                                   //get current time&#xA;&#xA;        String truckingCoId = thisTruckVisit.getTvdtlsTrkCompany().getBzuId();&#xA;&#xA;//        if (truckingCoId.length() &gt; 10)&#xA;//        {&#xA;//            truckingCoId = truckingCoId.substring(0, 9);&#xA;//        }&#xA;&#xA;//        thisCV.updateCvId( truckingCoId                     //Trucking company id&#xA;//            + &quot;-&quot; + thisDate.format(&quot;ddMMM&quot;, ContextHelper.getThreadFacility().getTimeZone()) );  //Transaction Date&#xA;&#xA;        //new code to handle driver's name instead of date&#xA;        String newCVId = truckingCoId;&#xA;        String driverName = thisTruckVisit.getTvdtlsDriverName();&#xA;        if (driverName != null)&#xA;        {&#xA;            newCVId += &quot;-&quot; + driverName;  //append driver name&#xA;        }&#xA;&#xA;        //trim to a max of 16 chars (max length allowed for carrier visit id)&#xA;        if (newCVId.length() &gt; 16) {&#xA;            newCVId = newCVId.substring(0,16);&#xA;        }&#xA;&#xA;        thisCV.updateCvId(newCVId);&#xA;&#xA;        LOGGER.info(&quot;Carrier Visit Id set to [&quot;  + thisCV.getCvId()&#xA;                + &quot;] for transaction [&quot; + thisTran.getTranNbr() + &quot;], &quot;&#xA;                + ( (!thisTran.isBareChassis())&#xA;                    ? (&quot;Unit [&quot; + thisTran.getTranCtrNbr())&#xA;                    : (&quot;Chassis [&quot; + thisTran.getTranChsNbr() )&#xA;                    )&#xA;                + &quot;]&quot;);&#xA;        LOGGER.info(&quot;MATSetCarrierVisit Execution Ended.&quot;);&#xA;    }&#xA;&#xA;}" />
<extension name="MatsonAncActivityExtractInterceptor" type="EDI_EXTRACT_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;import com.navis.argo.util.XmlUtil&#xA;import com.navis.external.edi.entity.AbstractEdiExtractInterceptor&#xA;import com.navis.inventory.business.units.Routing&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.services.business.event.Event&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;import org.jdom.Element&#xA;&#xA;/**&#xA; Set UNLOC code for Port of load.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 09/22/2015&#xA; *&#xA; * Date: 09/22/2015: 5:41 PM&#xA; * JIRA: CSDV-&#xA; * SFDC: 00145621&#xA; * Called from: Edi Session extract code extension for activity message&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;class MatsonAncActivityExtractInterceptor extends AbstractEdiExtractInterceptor {&#xA;  @Override&#xA;  public Element beforeEdiMap(Map inParams) {&#xA;    LOGGER.setLevel(Level.INFO);&#xA;    LOGGER.info(&quot;MatsonAncActivityExtractInterceptor, Started beforeEdiMap Method.&quot;);&#xA;    if (inParams == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor inParams is null.&quot;);&#xA;      return null;&#xA;    }&#xA;    Element xmlTransaction = (Element) inParams.get(&quot;XML_TRANSACTION&quot;);&#xA;    Event event = (Event) inParams.get(&quot;ENTITY&quot;);&#xA;    if (xmlTransaction == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor, xmlTransaction element is null.&quot;);&#xA;      return null;&#xA;    }&#xA;    if (event == null) {&#xA;      LOGGER.error(&quot;MatsonAncActivityExtractInterceptor, event entity is null.&quot;);&#xA;      return null;&#xA;    }&#xA;&#xA;    Unit unit = Unit.hydrate(event.getEventAppliedToGkey());&#xA;    if (Unit == null) {&#xA;      LOGGER.error(&#xA;              &quot;MatsonAncActivityExtractInterceptor, Unit not found for gkey&quot; + event.getEventAppliedToGkey());&#xA;      return null;&#xA;    }&#xA;    Element tranElement = changePOL(inParams, unit);&#xA;    LOGGER.info(&quot;MatsonAncActivityExtractInterceptor, completed beforeEdiMap Method.&quot;);&#xA;    return tranElement;&#xA;  }&#xA;  private Logger LOGGER = Logger.getLogger(MatsonAncActivityExtractInterceptor.class);&#xA;&#xA;  private Element changePOL(Map inParams, Unit inUnit) {&#xA;    Routing routing = inUnit.getUnitRouting();&#xA;    Element xmlTransaction = (Element) inParams.get(&quot;XML_TRANSACTION&quot;);&#xA;    if (xmlTransaction == null || routing == null || routing.getRtgPOL() == null) {&#xA;      return null;&#xA;    }&#xA;    String unLocId = routing.getRtgPOL().getPointUnlocId();&#xA;    if (unLocId == null) {&#xA;      return null;&#xA;    }&#xA;    Element containerElement = xmlTransaction.getChild(&quot;ediContainer&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;    if (containerElement != null) {&#xA;      Element originalLoadPortElement = containerElement.getChild(&quot;loadPort&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;      if (originalLoadPortElement != null) {&#xA;        Element portCodesElement = originalLoadPortElement.getChild(&quot;portCodes&quot;, XmlUtil.ARGO_NAMESPACE);&#xA;        if (portCodesElement != null) {&#xA;          portCodesElement.setAttribute(&quot;unLocCode&quot;, unLocId, XmlUtil.ARGO_NAMESPACE);&#xA;          return xmlTransaction;&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}" />
<extension name="MATCloneUnitForNextFacility" scope="MATSON" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="N" contents="package workshop&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;&#xA;/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;import com.navis.argo.business.atoms.CarrierVisitPhaseEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.inventory.business.api.RectifyParms&#xA;import com.navis.inventory.business.api.UnitManager&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.inventory.business.imdg.HazardItem&#xA;import com.navis.inventory.business.imdg.HazardItemPlacard&#xA;import com.navis.inventory.business.imdg.Hazards&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.Routing&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;import com.navis.inventory.business.units.ReeferRqmnts&#xA;&#xA;/**&#xA; *&#xA; *  Create a second unit for a unit moving from one facility to another on the ship&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 09/15/15&#xA; * JIRA: CSDV-3123&#xA; * SFDC: 143603&#xA; *&#xA; * --------------------------------------------------------------------------------------------------------------------------------&#xA; * Date       Author        Description&#xA; * --------------------------------------------------------------------------------------------------------------------------------&#xA; * 10/01/2016 Murali R      Handled the NEP and coding standard correction.&#xA; * 10/06/2015 Imran Ahmad   To handle category computation for the new Unit&#xA; * 10/14/2015 Bruno Chiarini Changed ufvFlexString used to flag cloned units from 05 to 02&#xA; * 10/16/2015 Bruno Chiarini Added null check of reefer requirements prior to copying them&#xA; * --------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;&#xA;public class MATCloneUnitForNextFacility extends AbstractGeneralNoticeCodeExtension&#xA;&#xA;{&#xA;  public void execute(GroovyEvent inEvent)&#xA;&#xA;  {&#xA;    this.log(&quot;Execution Started MATCloneUnitForNextFacility&quot;);&#xA;&#xA;    /* get the event */&#xA;&#xA;    Event thisEvent = inEvent.getEvent();&#xA;&#xA;    if (thisEvent == null)&#xA;      return;&#xA;&#xA;    /* Get the unit and the Booking */&#xA;&#xA;    Unit thisUnit = (Unit) inEvent.getEntity();&#xA;&#xA;    if (thisUnit == null)&#xA;      return;&#xA;&#xA;    UnitFacilityVisit thisUFV = thisUnit.getUnitActiveUfvNowActive();&#xA;&#xA;    UnitCategoryEnum newCategory = computeUnitCategory(thisUnit.getUnitRouting().getRtgPOD1(), thisUFV.getUfvFacility().getFcyRoutingPoint());&#xA;&#xA;    // exit if there is no category change required&#xA;    if (newCategory.equals(thisUnit.getUnitCategory())){&#xA;      if (UnitCategoryEnum.THROUGH.equals(thisUnit.getUnitCategory())) {&#xA;        return;&#xA;      } else if (UnitCategoryEnum.IMPORT.equals(thisUnit.getUnitCategory())){&#xA;        thisUnit.updateCategory(UnitCategoryEnum.THROUGH);&#xA;      }&#xA;    }&#xA;&#xA;    /* rectify the unit to departed */&#xA;&#xA;    RectifyParms thisRectifyParm = new RectifyParms();&#xA;&#xA;    thisRectifyParm.setEraseHistory(false);&#xA;    thisRectifyParm.setUfvTransitState(UfvTransitStateEnum.S70_DEPARTED);&#xA;    thisRectifyParm.setUnitVisitState(UnitVisitStateEnum.DEPARTED);&#xA;&#xA;    thisUFV.rectify(thisRectifyParm);&#xA;&#xA;    this.log(&quot;Cloning UFV: &quot; + thisUFV);&#xA;&#xA;    HibernateApi.getInstance().flush();&#xA;&#xA;    /* create a new unit for the vessel */&#xA;&#xA;    UnitManager unitMgr = (UnitManager) Roastery.getBean(UnitManager.BEAN_ID);&#xA;&#xA;    UnitFacilityVisit newUfv = unitMgr.findOrCreateStowplanUnit(thisUnit.getUnitPrimaryUe().getUeEquipment(),&#xA;            thisUnit.getUnitRouting().getRtgDeclaredCv(), thisUnit.getUnitLineOperator(), thisUFV.getUfvFacility(), null,&#xA;            thisUnit.getUnitFreightKind(),&#xA;            newCategory);&#xA;&#xA;    Unit newUnit = newUfv.getUfvUnit();&#xA;&#xA;    this.log(&quot;newUnit.getUnitRouting().getRtgDeclaredCv() &quot; + newUnit.getUnitRouting().getRtgDeclaredCv())&#xA;    this.log(&quot;newUfv.getUfvIntendedObCv() &quot; + newUfv.getUfvIntendedObCv())&#xA;&#xA;    newUnit.updateCategory(newCategory);&#xA;    newUnit.updateSeals(thisUnit.getUnitSealNbr1(), thisUnit.getUnitSealNbr2(), thisUnit.getUnitSealNbr3(),&#xA;            thisUnit.getUnitSealNbr4(), thisUnit.getUnitIsCtrSealed());&#xA;    newUnit.updateSpecialStow(thisUnit.getUnitSpecialStow());&#xA;    newUnit.setUnitGoodsAndCtrWtKg(thisUnit.getUnitGoodsAndCtrWtKg());&#xA;&#xA;    CarrierVisit GenTruck = CarrierVisit.getGenericTruckVisit(ContextHelper.getThreadComplex());&#xA;&#xA;    Routing newRouting = newUnit.getUnitRouting();&#xA;&#xA;    if (UnitCategoryEnum.IMPORT.equals(newCategory)){&#xA;      newRouting.setRtgDeclaredCv(GenTruck);&#xA;    } else {&#xA;      newRouting.setRtgDeclaredCv(thisUFV.getUfvActualIbCv());&#xA;    }&#xA;&#xA;    newRouting.setRtgPOL(thisUnit.getUnitRouting().getRtgPOL());&#xA;    newRouting.setRtgCarrierService(thisUnit.getUnitRouting().getRtgCarrierService());&#xA;    newRouting.setRtgPOD1(thisUnit.getUnitRouting().getRtgPOD1());&#xA;    newRouting.setRtgGroup(thisUnit.getUnitRouting().getRtgGroup());&#xA;&#xA;    newUnit.setUnitRouting(newRouting);&#xA;&#xA;    GoodsBase NewGoodsBase = newUnit.getUnitGoods();&#xA;&#xA;    GoodsBase ThisGoodsBase = thisUnit.getUnitGoods();&#xA;&#xA;    NewGoodsBase.setCommodity(ThisGoodsBase.getGdsCommodity());&#xA;    NewGoodsBase.setOrigin(ThisGoodsBase.getGdsOrigin());&#xA;    NewGoodsBase.setDestination(ThisGoodsBase.getGdsDestination());&#xA;    NewGoodsBase.setGdsBlNbr(ThisGoodsBase.getGdsBlNbr());&#xA;    NewGoodsBase.setGdsConsigneeBzu(ThisGoodsBase.getGdsConsigneeBzu());&#xA;    NewGoodsBase.setGdsShipperBzu(ThisGoodsBase.getGdsShipperBzu());&#xA;&#xA;    if (ThisGoodsBase.getGdsHazards() != null) {&#xA;      NewGoodsBase.attachHazards(this.copyhazards(ThisGoodsBase.getGdsHazards()))&#xA;    }&#xA;&#xA;    if (thisUnit.getUnitRequiresPower()) {&#xA;      ReeferRqmnts thisGoodsBaseReeferReqs = ThisGoodsBase.getGdsReeferRqmnts();&#xA;      if (thisGoodsBaseReeferReqs != null) {&#xA;        NewGoodsBase.setGdsReeferRqmnts(thisGoodsBaseReeferReqs.makeCopy());&#xA;      }&#xA;      newUnit.updateRequiresPower(true);&#xA;    }&#xA;&#xA;    newUnit.updateOog(thisUnit.getUnitOogBackCm(), thisUnit.getUnitOogFrontCm(), thisUnit.getUnitOogLeftCm(), thisUnit.getUnitOogRightCm(), thisUnit.getUnitOogTopCm());&#xA;&#xA;    HibernateApi.getInstance().flush();&#xA;&#xA;    this.log(&quot;thisUnit.getUnitRouting().getRtgDeclaredCv() &quot; + thisUnit.getUnitRouting().getRtgDeclaredCv())&#xA;    this.log(&quot;newUfv.getUfvActualIbCv() &quot; + newUfv.getUfvActualIbCv())&#xA;&#xA;    VesselVisitDetails newIbVisit = VesselVisitDetails.resolveVvdFromCv(newUfv.getUfvActualIbCv());&#xA;&#xA;    CarrierVisitPhaseEnum newIbVVPhase = null;&#xA;    if (newIbVisit != null) {&#xA;      newIbVVPhase = newIbVisit.getVvdVisitPhase()&#xA;    }&#xA;&#xA;    if (CarrierVisitPhaseEnum.CREATED.equals(newIbVVPhase)) {&#xA;      if (newUfv.getUfvVisitState() != UnitVisitStateEnum.ADVISED)&#xA;        newUfv.setUfvVisitState(UnitVisitStateEnum.ADVISED);&#xA;&#xA;      if (newUfv.getUfvTransitState() != UfvTransitStateEnum.S10_ADVISED)&#xA;        newUfv.setUfvTransitState(UfvTransitStateEnum.S10_ADVISED);&#xA;&#xA;      if (newUnit.getUnitVisitState() != UnitVisitStateEnum.ADVISED)&#xA;        newUnit.updateUnitVisitState(UnitVisitStateEnum.ADVISED);&#xA;    } else {&#xA;      if (newUfv.getUfvVisitState() != UnitVisitStateEnum.ACTIVE)&#xA;        newUfv.setUfvVisitState(UnitVisitStateEnum.ACTIVE);&#xA;&#xA;      if (newUfv.getUfvTransitState() != UfvTransitStateEnum.S20_INBOUND)&#xA;        newUfv.setUfvTransitState(UfvTransitStateEnum.S20_INBOUND);&#xA;&#xA;      if (newUnit.getUnitVisitState() != UnitVisitStateEnum.ACTIVE)&#xA;        newUnit.updateUnitVisitState(UnitVisitStateEnum.ACTIVE);&#xA;&#xA;      newUfv.setUfvVisibleInSparcs(true);&#xA;    }&#xA;&#xA;    newUfv.updateArrivePosition(thisUFV.getUfvArrivePosition());&#xA;    newUfv.setUfvLastKnownPosition(thisUFV.getUfvArrivePosition());&#xA;&#xA;    if (UnitCategoryEnum.IMPORT.equals(newCategory)){&#xA;      newUfv.setUfvIntendedObCv(GenTruck);&#xA;      newUfv.setUfvActualObCv(GenTruck);&#xA;      newUfv.setUfvActualIbCv(thisUFV.getUfvActualIbCv());&#xA;    } else {&#xA;      newUfv.setUfvIntendedObCv(thisUFV.getUfvActualIbCv());&#xA;      newUfv.setUfvActualObCv(thisUFV.getUfvActualIbCv());&#xA;      newUfv.setUfvActualIbCv(thisUFV.getUfvActualIbCv());&#xA;    }&#xA;&#xA;    newUfv.setUfvFlexString01(thisUFV.getUfvFlexString01());&#xA;    newUfv.setUfvFlexString05(thisUFV.getUfvFlexString05());&#xA;    newUfv.setUfvFlexString03(thisUFV.getUfvFlexString03());&#xA;    newUfv.setUfvFlexString04(thisUFV.getUfvFlexString04());&#xA;    newUfv.setUfvFlexString02(&quot;CLONED&quot;);&#xA;    newUfv.setUfvFlexString06(thisUFV.getUfvFlexString06());&#xA;    newUfv.setUfvFlexString07(thisUFV.getUfvFlexString07());&#xA;    newUfv.setUfvFlexString08(thisUFV.getUfvFlexString08());&#xA;    newUfv.setUfvFlexString09(thisUFV.getUfvFlexString09());&#xA;    newUfv.setUfvFlexString10(thisUFV.getUfvFlexString10());&#xA;    newUfv.setUfvStowFactor(thisUFV.getUfvStowFactor());&#xA;&#xA;    newUnit.updateDenormalizedFields(false);&#xA;    newUnit.setUnitActiveUfv(newUfv);&#xA;&#xA;    thisUnit.deleteUfv(thisUFV);&#xA;  }&#xA;&#xA;  Hazards copyhazards(Hazards inHazards) {&#xA;&#xA;    /* Copy the hazards from the old unit onto the new unit */&#xA;&#xA;    Hazards hazards = Hazards.createHazardsEntity();&#xA;&#xA;    for (Iterator&lt;HazardItem&gt; itr = inHazards.getHazardItemsIterator(); itr.hasNext();) {&#xA;      HazardItem tranHazardItem = itr.next();&#xA;      HazardItem clonedItem = HazardItem.createHazardItemEntity(hazards,&#xA;              tranHazardItem.getHzrdiImdgClass(), tranHazardItem.getHzrdiUNnum());&#xA;&#xA;      clonedItem.setHzrdiNbrType(tranHazardItem.getHzrdiNbrType());&#xA;      clonedItem.setHzrdiLtdQty(tranHazardItem.getHzrdiLtdQty());&#xA;      clonedItem.setHzrdiPackageType(tranHazardItem.getHzrdiPackageType());&#xA;      clonedItem.setHzrdiInhalationZone(tranHazardItem.getHzrdiInhalationZone());&#xA;      clonedItem.setHzrdiImdgCode(tranHazardItem.getHzrdiImdgCode());&#xA;      clonedItem.setHzrdiExplosiveClass(tranHazardItem.getHzrdiExplosiveClass());&#xA;      clonedItem.setHzrdiPageNumber(tranHazardItem.getHzrdiPageNumber());&#xA;      clonedItem.setHzrdiFlashPoint(tranHazardItem.getHzrdiFlashPoint());&#xA;      clonedItem.setHzrdiTechName(tranHazardItem.getHzrdiTechName());&#xA;      clonedItem.setHzrdiProperName(tranHazardItem.getHzrdiProperName());&#xA;      clonedItem.setHzrdiEMSNumber(tranHazardItem.getHzrdiEMSNumber());&#xA;      clonedItem.setHzrdiERGNumber(tranHazardItem.getHzrdiERGNumber());&#xA;      clonedItem.setHzrdiMFAG(tranHazardItem.getHzrdiMFAG());&#xA;      clonedItem.setHzrdiPackingGroup(tranHazardItem.getHzrdiPackingGroup());&#xA;      clonedItem.setHzrdiHazIdUpper(tranHazardItem.getHzrdiHazIdUpper());&#xA;      clonedItem.setHzrdiSubstanceLower(tranHazardItem.getHzrdiSubstanceLower());&#xA;      clonedItem.setHzrdiWeight(tranHazardItem.getHzrdiWeight());&#xA;      clonedItem.setHzrdiPlannerRef(tranHazardItem.getHzrdiPlannerRef());&#xA;      clonedItem.setHzrdiQuantity(tranHazardItem.getHzrdiQuantity());&#xA;      clonedItem.setHzrdiMoveMethod(tranHazardItem.getHzrdiMoveMethod());&#xA;      clonedItem.setHzrdiSecondaryIMO1(tranHazardItem.getHzrdiSecondaryIMO1());&#xA;      clonedItem.setHzrdiSecondaryIMO2(tranHazardItem.getHzrdiSecondaryIMO2());&#xA;      clonedItem.setHzrdiDeckRestrictions(tranHazardItem.getHzrdiDeckRestrictions());&#xA;      clonedItem.setHzrdiMarinePollutants(tranHazardItem.getHzrdiMarinePollutants());&#xA;      clonedItem.setHzrdiDcLgRef(tranHazardItem.getHzrdiDcLgRef());&#xA;      clonedItem.setHzrdiEmergencyTelephone(tranHazardItem.getHzrdiEmergencyTelephone());&#xA;      clonedItem.setHzrdiNotes(tranHazardItem.getHzrdiNotes());&#xA;      clonedItem.setHzrdiFireCode(tranHazardItem.getHzrdiFireCode());&#xA;      clonedItem.setHzrdiSeq(tranHazardItem.getHzrdiSeq());&#xA;      clonedItem.setHzrdiImdgClass(tranHazardItem.getHzrdiImdgClass());&#xA;&#xA;      Roastery.getHibernateApi().save(clonedItem);&#xA;&#xA;      if (tranHazardItem.getHzrdiPlacardSet() != null) {&#xA;        Set&lt;HazardItemPlacard&gt; clonedPlacardSet = new LinkedHashSet&lt;HazardItemPlacard&gt;();&#xA;        clonedItem.setHzrdiPlacardSet(clonedPlacardSet);&#xA;        for (HazardItemPlacard tranHazardItemPlacard : (Set&lt;HazardItemPlacard&gt;) tranHazardItem.getHzrdiPlacardSet()) {&#xA;          HazardItemPlacard clonedPlacard = HazardItemPlacard.createHazardItemPlacardEntity(clonedItem);&#xA;          clonedPlacard.setHzrdipPlacard(tranHazardItemPlacard.getHzrdipPlacard());&#xA;          clonedPlacard.setHzrdipDescription(tranHazardItemPlacard.getHzrdipDescription());&#xA;          clonedPlacardSet.add(clonedPlacard);&#xA;        }&#xA;      }&#xA;    }&#xA;    return (hazards);&#xA;  }&#xA;&#xA;  // compute the category for the next Unit, based on the current category of the Unit&#xA;  private UnitCategoryEnum computeUnitCategory(RoutingPoint inUnitPod, RoutingPoint inFacilityRouting) {&#xA;    if (inUnitPod == null || inFacilityRouting == null) {&#xA;      return;&#xA;    }&#xA;    if (inUnitPod.equals(inFacilityRouting)) {&#xA;      return UnitCategoryEnum.IMPORT;&#xA;    } else {&#xA;      return UnitCategoryEnum.THROUGH;&#xA;    }&#xA;  }&#xA;}&#xA;" />
<extension name="MATdischargeAndDepartBargeUnits" scope="MATSON/ALASKA" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.atoms.CarrierVisitPhaseEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.atoms.ScopeEnum&#xA;import com.navis.argo.business.atoms.WiMoveKindEnum&#xA;import com.navis.argo.business.model.*&#xA;import com.navis.argo.portal.context.ArgoUserContextProvider&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.persistence.hibernate.CarinaPersistenceCallback&#xA;import com.navis.framework.persistence.hibernate.PersistenceTemplate&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.context.IUserContextProvider&#xA;import com.navis.framework.portal.context.PortalApplicationContext&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.util.TransactionParms&#xA;import com.navis.framework.util.message.MessageCollector&#xA;import com.navis.framework.util.scope.ScopeCoordinates&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.api.UnitManager&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.inventory.business.units.MoveInfoBean&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;import org.apache.log4j.Logger&#xA;&#xA;/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;/**&#xA; * Created by ahmadim on 9/17/2015.&#xA; * Jira: CSDV-3252&#xA; *&#xA; * This groovy to be installed as a code Extension of type GENERAL_NOTICES_CODE_EXTENSION&#xA; *&#xA; * Create a General Notice based on a new Vessel Visit custom event. For example DISCHARGE AND DEPART UNITS. Define it as &quot;Notifiable&quot;.&#xA; *&#xA; * Purpose: To automatically Discharge and Gate out the containers at the non-operational Facility like Akutan, which is the Barge destination&#xA; * This event to be logged on the Barge Vessel Visit whose Facility is the non-operational facility (e.g. AKU), once it is departed from the origin&#xA; * Facility e.g. Dutch Harbor.&#xA; *&#xA; * Event to be logged manually. This will trigger this groovy which will discharge and gate out all containers at the non-operational facility.&#xA; */&#xA;class MATdischargeAndDepartBargeUnits extends AbstractGeneralNoticeCodeExtension {&#xA;  public void execute(GroovyEvent inEvent) {&#xA;    Event event = inEvent.getEvent();&#xA;&#xA;    if (event == null) {&#xA;      return&#xA;    };&#xA;&#xA;    /* Get the unit and the Booking */&#xA;&#xA;    VesselVisitDetails vesselVisitDetails = (VesselVisitDetails) inEvent.getEntity();&#xA;&#xA;    if (vesselVisitDetails == null) {&#xA;      return;&#xA;    }&#xA;&#xA;    final CarrierVisit cv = ((VisitDetails) vesselVisitDetails).getInboundCv();&#xA;&#xA;    if (cv == null) {&#xA;      return;&#xA;    }&#xA;&#xA;    LOGGER.warn(&quot;Starting MATdischargeAndDepartBargeUnits&quot;);&#xA;    UnitFinder unitFinder = (UnitFinder) Roastery.getBean(UnitFinder.BEAN_ID);&#xA;    final Serializable[] onBoardKeys = findArrivingUfvsByIbCarrier(cv);&#xA;    final UserContext userContext = ContextHelper.getThreadUserContext();&#xA;    final UserContext uc = getNewUserContext(cv.getCvFacility());&#xA;&#xA;    LOGGER.warn(&quot;Onboard gkeys &quot; + onBoardKeys);&#xA;&#xA;    PersistenceTemplate template = new PersistenceTemplate(uc);&#xA;    MessageCollector mc = template.invoke(new CarinaPersistenceCallback() {&#xA;      @Override&#xA;      protected void doInTransaction() {&#xA;        try {&#xA;          TransactionParms.getBoundParms().setUserContext(uc);&#xA;          if (onBoardKeys != null &amp;&amp; onBoardKeys.size() &gt; 0) {&#xA;            for (Serializable ufvGkey : onBoardKeys) {&#xA;              UnitFacilityVisit ufv = (UnitFacilityVisit) _hibernateApi.load(UnitFacilityVisit.class, ufvGkey);&#xA;              if (ufv != null) {&#xA;                MoveInfoBean mib = createDefaultMoveInfoBean(WiMoveKindEnum.VeslDisch, ArgoUtils.timeNow(), cv.getCvFacility());&#xA;                ufv.setFieldValue(InventoryField.UFV_ACTUAL_IB_CV, cv);&#xA;                _unitManager.dischargeUnitFromInboundVisit(ufv, cv.getCvCvd(), mib, null, null);&#xA;//                _hibernateApi.flush();&#xA;//                departUnitOnTruck(ufv, cv.getCvFacility());&#xA;              }&#xA;            }&#xA;          }&#xA;          Thread.sleep(60000);&#xA;          if (onBoardKeys != null &amp;&amp; onBoardKeys.size() &gt; 0) {&#xA;            for (Serializable ufvGkey : onBoardKeys) {&#xA;              UnitFacilityVisit ufv = (UnitFacilityVisit) _hibernateApi.load(UnitFacilityVisit.class, ufvGkey);&#xA;              if (ufv != null) {&#xA;                departUnitOnTruck(ufv, cv.getCvFacility());&#xA;              }&#xA;            }&#xA;          }&#xA;        }&#xA;        finally {&#xA;          TransactionParms.getBoundParms().setUserContext(userContext);&#xA;        }&#xA;      }&#xA;    });&#xA;&#xA;    if (mc.hasError()) {&#xA;      ArgoUtils.appendMessagesToCollector(mc.getMessages());&#xA;    }&#xA;  }&#xA;&#xA;  private void departUnitOnTruck(UnitFacilityVisit inUfv, Facility inFacility) {&#xA;//    CarrierVisit cv = CarrierVisit.getGenericTruckVisit(ContextHelper.getThreadComplex());&#xA;    CarrierVisit cv = CarrierVisit.findCarrierVisit(inFacility, LocTypeEnum.TRUCK, 'XXX');&#xA;    cv.safelyUpdateVisitPhase(CarrierVisitPhaseEnum.ARRIVED);&#xA;    LocPosition pos = LocPosition.createTruckPosition(cv, null, null);&#xA;    Unit unit = inUfv.getUfvUnit();&#xA;    unit.move(pos);&#xA;    unit.deliverOutOfFacility(inFacility);&#xA;  }&#xA;&#xA;  private UserContext getNewUserContext(Facility inFacility) {&#xA;    ScopeCoordinates scopeCoordinates = _scoper.getScopeCoordinates(ScopeEnum.YARD, inFacility.getActiveYard().getYrdGkey());&#xA;    UserContext uc = ContextHelper.getThreadUserContext();&#xA;    UserContext newUserContext = _contextProvider.createUserContext(uc.getUserKey(), uc.getUserId(), scopeCoordinates);&#xA;    //set security session id for the user&#xA;    newUserContext.setSecuritySessionId(uc.getSecuritySessionId());&#xA;    return newUserContext;&#xA;  }&#xA;&#xA;  private static MoveInfoBean createDefaultMoveInfoBean(WiMoveKindEnum inMoveKind, Date inMoveTime, Facility inFacility) {&#xA;    Serializable yrdGkey;&#xA;    if (inFacility != null) {&#xA;      for (Yard yard : (Set&lt;Yard&gt;) inFacility.getFcyYrdSet()) {&#xA;        yrdGkey = yard.getYrdGkey();&#xA;        break;&#xA;      }&#xA;    }&#xA;&#xA;    MoveInfoBean mib = new MoveInfoBean(yrdGkey);&#xA;    mib.setMoveKind(inMoveKind);&#xA;    mib.setTimePut(inMoveTime);&#xA;&#xA;    if (WiMoveKindEnum.VeslDisch.equals(inMoveKind)&#xA;            || WiMoveKindEnum.RailDisch.equals(inMoveKind)&#xA;            || WiMoveKindEnum.Receival.equals(inMoveKind)) {&#xA;      mib.setTimeDischarge(inMoveTime);&#xA;    }&#xA;&#xA;    return mib;&#xA;  }&#xA;&#xA;  // This method returns a list of UFV gkeys that are on board the barge and are to be discharged at this Facility.&#xA;  private Serializable[] findArrivingUfvsByIbCarrier(CarrierVisit inIbCarrier) {&#xA;    if (inIbCarrier == null || inIbCarrier.getCvFacility() == null) {&#xA;      return null;&#xA;    }&#xA;    Object[] states = new Object[2];&#xA;    states[0] = UfvTransitStateEnum.S10_ADVISED;&#xA;    states[1] = UfvTransitStateEnum.S20_INBOUND;&#xA;&#xA;    DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT_FACILITY_VISIT)&#xA;            .addDqPredicate(PredicateFactory.eq(UnitField.UFV_FACILITY, inIbCarrier.getCvFacility().getFcyGkey()))&#xA;            .addDqPredicate(PredicateFactory.eq(UnitField.UFV_POS_LOC_GKEY, inIbCarrier.getCvGkey()))&#xA;            .addDqPredicate(PredicateFactory.eq(UnitField.UFV_POS_LOC_TYPE, LocTypeEnum.VESSEL))&#xA;            .addDqPredicate(PredicateFactory.ne(UnitField.UFV_VISIT_STATE, UnitVisitStateEnum.RETIRED))&#xA;            .addDqPredicate(PredicateFactory.eq(UnitField.UFV_POD, inIbCarrier.getCvFacility().getFcyRoutingPoint().getPointGkey()))&#xA;            .addDqPredicate(PredicateFactory.in(UnitField.UFV_TRANSIT_STATE, states));&#xA;&#xA;    dq.setScopingEnabled(false);&#xA;    return _hibernateApi.findPrimaryKeysByDomainQuery(dq);&#xA;  }&#xA;&#xA;  private final HibernateApi _hibernateApi = Roastery.getHibernateApi();&#xA;  private final _unitManager = (UnitManager) Roastery.getBean(UnitManager.BEAN_ID);&#xA;  private N4EntityScoper _scoper = (N4EntityScoper) Roastery.getBeanFactory().getBean(N4EntityScoper.BEAN_ID);&#xA;  private ArgoUserContextProvider _contextProvider = (ArgoUserContextProvider) PortalApplicationContext.getBean(IUserContextProvider.BEAN_ID);&#xA;  private static Logger LOGGER = Logger.getLogger(MATdischargeAndDepartBargeUnits.class);&#xA;}&#xA;" />
<extension name="MatsonAncSetEmptyTranNotes" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xD;&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xD;&#xA; *&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;package com.navis.road.business.adaptor.document&#xD;&#xA;&#xD;&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xD;&#xA;import com.navis.external.road.EGateTaskInterceptor&#xD;&#xA;import com.navis.road.business.model.TruckTransaction&#xD;&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xD;&#xA;import org.apache.log4j.Level&#xD;&#xA;import org.apache.log4j.Logger&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; Unit notes is being copied to gate notes. To supress this set empty tran notes if user didn't enter value for tran notes.&#xD;&#xA; *&#xD;&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 10/08/2015&#xD;&#xA; *&#xD;&#xA; * Date: 10/08/2015: 5:41 PM&#xD;&#xA; * JIRA: CSDV-3024&#xD;&#xA; * SFDC: 00138337&#xD;&#xA; * Called from: Gate Configuration&#xD;&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xD;&#xA; * Revision History&#xD;&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xD;&#xA; */&#xD;&#xA;class MatsonAncSetEmptyTranNotes extends AbstractGateTaskInterceptor implements EGateTaskInterceptor {&#xD;&#xA;&#xD;&#xA;  public void execute(TransactionAndVisitHolder inOutDao) {&#xD;&#xA;    LOGGER.setLevel(Level.INFO);&#xD;&#xA;    LOGGER.info(&quot; MatsonAncSetEmptyTranNotes execute Stared.&quot;);&#xD;&#xA;    TruckTransaction tran = inOutDao.getTran();&#xD;&#xA;    if (tran.getTranNotes() == null) {&#xD;&#xA;      tran.setTranNotes(&quot;&quot;);&#xD;&#xA;    }&#xD;&#xA;    LOGGER.info(&quot; MatsonAncSetEmptyTranNotes execute Completed.&quot;);&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  private Logger LOGGER = Logger.getLogger(MatsonAncSetEmptyTranNotes.class);&#xD;&#xA;}" />
<extension name="MatsonAncVesselDischGNHandler" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="/*&#xD;&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xD;&#xA; *&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;package com.navis.road.business.adaptor.document&#xD;&#xA;&#xD;&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xD;&#xA;import com.navis.services.business.event.GroovyEvent&#xD;&#xA;import org.apache.log4j.Level&#xD;&#xA;import org.apache.log4j.Logger&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * Upon discharging APL empty containers from vessel, deliver those conatiners thru gate.&#xD;&#xA; *&#xD;&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 10/07/2015&#xD;&#xA; *&#xD;&#xA; * Date: 10/07/2015: 5:41 PM&#xD;&#xA; * JIRA: CSDV-3298&#xD;&#xA; * SFDC: 00145302&#xD;&#xA; * Called from: General Notices&#xD;&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xD;&#xA; * Revision History&#xD;&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xD;&#xA; */&#xD;&#xA;class MatsonAncVesselDischGNHandler extends AbstractGeneralNoticeCodeExtension {&#xD;&#xA;  @Override&#xD;&#xA;  public void execute(GroovyEvent inGroovyEvent) {&#xD;&#xA;    LOGGER.setLevel(Level.INFO);&#xD;&#xA;    LOGGER.info(&quot; MatsonAncVesselDischGNHandler execute Stared.&quot;);&#xD;&#xA;    if (inGroovyEvent == null) {&#xD;&#xA;      LOGGER.error(&quot; MatsonAncVesselDischGNHandler, Object inGroovyEvent is null.&quot;);&#xD;&#xA;      return;&#xD;&#xA;    }&#xD;&#xA;    def matsonAncVesselDischLibrary = getLibrary(&quot;MatsonAncVesselDischLibrary&quot;);&#xD;&#xA;    if (matsonAncVesselDischLibrary == null) {&#xD;&#xA;      LOGGER.error(&quot; MatsonAncVesselDischGNHandler, Couldn't find the groovy MatsonAncVesselDischLibrary.&quot;);&#xD;&#xA;      return;&#xD;&#xA;    }&#xD;&#xA;    LOGGER.info(&quot;MatsonAncVesselDischGNHandler about to execute MatsonAncVesselDischGNHandler&quot;);&#xD;&#xA;    matsonAncVesselDischLibrary.execute(inGroovyEvent);&#xD;&#xA;    LOGGER.info(&quot; MatsonAncVesselDischGNHandler execute completed.&quot;);&#xD;&#xA;  }&#xD;&#xA;  private Logger LOGGER = Logger.getLogger(MatsonAncVesselDischGNHandler.class);&#xD;&#xA;}" />
<extension name="MATGvy301ConsolidateBookingItem" scope="MATSON/ALASKA" type="EDI_POST_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="import com.navis.argo.*&#xA;import com.navis.argo.BookingTransactionDocument.BookingTransaction&#xA;import com.navis.argo.BookingTransactionsDocument.BookingTransactions&#xA;import com.navis.argo.BookingTransactionDocument.BookingTransaction.EdiBookingItem&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.api.VesselVisitFinder&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.model.Complex&#xA;import com.navis.argo.business.model.Facility&#xA;import com.navis.argo.business.reference.CarrierItinerary&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.external.edi.entity.AbstractEdiPostInterceptor&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernatingEntity&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.orders.OrdersPropertyKeys&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import org.apache.log4j.Logger&#xA;import org.apache.xmlbeans.XmlObject&#xA;&#xA;&#xA;public class MATGvy301ConsolidateBookingItem extends AbstractEdiPostInterceptor {&#xA;    UserContext context = ContextHelper.getThreadUserContext();&#xA;    Date timeNow = ArgoUtils.convertDateToLocalDateTime(ArgoUtils.timeNow(), context.getTimeZone());&#xA;&#xA;    @Override&#xA;    public void beforeEdiPost(Serializable inSessionGkey, XmlObject inXmlObject) throws BizViolation {&#xA;        LOGGER.warn(&quot;in MATGvy301ConsolidateBookingItem Started&quot; + timeNow);&#xA;&#xA;        if (inXmlObject == null) {&#xA;            LOGGER.warn(&quot;Input XML Object is null&quot;);&#xA;            throw BizFailure.create(OrdersPropertyKeys.ERRKEY__NULL_XMLBEAN, null);&#xA;        }&#xA;        if (!BookingTransactionsDocument.class.isAssignableFrom(inXmlObject.getClass())) {&#xA;            throw BizFailure.create(OrdersPropertyKeys.ERRKEY__TYPE_MISMATCH_XMLBEAN, null, inXmlObject.getClass().getName());&#xA;        }&#xA;        BookingTransactionsDocument bkgDocument = (BookingTransactionsDocument) inXmlObject;&#xA;        final BookingTransactions bkgtrans = bkgDocument.getBookingTransactions();&#xA;        final BookingTransaction[] bkgtransArray = bkgtrans.getBookingTransactionArray();&#xA;        if (bkgtransArray.length != 1) {&#xA;            throw BizFailure.create(OrdersPropertyKeys.ERRKEY__XML_TRANSACTION_DOCUMENT_LENGTH_EXCEED, null, String.valueOf(bkgtransArray.length));&#xA;        }&#xA;        BookingTransaction bkgTrans = bkgtransArray[0];&#xA;        try {&#xA;            EdiOperator ediOp = bkgTrans.getLineOperator();&#xA;           &#xA;           this.checkBookingItems(bkgTrans);&#xA;           &#xA;&#xA;        } catch (Exception e) {&#xA;            LOGGER.warn(&quot;Error while processing before edi post:&quot;+e);&#xA;        }&#xA;        LOGGER.warn(&quot;in MATGvy301ConsolidateBookingItem Ended&quot; + timeNow);&#xA;    }&#xA;&#xA;public void checkBookingItems(BookingTransaction inBkgTran)  throws BizViolation{&#xA;  List&lt;BookingTransactionDocument.BookingTransaction.EdiBookingItem&gt; bkgItems =  inBkgTran.getEdiBookingItemList();&#xA;LOGGER.warn(&quot;Bookings Items Size::&quot;+bkgItems.size());&#xA; HashMap&lt;String,Integer&gt; uniqueItemMap = new HashMap();&#xA;  for (EdiBookingItem bkgItem : bkgItems){&#xA;       String isoCode = bkgItem.getISOcode();&#xA;       int newQuantity = Integer.parseInt(bkgItem.getQuantity());&#xA;       int  quantity = uniqueItemMap.get(isoCode) == null?0:uniqueItemMap.get(isoCode);&#xA;        int finalQuantity = newQuantity+quantity;&#xA;       uniqueItemMap.put(isoCode,finalQuantity);&#xA;&#xA;}&#xA;LOGGER.warn(&quot;Unique Items Map ::::&quot;+uniqueItemMap);&#xA;&#xA; for (EdiBookingItem bkgItem : bkgItems){&#xA;int finalQty = uniqueItemMap.get(bkgItem.getISOcode());&#xA;if(finalQty!=null || finalQty==0){&#xA;bkgItem.setQuantity(String.valueOf(finalQty));&#xA;}&#xA;}&#xA;}&#xA;    @Override&#xA;    public void afterEdiPost(XmlObject inXmlObject, HibernatingEntity inHibernatingEntity, Map inParams) throws BizViolation {&#xA;        LOGGER.warn(&quot;in MATGvy301ConsolidateBookingItem after EDI Post Started&quot;);&#xA;    }&#xA;&#xA;   &#xA;    private static final Logger LOGGER = Logger.getLogger(MATGvy301ConsolidateBookingItem.class);&#xA;}" />
<extension name="MatsonAncUnitEquipmentInterceptor1" scope="MATSON/ALASKA" type="ENTITY_LIFECYCLE_INTERCEPTION" language="GROOVY" is-enabled="N" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.external.framework.entity.AbstractEntityLifecycleInterceptor&#xA;import com.navis.external.framework.entity.EEntityView&#xA;import com.navis.external.framework.util.EFieldChanges&#xA;import com.navis.external.framework.util.EFieldChangesView&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.units.EqBaseOrderItem&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; Whenever the booking number of a unit is updated, the value of the booking unit gets copied to the bill of lading (BL) number of the unit.&#xA; This includes the cases when booking number is set to null, or from null to a value.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 10/21/2015&#xA; *&#xA; * Date: 10/21/2015: 5:41 PM&#xA; * JIRA: CSDV-3307&#xA; * SFDC: 00146342&#xA; * Called from: Entity Life Cycle Interceptor for UnitEquipment entity. &#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;class MatsonAncUnitEquipmentInterceptor1 extends AbstractEntityLifecycleInterceptor {&#xA;  @Override&#xA;  public void onCreate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges) {&#xA;    LOGGER.setLevel(Level.INFO);&#xA;    LOGGER.info(&quot; MatsonAncUnitEquipmentInterceptor invoked onCreate Method.&quot;);&#xA;&#x9;LOGGER.warn(&quot;BL NUMBER DISAPPEARED : MatsonAncUnitEquipmentInterceptor onCreate&quot;);&#xA;&#x9;println(&quot;BL NUMBER DISAPPEARED : MatsonAncUnitEquipmentInterceptor onCreate&quot;);&#xA;    if (inOriginalFieldChanges.hasFieldChange(InventoryField.UE_DEPARTURE_ORDER_ITEM)) {&#xA;&#x9;LOGGER.warn(&quot;BL NUMBER DISAPPEARED : MatsonAncUnitEquipmentInterceptor UE_DEPARTURE_ORDER_ITEM&quot;);&#xA;      copyBkgNbrToBLNbr(inEntity, inOriginalFieldChanges, inMoreFieldChanges);&#xA;      EqBaseOrderItem item = inOriginalFieldChanges.findFieldChange(InventoryField.UE_DEPARTURE_ORDER_ITEM) as EqBaseOrderItem;&#xA;    }&#xA;    LOGGER.info(&quot; MatsonAncUnitEquipmentInterceptor completed onCreate Method.&quot;);&#xA;  }&#xA;&#xA;  @Override&#xA;  public void onUpdate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges) {&#xA;    LOGGER.setLevel(Level.INFO);&#xA;    LOGGER.info(&quot; MatsonAncUnitEquipmentInterceptor invoked onUpdate Method.&quot;);&#xA;&#x9;LOGGER.warn(&quot;BL NUMBER DISAPPEARED : MatsonAncUnitEquipmentInterceptor onUpdate&quot;);&#xA;    copyBkgNbrToBLNbr(inEntity, inOriginalFieldChanges, inMoreFieldChanges);&#xA;    LOGGER.info(&quot; MatsonAncUnitEquipmentInterceptor completed onUpdate Method.&quot;);&#xA;  }&#xA;&#xA;  private void copyBkgNbrToBLNbr(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges) {&#xA;  LOGGER.warn(&quot;BL NUMBER DISAPPEARED : MatsonAncUnitEquipmentInterceptor copyBkgNbrToBLNbr&quot;);&#xA;    def matsonAncUnitEquipmentLibrary = getLibrary(&quot;MatsonAncUnitEquipmentLibrary&quot;);&#xA;    LOGGER.info(&quot;MatsonAncUnitEquipmentInterceptor about to execute MatsonAncUnitEquipmentLibrary&quot;);&#xA;    if (matsonAncUnitEquipmentLibrary == null) {&#xA;      LOGGER.info(&quot;MatsonAncUnitEquipmentInterceptor, couldn't find the library MatsonAncUnitEquipmentLibrary&quot;);&#xA;      return;&#xA;    }&#xA;    Map param = new HashMap();&#xA;    param.put(&quot;ENTITY&quot;, inEntity);&#xA;    param.put(&quot;ORIGINAL_FIELD_CHANGES&quot;, inOriginalFieldChanges);&#xA;    param.put(&quot;MORE_FIELD_CHANGES&quot;, inMoreFieldChanges);&#xA;&#x9;LOGGER.warn(&quot;BL NUMBER DISAPPEARED : MatsonAncUnitEquipmentInterceptor param&quot;+param);&#xA;    matsonAncUnitEquipmentLibrary.execute(param);&#xA;    LOGGER.warn(&quot;MatsonAncUnitEquipmentInterceptor completed calling MatsonAncUnitEquipmentLibrary&quot;);&#xA;  }&#xA;&#xA;  private Logger LOGGER = Logger.getLogger(MatsonAncUnitEquipmentInterceptor.class);&#xA;}" />
<extension name="MatsonAncUnitEquipmentLibrary" scope="MATSON/ALASKA" type="LIBRARY" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.external.framework.AbstractExtensionCallback&#xA;import com.navis.external.framework.entity.EEntityView&#xA;import com.navis.external.framework.util.EFieldChangesView&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.persistence.hibernate.CarinaPersistenceCallback&#xA;import com.navis.framework.persistence.hibernate.PersistenceTemplatePropagationRequired&#xA;import com.navis.framework.util.message.MessageCollector&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.units.EqBaseOrderItem&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; Whenever the booking number of a unit is updated, the value of the booking unit gets copied to the bill of lading (BL) number of the unit.&#xA; This includes the cases when booking number is set to null, or from null to a value.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 10/21/2015&#xA; *&#xA; * Date: 10/21/2015: 5:41 PM&#xA; * JIRA: CSDV-3307&#xA; * SFDC: 00146342&#xA; * Called from: MatsonAncUnitEquipmentInterceptor.&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;class MatsonAncUnitEquipmentLibrary extends AbstractExtensionCallback {&#xA;private Logger LOGGER = Logger.getLogger(MatsonAncUnitEquipmentLibrary.class);&#xA;  public void execute(Map inParam) {&#xA;    LOGGER.setLevel(Level.INFO);&#xA;    LOGGER.info(&quot;BL NUMBER DISAPPEARED : MatsonAncUnitEquipmentLibrary&quot;);&#xA;    EEntityView entity = (EEntityView) inParam.get(&quot;ENTITY&quot;);&#xA;    EFieldChangesView fieldChangesView = (EFieldChangesView) inParam.get(&quot;ORIGINAL_FIELD_CHANGES&quot;);&#xA;    if (fieldChangesView.hasFieldChange(InventoryField.UE_DEPARTURE_ORDER_ITEM)) {&#xA;&#x9;LOGGER.info(&quot;BL NUMBER DISAPPEARED MatsonAncUnitEquipmentLibrary : UE_DEPARTURE_ORDER_ITEM&quot;);&#xA;      EqBaseOrderItem item = fieldChangesView.findFieldChange(InventoryField.UE_DEPARTURE_ORDER_ITEM).getNewValue() as EqBaseOrderItem;&#xA;      Unit unit = entity.getField(InventoryField.UE_UNIT) as Unit;&#xA;      if (unit != null) {&#xA;&#x9;  LOGGER.info(&quot;BL NUMBER DISAPPEARED MatsonAncUnitEquipmentLibrary unit not null&quot;);&#xA;        Serializable gKey = unit.getUnitGoods().getGdsGkey();&#xA;        String bkgNbr = null;&#xA;        if (item != null) {&#xA;&#x9;&#x9;LOGGER.info(&quot;BL NUMBER DISAPPEARED MatsonAncUnitEquipmentLibrary Item not null&quot;);&#xA;          bkgNbr = item.getEqboiOrder().getEqboNbr();&#xA;        }&#xA;&#x9;&#x9;LOGGER.info(&quot;BL NUMBER DISAPPEARED MatsonAncUnitEquipmentLibrary booking number&quot;+bkgNbr);&#xA;        PersistenceTemplatePropagationRequired pt = new PersistenceTemplatePropagationRequired(ContextHelper.getThreadUserContext());&#xA;        MessageCollector collector = pt.invoke(new CarinaPersistenceCallback() {&#xA;          protected void doInTransaction() {&#xA;            GoodsBase goods = (GoodsBase) HibernateApi.getInstance().load(GoodsBase.class, gKey);&#xA;            goods.setFieldValue(InventoryField.GDS_BL_NBR, bkgNbr);&#xA;            HibernateApi.getInstance().update(goods);&#xA;            RoadBizUtil.commit();&#xA;          }&#xA;        });&#xA;      }&#xA;    }&#xA;  }&#xA;}" />
<extension name="MATBargeStowplan" scope="MATSON/ALASKA" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;&#xA;import com.navis.argo.ArgoBizMetafield&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.atoms.ScopeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.model.Facility&#xA;import com.navis.argo.business.model.N4EntityScoper&#xA;import com.navis.argo.business.reference.CarrierItinerary&#xA;import com.navis.argo.business.reference.PointCall&#xA;import com.navis.argo.portal.context.ArgoUserContextProvider&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.hibernate.CarinaPersistenceCallback&#xA;import com.navis.framework.persistence.hibernate.PersistenceTemplate&#xA;import com.navis.framework.portal.FieldChange&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.context.IUserContextProvider&#xA;import com.navis.framework.portal.context.PortalApplicationContext&#xA;import com.navis.framework.util.TransactionParms&#xA;import com.navis.framework.util.message.MessageCollector&#xA;import com.navis.framework.util.scope.ScopeCoordinates&#xA;import com.navis.inventory.business.units.EqBaseOrderItem&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.orders.business.eqorders.EquipmentOrderItem&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.services.business.rules.EventType&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;&#xA;/**&#xA; * Created by ahmadim on 10/1/2015.&#xA; *&#xA; *  Jira: CSDV-3252&#xA; *&#xA; * Purpose: To log additional events on the Units that are created from the Barge Stowplan screen in N4. These events are to match a typical Ingate,&#xA; * receive and Load on the Barge sequence for the containers coming in through the Gate at a non-operational facility and loaded on a Barge sailing&#xA; * to another Facility in the Complex. Events logged are:&#xA; *  - UNIT_IN_GATE&#xA; *  - UNIT_RECEIVE&#xA; *  - UNIT_LOAD&#xA; *&#xA; *  The above events will be logged on the Unit for the Facility where they were loaded e.g. Akutan for a Barge that is coming at this Facility from&#xA; *  Akutan. They will be logged in the correct chronological order, such that if the user clicks on &quot;Apply Date&quot; in the Event History, these events&#xA; *  will appear first.&#xA; *&#xA; *  Deployment: This groovy to be installed as a Code Extension of type GENERAL_NOTICES_CODE_EXTENSION. The groovy to be triggered from a General&#xA; *  Notice based on the event UNIT_CREATE.&#xA; *&#xA; *  =======================================&#xA; *  2016-02-10 Modified by BChiarini&#xA; *&#xA; *  Added code to get the remarks from the booking item and copy them to the ufvFlexString07. These remarks will be temperature&#xA; *  information that could be alphanumeric.&#xA; *&#xA; */&#xA;&#xA;class MATBargeStowplan extends AbstractGeneralNoticeCodeExtension {&#xA;    public void execute(GroovyEvent inEvent){&#xA;        this.log(&quot;Execution Started MATBargeStowplan&quot;);&#xA;&#xA;        /* get the event */&#xA;&#xA;        Event thisEvent = inEvent.getEvent();&#xA;        GroovyApi groovyApi = new GroovyApi();&#xA;        if (thisEvent == null)&#xA;            return;&#xA;//        List fieldChanges = thisEvent.eventFieldChanges();&#xA;        this.log(&quot;checking field changes : &quot;+thisEvent.getEventFieldChangesString());&#xA;        this.log(&quot;checking field changes blips : &quot;+inEvent.wasFieldChanged(&quot;unitFlexString12&quot;));&#xA;&#xA;                /* Get the unit and the Booking */&#xA;&#xA;        Unit unit = (Unit) inEvent.getEntity();&#xA;&#xA;        if (unit == null)&#xA;            return;&#xA;try{&#xA;            this.log(inEvent.getEvent().getEventTypeId());&#xA;            this.log(unit.getUnitId());&#xA;            this.log(&quot;unit.getUnitPrimaryUe().getUeArrivalOrderItem()&quot;+unit.getUnitPrimaryUe().getUeArrivalOrderItem());&#xA;        }catch(Exception ex){&#xA;            this.log(ex.toString());&#xA;            this.log(ex.message);&#xA;        }&#xA;        Set fieldChanges = thisEvent.getEvntFieldChanges();&#xA;        this.log(&quot;Field changes : &quot;+fieldChanges.size());&#xA;        for (FieldChange change : fieldChanges) {&#xA;            this.log(&quot;Change : &quot;+change.getFieldId());&#xA;            this.log(&quot;Change value : &quot;+change.newValue);&#xA;        }&#xA;&#xA;        UnitFacilityVisit ufv = unit.getUfvForFacilityLiveOnly(ContextHelper.getThreadFacility());&#xA;        if (ufv == null){&#xA;            return;&#xA;        }&#xA;        this.log(&quot;BLIPS : &quot;+unit.getUnitFlexString12());&#xA;        CarrierVisit cv = ufv.getInboundCarrierVisit();&#xA;        // look only for the Inbound containers on a Vessel&#xA;        if (!LocTypeEnum.VESSEL.equals(cv.cvCarrierMode)){&#xA;            return;&#xA;        }&#xA;&#xA;        this.log(&quot;Found CV : &quot;+cv);&#xA;        // only look for a barge&#xA;        VesselVisitDetails vvd = VesselVisitDetails.resolveVvdFromCv(cv);&#xA;        if (vvd == null || !vvd.isBarge()){&#xA;            return;&#xA;        }&#xA;&#xA;        this.log(&quot;Found vvd : &quot;+vvd);&#xA;        // look only for Imports, Exports and Storage containers coming in on the Barge&#xA;        if (![UnitCategoryEnum.EXPORT, UnitCategoryEnum.IMPORT,UnitCategoryEnum.STORAGE].contains(unit.getUnitCategory())){&#xA;            return;&#xA;        }&#xA;&#xA;        // find facility for Barge's load port&#xA;        Facility loadFacility = getLoadFacilityForBarge(vvd);&#xA;        this.log(&quot;Found load Facility : &quot;+loadFacility);&#xA;        // A facility matching the Barge's POL must exist, and it must be a non operational facility&#xA;        if (loadFacility == null || !loadFacility.fcyIsNonOperational){&#xA;            return;&#xA;        }&#xA;&#xA;        // Code added by BChiarini, 2016-02-10.&#xA;        // Get the booking remarks from the booking item linked to the unit&#xA;        EqBaseOrderItem eqboi = unit.getUnitPrimaryUe().getUeDepartureOrderItem();&#xA;        this.log(&quot;Found eqboi : &quot;+eqboi);&#xA;        if (eqboi != null) {&#xA;            // got the booking item, now get the remarks from it and copy to ufvFlexString07&#xA;            String strAux = eqboi.getEqoiRemarks();&#xA;            if (strAux != null) {&#xA;                ufv.setUfvFlexString07(strAux);&#xA;            } else {&#xA;                ufv.setUfvFlexString07(&quot;&quot;);&#xA;            }&#xA;        }  &#xA;&#xA;        // done getting the booking remarks, let's continue now&#xA;        // end code added by BChiarini, 2016-02-10.&#xA;&#xA;        final UserContext userContext = ContextHelper.getThreadUserContext();&#xA;        final UserContext uc = getNewUserContext(loadFacility);&#xA;        PersistenceTemplate template = new PersistenceTemplate(uc);&#xA;        this.log(&quot;Found uc : &quot;+uc);&#xA;        MessageCollector mc = template.invoke(new CarinaPersistenceCallback() {&#xA;            @Override&#xA;            protected void doInTransaction() {&#xA;                try {&#xA;                    TransactionParms.getBoundParms().setUserContext(uc);&#xA;&#xA;                    // list the events to be logged, in the proper order.&#xA;                    String [] eventList = new String[3];&#xA;                    eventList[0] = &quot;UNIT_IN_GATE&quot;;&#xA;                    eventList[1] = &quot;UNIT_RECEIVE&quot;;&#xA;                    eventList[2] = &quot;UNIT_LOAD&quot;;&#xA;&#xA;                    for (String evnt: eventList) {&#xA;                        EventType event = EventType.findEventType(evnt);&#xA;                        this.log(&quot;Found event : &quot;+event);&#xA;                        if (event != null &amp;&amp; !_sm.hasEventTypeBeenRecorded(event, unit)) {&#xA;                            // backup the event time a bit, for the previous facility - 5 mins here&#xA;                            this.log(&quot;Applying event : &quot;+event);&#xA;                            Date backedUpTime = new Date(System.currentTimeMillis() - (5000 * 60));&#xA;                            _sm.recordEvent(event, &quot;Applied through groovy for Barge Stowplan&quot;, null, null, unit, (FieldChanges) null, backedUpTime);&#xA;                            this.log(&quot;Applied event : &quot;+event);&#xA;                        }&#xA;                        this.log(&quot;completed ome event : &quot;+event);&#xA;                    }&#xA;                }&#xA;                finally {&#xA;                    // restore original user context&#xA;                    TransactionParms.getBoundParms().setUserContext(userContext);&#xA;                }&#xA;            }&#xA;        });&#xA;        this.log(&quot;Event recording Completed : &quot;);&#xA;    }&#xA;&#xA;    // look for the other port in the rotation and return it if there is a facility for that in the Topology. Returns the first port in itinerary other&#xA;// than the port for this facility.&#xA;    private Facility getLoadFacilityForBarge(VesselVisitDetails inVvd){&#xA;        CarrierItinerary itinerary =  inVvd.getCvdItinerary();&#xA;        Facility facility = null;&#xA;        if (itinerary == null){&#xA;            return null;&#xA;        }&#xA;&#xA;        String pointId=null;&#xA;        for (PointCall pcall: (List&lt;PointCall&gt;) itinerary.getItinPoints()){&#xA;            if (ContextHelper.getThreadFacility().getFcyRoutingPoint().getPointId().equals(pcall.getCallPoint().getPointId())){&#xA;                continue;&#xA;            } else {&#xA;                pointId = pcall.getCallPoint().getPointId();&#xA;                // found another point besides the one for this facility. existing..&#xA;                break;&#xA;            }&#xA;        }&#xA;&#xA;        if (pointId != null){&#xA;            facility = Facility.findFacility(pointId);&#xA;        }&#xA;&#xA;        return facility;&#xA;    }&#xA;&#xA;    private UserContext getNewUserContext(Facility inFacility){&#xA;        ScopeCoordinates scopeCoordinates = _scoper.getScopeCoordinates(ScopeEnum.YARD, inFacility.getActiveYard().getYrdGkey());&#xA;        UserContext uc = ContextHelper.getThreadUserContext();&#xA;        return _contextProvider.createUserContext(uc.getUserKey(), uc.getUserId(), scopeCoordinates);&#xA;    }&#xA;&#xA;    private N4EntityScoper _scoper = (N4EntityScoper) Roastery.getBeanFactory().getBean(N4EntityScoper.BEAN_ID);&#xA;    private ArgoUserContextProvider _contextProvider = (ArgoUserContextProvider) PortalApplicationContext.getBean(IUserContextProvider.BEAN_ID);&#xA;    private ServicesManager _sm = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;&#xA;}&#xA;" />
<extension name="MatsonAncVesselDischLibrary" type="LIBRARY" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.atoms.EventEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.atoms.WiMoveKindEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.model.LocPosition&#xA;import com.navis.external.framework.AbstractExtensionCallback&#xA;import com.navis.inventory.business.moves.MoveEvent&#xA;import com.navis.inventory.business.units.MoveInfoBean&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; * Upon discharging APL empty containers from vessel, deliver those conatiners thru gate.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 10/07/2015&#xA; *&#xA; * Date: 10/07/2015: 5:41 PM&#xA; * JIRA: CSDV-3298&#xA; * SFDC: 00145302&#xA; * Called from: MatsonAncVesselDischGNHandler groovy&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;class MatsonAncVesselDischLibrary extends AbstractExtensionCallback {&#xA;  public void execute(GroovyEvent inGroovyEvent) {&#xA;    LOGGER.setLevel(Level.INFO);&#xA;    LOGGER.info(&quot; MatsonAncVesselDischLibrary execute started.&quot;);&#xA;    departUnit(inGroovyEvent);&#xA;    LOGGER.info(&quot; MatsonAncVesselDischLibrary execute completed.&quot;);&#xA;  }&#xA;&#xA;  private void departUnit(GroovyEvent inGroovyEvent) {&#xA;    Unit unit = inGroovyEvent.getEntity() as Unit;&#xA;    UnitFacilityVisit ufv = unit.getUnitActiveUfv();&#xA;    if (ufv != null) {&#xA;      CarrierVisit cv = ufv.getUfvObCv();&#xA;      if (LocTypeEnum.TRUCK.equals(cv.getCvCarrierMode())) {&#xA;        ufv.depart(null);&#xA;        LocPosition loc = LocPosition.createTruckPosition(ufv.getUfvObCv(), null, null);&#xA;        MoveInfoBean moveInfo = MoveInfoBean.createDefaultMoveInfoBean(WiMoveKindEnum.Delivery, ArgoUtils.timeNow());&#xA;        MoveEvent.recordMoveEvent(ufv, ufv.getUfvLastKnownPosition(), loc, ufv.getUfvObCv(), moveInfo, EventEnum.UNIT_DELIVER);&#xA;        //2015-10-20 bbakthavachalam update the last known position to truck&#xA;        ufv.updateLastKnownPosition(loc, null);&#xA;        ufv.setUfvTimeOfLastMove(ArgoUtils.timeNow());&#xA;      } else {&#xA;        LOGGER.error(&quot;MatsonAncVesselDischLibrary, To depart the container thru gate, the outbound cv should be TRUCK/GEN-TRUCK&quot;);&#xA;      }&#xA;    }&#xA;  }&#xA;  private Logger LOGGER = Logger.getLogger(MatsonAncVesselDischGNHandler.class);&#xA;}" />
<extension name="MATSetGateCarrierVisitNoTruck" scope="MATSON/ALASKA" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" description="Sets the carrier visit id of the gate transaction to the name of the driver entered in the gate screen." contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.model.TruckVisitDetails&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;//import com.navis.argo.ContextHelper&#xA;&#xA;/**&#xA; * This groovy customizes the carrier visit used in gate transactions&#xA; *&#xA; * Author: Bruno Chiarini&#xA; * Date: 19-Sep-2015&#xA; * JIRA: CSDV-3258&#xA; * SFDC: 145538&#xA; *&#xA; * -----------------------------------------------------------------&#xA; * Updated, cleared code and added more information in log&#xA; * Author: Bruno Chiarini&#xA; * Date: 23-Sep-2015&#xA; * -----------------------------------------------------------------&#xA; * Changed carrier visit id per customer requirement. From date to driver name.&#xA; * Author: Bruno Chiarini&#xA; * Date: 03-Oct-2015&#xA; *------------------------------------------------------------------&#xA; * Modified for facility DUT facility. Carrier visit set to driver's name.&#xA; * Class name changed to MATSetGateCarrierDUT to differentiate from the code used for facility ANK&#xA; * Author: Bruno Chiarini&#xA; * Date: 06-Oct-2015&#xA; */&#xA;&#xA;public class MATSetGateCarrierVisitNoTruck extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;    private Logger LOGGER = Logger.getLogger(MATSetGateCarrierVisitNoTruck.class);&#xA;&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot;MATSetGateCarrierVisitNoTruck Execution Started.&quot;);&#xA;&#xA;        /* Execute the built-in logic got the business task. */&#xA;&#xA;        executeInternal(inDao);&#xA;GroovyApi api = new GroovyApi();&#xA;        // get current transaction&#xA;        TruckTransaction thisTran = inDao.getTran();&#xA;        if (thisTran == null)&#xA;        {&#xA;            LOGGER.error(&quot;Truck Transaction not found!&quot;);&#xA;            return;&#xA;        }&#xA;        //LOGGER.info(&quot;Truck Transaction: &quot; + ThisTran);&#xA;&#xA;        // get transaction's truck visit&#xA;        TruckVisitDetails thisTruckVisit = thisTran.getTranTruckVisit();&#xA;        if (thisTruckVisit == null)&#xA;        {&#xA;            LOGGER.error(&quot;Truck Visit not found. &quot;&#xA;                    + &quot;Gate Transaction [&quot; + thisTran.getTranNbr() + &quot;], &quot;&#xA;                    + ( (!thisTran.isBareChassis())&#xA;                        ? (&quot;Unit [&quot; + thisTran.getTranCtrNbr())&#xA;                        : (&quot;Chassis [&quot; + thisTran.getTranChsNbr() )&#xA;                    )&#xA;                    + &quot;]&quot;);&#xA;            return;&#xA;        }&#xA;        //LOGGER.info(&quot;Truck Visit: &quot; + ThisTruckVisit);&#xA;&#xA;        // get truck visit's carrier visit&#xA;        CarrierVisit thisCV = thisTruckVisit.getCv(thisTruckVisit);&#xA;        if (thisCV == null)&#xA;        {&#xA;            LOGGER.error(&quot;Carrier visit not found. &quot;&#xA;                    + &quot;Gate Transaction [&quot; + thisTran.getTranNbr() + &quot;], &quot;&#xA;                    + ( (!thisTran.isBareChassis())&#xA;                            ? (&quot;Unit [&quot; + thisTran.getTranCtrNbr())&#xA;                            : (&quot;Chassis [&quot; + thisTran.getTranChsNbr() )&#xA;                      )&#xA;                    + &quot;]&quot;);&#xA;            return;&#xA;        }&#xA;&#xA;        // this no longer required, changed from date to driver's name&#xA;//        Calendar cal = Calendar.getInstance();&#xA;//        Date thisDate = cal.time;                                                   //get current time&#xA;&#xA;        //String truckingCoId = thisTruckVisit.getTvdtlsTrkCompany().getBzuId();&#xA;&#xA;//        if (truckingCoId.length() &gt; 10)&#xA;//        {&#xA;//            truckingCoId = truckingCoId.substring(0, 9);&#xA;//        }&#xA;&#xA;//        thisCV.updateCvId( truckingCoId                     //Trucking company id&#xA;//            + &quot;-&quot; + thisDate.format(&quot;ddMMM&quot;, ContextHelper.getThreadFacility().getTimeZone()) );  //Transaction Date&#xA;&#xA;        //new code to set carrier visit to driver's name in gate transaction&#xA;        String newCVId = &quot;&quot;;&#xA;        String driverName = thisTruckVisit.getTvdtlsDriverName();&#xA;        if (driverName != null)&#xA;        {&#xA;            newCVId = driverName;  //driver name&#xA;        }&#xA;        else&#xA;        {&#xA;            newCVId = &quot;NoDriver&quot;;   //making sure we get a value in case it is null&#xA;        }&#xA;&#xA;        //trim to a max of 16 chars (max length allowed for carrier visit id)&#xA;        if (newCVId.length() &gt; 16) {&#xA;            newCVId = newCVId.substring(0,16);&#xA;        }&#xA;        thisCV.updateCvId(newCVId);&#xA;&#xA;        LOGGER.info(&quot;Carrier Visit Id set to [&quot;  + thisCV.getCvId()&#xA;                + &quot;] for transaction [&quot; + thisTran.getTranNbr() + &quot;], &quot;&#xA;                + ( (!thisTran.isBareChassis())&#xA;                    ? (&quot;Unit [&quot; + thisTran.getTranCtrNbr())&#xA;                    : (&quot;Chassis [&quot; + thisTran.getTranChsNbr() )&#xA;                    )&#xA;                + &quot;]&quot;);&#xA;        LOGGER.info(&quot;MATSetGateCarrierVisitNoTruck Execution Ended.&quot;);&#xA;    }&#xA;&#xA;}" />
<extension name="MATPlaceUnitInYardHeap" scope="MATSON" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.model.LocPosition&#xA;import com.navis.argo.business.model.Yard&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.inventory.business.api.RectifyParms&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;/**&#xA; * This groovy places the unit in yard into the yard heap 'Yard'&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 08/25/15&#xA; * JIRA: CSDV-3063&#xA; * SFDC: 142561&#xA; *&#xA; */&#xA;&#xA;public class MATPlaceUnitInYardHeap extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        this.log(&quot;Execution Started MATPlaceUnitInYardHeap&quot;);&#xA;&#xA;        /* check various components of the gate transaction to insure everything needed is present. */&#xA;&#xA;        if (inDao == null)&#xA;            return;&#xA;&#xA;        TruckTransaction ThisTran = inDao.getTran();&#xA;&#xA;        if (ThisTran == null)&#xA;            return;&#xA;&#xA;        Yard ThisYard = ContextHelper.getThreadYard();&#xA;&#xA;        /* get the position specified in the transaction */&#xA;&#xA;        UnitFacilityVisit ThisUFV = ThisTran.getTranUfv();&#xA;&#xA;        if (ThisUFV == null)&#xA;        {&#xA;            return;&#xA;        }&#xA;&#xA;        /* get the yard heap called 'Yard' */&#xA;        String tranYardRow = ThisTran.getTranFlexString03();&#xA;&#xA;        if (tranYardRow == null){&#xA;            tranYardRow = &quot;YARD&quot;;&#xA;        }&#xA;        LocPosition ThisCtrPos = LocPosition.createYardPosition(ThisYard, tranYardRow, null, null, false);&#xA;&#xA;        /* rectify the unit into that yard position */&#xA;&#xA;        RectifyParms thisRectifyParm = new RectifyParms();&#xA;&#xA;        thisRectifyParm.setEraseHistory(false);&#xA;        thisRectifyParm.setUfvTransitState(UfvTransitStateEnum.S40_YARD);&#xA;        thisRectifyParm.setUnitVisitState(UnitVisitStateEnum.ACTIVE);&#xA;        thisRectifyParm.setPosition(ThisCtrPos);&#xA;&#xA;        ThisUFV.rectify(thisRectifyParm);&#xA;    }&#xA;}" />
<extension name="MATGvyUpdateGrossWeight" scope="MATSON/ALASKA" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.inventory.business.units.Routing&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.road.business.model.RoadInspection&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; * Created by BGopal on 11/10/2015.&#xA; */&#xA;class MATGvyUpdateGrossWeight extends AbstractGateTaskInterceptor implements EGateTaskInterceptor{&#xA;    public void execute(TransactionAndVisitHolder inDao){&#xA;        GroovyApi api = new GroovyApi();&#xA;        executeInternal(inDao);&#xA;        if (inDao == null ){&#xA;            LOGGER.warn(&quot;Transaction visit holder is null&quot;);&#xA;            return;&#xA;        }&#xA;        TruckTransaction truckTransaction = inDao.getTran();&#xA;        if (truckTransaction == null) {&#xA;            LOGGER.warn(&quot;Transaction is null&quot;);&#xA;            return;&#xA;        }&#xA;        /*Unit unit = inDao.getTran().getTranUnit();&#xA;        if (unit == null) {&#xA;            LOGGER.warn(&quot;Transaction unit is null&quot;);&#xA;            return;&#xA;        }*/&#xA;        if ( (truckTransaction.getTranCtrGrossWeight() == null || truckTransaction.getTranCtrGrossWeight() &lt;= 0)&#xA;                &amp;&amp; truckTransaction.getTranCtrTareWeight()!= null &amp;&amp; truckTransaction.getTranCtrNetWeight() != null){&#xA;            Double grossWeight = truckTransaction.getTranCtrNetWeight() + truckTransaction.getTranCtrTareWeight();&#xA;            truckTransaction.setTranCtrGrossWeight(grossWeight);&#xA;        }&#xA;&#xA;    }&#xA;    private static Logger LOGGER = Logger.getLogger(MATGvyUpdateGrossWeight.class);&#xA;}&#xA;" />
<extension name="MATCreateMassIngateTransactions" scope="MATSON/ALASKA" type="TABLE_VIEW_COMMAND" language="GROOVY" is-enabled="Y" contents="import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.external.framework.ui.AbstractTableViewCommand&#xA;import com.navis.framework.metafields.entity.EntityId&#xA;&#xA;public class MATCreateMassIngateTransactions extends AbstractTableViewCommand {&#xA;void execute(EntityId entityId, List&lt;Serializable&gt; gkeys, Map&lt;String, Object&gt; params) {&#xA;/*GroovyApi groovyApi = new GroovyApi();&#xA;    groovyApi.getGroovyClassInstance(&quot;MATGvyMassGateProcess&quot;).execute();*/&#xA;    Map inParam = new HashMap();&#xA;    Map outParam = new HashMap();&#xA;    this.executeInTransaction(&quot;MATGvyMassGateProcess&quot;, inParam, outParam );&#xA;}&#xA;}&#xA;&#xA; " />
<extension name="MATGvyMassGateProcess" scope="MATSON/ALASKA" type="TRANSACTED_BUSINESS_FUNCTION" language="GROOVY" is-enabled="Y" contents="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.model.Facility&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.business.reports.DigitalAsset&#xA;import com.navis.external.framework.persistence.AbstractExtensionPersistenceCallback&#xA;import org.apache.poi.ss.usermodel.Cell&#xA;import org.apache.poi.ss.usermodel.Row&#xA;import org.apache.poi.ss.usermodel.Sheet&#xA;import org.apache.poi.ss.usermodel.Workbook&#xA;import org.apache.poi.xssf.usermodel.XSSFWorkbook&#xA;&#xA;public class MATGvyMassGateProcess extends AbstractExtensionPersistenceCallback {&#xA;&#xA;    void execute(Map inParams, Map inOutResults) {&#xA;        execute();&#xA;    }&#xA;&#xA;    public String execute(Map inParameters) {&#xA;        return execute();&#xA;    }&#xA;    public String execute() {&#xA;&#xA;        GroovyApi groovyApi = new GroovyApi();&#xA;        String fileStr = null;&#xA;        String fileName = null;&#xA;        boolean transationFailed = false;&#xA;        String emailBody = null;&#xA;        String mediaAssetName = null;&#xA;        String gateId=&quot;&quot;;&#xA;        def units = null;&#xA;        groovyApi.sendEmail(&quot;gbabu@matson.com&quot;, &quot;gbabu@matson.com&quot;, &quot;Bulk Transaction &quot;, &quot;before calling ingate&quot;);&#xA;        try{&#xA;            Facility facility = ContextHelper.getThreadFacility();&#xA;            if (facility!= null) {&#xA;                if (&quot;DUT&quot;.equals(facility.getFcyId())) {&#xA;                    mediaAssetName = &quot;DUTMASSINGATE&quot;;&#xA;                    gateId = &quot;DUT_MASSGATE&quot;;&#xA;&#xA;                } else if (&quot;KDK&quot;.equals(facility.getFcyId())) {&#xA;                    mediaAssetName = &quot;KDKMASSINGATE&quot;;&#xA;                    gateId = &quot;KDK_MASSGATE&quot;;&#xA;                }&#xA;            } else {&#xA;                return &quot;NOFACILITY&quot;;&#xA;            }&#xA;            if (mediaAssetName == null) {&#xA;                return &quot;NOMEDIAASSET&quot;;&#xA;            }&#xA;            readBulkIngateMediaAsset(mediaAssetName);&#xA;            bookingNbr = null;&#xA;            groovyApi.sendEmail(&quot;gbabu@matson.com&quot;, &quot;gbabu@matson.com&quot;, &quot;Bulk Transaction &quot;, &quot;after reading units&quot; +dataList + &quot; with size &quot;);&#xA;            if (dataList != null &amp;&amp; dataList.size()&gt;0 ) { //&amp;&amp; bookingList!= null &amp;&amp; bookingList.size() &gt; 0) {&#xA;                for (int i = 0; i &lt; dataList.size(); i++) {&#xA;                    Map&lt;String, String&gt; dataMap = dataList.get(i);&#xA;                    if (dataMap != null &amp;&amp; dataMap.size() &gt; 0) {&#xA;                        bookingNbr = dataMap.get(BOOK) != null ? (noBook.equals(dataMap.get(BOOK)) ? bookingNbr : dataMap.get(BOOK)) : bookingNbr;&#xA;                        String unitId = dataMap.get(UNITID);&#xA;                        String slot = dataMap.get(SLOT);&#xA;                        groovyApi.sendEmail(&quot;gbabu@matson.com&quot;, &quot;gbabu@matson.com&quot;, &quot;Bulk Transaction &quot;, &quot;after reading booking&quot; + bookingNbr);&#xA;                        transationFailed = false;&#xA;                        if (unitId != null &amp;&amp; unitId.length() &gt; 0) {&#xA;                            Equipment equipment = Equipment.findEquipment(unitId);&#xA;                            String tranStatus = &quot;new container not allowed&quot;;&#xA;                            if (equipment != null) {&#xA;                                tranStatus = groovyApi.getGroovyClassInstance(&quot;MATGvySubmitMassTransaction&quot;)&#xA;                                        .doSubmitTransaction(unitId.trim(), bookingNbr.trim(), slot,gateId );&#xA;                            }&#xA;                            if (tranStatus != statusOK) {&#xA;                                //send email&#xA;                                transationFailed = true;&#xA;                                emailBody = &quot;Transaction cannot be created for &quot; + unitId + &quot; with message &quot; + tranStatus;&#xA;                                groovyApi.sendEmail(&quot;gbabu@matson.com&quot;, &quot;gbabu@matson.com&quot;, &quot;Bulk Transaction Failed&quot;, emailBody);&#xA;                            }&#xA;                        }&#xA;                    } else {&#xA;                        emailBody = &quot;Transaction cannot be created as units/bookings cannot be read &quot;;&#xA;                    }&#xA;                }&#xA;            }&#xA;&#xA;            //clearBulkIngateDigitalAsset();&#xA;        }catch(Exception e){&#xA;            groovyApi.sendEmail(&quot;gbabu@matson.com&quot;, &quot;gbabu@matson.com&quot;, &quot;Bulk Transaction Failed&quot;, e.toString());&#xA;        }&#xA;        if (transationFailed){&#xA;            groovyApi.sendEmail(&quot;gbabu@matson.com&quot;, &quot;gbabu@matson.com&quot;, &quot;Bulk Transaction Failed&quot;, emailBody);&#xA;        }&#xA;    }&#xA;&#xA;&#xA;    public void readBulkIngateMediaAsset(String inMediaAssetName)&#xA;    {&#xA;        GroovyApi groovyApi = new GroovyApi();&#xA;        try {&#xA;            groovyApi.sendEmail(&quot;gbabu@matson.com&quot;, &quot;gbabu@matson.com&quot;, &quot;Bulk Transaction Failed&quot;, &quot;trying to find asset&quot;);&#xA;            byte[] bulkIngateData = DigitalAsset.findImage(inMediaAssetName);&#xA;            groovyApi.sendEmail(&quot;gbabu@matson.com&quot;, &quot;gbabu@matson.com&quot;, &quot;Bulk Transaction Failed&quot;, &quot;after finding data&quot;);&#xA;            InputStream inputStream = null;&#xA;            //byte[] b = new byte[bulkIngateData.length];&#xA;&#xA;            inputStream = new ByteArrayInputStream(bulkIngateData);&#xA;            Workbook workBook = new XSSFWorkbook(inputStream);&#xA;            Sheet firstSheet = workBook.getSheetAt(0);&#xA;            Iterator&lt;Row&gt; iterator = firstSheet.iterator();&#xA;            dataList = new ArrayList&lt;Map&lt;String, String&gt;&gt;();&#xA;            while (iterator.hasNext()) {&#xA;                Row nextRow = iterator.next();&#xA;                Iterator&lt;Cell&gt; cellIterator = nextRow.cellIterator();&#xA;                if (nextRow.rowNum &gt; 0) {&#xA;                    Map&lt;String,String&gt; dataMap=new HashMap&lt;String, String&gt;();&#xA;                    while (cellIterator.hasNext()) {&#xA;                        Cell cell = cellIterator.next();&#xA;&#xA;                        switch (cell.getColumnIndex()) {&#xA;                            case 0:&#xA;                                String bookingNbr = getCellValue(cell);&#xA;                                if (bookingNbr != null &amp;&amp; bookingNbr.length()&gt;0) {&#xA;                                    dataMap.put(BOOK, bookingNbr);&#xA;                                } else&#xA;                                {&#xA;                                    dataMap.put(BOOK, noBook);&#xA;                                }&#xA;                                break;&#xA;                            case 1:&#xA;                                dataMap.put(UNITID, getCellValue(cell));&#xA;                                break;&#xA;                            case 2:&#xA;                                dataMap.put(SLOT, getCellValue(cell));&#xA;                                break;&#xA;                        }&#xA;                    }&#xA;                    dataList.add(dataMap);&#xA;                }&#xA;            }&#xA;            //workBook.close();&#xA;            inputStream.close();&#xA;        } catch (Exception e) {&#xA;            groovyApi.sendEmail(&quot;gbabu@matson.com&quot;,&quot;gbabu@matson.com&quot;,&quot;Error in reading excel&quot;, e.toString());&#xA;        }&#xA;    }&#xA;&#xA;    private String getCellValue(Cell inCell) {&#xA;        String cellValue = null;&#xA;        if (inCell != null ) {&#xA;            switch (inCell.getCellType()) {&#xA;                case inCell.CELL_TYPE_STRING:&#xA;                    cellValue = inCell.getStringCellValue();&#xA;                    break;&#xA;                case inCell.CELL_TYPE_NUMERIC:&#xA;                    int  intValue = (int) inCell.getNumericCellValue();&#xA;                    //if (doubleValue != null &amp;&amp; doubleValue.intValue())&#xA;                    cellValue = intValue;&#xA;                    break;&#xA;                case inCell.CELL_TYPE_BLANK:&#xA;                    break;&#xA;            }&#xA;        }&#xA;    }&#xA;    private String bookingNbr = null;&#xA;    private String statusOK = &quot;OK&quot;;&#xA;    private ArrayList&lt;Map&lt;String, String&gt;&gt; dataList = new ArrayList&lt;Map&lt;String, String&gt;&gt;();&#xA;    private String noBook = &quot;NOBOOK&quot;;&#xA;    private String BOOK = &quot;BOOK&quot;;&#xA;    private String UNITID = &quot;UNITID&quot;;&#xA;    private String SLOT = &quot;SLOT&quot;;&#xA;}" />
<extension name="MATGvyUpdateInspectionOnOutGate" scope="MATSON/ALASKA/ANK" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.road.business.model.RoadInspection&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; * Created by BGopal on 10/27/2015.&#xA; */&#xA;class MATGvyUpdateInspectionOnOutGate extends AbstractGateTaskInterceptor implements EGateTaskInterceptor{&#xA;    public void execute(TransactionAndVisitHolder inDao){&#xA;        executeInternal(inDao);&#xA;        if (inDao == null ){&#xA;            LOGGER.warn(&quot;Transaction visit holder is null&quot;);&#xA;            return;&#xA;        }&#xA;        if (inDao.getTran() == null) {&#xA;            LOGGER.warn(&quot;Transaction is null&quot;);&#xA;            return;&#xA;        }&#xA;        Unit unit = inDao.getTran().getTranUnit();&#xA;        if (unit == null) {&#xA;            LOGGER.warn(&quot;Transaction unit is null&quot;);&#xA;            return;&#xA;        }&#xA;        String unitId = unit.getUnitId();&#xA;&#xA;        List&lt;RoadInspection&gt; roadInspectionList = RoadInspection.findInspectionsForEq(unitId, 100000L);&#xA;        if (roadInspectionList.size() &gt;0) {&#xA;            for (RoadInspection roadInspection: roadInspectionList) {&#xA;                HibernateApi.getInstance().delete(roadInspection);&#xA;            }&#xA;        }&#xA;        RoadInspection newRoadInspection = RoadInspection.createInspection(unitId, null);&#xA;        if (newRoadInspection != null) {&#xA;            newRoadInspection.setInspGensetId(inDao.getTran().getCtrAccessoryId());&#xA;            newRoadInspection.setInspEqGrade(unit.getUnitEquipment(unitId).getUeEquipmentState().getEqsGradeID());&#xA;            //newRoadInspection.setInspUnitFlexString12(unit.getUnitFlexString12());&#xA;            //newRoadInspection.setInspUnitFlexString15(unit.getUnitFlexString15());&#xA;            HibernateApi.getInstance().saveOrUpdate(newRoadInspection);&#xA;        }&#xA;    }&#xA;    private static Logger LOGGER = Logger.getLogger(MATGvyUpdateInspectionOnOutGate.class);&#xA;}&#xA;" />
<extension name="MATGvyCopyGateNotesToTranNotes" scope="MATSON/ALASKA/ANK" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;&#xA;/**&#xA; * Copy User Gate notes to Transaction notes&#xA; *&#xA; * Author: Gopal&#xA; * Date: 10/30/15&#xA; *&#xA; */&#xA;&#xA;public class MATGvyCopyGateNotesToTranNotes extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;&#xA;    // Internal cards aren't driver specific so erase the driver&#xA;    public void preProcess(TransactionAndVisitHolder inDao) {&#xA;        if (inDao.getTran() == null)&#xA;            return;&#xA;&#xA;        inDao.getTran().setTranNotes(inDao.getTran().getTranFlexString08());&#xA;    }&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        this.log(&quot;Execution Started MATGvyCopyGateNotesToTranNotes&quot;);&#xA;        executeInternal(inDao);&#xA;    }&#xA;&#xA;}" />
<extension name="MATGvyUpdateVesselVisitForRI" scope="MATSON/ALASKA/ANK" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.inventory.business.units.Routing&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.road.business.model.RoadInspection&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; * Created by BGopal on 10/27/2015.&#xA; */&#xA;class MATGvyUpdateVesselVisitForRI extends AbstractGateTaskInterceptor implements EGateTaskInterceptor{&#xA;    public void execute(TransactionAndVisitHolder inDao){&#xA;        executeInternal(inDao);&#xA;        GroovyApi groovyApi = new GroovyApi();&#xA;        if (inDao == null ){&#xA;            LOGGER.warn(&quot;Transaction visit holder is null&quot;);&#xA;            return;&#xA;        }&#xA;        TruckTransaction truckTransaction = inDao.getTran();&#xA;        if (truckTransaction == null) {&#xA;            LOGGER.warn(&quot;Transaction is null&quot;);&#xA;            return;&#xA;        }&#xA;        Unit unit = inDao.getTran().getTranUnit();&#xA;        if (unit == null) {&#xA;            LOGGER.warn(&quot;Transaction unit is null&quot;);&#xA;            return;&#xA;        }&#xA;        String unitId = unit.getUnitId();&#xA;        Routing unitRouting = unit.getUnitRouting();&#xA;        if (unitRouting != null &amp;&amp; truckTransaction.getTranDischargePoint1()!= null){&#xA;            unitRouting.setRtgPOD1(truckTransaction.getTranDischargePoint1());&#xA;        }&#xA;        String cmdyId=&quot;&quot;;&#xA;        if (unit.getUnitGoods() !=null &amp;&amp; unit.getUnitGoods().getGdsCommodity()!=null  ){&#xA;            cmdyId = unit.getUnitGoods().getGdsCommodity().getCmdyId();&#xA;        }&#xA;        if (cmdyId!=null &amp;&amp; cmdyId.equalsIgnoreCase(&quot;MULTISTOP SIT&quot;)) {&#xA;            CarrierVisit carrierVisit = truckTransaction.getTranCarrierVisit();&#xA;            if (carrierVisit != null) {&#xA;                if (LocTypeEnum.VESSEL.equals(carrierVisit.getCvCarrierMode())) {&#xA;                    UnitFacilityVisit unitFacilityVisit = unit.getUfvForFacilityLiveOnly(ContextHelper.getThreadFacility())&#xA;                    if (unitFacilityVisit != null) {&#xA;                        unitFacilityVisit.setUfvObCv(carrierVisit.getPrimaryKey());&#xA;                        HibernateApi.getInstance().saveOrUpdate(unitFacilityVisit);&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;    private static Logger LOGGER = Logger.getLogger(MATGvyUpdateVesselVisitForRI.class);&#xA;}&#xA;" />
<extension name="MatsonDrayInDepartedImport" scope="MATSON/ALASKA/ANK" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" description="When user record “Dray In” event on a departed unit, the unit should be resurrected and an inbound ufv should be created" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.Serviceable&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.portal.BizRequest&#xA;import com.navis.framework.portal.BizResponse&#xA;import com.navis.framework.portal.CrudOperation&#xA;import com.navis.framework.util.message.MessageCollector&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.business.InventoryFacade&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; bgopal 11/13/15When user record “Dray In” event on a departed unit, the unit should be resurrected and an inbound ufv should be created&#xA; */&#xA;class MatsonDrayInDepartedImport extends AbstractGeneralNoticeCodeExtension {&#xA;  public void execute(GroovyEvent inEvent) {&#xA;    LOGGER.setLevel(Level.INFO);&#xA;    LOGGER.info(&quot; MatsonDrayInDepartedImport execute Stared.&quot;);&#xA;    Event event = inEvent.getEvent();&#xA;    Serviceable serviceable = inEvent.getEntity();&#xA;    MessageCollector collector = getMessageCollector();&#xA;    try {&#xA;&#xA;      //validation&#xA;      if (serviceable == null) {&#xA;        LOGGER.error(&quot;MatsonDrayInDepartedImport, couldn't execute the groovy MatsonAncMultiStopImportDelivery since the event:&quot; + event +&#xA;                &quot; has null value for serviceable entity.&quot;);&#xA;        return;&#xA;      }&#xA;      if (!serviceable instanceof Unit) {&#xA;        LOGGER.error(&quot;MatsonDrayInDepartedImport, couldn't execute the groovy MatsonAncMultiStopImportDelivery since the event:&quot; + event +&#xA;                &quot; is not applicable to Unit Entity.&quot;);&#xA;        return;&#xA;      }&#xA;&#xA;      Unit unit = serviceable as Unit;&#xA;      GoodsBase goodsBase = unit.getUnitGoods();&#xA;      if (drayIn.equals(event.getEvntEventType().getEvnttypeId())) {&#xA;        //resurrect delivered&#xA;        UnitFacilityVisit ufv = unit.getUfvForFacilityNewest(ContextHelper.getThreadFacility());&#xA;        if (ufv != null &amp;&amp; UfvTransitStateEnum.S70_DEPARTED.equals(ufv.getUfvTransitState())) {&#xA;          LOGGER.info(&quot;UFV last know position : &quot;+ufv.getUfvLastKnownPosition().getPosLocType());&#xA;          BizRequest request = new BizRequest(getUserContext());&#xA;          Serializable[] ufvGkeys = new Serializable[1];&#xA;          ufvGkeys[0] = ufv.getUfvGkey();&#xA;          CrudOperation crud = new CrudOperation(null, CrudOperation.TASK_UPDATE, InventoryEntity.UNIT_FACILITY_VISIT, null, ufvGkeys);&#xA;          request.addCrudOperation(crud);&#xA;          BizResponse response = new BizResponse();&#xA;          INVENTORY_FACADE.resurrectUnit(request, response);&#xA;          collector.getMessages().addAll(response.getMessages());&#xA;          LOGGER.warn(&quot;Inbound import unit created for &quot;+ unit.getUnitId());&#xA;        }&#xA;      }&#xA;    } catch (Exception e){&#xA;      LOGGER.error(e.getMessage());&#xA;    }&#xA;  }&#xA;  private Logger LOGGER = Logger.getLogger(MatsonAncMultiStopImportDelivery.class);&#xA;  private static InventoryFacade INVENTORY_FACADE = (InventoryFacade) Roastery.getBean(InventoryFacade.BEAN_ID);&#xA;      private static String drayIn = &quot;DRAY_IN&quot;;&#xA;}" />
<extension name="MATCloneUnitForNextFacilityonVV" scope="MATSON/ALASKA/DUT" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.api.IEvent&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.atoms.CarrierModeEnum&#xA;import com.navis.argo.business.atoms.CarrierVisitPhaseEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.model.Facility&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.persistence.hibernate.CarinaPersistenceCallback&#xA;import com.navis.framework.persistence.hibernate.PersistenceTemplate&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.util.message.MessageCollector&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.api.RectifyParms&#xA;import com.navis.inventory.business.api.UnitManager&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.inventory.business.imdg.HazardItem&#xA;import com.navis.inventory.business.imdg.HazardItemPlacard&#xA;import com.navis.inventory.business.imdg.Hazards&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.Routing&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.services.business.rules.EventType&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;import com.navis.inventory.business.units.ReeferRqmnts&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; *&#xA; *  Create a second unit for a unit moving from one facility to another on the ship&#xA; */&#xA;&#xA;public class MATCloneUnitForNextFacilityonVV extends AbstractGeneralNoticeCodeExtension&#xA;&#xA;{&#xA;  public void execute(GroovyEvent inEvent)&#xA;&#xA;  {&#xA;    this.log(&quot;Execution Started MATCloneUnitForNextFacilityonVV and sleeping for 90 seconds&quot;);&#xA;&#xA;    Thread.sleep(90000);&#xA;    /* get the event */&#xA;&#xA;    Event thisEvent = inEvent.getEvent();&#xA;&#xA;    if (thisEvent == null)&#xA;      return;&#xA;&#xA;    /* Get the unit and the Booking */&#xA;&#xA;    VesselVisitDetails vesselVisit = (VesselVisitDetails) inEvent.getEntity();&#xA;&#xA;    if (vesselVisit == null)&#xA;      return;&#xA;&#xA;    CarrierVisit carrierVisit = vesselVisit.getCvdCv();&#xA;    CarrierVisit newCarrierVisit = null;&#xA;    Facility facility = ContextHelper.getThreadFacility();&#xA;    if (carrierVisit.getCvNextFacility() != null) {&#xA;      newCarrierVisit = carrierVisit.findOrCreateNextVisit();&#xA;      //CarrierVisit.findCarrierVisit(carrierVisit.getCvNextFacility(), LocTypeEnum.VESSEL, carrierVisit.getCvId());&#xA;    }&#xA;    if (newCarrierVisit != null) {&#xA;      GroovyApi api = new GroovyApi();&#xA;      def MATUpdateClonedUnit = api.getGroovyClassInstance(&quot;MATUpdateClonedUnit&quot;);&#xA;&#xA;      DomainQuery domainQuery = QueryUtils.createDomainQuery(InventoryEntity.UNIT_FACILITY_VISIT)&#xA;              .addDqPredicate(PredicateFactory.eq(InventoryField.UFV_ACTUAL_OB_CV, carrierVisit.getPrimaryKey()))&#xA;              .addDqPredicate(PredicateFactory.eq(InventoryField.UFV_FACILITY, facility.getFcyGkey()));&#xA;&#xA;      List&lt;Serializable&gt; ufvGkeys = HibernateApi.getInstance().findPrimaryKeysByDomainQuery(domainQuery);&#xA;      this.log(&quot;List is &quot;+ufvGkeys);&#xA;&#xA;      final UserContext userContext = ContextHelper.getThreadUserContext();&#xA;      List&lt;Serializable&gt; oldUfvGkeys = ufvGkeys;&#xA;&#xA;      PersistenceTemplate template = new PersistenceTemplate(userContext);&#xA;      MessageCollector mc = template.invoke(new CarinaPersistenceCallback() {&#xA;        @Override&#xA;        protected void doInTransaction() {&#xA;          try {&#xA;&#xA;            if (oldUfvGkeys != null &amp;&amp; oldUfvGkeys.size() &gt; 0) {&#xA;              for (Serializable ufvGkey : oldUfvGkeys) {&#xA;                UnitFacilityVisit unitFacilityVisit = (UnitFacilityVisit) HibernateApi.getInstance().load(UnitFacilityVisit.class, ufvGkey);&#xA;                try {&#xA;                  LOGGER.warn(&quot;UFV is &quot; + unitFacilityVisit);&#xA;                  if (unitFacilityVisit != null) {&#xA;                    Unit unit = unitFacilityVisit.getUfvUnit();&#xA;                    UnitFacilityVisit nextUfv = unit.getUfvForFacilityNewest(carrierVisit.getCvNextFacility());&#xA;                    if (nextUfv) {&#xA;                      RectifyParms thisRectifyParm = new RectifyParms();&#xA;                      thisRectifyParm.setEraseHistory(false);&#xA;                      thisRectifyParm.setUfvTransitState(UfvTransitStateEnum.S70_DEPARTED);&#xA;                      thisRectifyParm.setUnitVisitState(UnitVisitStateEnum.DEPARTED);&#xA;                      nextUfv.rectify(thisRectifyParm);&#xA;                      for (UnitFacilityVisit unitFacilityVisit1 : unit.getUnitUfvSet()) {&#xA;                        unitFacilityVisit1.setUfvVisibleInSparcs(false);&#xA;                      }&#xA;                      RoadBizUtil.commit();&#xA;                    }&#xA;                  }&#xA;                } catch (Exception e) {&#xA;                  LOGGER.warn(e);&#xA;                }&#xA;              }&#xA;            }&#xA;&#xA;          } catch (Exception e) {&#xA;&#xA;//null          }&#xA;          }&#xA;        }&#xA;      });&#xA;&#xA;      LOGGER.warn(&quot;Deleted the old UFVs and going to sleep for 90 seconds&quot;);&#xA;      Thread.sleep(90000);&#xA;      if (ufvGkeys != null &amp;&amp; ufvGkeys.size() &gt; 0) {&#xA;        for (Serializable ufvGkey : ufvGkeys) {&#xA;          UnitFacilityVisit unitFacilityVisit = (UnitFacilityVisit) HibernateApi.getInstance().load(UnitFacilityVisit.class, ufvGkey);&#xA;          this.log(&quot;UFV is &quot; + unitFacilityVisit);&#xA;          if (unitFacilityVisit != null) {&#xA;            Unit unit = unitFacilityVisit.getUfvUnit();&#xA;            UnitFacilityVisit   nextUfv = unit.getUfvForFacilityNewest(carrierVisit.getCvNextFacility());&#xA;            Boolean isUnitCloned = false;&#xA;            if (nextUfv) {&#xA;              this.log(&quot;Found next UFV &quot;+ nextUfv);&#xA;              try {&#xA;                if (nextUfv.getUfvActualIbCv()!= null &amp;&amp; !newCarrierVisit.equals(nextUfv.getUfvActualIbCv()) &amp;&amp;&#xA;                        LocTypeEnum.VESSEL.equals(nextUfv.getUfvActualIbCv().getCvCarrierMode())) {&#xA;                  newCarrierVisit = nextUfv.getUfvActualIbCv();&#xA;                }&#xA;                unit.deleteUfv(nextUfv);&#xA;                UnitCategoryEnum newCategoryEnum = computeUnitCategory(unit.getUnitRouting().getRtgPOD1(), facility.getFcyRoutingPoint());&#xA;                UnitCategoryEnum existingCategory = unit.getUnitCategory();&#xA;                ServicesManager servicesManager = (ServicesManager)Roastery.getBean(ServicesManager.BEAN_ID);&#xA;                EventType eventType = EventType.findEventType(&quot;UNIT_OUT_GATE&quot;);&#xA;                Event event = (Event) servicesManager.getMostRecentEvent(eventType,unit);&#xA;                if (event != null &amp;&amp; facility.equals(event.getEvntFacility())){&#xA;                  unit.setUnitCategory(UnitCategoryEnum.IMPORT);&#xA;                } else {&#xA;                  if (UnitCategoryEnum.IMPORT.equals(existingCategory) || UnitCategoryEnum.THROUGH.equals(existingCategory)) {&#xA;                    this.log(&quot;Updating the category back to &quot; + newCategoryEnum);&#xA;                    unit.setUnitCategory(newCategoryEnum);&#xA;                  }&#xA;                }&#xA;                HibernateApi.getInstance().saveOrUpdate(unit);&#xA;                RoadBizUtil.commit();&#xA;               &#xA;                isUnitCloned = MATUpdateClonedUnit.createAndUpdateClonedUnit(unit, newCarrierVisit, nextUfv, carrierVisit.getCvNextFacility(),unitFacilityVisit);&#xA;                if (isUnitCloned) {&#xA;                  LOGGER.warn(&quot;Deleting UFV &quot;+unit.getUnitId());&#xA;                  /*    HibernateApi.getInstance().delete(unitFacilityVisit);&#xA;&#xA;                      ServicesManager sm = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;&#xA;                      EventType cloneUnitEventType = EventType.findEventType('UNIT_CLONE_NEXT_FACILITY');&#xA;                      if (sm != null &amp;&amp; cloneUnitEventType != null) {&#xA;                        (IEvent) sm.recordEvent(cloneUnitEventType, &quot;Clone Unit for next facility &quot;, null, null, unit, (FieldChanges) null);&#xA;                      }*/&#xA;                  RoadBizUtil.commit();&#xA;                }&#xA;              } catch (Exception e) {&#xA;                LOGGER.warn(&quot;Exception while cloning unit &quot;+e);&#xA;              }&#xA;            }&#xA;&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;  public void log(String inMsg){&#xA;    LOGGER.warn(inMsg);&#xA;  }&#xA;  // compute the category for the next Unit, based on the current category of the Unit&#xA;  private UnitCategoryEnum computeUnitCategory(RoutingPoint inUnitPod, RoutingPoint inFacilityRouting) {&#xA;    if (inUnitPod == null || inFacilityRouting == null) {&#xA;      return;&#xA;    }&#xA;    if (inUnitPod.equals(inFacilityRouting)) {&#xA;      return UnitCategoryEnum.IMPORT;&#xA;    } else {&#xA;      return UnitCategoryEnum.THROUGH;&#xA;    }&#xA;  }&#xA;  private final static Logger LOGGER = Logger.getLogger(MATCloneUnitForNextFacilityonVV.class);&#xA;}" />
<extension name="TDPDisconnect" scope="MATSON/ALASKA/ANK" type="TABLE_VIEW_COMMAND" language="GROOVY" is-enabled="Y" contents="import com.navis.argo.ArgoField&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.navis.argo.business.model.Lane&#xA;import com.navis.external.framework.ui.AbstractTableViewCommand&#xA;import com.navis.framework.metafields.entity.EntityId&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.presentation.FrameworkPresentationUtils&#xA;import com.navis.road.business.model.GateLane&#xA;import com.sun.jersey.api.client.Client&#xA;import com.sun.jersey.api.client.ClientResponse&#xA;import com.sun.jersey.api.client.WebResource&#xA;import com.sun.jersey.api.client.config.DefaultClientConfig&#xA;import org.w3c.dom.Element&#xA;import wslite.soap.SOAPResponse&#xA;&#xA;import javax.ws.rs.core.MediaType&#xA;&#xA;/**&#xA; * @author Keerthi Ramachandran&#xA; * @since 1/12/2016&#xA; * &lt;p&gt;TDPDisconnect is ..&lt;/p&gt;&#xA; */&#xA;class TDPDisconnect extends AbstractTableViewCommand {&#xA;    public TDPDisconnect() {&#xA;    }&#xA;&#xA;    public void execute(EntityId inEntityId, List&lt;Serializable&gt; inGkeys, Map&lt;String, Object&gt; inParams) {&#xA;        UserContext uc = FrameworkPresentationUtils.getUserContext();&#xA;        log(&quot;uc.briefDetails&quot; + uc.briefDetails);&#xA;        log(&quot;entityName&quot; + inEntityId.entityName);&#xA;&#xA;        &#xA;        List&lt;Lane&gt; laneList;&#xA;        for (Serializable s : inGkeys) {&#xA;            log(&quot;inGkey= $s&quot;)&#xA;&#x9;&#x9;&#x9;Map inParam = new HashMap();&#xA;&#x9;&#x9;&#x9;Map outParam = new HashMap();&#xA;&#x9;&#x9;&#x9;inParam.put(&quot;laneGkey&quot;, s);&#xA;&#x9;&#x9;&#x9;inParam.put(&quot;lane&quot;, inEntityId);&#xA;&#x9;&#x9;&#x9;this.executeInTransaction(&quot;GvyDisconnectLanes&quot;, inParam, outParam );&#xA;        }&#xA;&#x9;&#x9;&#xA;        &#xA;        return;&#xA;    }&#xA;&#xA;&#xA;    private logMsg(String inMsg) {&#xA;        log(&quot;TDPDisconnect: &quot; + inMsg);&#xA;    }&#xA;&#xA;/*&#xA;    public Map&lt;MetafieldId, Object&gt; execute(String inStageId, Long inLaneGkey, Long inTvdtlsGkey, Long inTranGkey, FieldChanges inChanges) {&#xA;        String tvExitLane = null;&#xA;        //String tvExitLaneID = null;&#xA;        GateLane gateLane;&#xA;        Map&lt;MetafieldId, Object&gt; returnMap = new HashMap&lt;MetafieldId, Object&gt;();&#xA;&#xA;        ArgoUserContext userContext = (ArgoUserContext) FrameworkPresentationUtils.getUserContext();&#xA;        logMsg(&quot;userContext = &quot; + userContext);&#xA;        logMsg(&quot;userContext.getConsoleGkey() = &quot; + userContext.getConsoleGkey());&#xA;        com.navis.road.business.reference.Console console = (userContext ? (com.navis.road.business.reference.Console) HibernateApi.getInstance().load(com.navis.road.business.reference.Console.class, userContext.getConsoleGkey()) : null)&#xA;&#xA;&#xA;        logMsg(&quot;console = &quot; + console);&#xA;        if (inChanges.hasFieldChange(RoadField.TVDTLS_EXIT_LANE)) {&#xA;            tvExitLane = inChanges.getFieldChange(RoadField.TVDTLS_EXIT_LANE).getNewValue();&#xA;            gateLane = (tvExitLane ? (GateLane) HibernateApi.getInstance().load(GateLane.class, tvExitLane.toLong()) : null);&#xA;        }&#xA;&#xA;        logMsg(&quot;before: gateLane = &quot; + gateLane);&#xA;        //when no lane is selected, pick the lane that is waiting the longest&#xA;        gateLane = (!tvExitLane) ? findWaitingGateLane(inStageId) : gateLane;&#xA;        logMsg(&quot;after: gateLane = &quot; + gateLane);&#xA;&#xA;        returnMap.put(RoadField.TVDTLS_EXIT_LANE, (gateLane ? gateLane.getPrimaryKey() : null));&#xA;        returnMap.put(RoadBizMetafield.RELOAD_TRUCK_VISIT, true);&#xA;&#xA;        //update console with the selected lane, update gate lane status&#xA;        // First send Disconnect Message as clean up message and then update the console and then send the Final Connnect Message&#xA;        if (gateLane &amp;&amp; console) {&#xA;            log(&quot;Lane Selected : &quot; + console.getHwLaneSelected());&#xA;            //send Disconnect message only when the console is occupied by some lane&#xA;            if (!&quot;--&quot;.equalsIgnoreCase(console.getHwLaneSelected().toString()))&#xA;                sendRestfulDisConnectMsgToTDP(gateLane, console);&#xA;&#xA;            updateGateLaneAndConsole(gateLane, console);&#xA;            sendRestfulConnectMsgToTDP(gateLane, console);&#xA;        } else {&#xA;            //do not show in Gate screen as popup message&#xA;            log(&quot;No GateLane is in Waiting Status (in Lane Monitor) \n or selected Console not Selected&quot;);&#xA;        }&#xA;        return returnMap;&#xA;    }&#xA;*/&#xA;&#xA;&#xA;}&#xA;" />
<extension name="GvyDisconnectLanes" scope="MATSON/ALASKA/ANK" type="TRANSACTED_BUSINESS_FUNCTION" language="GROOVY" is-enabled="Y" contents="package com.matson.tos;&#xA;&#xA;import com.navis.argo.ArgoField&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.atoms.LaneTruckStatusEnum&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.navis.argo.business.model.Lane&#xA;import com.navis.argo.portal.context.ArgoUserContext&#xA;import com.navis.external.framework.ui.AbstractTableViewCommand&#xA;import com.navis.framework.metafields.entity.EntityId&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.presentation.FrameworkPresentationUtils&#xA;import com.navis.road.business.model.GateLane&#xA;import com.sun.jersey.api.client.Client&#xA;import com.sun.jersey.api.client.ClientResponse&#xA;import com.sun.jersey.api.client.WebResource&#xA;import com.sun.jersey.api.client.config.DefaultClientConfig&#xA;import org.w3c.dom.Element&#xA;import wslite.soap.SOAPResponse&#xA;&#xA;import javax.ws.rs.core.MediaType&#xA;import com.navis.external.framework.persistence.AbstractExtensionPersistenceCallback&#xA;&#xA;/**&#xA; * Created by psethuraman on 01/12/2016.&#xA; &#xA; * api.getGroovyClassInstance(&quot;GvyDisconnectLanes&quot;).findLanes(LaneGkey);&#xA; */&#xA;&#xA;&#xA;class GvyDisconnectLanes extends AbstractExtensionPersistenceCallback {&#xA;&#xA;&#x9;void execute(Map inParams, Map inOutResults) {&#xA;        List&lt;Lane&gt; laneList = findLanes(inParams.get(&quot;laneGkey&quot;));&#xA;&#x9;&#x9;log(&quot;working lane size is : &quot;+laneList.size());&#xA;        for (Lane lane : laneList) {&#xA;            log(&quot;LaneId&quot; + lane.getLaneId())&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;ArgoUserContext userContext = (ArgoUserContext) FrameworkPresentationUtils.getUserContext();&#xA;&#x9;&#x9;&#x9;com.navis.road.business.reference.Console console = (userContext ? (com.navis.road.business.reference.Console) HibernateApi.getInstance().load(com.navis.road.business.reference.Console.class, userContext.getConsoleGkey()) : null)&#xA;&#x9;&#x9;&#x9;Lane null_value;&#xA;&#x9;&#x9;&#x9;if (lane &amp;&amp; console) {&#xA;&#x9;&#x9;&#x9;&#x9;lane.setLaneTruckStatus(LaneTruckStatusEnum.EMPTY);&#xA;&#x9;&#x9;&#x9;&#x9;console.setHwLaneSelected(null_value);&#xA;&#x9;&#x9;&#x9;&#x9;sendDisConnectRequest(lane.getLaneId(), console);&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;}&#xA;        }&#xA;    }&#xA;&#xA;    public String execute(Map inParameters) {&#xA;        return execute();&#xA;    }&#xA;&#x9;&#xA;    public List&lt;Lane&gt; findLanes(Long s) {&#xA;&#x9;&#x9;Map inParam = new HashMap();&#xA;&#x9;&#x9;Map outParam = new HashMap();&#xA;        DomainQuery query = QueryUtils.createDomainQuery(&quot;Lane&quot;).&#xA;                    addDqPredicate(PredicateFactory.eq(ArgoField.LANE_GKEY, s));&#xA;        List&lt;Lane&gt; laneList  = HibernateApi.getInstance().findEntitiesByDomainQuery(query)&#xA;        return laneList&#xA;    }&#xA;&#x9;&#xA;&#x9;private logMsg(String inMsg) {&#xA;        log(&quot;GvyDiscnnectLanes: &quot; + inMsg);&#xA;    }&#xA;&#x9;&#xA;&#x9;    /**&#xA;     * send message to TDP for Connect&#xA;     * @param inGateLane&#xA;     * @param inConsole&#xA;     * @return&#xA;     */&#xA;    private sendRestfulDisConnectMsgToTDP(GateLane inGateLane, com.navis.road.business.reference.Console inConsole) {&#xA;        SOAPResponse response;&#xA;        response = sendDisConnectRequest(inGateLane.getLaneId(), inConsole.getHwconsoleIdExternal());&#xA;        //todo what to with SOAP response???&#xA;    }&#xA;    /**&#xA;     * Send restful Disconnect Request&#xA;     * @param inLaneId&#xA;     * @param inConsoleId&#xA;     * @return&#xA;     */&#xA;    private Element sendDisConnectRequest(String inLaneId, com.navis.road.business.reference.Console inConsole) {&#xA;        GeneralReference genRef = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;RESTFULLTDP&quot;, &quot;URL&quot;);&#xA;        logMsg(genRef.getRefValue2());&#xA;&#x9;&#x9;String inConsoleId = inConsole != null ? inConsole.getHwconsoleIdExternal() : &quot;Clerk&quot;;&#xA;&#x9;&#x9;logMsg(&quot;Clerk Id : &quot;+inConsoleId);&#xA;        URL url = new URL(genRef.getRefValue2() + &quot;laneId=&quot; + inLaneId.substring(5) + &quot;&amp;clerkId=&quot; + inConsoleId+&quot;&amp;printTicketCount=0&quot;);&#xA;        logMsg(url.toString());&#xA;        DefaultClientConfig clientConfig1 = new DefaultClientConfig();&#xA;        Client client = Client.create(clientConfig1);&#xA;        WebResource resource = client.resource(url.toString());&#xA;        ClientResponse response = (ClientResponse) resource.accept(MediaType.TEXT_XML).get(ClientResponse.class);&#xA;        if (response.getStatus() != 200) {&#xA;            logMsg(&quot;Request failed&quot;);&#xA;            logMsg(response.toString());&#xA;        } else {&#xA;            logMsg(&quot;Request Success&quot;);&#xA;            logMsg(response.toString());&#xA;        }&#xA;        return null;&#xA;    }&#xA;}&#xA;&#xA;&#xA;&#xA;" />
<extension name="MatUpdateUnitPOL" scope="MATSON/ALASKA" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="N" contents="package codeExtensions&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.reference.RoutingPoint&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;&#xA;/**&#xA; * Created by VNatesan on 8/23/2016.&#xA; */&#xA;class MatUpdateUnitPOL extends AbstractGeneralNoticeCodeExtension{&#xA;&#xA;    public void execute(GroovyEvent inEvent) {&#xA;&#xA;        GroovyApi api = new GroovyApi();&#xA;        String POL=null;&#xA;        Event thisEvent = inEvent.getEvent();&#xA;        if (thisEvent == null) {&#xA;         return;&#xA;        }&#xA;&#xA;        Unit unit = (Unit) inEvent.getEntity();&#xA;&#xA;        if (unit == null) {&#xA;            return;&#xA;        }&#xA;        this.log(&quot;MatUpdateUnitPOL Event POL&quot;+thisEvent.getEventFacilityId());&#xA;        RoutingPoint routingPoint= unit.getUnitRouting().getRtgPOL();&#xA;        this.log(&quot;RoutingPoint --- MatUpdateUnitPOL:&quot;+routingPoint.toString())&#xA;        if(routingPoint==null){&#xA;            this.log(&quot;RoutingPoint ---In  MatUpdateUnitPOL is null so updating POL&quot;)&#xA;            POL =thisEvent.getEventFacilityId();&#xA;            if(POL==null) {&#xA;                POL = ContextHelper.getThreadFacility().getFcyId();&#xA;            }&#xA;            unit.getUnitRouting().setRtgPOL(com.navis.argo.business.reference.RoutingPoint.findRoutingPoint(POL));&#xA;        }&#xA;&#xA;    }&#xA;}&#xA;" />
<extension name="MatsonAncPrintDocument" scope="MATSON/ALASKA" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.ArgoUtils&#xA;import com.navis.argo.business.atoms.DocTypeUsageEnum&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.navis.argo.util.PrintUtil&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.AllOtherFrameworkPropertyKeys&#xA;import com.navis.framework.MailServerConfig&#xA;import com.navis.framework.business.atoms.PrinterDriverEnum&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.Ordering&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.printing.PrintRequest&#xA;import com.navis.framework.printing.PrintServiceManager&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.util.io.ResourceUtils&#xA;import com.navis.road.RoadEntity&#xA;import com.navis.road.RoadField&#xA;import com.navis.road.business.atoms.TranStatusEnum&#xA;import com.navis.road.business.model.Document&#xA;import com.navis.road.business.model.GateLane&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.model.TruckVisitDetails&#xA;import com.navis.road.business.reference.Printer&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;import org.springframework.core.io.Resource&#xA;import org.springframework.mail.MailSendException&#xA;import org.springframework.mail.javamail.JavaMailSenderImpl&#xA;import org.springframework.mail.javamail.MimeMessageHelper&#xA;&#xA;import javax.mail.internet.MimeMessage&#xA;import java.nio.charset.Charset&#xA;&#xA;import static com.navis.argo.business.reference.HardwareDevice.findHardwareDeviceById&#xA;&#xA;/**&#xA; * Print document.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 07/17/2015&#xA; *&#xA; * Date: 07/17/2015: 5:41 PM&#xA; * JIRA: CSDV-3024&#xA; * SFDC: 00138337&#xA; * Called from: Gate Configuration&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; *&#xA; * Peter Seiler&#xA; * Date: 01/27/2016&#xA; * JIRA: CSDV-3024&#xA; *&#xA; * Add logic to deal with Line Haul and selection of gate lane for printing.&#xA; *&#xA; * Peter Seiler&#xA; * Date: 01/29/2016&#xA; * JIRA: CSDV-3024&#xA; *&#xA; * Add check for truck vist vs. transaction.&#xA; * To support reprinting in the lane allow call from truck visit&#xA; *&#xA; * Peter Seiler&#xA; * Date: 02/04/2016&#xA; *&#xA; * chop the file up into one ticket per file when FTPing to Nascent server to print&#xA; *&#xA; * Peter Seiler&#xA; * 02/05/2016&#xA; *&#xA; * Move the open and close FTP connection outside the loop that sends multiple tickets&#xA; *&#xA; * Peter Seiler&#xA; * 02/16/2016&#xA; *&#xA; * Only execute trouble ticket ptinting if document type is 'TROUBLE'&#xA; *&#xA; * P DelaRosa&#xA; * 05/23/2016&#xA; *&#xA; * Add email for Garage Foremen&#xA; */&#xA;public class MatsonAncPrintDocument extends AbstractGateTaskInterceptor implements EGateTaskInterceptor {&#xA;&#xA;    /**&#xA;     * Print document based on the configuration docTypeId parameter&#xA;     *&#xA;     * @param inOutDao&#xA;     */&#xA;    public void execute(TransactionAndVisitHolder inOutDao) {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot; MatsonAncPrintDocument execute Stared.&quot;);&#xA;        def matsonAncValidateGateDocuments = getLibrary(&quot;MatsonAncValidateGateDocuments&quot;);&#xA;        LOGGER.info(&quot;MatsonAncCreateDocument about to execute MatsonAncValidateGateDocuments&quot;);&#xA;        if (!matsonAncValidateGateDocuments.isValidationSuccess(inOutDao)) {&#xA;            return;&#xA;        }&#xA;//        if (!inOutDao.hasTransaction()) {&#xA;//            LOGGER.error(&quot; MatsonAncPrintDocument: No truck transaction found to print gate ticket(s).&quot;);&#xA;//            return;&#xA;//        }&#xA;&#xA;        /* Get the truck visit and the lane from the truck visit */&#xA;&#xA;        TruckVisitDetails ThisTruckVisit = inOutDao.getTv();&#xA;&#xA;        GateLane lane = ThisTruckVisit.getTvdtlsExitLane();&#xA;&#xA;        /* Get the trans action from the Visit Holder */&#xA;&#xA;        TruckTransaction tran = inOutDao.getTran();&#xA;&#xA;        if (tran == null) {&#xA;&#xA;            /* if the transaction from the visit holder is null it is a reprint (which is from the truck visit) */&#xA;&#xA;            for (TruckTransaction ThisTran : ThisTruckVisit.getTvdtlsTruckTrans()) {&#xA;                /* process the transactions on the truck visit */&#xA;&#xA;                this.processOneTransaction(inOutDao, ThisTran, lane);&#xA;            }&#xA;        } else {&#xA;            /* print request is for one transaction from the transaction form */&#xA;&#xA;            this.processOneTransaction(inOutDao, tran, lane);&#xA;        }&#xA;&#xA;        LOGGER.info(&quot; MatsonAncPrintDocument execute Completed.&quot;);&#xA;    }&#xA;&#xA;    private void processOneTransaction(TransactionAndVisitHolder inOutDao, TruckTransaction inTran, GateLane inLane) {&#xA;//        if (RoadBizUtil.getMessageCollector().hasError()) {&#xA;//            LOGGER.error(&quot; MatsonAncPrintDocument: Transaction has one or more errors. Cannot print tickets.&quot;);&#xA;//            return;&#xA;//        }&#xA;&#xA;        GeneralReference ftpGeneralReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;FTP&quot;, &quot;INFO&quot;, inLane.getLaneId());&#xA;        LOGGER.info(&quot;FTP for Lane id    : &quot; + inLane.getLaneId());&#xA;        /* if there is no FTP destination found get a Direct print destination */&#xA;&#xA;/*    if (ftpGeneralReference == null)&#xA;    {&#xA;      ftpGeneralReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DIRECT PRINT&quot;, &quot;INFO&quot;, inLane.getLaneId());&#xA;    }*/&#xA;&#xA;        List&lt;Document&gt; docList = findDocByTransaction(inTran);&#xA;        if (docList == null) {&#xA;            LOGGER.error(&quot; MatsonAncPrintDocument: No document found for transaction Nbr:&quot; + inTran.getTranNbr());&#xA;            return;&#xA;        }&#xA;        def matsonAncFtpAdaptor = getLibrary(&quot;MatsonAncFtpAdaptor&quot;);&#xA;        boolean isFtpOpened = false;&#xA;        boolean retryConnect = false;&#xA;        try {&#xA;            if (ftpGeneralReference != null) {&#xA;                matsonAncFtpAdaptor.openConnection(ftpGeneralReference);&#xA;                isFtpOpened = true;&#xA;            }&#xA;&#xA;            if (ftpGeneralReference == null) {&#xA;                ftpGeneralReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DIRECT PRINT&quot;, &quot;INFO&quot;, inLane.getLaneId());&#xA;            }&#xA;            for (Document doc : docList) {&#xA;                //com.navis.argo.business.api.GroovyApi.displayMessage(&quot;...&quot; + new String(doc.transformData(PrinterDriverEnum.CUSTOM), &quot;UTF-8&quot;));&#xA;                saveDocument(doc, matsonAncFtpAdaptor, ftpGeneralReference, inTran, isFtpOpened);&#xA;            }&#xA;        }&#xA;        catch (BizFailure bizFailure) {&#xA;            LOGGER.error(&quot;FTP Connect Error&quot;, bizFailure);&#xA;            if (bizFailure.messageKey.key.equals(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE) &amp;&amp;&#xA;                    bizFailure.message.contains(&quot;FTP_DEFAULT_TIMEOUT&quot;)) {&#xA;                retryConnect = true&#xA;            };&#xA;        } finally {&#xA;            if (isFtpOpened) {&#xA;                matsonAncFtpAdaptor.closeConnection();&#xA;            } else if (!isFtpOpened &amp;&amp; !retryConnect &amp;&amp; ftpGeneralReference == null) {&#xA;                String msg = &quot;Couldn't print the document, Please Print it manually&quot;;&#xA;                if (!&quot;LINE HAUL&quot;.equalsIgnoreCase(inLane.getLaneId())) {&#xA;                    RoadBizUtil.appendExceptionChainAsWarnings(&#xA;                            BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null, msg))&#xA;                };&#xA;            }&#xA;        }&#xA;        if (retryConnect) {&#xA;            try {&#xA;                /*&#xA;                * Retry again to open the FTP Connection if it's not open&#xA;                * */&#xA;                if (ftpGeneralReference != null &amp;&amp; !isFtpOpened &amp;&amp; retryConnect) {&#xA;                    matsonAncFtpAdaptor.openConnection(ftpGeneralReference);&#xA;                    isFtpOpened = true;&#xA;                }&#xA;                if (ftpGeneralReference == null) {&#xA;                    ftpGeneralReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DIRECT PRINT&quot;, &quot;INFO&quot;, inLane.getLaneId());&#xA;                }&#xA;                for (Document doc : docList) {&#xA;                    saveDocument(doc, matsonAncFtpAdaptor, ftpGeneralReference, inTran, isFtpOpened);&#xA;                }&#xA;            } catch (BizFailure bizFailure) {&#xA;                LOGGER.error(&quot;FTP Connect Error&quot;, bizFailure);&#xA;                println(bizFailure);&#xA;            }&#xA;&#xA;            finally {&#xA;                if (isFtpOpened) {&#xA;                    matsonAncFtpAdaptor.closeConnection();&#xA;                } else if (!isFtpOpened &amp;&amp; ftpGeneralReference == null) {&#xA;                    String msg = &quot;Couldn't print the document, Please Print it manually&quot;;&#xA;                    if (!&quot;LINE HAUL&quot;.equalsIgnoreCase(inLane.getLaneId())) {&#xA;                        RoadBizUtil.appendExceptionChainAsWarnings(&#xA;                                BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null, msg))&#xA;                    };&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    private static List&lt;Document&gt; findDocByTransaction(TruckTransaction inTran) {&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(RoadEntity.DOCUMENT);&#xA;        dq.addDqPredicate(PredicateFactory.eq(RoadField.DOC_TRANSACTION, inTran.getTranGkey()));&#xA;        dq.addDqOrdering(Ordering.asc(RoadField.DOC_CREATED));&#xA;        return (List&lt;Document&gt;) HibernateApi.getInstance().findEntitiesByDomainQuery(dq);&#xA;    }&#xA;&#xA;    private void saveDocument(&#xA;            final Document inDocument, def inMatsonAncFtpAdaptor, GeneralReference inReference, TruckTransaction inTran,&#xA;            boolean inIsFtpOpened) {&#xA;        String docTypeId = inDocument.getDocDocType().getDoctypeId();&#xA;        if (inTran.getTranStatus() == TranStatusEnum.TROUBLE &amp;&amp; inDocument.getDocDocType() != DocTypeUsageEnum.TROUBLE) {&#xA;&#xA;            /* if the transaction is in trouble status and the document printed is not a TROUBLE document, exit without printing */&#xA;&#xA;            return;&#xA;        }&#xA;&#xA;        try {&#xA;&#xA;            GeneralReference generalReferenceDamages = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;DAMAGES&quot;);&#xA;            boolean printDamage = inTran.getTranChsDmg() != null &amp;&amp; inTran.getTranChsDmg().getDmgsItems() != null &amp;&amp;&#xA;                    !inTran.getTranChsDmg().getDmgsItems().isEmpty() &amp;&amp; generalReferenceDamages.getRefValue1().equals(docTypeId);&#xA;            if (Boolean.TRUE.equals(printDamage) || TranStatusEnum.TROUBLE.equals(inTran.getTranStatus())) {&#xA;                printFile(inDocument, inTran, printDamage);&#xA;            } else {&#xA;&#xA;                GateLane lane = inTran.getTranTruckVisit().getTvdtlsExitLane();&#xA;                if (lane == null) {&#xA;                    RoadBizUtil.&#xA;                            appendExceptionChain(&#xA;                                    BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null, &quot;Couldn't find Gate Entry Lane.&quot;));&#xA;                    return;&#xA;                }&#xA;                /* Check if lane is defined for direct print */&#xA;&#xA;                if (inReference.getRefId1() == &quot;DIRECT PRINT&quot;) {&#xA;                    /* if the lane is set for 'none' printer do not print anything */&#xA;&#xA;                    if (inReference.getRefValue1() != &quot;none&quot;) {&#xA;                        Printer thisPrinter = Printer.findHardwareDeviceById(inReference.getRefValue1()) as Printer;&#xA;&#xA;                        /* send the document to the printer. */&#xA;&#xA;                        //sendFileToPrinter(thisPrinter, inDocument, inTran, false);&#xA;                        /* send the document to the direct printer using FTP logic. */&#xA;                        LOGGER.info(&quot;Start Send Direct print sentToDirectPrinter&quot;);&#xA;                        sentToDirectPrinter(thisPrinter,inDocument,inTran,docTypeId);&#xA;                        LOGGER.info(&quot;End Send Direct print sentToDirectPrinter&quot;);&#xA;                    }&#xA;                } else {&#xA;                    String laneId = lane.getLaneId();&#xA;                    //def matsonAncFtpAdaptor = getLibrary(&quot;MatsonAncFtpAdaptor&quot;);&#xA;&#xA;//          try {&#xA;&#xA;//            matsonAncFtpAdaptor.openConnection(inReference);&#xA;&#xA;                    byte[] printByte = inDocument.transformData(PrinterDriverEnum.CUSTOM);&#xA;&#xA;                    int ScanPos = 0;&#xA;&#xA;                    /* the indication of the end of a ticket is '&lt;STX&gt;&lt;ETB&gt;&lt;ETX&gt;' */&#xA;&#xA;                    while (ScanPos &lt; printByte.size()) {&#xA;&#xA;                        /* scan through the ticket file looking for End Of Ticket indicators */&#xA;&#xA;                        boolean endOfTicket = false;&#xA;                        def printTicketByte = new byte[printByte.size()];&#xA;&#xA;                        int printTicketindex = 0;&#xA;&#xA;                        /* ScanPos is the postion in the original byte array.  printTicketIndex is the postion in the new byte array&#xA;                           with one ticket to be printed&#xA;                         */&#xA;&#xA;                        while (!endOfTicket &amp;&amp; ScanPos &lt; printByte.size()) {&#xA;&#xA;                            /* check if a End Of Ticket indicator is found within the ticket byte array */&#xA;&#xA;                            if (ScanPos + 15 &lt; printByte.size()&#xA;                                    &amp;&amp; (printByte[ScanPos] == '&lt;' &amp;&amp; printByte[ScanPos + 1] == 'S' &amp;&amp; printByte[ScanPos + 2] == 'T'&#xA;                                    &amp;&amp; printByte[ScanPos + 3] == 'X' &amp;&amp; printByte[ScanPos + 4] == '&gt;' &amp;&amp; printByte[ScanPos + 5] == '&lt;'&#xA;                                    &amp;&amp; printByte[ScanPos + 6] == 'E' &amp;&amp; printByte[ScanPos + 7] == 'T' &amp;&amp; printByte[ScanPos + 8] == 'B'&#xA;                                    &amp;&amp; printByte[ScanPos + 9] == '&gt;' &amp;&amp; printByte[ScanPos + 10] == '&lt;' &amp;&amp; printByte[ScanPos + 11] == 'E'&#xA;                                    &amp;&amp; printByte[ScanPos + 12] == 'T' &amp;&amp; printByte[ScanPos + 13] == 'X' &amp;&amp; printByte[ScanPos + 14] == '&gt;'))&#xA;&#xA;                            {&#xA;&#xA;                                /* an end was found. Cut the byte array at this point */&#xA;&#xA;                                endOfTicket = true;&#xA;&#xA;                                /* copy the end of ticket stream to the ticket file to print */&#xA;&#xA;                                for (int i = 0; i &lt; 15; i++) {&#xA;                                    printTicketByte[printTicketindex] = printByte[ScanPos];&#xA;                                    ScanPos++;&#xA;                                    printTicketindex++;&#xA;                                }&#xA;                            } else {&#xA;&#xA;                                /* if not the end of the ticket copy the bytes over to the one ticket byte array */&#xA;&#xA;                                printTicketByte[printTicketindex] = printByte[ScanPos];&#xA;                                ScanPos++;&#xA;                                printTicketindex++;&#xA;                            }&#xA;&#xA;                            if (endOfTicket) {&#xA;&#xA;                                /* process the one ticket */&#xA;&#xA;                                String fileName = inTran.getTranNbr() + &quot;_&quot; + docTypeId + &quot;_&quot; + ArgoUtils.timeNowMillis() + ScanPos + &quot;.txt&quot;;&#xA;                                LOGGER.info(&quot; MatsonAncPrintDocument FTP Printing Ticket &quot;+fileName);&#xA;                                InputStream is = new ByteArrayInputStream(Arrays.copyOf(printTicketByte, printTicketindex));&#xA;&#xA;                                LOGGER.info(&quot;MatsonAncPrintDocument about to execute MatsonAncFtpAdaptor&quot;);&#xA;                                if (inIsFtpOpened) {&#xA;                                    inMatsonAncFtpAdaptor.sendDocument(fileName, is);&#xA;                                } else {&#xA;                                    LOGGER.info(&quot;MatsonAncPrintDocument,FTP connection not opened so couldn't put the print document in FTP server&quot;);&#xA;                                }&#xA;                            }&#xA;                        }&#xA;                    }&#xA;//          }&#xA;//          finally&#xA;//          {&#xA;//            matsonAncFtpAdaptor.closeConnection();&#xA;//          }&#xA;                }&#xA;            }&#xA;        } catch (BizViolation bizViolation) {&#xA;            RoadBizUtil.appendExceptionChain(bizViolation);&#xA;        }&#xA;    }&#xA;&#xA;    private void printFile(Document inDocument, TruckTransaction inTran, boolean isDamage) {&#xA;        GeneralReference reference = null;&#xA;//    boolean isTrouble = TranStatusEnum.TROUBLE.equals(inOutDao.getTran().getTranStatus());&#xA;        if (isDamage) {&#xA;            reference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;PRINTER_NAME&quot;, &quot;DAMAGES&quot;);&#xA;        } else {&#xA;            reference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;PRINTER_NAME&quot;, &quot;TROUBLE&quot;);&#xA;        }&#xA;        Printer printer = findHardwareDeviceById(reference.getRefValue1()) as Printer;&#xA;        sendFileToPrinter(printer, inDocument, inTran, isDamage);&#xA;    }&#xA;&#xA;    private void sendFileToPrinter(Printer printer, Document inDocument, TruckTransaction inTran, boolean isDamage) {&#xA;&#xA;        byte[] data = inDocument.transformData(printer.getPrinterDriver());&#xA;        if (printer != null) {&#xA;            //email notification for chassis damage.&#xA;            if (isDamage) {&#xA;                GeneralReference emailIdGeneralReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;EMAIL&quot;, &quot;SHOP&quot;);&#xA;                String fromEmailId = emailIdGeneralReference.getRefValue1();&#xA;                String toEmailId = emailIdGeneralReference.getRefValue2();&#xA;                String subject = &quot;Damage Report for Chassis: &quot; + inTran.getTranChsNbr();&#xA;                boolean result = sendEmail(toEmailId, fromEmailId, subject, new String(transformData(inDocument.getDocData()), &quot;UTF-8&quot;));&#xA;                printInShop(inDocument, inTran, isDamage);&#xA;                if (result) {&#xA;                    LOGGER.info(&quot;MatsonAncPrintDocument:Email notification has been sent to &quot; + toEmailId);&#xA;                } else {&#xA;                    LOGGER.error(&quot;MatsonAncPrintDocument:Failed to send Email notification to &quot; + toEmailId);&#xA;                }&#xA;            }&#xA;            PrintUtil.print(data, printer.getHwHostAddress(), printer.getPrtrQueueName(), 1);&#xA;        } else {&#xA;            String msg = &quot;Couldn't find printer for ID. Please configure correct printer IP address in General reference.&quot;;&#xA;            LOGGER.error(msg);&#xA;            RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null, msg));&#xA;            return;&#xA;        }&#xA;    }&#xA;&#xA;    private void printInShop(Document inDocument, TruckTransaction inTran, boolean isDamage) {&#xA;        GeneralReference reference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;PRINTER_NAME&quot;, &quot;SHOP&quot;);&#xA;&#xA;        if (reference != null) {&#xA;            Printer shopPrinter = findHardwareDeviceById(reference.getRefValue1()) as Printer;&#xA;            if (shopPrinter != null) {&#xA;                byte[] data = inDocument.transformData(shopPrinter.getPrinterDriver());&#xA;                PrintUtil.print(data, shopPrinter.getHwHostAddress(), shopPrinter.getPrtrQueueName(), 1);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;/**&#xA; * Send simple email message&#xA; *&#xA; * @param inTo TO email address&#xA; * @param inFrom FROM email address&#xA; * @param inSubject Text in the subject line&#xA; * @param inBody Text in the body of the email&#xA; * @return TRUE/FALSE     True if email has been sent or not&#xA; */&#xA;    public Boolean sendEmail(String inTo, String inFrom, String inSubject, String inBody) {&#xA;        GroovyEmailSender sender = new GroovyEmailSender();&#xA;        MimeMessage msg = sender.createMimeMessage();&#xA;        MimeMessageHelper helper = new MimeMessageHelper(msg, &quot;UTF-8&quot;);&#xA;        helper.setFrom(inFrom);&#xA;        helper.setReplyTo(inFrom);&#xA;        helper.setTo(inTo);&#xA;        helper.setSubject(inSubject);&#xA;        helper.setText(inBody, true);&#xA;        try {&#xA;            sender.send(msg);&#xA;        } catch (Exception inException) {&#xA;            LOGGER.error(&quot;MatsonAncPrintDocument: Exception in email attempt: &quot; + inException);&#xA;            return false;&#xA;        }&#xA;        return true;&#xA;    }&#xA;&#xA;    private class GroovyEmailSender extends JavaMailSenderImpl {&#xA;        GroovyEmailSender() {&#xA;            setMailServerPropertiesFromUserContext();&#xA;        }&#xA;        /**&#xA;         * Sets the Host, Port, and Protocol from the config settings based on the UserContext from the email message.&#xA;         *&#xA;         * @param inEmailMessage&#xA;         */&#xA;        private void setMailServerPropertiesFromUserContext() {&#xA;            try {&#xA;                UserContext userContext = ContextHelper.getThreadUserContext();&#xA;                setHost(MailServerConfig.HOST.getSetting(userContext));&#xA;                setPort(Integer.parseInt(MailServerConfig.PORT.getSetting(userContext)));&#xA;                String protocol = MailServerConfig.PROTOCOL.getSetting(userContext);&#xA;                long timeout = MailServerConfig.TIMEOUT.getValue(userContext);&#xA;                Properties props = new Properties();&#xA;                props.setProperty(&quot;mail.pop3.timeout&quot;, String.valueOf(timeout));&#xA;                setProtocol(protocol);&#xA;                if (&quot;smtps&quot;.equals(protocol)) {&#xA;                    setUsername(MailServerConfig.SMTPS_USER.getSetting(userContext));&#xA;                    setPassword(MailServerConfig.SMTPS_PASSWORD.getSetting(userContext));&#xA;                    props.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);&#xA;                    props.put(&quot;mail.smtps.auth&quot;, &quot;true&quot;);&#xA;                    props.put(&quot;mail.smtp.ssl.enable&quot;, &quot;true&quot;);&#xA;                    props.put(&quot;mail.transport.protocol&quot;, &quot;smtps&quot;);&#xA;                }&#xA;                setJavaMailProperties(props);&#xA;                LOGGER.info(&quot;Initialized SMTP Mail Server Configuration.&quot;);&#xA;            } catch (Throwable throwable) {&#xA;                String error = &quot;Initializing the SMTP Mail Server configuration encountered the following error:&quot;;&#xA;                LOGGER.error(error, throwable);&#xA;                throw new MailSendException(error, throwable);&#xA;            }&#xA;        }&#xA;        private Logger LOGGER = Logger.getLogger(GroovyEmailSender.class);&#xA;    }&#xA;&#xA;    private static byte[] transformData(String inInputData) {&#xA;        PrintRequest printRequest = new PrintRequest();&#xA;        ByteArrayInputStream byteStream = null;&#xA;        try {&#xA;            byte[] xslLayout = htmlLayout.getBytes(Charset.forName(&quot;UTF-8&quot;));&#xA;            byteStream = new ByteArrayInputStream(xslLayout);&#xA;            Resource resource = ResourceUtils.loadSerializableInputStreamResource(byteStream);&#xA;            printRequest.setSource(inInputData.getBytes(Charset.forName(&quot;UTF-8&quot;)));&#xA;            printRequest.setPrintDriverFormat(PrinterDriverEnum.CUSTOM);&#xA;            printRequest.setPrintDriverResource(resource);&#xA;        } catch (IOException ioe) {&#xA;            throw BizFailure.wrap(ioe);&#xA;        }&#xA;        return new PrintServiceManager().convertToDriverFormat(printRequest);&#xA;    }&#xA;&#xA;    private static htmlLayout = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +&#xA;            &quot;&lt;xsl:stylesheet xmlns:xsl=\&quot;http://www.w3.org/1999/XSL/Transform\&quot; xmlns:fo=\&quot;http://www.w3.org/1999/XSL/Format\&quot; xmlns:argo=\&quot;http://www.navis.com/argo\&quot; version=\&quot;1.1\&quot; &gt;\n&quot; +&#xA;            &quot;\t&lt;xsl:template match=\&quot;argo:docDescription\&quot;/&gt;\n&quot; +&#xA;            &quot;\t&lt;xsl:template name=\&quot;argo:docBody\&quot;/&gt;\n&quot; +&#xA;            &quot;\t&lt;xsl:template match=\&quot;argo:truckVisit\&quot;/&gt;\n&quot; +&#xA;            &quot;\t&lt;xsl:template match=\&quot;argo:trkTransaction\&quot;&gt;\n&quot; +&#xA;            &quot;\t\t&lt;html&gt;\n&quot; +&#xA;            &quot;\t\t\t&lt;body&gt;\n&quot; +&#xA;            &quot;\t\t\t\t&lt;table cellspacing =\&quot;20\&quot;&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t&lt;tr&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;Chassis# / Owner:&lt;/td&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;tranChsNbr\&quot;/&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;/td&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t&lt;/tr&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t&lt;tr&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;Container# / Operator:&lt;/td&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;tranCtrNbr\&quot;/&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;/td&gt;\t\t\t\t\t\n&quot; +&#xA;            &quot;\t\t\t\t\t&lt;/tr&gt;\t\t\t\t\t\n&quot; +&#xA;            &quot;\t\t\t\t\t&lt;tr&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;Equipment Type:&lt;/td&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;tranCtrTypeId\&quot;/&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;tranGradeId\&quot; /&gt;\t\t\t\t\t\t\t\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;/td&gt;\t\t\t\t\t\n&quot; +&#xA;            &quot;\t\t\t\t\t&lt;/tr&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t&lt;tr&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;Yard Row:&lt;/td&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;tranFlexString03\&quot;/&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;/td&gt;\t\t\t\t\t\n&quot; +&#xA;            &quot;\t\t\t\t\t&lt;/tr&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t&lt;tr&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;Trucking Code:&lt;/td&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;../argo:truckVisit/tvdtlsTrkCompany\&quot;/&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;/td&gt;\t\t\t\t\t\n&quot; +&#xA;            &quot;\t\t\t\t\t&lt;/tr&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t&lt;tr&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;Trucking Company:&lt;/td&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;../argo:truckVisit/tvdtlsTrkCompanyName\&quot;/&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;/td&gt;\t\t\t\t\t\n&quot; +&#xA;            &quot;\t\t\t\t\t&lt;/tr&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t&lt;tr&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;Driver Name:&lt;/td&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;../argo:truckVisit/tvdtlsDriverName\&quot;/&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;/td&gt;\t\t\t\t\t\n&quot; +&#xA;            &quot;\t\t\t\t\t&lt;/tr&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t&lt;tr&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;Clerk:&lt;/td&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;tranCreator\&quot;/&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;/td&gt;\t\t\t\t\t\n&quot; +&#xA;            &quot;\t\t\t\t\t&lt;/tr&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t&lt;tr&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;Defects:&lt;/td&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t\t&lt;xsl:for-each select=\&quot;argo:tranCtrDmg\&quot;&gt;\t\t\t\n&quot; +&#xA;            &quot;\t\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;dmgitemType\&quot; /&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t\t&lt;/xsl:for-each&gt;\t\t\t\t\t\t\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;/td&gt;\t\t\t\t\t\n&quot; +&#xA;            &quot;\t\t\t\t\t&lt;/tr&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t&lt;tr&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;Comments:&lt;/td&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t\t&lt;xsl:for-each select=\&quot;argo:tranCtrDmg\&quot;&gt;\t\t\t\n&quot; +&#xA;            &quot;\t\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;dmgitemDescription\&quot; /&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t\t&lt;/xsl:for-each&gt;\t\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;/td&gt;\t\t\t\t\t\n&quot; +&#xA;            &quot;\t\t\t\t\t&lt;/tr&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t&lt;tr&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;Date:&lt;/td&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;td style=\&quot;text-align:left;font-family:Arial;font-size=12pt\&quot;&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t\t&lt;xsl:value-of select=\&quot;tranStartTime\&quot;/&gt;\n&quot; +&#xA;            &quot;\t\t\t\t\t\t&lt;/td&gt;\t\t\t\t\t\n&quot; +&#xA;            &quot;\t\t\t\t\t&lt;/tr&gt;\n&quot; +&#xA;            &quot;\t\t\t\t&lt;/table&gt;\n&quot; +&#xA;            &quot;\t\t\t&lt;/body&gt;\n&quot; +&#xA;            &quot;\t\t&lt;/html&gt;\n&quot; +&#xA;            &quot;\t&lt;/xsl:template&gt;\n&quot; +&#xA;            &quot;&lt;/xsl:stylesheet&gt;&quot;;&#xA;&#xA;    /**&#xA;     * Extract the print document page by page then send it to printer&#xA;     * sentToDirectPrinter&#xA;     * @param printer&#xA;     * @param inDocument&#xA;     */&#xA;    private void sentToDirectPrinter(Printer printer, Document inDocument,TruckTransaction inTran,String docTypeId){&#xA;        LOGGER.info(&quot; MatsonAncPrintDocument execute sentToDirectPrinter using FTP logic.&quot;);&#xA;        byte[] printByte = inDocument.transformData(PrinterDriverEnum.CUSTOM);&#xA;&#xA;        int ScanPos = 0;&#xA;&#xA;        /* the indication of the end of a ticket is '&lt;STX&gt;&lt;ETB&gt;&lt;ETX&gt;' */&#xA;&#xA;        while (ScanPos &lt; printByte.size()) {&#xA;&#xA;            /* scan through the ticket file looking for End Of Ticket indicators */&#xA;&#xA;            boolean endOfTicket = false;&#xA;            def printTicketByte = new byte[printByte.size()];&#xA;&#xA;            int printTicketindex = 0;&#xA;&#xA;            /* ScanPos is the postion in the original byte array.  printTicketIndex is the postion in the new byte array&#xA;               with one ticket to be printed&#xA;             */&#xA;&#xA;            while (!endOfTicket &amp;&amp; ScanPos &lt; printByte.size()) {&#xA;&#xA;                /* check if a End Of Ticket indicator is found within the ticket byte array */&#xA;&#xA;                if (ScanPos + 15 &lt; printByte.size()&#xA;                        &amp;&amp; (printByte[ScanPos] == '&lt;' &amp;&amp; printByte[ScanPos + 1] == 'S' &amp;&amp; printByte[ScanPos + 2] == 'T'&#xA;                        &amp;&amp; printByte[ScanPos + 3] == 'X' &amp;&amp; printByte[ScanPos + 4] == '&gt;' &amp;&amp; printByte[ScanPos + 5] == '&lt;'&#xA;                        &amp;&amp; printByte[ScanPos + 6] == 'E' &amp;&amp; printByte[ScanPos + 7] == 'T' &amp;&amp; printByte[ScanPos + 8] == 'B'&#xA;                        &amp;&amp; printByte[ScanPos + 9] == '&gt;' &amp;&amp; printByte[ScanPos + 10] == '&lt;' &amp;&amp; printByte[ScanPos + 11] == 'E'&#xA;                        &amp;&amp; printByte[ScanPos + 12] == 'T' &amp;&amp; printByte[ScanPos + 13] == 'X' &amp;&amp; printByte[ScanPos + 14] == '&gt;'))&#xA;&#xA;                {&#xA;&#xA;                    /* an end was found. Cut the byte array at this point */&#xA;&#xA;                    endOfTicket = true;&#xA;&#xA;                    /* copy the end of ticket stream to the ticket file to print */&#xA;&#xA;                    for (int i = 0; i &lt; 15; i++) {&#xA;                        printTicketByte[printTicketindex] = printByte[ScanPos];&#xA;                        ScanPos++;&#xA;                        printTicketindex++;&#xA;                    }&#xA;                } else {&#xA;&#xA;                    /* if not the end of the ticket copy the bytes over to the one ticket byte array */&#xA;&#xA;                    printTicketByte[printTicketindex] = printByte[ScanPos];&#xA;                    ScanPos++;&#xA;                    printTicketindex++;&#xA;                }&#xA;&#xA;                if (endOfTicket) {&#xA;                    LOGGER.info(&quot; MatsonAncPrintDocument Printing Ticket &quot;+inTran.getTranNbr() + &quot;_&quot; + docTypeId);&#xA;                    /* process the one ticket */&#xA;                    sleep(1000)&#xA;                    PrintUtil.print(printTicketByte, printer.getHwHostAddress(), printer.getPrtrQueueName(), 1);&#xA;&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    private Logger LOGGER = Logger.getLogger(MatsonAncPrintDocument.class);&#xA;}" />
<extension name="MatsonAncValidateGateDocuments" scope="MATSON/ALASKA" type="LIBRARY" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;import com.navis.argo.business.model.DocumentType&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.navis.external.framework.AbstractExtensionCallback&#xA;import com.navis.framework.AllOtherFrameworkPropertyKeys&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.util.message.MessageLevel&#xA;import com.navis.road.RoadPropertyKeys&#xA;import com.navis.road.business.model.GateLane&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; Class for validation. This class is being used from MatsonAncCreateDocument and MatsonAncPrintDocument.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 07/17/2015&#xA; *&#xA; * Date: 07/17/2015: 5:41 PM&#xA; * JIRA: CSDV-3024&#xA; * SFDC: 00138337&#xA; * Called from: Gate Configuration&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; *&#xA; * Peter Seiler&#xA; * Date: 01/28/2016&#xA; * JIRA: CSDV-3024&#xA; * Allow for 'direct print' lane set up.&#xA; *&#xA; */&#xA;class MatsonAncValidateGateDocuments extends AbstractExtensionCallback {&#xA;  public boolean isValidationSuccess(TransactionAndVisitHolder inOutDao) {&#xA;    LOGGER.setLevel(Level.INFO);&#xA;    LOGGER.info(&quot; MatsonAncValidateGateDocuments execute Stared.&quot;);&#xA;    try {&#xA;      GeneralReference generalReferenceDamages = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;DAMAGES&quot;);&#xA;      if (generalReferenceDamages == null || generalReferenceDamages.getRefValue1() == null) {&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                &quot;Please configure Document Type Id in General Reference for DAMAGES.&quot;));&#xA;        return false;&#xA;      }&#xA;      GeneralReference generalReferenceTir = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;TIR&quot;);&#xA;      if (generalReferenceTir == null || generalReferenceTir.getRefValue1() == null) {&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                &quot;Please configure Document Type Id in General Reference for TIR.&quot;));&#xA;        return;&#xA;      }&#xA;      GeneralReference generalReferenceTirLoad = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;TIR_LOAD&quot;);&#xA;      if (generalReferenceTirLoad == null || generalReferenceTirLoad.getRefValue1() == null) {&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                &quot;Please configure Document Type Id in General Reference for TIR_LOAD.&quot;));&#xA;        return false;&#xA;      }&#xA;      GeneralReference generalReferenceDeliveryReceipt = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;DR&quot;);&#xA;      if (generalReferenceDeliveryReceipt == null || generalReferenceDeliveryReceipt.getRefValue1() == null) {&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                &quot;Please configure Document Type Id in General Reference for DR.&quot;));&#xA;        return false;&#xA;      }&#xA;      GeneralReference generalReferenceDNB = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;DNB&quot;);&#xA;      if (generalReferenceDNB == null || generalReferenceDNB.getRefValue1() == null) {&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                &quot;Please configure Document Type Id in General Reference for DNB.&quot;));&#xA;        return false;&#xA;      }&#xA;&#xA;      GeneralReference emailIdGeneralReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;EMAIL&quot;, &quot;NOTIFICATION&quot;);&#xA;      if (emailIdGeneralReference == null) {&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                &quot;please configure General Reference for  Notification(Damage) Email Id.&quot;));&#xA;        return false;&#xA;      }&#xA;      if (emailIdGeneralReference.getRefValue1() == null || emailIdGeneralReference.getRefValue2() == null) {&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                &quot;please configure From and To Email Id in General Reference(Notification).&quot;));&#xA;        return false;&#xA;      }&#xA;&#xA;      GeneralReference multiStopUrlReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;MULTISTOP&quot;, &quot;URL&quot;);&#xA;      if (multiStopUrlReference == null || multiStopUrlReference.getRefValue1() == null) {&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                &quot;please configure multistop URL in General Reference.&quot;));&#xA;        return false;&#xA;      }&#xA;&#xA;      GeneralReference multiStopCommodityIdReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;MULTISTOP&quot;, &quot;COMMODITY_ID&quot;);&#xA;      if (multiStopCommodityIdReference == null || multiStopCommodityIdReference.getRefValue1() == null) {&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                &quot;please configure multistop Commodity Id in General Reference.&quot;));&#xA;        return false;&#xA;      }&#xA;&#xA;      GeneralReference damagePrinterIpReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;PRINTER_NAME&quot;, &quot;DAMAGES&quot;);&#xA;      if (damagePrinterIpReference == null || damagePrinterIpReference.getRefValue1() == null) {&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                &quot;please configure printer IP address for Damages in General Reference.&quot;));&#xA;        return false;&#xA;      }&#xA;&#xA;      GeneralReference troubleIpReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;PRINTER_NAME&quot;, &quot;TROUBLE&quot;);&#xA;      if (troubleIpReference == null || troubleIpReference.getRefValue1() == null) {&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                &quot;please configure printer IP address for Trouble in General Reference.&quot;));&#xA;        return false;&#xA;      }&#xA;&#xA;      GateLane lane = inOutDao.getTv().getTvdtlsExitLane();&#xA;      if (lane == null) {&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                &quot;Couldn't find Gate Exit Lane.&quot;));&#xA;        return false;&#xA;      }&#xA;&#xA;      GeneralReference ftpGeneralReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;FTP&quot;, &quot;INFO&quot;, lane.getLaneId());&#xA;&#xA;      /* if no general reference found for FTP check for Direct Print */&#xA;&#xA;      if (ftpGeneralReference == null) {&#xA;        ftpGeneralReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DIRECT PRINT&quot;, &quot;INFO&quot;, lane.getLaneId());&#xA;      }&#xA;&#xA;      if (ftpGeneralReference == null) {&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                &quot;Please configure FTP or DIRECT PRINT Connection Info in General Reference for Lane Id.&quot; + lane.getLaneId()));&#xA;        return false;&#xA;      }&#xA;&#xA;      if (ftpGeneralReference.getRefValue1() == null) {&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                &quot;Please configure FTP IP address in General Reference.&quot;));&#xA;        return false;&#xA;      }&#xA;&#xA;      if (ftpGeneralReference.getRefValue2() == null &amp;&amp; ftpGeneralReference.getRefId1() == &quot;FTP&quot;) {&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                &quot;Please configure FTP directory in General Reference.&quot;));&#xA;        return false;&#xA;      }&#xA;&#xA;      if (ftpGeneralReference.getRefValue3() == null &amp;&amp; ftpGeneralReference.getRefId1() == &quot;FTP&quot;) {&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                &quot;Please configure FTP user Id in General Reference.&quot;));&#xA;        return false;&#xA;      }&#xA;&#xA;      if (ftpGeneralReference.getRefValue4() == null &amp;&amp; ftpGeneralReference.getRefId1() == &quot;FTP&quot;) {&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                &quot;Please configure FTP user password in General Reference.&quot;));&#xA;        return false;&#xA;      }&#xA;&#xA;      if (ftpGeneralReference.getRefValue5() == null &amp;&amp; ftpGeneralReference.getRefId1() == &quot;FTP&quot;) {&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                &quot;Please configure FTP default time out in General Reference.&quot;));&#xA;        return false;&#xA;      }&#xA;&#xA;      if (ftpGeneralReference.getRefValue6() == null &amp;&amp; ftpGeneralReference.getRefId1() == &quot;FTP&quot;) {&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                &quot;Please configure FTP read write time out in General Reference.&quot;));&#xA;        return false;&#xA;      }&#xA;&#xA;      GeneralReference directPrintGeneralReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DIRECT PRINT&quot;, &quot;INFO&quot;, lane.getLaneId());;&#xA;      if (directPrintGeneralReference == null) {&#xA;        GeneralReference localGeneralReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;LOCAL_PATH&quot;, lane.getLaneId());&#xA;        if (localGeneralReference == null) {&#xA;          RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                  &quot;Please create a General Reference for Lane Id.&quot; + lane.getLaneId() + &quot; to save tickets locally.&quot;));&#xA;          return false;&#xA;        }&#xA;        if (localGeneralReference.getRefValue1() == null) {&#xA;          RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                  &quot;Please configure local path(to save tickets) in RefValue1 in General Reference for Lane Id.&quot; + lane.getLaneId()));&#xA;          return false;&#xA;        }&#xA;      }&#xA;&#xA;      DocumentType docType = DocumentType.findDocumentType(generalReferenceDamages.getRefValue1());&#xA;      if (docType == null) {&#xA;        RoadBizUtil.getMessageCollector().appendMessage(&#xA;                MessageLevel.WARNING, RoadPropertyKeys.GATE__PRINT_INVALID_DOC_TYPE, null, [generalReferenceDamages.getRefValue1()]);&#xA;        return false;&#xA;      }&#xA;      docType = DocumentType.findDocumentType(generalReferenceTir.getRefValue1());&#xA;      if (docType == null) {&#xA;        RoadBizUtil.getMessageCollector().appendMessage(&#xA;                MessageLevel.WARNING, RoadPropertyKeys.GATE__PRINT_INVALID_DOC_TYPE, null, [generalReferenceTir.getRefValue1()]);&#xA;        return false;&#xA;      }&#xA;      docType = DocumentType.findDocumentType(generalReferenceTirLoad.getRefValue1());&#xA;      if (docType == null) {&#xA;        RoadBizUtil.getMessageCollector().appendMessage(&#xA;                MessageLevel.WARNING, RoadPropertyKeys.GATE__PRINT_INVALID_DOC_TYPE, null, [generalReferenceTirLoad.getRefValue1()]);&#xA;        return false;&#xA;      }&#xA;      docType = DocumentType.findDocumentType(generalReferenceDeliveryReceipt.getRefValue1());&#xA;      if (docType == null) {&#xA;        RoadBizUtil.getMessageCollector().appendMessage(&#xA;                MessageLevel.WARNING, RoadPropertyKeys.GATE__PRINT_INVALID_DOC_TYPE, null, [generalReferenceDeliveryReceipt.getRefValue1()]);&#xA;        return false;&#xA;      }&#xA;      docType = DocumentType.findDocumentType(generalReferenceDNB.getRefValue1());&#xA;      if (docType == null) {&#xA;        RoadBizUtil.getMessageCollector().appendMessage(&#xA;                MessageLevel.WARNING, RoadPropertyKeys.GATE__PRINT_INVALID_DOC_TYPE, null, [generalReferenceDNB.getRefValue1()]);&#xA;        return false;&#xA;      }&#xA;      GeneralReference companyNameGeneralReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;LABEL&quot;, &quot;COMPANY_NAME&quot;);&#xA;      if (companyNameGeneralReference == null) {&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                &quot;MatsonAncValidateGateDocuments: Please configure Company Name(Label1 in Data Value1 and Label2 in Data Value2) in General Reference.&quot;));&#xA;        return false;&#xA;      }&#xA;      if (companyNameGeneralReference.getRefValue1() == null) {&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                &quot;MatsonAncValidateGateDocuments: Please configure Label1(Company Name) in Data Value1 in General Reference.&quot;));&#xA;        return false;&#xA;      }&#xA;      if (companyNameGeneralReference.getRefValue2() == null) {&#xA;        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                &quot;MatsonAncValidateGateDocuments: Please configure Label2(Legal Form) in Data Value2 in General Reference.&quot;));&#xA;        return false;&#xA;      }&#xA;    } finally {&#xA;      LOGGER.info(&quot; MatsonAncValidateGateDocuments execute completed.&quot;);&#xA;    }&#xA;    return true;&#xA;  }&#xA;  private Logger LOGGER = Logger.getLogger(MatsonAncValidateGateDocuments.class);&#xA;}" />
<extension name="MATSyncReeferTempFields" scope="MATSON/ALASKA" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2016 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.ReeferRqmnts&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.EventFieldChange&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;/**&#xA; * Copies the reefer temp setting flex field (ufvFlexSting07) to the reefer requirements and head temperature fields&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 28-Jan-2016&#xA; * JIRA: CSDV-3026&#xA; * SFDC: 138256&#xA; *&#xA; */&#xA;&#xA;public class MATSyncReeferTempFields extends AbstractGeneralNoticeCodeExtension&#xA;{&#xA;    private Logger LOGGER = Logger.getLogger(MATSyncReeferTempFields.class);&#xA;&#xA;    public void execute(GroovyEvent inEvent)&#xA;&#xA;    {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot;MATSyncReeferTempFields Execution Started&quot;);&#xA;&#xA;        Unit ThisUnit = (Unit)inEvent.getEntity();&#xA;        if (ThisUnit == null)&#xA;        {&#xA;            LOGGER.error(&quot;Reference to Unit not found!&quot;);&#xA;            return;&#xA;        }&#xA;&#xA;        /* get the event */&#xA;&#xA;        Event ThisEvent = inEvent.getEvent();&#xA;&#xA;        EventFieldChange ThisChange = null;&#xA;&#xA;        Set&lt;EventFieldChange&gt; TheseChanges = ThisEvent.evntFieldChanges as Set&lt;EventFieldChange&gt;;&#xA;&#xA;        /* See if the 'Reefer Temp' flex field (ufvFlexString07) is updated */&#xA;&#xA;        for (EventFieldChange TestChange : TheseChanges)&#xA;        {&#xA;            if ((java.lang.String) TestChange.getMetafieldId() == &quot;ufvFlexString07&quot;)&#xA;            {&#xA;                ThisChange = TestChange;&#xA;            }&#xA;        }&#xA;&#xA;        /* reefer temp flex was changed */&#xA;&#xA;        if (ThisChange != null)&#xA;        {&#xA;&#xA;            /* get the reefer requirements entity */&#xA;&#xA;            GoodsBase ThisGoods = ThisUnit.getUnitGoods();&#xA;&#xA;            if (ThisGoods != null)&#xA;            {&#xA;                ReeferRqmnts ThisRfrReq = ThisGoods.getGdsReeferRqmnts();&#xA;&#xA;                if (ThisRfrReq != null)&#xA;                {&#xA;&#xA;                    /* if the new setting is numeric place that value in the Minimum tempuraue and the reefer reqirements filed. */&#xA;&#xA;                    if(ThisChange.getNewVal().isNumber())&#xA;                    {&#xA;                        Double ThisTempValue = ThisChange.getNewVal().toDouble();&#xA;                        ThisRfrReq.setRfreqTempLimitMinC(this.fahrenheitToCelsius(ThisTempValue));&#xA;                        ThisRfrReq.setRfreqTempRequiredC(this.fahrenheitToCelsius(ThisTempValue));&#xA;                    }&#xA;                    else&#xA;                    {&#xA;                        /* if the new reefer value is not numeric clear the reefer requirements */&#xA;&#xA;                        ThisRfrReq.setRfreqTempLimitMinC(null);&#xA;                        ThisRfrReq.setRfreqTempRequiredC(null);&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    private Double fahrenheitToCelsius(Double fahrenheit)&#xA;    {&#xA;        Double result = (fahrenheit - 32) * 5.0/9;&#xA;        return result;&#xA;    }&#xA;}&#xA;" />
<extension name="MATSetGateCarrierVisit" scope="MATSON/ALASKA" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.model.TruckVisitDetails&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;//import com.navis.argo.ContextHelper&#xA;&#xA;/**&#xA; * This groovy customizes the carrier visit used in gate transactions&#xA; *&#xA; * Author: Bruno Chiarini&#xA; * Date: 19-Sep-2015&#xA; * JIRA: CSDV-3258&#xA; * SFDC: 145538&#xA; *&#xA; * -----------------------------------------------------------------&#xA; * Updated, cleared code and added more information in log&#xA; * Author: Bruno Chiarini&#xA; * Date: 23-Sep-2015&#xA; * -----------------------------------------------------------------&#xA; * Changed carrier visit id per customer requirement. From date to driver name.&#xA; * Author: Bruno Chiarini&#xA; * Date: 03-Oct-2015&#xA; *&#xA; */&#xA;&#xA;public class MATSetGateCarrierVisit extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;    private Logger LOGGER = Logger.getLogger(MATSetGateCarrierVisit.class);&#xA;&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot;MATSetCarrierVisit Execution Started.&quot;);&#xA;&#xA;        /* Execute the built-in logic got the business task. */&#xA;&#xA;        executeInternal(inDao);&#xA;&#xA;        // get current transaction&#xA;        TruckTransaction thisTran = inDao.getTran();&#xA;        if (thisTran == null)&#xA;        {&#xA;            LOGGER.error(&quot;Truck Transaction not found!&quot;);&#xA;            return;&#xA;        }&#xA;        //LOGGER.info(&quot;Truck Transaction: &quot; + ThisTran);&#xA;&#xA;        // get transaction's truck visit&#xA;        TruckVisitDetails thisTruckVisit = thisTran.getTranTruckVisit();&#xA;        if (thisTruckVisit == null)&#xA;        {&#xA;            LOGGER.error(&quot;Truck Visit not found. &quot;&#xA;                    + &quot;Gate Transaction [&quot; + thisTran.getTranNbr() + &quot;], &quot;&#xA;                    + ( (!thisTran.isBareChassis())&#xA;                        ? (&quot;Unit [&quot; + thisTran.getTranCtrNbr())&#xA;                        : (&quot;Chassis [&quot; + thisTran.getTranChsNbr() )&#xA;                    )&#xA;                    + &quot;]&quot;);&#xA;            return;&#xA;        }&#xA;        //LOGGER.info(&quot;Truck Visit: &quot; + ThisTruckVisit);&#xA;&#xA;        // get truck visit's carrier visit&#xA;        CarrierVisit thisCV = thisTruckVisit.getCv(thisTruckVisit);&#xA;        if (thisCV == null)&#xA;        {&#xA;            LOGGER.error(&quot;Carrier visit not found. &quot;&#xA;                    + &quot;Gate Transaction [&quot; + thisTran.getTranNbr() + &quot;], &quot;&#xA;                    + ( (!thisTran.isBareChassis())&#xA;                            ? (&quot;Unit [&quot; + thisTran.getTranCtrNbr())&#xA;                            : (&quot;Chassis [&quot; + thisTran.getTranChsNbr() )&#xA;                      )&#xA;                    + &quot;]&quot;);&#xA;            return;&#xA;        }&#xA;&#xA;        // this no longer required, changed from date to driver's name&#xA;//        Calendar cal = Calendar.getInstance();&#xA;//        Date thisDate = cal.time;                                                   //get current time&#xA;&#xA;        String truckingCoId = thisTruckVisit.getTvdtlsTrkCompany().getBzuId();&#xA;&#xA;//        if (truckingCoId.length() &gt; 10)&#xA;//        {&#xA;//            truckingCoId = truckingCoId.substring(0, 9);&#xA;//        }&#xA;&#xA;//        thisCV.updateCvId( truckingCoId                     //Trucking company id&#xA;//            + &quot;-&quot; + thisDate.format(&quot;ddMMM&quot;, ContextHelper.getThreadFacility().getTimeZone()) );  //Transaction Date&#xA;&#xA;        //new code to handle driver's name instead of date&#xA;        String newCVId = truckingCoId;&#xA;        String driverName = thisTruckVisit.getTvdtlsDriverName();&#xA;        if (driverName != null)&#xA;        {&#xA;            newCVId += &quot;-&quot; + driverName;  //append driver name&#xA;        }&#xA;&#xA;        //trim to a max of 16 chars (max length allowed for carrier visit id)&#xA;        if (newCVId.length() &gt; 16) {&#xA;            newCVId = newCVId.substring(0,16);&#xA;        }&#xA;&#xA;        thisCV.updateCvId(newCVId);&#xA;&#xA;        LOGGER.info(&quot;Carrier Visit Id set to [&quot;  + thisCV.getCvId()&#xA;                + &quot;] for transaction [&quot; + thisTran.getTranNbr() + &quot;], &quot;&#xA;                + ( (!thisTran.isBareChassis())&#xA;                    ? (&quot;Unit [&quot; + thisTran.getTranCtrNbr())&#xA;                    : (&quot;Chassis [&quot; + thisTran.getTranChsNbr() )&#xA;                    )&#xA;                + &quot;]&quot;);&#xA;        LOGGER.info(&quot;MATSetCarrierVisit Execution Ended.&quot;);&#xA;    }&#xA;&#xA;}" />
<extension name="MatsonAncCreateDocument" scope="MATSON/ALASKA" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;&#xA;import com.navis.argo.*&#xA;import com.navis.argo.business.atoms.EquipRfrTypeEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.model.*&#xA;import com.navis.argo.business.reference.*&#xA;import com.navis.edi.business.util.XmlUtil&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.AllOtherFrameworkPropertyKeys&#xA;import com.navis.framework.business.atoms.MassUnitEnum&#xA;import com.navis.framework.business.atoms.TemperatureUnitEnum&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.util.DateUtil&#xA;import com.navis.framework.util.internationalization.ITranslationContext&#xA;import com.navis.framework.util.internationalization.TranslationUtils&#xA;import com.navis.framework.util.time.TimeUtils&#xA;import com.navis.framework.util.unit.UnitUtils&#xA;import com.navis.inventory.business.imdg.HazardItem&#xA;import com.navis.inventory.business.imdg.HazardItemPlacard&#xA;import com.navis.inventory.business.imdg.ImdgClass&#xA;import com.navis.inventory.business.imdg.Placard&#xA;import com.navis.inventory.business.units.ReeferRqmnts&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipDamageItem&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.road.RoadBizMetafield&#xA;import com.navis.road.RoadPropertyKeys&#xA;import com.navis.road.business.appointment.model.GateAppointment&#xA;import com.navis.road.business.appointment.model.TruckVisitAppointment&#xA;import com.navis.road.business.atoms.TranStatusEnum&#xA;import com.navis.road.business.atoms.TranSubTypeEnum&#xA;import com.navis.road.business.atoms.TruckerFriendlyTranSubTypeEnum&#xA;import com.navis.road.business.model.*&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.road.business.util.TransactionTypeUtil&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import com.navis.road.portal.configuration.CachedGateConfiguration&#xA;import com.navis.road.portal.configuration.CachedGateStage&#xA;import org.apache.commons.io.IOUtils&#xA;import org.apache.commons.lang.StringUtils&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;import org.apache.xmlbeans.XmlException&#xA;import org.apache.xmlbeans.XmlObject&#xA;import org.jetbrains.annotations.Nullable&#xA;import org.w3c.dom.Element&#xA;import org.w3c.dom.Node&#xA;import org.w3c.dom.NodeList&#xA;&#xA;import java.math.RoundingMode&#xA;import java.text.DateFormat&#xA;import java.text.DecimalFormat&#xA;import java.text.SimpleDateFormat&#xA;&#xA;/**&#xA; Create gate document.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 07/17/2015&#xA; *&#xA; * Date: 07/17/2015: 5:41 PM&#xA; * JIRA: CSDV-3024&#xA; * SFDC: 00138337&#xA; * Called from: Gate Configuration&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;class MatsonAncCreateDocument extends AbstractGateTaskInterceptor implements EGateTaskInterceptor {&#xA;&#xA;    /**&#xA;     * Create document based on the configuration docTypeId parameter&#xA;     *&#xA;     * @param inOutDao&#xA;     */&#xA;    public void execute(TransactionAndVisitHolder inOutDao) {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot; MatsonAncCreateDocument execute Stared.&quot;);&#xA;        /**&#xA;         * Before continuing, make sure there are no errors exist in the main session&#xA;         */&#xA;        if (!RoadBizUtil.getMessageCollector().hasError() &amp;&amp; !inOutDao.hasTransaction()) {&#xA;            LOGGER.error(&quot; MatsonAncCreateDocument: No truck transaction found or transaction has one or more errors.&quot;);&#xA;            return;&#xA;        }&#xA;        def matsonAncValidateGateDocuments = getLibrary(&quot;MatsonAncValidateGateDocuments&quot;);&#xA;        LOGGER.info(&quot;MatsonAncCreateDocument about to execute MatsonAncValidateGateDocuments&quot;);&#xA;        if (!matsonAncValidateGateDocuments.isValidationSuccess(inOutDao)) {&#xA;            return;&#xA;        }&#xA;&#xA;        TruckTransaction tran = inOutDao.getTran();&#xA;        boolean isChsDamaged = tran.getTranChsDmg() != null &amp;&amp; tran.getTranChsDmg().getDmgsItems() != null &amp;&amp;&#xA;                !tran.getTranChsDmg().getDmgsItems().isEmpty();&#xA;        GeneralReference generalReferenceDamages = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;DAMAGES&quot;);&#xA;        GeneralReference generalReferenceTir = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;TIR&quot;);&#xA;        GeneralReference generalReferenceTirLoad = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;TIR_LOAD&quot;);&#xA;        GeneralReference generalReferenceDeliveryReceipt = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;DR&quot;);&#xA;        GeneralReference generalReferenceDNB = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;DNB&quot;);&#xA;        GeneralReference multiStopCommodityIdReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;MULTISTOP&quot;, &quot;COMMODITY_ID&quot;);&#xA;        String cmdyId = tran.getTranCommodity() != null ? tran.getTranCommodity().getCmdyId() : null;&#xA;        boolean isMultiStop = cmdyId != null &amp;&amp;&#xA;                (cmdyId.equals(multiStopCommodityIdReference.getRefValue1()) || cmdyId.equals(multiStopCommodityIdReference.getRefValue2()) ||&#xA;                        cmdyId.equals(multiStopCommodityIdReference.getRefValue3()) || cmdyId.equals(multiStopCommodityIdReference.getRefValue4()));&#xA;&#xA;        if (tran.isReceival()) {&#xA;            //1) create TIR document for Receival transaction&#xA;            DocumentType docType = DocumentType.findDocumentType(generalReferenceTir.getRefValue1());&#xA;            createTranDocument(inOutDao, docType, isMultiStop, null, &quot;Page: 1 of 1&quot;);&#xA;&#xA;            //2) create damage document&#xA;            if (isChsDamaged) {&#xA;                docType = DocumentType.findDocumentType(generalReferenceDamages.getRefValue1());&#xA;                createTranDocument(inOutDao, docType, isMultiStop, null, null);&#xA;            }&#xA;        } else if (tran.isDelivery()) {&#xA;            _document = null;&#xA;            //1) create TIR document for delivery transaction&#xA;            DocumentType docType = DocumentType.findDocumentType(generalReferenceTir.getRefValue1());&#xA;            DocumentDocument tirDocument = createTranDocument(inOutDao, docType, isMultiStop, null, null);&#xA;&#xA;            //2) create TIR Load Info &amp; Delivery Receipt&#xA;            if (isMultiStop) {&#xA;                docType = DocumentType.findDocumentType(generalReferenceTirLoad.getRefValue1());&#xA;                String ctrNbr = tran.getTranContainer() != null ? tran.getTranContainer().getEqIdFull() : tran.getTranCtrNbr();&#xA;                String bookingNbr = null;&#xA;                Unit unit = tran.getTranUnit();&#xA;                //first look for BL nbr, if exist then use it to call webservice. If BL is null then look for booking Nbr.&#xA;                bookingNbr = getBLNbr(tran);&#xA;                if (bookingNbr == null) {&#xA;                    if (tran.getTranEqoNbr() != null) {&#xA;                        bookingNbr = tran.getTranEqoNbr();&#xA;                    } else if (unit != null &amp;&amp; unit.getUnitPrimaryUe().getUeDepartureOrderItem() != null) {&#xA;                        bookingNbr = unit.getUnitPrimaryUe().getUeDepartureOrderItem().getEqboiOrder().getEqboNbr();&#xA;                    }&#xA;                }&#xA;                if (ctrNbr != null &amp;&amp; bookingNbr != null) {&#xA;                    if (bookingNbr.length() &gt; 7) {&#xA;                        bookingNbr = bookingNbr.substring(0, 7);&#xA;                    }&#xA;                    println(&quot;Booking Number : &quot; + bookingNbr);&#xA;                    //Element rootElement = getMultiStopRootElement(ctrNbr, bookingNbr);&#xA;                    Element rootElement = null;&#xA;                    //if record doesn't exist then look without check digit.&#xA;                    // if (rootElement == null || rootElement.getChildNodes().length == 0) {&#xA;                    //As per Bruno's suggestion, changed code to looking into the web service without container check digit.&#xA;                    Container ctr = Container.findContainerWithoutValidation(ctrNbr);&#xA;                    if (ctr != null) {&#xA;                        rootElement = getMultiStopRootElement(ctr.getEqIdNoCheckDigit(), bookingNbr);&#xA;                    }&#xA;//          }&#xA;                    if (rootElement != null) {&#xA;                        initTotalPagesForMultiStop(rootElement);&#xA;                        _currentPage = 1;&#xA;                        NodeList stopElement = rootElement.getElementsByTagName(&quot;stop&quot;);&#xA;                        if (stopElement != null) {&#xA;                            for (int i = stopElement.getLength() - 1; i &gt;= 0; i--) {&#xA;                                if (hasTIRLOAD(stopElement.item(i))) {&#xA;                                    createTranDocument(inOutDao, docType, isMultiStop, stopElement.item(i), null);&#xA;                                } else {&#xA;                                    //If no TIR LOAD is printed then print DIR alone.&#xA;                                    docType = DocumentType.findDocumentType(generalReferenceDeliveryReceipt.getRefValue1());&#xA;                                    createTranDocument(inOutDao, docType, isMultiStop, stopElement.item(i), null);&#xA;                                }&#xA;                            }&#xA;                        }&#xA;                    }&#xA;                } else {&#xA;                    LOGGER.error(&#xA;                            &quot;MatsonAncCreateDocument, couldn't create multistop ticket. Either container nbr[&quot; + ctrNbr + &quot;] or booking nbr[&quot; + bookingNbr +&#xA;                                    &quot;] is null&quot;);&#xA;                }&#xA;            } else if (tran.isHazardous()) {&#xA;                docType = DocumentType.findDocumentType(generalReferenceTirLoad.getRefValue1());&#xA;                createTranDocument(inOutDao, docType, isMultiStop, null, null);&#xA;            } else {&#xA;                // Printer Enhancement DO NOT PRINT DELIVERY RECEIPT FOR DM(Delivery Empty)&#xA;                if (!(TranSubTypeEnum.DM.equals(tran.getTranSubType()) || TranSubTypeEnum.DC.equals(tran.getTranSubType()))) {&#xA;                    //3) create Delivery Receipt Alone(without TIR LOAD)&#xA;                    docType = DocumentType.findDocumentType(generalReferenceDeliveryReceipt.getRefValue1());&#xA;                    createTranDocument(inOutDao, docType, isMultiStop, null, &quot;Page: 2 of 2&quot;);&#xA;                }&#xA;            }&#xA;&#xA;            // Update page no. for TIR&#xA;            int pageCount = 0;&#xA;            if (_totalPages == 0) {&#xA;                pageCount = 2;//TIR+DR&#xA;            } else {&#xA;                pageCount = _totalPages;&#xA;            }&#xA;            if (tirDocument != null &amp;&amp; _document != null) {&#xA;                tirDocument.getDocument().getDocBody().getTrkTransactionList().get(0).setTranUnitFlexString02(&quot;Page: 1 of &quot; + pageCount);&#xA;                String xmlText = tirDocument.xmlText();&#xA;                validateXML(xmlText);&#xA;                _document.setDocData(xmlText);&#xA;                HibernateApi.getInstance().update(_document)&#xA;            }&#xA;            //4) create DNB&#xA;            boolean isDoNotBackLoad = tran.getTranUfv() != null &amp;&amp;&#xA;                    (&quot;Y&quot;.equals(tran.getTranUfv().getUfvFlexString09()) || &quot;Yes&quot;.equals(tran.getTranUfv().getUfvFlexString09()));&#xA;            if (isDoNotBackLoad) {&#xA;                docType = DocumentType.findDocumentType(generalReferenceDNB.getRefValue1());&#xA;                createTranDocument(inOutDao, docType, isMultiStop, null, null);&#xA;            }&#xA;&#xA;            //5) create damage document&#xA;            if (isChsDamaged) {&#xA;                docType = DocumentType.findDocumentType(generalReferenceDamages.getRefValue1());&#xA;                createTranDocument(inOutDao, docType, isMultiStop, null, null);&#xA;            }&#xA;        }&#xA;&#xA;        LOGGER.info(&quot; MatsonAncCreateDocument execute Completed.&quot;);&#xA;    }&#xA;&#xA;    private static Element getMultiStopRootElement(String inUnitNbr, String inBookingNbr) {&#xA;        GeneralReference multiStopUrlReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;MULTISTOP&quot;, &quot;URL&quot;);&#xA;        String urlString = multiStopUrlReference.getRefValue2() != null ? multiStopUrlReference.getRefValue1() + multiStopUrlReference.getRefValue2() :&#xA;                multiStopUrlReference.getRefValue1();&#xA;        URL url = new URL(urlString + &quot;cn=&quot; + inUnitNbr + &quot;&amp;bn=&quot; + inBookingNbr);&#xA;        println(&quot;Multistop : &quot; + url.toString());&#xA;        URLConnection connection = url.openConnection();&#xA;        InputStream stream = connection.getInputStream();&#xA;        if (stream != null) {&#xA;            String StringFromInputStream = IOUtils.toString(stream, &quot;UTF-8&quot;);&#xA;            return XmlUtil.getXmlRootElement(StringFromInputStream);&#xA;        } else {&#xA;            RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                    &quot;No multistop record found from webservice for Unit:&quot; + inUnitNbr + &quot; and Booking Nbr:&quot; + inBookingNbr));&#xA;            return null;&#xA;        }&#xA;    }&#xA;&#xA;    private DocumentDocument createTranDocument(TransactionAndVisitHolder inOutDao, DocumentType inDocType, boolean inIsMultiStop,&#xA;                                                Node inMultiStopNode, String inPageNbr) {&#xA;        TruckTransaction tran = inOutDao.getTran();&#xA;        DocumentDocument documentdoc = null;&#xA;        if (inDocType.isDocumentRequired(&#xA;                tran.getTranIsHazard(),&#xA;                tran.getTranUnit() != null &amp;&amp; tran.getTranUnit().isReefer(),&#xA;                TranStatusEnum.TROUBLE.equals(tran.getTranStatus()))&#xA;        ) {&#xA;            documentdoc = DocumentDocument.Factory.newInstance();&#xA;            DocumentDocument.Document doc = documentdoc.addNewDocument();&#xA;            DocDescriptionDocument.DocDescription descr = doc.addNewDocDescription();&#xA;            descr.setDocType(inDocType.getDoctypePk().toString());&#xA;            descr.setDocName(inDocType.getDoctypeId());&#xA;&#xA;            addDocBody(doc, inOutDao, inIsMultiStop, inDocType, inMultiStopNode, inPageNbr);&#xA;            MessagesDocument.Messages msgs = doc.addNewMessages();&#xA;            String xmlText = documentdoc.xmlText();&#xA;            validateXML(xmlText);&#xA;            String documentStageId = tran.getTranStageId();&#xA;            if (inOutDao.getParameters() != null &amp;&amp; inOutDao.getParameters().containsKey(RoadBizMetafield.GATE_API_STAGE_ID)) {&#xA;                String apiGateStageId = (String) inOutDao.getParameters().get(RoadBizMetafield.GATE_API_STAGE_ID);&#xA;                if (inOutDao.getTv() != null &amp;&amp; inOutDao.getTv().getTvdtlsGate() != null) {&#xA;                    CachedGateConfiguration config = inOutDao.getTv().getGateConfiguration();&#xA;                    if (apiGateStageId != null) {&#xA;                        boolean isExchangeLaneAssignmentBooth = config.getStage(apiGateStageId).isExchangeLaneAssignmentBooth();&#xA;                        if (isExchangeLaneAssignmentBooth) {&#xA;                            documentStageId = apiGateStageId;&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;            GeneralReference generalReferenceTir = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;TIR&quot;);&#xA;            if (generalReferenceTir.getRefValue1().equals(inDocType.getDoctypeId())) {&#xA;                _document = saveDocument(&#xA;                        inDocType,&#xA;                        inOutDao.getDocumentBatchNbr(),&#xA;                        documentStageId,&#xA;                        tran,&#xA;                        xmlText,&#xA;                );&#xA;            } else {&#xA;                saveDocument(&#xA;                        inDocType,&#xA;                        inOutDao.getDocumentBatchNbr(),&#xA;                        documentStageId,&#xA;                        tran,&#xA;                        xmlText,&#xA;                );&#xA;            }&#xA;            inOutDao.addDocument(tran.getTranGkey(), _document);&#xA;        }&#xA;        return documentdoc;&#xA;    }&#xA;&#xA;    /**&#xA;     * This method validates the generated xml&#xA;     *&#xA;     * @param inXmlDoc : Generated Xml document.&#xA;     */&#xA;    private static void validateXML(String inXmlDoc) throws BizFailure {&#xA;        try {&#xA;            XmlObject.Factory.parse(inXmlDoc);&#xA;        } catch (XmlException e) {&#xA;            throw BizFailure.create(RoadPropertyKeys.ROAD__UNABLE_TO_PARSE_GENERATED_XML, e, inXmlDoc);&#xA;        }&#xA;    }&#xA;&#xA;    private static void addDocBody(DocumentDocument.Document inDocument, TransactionAndVisitHolder inOutDao, boolean inIsMultiStop,&#xA;                                   DocumentType inDocType, Node inMultiStopNode, String inPageNbr) {&#xA;        DocBodyDocument.DocBody body = inDocument.addNewDocBody();&#xA;        TruckVisitDetails tvdtls = inOutDao.getTv();&#xA;        addTruckVisit(tvdtls, body, inOutDao);&#xA;        if (inOutDao.getTran() != null) {&#xA;            addTruckTransaction(inOutDao, body, inIsMultiStop, inDocType, inMultiStopNode, inPageNbr);&#xA;        }&#xA;    }&#xA;&#xA;    @Nullable&#xA;    private static GateConfigStage getConfigStage(Gate inGate, String inTtstageId) {&#xA;        GateConfigStage gateStage = null;&#xA;        if (inGate != null &amp;&amp; inGate.getGateConfig() != null) {&#xA;            gateStage = inGate.getGateConfig().getStageById(inTtstageId);&#xA;        }&#xA;&#xA;        return gateStage;&#xA;    }&#xA;&#xA;    private static List&lt;TruckTransactionStage&gt; sortTranStagesByStageOrder(Collection&lt;TruckTransactionStage&gt; inTruckTranStages) {&#xA;        List list = new ArrayList(inTruckTranStages);&#xA;        Collections.sort(list, new Comparator&lt;TruckTransactionStage&gt;() {&#xA;            public int compare(TruckTransactionStage inS1, TruckTransactionStage inS2) {&#xA;                Long s1Order = inS1.getTtstageOrder();&#xA;                Long s2Order = inS2.getTtstageOrder();&#xA;                return s1Order.compareTo(s2Order);&#xA;            }&#xA;        });&#xA;&#xA;        return list;&#xA;    }&#xA;&#xA;    private static void addTruckTransaction(TransactionAndVisitHolder inOutDao, DocBodyDocument.DocBody inDocBody, boolean inIsMultiStop,&#xA;                                            DocumentType inDocType, Node inMultiStopNode, String inPageNbr) {&#xA;        TruckTransaction tran = inOutDao.getTran();&#xA;        TrkTransactionDocument.TrkTransaction docTran = inDocBody.addNewTrkTransaction();&#xA;        GeneralReference companyNameGeneralReference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;LABEL&quot;, &quot;COMPANY_NAME&quot;);&#xA;        docTran.setTranUfvFlexString01(companyNameGeneralReference.getRefValue1());&#xA;        docTran.setTranUfvFlexString02(companyNameGeneralReference.getRefValue2());&#xA;        ITranslationContext translator = TranslationUtils.getTranslationContext(ContextHelper.getThreadUserContext());&#xA;        docTran.setTranNbr(tran.getTranNbr() == null ? String.valueOf(tran.getTranGkey()) : String.valueOf(tran.getTranNbr()));&#xA;        Unit unit = tran.getTranUnit();&#xA;        String docTypeId = inDocType.getDoctypeId();&#xA;        String unitNotes = unit != null ? unit.getUnitRemark() : null;&#xA;        String notes = null;&#xA;        if (unitNotes != null) {&#xA;            notes = unitNotes.endsWith(&quot;.&quot;) ? unitNotes : unitNotes + &quot;. &quot;;&#xA;        }&#xA;        if (tran.getTranNotes() != null) {&#xA;            notes = notes + tran.getTranNotes();&#xA;        }&#xA;        //Production defect to limit the Cargo notes to avoid extra paper printing Start&#xA;        if (notes != null) {&#xA;            if (notes.length() &gt; 200) {&#xA;                docTran.setTranNotes(notes.substring(0, 100));&#xA;                docTran.setTranFlexString04(notes.substring(100, 200));&#xA;                if (notes.length() &gt; 300) {&#xA;                    docTran.setTranFlexString05(notes.substring(200, 300));&#xA;                } else {&#xA;                    docTran.setTranFlexString05(notes.substring(200));&#xA;                }&#xA;            } else if (notes.length() &gt; 100) {&#xA;                docTran.setTranNotes(notes.substring(0, 100));&#xA;                docTran.setTranFlexString04(notes.substring(100));&#xA;            } else {&#xA;                docTran.setTranNotes(notes);&#xA;            }&#xA;        }&#xA;        //Production defect to limit the Cargo notes to avoid extra paper printing End&#xA;&#xA;        TruckerFriendlyTranSubTypeEnum truckerFriendlySubType = null;&#xA;        TranSubTypeEnum subType = tran.getTranSubType();&#xA;        if (subType != null) {&#xA;            if (TranSubTypeEnum.DE.equals(subType)) {&#xA;                if (inIsMultiStop) {&#xA;                    //set deliver Import&#xA;                    docTran.setTranSubType(translator.getMessageTranslator().getMessage(TranSubTypeEnum.DI.getDescriptionPropertyKey()));&#xA;                } else {&#xA;                    docTran.setTranSubType(&quot;Deliver Work Order&quot;);&#xA;                }&#xA;            } else if (TranSubTypeEnum.RI.equals(subType)) {&#xA;                if (inIsMultiStop) {&#xA;                    //set Receive Export&#xA;                    docTran.setTranSubType(translator.getMessageTranslator().getMessage(TranSubTypeEnum.RE.getDescriptionPropertyKey()));&#xA;                } else {&#xA;                    docTran.setTranSubType(&quot;Receive Work Order&quot;);&#xA;                }&#xA;            } else {&#xA;                docTran.setTranSubType(translator.getMessageTranslator().getMessage(tran.getTranSubType().getDescriptionPropertyKey()));&#xA;            }&#xA;            truckerFriendlySubType = TransactionTypeUtil.getTruckerFriendlyTranSubTypeEnum(subType);&#xA;        }&#xA;        if (tran.getTranUnitCategory() != null) {&#xA;            docTran.setTranUnitCategory(tran.getTranUnitCategory().toString());&#xA;        }&#xA;        docTran.setTranTrouble(tran.getTranTrouble());&#xA;        docTran.setTranTroubleStatus(tran.getTranTroubleStatus());&#xA;        boolean tranHadTrouble = tran.getTranHadTrouble() != null &amp;&amp; tran.getTranHadTrouble();&#xA;        docTran.setTranHadTrouble(Boolean.valueOf(tranHadTrouble).toString());&#xA;&#xA;        docTran.setTranTrkcId(tran.getTranTrkcId());&#xA;&#xA;        if (tran.getTranCreated() != null) {&#xA;            docTran.setTranCreated(getDateFormatter().format(tran.getTranCreated()));&#xA;        }&#xA;        docTran.setTranCreator(tran.getTranCreator());&#xA;&#xA;        if (tran.getTranTruckTareWeight() != null) {&#xA;            docTran.setTranTruckTareWeight(tran.getTranTruckTareWeight().toString());&#xA;        }&#xA;        docTran.setTranCtrNbr(tran.getTranCtrNbr());&#xA;        docTran.setTranCtrOwnerId(tran.getTranCtrOwnerId());&#xA;&#xA;        if (tran.getTranCtrFreightKind() != null) {&#xA;            docTran.setTranCtrFreightKind(tran.getTranCtrFreightKind().getKey());&#xA;        }&#xA;&#xA;        String eqTypeId = tran.getTranCtrTypeId() != null ? tran.getTranCtrTypeId() : tran.getTranChsTypeId();&#xA;        EquipType equipType = EquipType.findEquipType(eqTypeId);&#xA;        EquipGrade equipGrade = unit != null ? unit.getUnitPrimaryUe().getUeGradeID() : null;&#xA;&#xA;        String typeId = &quot;&quot;;&#xA;        String desc = &quot;&quot;;&#xA;        if (equipType != null &amp;&amp; equipGrade != null) {&#xA;            typeId = equipType.getEqtypId() + &quot;-&quot; + equipGrade.getEqgrdId() + &quot;:&quot;;&#xA;            if (equipType.getEqtypDescription() != null &amp;&amp; equipGrade.getEqgrdDescription() != null) {&#xA;                desc = equipType.getEqtypDescription() + &quot; &quot; + equipGrade.getEqgrdDescription();&#xA;            } else if (equipType.getEqtypDescription() != null) {&#xA;                desc = equipType.getEqtypDescription();&#xA;            } else if (equipGrade.getEqgrdDescription() != null) {&#xA;                desc = equipGrade.getEqgrdDescription();&#xA;            }&#xA;            // Printer Enhancement truncate the equipement grade id printing on next page&#xA;            if(typeId !=null &amp;&amp; typeId != &quot;&quot; &amp;&amp; typeId.length()&gt;35){&#xA;                typeId = typeId.substring(0,35);&#xA;            }&#xA;            docTran.setTranCtrTypeId(typeId);&#xA;            if(desc !=null &amp;&amp; desc != &quot;&quot; &amp;&amp; desc.length()&gt;35){&#xA;                desc = desc.substring(0,35);&#xA;            }&#xA;            docTran.setTranGradeId(desc);&#xA;        } else if (equipType != null) {&#xA;            typeId = equipType.getEqtypId();&#xA;            if (equipType.getEqtypDescription() != null) {&#xA;                typeId = typeId + &quot;:&quot; + equipType.getEqtypDescription();&#xA;            }&#xA;            // Printer Enhancement truncate the equipement grade id printing on next page&#xA;            if(typeId !=null &amp;&amp; typeId != &quot;&quot; &amp;&amp; typeId.length()&gt;35){&#xA;                typeId = typeId.substring(0,35);&#xA;            }&#xA;            docTran.setTranCtrTypeId(typeId);&#xA;        }&#xA;&#xA;        if (tran.getTranCtrGrossWeight() != null) {&#xA;//      double grossWeight = new BigDecimal(UnitUtils.convertTo(tran.getTranCtrGrossWeight(), MassUnitEnum.KILOGRAMS, MassUnitEnum.POUNDS)).&#xA;//              setScale(2, RoundingMode.HALF_UP).doubleValue();&#xA;            double grossWeight = UnitUtils.convertTo(tran.getTranCtrGrossWeight(), MassUnitEnum.KILOGRAMS, MassUnitEnum.POUNDS);&#xA;            docTran.setTranCtrGrossWeight(&quot;&quot; + Math.round(grossWeight));&#xA;        }&#xA;&#xA;        docTran.setTranCtrTicketPosId(tran.getTranCtrTicketPosId());&#xA;        docTran.setTranChsNbr(tran.getTranChsNbr());&#xA;        docTran.setTranChsOwnerId(tran.getTranChsOwnerId());&#xA;&#xA;        if (tran.getTranChsIsOwners() != null) {&#xA;            docTran.setTranChsIsOwners(tran.getTranChsIsOwners().toString());&#xA;        }&#xA;&#xA;        docTran.setTranChsTypeId(tran.getTranChsTypeId());&#xA;        if (tran.getTranChsIsDamaged() != null) {&#xA;            docTran.setTranChsIsDamaged(tran.getTranChsIsDamaged().toString());&#xA;        }&#xA;&#xA;        if (tran.getTranDischargePoint1() != null) {&#xA;            TranDischargePoint1Document.TranDischargePoint1 point1 = docTran.addNewTranDischargePoint1();&#xA;            docTran.setTranDischargePoint1(point1);&#xA;            point1.setPointId(tran.getTranDischargePoint1().getPointId());&#xA;        }&#xA;        if (tran.getTranDischargePoint2() != null) {&#xA;            TranDischargePoint2Document.TranDischargePoint2 point2 = docTran.addNewTranDischargePoint2();&#xA;            docTran.setTranDischargePoint2(point2);&#xA;            point2.setPointId(tran.getTranDischargePoint2().getPointId());&#xA;        }&#xA;        if (tran.getTranLoadPoint() != null) {&#xA;            TranLoadPointDocument.TranLoadPoint point = docTran.addNewTranLoadPoint();&#xA;            docTran.setTranLoadPoint(point);&#xA;            point.setPointId(tran.getTranLoadPoint().getPointId());&#xA;        }&#xA;&#xA;        docTran.setTranOrigin(tran.getTranOrigin());&#xA;        docTran.setTranDestination(tran.getTranDestination());&#xA;        docTran.setTranLineId(tran.getTranLineId());&#xA;        docTran.setTranShipper(tran.getTranShipper());&#xA;        docTran.setTranConsignee(tran.getTranConsignee());&#xA;        ScopedBizUnit consignee = null;&#xA;        ScopedBizUnit shipper = null;&#xA;&#xA;        if (UnitCategoryEnum.IMPORT.equals(tran.getTranUnitCategory())) {&#xA;            if (unit != null &amp;&amp; unit.getUnitGoods() != null) {&#xA;                consignee = unit.getUnitGoods().getGdsConsigneeBzu();&#xA;                shipper = unit.getUnitGoods().getGdsShipperBzu();&#xA;            }&#xA;        } else if (UnitCategoryEnum.EXPORT.equals(tran.getTranUnitCategory())) {&#xA;            if (tran.getTranEqo() != null) {&#xA;                shipper = tran.getTranEqo().getEqoShipper();&#xA;                // Consignee may not be needed during export&#xA;                consignee = tran.getTranEqo().getEqoConsignee();&#xA;            } else {&#xA;                //Dray-Off of the Import container&#xA;                if (unit != null &amp;&amp; unit.getUnitGoods() != null) {&#xA;                    consignee = unit.getUnitGoods().getGdsConsigneeBzu();&#xA;                    shipper = unit.getUnitGoods().getGdsShipperBzu();&#xA;                }&#xA;            }&#xA;            //delivered against a Booking/Order&#xA;        } else if (UnitCategoryEnum.STORAGE.equals(tran.getTranUnitCategory())) {&#xA;            if (tran.getTranEqo() != null) {&#xA;                shipper = tran.getTranEqo().getEqoShipper();&#xA;            }&#xA;        }&#xA;&#xA;        if (consignee != null &amp;&amp; !inIsMultiStop) {&#xA;            docTran.setTranConsigneeId(getAddress(consignee.getBzuCtct()));&#xA;            String name = consignee.getBzuName() != null &amp;&amp; consignee.getBzuName().length() &gt; 30 ? consignee.getBzuName().substring(0, 30) :&#xA;                    consignee.getBzuName();&#xA;            docTran.setTranConsigneeName(name);&#xA;        }&#xA;&#xA;        if (shipper != null) {&#xA;            docTran.setTranShipperId(shipper.getBzuId());&#xA;            String name = shipper.getBzuName() != null &amp;&amp; shipper.getBzuName().length() &gt; 30 ? shipper.getBzuName().substring(0, 30) :&#xA;                    shipper.getBzuName();&#xA;            docTran.setTranShipperName(name);&#xA;        }&#xA;&#xA;        if (TranSubTypeEnum.RM.equals(tran.getTranSubType())) {&#xA;            if (unit != null) {&#xA;&#xA;                String lastUnitDeliveredshipper = getUnitLastDeliveryShipper(unit.getUnitId());&#xA;&#xA;                if (lastUnitDeliveredshipper != null) {&#xA;                    docTran.setTranShipperName(lastUnitDeliveredshipper);&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        String tranLineId = tran.getTranLine() != null ? tran.getTranLine().getBzuId() :&#xA;                (tran.getTranLineId() != null ? tran.getTranLineId() : null);&#xA;        if (tranLineId != null) {&#xA;            docTran.setTranLineId(tranLineId);&#xA;        }&#xA;&#xA;        if (tran.getTranChassis() != null) {&#xA;            if (tran.getTranChassis().getEqEquipType() != null) {&#xA;                docTran.setTranChsTypeId(tran.getTranChassis().getEqEquipType().getEqtypId());&#xA;            }&#xA;        }&#xA;        if (tran.getTranChsOwner() != null) {&#xA;            docTran.setTranChsOwnerId(tran.getTranChsOwner().getBzuId());&#xA;        }&#xA;&#xA;        if (tran.getTranCtrOwner() != null) {&#xA;            docTran.setTranCtrOwnerId(tran.getTranCtrOwner().getBzuId());&#xA;        }&#xA;&#xA;        if (tran.getTranCtrOperator() != null) {&#xA;            TranCtrOperatorDocument.TranCtrOperator ctropr = docTran.addNewTranCtrOperator();&#xA;            ctropr.setBizuId(tran.getTranCtrOperator().getBzuId());&#xA;        }&#xA;        if (tran.getTranUnit() != null) {&#xA;            TranUnitDocument.TranUnit tranUnit = docTran.addNewTranUnit();&#xA;            tranUnit.setUnitId(tran.getTranUnit().getUnitId());&#xA;        }&#xA;&#xA;        if (tran.getTranEqo() != null) {&#xA;            TranEqoDocument.TranEqo docTranEqo = docTran.addNewTranEqo();&#xA;            docTranEqo.setEqboNbr(tran.getTranEqo().getEqboNbr());&#xA;            docTranEqo.setEqoLineId(tran.getTranEqo().getEqoLine().getBzuId());&#xA;            docTranEqo.setEqoLineName(tran.getTranEqo().getEqoLine().getBzuName());&#xA;        }&#xA;&#xA;        if (tran.getTranCarrierVisit() != null) {&#xA;            TranCarrierVisitDocument.TranCarrierVisit cv = docTran.addNewTranCarrierVisit();&#xA;            CarrierVisit carrierVisit = tran.getTranCarrierVisit();&#xA;            cv.setCvId(carrierVisit.getCvId());&#xA;            VisitDetails vstDtls = carrierVisit.getCvCvd();&#xA;            DateFormat dateFormatter = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.SHORT);&#xA;&#xA;            if (carrierVisit.getCvATA() != null) {&#xA;                cv.setCvATA(dateFormatter.format(carrierVisit.getCvATA()));&#xA;            }&#xA;            if (carrierVisit.getCvATD() != null) {&#xA;                cv.setCvATD(dateFormatter.format(carrierVisit.getCvATD()));&#xA;            }&#xA;&#xA;            if (vstDtls != null) {&#xA;                cv.setCvCvdCarrierIbVygNbr(vstDtls.getCarrierIbVoyNbrOrTrainId());&#xA;                cv.setCvCvdCarrierObVygNbr(vstDtls.getCarrierObVoyNbrOrTrainId());&#xA;                cv.setCvCvdCarrierVehicleName(vstDtls.getCarrierVehicleName());&#xA;                if (vstDtls.getCvdETA() != null) {&#xA;                    cv.setCvCvdETA(dateFormatter.format(vstDtls.getCvdETA()));&#xA;                }&#xA;                if (vstDtls.getCvdETD() != null) {&#xA;                    cv.setCvCvdETD(dateFormatter.format(vstDtls.getCvdETD()));&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        if (tran.getTranOperator() != null) {&#xA;            TranOperatorDocument.TranOperator opr = docTran.addNewTranOperator();&#xA;            opr.setOprId(tran.getTranOperator().getOprId());&#xA;        }&#xA;&#xA;        if (tran.getTranContainer() != null) {&#xA;            docTran.setTranCtrNbr(tran.getTranContainer().getEqIdFull());&#xA;        }&#xA;        GeneralReference generalReferenceDNB = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;DNB&quot;);&#xA;        GeneralReference generalReferenceTirLoad = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;DOCUMENTS&quot;, &quot;TIR_LOAD&quot;);&#xA;        String ctrNbr = docTran.getTranCtrNbr();&#xA;        if (ctrNbr != null &amp;&amp; !generalReferenceDNB.getRefValue1().equals(docTypeId) &amp;&amp; !generalReferenceTirLoad.getRefValue1().equals(docTypeId)) {&#xA;            if (tran.getTranCtrOperator() != null) {&#xA;                docTran.setTranCtrNbr(ctrNbr + &quot; &quot; + tran.getTranCtrOperator().getBzuId());&#xA;            }&#xA;        }&#xA;        String chsNbr = docTran.getTranChsNbr();&#xA;        if (chsNbr != null &amp;&amp; !generalReferenceDNB.getRefValue1().equals(docTypeId) &amp;&amp; !generalReferenceTirLoad.getRefValue1().equals(docTypeId)) {&#xA;            if (tran.getTranChsOwnerId() != null) {&#xA;                chsNbr = chsNbr + &quot; &quot; + tran.getTranChsOwnerId();&#xA;            } else if (tran.getTranChsOwner() != null) {&#xA;                chsNbr = chsNbr + &quot; &quot; + tran.getTranChsOwner().getBzuId();&#xA;            }&#xA;            docTran.setTranChsNbr(chsNbr);&#xA;        }&#xA;        if (tran.getTranChsAccessory() != null) {&#xA;            if (tran.getTranChsAccessory().getEqEquipType() != null) {&#xA;                docTran.setTranChsAccTypeId(tran.getTranChsAccessory().getEqEquipType().getEqtypId());&#xA;            }&#xA;        }&#xA;&#xA;        if (unit != null) {&#xA;            if (tran.isReceival()) {&#xA;                docTran.setTranCtrAccNbr(tran.getCtrAccessoryId());&#xA;            } else if (tran.isDelivery()) {&#xA;                String ctrAccNbr = null;&#xA;                String chsAccNbr = null;&#xA;                Accessory accessory = unit.getUnitCtrAccessory();&#xA;                if (accessory != null) {&#xA;                    ctrAccNbr = accessory.getEqIdFull();&#xA;                } else {&#xA;                    ctrAccNbr = tran.getCtrAccessoryId();&#xA;                }&#xA;                accessory = unit.getUnitChsAccessory();&#xA;                if (accessory != null) {&#xA;                    chsAccNbr = accessory.getEqIdFull();&#xA;                } else {&#xA;                    chsAccNbr = tran.getChsAccessoryId();&#xA;                }&#xA;                if (ctrAccNbr != null &amp;&amp; chsAccNbr != null) {&#xA;                    docTran.setTranCtrAccNbr(ctrAccNbr + &quot;/&quot; + chsAccNbr);&#xA;                } else if (ctrAccNbr != null) {&#xA;                    docTran.setTranCtrAccNbr(ctrAccNbr);&#xA;                } else if (chsAccNbr != null) {&#xA;                    docTran.setTranChsAccNbr(chsAccNbr);&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        String blNbr = getBLNbr(tran);&#xA;        if (blNbr == null) {&#xA;            if (tran.getTranEqoNbr() != null) {&#xA;                blNbr = tran.getTranEqoNbr();&#xA;            } else if (unit != null &amp;&amp; unit.getUnitPrimaryUe().getUeDepartureOrderItem() != null) {&#xA;                blNbr = unit.getUnitPrimaryUe().getUeDepartureOrderItem().getEqboiOrder().getEqboNbr();&#xA;            }&#xA;        }&#xA;        docTran.setTranEqoNbr(blNbr);&#xA;        if (tran.getTranSealNbr1() != null) {&#xA;            docTran.setTranSealNbr1(tran.getTranSealNbr1());&#xA;        } else if (unit != null) {&#xA;            docTran.setTranSealNbr1(unit.getUnitSealNbr1());&#xA;        }&#xA;        if (tran.getTranChsDmg() != null) {&#xA;            TranCtrDmgDocument.TranCtrDmg dmg = docTran.addNewTranCtrDmg();&#xA;            for (Iterator itr = tran.getTranChsDmg().getDamageItemsIterator(); itr.hasNext();) {&#xA;                UnitEquipDamageItem item = (UnitEquipDamageItem) itr.next();&#xA;                if (dmg.getDmgitemType() != null) {&#xA;                    dmg.setDmgitemType(dmg.getDmgitemType() + &quot;, &quot; + item.getDmgitemType().getEqdmgtypDescription());&#xA;                } else {&#xA;                    dmg.setDmgitemType(item.getDmgitemType().getEqdmgtypDescription());&#xA;                }&#xA;                if (dmg.getDmgitemDescription() != null) {&#xA;                    dmg.setDmgitemDescription(dmg.getDmgitemDescription() + &quot;, &quot; + item.getDmgitemDescription());&#xA;                } else {&#xA;                    dmg.setDmgitemDescription(item.getDmgitemDescription());&#xA;                }&#xA;            }&#xA;        } else {&#xA;            TranCtrDmgDocument.TranCtrDmg dmg = docTran.addNewTranCtrDmg();&#xA;            dmg.setDmgitemType(&quot;None&quot;);&#xA;        }&#xA;&#xA;&#xA;        if (inIsMultiStop) {&#xA;            if (inMultiStopNode != null) {&#xA;                Element stopElement = (Element) inMultiStopNode;&#xA;                NodeList consigneeNodeList = stopElement.getElementsByTagName(&quot;stopOffConsignee&quot;);&#xA;                NodeList hazdousCommodityNodeList = stopElement.getElementsByTagName(&quot;hazCommodity&quot;);&#xA;                NodeList nonHazousCommodityNodeList = stopElement.getElementsByTagName(&quot;nonHazCommodity&quot;);&#xA;                NodeList totalNbrOfStopsNodeList = stopElement.getElementsByTagName(&quot;totalNumberOfStops&quot;);&#xA;                NodeList stopSequenceNodeList = stopElement.getElementsByTagName(&quot;StopSequenceNumber&quot;);&#xA;                NodeList addressNodeList = stopElement.getElementsByTagName(&quot;address&quot;);&#xA;                int limit = 3;&#xA;                int size = 0;&#xA;                if (hazdousCommodityNodeList != null &amp;&amp; nonHazousCommodityNodeList != null) {&#xA;                    size = hazdousCommodityNodeList.getLength() + nonHazousCommodityNodeList.getLength();&#xA;                } else if (hazdousCommodityNodeList != null) {&#xA;                    size = hazdousCommodityNodeList.getLength();&#xA;                } else if (nonHazousCommodityNodeList != null) {&#xA;                    size = nonHazousCommodityNodeList.getLength();&#xA;                }&#xA;&#xA;                //Set Consignee&#xA;                if (consigneeNodeList != null &amp;&amp; consigneeNodeList.length == 1) {&#xA;                    String name = consigneeNodeList.item(0).getTextContent() != null &amp;&amp; consigneeNodeList.item(0).getTextContent().length() &gt; 30 ?&#xA;                            consigneeNodeList.item(0).getTextContent().substring(0, 30) :&#xA;                            consigneeNodeList.item(0).getTextContent();&#xA;                    docTran.setTranConsigneeName(name);&#xA;                }&#xA;&#xA;                //set Address&#xA;                docTran.setTranConsigneeId(getMultiStopAddress(addressNodeList));&#xA;&#xA;                //Set Stop Nbr&#xA;                String stopNbr = &quot;&quot;;&#xA;                if (totalNbrOfStopsNodeList != null &amp;&amp; totalNbrOfStopsNodeList.length == 1) {&#xA;                    stopNbr = totalNbrOfStopsNodeList.item(0).getTextContent();&#xA;                }&#xA;                if (stopSequenceNodeList != null &amp;&amp; stopSequenceNodeList.length == 1) {&#xA;                    String seqString = stopSequenceNodeList.item(0).getTextContent();&#xA;                    stopNbr = &quot;Stop: &quot; + seqString + &quot; of &quot; + stopNbr;&#xA;                }&#xA;                docTran.setTranFlexString02(stopNbr);&#xA;                int commoditySize = 0;&#xA;                if (hasTIRLOAD(inMultiStopNode.getParentNode())) {&#xA;                    ++_currentPage;&#xA;                    if (hazdousCommodityNodeList != null) {&#xA;                        for (Node hazdousCommodityNode : hazdousCommodityNodeList) {&#xA;                            TranHazardDocument.TranHazard haz = docTran.addNewTranHazard();&#xA;                            NodeList emergencyContactNameNodeList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazEmergencyContactName&quot;);&#xA;                            NodeList emergencyContactPhoneNodeList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazEmergencyPhone&quot;);&#xA;&#xA;                            ++commoditySize;&#xA;                            //set Page Number&#xA;                            if (commoditySize % 4 == 0) {&#xA;                                ++_currentPage;&#xA;                            }&#xA;                            //TIR Load Page&#xA;                            haz.setHzrdiPageNumber(&quot;Page: &quot; + _currentPage + &quot; of &quot; + _totalPages);&#xA;&#xA;                            //Set Emergency Contact Name and Number&#xA;                            if (emergencyContactNameNodeList != null &amp;&amp; emergencyContactNameNodeList.length == 1) {&#xA;                                docTran.setTranFlexString01(emergencyContactNameNodeList.item(0).getTextContent());&#xA;                            }&#xA;                            if (emergencyContactPhoneNodeList != null &amp;&amp; emergencyContactPhoneNodeList.length == 1) {&#xA;                                docTran.setTranFlexString01(docTran.getTranFlexString01() + &quot;, &quot; + emergencyContactPhoneNodeList.item(0).getTextContent());&#xA;                            }&#xA;&#xA;                            //Set HM&#xA;                            haz.setHzrdiInhalationZone(&quot;X&quot;);&#xA;&#xA;                            //Set UN/NA Number&#xA;                            NodeList hazNumberNodeList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazNumber&quot;);&#xA;                            if (hazNumberNodeList != null &amp;&amp; hazNumberNodeList.length == 1) {&#xA;                                haz.setHzrdiUNnum(hazNumberNodeList.item(0).getTextContent());&#xA;                            }&#xA;                            //Set multistop&#xA;                            boolean isLimittedQty = false;&#xA;                            NodeList hazLimitedQuantityNodeList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazLimitedQuantity&quot;);&#xA;                            if (hazLimitedQuantityNodeList != null &amp;&amp; hazLimitedQuantityNodeList.length == 1) {&#xA;&#xA;                                if (hazLimitedQuantityNodeList.item(0) != null &amp;&amp; hazLimitedQuantityNodeList.item(0).getTextContent() != null &amp;&amp; !hazLimitedQuantityNodeList.item(0).getTextContent().isEmpty() &amp;&amp; Boolean.TRUE.equals(Boolean.valueOf(hazLimitedQuantityNodeList.item(0).getTextContent()))) {&#xA;                                    haz.setHzrdiProperName(haz.getHzrdiProperName() + &quot;  (LTD QTY)&quot;);&#xA;                                    isLimittedQty = true;&#xA;                                }&#xA;                            }&#xA;&#xA;                            //Set Description&#xA;                            NodeList hazCommodityNameNodeList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazCommodityName&quot;);&#xA;                            if (hazCommodityNameNodeList != null &amp;&amp; hazCommodityNameNodeList.length == 1) {&#xA;                                if (isLimittedQty) {&#xA;                                    haz.setHzrdiProperName(hazCommodityNameNodeList.item(0).getTextContent() + &quot;  (LTD QTY)&quot;);&#xA;                                    isLimittedQty = false;&#xA;                                } else {&#xA;                                    haz.setHzrdiProperName(hazCommodityNameNodeList.item(0).getTextContent());&#xA;                                }&#xA;                                String hazardDesc = haz.getHzrdiProperName();&#xA;                                if (hazardDesc != null) {&#xA;                                    if (hazardDesc.length() &gt; 100) {&#xA;                                        haz.setHzrdiProperName(hazardDesc.substring(0, 50));&#xA;                                        haz.setHzrdiHazIdUpper(hazardDesc.substring(50, 100));&#xA;                                        haz.setHzrdiSubstanceLower(hazardDesc.substring(100));&#xA;                                    } else if (hazardDesc.length() &gt; 50) {&#xA;                                        haz.setHzrdiProperName(hazardDesc.substring(0, 50));&#xA;                                        haz.setHzrdiHazIdUpper(hazardDesc.substring(50));&#xA;                                    }&#xA;                                }&#xA;                            }&#xA;&#xA;&#xA;                            //Set Class&#xA;                            NodeList hazClassNodeList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazPrimaryClass&quot;);&#xA;                            if (hazClassNodeList != null &amp;&amp; hazClassNodeList.length == 1) {&#xA;                                haz.setHzrdiDescription(hazClassNodeList.item(0).getTextContent());&#xA;                            }&#xA;&#xA;                            //Set P group&#xA;                            NodeList hazPGrpNodeList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazPackageGroup&quot;);&#xA;                            if (hazPGrpNodeList != null &amp;&amp; hazPGrpNodeList.length == 1) {&#xA;                                haz.setHzrdiPackingGroup(hazPGrpNodeList.item(0).getTextContent());&#xA;                            }&#xA;&#xA;                            //Set Flash Point&#xA;                            String flashPoint = &quot;&quot;;&#xA;                            NodeList hazFlashPointList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazFlashPoint&quot;);&#xA;                            if (hazFlashPointList != null &amp;&amp; hazFlashPointList.length == 1) {&#xA;                                flashPoint = hazFlashPointList.item(0).getTextContent();&#xA;                            }&#xA;                            NodeList hazFlashPointUOMList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazFlashPointUOM&quot;);&#xA;                            if (hazFlashPointUOMList != null &amp;&amp; hazFlashPointUOMList.length == 1) {&#xA;                                flashPoint = flashPoint + hazFlashPointUOMList.item(0).getTextContent();&#xA;                            }&#xA;                            haz.setHzrdiMFAG(flashPoint);&#xA;&#xA;                            //Set ERG Number&#xA;                            NodeList ergNumberNodeList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;ergNumber&quot;);&#xA;                            if (ergNumberNodeList != null &amp;&amp; ergNumberNodeList.length == 1) {&#xA;                                haz.setHzrdiERGNumber(ergNumberNodeList.item(0).getTextContent());&#xA;                            }&#xA;&#xA;                            //Set Qty/Unit&#xA;                            String qty = &quot;&quot;;&#xA;                            NodeList qtyList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazPieces&quot;);&#xA;                            if (qtyList != null &amp;&amp; qtyList.length == 1) {&#xA;                                qty = qtyList.item(0).getTextContent();&#xA;                            }&#xA;                            NodeList qtyUnitList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazPiecesUOM&quot;);&#xA;                            if (qtyUnitList != null &amp;&amp; qtyUnitList.length == 1) {&#xA;                                qty = qty + &quot;/&quot; + qtyUnitList.item(0).getTextContent();&#xA;                            }&#xA;                            haz.setHzrdiLtdQty(qty);&#xA;&#xA;                            //Set Weight&#xA;                            NodeList weightList = ((Element) hazdousCommodityNode).getElementsByTagName(&quot;hazWeight&quot;);&#xA;                            if (weightList != null &amp;&amp; weightList.length == 1) {&#xA;                                String weight = weightList.item(0).getTextContent();&#xA;                                if (weight != null) {&#xA;                                    haz.setHzrdiWeight(Double.valueOf(weight));&#xA;                                }&#xA;                            }&#xA;                        }&#xA;                    }&#xA;                    if (nonHazousCommodityNodeList != null) {&#xA;                        for (Node nonHazdousCommodityNode : nonHazousCommodityNodeList) {&#xA;                            TranHazardDocument.TranHazard haz = docTran.addNewTranHazard();&#xA;                            //Set Description&#xA;                            NodeList hazCommodityDescNodeList = ((Element) nonHazdousCommodityNode).getElementsByTagName(&quot;commodityDescription&quot;);&#xA;                            if (hazCommodityDescNodeList != null &amp;&amp; hazCommodityDescNodeList.length == 1) {&#xA;                                haz.setHzrdiProperName(hazCommodityDescNodeList.item(0).getTextContent());&#xA;                                String hazardDesc = haz.getHzrdiProperName();&#xA;                                if (hazardDesc != null) {&#xA;                                    if (hazardDesc.length() &gt; 100) {&#xA;                                        haz.setHzrdiProperName(hazardDesc.substring(0, 50));&#xA;                                        haz.setHzrdiHazIdUpper(hazardDesc.substring(50, 100));&#xA;                                        haz.setHzrdiSubstanceLower(hazardDesc.substring(100));&#xA;                                    } else if (hazardDesc.length() &gt; 50) {&#xA;                                        haz.setHzrdiProperName(hazardDesc.substring(0, 50));&#xA;                                        haz.setHzrdiHazIdUpper(hazardDesc.substring(50));&#xA;                                    }&#xA;                                }&#xA;                            }&#xA;                            //TIR Load Page&#xA;                            haz.setHzrdiPageNumber(&quot;Page: &quot; + _currentPage + &quot; of &quot; + _totalPages);&#xA;&#xA;                            //Set Qty/Unit&#xA;                            String qty = &quot;&quot;;&#xA;                            NodeList qtyList = ((Element) nonHazdousCommodityNode).getElementsByTagName(&quot;countOfPieces&quot;);&#xA;                            if (qtyList != null &amp;&amp; qtyList.length == 1) {&#xA;                                qty = qtyList.item(0).getTextContent();&#xA;                            }&#xA;                            NodeList qtyUnitList = ((Element) nonHazdousCommodityNode).getElementsByTagName(&quot;unitOfMeasure&quot;);&#xA;                            if (qtyUnitList != null &amp;&amp; qtyUnitList.length == 1) {&#xA;                                qty = qty + &quot;/&quot; + qtyUnitList.item(0).getTextContent();&#xA;                            }&#xA;                            haz.setHzrdiLtdQty(qty);&#xA;&#xA;                            //Set Weight&#xA;                            NodeList weightList = ((Element) nonHazdousCommodityNode).getElementsByTagName(&quot;weight&quot;);&#xA;                            if (weightList != null &amp;&amp; weightList.length == 1) {&#xA;                                String weight = weightList.item(0).getTextContent();&#xA;                                if (weight != null) {&#xA;                                    haz.setHzrdiWeight(Double.valueOf(weight));&#xA;                                }&#xA;                            }&#xA;                        }&#xA;                    }&#xA;                }&#xA;                //DIR Page&#xA;                docTran.setTranUnitFlexString02(&quot;Page: &quot; + (++_currentPage) + &quot; of &quot; + _totalPages);&#xA;            }&#xA;        } else {&#xA;            if (tran.getTranHaz() != null) {&#xA;                List hazItemList = tran.getTranHaz().getHzrdItems();&#xA;                if (hazItemList != null) {&#xA;                    int limit = 3;&#xA;                    int out = hazItemList.size() / limit;&#xA;                    if (hazItemList.size() % limit &gt; 0) {&#xA;                        ++out;&#xA;                    }&#xA;                    //count+2(TIR+DR)&#xA;                    _totalPages = hazItemList != null ? out + 2 : 0;&#xA;                } else {&#xA;                    _totalPages = 2;&#xA;                }&#xA;                //For DIR ticket(last)&#xA;                docTran.setTranUnitFlexString02(&quot;Page: &quot; + _totalPages + &quot; of &quot; + _totalPages);&#xA;                int tlPageCount = 2;&#xA;                int count = 0;&#xA;                for (Iterator itr = tran.getTranHaz().getHazardItemsIterator(); itr.hasNext();) {&#xA;                    ++count;&#xA;                    HazardItem hazi = (HazardItem) itr.next();&#xA;                    TranHazardDocument.TranHazard haz = docTran.addNewTranHazard();&#xA;                    if (count % 3 == 0) {&#xA;                        ++tlPageCount;&#xA;                    }&#xA;                    haz.setHzrdiPageNumber(&quot;Page: &quot; + tlPageCount + &quot; of &quot; + _totalPages);&#xA;                    haz.setHzrdiImdgCode(hazi.getHzrdiImdgCode().getKey());&#xA;                    haz.setHzrdiUNnum(hazi.getHzrdiUNnum());&#xA;                    if (hazi.getHzrdiNbrType() != null) {&#xA;                        haz.setHzrdiNbrType(translator.getMessageTranslator().getMessage(hazi.getHzrdiNbrType().getDescriptionPropertyKey()));&#xA;                    }&#xA;                    ImdgClass imdg = hazi.getHzrdiImdgClass();&#xA;                    haz.setHzrdiDescription(translator.getMessageTranslator().getMessage(imdg.getCodePropertyKey()));&#xA;                    if (hazi.getHzrdiQuantity() != null) {&#xA;                        haz.setHzrdiQuantity(hazi.getHzrdiQuantity().intValue());&#xA;                    }&#xA;                    haz.setHzrdiPackageType(hazi.getHzrdiPackageType());&#xA;                    haz.setHzrdiProperName(hazi.getHzrdiProperName());&#xA;                    if (hazi.getHzrdiLtdQty()) {&#xA;                        haz.setHzrdiProperName(haz.getHzrdiProperName() + &quot; (LTD QTY)&quot;);&#xA;                    }&#xA;                    String hazardDesc = haz.getHzrdiProperName();&#xA;                    if (hazardDesc != null) {&#xA;                        if (hazardDesc.length() &gt; 100) {&#xA;                            haz.setHzrdiProperName(hazardDesc.substring(0, 50));&#xA;                            haz.setHzrdiHazIdUpper(hazardDesc.substring(50, 100));&#xA;                            haz.setHzrdiSubstanceLower(hazardDesc.substring(100));&#xA;                        } else if (hazardDesc.length() &gt; 50) {&#xA;                            haz.setHzrdiProperName(hazardDesc.substring(0, 50));&#xA;                            haz.setHzrdiHazIdUpper(hazardDesc.substring(50));&#xA;                        }&#xA;                    }&#xA;                    haz.setHzrdiEmergencyTelephone(hazi.getHzrdiEmergencyTelephone());&#xA;                    if (docTran.getTranFlexString01() == null) {&#xA;                        docTran.setTranFlexString01(hazi.getHzrdiEmergencyTelephone());&#xA;                    }&#xA;                    if (hazi.getHzrdiPackingGroup() != null) {&#xA;                        haz.setHzrdiPackingGroup(&#xA;                                customizePackingGroup(translator.getMessageTranslator().getMessage(hazi.getHzrdiPackingGroup().getDescriptionPropertyKey())));&#xA;                    }&#xA;                    // No need for null check because in hzrd item constructor it is set to false as default value.&#xA;                    haz.setHzrdiLtdQty(hazi.getHzrdiQuantity().toString() + &quot;/&quot; + hazi.getHzrdiPackageType());&#xA;                    if (hazi.getHzrdiWeight() != null) {&#xA;                        double weight = new BigDecimal(UnitUtils.convertTo(hazi.getHzrdiWeight().doubleValue(), MassUnitEnum.KILOGRAMS, MassUnitEnum.POUNDS)).&#xA;                                setScale(2, RoundingMode.HALF_UP).doubleValue();&#xA;                        haz.setHzrdiWeight(weight);&#xA;                    }&#xA;                    //This field used for HM&#xA;                    haz.setHzrdiInhalationZone(&quot;X&quot;);&#xA;                    haz.setHzrdiExplosiveClass(hazi.getHzrdiExplosiveClass());&#xA;//          haz.setHzrdiPageNumber(hazi.getHzrdiPageNumber());&#xA;                    if (hazi.getHzrdiFlashPoint() != null) {&#xA;                        DecimalFormat format = new DecimalFormat(&quot;000C&quot;);&#xA;                        haz.setHzrdiMFAG(&quot;&quot; + Math.round(hazi.getHzrdiFlashPoint()));&#xA;                    }&#xA;//          haz.setHzrdiTechName(hazi.getHzrdiTechName());&#xA;                    haz.setHzrdiEMSNumber(hazi.getHzrdiEMSNumber());&#xA;                    haz.setHzrdiERGNumber(hazi.getHzrdiERGNumber());&#xA;//          haz.setHzrdiMFAG(hazi.getHzrdiMFAG());&#xA;//          haz.setHzrdiHazIdUpper(hazi.getHzrdiHazIdUpper());&#xA;//          haz.setHzrdiSubstanceLower(hazi.getHzrdiSubstanceLower());&#xA;                    haz.setHzrdiPlannerRef(hazi.getHzrdiPlannerRef());&#xA;                    haz.setHzrdiMoveMethod(hazi.getHzrdiMoveMethod());&#xA;                    if (hazi.getHzrdiSecondaryIMO1() != null) {&#xA;                        haz.setHzrdiSecondaryIMO1(&#xA;                                translator.getMessageTranslator().getMessage(hazi.getHzrdiSecondaryIMO1().getDescriptionPropertyKey()));&#xA;                    }&#xA;                    if (hazi.getHzrdiSecondaryIMO2() != null) {&#xA;                        haz.setHzrdiSecondaryIMO2(&#xA;                                translator.getMessageTranslator().getMessage(hazi.getHzrdiSecondaryIMO2().getDescriptionPropertyKey()));&#xA;                    }&#xA;                    haz.setHzrdiDeckRestrictions(hazi.getHzrdiDeckRestrictions());&#xA;                    //This field is used to populate Consignee&#xA;                    haz.setHzrdiMarinePollutants(hazi.getHzrdiMarinePollutants().toString());&#xA;                    haz.setHzrdiDcLgRef(hazi.getHzrdiDcLgRef());&#xA;                    haz.setHzrdiNotes(hazi.getHzrdiNotes());&#xA;                    if (hazi.getHzrdiPlacardSet() != null) {&#xA;                        for (Object object : hazi.getHzrdiPlacardSet()) {&#xA;                            HazardItemPlacard itemPlacard = (HazardItemPlacard) object;&#xA;                            // create a new tranHazardPlacard in XML&#xA;                            TranHazardPlacardDocument.TranHazardPlacard hazardPlacard = haz.addNewTranHazardPlacard();&#xA;                            hazardPlacard.setHzrdipDescription(itemPlacard.getHzrdipDescription());&#xA;                            Placard placard = itemPlacard.getHzrdipPlacard();&#xA;                            if (placard != null) {&#xA;                                hazardPlacard.setPlacardText(placard.getPlacardText());&#xA;                                hazardPlacard.setPlacardFurtherExplanation(placard.getPlacardFurtherExplanation());&#xA;                                if (placard.getPlacardMinWtKg() != null) {&#xA;                                    hazardPlacard.setPlacardMinWtKg(placard.getPlacardMinWtKg());&#xA;                                }&#xA;                            }&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;        if (docTran.getTranCtrOperator() == null) {&#xA;            TranCtrOperatorDocument.TranCtrOperator ctrOpr = docTran.addNewTranCtrOperator();&#xA;            if (tran.getTranLineId() != null) {&#xA;                ctrOpr.setBizuId(tran.getTranLineId());&#xA;            }&#xA;        }&#xA;        boolean isLastStage = tran.getTranNextStageId() == null;&#xA;        setTruckTranTimes(tran, docTran, isLastStage);&#xA;&#xA;        if (tran.getTranUfvFlexString01() != null) {&#xA;            docTran.setTranUfvFlexString01(tran.getTranUfvFlexString01());&#xA;        }&#xA;        if (tran.getTranUfvFlexString02() != null) {&#xA;            docTran.setTranUfvFlexString02(tran.getTranUfvFlexString02());&#xA;        }&#xA;        if (tran.getTranUfvFlexString03() != null) {&#xA;            docTran.setTranUfvFlexString03(tran.getTranUfvFlexString03());&#xA;        }&#xA;        if (tran.getTranUfvFlexString04() != null) {&#xA;            docTran.setTranUfvFlexString04(tran.getTranUfvFlexString04());&#xA;        }&#xA;        if (tran.getTranUfvFlexString05() != null) {&#xA;            docTran.setTranUfvFlexString05(tran.getTranUfvFlexString05());&#xA;        }&#xA;        if (tran.getTranUfvFlexString06() != null) {&#xA;            docTran.setTranUfvFlexString06(tran.getTranUfvFlexString06());&#xA;        }&#xA;        if (tran.getTranUfvFlexString07() != null) {&#xA;            docTran.setTranUfvFlexString07(tran.getTranUfvFlexString07());&#xA;        }&#xA;        if (tran.getTranUfvFlexString08() != null) {&#xA;            docTran.setTranUfvFlexString08(tran.getTranUfvFlexString08());&#xA;        }&#xA;        if (tran.isDelivery()) {&#xA;            UnitFacilityVisit ufv = tran.getTranUfv();&#xA;            if (ufv != null &amp;&amp; (&quot;Y&quot;.equals(ufv.getUfvFlexString09()) || &quot;Yes&quot;.equals(ufv.getUfvFlexString09()))) {&#xA;                docTran.setTranUfvFlexString09(&quot;DO NOT BACKLOAD&quot;);&#xA;            }&#xA;        }&#xA;        if (tran.getTranUfvFlexString10() != null) {&#xA;            docTran.setTranUfvFlexString10(tran.getTranUfvFlexString10());&#xA;        }&#xA;        if (tran.getTranUfvFlexDate01() != null) {&#xA;            Calendar cal = Calendar.getInstance();&#xA;            cal.setTime(tran.getTranUfvFlexDate01());&#xA;            docTran.setTranUfvFlexDate01(cal);&#xA;        }&#xA;        if (tran.getTranUfvFlexDate02() != null) {&#xA;            Calendar cal = Calendar.getInstance();&#xA;            cal.setTime(tran.getTranUfvFlexDate02());&#xA;            docTran.setTranUfvFlexDate02(cal);&#xA;        }&#xA;        if (tran.getTranUfvFlexDate03() != null) {&#xA;            Calendar cal = Calendar.getInstance();&#xA;            cal.setTime(tran.getTranUfvFlexDate03());&#xA;            docTran.setTranUfvFlexDate03(cal);&#xA;        }&#xA;        if (tran.getTranUfvFlexDate04() != null) {&#xA;            Calendar cal = Calendar.getInstance();&#xA;            cal.setTime(tran.getTranUfvFlexDate04());&#xA;            docTran.setTranUfvFlexDate04(cal);&#xA;        }&#xA;        if (tran.getTranUnitFlexString01() != null) {&#xA;            docTran.setTranUnitFlexString01(tran.getTranUnitFlexString01());&#xA;        }&#xA;        if (inPageNbr != null) {&#xA;            docTran.setTranUnitFlexString02(inPageNbr);&#xA;        }&#xA;/*    if (tran.getTranUnitFlexString02() != null) {&#xA;      docTran.setTranUnitFlexString02(tran.getTranUnitFlexString02());&#xA;    }*/&#xA;        if (tran.getTranUnitFlexString03() != null) {&#xA;            docTran.setTranUnitFlexString03(tran.getTranUnitFlexString03());&#xA;        }&#xA;        if (tran.getTranUnitFlexString04() != null) {&#xA;            docTran.setTranUnitFlexString04(tran.getTranUnitFlexString04());&#xA;        }&#xA;        if (tran.getTranUnitFlexString05() != null) {&#xA;            docTran.setTranUnitFlexString05(tran.getTranUnitFlexString05());&#xA;        }&#xA;        if (tran.getTranUnitFlexString06() != null) {&#xA;            docTran.setTranUnitFlexString06(tran.getTranUnitFlexString06());&#xA;        }&#xA;        if (tran.getTranUnitFlexString07() != null) {&#xA;            docTran.setTranUnitFlexString07(tran.getTranUnitFlexString07());&#xA;        }&#xA;        if (tran.getTranUnitFlexString08() != null) {&#xA;            docTran.setTranUnitFlexString08(tran.getTranUnitFlexString08());&#xA;        }&#xA;        if (tran.getTranUnitFlexString09() != null) {&#xA;            docTran.setTranUnitFlexString09(tran.getTranUnitFlexString09());&#xA;        }&#xA;        if (tran.getTranUnitFlexString10() != null) {&#xA;            docTran.setTranUnitFlexString10(tran.getTranUnitFlexString10());&#xA;        }&#xA;        if (tran.getTranUnitFlexString11() != null) {&#xA;            docTran.setTranUnitFlexString11(tran.getTranUnitFlexString11());&#xA;        }&#xA;        if (tran.getTranUnitFlexString12() != null) {&#xA;            docTran.setTranUnitFlexString12(tran.getTranUnitFlexString12());&#xA;        }&#xA;        if (tran.getTranUnitFlexString13() != null) {&#xA;            docTran.setTranUnitFlexString13(tran.getTranUnitFlexString13());&#xA;        }&#xA;        if (tran.getTranUnitFlexString14() != null) {&#xA;            docTran.setTranUnitFlexString14(tran.getTranUnitFlexString14());&#xA;        }&#xA;        if (tran.getTranUnitFlexString15() != null) {&#xA;            docTran.setTranUnitFlexString15(tran.getTranUnitFlexString15());&#xA;        }&#xA;&#xA;        //Set Yard Row&#xA;        if (tran.getTranFlexString03() != null) {&#xA;            docTran.setTranFlexString03(tran.getTranFlexString03());&#xA;        }&#xA;&#xA;        //Temp&#xA;        if (unit != null) {&#xA;            UnitFacilityVisit ufv = tran.getTranUfv();&#xA;            if (ufv != null) {&#xA;                String flexString07 = ufv.getUfvFlexString07();&#xA;                if (&quot;KFF&quot;.equals(flexString07) || &quot;AMB&quot;.equals(flexString07)) {&#xA;                    docTran.setTranFlexString06(flexString07);&#xA;                } else if (unit.getUnitGoods() != null) {&#xA;                    ReeferRqmnts reeferRqmnts = unit.getUnitGoods().getGdsReeferRqmnts();&#xA;                    if (reeferRqmnts != null) {&#xA;                        Double minC = reeferRqmnts.getRfreqTempLimitMinC();&#xA;                        Double maxC = reeferRqmnts.getRfreqTempLimitMaxC();&#xA;                        if (minC != null &amp;&amp; maxC != null) {&#xA;                            minC = UnitUtils.convertTo(minC, TemperatureUnitEnum.C, TemperatureUnitEnum.F);&#xA;                            maxC = UnitUtils.convertTo(maxC, TemperatureUnitEnum.C, TemperatureUnitEnum.F);&#xA;                            docTran.setTranFlexString06(Math.round(minC) + &quot;/&quot; + Math.round(maxC));&#xA;                        } else if (minC != null) {&#xA;                            minC = UnitUtils.convertTo(minC, TemperatureUnitEnum.C, TemperatureUnitEnum.F);&#xA;                            docTran.setTranFlexString06(&quot;&quot; + Math.round(minC));&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;        //Carrier Service&#xA;        CarrierVisit cv = tran.getCarrierVisit();&#xA;        if (cv != null &amp;&amp; cv.getCvCvd() != null &amp;&amp; cv.getCvCvd().getCvdService() != null) {&#xA;            docTran.setTranFlexString07(cv.getCvCvd().getCvdService().getSrvcId());&#xA;        }&#xA;&#xA;        //Is reefer&#xA;        if (equipType != null) {&#xA;            docTran.setTranFlexString08(EquipRfrTypeEnum.NON_RFR.equals(equipType.getEqtypRfrType()) ? &quot;No&quot; : &quot;Yes&quot;);&#xA;        } else {&#xA;            docTran.setTranFlexString08(&quot;No&quot;);&#xA;        }&#xA;&#xA;        if (tran.getTranFlexDate01() != null) {&#xA;            Calendar cal = Calendar.getInstance();&#xA;            cal.setTime(tran.getTranFlexDate01());&#xA;            docTran.setTranFlexDate01(cal);&#xA;        }&#xA;        if (tran.getTranFlexDate02() != null) {&#xA;            Calendar cal = Calendar.getInstance();&#xA;            cal.setTime(tran.getTranFlexDate02());&#xA;            docTran.setTranFlexDate02(cal);&#xA;        }&#xA;        if (tran.getTranFlexDate03() != null) {&#xA;            Calendar cal = Calendar.getInstance();&#xA;            cal.setTime(tran.getTranFlexDate03());&#xA;            docTran.setTranFlexDate03(cal);&#xA;        }&#xA;        if (tran.getTranFlexDate04() != null) {&#xA;            Calendar cal = Calendar.getInstance();&#xA;            cal.setTime(tran.getTranFlexDate04());&#xA;            docTran.setTranFlexDate04(cal);&#xA;        }&#xA;&#xA;        GateAppointment gappt = tran.getTranAppointment();&#xA;        if (gappt != null) {&#xA;            docTran.setTranAppointmentState(gappt.getGapptState().getKey());&#xA;        }&#xA;    }&#xA;&#xA;    private static String getBLNbr(TruckTransaction inTran) {&#xA;        Unit unit = inTran.getTranUnit();&#xA;        if (unit != null &amp;&amp; unit.getUnitGoods() != null) {&#xA;            return unit.getUnitGoods().getGdsBlNbr();&#xA;        }&#xA;        return null;&#xA;    }&#xA;&#xA;    private static boolean hasTIRLOAD(Node inMultiStopNode) {&#xA;        Element stopElement = (Element) inMultiStopNode;&#xA;        NodeList hazdousCommodityNodeList = stopElement.getElementsByTagName(&quot;hazCommodity&quot;);&#xA;        NodeList nonHazousCommodityNodeList = stopElement.getElementsByTagName(&quot;nonHazCommodity&quot;);&#xA;        return (hazdousCommodityNodeList != null &amp;&amp; hazdousCommodityNodeList.getLength() &gt; 0) ||&#xA;                (nonHazousCommodityNodeList != null &amp;&amp; nonHazousCommodityNodeList.getLength() &gt; 0);&#xA;    }&#xA;&#xA;    private static void initTotalPagesForMultiStop(Element inRootElement) {&#xA;        NodeList stopElementList = inRootElement.getElementsByTagName(&quot;stop&quot;);&#xA;        _totalPages = 1;//TIR&#xA;        for (int i = stopElementList.getLength() - 1; i &gt;= 0; i--) {&#xA;            Element stopElement = (Element) stopElementList.item(i);&#xA;            NodeList consigneeNodeList = stopElement.getElementsByTagName(&quot;stopOffConsignee&quot;);&#xA;            NodeList hazdousCommodityNodeList = stopElement.getElementsByTagName(&quot;hazCommodity&quot;);&#xA;            NodeList nonHazousCommodityNodeList = stopElement.getElementsByTagName(&quot;nonHazCommodity&quot;);&#xA;            if ((hazdousCommodityNodeList != null &amp;&amp; hazdousCommodityNodeList.getLength() &gt; 0) ||&#xA;                    (nonHazousCommodityNodeList != null &amp;&amp; nonHazousCommodityNodeList.getLength() &gt; 0)) {&#xA;                int limit = 3;&#xA;                int size = 0;&#xA;                if (hazdousCommodityNodeList != null &amp;&amp; nonHazousCommodityNodeList != null) {&#xA;                    size = hazdousCommodityNodeList.getLength() + nonHazousCommodityNodeList.getLength();&#xA;                } else if (hazdousCommodityNodeList != null) {&#xA;                    size = hazdousCommodityNodeList.getLength();&#xA;                } else {&#xA;                    size = nonHazousCommodityNodeList.getLength();&#xA;                }&#xA;                int out = size / limit;&#xA;                if (size % limit &gt; 0) {&#xA;                    ++out;&#xA;                }&#xA;                _totalPages = _totalPages + out + 1;&#xA;            } else {&#xA;                _totalPages = _totalPages + 1;//DIR alone&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    private static String customizePackingGroup(String inPackingGroup) {&#xA;        if (&quot;Packaging Group - I&quot;.equals(inPackingGroup)) {&#xA;            return &quot;I&quot;;&#xA;        } else if (&quot;Packaging Group - II&quot;.equals(inPackingGroup)) {&#xA;            return &quot;II&quot;;&#xA;        } else if (&quot;Packaging Group - III&quot;.equals(inPackingGroup)) {&#xA;            return &quot;III&quot;;&#xA;        }&#xA;        return inPackingGroup&#xA;    }&#xA;&#xA;    private static String getAddress(ContactInfo inContactInfo) {&#xA;        if (inContactInfo == null) {&#xA;            return null;&#xA;        }&#xA;        String returnValue = &quot;&quot;;&#xA;        if (inContactInfo.getCtctAddressLine1() != null) {&#xA;            returnValue = inContactInfo.getCtctAddressLine1();&#xA;        }&#xA;&#xA;        if (inContactInfo.getCtctAddressLine2() != null) {&#xA;            returnValue = returnValue + &quot;, &quot; + inContactInfo.getCtctAddressLine2();&#xA;        }&#xA;&#xA;        if (inContactInfo.getCtctAddressLine3() != null) {&#xA;            returnValue = returnValue + &quot;, &quot; + inContactInfo.getCtctAddressLine3();&#xA;        }&#xA;&#xA;        if (inContactInfo.getCtctCity() != null) {&#xA;            returnValue = returnValue + &quot;, &quot; + inContactInfo.getCtctCity();&#xA;        }&#xA;&#xA;        if (inContactInfo.getCtctState() != null) {&#xA;            returnValue = returnValue + &quot;, &quot; + inContactInfo.getCtctState().getStateName();&#xA;        }&#xA;&#xA;        if (inContactInfo.getCtctMailCode() != null) {&#xA;            returnValue = returnValue + &quot;, &quot; + inContactInfo.getCtctMailCode();&#xA;        }&#xA;&#xA;        if (inContactInfo.getCtctCountry() != null) {&#xA;            returnValue = returnValue + &quot;, &quot; + inContactInfo.getCtctCountry().getCntryName();&#xA;        }&#xA;&#xA;        return returnValue;&#xA;    }&#xA;&#xA;    private static String getMultiStopAddress(NodeList inNodeList) {&#xA;        if (inNodeList == null || inNodeList.getLength() == 0) {&#xA;            return null;&#xA;        }&#xA;        Node node = inNodeList.item(0);&#xA;        String returnValue = &quot;&quot;;&#xA;        NodeList addressLine1List = ((Element) node).getElementsByTagName(&quot;addressLine1&quot;);&#xA;        if (addressLine1List != null &amp;&amp; addressLine1List.length == 1) {&#xA;            String value = addressLine1List.item(0).getTextContent();&#xA;            if (StringUtils.isNotBlank(value)) {&#xA;                returnValue = value;&#xA;            }&#xA;        }&#xA;        NodeList addressLine2List = ((Element) node).getElementsByTagName(&quot;addressLine2&quot;);&#xA;        if (addressLine2List != null &amp;&amp; addressLine2List.length == 1) {&#xA;            String value = addressLine2List.item(0).getTextContent();&#xA;            if (StringUtils.isNotBlank(value)) {&#xA;                returnValue = returnValue + &quot;, &quot; + value;&#xA;            }&#xA;        }&#xA;        NodeList cityList = ((Element) node).getElementsByTagName(&quot;city&quot;);&#xA;        if (cityList != null &amp;&amp; cityList.length == 1) {&#xA;            String value = cityList.item(0).getTextContent();&#xA;            if (StringUtils.isNotBlank(value)) {&#xA;                returnValue = returnValue + &quot;, &quot; + value;&#xA;            }&#xA;        }&#xA;        NodeList stateList = ((Element) node).getElementsByTagName(&quot;state&quot;);&#xA;        if (stateList != null &amp;&amp; stateList.length == 1) {&#xA;            String value = stateList.item(0).getTextContent();&#xA;            if (StringUtils.isNotBlank(value)) {&#xA;                returnValue = returnValue + &quot;, &quot; + value;&#xA;            }&#xA;        }&#xA;        NodeList zipList = ((Element) node).getElementsByTagName(&quot;zip&quot;);&#xA;        if (zipList != null &amp;&amp; zipList.length == 1) {&#xA;            String value = zipList.item(0).getTextContent();&#xA;            if (StringUtils.isNotBlank(value)) {&#xA;                returnValue = returnValue + &quot;, &quot; + value;&#xA;            }&#xA;        }&#xA;        return returnValue;&#xA;    }&#xA;&#xA;    private&#xA;    static void setTruckVisitTimes(TruckVisitStats inStats, TruckVisitDocument.TruckVisit inDocTv, boolean inIsLastStage, TruckTransaction inTransaction) {&#xA;        if (inStats != null &amp;&amp; inStats.getTvstatStart() != null) {&#xA;            TimeZone tz;&#xA;            Facility facility = ContextHelper.getThreadFacility();&#xA;            if (facility != null) {&#xA;                tz = facility.getTimeZone();&#xA;            } else {&#xA;                tz = ContextHelper.getThreadComplex().getTimeZone();&#xA;            }&#xA;            inDocTv.setTvdtlsTrkStartTime(convertDateToLocalTime(inStats.getTvstatStart(), tz));&#xA;            if (inIsLastStage) {&#xA;                StringBuilder duration = new StringBuilder();&#xA;                long durationMins = (TimeUtils.getCurrentTimeMillis() - inStats.getTvstatStart().getTime()) / 1000 / 60;&#xA;                long hours = durationMins / 60;&#xA;                long minutes = durationMins % 60;&#xA;                duration.append(hours).append(':');&#xA;                if (minutes &lt; 10) {&#xA;                    duration.append('0');&#xA;                }&#xA;                duration.append(minutes);&#xA;                inDocTv.setTvdtlsDuration(duration.toString());&#xA;                Date tvEndTime = TimeUtils.getCurrentTime();&#xA;&#xA;                inDocTv.setTvdtlsTrkEndTime(convertDateToLocalTime(tvEndTime, tz));&#xA;&#xA;                if (TranSubTypeEnum.RM.equals(inTransaction.getTranSubType())) {&#xA;                    Unit unit = inTransaction.getTranUnit();&#xA;&#xA;                    if (unit != null) {&#xA;                        String truckVisitTime = getUnitLastDeliveryTime(unit.getUnitId());&#xA;                        if (truckVisitTime != null) {&#xA;                            inDocTv.setTvdtlsTrkEndTime(truckVisitTime);&#xA;                        }&#xA;                    }&#xA;                }&#xA;                if (TranSubTypeEnum.RE.equals(inTransaction.getTranSubType())) {&#xA;                    Unit unit = inTransaction.getTranUnit();&#xA;&#xA;                    if (unit != null) {&#xA;                        UnitFacilityVisit ufv = unit.getUnitActiveUfv();&#xA;                        String truckVisitTime = getUnitLastDeliveryTime(unit.getUnitId());&#xA;&#xA;                        if (truckVisitTime != null) {&#xA;                            inDocTv.setTvdtlsTrkEndTime(truckVisitTime);&#xA;                        }&#xA;&#xA;                    }&#xA;                }&#xA;&#xA;            }&#xA;&#xA;            TruckVisitStage yardStageStats = inStats.findStageById(CachedGateStage.STAGE_ID__YARD);&#xA;            if (yardStageStats != null &amp;&amp; yardStageStats.getTvstageEnd() != null) {&#xA;                inDocTv.setTvdtlsYardCompletionTime(DateUtil.convertDateToLocalTime(yardStageStats.getTvstageEnd(), tz));&#xA;            }&#xA;&#xA;        }&#xA;    }&#xA;&#xA;    private static String convertDateToLocalTime(Date inDate, TimeZone inTimeZone) {&#xA;        if (inDate == null) {&#xA;            return null;&#xA;        }&#xA;        SimpleDateFormat formatter = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss&quot;);&#xA;        formatter.setTimeZone(inTimeZone);&#xA;        return formatter.format(inDate);&#xA;    }&#xA;&#xA;    private static void addTruckVisit(TruckVisitDetails inTvdtls, DocBodyDocument.DocBody inDocBody, TransactionAndVisitHolder inOutDao) {&#xA;        TruckVisitDocument.TruckVisit docTv = inDocBody.addNewTruckVisit();&#xA;        if (inTvdtls != null) {&#xA;            docTv.setTvdtlsLicNbr(inTvdtls.getTvdtlsTruckLicenseNbr());&#xA;            docTv.setTvdtlsTruckId(inTvdtls.getTvdtlsTruckId());&#xA;            if (inTvdtls.getTvdtlsTruckId() != null) {&#xA;                docTv.setTvdtlsTrkId(inTvdtls.getTvdtlsTruckId());&#xA;            }&#xA;            docTv.setTvdtlsDriverCardId(inTvdtls.getTvdtlsDriverCardId());&#xA;            docTv.setTvdtlsDriverLicenseNbr(inTvdtls.getTvdtlsDriverLicenseNbr());&#xA;            docTv.setTvdtlsDriverName(inTvdtls.getTvdtlsDriverName());&#xA;            docTv.setTvdtlsBatNbr(inTvdtls.getTvdtlsBatNbr());&#xA;            docTv.setTvdtlsTvKey(inTvdtls.getCvdGkey());&#xA;            if (inTvdtls.getTvdtlsGosTvKey() != null) {&#xA;                docTv.setTvdtlsGosTvKey(inTvdtls.getTvdtlsGosTvKey());&#xA;            }&#xA;            if (inTvdtls.getTvdtlsTrkCompany() != null) {&#xA;                docTv.setTvdtlsTrkCompany(inTvdtls.getTvdtlsTrkCompany().getBzuId());&#xA;                String name = inTvdtls.getTvdtlsTrkCompany().getBzuName();&#xA;                if (name != null &amp;&amp; name.length() &gt; 25) {&#xA;                    docTv.setTvdtlsTrkCompanyName(name.substring(0, 25));&#xA;                } else {&#xA;                    docTv.setTvdtlsTrkCompanyName(name);&#xA;                }&#xA;            }&#xA;            docTv.setTvdtlsFlexString01(inTvdtls.getTvdtlsFlexString01());&#xA;            docTv.setTvdtlsFlexString02(inTvdtls.getTvdtlsFlexString02());&#xA;            docTv.setTvdtlsFlexString03(inTvdtls.getTvdtlsFlexString03());&#xA;&#xA;            if (inTvdtls.getTvdtlsFlexDate01() != null) {&#xA;                Calendar cal = Calendar.getInstance();&#xA;                cal.setTime(inTvdtls.getTvdtlsFlexDate01());&#xA;                docTv.setTvdtlsFlexDate01(cal);&#xA;            }&#xA;&#xA;            if (inTvdtls.getTvdtlsEntryLane() != null) {&#xA;                GateLaneType laneType = docTv.addNewTvdtlsEntryLane();&#xA;                laneType.setLaneId(inTvdtls.getTvdtlsEntryLane().getLaneId());&#xA;            }&#xA;            if (inTvdtls.getTvdtlsExchangeLane() != null) {&#xA;                GateLaneType laneType = docTv.addNewTvdtlsExchangeLane();&#xA;                laneType.setLaneId(inTvdtls.getTvdtlsExchangeLane().getLaneId());&#xA;            }&#xA;            if (inTvdtls.getTvdtlsExitLane() != null) {&#xA;                GateLaneType laneType = docTv.addNewTvdtlsExitLane();&#xA;                laneType.setLaneId(inTvdtls.getTvdtlsExitLane().getLaneId());&#xA;            }&#xA;            if (inTvdtls.getTvdtlsTroubleLane() != null) {&#xA;                GateLaneType laneType = docTv.addNewTvdtlsTroubleLane();&#xA;                laneType.setLaneId(inTvdtls.getTvdtlsTroubleLane().getLaneId());&#xA;            }&#xA;            String nextExchangeAreaId = inTvdtls.getTvdtlsNextExchangeAreaId();&#xA;            if (nextExchangeAreaId != null) {&#xA;                docTv.setTvdtlsNextExchangeAreaId(nextExchangeAreaId);&#xA;            }&#xA;            List&lt;TruckTransactionStage&gt; gateStages = inTvdtls.findTruckVisitsStages();&#xA;            if (gateStages != null &amp;&amp; !gateStages.isEmpty()) {&#xA;                List&lt;TruckTransactionStage&gt; sortedStages = sortTranStagesByStageOrder(gateStages);&#xA;                for (Object gateStage : sortedStages) {&#xA;                    TruckTransactionStage item = (TruckTransactionStage) gateStage;&#xA;                    TvdtlsRequiredStagesDocument.TvdtlsRequiredStages stage = docTv.addNewTvdtlsRequiredStages();&#xA;                    String stageId = item.getTtstageId();&#xA;                    stage.setStageId(stageId);&#xA;                    if (item.getTtstageOrder() != null) {&#xA;                        stage.setStageOrder(item.getTtstageOrder().intValue());&#xA;                    }&#xA;                    if (item.getStageTransaction() != null) {&#xA;                        GateConfigStage configStage = getConfigStage(item.getStageTransaction().getGate(), stageId);&#xA;                        if (configStage != null) {&#xA;                            stage.setStageDescription(configStage.getStageDescription());&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;&#xA;            String nextStageId;&#xA;            if (inOutDao.hasTransaction()) {&#xA;                nextStageId = inTvdtls.getNextStageIdFromTransactions(inOutDao.getStage());&#xA;            } else {&#xA;                nextStageId = inTvdtls.getTvdtlsNextStageId();&#xA;            }&#xA;            boolean isLastStage = nextStageId == null;&#xA;&#xA;            TruckTransaction transaction = inOutDao.getTran();&#xA;&#xA;            setTruckVisitTimes(inTvdtls.getStats(), docTv, isLastStage, transaction);&#xA;&#xA;            //Printer Enhancement Start Receive Export Only&#xA;&#xA;&#xA;&#xA;            //Printer Enhancement End&#xA;&#xA;            docTv.setTvdtlsAppointmentNbr(String.valueOf(inTvdtls.getTvdtlsTvAppointmentNbr()));&#xA;            TruckVisitAppointment tva = inTvdtls.getTvdtlsTruckVisitAppointment();&#xA;            if (tva != null) {&#xA;                docTv.setTvdtlsAppointmentState(tva.getTvapptState().getKey());&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    private static com.navis.road.business.model.Document saveDocument(&#xA;            DocumentType inDoctype,&#xA;            Long inBatchNbr,&#xA;            String inStageId,&#xA;            TruckTransaction inTrkTran,&#xA;            String inDocData&#xA;    ) {&#xA;        return com.navis.road.business.model.Document.&#xA;                createDocument(inDoctype, inBatchNbr, inStageId, inTrkTran, inDocData);&#xA;    }&#xA;&#xA;    private static void setTruckTranTimes(TruckTransaction inTransaction, TrkTransactionDocument.TrkTransaction inDocTran, boolean inIsLastStage) {&#xA;        if (inTransaction != null &amp;&amp; inTransaction.getTranCreated() != null) {&#xA;            TimeZone tz;&#xA;            Facility facility = ContextHelper.getThreadFacility();&#xA;            if (facility != null) {&#xA;                tz = facility.getTimeZone();&#xA;            } else {&#xA;                tz = ContextHelper.getThreadComplex().getTimeZone();&#xA;            }&#xA;&#xA;            // tranStartTime is the transaction's created time&#xA;            inDocTran.setTranStartTime(convertDateToLocalTime(inTransaction.getTranCreated(), tz));&#xA;&#xA;            // tranEndTime is set only if the transaction is at the last stage. If so, the current time is set as the tranEndTime&#xA;            if (inIsLastStage) {&#xA;                Date tranEndTime = TimeUtils.getCurrentTime();&#xA;                inDocTran.setTranEndTime(convertDateToLocalTime(tranEndTime, tz));&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    private static DateFormat getDateFormatter() {&#xA;        DateFormat dateFormatter = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.SHORT);&#xA;        dateFormatter.setTimeZone(ContextHelper.getThreadUserTimezone());&#xA;        return dateFormatter;&#xA;    }&#xA;    /**&#xA;     * This method is used to get the container last delivery time&#xA;     * getUnitLastDeliveryTime&#xA;     * @param unitId&#xA;     */&#xA;    public static String getUnitLastDeliveryTime(String  tranCtrNbr) {&#xA;        DomainQuery truckTransQuery = com.navis.framework.portal.QueryUtils.createDomainQuery(&quot;TruckTransaction&quot;)&#xA;                .addDqPredicate(com.navis.framework.portal.query.PredicateFactory.eq(com.navis.road.RoadField.TRAN_CTR_NBR, tranCtrNbr))&#xA;                .addDqOrdering(com.navis.framework.portal.Ordering.desc(com.navis.road.RoadField.TRAN_HANDLED));&#xA;&#xA;        List&lt;TruckTransaction&gt; truckTransactions=  HibernateApi.getInstance().findEntitiesByDomainQuery(truckTransQuery);&#xA;        Iterator iterator = truckTransactions.iterator();&#xA;        Date createdDate = null;&#xA;&#xA;        while(iterator.hasNext()) {&#xA;            TruckTransaction transaction = (TruckTransaction) iterator.next();&#xA;            if (transaction.getTranHandled() != null &amp;&amp; transaction.isDelivery() &amp;&amp; transaction.isComplete()) {&#xA;                createdDate = transaction.getTranHandled();&#xA;                break&#xA;            }&#xA;&#xA;        }&#xA;        TimeZone tz;&#xA;        Facility facility = ContextHelper.getThreadFacility();&#xA;        if (facility != null) {&#xA;            tz = facility.getTimeZone();&#xA;        } else {&#xA;            tz = ContextHelper.getThreadComplex().getTimeZone();&#xA;        }&#xA;&#xA;        return convertDateToLocalTime(createdDate, tz);&#xA;    }&#xA;&#xA;    /**&#xA;     * This method is used to get the container last shipper&#xA;     * getUnitLastDeliveryShipper&#xA;     * @param unitId&#xA;     */&#xA;    public static String getUnitLastDeliveryShipper(String tranCtrNbr) {&#xA;        DomainQuery truckTransQuery = com.navis.framework.portal.QueryUtils.createDomainQuery(&quot;TruckTransaction&quot;)&#xA;                .addDqPredicate(com.navis.framework.portal.query.PredicateFactory.eq(com.navis.road.RoadField.TRAN_CTR_NBR, tranCtrNbr)).&#xA;                addDqOrdering(com.navis.framework.portal.Ordering.desc(com.navis.road.RoadField.TRAN_HANDLED));&#xA;        List&lt;TruckTransaction&gt; truckTransactions = HibernateApi.getInstance().findEntitiesByDomainQuery(truckTransQuery);&#xA;        Iterator iterator = truckTransactions.iterator();&#xA;        String shipper = null;&#xA;        while (iterator.hasNext()) {&#xA;            TruckTransaction transaction = (TruckTransaction) iterator.next();&#xA;&#xA;            if (transaction.isDelivery() &amp;&amp; transaction.getTranUnit() != null) {&#xA;&#xA;                if (transaction.getTranUnit().getUnitGoods() != null &amp;&amp; transaction.getTranUnit().getUnitGoods().getGdsShipperBzu() != null) {&#xA;&#xA;                    shipper = transaction.getTranUnit().getUnitGoods().getGdsShipperBzu().getBzuName();&#xA;&#xA;                    shipper = shipper != null &amp;&amp; shipper.length() &gt; 30 ? shipper.getBzuName().substring(0, 30) :&#xA;                            shipper;&#xA;&#xA;                }&#xA;                break;&#xA;            }&#xA;&#xA;        }&#xA;        return shipper;&#xA;    }&#xA;&#xA;&#xA;    private static int _totalPages = 0;&#xA;    private static int _currentPage = 0;&#xA;    private com.navis.road.business.model.Document _document&#xA;    private Logger LOGGER = Logger.getLogger(MatsonAncCreateDocument.class);&#xA;}" />
<extension name="CommonUtils" scope="MATSON/ALASKA" type="LIBRARY" language="GROOVY" is-enabled="Y" contents="import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.external.framework.AbstractExtensionCallback&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.services.business.rules.EventType&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; *&#xA; * This groovy utility library contains commonly used methods&#xA; * Date: 10/06/2016&#xA; *&#xA; */&#xA;class CommonUtils extends AbstractExtensionCallback {&#xA;&#xA;    private Logger LOGGER = Logger.getLogger(CommonUtils.class);&#xA;&#xA;    public void recordEvent(Unit inUnit, String eventId) {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;&#xA;        if(inUnit) {&#xA;            LOGGER.info(&quot;recordEvent BEGIN&quot;);&#xA;            ServicesManager srvcMgr = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;            EventType eventType = EventType.findEventType(eventId);&#xA;            srvcMgr.recordEvent(eventType, eventId, null, null, inUnit);&#xA;        }&#xA;        LOGGER.info(&quot;recordEvent End&quot;);&#xA;    }&#xA;&#xA;}&#xA;" />
<extension name="MATPullChsAcc" scope="MATSON/ALASKA" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.model.LocPosition&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.business.api.RectifyParms&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.api.UnitManager&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;/**&#xA; * This will pull a chassis or accessory into the yard if it is referenced at the outgate and is notavailable in the yard&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 09/14/15&#xA; * JIRA: CSDV-3208&#xA; * SFDC: 144851&#xA; *&#xA; * Peter Seiler&#xA; * 02/02/2016&#xA; * JIRA: CSDV-3063&#xA; * SFDC: 150230&#xA; *&#xA; * Fix bug that caused it to rectify a chassis that was married to another unit.&#xA; *&#xA; */&#xA;&#xA;public class MATPullChsAcc extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        this.log(&quot;Execution Started MATPullChsAcc&quot;);&#xA;&#xA;        TruckTransaction ThisTran = inDao.getTran();&#xA;&#xA;        /* get out if no gate transaction is found */&#xA;&#xA;        if (ThisTran == null)&#xA;            return;&#xA;&#xA;        String AccID = ThisTran.getTranCtrAccNbr();&#xA;&#xA;        if (AccID == null)&#xA;        {&#xA;            AccID = ThisTran.getTranChsAccNbr();&#xA;        }&#xA;&#xA;        if (AccID != null)&#xA;        {&#xA;&#xA;            /* see if the accessory exists as a bare unit */&#xA;&#xA;            Unit ThisAccUnit = this.findActiveUnitInYardByID(AccID);&#xA;&#xA;            if (ThisAccUnit == null)&#xA;            {&#xA;&#xA;                Unit ThisCtrUnit = this.findActiveUnitByAcc(AccID);&#xA;                if (ThisCtrUnit == null)&#xA;                {&#xA;&#xA;                    /* there is no unit in the yard that uses this accessory */&#xA;&#xA;                    /* get the equipment record for the accessory. */&#xA;&#xA;                    Equipment ThisAccEq = Equipment.findEquipment(AccID);&#xA;&#xA;                    if (ThisAccEq != null)&#xA;                    {&#xA;                        /* if it exists create a new bare accessory unit in the yard */&#xA;&#xA;                        UnitManager unitMgr = (UnitManager) Roastery.getBean(UnitManager.BEAN_ID);&#xA;                        LocPosition YardPos = LocPosition.createYardPosition(ContextHelper.getThreadYard(), 'DVRC', null, null, false);&#xA;&#xA;                        UnitFacilityVisit newUfv = unitMgr.createYardBornUnit(ThisAccEq, YardPos, 'Gate Fix It');&#xA;&#xA;                        /* rectify the unit into that yard position */&#xA;&#xA;                        RectifyParms thisRectifyParm = new RectifyParms();&#xA;&#xA;                        thisRectifyParm.setEraseHistory(false);&#xA;                        thisRectifyParm.setUfvTransitState(UfvTransitStateEnum.S40_YARD);&#xA;                        thisRectifyParm.setUnitVisitState(UnitVisitStateEnum.ACTIVE);&#xA;                        thisRectifyParm.setPosition(YardPos);&#xA;&#xA;                        newUfv.rectify(thisRectifyParm);&#xA;&#xA;                        HibernateApi.getInstance().flush();&#xA;&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        /* process chassis only if a chassis is specified and it is not 'chassis is owners' */&#xA;&#xA;        if (ThisTran.getTranChsNbr() != null &amp;&amp; !ThisTran.getTranChsIsOwners())&#xA;        {&#xA;&#xA;            /* see if the chassis exists as a bare chassis unit */&#xA;&#xA;            Unit ThisChsUnit = this.findActiveUnitInYardByID(ThisTran.getTranChsNbr());&#xA;&#xA;            /* if not see if there is a unit with that chassis as carrier */&#xA;&#xA;            if(ThisChsUnit == null)&#xA;            {&#xA;                ThisChsUnit = this.findActiveUnitByChs(ThisTran.getTranChsNbr());&#xA;            }&#xA;&#xA;            if (ThisChsUnit == null)&#xA;            {&#xA;&#xA;                /* there is no unit in the yard that uses this chassis */&#xA;&#xA;                /* get the equipment record for the chassis. */&#xA;&#xA;                Equipment ThisChsEq = Equipment.findEquipment(ThisTran.getTranChsNbr());&#xA;&#xA;                if (ThisChsEq != null)&#xA;                {&#xA;                    /* if it exists create a new bare accessory unit in the yard */&#xA;&#xA;                    UnitManager unitMgr = (UnitManager) Roastery.getBean(UnitManager.BEAN_ID);&#xA;                    LocPosition YardPos = LocPosition.createYardPosition(ContextHelper.getThreadYard(), 'DVRC', null, null, false);&#xA;&#xA;                    UnitFacilityVisit newUfv = unitMgr.createYardBornUnit(ThisChsEq, YardPos, 'Gate Fix It');&#xA;&#xA;                    /* rectify the unit into that yard position */&#xA;&#xA;                    RectifyParms thisRectifyParm = new RectifyParms();&#xA;&#xA;                    thisRectifyParm.setEraseHistory(false);&#xA;                    thisRectifyParm.setUfvTransitState(UfvTransitStateEnum.S40_YARD);&#xA;                    thisRectifyParm.setUnitVisitState(UnitVisitStateEnum.ACTIVE);&#xA;                    thisRectifyParm.setPosition(YardPos);&#xA;&#xA;                    newUfv.rectify(thisRectifyParm);&#xA;&#xA;                    HibernateApi.getInstance().flush();&#xA;&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        executeInternal(inDao);&#xA;    }&#xA;&#xA;    /* Local function to find the an active unit in the yard unit by ID */&#xA;&#xA;    private Unit findActiveUnitInYardByID(String chsId)&#xA;&#xA;    {&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_VISIT_STATE,  UnitVisitStateEnum.ACTIVE))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_ID, chsId))&#xA;&#xA;        Unit[] unitList=Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;&#xA;        if(unitList == null || unitList.size()==0)&#xA;        {&#xA;&#xA;            return null;&#xA;&#xA;        }&#xA;&#xA;        return unitList[0];&#xA;    }&#xA;&#xA;    /* Local function to find the an active unit in the yard unit based on the chsid */&#xA;&#xA;    private Unit findActiveUnitByChs(String chsId)&#xA;&#xA;    {&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_VISIT_STATE,  UnitVisitStateEnum.ACTIVE))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_CARRIAGE_UE_EQ_ID, chsId))&#xA;&#xA;        Unit[] unitList=Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;&#xA;        if(unitList == null || unitList.size()==0)&#xA;        {&#xA;&#xA;            return null;&#xA;&#xA;        }&#xA;&#xA;        return unitList[0];&#xA;    }&#xA;&#xA;    /* Local function to find the an active unit in the yard unit based on the chsid */&#xA;&#xA;    private Unit findActiveUnitByAcc(String chsId)&#xA;&#xA;    {&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_VISIT_STATE,  UnitVisitStateEnum.ACTIVE))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_ACRY_EQUIP_IDS, chsId))&#xA;&#xA;        Unit[] unitList=Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;&#xA;        if(unitList == null || unitList.size()==0)&#xA;        {&#xA;&#xA;            return null;&#xA;&#xA;        }&#xA;&#xA;        return unitList[0];&#xA;    }&#xA;}" />
<extension name="MATDetachChsAcc" scope="MATSON/ALASKA/ANK" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.AllOtherFrameworkPropertyKeys&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import com.navis.road.business.atoms.TranSubTypeEnum&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;import com.navis.inventory.InventoryField&#xA;&#xA;/**&#xA; * This will pull a chassis or accessory out of the yard if the clerk has entered it at the ingate.&#xA; * This allows a chassis to be ingated that was no properly delivered earlier.&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 09/09/15&#xA; * JIRA: CSDV-3208&#xA; * SFDC: 144851&#xA; *&#xA; * -------------------------------------------------------------------------------------------------------------------&#xA; * In RC the accessory id is in the chassis accessory number field. Added code to get this value in case of an RC&#xA; *&#xA; * Author:  Bruno Chiarini&#xA; * Date:    2015-09-18&#xA; *&#xA; */&#xA;&#xA;public class MATDetachChsAcc extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;    private Logger LOGGER = Logger.getLogger(MATDetachChsAcc.class);&#xA;&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot;MATDetachChsAcc Execution Started&quot;);&#xA;&#xA;        TruckTransaction ThisTran = inDao.getTran();&#xA;&#xA;        /* get out if no gate transaction is found */&#xA;&#xA;        if (ThisTran == null)&#xA;            return;&#xA;&#xA;        // One single Accessory field in receive transactions&#xA;        // In RC is Chassis Accessory Number, In all others is Container Accessory Number&#xA;        String AccId;&#xA;        if (ThisTran.getTranSubType() == TranSubTypeEnum.RC)&#xA;            AccId = ThisTran.getTranChsAccNbr();&#xA;        else&#xA;            AccId = ThisTran.getTranCtrAccNbr();&#xA;&#xA;        LOGGER.info(&quot;Accessory Id: &quot; + AccId);&#xA;&#xA;        if (AccId != null)&#xA;        {&#xA;&#xA;            /* see if the accessory exists as a bare unit */&#xA;&#xA;            Unit ThisAccUnit = this.findActiveUnitInYardByID(AccId);&#xA;            LOGGER.info(&quot;Active unit for AccId: &quot; + ThisAccUnit);&#xA;&#xA;&#xA;            if (ThisAccUnit == null)&#xA;            {&#xA;                // It doesn't exist as bare unit, let's check if it's attached to another unit&#xA;&#xA;                Unit ThisCtrUnit = this.findActiveUnitByAcc(AccId);&#xA;                LOGGER.info(&quot;Attached to active unit: &quot; + ThisCtrUnit);&#xA;&#xA;                if (ThisCtrUnit != null)&#xA;                {&#xA;                    /* there is another unit with it as accessory  detach it */&#xA;                    UnitEquipment ThisCtrAccUnitUe = ThisCtrUnit.getAccessoryOnCtr();&#xA;                    UnitEquipment ThisChsAccUnitUe = ThisCtrUnit.getAccessoryOnChs();&#xA;&#xA;                    if (ThisCtrAccUnitUe == null)&#xA;                    //Not on Ctr, must be on Chs&#xA;                        ThisChsAccUnitUe.detach(&quot;Detached by MATDetachChsAcc&quot;);&#xA;                    else if (ThisChsAccUnitUe == null)&#xA;                    //Not on Chs, must be on Ctr&#xA;                        ThisCtrAccUnitUe.detach(&quot;Detached by MATDetachChsAcc&quot;);&#xA;                    else&#xA;                    {&#xA;                        //Chs and Ctr have accessories, check which one to detach based on id&#xA;                        //Can only be one of them, because ingate has only one acc field&#xA;                        LOGGER.info(&quot;CtrUnitUe ID: &quot; + ThisCtrAccUnitUe.getField(InventoryField.UNIT_EQ_ID_FULL));&#xA;                        if (ThisCtrAccUnitUe.getField(InventoryField.UNIT_EQ_ID_FULL) == AccId)&#xA;                            ThisCtrAccUnitUe.detach(&quot;Detached by MATDetachChsAcc&quot;);&#xA;                        else&#xA;                            ThisChsAccUnitUe.detach(&quot;Detached by MATDetachChsAcc&quot;);&#xA;                    }&#xA;&#xA;                    HibernateApi.getInstance().flush();&#xA;&#xA;                    LOGGER.info(&quot;Accessory Detached&quot;);&#xA;                }&#xA;            }&#xA;&#xA;            /* if there is an accessory in the yard retire it */&#xA;&#xA;            if (ThisAccUnit != null)&#xA;            {&#xA;                ThisAccUnit.makeRetired();&#xA;                HibernateApi.getInstance().flush();&#xA;                LOGGER.info(&quot;Accessory Retired&quot;);&#xA;            }&#xA;        }&#xA;&#xA;        /* process chassis only if a chassis is specified and it is not 'chassis is owners' */&#xA;&#xA;        if (ThisTran.getTranChsNbr() != null &amp;&amp; !ThisTran.getTranChsIsOwners())&#xA;        {&#xA;&#xA;            /* see if the chassis exists as a bare chassis unit */&#xA;&#xA;            Unit ThisChsUnit = this.findActiveUnitInYardByID(ThisTran.getTranChsNbr());&#xA;&#xA;            /* if not see if there is a unit with that chassis as carrier */&#xA;&#xA;            if (ThisChsUnit == null)&#xA;            {&#xA;                Unit ThisCtrUnit = this.findActiveUnitByChs(ThisTran.getTranChsNbr());&#xA;&#xA;                if (ThisCtrUnit != null)&#xA;                {&#xA;&#xA;                    /* there is another unit with it as carrier  detach it */&#xA;                    try {&#xA;&#xA;&#xA;                        ThisChsUnit = ThisCtrUnit.dismount();&#xA;                        HibernateApi.getInstance().flush();&#xA;                    }&#xA;                    catch (Exception e){&#xA;                        RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                                &quot;This chassis &quot; + ThisTran.getTranChsNbr() + &quot; is already attached to the &quot;  + ThisCtrUnit));&#xA;                    }&#xA;                }&#xA;            }&#xA;&#xA;            /* if there is a in the yard retire it */&#xA;&#xA;            if (ThisChsUnit != null)&#xA;&#xA;            {&#xA;                ThisChsUnit.makeRetired();&#xA;                HibernateApi.getInstance().flush();&#xA;            }&#xA;        }&#xA;&#xA;        LOGGER.info(&quot;MATDetachChsAcc Execution Ended&quot;)&#xA;        executeInternal(inDao);&#xA;    }&#xA;&#xA;    /* Local function to find the an active unit in the yard unit by ID */&#xA;&#xA;    private Unit findActiveUnitInYardByID(String chsId)&#xA;&#xA;    {&#xA;        //LOGGER.info(&quot;Finding units&quot;);&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_VISIT_STATE,  UnitVisitStateEnum.ACTIVE))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_ID, chsId))&#xA;&#xA;        Unit[] unitList=Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;        //LOGGER.info(&quot;Found &quot; + unitList.length);&#xA;        //for (int i=0; i&lt; unitList.length; i++)&#xA;        //    LOGGER.info(&quot;ActiveUnitInYardbyAccFound: &quot; + unitList[i]);&#xA;        if(unitList == null || unitList.size()==0)&#xA;        {&#xA;&#xA;            return null;&#xA;&#xA;        }&#xA;&#xA;        return unitList[0];&#xA;    }&#xA;&#xA;    /* Local function to find the an active unit in the yard unit based on the chsid */&#xA;&#xA;    private Unit findActiveUnitByChs(String chsId)&#xA;&#xA;    {&#xA;&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_VISIT_STATE,  UnitVisitStateEnum.ACTIVE))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_CARRIAGE_UE_EQ_ID, chsId))&#xA;&#xA;        Unit[] unitList=Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;&#xA;        if(unitList == null || unitList.size()==0)&#xA;        {&#xA;&#xA;            return null;&#xA;&#xA;        }&#xA;&#xA;        return unitList[0];&#xA;    }&#xA;&#xA;    /* Local function to find the an active unit in the yard unit based on the chsid */&#xA;&#xA;    private Unit findActiveUnitByAcc(String chsId)&#xA;&#xA;    {&#xA;&#xA;        //LOGGER.info(&quot;Finding units By Acc&quot;);&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_VISIT_STATE,  UnitVisitStateEnum.ACTIVE))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UNIT_ACRY_EQUIP_IDS, chsId))&#xA;&#xA;        Unit[] unitList=Roastery.getHibernateApi().findEntitiesByDomainQuery(dq);&#xA;&#xA;        //LOGGER.info(&quot;Found &quot; + unitList.length);&#xA;        //for (int i=0; i&lt; unitList.length; i++)&#xA;        //    LOGGER.info(&quot;ActiveUnitInYardbyAccFound: &quot; + unitList[i]);&#xA;        if(unitList == null || unitList.size()==0)&#xA;        {&#xA;&#xA;            return null;&#xA;&#xA;        }&#xA;&#xA;        return unitList[0];&#xA;    }&#xA;}" />
<extension name="MATSyncUnitFlexWithBooking" scope="MATSON/ALASKA/DUT" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;&#xA;import com.navis.argo.ArgoBizMetafield&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.api.IServiceEventFieldChange&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.util.ValueObject&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.units.EqBaseOrder&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.orders.OrdersField&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.orders.business.eqorders.EquipmentOrder&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; * This groovy applies the booking stow block to the unit's priority stow (UnitFlexSting08) when the unit is rolled to a new booking&#xA; * This is triggered with a UNIT_ROLL event&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 08/05/15&#xA; * JIRA: ARGO-76865&#xA; * SFDC: 142550&#xA; *&#xA; */&#xA;&#xA;public class MATSyncUnitFlexWithBooking extends AbstractGeneralNoticeCodeExtension&#xA;&#xA;{&#xA;    public void execute(GroovyEvent inEvent)&#xA;&#xA;    {&#xA;        this.log(&quot;Execution Started MATSyncUnitFlexWithBooking&quot;);&#xA;&#xA;        /* get the event */&#xA;&#xA;        Event ThisEvent = inEvent.getEvent();&#xA;&#xA;        if (ThisEvent == null)&#xA;            return;&#xA;&#xA;        /* Get the unit and the Booking */&#xA;&#xA;        Unit ThisUnit = (Unit) inEvent.getEntity();&#xA;&#xA;        this.log(&quot;Unit is &quot; + ThisUnit)&#xA;&#xA;        EqBaseOrder ThisBaseOrder = ThisUnit.getDepartureOrder();&#xA;&#xA;        this.log(&quot;Depart order &quot; + ThisBaseOrder)&#xA;&#xA;        EquipmentOrder ThisEqOrd = EquipmentOrder.resolveEqoFromEqbo(ThisBaseOrder);&#xA;&#xA;        this.log(&quot;Equipmnet Order &quot; + ThisEqOrd)&#xA;        Booking ThisBooking = findBookingFromEventChanges(ThisEvent, ThisUnit);&#xA;&#xA;        this.log(&quot;Booking from new value is &quot; + ThisBooking)&#xA;        if (ThisBooking == null) {&#xA;            ThisBooking = Booking.resolveBkgFromEqo(ThisEqOrd);&#xA;        }&#xA;&#xA;        this.log(&quot;Booking is &quot; + ThisBooking);&#xA;&#xA;        /* set the unit's priority stow value */&#xA;&#xA;        ThisUnit.setUnitFlexString08(ThisBooking.getEqoStowBlock());&#xA;&#xA;&#xA;        //INCORPORATES THE CODE FROM GvyCmisEquiDetail GROOVY, AS CODE IS NOT WORKING THERE&#xA;        this.log(&quot;Updating srv company : 989898&quot;);&#xA;        update(inEvent, ThisBooking);&#xA;    }&#xA;&#xA;    public Booking findBookingFromEventChanges(Event event, Unit ThisUnit) {&#xA;        Booking  booking = null;&#xA;        Iterator fcIt = event.getFieldChanges().iterator();&#xA;        String eqboNbr = null;&#xA;        String eqboVisit = null;&#xA;        String eqboDclrdVisit = null;&#xA;        while(fcIt.hasNext()) {&#xA;            IServiceEventFieldChange fc = (IServiceEventFieldChange)fcIt.next();&#xA;            ValueObject fcVao = new ValueObject(&quot;IServiceEventFieldChange&quot;);&#xA;            MetafieldId metafieldId = MetafieldIdFactory.valueOf(fc.getMetafieldId());&#xA;            /*fcVao.setFieldValue(ArgoBizMetafield.EVENT_FIELD_CHANGE_METAFIELD_ID, metafieldId);&#xA;            fcVao.setFieldValue(ArgoBizMetafield.EVENT_FIELD_CHANGE_PREV_VALUE, ThisEvent.getFieldChangeValue(metafieldId, fc.getPrevVal()));&#xA;            fcVao.setFieldValue(ArgoBizMetafield.EVENT_FIELD_CHANGE_NEW_VALUE, ThisEvent.getFieldChangeValue(metafieldId, fc.getNewVal()));*/&#xA;            this.log(&quot;Field : &quot;+metafieldId.toString());&#xA;            this.log(&quot;Prev Value : &quot;+event.getFieldChangeValue(metafieldId, fc.getPrevVal()).toString());&#xA;            this.log(&quot;New Value  : &quot;+event.getFieldChangeValue(metafieldId, fc.getNewVal()).toString());&#xA;&#xA;            if (InventoryField.EQBO_NBR.equals(metafieldId)) {&#xA;                eqboNbr = event.getFieldChangeValue(metafieldId, fc.getNewVal()).toString();&#xA;            }&#xA;            if (InventoryField.UFV_INTENDED_OB_CV.equals(metafieldId)) {&#xA;                eqboVisit = event.getFieldChangeValue(metafieldId, fc.getNewVal()).toString();&#xA;            }&#xA;            if (InventoryField.RTG_DECLARED_CV.equals(metafieldId)) {&#xA;                eqboDclrdVisit = event.getFieldChangeValue(metafieldId, fc.getNewVal()).toString();&#xA;            }&#xA;        }&#xA;        if (eqboVisit == null) {&#xA;            eqboVisit = eqboDclrdVisit;&#xA;        }&#xA;        if (eqboNbr != null &amp;&amp; eqboVisit != null) {&#xA;            this.log(&quot;eqboNBR : &quot;+eqboNbr + &quot; // eqboVisit : &quot;+eqboVisit);&#xA;            CarrierVisit cv = CarrierVisit.findVesselVisit(ContextHelper.getThreadFacility(), eqboVisit);&#xA;            booking = Booking.findBooking(eqboNbr, ThisUnit.getUnitLineOperator(), cv);&#xA;            if (booking == null) {&#xA;                try {&#xA;                    booking = Booking.findBookingWithoutLine(eqboNbr, cv);&#xA;                } catch (Exception e) {&#xA;                    this.log(&quot;Couldnt find the booking with eqboNbr and Visit&quot;)&#xA;                }&#xA;            }&#xA;            if (booking == null) {&#xA;                try {&#xA;                    booking = Booking.findBookingsByNbr(eqboNbr);&#xA;                } catch (Exception e) {&#xA;                    this.log(&quot;Couldnt find the booking only with eqboNbr&quot;)&#xA;                }&#xA;            }&#xA;        }&#xA;        return booking;&#xA;    }&#xA;&#xA;    public void update(GroovyEvent inEvent, Booking thisBooking) {&#xA;&#xA;        GroovyApi api = new GroovyApi();&#xA;        Event  thisEvent = inEvent.getEvent();&#xA;        this.log(&quot;inside update srv company : &quot;+thisBooking.getEqboNbr());&#xA;        if (thisEvent == null) {&#xA;            return;&#xA;        }&#xA;&#xA;        Unit unit = (Unit) inEvent.getEntity();&#xA;&#xA;        if (unit == null) {&#xA;            return;&#xA;        }&#xA;        this.log(&quot;Start Event ---:&quot;+thisEvent.getEventTypeId()+ &quot; on Unit :&quot;+unit.getUnitId()+&quot; ---:&quot;)&#xA;&#xA;        def doer = thisEvent.getEvntAppliedBy()&#xA;        boolean isAlwaysSendIGT = false;&#xA;        try {&#xA;            if (unit != null) {&#xA;&#xA;                this.log(&quot;56565656Loaded unit from DB : &quot;+unit.getUnitId());&#xA;                UnitEquipment unitEquipment = unit.getUnitPrimaryUe();&#xA;                EquipmentState ueEquipmentState = unitEquipment.getUeEquipmentState()&#xA;                def equipFlex01 = ueEquipmentState != null ? ueEquipmentState.getEqsFlexString01() : ''&#xA;                this.log(&quot;ueEquipmentState :equipFlex01(getEqsFlexString01) Value---:&quot;+equipFlex01)&#xA;                String serviceId = setEqCntrSvr(inEvent, thisBooking);&#xA;                this.log(&quot;ueEquipmentState :equipFlex01(getEqsFlexString01) Value1---:&quot;+equipFlex01)&#xA;                /**&#xA;                 * For creating the case with Navis, Logging required details.&#xA;                 */&#xA;                this.log(Level.INFO, &quot;UNIT_ROLL details from unit Object&quot;);&#xA;                this.log(Level.INFO, &quot;The value of getEqsFlexString01 from Unit Object &quot; + equipFlex01);&#xA;                this.log(Level.INFO, &quot;Equipment Operator &quot; + unit.getUnitPrimaryUe().getUeEqOperator().getBzuId());&#xA;                this.log(Level.INFO, &quot;Vessel Line Operator &quot; + unit.getOutboundCv().getCvOperator().getBzuId());&#xA;                this.log(Level.INFO, &quot;Vessel Line Operator from Booking &quot; + thisBooking.getEqoVesselVisit().getCarrierOperator().getBzuId());&#xA;                this.log(Level.INFO, &quot;getEqsFlexString01 from booking&quot; + serviceId);&#xA;                /**&#xA;                 * For creating the case with Navis, Logging required details.&#xA;                 * Ends here, this block can be removed after the case is resolved.&#xA;                 */&#xA;                //unitEquipment = unit.getUnitPrimaryUe();&#xA;                if (equipFlex01 != null) {&#xA;                    //ueEquipmentState = unitEquipment.getUeEquipmentState();&#xA;                    //ueEquipmentState.setEqsFlexString01(serviceId);&#xA;                    def newEquipFlex01 = serviceId;&#xA;                    //ueEquipmentState != null ? ueEquipmentState.getEqsFlexString01() : '';&#xA;                    this.log(&quot;ueEquipmentState :newEquipFlex01(getEqsFlexString01) Value-11--:&quot;+newEquipFlex01);&#xA;                    if (newEquipFlex01!= null &amp;&amp; &quot;MAT&quot;.equalsIgnoreCase(newEquipFlex01) &amp;&amp; !&quot;MAT&quot;.equalsIgnoreCase(equipFlex01)) {&#xA;                        isAlwaysSendIGT = true;&#xA;                        this.log(&quot;isAlwaysSendIGT true&quot;)&#xA;                    }&#xA;                }&#xA;&#xA;            }&#xA;        } catch(Exception e) {&#xA;            this.log(&quot;exception thrown : &quot;+e.getMessage());&#xA;        }&#xA;        if(!doer.contains('FRUCTOSE_MTY')){&#xA;            this.log(&quot; ! FRUCTOSE_MTY&quot;)&#xA;            def gvyPropUpdtObj = api.getGroovyClassInstance(&quot;GvyCmisEventUnitPropertyUpdate&quot;)&#xA;            gvyPropUpdtObj.processUnitPropertyUpdate(inEvent,api,  isAlwaysSendIGT)&#xA;        }&#xA;    }&#xA;&#xA;    public String setEqCntrSvr(GroovyEvent event, Booking thisBooking) {&#xA;        String srvId = &quot;MAT&quot;;&#xA;        LOGGER.setLevel(Level.DEBUG);&#xA;        LOGGER.info(&quot;Inside GvyCmisEquiDetail.setEqCntrSvr&quot;)&#xA;        Unit unit = event.getEntity();&#xA;&#xA;        String eventId = event.getEvent().getEventTypeId()&#xA;        LOGGER.debug(&quot;Event ID  &quot;+eventId);&#xA;        try {&#xA;            //Get Equi SRV&#xA;            UnitEquipment unitEquipment = unit.getUnitPrimaryUe()&#xA;            LOGGER.debug(&quot;Unit Equipment    &quot;+unitEquipment);&#xA;            EquipmentState ueEquipmentState = unitEquipment.getUeEquipmentState()&#xA;            String equipFlex01 = ueEquipmentState != null ? ueEquipmentState.getEqsFlexString01() : null&#xA;            LOGGER.info(&quot;getEqsFlexString01/ Eq Srv Company : &quot;+equipFlex01);&#xA;            if (equipFlex01 != null &amp;&amp; !(eventId.equals('UNIT_DISCH_COMPLETE') || eventId.equals('UNIT_IN_GATE') ||&#xA;                    eventId.equals('UNIT_ROLL'))) {&#xA;                return;&#xA;            }&#xA;            String unitLineOperator = unit.getFieldValue(&quot;unitPrimaryUe.ueEquipmentState.eqsEqOperator.bzuId&quot;)&#xA;            LOGGER.info(&quot;Unit Line Operator &quot;+unitLineOperator);&#xA;            unitLineOperator = unitLineOperator != null ? unitLineOperator : ''&#xA;            String equiSrv = &quot;&quot;;&#xA;            String vesLineOptr = &quot;&quot;;&#xA;            //Thread.sleep(1000);&#xA;            if (eventId.equals('UNIT_ROLL')) {&#xA;                //Ingate Bkg Line Operator&#xA;//                vesLineOptr = unit.getFieldValue(&quot;unitActiveUfv.ufvActualObCv.cvCvd.vvdBizu.bzuId&quot;);&#xA;                vesLineOptr = thisBooking.getEqoVesselVisit().getCarrierOperator().getBzuId();&#xA;                LOGGER.debug(unit.getUnitId() + &quot; -&gt;Value of UNIT OB vesLineOptr from Object is &quot;+vesLineOptr);&#xA;            }&#xA;            LOGGER.info(&quot;vesLineOptr    &quot;+vesLineOptr+&quot; : unitLineOperator &quot;+unitLineOperator);&#xA;            //verify and set EqSrv Cntr&#xA;            vesLineOptr = vesLineOptr != null ? vesLineOptr : (unitLineOperator.equals('MAT') ? 'MAT' : '')&#xA;            vesLineOptr = !vesLineOptr.equals('MAT') ? 'CLI' : 'MAT'&#xA;            LOGGER.debug(&quot;Value of vesLineOptr after manipulation is    &quot;+vesLineOptr);&#xA;            ueEquipmentState.setEqsFlexString01(vesLineOptr)&#xA;            LOGGER.info(&quot;setEqsFlexString01 / New Eq Container Service   &quot;+vesLineOptr);&#xA;            LOGGER.info(&quot;eventId ::&quot; + eventId + &quot; Eq SRV :&quot; + equipFlex01 + &quot; vesLineOptr :&quot; + vesLineOptr + &quot;    unitLineOperator::&quot; + unitLineOperator)&#xA;            srvId = vesLineOptr;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return srvId;&#xA;    }&#xA;    private static final Logger LOGGER = Logger.getLogger(MATSyncUnitFlexWithBooking.class);&#xA;}" />
<extension name="MATUnitUpdateCargoWeight Execution" scope="MATSON/ALASKA/ANK" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="N" description="MATUnitUpdateCargoWeight Execution" contents="import com.navis.external.services.AbstractGeneralNoticeCodeExtension;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import org.apache.log4j.Level;&#xA;import org.apache.log4j.Logger;&#xA;&#xA;import java.util.Iterator;&#xA;import java.util.Set;&#xA;&#xA;/**&#xA; * Created by Naveen Krishnan on 8/23/2016.&#xA; */&#xA;public class MATUnitUpdateCargoWeight extends AbstractGeneralNoticeCodeExtension {&#xA;    private Logger LOGGER = Logger.getLogger(MATUnitUpdateCargoWeight.class);&#xA;&#xA;    public void execute(GroovyEvent inEvent)&#xA;&#xA;    {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot;MATUnitUpdateCargoWeight Execution Started&quot;);&#xA;        Unit unit;&#xA;&#xA;        try {&#xA;            unit = (Unit) inEvent.getEntity();&#xA;            if (unit == null) {&#xA;                LOGGER.error(&quot;Reference to Unit not found!&quot;);&#xA;                return;&#xA;            } else&#xA;                LOGGER.info(&quot;Unit: &quot; + unit);&#xA;        } catch (Exception e) {&#xA;            LOGGER.info(&quot; Exception &quot; + e);&#xA;    }&#xA;&#xA;            Set set = inEvent.getEvent().getEvntFieldChanges();&#xA;            LOGGER.info(&quot;field change size : &quot;+set.size());&#xA;            Iterator iter = set.iterator();&#xA;            EventFieldChange efc;&#xA;            boolean freightKindChanged = false;&#xA;            String oldVal = &quot;&quot;;&#xA;            String newVal = &quot;&quot;;&#xA;            String metaField = &quot;&quot;;&#xA;            while ( iter.hasNext()) {&#xA;                efc = (EventFieldChange)iter.next();&#xA;                LOGGER.info(&quot;get feild change id :&quot;+efc.getMetafieldId());&#xA;                LOGGER.info(&quot;get feild change old Value :&quot;+efc.getPrevVal());&#xA;                LOGGER.info(&quot;get feild change new Value :&quot;+efc.getNewVal());&#xA;                LOGGER.info(&quot;get feild change fc new Value :&quot;+efc.getEvntfcNewVal());&#xA;&#xA;                metaField = efc.getMetafieldId();&#xA;                oldVal = efc.getPrevVal();&#xA;                newVal = efc.getNewVal();&#xA;                LOGGER.info(&quot; MetafieldID: &quot; + metaField);&#xA;                LOGGER.info(&quot;Old Value: &quot; + oldVal);&#xA;                LOGGER.info(&quot;new Value: &quot; + newVal);&#xA;                if (metaField == &quot;unitFreightKind&quot;) {&#xA;                    freightKindChanged = true;&#xA;                    break;&#xA;                }&#xA;            }&#xA;            Double grossWeight = 0.0&#xA;            if (freightKindChanged) {&#xA;                if ((oldVal== &quot;FCL&quot;) &amp;&amp; (newVal == &quot;MTY&quot;)) {&#xA;&#xA;                    unit.updateGoodsAndCtrWtKg(grossWeight);&#xA;&#xA;                }&#xA;&#xA;&#xA;&#xA;            }&#xA;&#xA;            LOGGER.info(&quot;MATUnitUpdateCargoWeight Execution Ended.&quot;);&#xA;        }&#xA;}&#xA;&#xA;" />
<extension name="MATSetBookingNumFlex" scope="MATSON/ALASKA" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2016 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; * When the dray status is changed to dray-out-and-back or the unit is resurrected the BL from the unit is placed in the 'Booking Num' flex field&#xA; * This flex field can then be used on the Dray-In gate screen (UnitFlexString09)&#xA; *&#xA; * Peter Seiler&#xA; *&#xA; * Date: 02/09/2016&#xA; * JIRA:&#xA; * SFDC:&#xA; *&#xA; * Called from: General Notices for user-created event UNIT_REROUTE&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;class MATSetBookingNumFlex extends AbstractGeneralNoticeCodeExtension&#xA;{&#xA;    public void execute(GroovyEvent inGroovyEvent)&#xA;    {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot; MATSetBookingNumFlex execute Started.&quot;);&#xA;&#xA;        if (inGroovyEvent == null)&#xA;            return;&#xA;&#xA;        Event thisEvent = inGroovyEvent.getEvent();&#xA;&#xA;        if (thisEvent == null)&#xA;            return;&#xA;&#xA;        /* Get the unit */&#xA;&#xA;        Unit ThisUnit = (Unit) inGroovyEvent.getEntity();&#xA;&#xA;        if (ThisUnit == null)&#xA;            return;&#xA;&#xA;        /* it has to have a dray status */&#xA;&#xA;        if (ThisUnit.getUnitDrayStatus() == null)&#xA;            return;&#xA;&#xA;        if(ThisUnit.getUnitGoods() != null)&#xA;        {&#xA;            ThisUnit.setUnitFlexString09(ThisUnit.getUnitGoods().getGdsBlNbr());&#xA;        }&#xA;    }&#xA;    private Logger LOGGER = Logger.getLogger(MATSetBookingNumFlex.class);&#xA;}" />
<extension name="MatsonAncFtpAdaptor" scope="MATSON/ALASKA" type="LIBRARY" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.navis.external.framework.AbstractExtensionCallback&#xA;import com.navis.framework.AllOtherFrameworkPropertyKeys&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.framework.util.CarinaUtils&#xA;import org.apache.commons.lang.StringUtils&#xA;import org.apache.commons.net.ftp.FTP&#xA;import org.apache.commons.net.ftp.FTPClient&#xA;import org.apache.commons.net.ftp.FTPReply&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; Open FTP connection, send files and close connection.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 07/17/2015&#xA; *&#xA; * Date: 07/17/2015: 5:41 PM&#xA; * JIRA: CSDV-3024&#xA; * SFDC: 00138337&#xA; * Called from: Gate Configuration&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;class MatsonAncFtpAdaptor extends AbstractExtensionCallback {&#xA;  MatsonAncFtpAdaptor() {&#xA;    LOGGER.setLevel(Level.INFO);&#xA;  }&#xA;  /**&#xA;   * Open the Ftp Connection&#xA;   *&#xA;   * @param inMlbx&#xA;   * @throws com.navis.framework.util.BizFailure&#xA;   */&#xA;  public openConnection(GeneralReference inGeneralReference) throws BizFailure {&#xA;    _ftpClient = new FTPClient();&#xA;    _generalReference = inGeneralReference;&#xA;    String mailBoxAddr = inGeneralReference.getRefValue1();&#xA;    String userId = inGeneralReference.getRefValue3();&#xA;    String pwd = inGeneralReference.getRefValue4();&#xA;    Long timeoutValue = new Long(inGeneralReference.getRefValue5());&#xA;&#xA;    try {&#xA;      _ftpClient.setDefaultTimeout(timeoutValue.intValue());&#xA;&#xA;      boolean isAddWithPort = false;&#xA;      //communication address&#xA;&#xA;      if (mailBoxAddr.contains(PORT_DELIMITER)) {&#xA;        isAddWithPort = true;&#xA;        String[] ftpPortAddress = mailBoxAddr.split(PORT_DELIMITER);&#xA;&#xA;        if (ftpPortAddress.length == 2) {&#xA;          String address = ftpPortAddress[0].trim()&#xA;&#xA;          if (StringUtils.isNotEmpty(address)) {&#xA;            String ftpAddr = address;&#xA;            String port = ftpPortAddress[1].trim();&#xA;&#xA;            if (StringUtils.isNumeric(port)) {&#xA;              int ftpPort = Integer.parseInt(port);&#xA;              _ftpClient.connect(ftpAddr, ftpPort);&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;&#xA;      if (!isAddWithPort) {&#xA;        _ftpClient.connect(mailBoxAddr);&#xA;      }&#xA;      LOGGER.info(&quot;connect--&quot; + _ftpClient.getReplyCode() + &quot;-&quot; + _ftpClient.getReplyString());&#xA;      if (!FTPReply.isPositiveCompletion(_ftpClient.getReplyCode())) {&#xA;        _ftpClient.disconnect();&#xA;        String param = &quot;Unable to Connect to Host &quot; + mailBoxAddr + &quot; for the following reason :&quot; + _ftpClient.getReplyCode() +&#xA;                _ftpClient.getReplyString();&#xA;        LOGGER.error(param);&#xA;        throw BizFailure.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null, param);&#xA;      }&#xA;      if (!_ftpClient.login(userId, pwd)) {&#xA;        _ftpClient.disconnect();&#xA;        String param = &quot;User Name : &quot; + userId + &quot; or Password is Invalid&quot;;&#xA;        LOGGER.error(param);&#xA;        throw BizFailure.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null, param);&#xA;      } else {&#xA;        _ftpClient.enterLocalPassiveMode();&#xA;      }&#xA;&#xA;      LOGGER.info(&quot;login--&quot; + _ftpClient.getReplyCode() + &quot;-&quot; + _ftpClient.getReplyString());&#xA;      LOGGER.info(&quot;data connection mode--&quot; + _ftpClient.getDataConnectionMode());&#xA;    } catch (Exception inEx) {&#xA;      String exception = CarinaUtils.getStackTrace(inEx);&#xA;      LOGGER.error(&quot;Unable to Open Connection to Host &quot; + mailBoxAddr + &quot; with user name &quot; + userId +&#xA;              &quot; for the following reason &quot; + exception);&#xA;      //throw BizFailure.wrap(e);&#xA;      if (inEx instanceof BizFailure) {&#xA;        throw (BizFailure) inEx;&#xA;      }&#xA;      //for avoiding Socket time out error (caused by the value for FTP_DEFAULT_TIMEOUT setting).&#xA;      if (inEx instanceof SocketTimeoutException) {&#xA;        String param = &quot;Request timed out. Retry with an increased value for FTP_DEFAULT_TIMEOUT setting&quot;;&#xA;        LOGGER.error(param);&#xA;        throw BizFailure.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null, param);&#xA;      } else {&#xA;        throw BizFailure.wrap(inEx);&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;  /**&#xA;   * Send the file to mailbox folder&#xA;   *&#xA;   * @param inInputStream&#xA;   * @param inFileName&#xA;   * @return success&#xA;   * @throws BizFailure&#xA;   */&#xA;  public boolean sendDocument(String inFileName, InputStream inInputStream) throws BizFailure {&#xA;    boolean success = false;&#xA;    String mailBoxAddr = _generalReference.getRefValue1();&#xA;    String communicationFolder = _generalReference.getRefValue2();&#xA;    String userId = _generalReference.getRefValue3();&#xA;    Long soTimeoutValue = new Long(_generalReference.getRefValue6());&#xA;    try {&#xA;      _ftpClient.changeWorkingDirectory(communicationFolder);&#xA;      LOGGER.info(&quot;cwd--&quot; + _ftpClient.getReplyCode() + &quot;-&quot; + _ftpClient.getReplyString());&#xA;      if (_ftpClient.getReplyCode() == 501) {&#xA;        String param = &quot;Given directory path &quot; + communicationFolder + &quot; is invalid - use proper path separator&quot;;&#xA;        LOGGER.error(param);&#xA;        throw BizFailure.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null, param);&#xA;      }&#xA;      if (_ftpClient.getReplyCode() == 550) {&#xA;        String param = &quot;Failed to change directory: &quot; + communicationFolder;&#xA;        LOGGER.error(param);&#xA;        throw BizFailure.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null, param);&#xA;      }&#xA;&#xA;      _ftpClient.setFileType(FTP.BINARY_FILE_TYPE);&#xA;      LOGGER.info(&quot;type--&quot; + _ftpClient.getReplyCode() + &quot;-&quot; + _ftpClient.getReplyString());&#xA;&#xA;      //mode.&#xA;      try {&#xA;        _ftpClient.setSoTimeout(soTimeoutValue.intValue());&#xA;&#xA;        success = _ftpClient.storeFile(inFileName, inInputStream);&#xA;&#xA;        if (!success) {&#xA;          LOGGER.info(&quot;Sending Failed, Resending the file&quot;);&#xA;          _ftpClient.enterLocalActiveMode();&#xA;          success = _ftpClient.storeFile(inFileName, inInputStream);&#xA;        }&#xA;      } catch (Exception ftpEx) {&#xA;        LOGGER.info(&quot;Exception occured during file sending, so trying to send again in Active mode : &quot; + ftpEx);&#xA;        _ftpClient.enterLocalActiveMode();&#xA;        success = _ftpClient.storeFile(inFileName, inInputStream);&#xA;      }&#xA;      LOGGER.info(&quot;send(storeFile)--&quot; + _ftpClient.getReplyCode() + &quot;-&quot; + _ftpClient.getReplyString());&#xA;    } catch (Exception inEx) {&#xA;      String exception = CarinaUtils.getStackTrace(inEx);&#xA;      LOGGER.error(&quot;Unable to send file &quot; + inFileName + &quot; to mailbox folder &quot; + communicationFolder + &quot; on Host &quot; + communicationFolder +&#xA;              &quot; for the following reason &quot; + exception);&#xA;      if (inEx instanceof BizFailure) {&#xA;        throw (BizFailure) inEx;&#xA;      }&#xA;      String param = &quot;Can not send file &quot; + inFileName + &quot; to Host &quot; + communicationFolder + &quot; for the following reason: &quot; + inEx.getMessage();&#xA;      LOGGER.error(param);&#xA;      throw BizFailure.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null, param);&#xA;    } finally {&#xA;      if (inInputStream != null) {&#xA;        try {&#xA;          inInputStream.close();&#xA;        } catch (IOException ex) {&#xA;          // nothing we can do&#xA;          LOGGER.error(&quot;Unexpected Error: Unable to close the inputstream &quot; + ex);&#xA;        }&#xA;      }&#xA;    }&#xA;    return success;&#xA;  }&#xA;&#xA;  /**&#xA;   * Close the Ftp Connection&#xA;   *&#xA;   * @throws BizFailure&#xA;   */&#xA;  public void closeConnection() {&#xA;    if (_ftpClient != null) {&#xA;      try {&#xA;        if (_ftpClient.isConnected()) {&#xA;          _ftpClient.logout();&#xA;          _ftpClient.disconnect();&#xA;          LOGGER.info(&quot;logout--&quot; + _ftpClient.getReplyCode() + &quot;-&quot; + _ftpClient.getReplyString());&#xA;        }&#xA;      } catch (Exception inEx) {&#xA;        String exception = CarinaUtils.getStackTrace(inEx);&#xA;        LOGGER.error(&quot;Unable to Close Connection for Host &quot; + _generalReference.getRefValue1() + &quot; for the following reason &quot; + exception);&#xA;      }&#xA;    } else {&#xA;      LOGGER.debug(&quot;No need to close connection since ftpClient is not initialized...&quot;);&#xA;    }&#xA;  }&#xA;&#xA;  private FTPClient _ftpClient;&#xA;  private static String PORT_DELIMITER = &quot;:&quot;;&#xA;  private GeneralReference _generalReference;&#xA;  private static Logger LOGGER = Logger.getLogger(MatsonAncFtpAdaptor.class);&#xA;}" />
<extension name="MatsonUnitSetVGMVerified" scope="MATSON/ALASKA" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="import com.navis.argo.ArgoBizMetafield;&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension;&#xA;import com.navis.framework.portal.FieldChanges;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import com.navis.services.business.rules.EventType;&#xA;import org.apache.log4j.Level;&#xA;import org.apache.log4j.Logger;&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.argo.business.api.ServicesManager;&#xA;&#xA;/**&#xA; * This groovy calls the MatsonUnitVGMVerifiedCalcLibrary to set the VGM Required field of Unit from Booking's full return location field&#xA; * SOLAS VGM&#xA; * Date: 12-May-2016&#xA; */&#xA;&#xA;&#xA;public class MatsonSetUnitVGMVerified extends AbstractGeneralNoticeCodeExtension {&#xA;&#xA;   private static Logger LOGGER = Logger.getLogger(MatsonSetUnitVGMVerified.class);&#xA;   String vgmUpdateEvent = &quot;VGM_UPDATE&quot;;&#xA;&#xA;    public void execute(GroovyEvent inGroovyEvent) {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.warn(&quot; MatsonSetUnitVGMVerified execute Started.&quot;);&#xA;&#xA;        if (inGroovyEvent != null) {&#xA;            Event event = inGroovyEvent.getEvent();&#xA;            if (event != null) {&#xA;                Unit unit = (Unit) inGroovyEvent.getEntity();&#xA;                if (unit != null) {&#xA;                    def matsonUnitVGMVerifiedCalc = getLibrary(&quot;MatsonUnitVGMVerifiedCalcLibrary&quot;);&#xA;                    LOGGER.warn(&quot;MatsonAncVGMRequiredOnUnitRoll about to execute MatsonUnitVGMVerifiedCalcLibrary&quot;);&#xA;                    matsonUnitVGMVerifiedCalc.resolveVGMRequiredFlagForUnit(unit);&#xA;                    getLibrary(&quot;CommonUtils&quot;).recordEvent(unit, vgmUpdateEvent);&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA; &#xA;}" />
<extension name="HazmatUpdateNBSplit" scope="MATSON/ALASKA/ANK" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="package codeExtensions&#xA;&#xA;import com.navis.argo.ArgoPropertyKeys&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.atoms.HazardsNumberTypeEnum&#xA;import com.navis.inventory.business.imdg.HazardItem&#xA;import com.navis.inventory.business.imdg.Hazards&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.sun.jersey.api.client.Client&#xA;import com.sun.jersey.api.client.ClientResponse&#xA;import com.sun.jersey.api.client.WebResource&#xA;import com.sun.jersey.api.client.config.ClientConfig&#xA;import com.sun.jersey.api.client.config.DefaultClientConfig&#xA;import org.apache.log4j.Logger&#xA;import org.codehaus.jackson.map.ObjectMapper&#xA;import org.codehaus.jackson.type.TypeReference&#xA;&#xA;import javax.ws.rs.core.MediaType&#xA;&#xA;/**&#xA; * Created by kramachandran on 7/6/2016.&#xA; */&#xA;class HazmatUpdateNBSplit extends AbstractGeneralNoticeCodeExtension {&#xA;    public static final String SEPERATOR = &quot;/&quot;;&#xA;    private static Logger logger = Logger.getLogger(HazmatUpdateNBSplit.class);&#xA;    private String facility = null;&#xA;&#xA;    public String getDestinationBaseURL() {&#xA;        GeneralReference genRef = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;HAZMAT&quot;, &quot;URL&quot;);&#xA;        return genRef.getRefValue1();&#xA;    }&#xA;&#xA;    public void execute(GroovyEvent inGroovyEvent) throws BizFailure {&#xA;        this.log(&quot;Execution Started HazmatUpdateNBSplit&quot;);&#xA;        String inBillNo = &quot;&quot;;&#xA;        String inContainerNo = null;&#xA;        if (inGroovyEvent != null) {&#xA;            Event event = inGroovyEvent.getEvent();&#xA;            this.log(&quot;Found event : &quot; + event.getEvntEventType());&#xA;            if (event != null) {&#xA;                Unit unit = (Unit) inGroovyEvent.getEntity();&#xA;                if (unit != null) {&#xA;                    this.log(&quot;Found Unit : &quot; + unit.getUnitId());&#xA;                    inContainerNo = unit.getUnitId() != null &amp;&amp; unit.getUnitId().length() == 11 ? unit.getUnitId().subSequence(0, 10) : unit.getUnitId();&#xA;                    if (unit.getUnitGoods() != null) {&#xA;                        inBillNo = unit.getUnitGoods().getGdsBlNbr();&#xA;                        if (inBillNo != null) {&#xA;                            inBillNo = inBillNo.trim();&#xA;                            if (inBillNo.length() &gt; 7) {&#xA;                                inBillNo = inBillNo.substring(0, 7);&#xA;                            }&#xA;                        }&#xA;                    }&#xA;&#xA;                    this.log(&quot;Input paramters are \t BillNo : &quot; + inBillNo + &quot; Container No : &quot; + inContainerNo);&#xA;                    if (inBillNo == null &amp;&amp; inContainerNo == null) {&#xA;                        throw new BizFailure(&quot;No BL Number to retrieve Hazards : &quot; + unit.getUnitId());&#xA;                    }&#xA;                    ClientConfig clientConfig = new DefaultClientConfig();&#xA;                    Client client = Client.create(clientConfig);&#xA;                    //for usage with TDP app, add an method to construct the URI&#xA;                    //psethuraman : Changes to retrieve HAZMAT details for container&#xA;                    WebResource resource = null;&#xA;&#xA;                    /*if (inContainerNo != null) {&#xA;                        resource = client.resource(getDestinationBaseURL() + &quot;lclcontainer&quot; + SEPERATOR + inContainerNo);&#xA;                    } else*/ if (inBillNo != null) {&#xA;                        resource = client.resource(getDestinationBaseURL() + &quot;booking&quot; + SEPERATOR + inBillNo /*+ SEPERATOR + inConatinerNo*/);&#xA;                    }&#xA;                    ClientResponse response = resource != null ? resource.accept(MediaType.APPLICATION_JSON).get(ClientResponse.class) : null;&#xA;                    if (response == null || response.getStatus() != 200) {&#xA;                        this.log(&quot;Request failed&quot;);&#xA;                        this.log(response.toString());&#xA;                        throw new BizFailure(&quot;JSON response failed&quot; + response.toString());&#xA;                    } else {&#xA;                        this.log(&quot;Got Response from HAZMAT : &quot; + response.toString());&#xA;                        String hazmatString = response.getEntity(String.class);&#xA;                        this.log(&quot;the response from hazmat is &quot; + hazmatString);&#xA;                        if (hazmatString.length() &lt; 10) {&#xA;                            throw new BizFailure(&quot;JSON dont have necessary Data&quot;);&#xA;                        }&#xA;                        Collection&lt;Map&lt;String, Object&gt;&gt; hazmat = null;&#xA;                        try {&#xA;                            this.log(&quot;parsing json to java map - start&quot;);&#xA;                            hazmat = new ObjectMapper().readValue(hazmatString, new TypeReference&lt;Collection&lt;Map&lt;String, Object&gt;&gt;&gt;() {&#xA;                            });&#xA;&#xA;                        } catch (IOException e) {&#xA;                            this.log(&quot;Error thrown while parsing JSON to Object mapping : &quot; + hazmatString);&#xA;                            this.log(e.printStackTrace());&#xA;                            //logger.error(e);&#xA;                            throw new BizFailure(ArgoPropertyKeys.GROOVY_EXECUTION_FAILURE, e, hazmat);&#xA;                        }&#xA;                        this.log(&quot;parsing json to java map - complete&quot;);&#xA;                        Hazards hazards = null;&#xA;                        try {&#xA;                            Unit ThisUnit = (Unit) inGroovyEvent.getEntity();&#xA;                            if (ThisUnit == null) {&#xA;                                this.log(&quot;Reference to Unit not found!&quot;);&#xA;                                sendMailAndReturn(&quot;Reference to Unit not found!&quot;);&#xA;                            } else&#xA;                                this.log(&quot;Unit: &quot; + ThisUnit);&#xA;                            //ThisUnit.getUnitGoods().attachHazards(hazards);&#xA;&#xA;                            if (hazmat != null) {&#xA;                                Map&lt;String, List&lt;Object&gt;&gt; stringObjectMap = hazmat.iterator().next();&#xA;                                /*for (String s : stringObjectMap.keySet()) {&#xA;                                    //log(s + &quot;    &quot; + stringObjectMap.get(s).toString());&#xA;                                }&#xA;                                List&lt;Map&lt;String, Object&gt;&gt; hazardousCommodityLines = stringObjectMap.get(&quot;hazardousCommodityLines&quot;);&#xA;                                //log(hazardousCommodityLines.toString());&#xA;                                for (Map&lt;String, Object&gt; o : hazardousCommodityLines) {&#xA;                                    for (String s1 : o.keySet()) {&#xA;                                        log(o.get(s1).toString());&#xA;                                    }&#xA;                                }*/&#xA;                                this.log(&quot;Manipulating new Hazards&quot;);&#xA;                                Hazards newHazards = getHazardsFromMap(stringObjectMap, ThisUnit.getUnitGoods().getGdsHazards()) as Hazards;&#xA;                                this.log(&quot;Received Hazards from the map&quot;);&#xA;                                this.log(newHazards.toString());&#xA;                                this.log(&quot;Start Clearing all Hazards&quot;);&#xA;                                ThisUnit.ensureGoods().clearHazardsRef();&#xA;                                this.log(&quot;Complete Clearing all Hazards&quot;);&#xA;                                this.log(&quot;Start - Attaching the hazards&quot; + newHazards.toString() + &quot; to Unit&quot; + ThisUnit.toString());&#xA;                                ThisUnit.attachHazards(newHazards);&#xA;                                this.log(&quot;Complete - Attaching the hazards&quot; + newHazards.toString() + &quot; to Unit&quot; + ThisUnit.toString());&#xA;                            }&#xA;                        }&#xA;                        catch (Exception ex) {&#xA;                            throw new BizFailure(ArgoPropertyKeys.GROOVY_EXECUTION_FAILURE, ex, hazmat);&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;        this.log(&quot;Execution End HazmatUpdateNBSplit&quot;);&#xA;    }&#xA;&#xA;&#xA;    Hazards getHazardsFromMap(Map&lt;String, List&lt;Object&gt;&gt; inHazardsMap, Hazards inHazards) {&#xA;        this.log(&quot;creating new hazards&quot;);&#xA;        Hazards hazardsNew = Hazards.createHazardsEntity();&#xA;        this.log(&quot;creating new hazard item and adding to hazards&quot;);&#xA;        List&lt;Map&lt;String, Object&gt;&gt; hazardousCommodityLines = inHazardsMap.get(&quot;hazardousCommodityLines&quot;);&#xA;        for (Map&lt;String, Object&gt; o : hazardousCommodityLines) {&#xA;            hazardsNew.addHazardItem(getHazard(o));&#xA;            this.log(&quot;new hazard item added to hazard&quot;);&#xA;        }&#xA;        this.log(hazardsNew.toString());&#xA;        this.log(&quot;creating new hazards completed and returning to caller&quot;);&#xA;        return hazardsNew;&#xA;    }&#xA;&#xA;    private HazardItem getHazard(Map&lt;String, Object&gt; commodityLine) {&#xA;        HazardItem hazardItem = new HazardItem();&#xA;        this.log(&quot;creating new hazard item start : &quot;+commodityLine.get(&quot;hazPrimaryClass&quot;) +&quot;/&quot;);&#xA;        if (commodityLine.get(&quot;hazPrimaryClass&quot;) == null&#xA;                || &quot;&quot;.equals(commodityLine.get(&quot;hazPrimaryClass&quot;).toString().trim())&#xA;                || &quot;X&quot;.equalsIgnoreCase(commodityLine.get(&quot;hazPrimaryClass&quot;).toString().trim())) {&#xA;            hazardItem.setFieldValue(InventoryField.HZRDI_IMDG_CLASS, &quot;X&quot;);&#xA;        } else {&#xA;            hazardItem.setFieldValue(InventoryField.HZRDI_IMDG_CLASS, commodityLine.get(&quot;hazPrimaryClass&quot;));&#xA;        }&#xA;        //hazardItem.setFieldValue(InventoryField.HZRDI_IMDG_CODE, commodityLine.get(&quot;&quot;));&#xA;        HazardsNumberTypeEnum hazardsNumberTypeEnum = null;&#xA;        if (commodityLine.get(&quot;hazType&quot;) != null &amp;&amp; commodityLine.get(&quot;hazType&quot;).equals(&quot;UN&quot;))&#xA;            hazardsNumberTypeEnum = HazardsNumberTypeEnum.UN;&#xA;        else if (commodityLine.get(&quot;hazType&quot;) != null &amp;&amp; commodityLine.get(&quot;hazType&quot;).equals(&quot;NA&quot;))&#xA;            hazardsNumberTypeEnum = HazardsNumberTypeEnum.NA;&#xA;        hazardItem.setFieldValue(InventoryField.HZRDI_NBR_TYPE, hazardsNumberTypeEnum);&#xA;&#xA;        hazardItem.setFieldValue(InventoryField.HZRDI_U_NNUM, commodityLine.get(&quot;hazNumber&quot;));&#xA;&#xA;        String ltdQtyFlag = commodityLine.get(&quot;hazLimitedQuantity&quot;) != null &amp;&amp; !commodityLine.get(&quot;hazLimitedQuantity&quot;).isEmpty() &amp;&amp; &quot;1&quot;.equals(commodityLine.get(&quot;hazLimitedQuantity&quot;)) ? &quot;Y&quot; : &quot;N&quot;;&#xA;        hazardItem.setFieldValue(InventoryField.HZRDI_LTD_QTY, ltdQtyFlag);&#xA;        Double flashPoint = commodityLine.get(&quot;hazFlashPoint&quot;) != null &amp;&amp; !commodityLine.get(&quot;hazFlashPoint&quot;).isEmpty() ? Double.valueOf(commodityLine.get(&quot;hazFlashPoint&quot;)) : null;&#xA;        hazardItem.setFieldValue(InventoryField.HZRDI_FLASH_POINT, flashPoint);&#xA;        hazardItem.setFieldValue(InventoryField.HZRDI_TECH_NAME, commodityLine.get(&quot;hazCommodityName&quot;));&#xA;        hazardItem.setFieldValue(InventoryField.HZRDI_PROPER_NAME, commodityLine.get(&quot;hazCommodityName&quot;));&#xA;        String packingGroup = &quot;&quot;;&#xA;        if (commodityLine.get(&quot;hazPackageGroup&quot;) != null &amp;&amp; &quot;1&quot;.equals(commodityLine.get(&quot;hazPackageGroup&quot;))) {&#xA;            packingGroup = &quot;I&quot;;&#xA;        } else if (commodityLine.get(&quot;hazPackageGroup&quot;) != null &amp;&amp; &quot;2&quot;.equals(commodityLine.get(&quot;hazPackageGroup&quot;))) {&#xA;            packingGroup = &quot;II&quot;;&#xA;        } else if (commodityLine.get(&quot;hazPackageGroup&quot;) != null &amp;&amp; &quot;3&quot;.equals(commodityLine.get(&quot;hazPackageGroup&quot;))) {&#xA;            packingGroup = &quot;III&quot;;&#xA;        }&#xA;        if (!packingGroup.isEmpty())&#xA;            hazardItem.setFieldValue(InventoryField.HZRDI_PACKING_GROUP, packingGroup);&#xA;&#xA;        String weightStr = commodityLine.get(&quot;hazWeight&quot;) != null ?&#xA;                BigDecimal.valueOf(commodityLine.get(&quot;hazWeight&quot;)).toString() : BigDecimal.valueOf(0l).toString();&#xA;        String weightKg = &quot;&quot;;&#xA;        if (commodityLine.get(&quot;hazWeightUomCode&quot;) != null &amp;&amp; (commodityLine.get(&quot;hazWeightUomCode&quot;).contains(&quot;kg&quot;) || commodityLine.get(&quot;hazWeightUomCode&quot;).contains(&quot;KG&quot;))) {&#xA;            weightKg = weightStr;&#xA;        } else {&#xA;            weightKg = weightFromLBToKg(weightStr);&#xA;        }&#xA;        this.log(&quot;Hazard weight for &quot; + hazardItem.getHzrdiUNnum() + &quot;, is to SNX KG : &quot; + weightKg);&#xA;        hazardItem.setFieldValue(InventoryField.HZRDI_WEIGHT, weightKg);&#xA;&#xA;        if (commodityLine.get(&quot;hazPiecesUomCode&quot;) != null &amp;&amp; !commodityLine.get(&quot;hazPiecesUomCode&quot;).isEmpty())&#xA;            hazardItem.setFieldValue(InventoryField.HZRDI_PACKAGE_TYPE, commodityLine.get(&quot;hazPiecesUomCode&quot;));&#xA;        if (commodityLine.get(&quot;hazPieces&quot;) != null &amp;&amp; commodityLine.get(&quot;hazPieces&quot;) != 0l)&#xA;            hazardItem.setFieldValue(InventoryField.HZRDI_QUANTITY, commodityLine.get(&quot;hazPieces&quot;));&#xA;        if (commodityLine.get(&quot;hazSecondaryClass&quot;) != null &amp;&amp; !commodityLine.get(&quot;hazSecondaryClass&quot;).isEmpty())&#xA;            hazardItem.setFieldValue(InventoryField.HZRDI_SECONDARY_I_M_O1, commodityLine.get(&quot;hazSecondaryClass&quot;));&#xA;        if (commodityLine.get(&quot;hazTertiaryClass&quot;) != null &amp;&amp; !commodityLine.get(&quot;hazTertiaryClass&quot;).isEmpty())&#xA;            hazardItem.setFieldValue(InventoryField.HZRDI_SECONDARY_I_M_O2, commodityLine.get(&quot;hazTertiaryClass&quot;));&#xA;        String marinePollutants = commodityLine.get(&quot;hazMarinePollutant&quot;) != null &amp;&amp; !commodityLine.get(&quot;hazMarinePollutant&quot;).isEmpty() &amp;&amp;&#xA;                &quot;1&quot;.equals(commodityLine.get(&quot;hazMarinePollutant&quot;)) ? &quot;Y&quot; : &quot;N&quot;;&#xA;        hazardItem.setFieldValue(InventoryField.HZRDI_MARINE_POLLUTANTS, marinePollutants);&#xA;        hazardItem.setFieldValue(InventoryField.HZRDI_EMERGENCY_TELEPHONE, commodityLine.get(&quot;hazEmergencyContactPhone&quot;));&#xA;        this.log(hazardItem.toString());&#xA;        return hazardItem;&#xA;    }&#xA;&#xA;    public static String weightFromLBToKg(String kgWeight) {&#xA;        try {&#xA;            String lbsWeight = null;&#xA;            if (kgWeight == null || kgWeight.trim().length() == 0) {&#xA;                return &quot;&quot;;&#xA;            }&#xA;            double convtWeight = Double.parseDouble(kgWeight) * 0.45359237;&#xA;            double result = new BigDecimal(&quot;&quot; + convtWeight).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();&#xA;            lbsWeight = String.valueOf(result);&#xA;&#xA;            return lbsWeight;&#xA;        } catch (Exception e) {&#xA;            return &quot;0&quot;;&#xA;        }&#xA;    }&#xA;&#xA;    static&#xA;    final String json1 = &quot;[{\&quot;associationId\&quot;:6449,\&quot;bookingNumber\&quot;:\&quot;9076671\&quot;,\&quot;containerNumber\&quot;:\&quot;MATU246905\&quot;,\&quot;alfrescoDocId\&quot;:null,\&quot;isActive\&quot;:\&quot;Y\&quot;,\&quot;createUser\&quot;:\&quot;mmoore3\&quot;,\&quot;createDate\&quot;:\&quot;2016-07-09 00:00:46\&quot;,\&quot;lastUpdateUser\&quot;:\&quot;mmoore3\&quot;,\&quot;lastUpdateDate\&quot;:\&quot;2016-07-09 00:00:46\&quot;,\&quot;unitId\&quot;:null,\&quot;hazardousCommodityLines\&quot;:[{\&quot;commodityLineId\&quot;:46206,\&quot;hazUniqueId\&quot;:\&quot;17916\&quot;,\&quot;hazType\&quot;:\&quot;UN\&quot;,\&quot;hazNumber\&quot;:\&quot;1963\&quot;,\&quot;hazCommodityName\&quot;:\&quot;HELIUM, REFRIGERATED LIQUID\&quot;,\&quot;hazPrimaryClass\&quot;:\&quot;2.2\&quot;,\&quot;hazPrimaryClassName\&quot;:null,\&quot;hazSecondaryClass\&quot;:\&quot;\&quot;,\&quot;hazTertiaryClass\&quot;:\&quot;\&quot;,\&quot;hazEmergencyContactName\&quot;:\&quot;LYNDEN\&quot;,\&quot;hazEmergencyContactPhone\&quot;:\&quot;(800) 424-9300\&quot;,\&quot;hazSecondaryEmergencyContactName\&quot;:\&quot;\&quot;,\&quot;hazSecondaryEmergencyContactPhone\&quot;:\&quot;\&quot;,\&quot;hazPackageGroup\&quot;:null,\&quot;hazPieces\&quot;:2,\&quot;hazPiecesUomCode\&quot;:\&quot;CYL\&quot;,\&quot;hazWeight\&quot;:1600.000000,\&quot;hazWeightUomCode\&quot;:\&quot;LBS\&quot;,\&quot;hazFlashPoint\&quot;:\&quot;\&quot;,\&quot;hazFlashPointUomCode\&quot;:\&quot;C\&quot;,\&quot;hazImdgCfrIndicator\&quot;:\&quot;CFR\&quot;,\&quot;hazLimitedQuantity\&quot;:\&quot;0\&quot;,\&quot;hazMarinePollutant\&quot;:\&quot;0\&quot;,\&quot;hazExplosivePowderWeight\&quot;:null,\&quot;hazExplosivePowderWeightUomCode\&quot;:\&quot;\&quot;,\&quot;hazSpecialPermitNumber\&quot;:null,\&quot;isActive\&quot;:\&quot;Y\&quot;,\&quot;createUser\&quot;:\&quot;mmoore3\&quot;,\&quot;createDate\&quot;:\&quot;2016-07-09 00:46:24\&quot;,\&quot;lastUpdateUser\&quot;:\&quot;mmoore3\&quot;,\&quot;lastUpdateDate\&quot;:\&quot;2016-07-09 00:46:24\&quot;,\&quot;notes\&quot;:\&quot;\&quot;,\&quot;moreThan50PercentFlag\&quot;:null,\&quot;stowageRestriction\&quot;:null,\&quot;explosivePowderWeightApplicable\&quot;:null},{\&quot;commodityLineId\&quot;:46207,\&quot;hazUniqueId\&quot;:\&quot;17916\&quot;,\&quot;hazType\&quot;:\&quot;UN\&quot;,\&quot;hazNumber\&quot;:\&quot;1963\&quot;,\&quot;hazCommodityName\&quot;:\&quot;HELIUM, REFRIGERATED LIQUID\&quot;,\&quot;hazPrimaryClass\&quot;:\&quot;2.2\&quot;,\&quot;hazPrimaryClassName\&quot;:null,\&quot;hazSecondaryClass\&quot;:\&quot;\&quot;,\&quot;hazTertiaryClass\&quot;:\&quot;\&quot;,\&quot;hazEmergencyContactName\&quot;:\&quot;lynden\&quot;,\&quot;hazEmergencyContactPhone\&quot;:\&quot;(800) 424-9300\&quot;,\&quot;hazSecondaryEmergencyContactName\&quot;:\&quot;\&quot;,\&quot;hazSecondaryEmergencyContactPhone\&quot;:\&quot;\&quot;,\&quot;hazPackageGroup\&quot;:null,\&quot;hazPieces\&quot;:1,\&quot;hazPiecesUomCode\&quot;:\&quot;CYL\&quot;,\&quot;hazWeight\&quot;:420.000000,\&quot;hazWeightUomCode\&quot;:\&quot;LBS\&quot;,\&quot;hazFlashPoint\&quot;:\&quot;\&quot;,\&quot;hazFlashPointUomCode\&quot;:\&quot;F\&quot;,\&quot;hazImdgCfrIndicator\&quot;:\&quot;CFR\&quot;,\&quot;hazLimitedQuantity\&quot;:\&quot;0\&quot;,\&quot;hazMarinePollutant\&quot;:\&quot;0\&quot;,\&quot;hazExplosivePowderWeight\&quot;:null,\&quot;hazExplosivePowderWeightUomCode\&quot;:\&quot;\&quot;,\&quot;hazSpecialPermitNumber\&quot;:null,\&quot;isActive\&quot;:\&quot;Y\&quot;,\&quot;createUser\&quot;:\&quot;mmoore3\&quot;,\&quot;createDate\&quot;:\&quot;2016-07-09 00:46:55\&quot;,\&quot;lastUpdateUser\&quot;:\&quot;mmoore3\&quot;,\&quot;lastUpdateDate\&quot;:\&quot;2016-07-09 00:46:55\&quot;,\&quot;notes\&quot;:\&quot;\&quot;,\&quot;moreThan50PercentFlag\&quot;:null,\&quot;stowageRestriction\&quot;:null,\&quot;explosivePowderWeightApplicable\&quot;:null},{\&quot;commodityLineId\&quot;:46264,\&quot;hazUniqueId\&quot;:\&quot;334\&quot;,\&quot;hazType\&quot;:\&quot;UN\&quot;,\&quot;hazNumber\&quot;:\&quot;3267\&quot;,\&quot;hazCommodityName\&quot;:\&quot;CORROSIVE LIQUID, BASIC, ORGANIC, N.O.S.\&quot;,\&quot;hazPrimaryClass\&quot;:\&quot;8\&quot;,\&quot;hazPrimaryClassName\&quot;:null,\&quot;hazSecondaryClass\&quot;:\&quot;\&quot;,\&quot;hazTertiaryClass\&quot;:\&quot;\&quot;,\&quot;hazEmergencyContactName\&quot;:\&quot;LYNDEN\&quot;,\&quot;hazEmergencyContactPhone\&quot;:\&quot;(800) 424-9300\&quot;,\&quot;hazSecondaryEmergencyContactName\&quot;:\&quot;\&quot;,\&quot;hazSecondaryEmergencyContactPhone\&quot;:\&quot;\&quot;,\&quot;hazPackageGroup\&quot;:3,\&quot;hazPieces\&quot;:1,\&quot;hazPiecesUomCode\&quot;:\&quot;DRUM\&quot;,\&quot;hazWeight\&quot;:101.000000,\&quot;hazWeightUomCode\&quot;:\&quot;LBS\&quot;,\&quot;hazFlashPoint\&quot;:\&quot;\&quot;,\&quot;hazFlashPointUomCode\&quot;:\&quot;F\&quot;,\&quot;hazImdgCfrIndicator\&quot;:\&quot;CFR\&quot;,\&quot;hazLimitedQuantity\&quot;:\&quot;0\&quot;,\&quot;hazMarinePollutant\&quot;:\&quot;0\&quot;,\&quot;hazExplosivePowderWeight\&quot;:null,\&quot;hazExplosivePowderWeightUomCode\&quot;:\&quot;\&quot;,\&quot;hazSpecialPermitNumber\&quot;:null,\&quot;isActive\&quot;:\&quot;Y\&quot;,\&quot;createUser\&quot;:\&quot;mmoore3\&quot;,\&quot;createDate\&quot;:\&quot;2016-07-09 01:55:41\&quot;,\&quot;lastUpdateUser\&quot;:\&quot;mmoore3\&quot;,\&quot;lastUpdateDate\&quot;:\&quot;2016-07-09 01:55:41\&quot;,\&quot;notes\&quot;:null,\&quot;moreThan50PercentFlag\&quot;:null,\&quot;stowageRestriction\&quot;:null,\&quot;explosivePowderWeightApplicable\&quot;:null}]}]&quot;;&#xA;}&#xA;" />
<extension name="MATGvyUpdateEquipGradeForImportUnits" scope="MATSON/ALASKA" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="import com.navis.argo.business.reference.EquipGrade&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.road.business.model.RoadInspection&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;&#xA;/**&#xA; * Created by psethuraman on 5/2/2016.&#xA; */&#xA;class MATGvyUpdateEquipGradeForImportUnits extends AbstractGeneralNoticeCodeExtension{&#xA;    public void execute(GroovyEvent inEvent) {&#xA;        this.log(&quot;Execution Started MATGvyUpdateEquipGradeForImportUnits&quot;);&#xA;        Event ThisEvent = inEvent.getEvent();&#xA;        if (ThisEvent == null)&#xA;            return;&#xA;        /* Get the unit and the Booking */&#xA;        Unit thisUnit = (Unit) inEvent.getEntity();&#xA;        String unitId = thisUnit.getUnitId();&#xA;        EquipGrade grade = EquipGrade.findEquipGrade(&quot;XX&quot;);&#xA;        if (grade != null) {&#xA;            UnitEquipment unitEq = thisUnit.getUnitPrimaryUe();&#xA;            if (unitEq != null) {&#xA;                EquipmentState eqState = unitEq.getUeEquipmentState();&#xA;                if (eqState != null) {&#xA;                    this.log(&quot;Setting eqGrade XX for Unit : &quot;+unitId);&#xA;                    eqState.setEqsGradeID(grade);&#xA;                    unitEq.setUeEquipmentState(eqState);&#xA;                    if (UnitVisitStateEnum.DEPARTED.equals(thisUnit.getUnitVisitState())&#xA;                            || UnitVisitStateEnum.RETIRED.equals(thisUnit.getUnitVisitState())) {&#xA;                        RoadInspection inspection = RoadInspection.findRecentInspection(unitId, new Long(&quot;129600&quot;));&#xA;                        if (inspection != null) {&#xA;                            this.log(&quot;Setting eqGrade XX in Delivered Inspection for Unit : &quot;+unitId);&#xA;                            inspection.setInspEqGrade(grade);&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;        this.log(&quot;Execution Ended MATGvyUpdateEquipGradeForImportUnits&quot;);&#xA;    }&#xA;}&#xA;" />
<extension name="MATSetUnitFlex" scope="MATSON/ALASKA/ANK" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;import bsh.This&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.road.business.atoms.TranSubTypeEnum&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;&#xA;/**&#xA; * This groovy set the unit flex on receive export.&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 08/05/15&#xA; * JIRA: ARGO-76865&#xA; * SFDC: 142550&#xA; *&#xA; * Aug. 12, 2015 Peter Seiler Add defensive code to exit if no Unit or no booking found&#xA; *&#xA; * Peter Seiler&#xA; * Date: 09/03/15&#xA; * JIRA: CSDV-3208&#xA; *&#xA; * Synchronize the UCC code on the Unit (UnitFlexString15) with the Equipment State UCC (eqsFlexString02)&#xA; *&#xA; * Peter Seiler&#xA; * Date: 09/03/2015&#xA; * SFDC: 144915&#xA; *&#xA; * If RM transaction and VV/POD are specified set the unit's routing to that&#xA; * =====================================================================================================&#xA; * Modified to sync ECC code on the ufv (ufvFlexString08) with Equipment State ECC (eqsFlexString03)&#xA; *&#xA; * Bruno Chiarini&#xA; * Date: 16-Sep-2015&#xA; * =====================================================================================================&#xA; * Wrapped code retrieving booking in a try block to handle RI transactions&#xA; *&#xA; * Bruno Chiarini&#xA; * Date: 03-Oct-2015&#xA; * =====================================================================================================&#xA; * Removed change done on 2015-09-03. Requirement is to no longer persist value of UCC in equipment&#xA; *&#xA; * Bruno Chiarini&#xA; * Date: 2016-02-19&#xA; * SFDC: 150685&#xA; * JIRA: CSDV-3208&#xA; * =====================================================================================================&#xA; */&#xA;&#xA;public class MATSetUnitFlex extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        this.log(&quot;Execution Started MATSetUnitFlex&quot;);&#xA;&#xA;        /* check various components of the gate transaction to insure everything needed is present. */&#xA;&#xA;        if (inDao == null)&#xA;            return;&#xA;&#xA;        TruckTransaction ThisTran = inDao.getTran();&#xA;&#xA;        if (ThisTran == null)&#xA;            return;&#xA;&#xA;        /* Execute the built-in logic got the business task. */&#xA;&#xA;        executeInternal(inDao);&#xA;&#xA;        /* set the unit priority stow code to the booking stow block */&#xA;&#xA;        Unit ThisUnit = ThisTran.getTranUnit();&#xA;&#xA;        if (ThisUnit == null)&#xA;        {&#xA;            return;&#xA;        }&#xA;&#xA;        /* for RM transactions set OB routing if VV/POD specified */&#xA;&#xA;        if (ThisTran.getTranSubType() == TranSubTypeEnum.RM&#xA;                &amp;&amp; ThisTran.getTranCarrierVisit() != null&#xA;                &amp;&amp; ThisTran.getTranDischargePoint1() != null)&#xA;        {&#xA;&#xA;            UnitFacilityVisit ThisUFV = ThisTran.getTranUfv();&#xA;&#xA;            if(ThisUFV != null)&#xA;            {&#xA;                Routing ThisRouting = ThisUnit.getUnitRouting();&#xA;                ThisRouting.setRtgPOD1(ThisTran.getTranDischargePoint1());&#xA;                ThisRouting.setRtgDeclaredCv(ThisTran.getTranCarrierVisit());&#xA;                ThisUnit.setUnitRouting(ThisRouting);&#xA;&#xA;                ThisUFV.setUfvObCv(ThisTran.getTranCarrierVisit().getCvGkey());&#xA;            }&#xA;        }&#xA;&#xA;        try {&#xA;            // Added try block to handle cast exception when doing RI transactions&#xA;            Booking ThisBooking = ThisTran.getTranEqo();&#xA;&#xA;            /* if a booking is found copy the Priority stow to the unit flex string */&#xA;&#xA;            if (ThisBooking != null) {&#xA;                ThisUnit.setUnitFlexString08(ThisBooking.getEqoStowBlock());&#xA;            }&#xA;        }&#xA;        catch(Exception) {}&#xA;&#xA;        UnitEquipment ThisUnitEquip = ThisUnit.getUnitPrimaryUe();&#xA;        EquipmentState ThisEqState = ThisUnitEquip.getUeEquipmentState();&#xA;&#xA;        // UCC SYNCING&#xA;&#xA;//        /* if the gate screen did not update the UCC code copy the value from the EQS */&#xA;//        /* if the UCC value is not set on the gate screen copy the EQS UCC code to the Unit */&#xA;//&#xA;//        if (ThisUnit.getUnitFlexString15() == null)&#xA;//        {&#xA;//            if (ThisEqState.getEqsFlexString02() != null)&#xA;//            {&#xA;//                /* set the Unit UCC code to the Equipment State's value */&#xA;//                ThisUnit.setUnitFlexString15(ThisEqState.getEqsFlexString02());&#xA;//            }&#xA;//        }&#xA;//        else&#xA;//        {&#xA;//            /* UCC exists, overwrite equipment's value */&#xA;//            ThisEqState.setEqsFlexString02(ThisUnit.getUnitFlexString15());&#xA;//        }&#xA;&#xA;        /* set the unit UCC code */&#xA;&#xA;        ThisUnit.setUnitFlexString15(ThisTran.getTranUnitFlexString15());&#xA;&#xA;        // ECC SYNCING&#xA;&#xA;        /* if the gate screen did not update the ECC code copy the value from the EQS */&#xA;&#xA;        UnitFacilityVisit ThisUFV = ThisTran.getTranUfv();&#xA;&#xA;        /* if the ECC value is not set on the gate screen copy the EQS ECC code to the Unit */&#xA;        // ECC value should be set whatever entered in GATE screen, or can entered through Routing screen&#xA;        // SHOULD not be retained from equipment flex field from the previous use&#xA;        if (ThisUFV != null) {&#xA;            ThisUFV.setUfvFlexString08(ThisTran.getTranUfvFlexString08());&#xA;        }&#xA;    }&#xA;}" />
<extension name="GEMSPreTripCheck" scope="MATSON/ALASKA" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.navis.argo.business.model.Lane&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.AllOtherFrameworkPropertyKeys&#xA;import com.navis.framework.MailServerConfig&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import com.sun.jersey.api.client.Client&#xA;import com.sun.jersey.api.client.ClientResponse&#xA;import com.sun.jersey.api.client.WebResource&#xA;import com.sun.jersey.api.client.config.ClientConfig&#xA;import com.sun.jersey.api.client.config.DefaultClientConfig&#xA;import org.apache.log4j.Logger&#xA;import org.springframework.mail.MailSendException&#xA;import org.springframework.mail.javamail.JavaMailSenderImpl&#xA;import org.springframework.mail.javamail.MimeMessageHelper&#xA;&#xA;import javax.mail.internet.MimeMessage&#xA;import javax.ws.rs.core.MediaType&#xA;&#xA;/**&#xA; * GEMSPreTripCheck.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:kramachandran@matson.com&quot;&gt; Keerthi Ramachandran&lt;/a&gt;&#xA; * @since 01/18/2016&#xA; * @api none&#xA; * Called from: Gate Configuration&#xA; * &lt;p&gt;This code used to run an webservice call to GEMS to determine if the equipment is due for Pre-Trip inspection&lt;/p&gt;&#xA; * &lt;p&gt;The container ID is passed to GEMS and Boolean is required as reponse&lt;/p&gt;&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;public class GEMSPreTripCheck extends AbstractGateTaskInterceptor implements EGateTaskInterceptor {&#xA;&#xA;    /**&#xA;     * Print document based on the configuration docTypeId parameter&#xA;     *&#xA;     * @param inOutDao&#xA;     */&#xA;&#xA;    public static final String PRE_TRIP_REQUIRED = &quot;&lt;preTripDueFlag&gt;Y&lt;/preTripDueFlag&gt;&quot;&#xA;&#xA;    public void execute(TransactionAndVisitHolder inOutDao) {&#xA;        super.executeInternal(inOutDao);&#xA;        logMsg(&quot;execute Stared&quot;);&#xA;        TruckTransaction tran = inOutDao.getTran();&#xA;        UnitFacilityVisit unitFacilityVisit = tran.getTranUfv();&#xA;        Container container = tran.tranContainer;&#xA;        logMsg(container.toString());&#xA;        String equipmentId = tran.getTranCtrNbr();&#xA;        //if (unitFacilityVisit != null) equipmentId = unitFacilityVisit.getUnitId();&#xA;        logMsg(&quot;Equipment ID for pre-trip validation&quot; + equipmentId);&#xA;        if (equipmentId == null) {&#xA;            logMsg(&quot;The Transaction Container can't be read. Something wrong with container read logic&quot;);&#xA;            /*RoadBizUtil.appendExceptionChainAsWarnings(&#xA;                    BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                            &quot;Can't determine if the Equipment is due for Pretrip. Please Perform Manual Validation&quot;));*/&#xA;            return;&#xA;        }&#xA;        Lane lane = inOutDao.getLane();&#xA;        if (lane != null) {&#xA;            logMsg(&quot;Gate Lane : &quot; + lane.getLaneId());&#xA;            if (&quot;LINE HAUL&quot;.equalsIgnoreCase(lane.getLaneId())) {&#xA;                logMsg(&quot;Validation not needed for Lane : &quot; + lane.getLaneId());&#xA;                return;&#xA;            } else {&#xA;                logMsg(&quot;Validation needed for Lane : &quot; + lane.getLaneId());&#xA;            }&#xA;        }&#xA;&#xA;        Boolean preTripRequired = false;&#xA;        String owner = inOutDao.getTran().getTranContainer().getEquipmentOwnerId();&#xA;        /*&#xA;         * Pre-trip only for Matson Equipment&#xA;         */&#xA;        Boolean isMatsonEquipment = false;&#xA;        if (owner != null &amp;&amp; (&quot;MAT&quot;.equalsIgnoreCase(owner) || &quot;MATU&quot;.equalsIgnoreCase(owner)))&#xA;            isMatsonEquipment = true;&#xA;        if (!isMatsonEquipment)&#xA;            return;&#xA;&#xA;        /*&#xA;         * If the UCC code is not Equal to UN, prevent the User from completing the transaction&#xA;         */&#xA;        String ucc = inOutDao.getTran().getTranUnitFlexString15();&#xA;&#xA;        Boolean overRideByUCC = false;&#xA;        logMsg(&quot;UCC from transaction &quot; + ucc);&#xA;        /*if (ucc == null &amp;&amp; inOutDao.getTran().getTranUfv() != null &amp;&amp; inOutDao.getTran().getTranUfv().getUfvUnit() != null)&#xA;            ucc = inOutDao.getTran().getTranUfv().getUfvUnit().getUnitFlexString15();*/&#xA;        if (ucc != null &amp;&amp; (&quot;UN&quot;.equalsIgnoreCase(ucc) || &quot;DL&quot;.equalsIgnoreCase(ucc) || &quot;DN&quot;.equalsIgnoreCase(ucc) || &quot;SF&quot;.equalsIgnoreCase(ucc) || &quot;.&quot;.equalsIgnoreCase(ucc)))&#xA;            overRideByUCC = true;&#xA;&#xA;        try {&#xA;            preTripRequired = isPreTripRequired(equipmentId); // call WS here with Equipment ID&#xA;        }&#xA;        catch (Exception exception) {&#xA;            //send email to dev team&#xA;            sendFailureMail(equipmentId, exception);&#xA;        }&#xA;        String preTripVal = tran.getTranUnit() != null ? tran.getTranUnit().getUnitFlexString05():&quot;&quot;;&#xA;        if (preTripRequired) {&#xA;            if(!overRideByUCC ){&#xA;                RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                        &quot;The Unit &quot; + equipmentId + &quot; is due for PreTrip&quot;));&#xA;            }&#xA;            /*if(!overRideByUCC &amp;&amp; !(overRideByUCC &amp;&amp; tran.getTranUnitFlexString05()!= null &amp;&amp; &quot;PRETRIP&quot;.equalsIgnoreCase(tran.getTranFlexString05()))) {&#xA;                tran.setTranUnitFlexString05(&quot;PRETRIP&quot;);&#xA;                RoadBizUtil.appendExceptionChain(&#xA;                        BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                                &quot;The Unit &quot; + equipmentId + &quot; is due for PreTrip&quot;));&#xA;            }&#xA;            */&#xA;        }&#xA;    }&#xA;&#xA;    private logMsg(String inMsg) {&#xA;        log(this.getClass().getName() + &quot; &quot; + inMsg);&#xA;    }&#xA;&#xA;    private Boolean isPreTripRequired(String inEquipmentID) {&#xA;        String equipmentId, checkDigit;&#xA;        if (inEquipmentID.length() &gt; 10) equipmentId = inEquipmentID.substring(0, 10); else equipmentId = inEquipmentID;&#xA;        if (inEquipmentID.length() &gt; 10) checkDigit = inEquipmentID.substring(10); else checkDigit = &quot;X&quot;;&#xA;&#xA;        GeneralReference genRef = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;GEMSPRETRIP&quot;, &quot;URL&quot;);&#xA;        log(genRef.getRefValue1());&#xA;        URL url = new URL(genRef.getRefValue1() + &quot;equipment/&quot; + equipmentId + &quot;/checkdigit/&quot; + checkDigit);&#xA;        logMsg(url.toString());&#xA;        DefaultClientConfig clientConfig1 = new DefaultClientConfig();&#xA;        clientConfig1.getProperties().put(ClientConfig.PROPERTY_CONNECT_TIMEOUT, Integer.parseInt(genRef.getRefValue2()));&#xA;        clientConfig1.getProperties().put(ClientConfig.PROPERTY_READ_TIMEOUT, Integer.parseInt(genRef.getRefValue3()));&#xA;        Client client = Client.create(clientConfig1);&#xA;&#xA;        WebResource resource = client.resource(url.toString());&#xA;        ClientResponse response = (ClientResponse) resource.accept(MediaType.APPLICATION_XML).get(ClientResponse.class);&#xA;        if (response.getStatus() != 200) {&#xA;            logMsg(&quot;Request failed&quot;);&#xA;            logMsg(response.toString());&#xA;        } else {&#xA;            logMsg(&quot;Request Success&quot;);&#xA;            logMsg(response.toString());&#xA;        }&#xA;        String xmlResponse = response.getEntity(String.class);&#xA;        logMsg(xmlResponse);&#xA;        if (xmlResponse.contains(PRE_TRIP_REQUIRED))&#xA;            return Boolean.TRUE;&#xA;        else&#xA;            return Boolean.FALSE;&#xA;    }&#xA;    /**&#xA;     * Send simple email message&#xA;     *&#xA;     * @param inTo TO email address&#xA;     * @param inFrom FROM email address&#xA;     * @param inSubject Text in the subject line&#xA;     * @param inBody Text in the body of the email&#xA;     * @return TRUE/FALSE     True if email has been sent or not&#xA;     */&#xA;    public Boolean sendEmail(String inTo, String inFrom, String inSubject, String inBody) {&#xA;        GroovyEmailSender sender = new GroovyEmailSender();&#xA;        MimeMessage msg = sender.createMimeMessage();&#xA;        MimeMessageHelper helper = new MimeMessageHelper(msg, &quot;UTF-8&quot;);&#xA;        helper.setFrom(inFrom);&#xA;        helper.setReplyTo(inFrom);&#xA;        helper.setTo(inTo);&#xA;        helper.setSubject(inSubject);&#xA;        helper.setText(inBody, true);&#xA;        try {&#xA;            sender.send(msg);&#xA;        } catch (Exception inException) {&#xA;            LOGGER.error(&quot;GEMSPreTripCheck: Exception in email attempt: &quot; + inException);&#xA;            return false;&#xA;        }&#xA;        return true;&#xA;    }&#xA;&#xA;    private class GroovyEmailSender extends JavaMailSenderImpl {&#xA;        GroovyEmailSender() {&#xA;            setMailServerPropertiesFromUserContext();&#xA;        }&#xA;        /**&#xA;         * Sets the Host, Port, and Protocol from the config settings based on the UserContext from the email message.&#xA;         *&#xA;         * @param inEmailMessage&#xA;         */&#xA;        private void setMailServerPropertiesFromUserContext() {&#xA;            try {&#xA;                UserContext userContext = ContextHelper.getThreadUserContext();&#xA;                setHost(MailServerConfig.HOST.getSetting(userContext));&#xA;                setPort(Integer.parseInt(MailServerConfig.PORT.getSetting(userContext)));&#xA;                String protocol = MailServerConfig.PROTOCOL.getSetting(userContext);&#xA;                long timeout = MailServerConfig.TIMEOUT.getValue(userContext);&#xA;                Properties props = new Properties();&#xA;                props.setProperty(&quot;mail.pop3.timeout&quot;, String.valueOf(timeout));&#xA;                setProtocol(protocol);&#xA;                if (&quot;smtps&quot;.equals(protocol)) {&#xA;                    setUsername(MailServerConfig.SMTPS_USER.getSetting(userContext));&#xA;                    setPassword(MailServerConfig.SMTPS_PASSWORD.getSetting(userContext));&#xA;                    props.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);&#xA;                    props.put(&quot;mail.smtps.auth&quot;, &quot;true&quot;);&#xA;                    props.put(&quot;mail.smtp.ssl.enable&quot;, &quot;true&quot;);&#xA;                    props.put(&quot;mail.transport.protocol&quot;, &quot;smtps&quot;);&#xA;                }&#xA;                setJavaMailProperties(props);&#xA;                LOGGER.info(&quot;Initialized SMTP Mail Server Configuration.&quot;);&#xA;            } catch (Throwable throwable) {&#xA;                String error = &quot;Initializing the SMTP Mail Server configuration encountered the following error:&quot;;&#xA;                LOGGER.error(error, throwable);&#xA;                throw new MailSendException(error, throwable);&#xA;            }&#xA;        }&#xA;        private Logger LOGGER = Logger.getLogger(GroovyEmailSender.class);&#xA;    }&#xA;&#xA;    public void sendFailureMail(String inEquipmentId, Throwable inThrowable) {&#xA;        GeneralReference genRef = GeneralReference.findUniqueEntryById(&quot;ENV&quot;, &quot;ENVIRONMENT&quot;);&#xA;        String environment = genRef.getRefValue1();&#xA;        genRef = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;EMAIL&quot;, &quot;NOTIFICATION&quot;);&#xA;        String emailFrom = genRef.getRefValue1();&#xA;        String emailTo = genRef.getRefValue2();&#xA;        String emailSubject = environment + &quot; - GEMS Equipment pretrip check failure &quot; + inEquipmentId;&#xA;        String emailBody = inThrowable.message + &quot;\n&quot; + inThrowable.toString();&#xA;        sendEmail(emailTo, emailFrom, emailSubject, emailBody);&#xA;    }&#xA;&#xA;&#xA;}" />
<extension name="MATGateValidateCommodity" scope="MATSON/ALASKA/ANK" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="import com.navis.argo.business.reference.Container&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.util.BizWarning&#xA;import com.navis.framework.util.UserMessageImp&#xA;import com.navis.framework.util.internationalization.UserMessage&#xA;import com.navis.framework.util.message.MessageLevel&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.orders.business.eqorders.EquipmentOrder&#xA;import com.navis.orders.business.eqorders.EquipmentOrderItem&#xA;import com.navis.road.RoadPropertyKeys&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import com.navis.road.util.StringUtil&#xA;&#xA;public class MATGateValidateCommodity extends AbstractGateTaskInterceptor implements EGateTaskInterceptor {&#xA;    public void execute(TransactionAndVisitHolder dao) {&#xA;        TruckTransaction tran = dao.tran;&#xA;        String tranCommodity = tran.getTranFlexString06();&#xA;        String bookingCmdy = &quot;&quot;;&#xA;        boolean cmdyMatches = false;&#xA;        if (tranCommodity != null &amp;&amp; StringUtil.isNotBlank(tranCommodity)) {&#xA;            EquipmentOrder tranEqo = tran.getTranEqo();&#xA;            if (tranEqo != null) {&#xA;                Booking booking = Booking.resolveBkgFromEqo(tranEqo);&#xA;                if (booking != null) {&#xA;                    bookingCmdy = booking.getEqoStuffingLocation();&#xA;                    if (bookingCmdy != null &amp;&amp; StringUtil.isNotBlank(bookingCmdy)) {&#xA;                        if (tranCommodity.length() &lt; bookingCmdy.length()) {&#xA;                            cmdyMatches = validateCmdy(bookingCmdy, tranCommodity);&#xA;                        } else {&#xA;                            cmdyMatches =validateCmdy(tranCommodity, bookingCmdy);&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;        if (!cmdyMatches) {&#xA;            /*UserMessage message = new UserMessageImp().setDefaultMessage(&quot;Commodity Received from transaction is not Matching with Booking&quot;);&#xA;            message.setSeverity(MessageLevel.WARNING);&#xA;            BizViolation violation = BizViolation.create(RoadPropertyKeys.GATE__NOT_MATCHING_BOOKING_COMMODITY, RoadBizUtil.)&#xA;            BizViolation.appendViolations(violation);*/&#xA;            //RoadBizUtil.appendExceptionChainAsWarnings(BizViolation.create(RoadPropertyKeys.GATE__NOT_MATCHING_BOOKING_COMMODITY, ))&#xA;            RoadBizUtil.appendMessage(MessageLevel.SEVERE, RoadPropertyKeys.GATE__NOT_MATCHING_BOOKING_COMMODITY, tranCommodity, bookingCmdy);&#xA;        }&#xA;    }&#xA;&#xA;    private boolean validateCmdy(String cmdy1, String cmdy2) {&#xA;        boolean matches = false;&#xA;        if (cmdy1.contains(cmdy2)) {&#xA;            matches = true;&#xA;        }&#xA;        return matches;&#xA;    }&#xA;}" />
<extension name="MatsonAncUnitEquipmentInterceptor" scope="MATSON/ALASKA" type="ENTITY_LIFECYCLE_INTERCEPTION" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.external.framework.entity.AbstractEntityLifecycleInterceptor&#xA;import com.navis.external.framework.entity.EEntityView&#xA;import com.navis.external.framework.util.EFieldChanges&#xA;import com.navis.external.framework.util.EFieldChangesView&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.units.EqBaseOrderItem&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; Whenever the booking number of a unit is updated, the value of the booking unit gets copied to the bill of lading (BL) number of the unit.&#xA; This includes the cases when booking number is set to null, or from null to a value.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:balamurugan.bakthavachalam@navis.com&quot;&gt; Balamurugan B&lt;/a&gt; Date: 10/21/2015&#xA; *&#xA; * Date: 10/21/2015: 5:41 PM&#xA; * JIRA: CSDV-3307&#xA; * SFDC: 00146342&#xA; * Called from: Entity Life Cycle Interceptor for UnitEquipment entity.&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;class MatsonAncUnitEquipmentInterceptor extends AbstractEntityLifecycleInterceptor {&#xA;    @Override&#xA;    public void onCreate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges) {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot; MatsonAncUnitEquipmentInterceptor invoked onCreate Method.&quot;);&#xA;        LOGGER.info(&quot;BL NUMBER DISAPPEARED : MatsonAncUnitEquipmentInterceptor onCreate&quot;);&#xA;        if (inOriginalFieldChanges.hasFieldChange(InventoryField.UE_DEPARTURE_ORDER_ITEM)) {&#xA;            LOGGER.info(&quot;BL NUMBER DISAPPEARED : MatsonAncUnitEquipmentInterceptor UE_DEPARTURE_ORDER_ITEM&quot;);&#xA;            copyBkgNbrToBLNbr(inEntity, inOriginalFieldChanges, inMoreFieldChanges);&#xA;            //EqBaseOrderItem item = inOriginalFieldChanges.findFieldChange(InventoryField.UE_DEPARTURE_ORDER_ITEM) as EqBaseOrderItem;&#xA;        }&#xA;        LOGGER.info(&quot; MatsonAncUnitEquipmentInterceptor completed onCreate Method.&quot;);&#xA;    }&#xA;&#xA;    @Override&#xA;    public void onUpdate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges) {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot; MatsonAncUnitEquipmentInterceptor invoked onUpdate Method.&quot;);&#xA;        LOGGER.info(&quot;BL NUMBER DISAPPEARED : MatsonAncUnitEquipmentInterceptor onUpdate&quot;);&#xA;        copyBkgNbrToBLNbr(inEntity, inOriginalFieldChanges, inMoreFieldChanges);&#xA;        LOGGER.info(&quot; MatsonAncUnitEquipmentInterceptor completed onUpdate Method.&quot;);&#xA;    }&#xA;&#xA;    private void copyBkgNbrToBLNbr(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges) {&#xA;        LOGGER.info(&quot;BL NUMBER DISAPPEARED : MatsonAncUnitEquipmentInterceptor copyBkgNbrToBLNbr&quot;);&#xA;        def matsonAncUnitEquipmentLibrary = getLibrary(&quot;MatsonAncUnitEquipmentLibrary&quot;);&#xA;        LOGGER.info(&quot;MatsonAncUnitEquipmentInterceptor about to execute MatsonAncUnitEquipmentLibrary&quot;);&#xA;        if (matsonAncUnitEquipmentLibrary == null) {&#xA;            LOGGER.info(&quot;MatsonAncUnitEquipmentInterceptor, couldn't find the library MatsonAncUnitEquipmentLibrary&quot;);&#xA;            return;&#xA;        }&#xA;        Map param = new HashMap();&#xA;        param.put(&quot;ENTITY&quot;, inEntity);&#xA;        param.put(&quot;ORIGINAL_FIELD_CHANGES&quot;, inOriginalFieldChanges);&#xA;        param.put(&quot;MORE_FIELD_CHANGES&quot;, inMoreFieldChanges);&#xA;        LOGGER.info(&quot;BL NUMBER DISAPPEARED : MatsonAncUnitEquipmentInterceptor param&quot;+param);&#xA;        matsonAncUnitEquipmentLibrary.execute(param);&#xA;        LOGGER.info(&quot;MatsonAncUnitEquipmentInterceptor completed calling MatsonAncUnitEquipmentLibrary&quot;);&#xA;    }&#xA;&#xA;    private Logger LOGGER = Logger.getLogger(MatsonAncUnitEquipmentInterceptor.class);&#xA;}" />
<extension name="MATUpdateContainerOperatorOnStrip" scope="MATSON/ALASKA" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.atoms.EquipClassEnum&#xA;import com.navis.argo.business.model.Facility&#xA;import com.navis.argo.business.reference.LineOperator&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.inventory.business.atoms.EqUnitRoleEnum&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; * @author Keerthi Ramachandran&#xA; * @since 5/25/2016&#xA; * &lt;p&gt;MATUpdateContainerOperatorOnStrip is ..&lt;/p&gt; &#xA; */&#xA;class MATUpdateContainerOperatorOnStrip extends AbstractGeneralNoticeCodeExtension {&#xA;&#xA;    private Logger LOGGER = Logger.getLogger(MATUpdateContainerOperatorOnStrip.class);&#xA;&#xA;    public void execute(GroovyEvent inEvent)&#xA;&#xA;    {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot;MATUpdateContainerOperatorOnStrip Execution Started&quot;);&#xA;&#xA;        Boolean isUnitCreatedByStripEvent = isUnitCreatedByStripEvent(inEvent);&#xA;        if (isUnitCreatedByStripEvent) {&#xA;&#xA;            try {&#xA;                Unit ThisUnit = (Unit) inEvent.getEntity();&#xA;                if (ThisUnit == null) {&#xA;                    LOGGER.error(&quot;Reference to Unit not found!&quot;);&#xA;                    sendMailAndReturn(&quot;Reference to Unit not found!&quot;);&#xA;                } else&#xA;                    LOGGER.info(&quot;Unit: &quot; + ThisUnit);&#xA;&#xA;                Facility ThisFacility = ContextHelper.getThreadFacility();&#xA;                UnitFacilityVisit ThisUFV = ThisUnit.getUfvForFacilityAndEventTime(ThisFacility,&#xA;                        inEvent.getEvent().getEventTime());&#xA;                if (ThisUFV == null) {&#xA;                    LOGGER.error(&quot;Reference to UFV not found!&quot;);&#xA;                    sendMailAndReturn(&quot;Reference to UFV not found!&quot;)&#xA;                } else&#xA;                    LOGGER.info(&quot;UFV: &quot; + ThisUFV);&#xA;&#xA;                UnitEquipment ThisUnitEquip = ThisUnit.getUnitPrimaryUe();&#xA;                EquipmentState ThisEqState = ThisUnitEquip.getUeEquipmentState();&#xA;&#xA;&#xA;&#xA;                EqUnitRoleEnum UeRole = ThisUnitEquip.getUeEqRole();&#xA;                EquipClassEnum equipClass = ThisUnitEquip.getUeEquipment().getEqEquipType().getEqtypClass();&#xA;&#xA;&#xA;                if (EqUnitRoleEnum.PRIMARY.equals(UeRole) &amp;&amp; EquipClassEnum.CONTAINER.equals(equipClass)) {&#xA;                    //String containerIdFull = ThisUnit.getUnitId();&#xA;                    String containerOwner = ThisEqState.getEqsEqOwner().getBzuId();&#xA;                    String containerOperator = ThisEqState.getEqsEqOperator().getBzuId();&#xA;&#xA;                    /*&#xA;                    * Check the Original Equipment, if the owner is Maersk, the update the stripped empty operator to MAE&#xA;                    */&#xA;                    LOGGER.info(&quot;The Equipment Original Owner is &quot; + containerOwner + &quot; Operator is &quot; + containerOperator);&#xA;&#xA;                    if (ThisUnit.getUnitLineOperator().getBzuId() != null) {&#xA;                        LOGGER.info(&quot;The UFV Line Operator is &quot; + ThisUnit.getUnitLineOperator().getBzuId());&#xA;                        if (ThisUnit.getUnitLineOperator().getBzuId().equalsIgnoreCase(containerOperator)) {&#xA;                            //do nothing&#xA;                            LOGGER.info(&quot;The Line Operator of UFV matches the Equipment Operator, No Update Necessary&quot;)&#xA;                        } else {&#xA;                            LineOperator lineOperator = LineOperator.findLineOperatorById(containerOperator);&#xA;                            if (lineOperator != null) {&#xA;                                ThisUnit.setUnitLineOperator(lineOperator);&#xA;                                LOGGER.info(&quot;Line Operator Updated to &quot; + containerOperator);&#xA;                            } else {&#xA;                                sendMailAndReturn(&quot;No able to find LineOpearator &quot; + containerOperator);&#xA;                            }&#xA;                        }&#xA;                    }&#xA;                }&#xA;                LOGGER.info(&quot;Update Successful.&quot;)&#xA;            }&#xA;            catch (Exception e) {&#xA;                LOGGER.error(&quot;Update Failed. Exception [&quot; + e + &quot;].&quot;);&#xA;                sendMail(&quot;Update Failed.&quot;, e);&#xA;            }&#xA;            finally {&#xA;                LOGGER.info(&quot;MATUpdateContainerOperatorOnStrip Execution Ended.&quot;)&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    private void sendMailAndReturn(String inMessage) {&#xA;        LOGGER.error(inMessage);&#xA;        //sendMail(inMessage, null);&#xA;        return;&#xA;    }&#xA;&#xA;    private void sendMail(String inMessage, Exception inException) {&#xA;        LOGGER.error(inMessage, inException);&#xA;    }&#xA;&#xA;    public boolean isUnitCreatedByStripEvent(Object event) {&#xA;        try {&#xA;            def evntNotes = event.event.evntNote&#xA;            evntNotes = evntNotes != null ? evntNotes : ''&#xA;            if (evntNotes.contains('Strip') || evntNotes.contains('strip')) {&#xA;                return true;&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return false;&#xA;    }&#xA;&#xA;}" />
<extension name="MATCarCarrierUp" scope="MATSON/ALASKA" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2016 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.argo.business.atoms.DataSourceEnum&#xA;import com.navis.argo.business.atoms.FreightKindEnum&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; * Before loading an auto frame the corner posst need to be extended.&#xA; *&#xA; * Peter Seiler&#xA; *&#xA; * Date: 02/23/2016&#xA; * JIRA: CSDV-3208&#xA; * SFDC:&#xA; *&#xA; * Called from: General Notices for user-created event CAR CARRIER UP&#xA; *&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; *&#xA; */&#xA;class MATCarCarrierUp extends AbstractGeneralNoticeCodeExtension&#xA;{&#xA;    public void execute(GroovyEvent inGroovyEvent)&#xA;    {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot; MATCarCarrierUp execute Started.&quot;);&#xA;&#xA;        if (inGroovyEvent == null)&#xA;            return;&#xA;&#xA;        Event thisEvent = inGroovyEvent.getEvent();&#xA;&#xA;        if (thisEvent == null)&#xA;            return;&#xA;&#xA;        /* Get the unit */&#xA;&#xA;        Unit ThisUnit = (Unit) inGroovyEvent.getEntity();&#xA;&#xA;        if (ThisUnit == null)&#xA;            return;&#xA;&#xA;        /* it has to be empty */&#xA;&#xA;        /*if (ThisUnit.getUnitFreightKind() != FreightKindEnum.MTY)&#xA;            return;*/&#xA;&#xA;        /* get the unit equipment */&#xA;&#xA;        UnitEquipment ThisUE = ThisUnit.getUnitPrimaryUe();&#xA;&#xA;        if(ThisUE == null)&#xA;            return;&#xA;&#xA;        Equipment ThisEquip = ThisUE.getUeEquipment();&#xA;&#xA;        if(ThisEquip == null)&#xA;            return;&#xA;&#xA;        /* if the height is not 13'6&quot; set it to 13'6&quot; */&#xA;&#xA;        if (ThisEquip.eqHeightMm != 4115)&#xA;        {&#xA;            ThisEquip.upgradeEqHeight((Long) 4115, DataSourceEnum.USER_LCL)&#xA;        }&#xA;    }&#xA;    private Logger LOGGER = Logger.getLogger(MATCollapseAutoFrame.class);&#xA;}" />
<extension name="MatsonUnitGetWeightWSLibrary" scope="MATSON/ALASKA" type="LIBRARY" language="GROOVY" is-enabled="Y" contents="import com.navis.external.framework.AbstractExtensionCallback&#xA;import com.sun.deploy.config.ClientConfig&#xA;import org.apache.log4j.Level&#xA;import java.awt.PageAttributes&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.sun.jersey.api.client.Client&#xA;import com.sun.jersey.api.client.ClientResponse&#xA;import com.sun.jersey.api.client.WebResource&#xA;import com.sun.jersey.api.client.config.ClientConfig&#xA;import com.sun.jersey.api.client.config.DefaultClientConfig&#xA;import org.apache.log4j.Logger&#xA;import javax.ws.rs.core.MediaType;&#xA;&#xA;/**&#xA; *&#xA; * This groovy library calls the webservice to identify the VGMRequired field&#xA; *&#xA; * SOLAS VGM&#xA; * Date: 25/05/2016&#xA; * Called from:  MatsonUnitSetVGMVerifiedFromBooking groovy&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;class MatsonUnitGetWeightWSLibrary extends AbstractExtensionCallback {&#xA;&#xA;    private Logger LOGGER = Logger.getLogger(MatsonUnitGetWeightWSLibrary.class);&#xA;&#xA;    private String xmlWeightTagBegin = &quot;&lt;grossWeight&gt;&quot;;&#xA;    private String xmlWeightTagEnd   = &quot;&lt;/grossWeight&gt;&quot;;&#xA;&#xA;    public String getUnitWeight(String bookingNo, String equipmentId) {&#xA;&#xA;        LOGGER.setLevel(Level.WARN);&#xA;        LOGGER.info(&quot; MatsonUnitGetWeightWSLibrary execute Started.&quot;);&#xA;&#xA;        GeneralReference genRef = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;VGMQualifier&quot;, &quot;URL&quot;);&#xA;        String webserviceURL = genRef.getRefValue1();   // WS URL&#xA;        String connTimeout    = genRef.getRefValue2();   // connection timeout&#xA;        String readTimeout      = genRef.getRefValue3();   // read timeout&#xA;        String bookingNoText = genRef.getRefValue4();   // bookingNo text&#xA;        String eqipmentIdText = genRef.getRefValue5();   // equipmentId text&#xA;        String urlExtn                = genRef.getRefValue6();   // equipment text&#xA;        String unitNbr = &quot;&quot;;&#xA;&#xA;        if (equipmentId != null &amp;&amp; equipmentId.length()==11) {&#xA;            unitNbr = equipmentId.substring(0,10);&#xA;        } else&#xA;        {&#xA;            unitNbr = equipmentId;&#xA;        }&#xA;        LOGGER.info(&quot;webserviceURL: &quot;+webserviceURL +&quot;, urlExtn: &quot;+urlExtn + &quot;, connTimeout: &quot;+connTimeout+&quot;, readTimeout: &quot;+readTimeout + &quot;, bookingNoText: &quot;+bookingNoText+&quot;, eqipmentIdText: &quot;+eqipmentIdText);&#xA;&#xA;        URL url = new URL(webserviceURL + urlExtn + &quot;?&quot; + bookingNoText + &quot;=&quot; + bookingNo + &quot;&amp;&quot; + eqipmentIdText + &quot;=&quot; + unitNbr);&#xA;        //below line is hardcoded for testing - to be removed&#xA;        //URL url = new URL(&quot;http://dev2.svc.gates.matson.com/gates-service/vgm/equipment?bookingNo=6000152&amp;equipmentId=TOLU4831156&quot;);&#xA;        logMsg(url.toString());&#xA;&#xA;        /*DefaultClientConfig clientConfig1 = new DefaultClientConfig();&#xA;        clientConfig1.getProperties().put(ClientConfig.PROPERTY_CONNECT_TIMEOUT, connTimeout);&#xA;        clientConfig1.getProperties().put(ClientConfig.PROPERTY_READ_TIMEOUT, readTimeout);&#xA;        Client client = Client.create(clientConfig1);*/&#xA;        Client client = Client.create();&#xA;&#xA;        WebResource resource = client.resource(url.toString());&#xA;        //ClientResponse response = (ClientResponse) resource.accept(PageAttributes.MediaType.APPLICATION_XML).get(ClientResponse.class);&#xA;        ClientResponse response =  (ClientResponse) resource.accept(MediaType.APPLICATION_XML).get(ClientResponse.class);&#xA;        if (response.getStatus() != 200) {&#xA;            logMsg(&quot;Request failed&quot;);&#xA;            logMsg(response.toString());&#xA;        } else {&#xA;            logMsg(&quot;Request Success&quot;);&#xA;            logMsg(response.toString());&#xA;        }&#xA;        String xmlResponse = response.getEntity(String.class);&#xA;        logMsg(xmlResponse);&#xA;&#xA;        String weight =&quot;&quot;;&#xA;        if (xmlResponse.contains(xmlWeightTagBegin) &amp;&amp; xmlResponse.contains(xmlWeightTagEnd)) {&#xA;            int iAdjust = xmlWeightTagBegin.length();&#xA;            int iBegin = xmlResponse.indexOf(xmlWeightTagBegin);&#xA;            int iEnd = xmlResponse.lastIndexOf(xmlWeightTagEnd);&#xA;            weight = xmlResponse.substring(iBegin + iAdjust, iEnd);&#xA;        }&#xA;&#xA;        LOGGER.info(&quot; MatsonUnitGetWeightWSLibrary about to End - weight :&quot;+weight);&#xA;        return weight;&#xA;    }&#xA;    private void logMsg(String inMsg) {&#xA;        LOGGER.warn(inMsg);&#xA;    }&#xA;}&#xA;" />
<extension name="MATUpdateEquipmentOwnerOnUnitCreate" scope="MATSON/ALASKA" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="package codeExtensions&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.atoms.BizRoleEnum&#xA;import com.navis.argo.business.atoms.DataSourceEnum&#xA;import com.navis.argo.business.atoms.EquipClassEnum&#xA;import com.navis.argo.business.model.Facility&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.inventory.business.atoms.EqUnitRoleEnum&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; * @author Keerthi Ramachandran&#xA; * @since 6/20/2016&#xA; * &lt;p&gt;MATUpdateEquipmentOwnerOnUnitCreate is ..&lt;/p&gt;&#xA; */&#xA;class MATUpdateEquipmentOwnerOnUnitCreate extends AbstractGeneralNoticeCodeExtension {&#xA;&#xA;    private Logger LOGGER = Logger.getLogger(MATUpdateEquipmentOwnerOnUnitCreate.class);&#xA;&#xA;    public void execute(GroovyEvent inEvent)&#xA;&#xA;    {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot;MATUpdateEquipmentOwnerOnUnitCreate Execution Started&quot;);&#xA;&#xA;        Boolean isValidEvent = Boolean.TRUE; //this.isValidEvent(inEvent);&#xA;        if (isValidEvent) {&#xA;&#xA;            try {&#xA;                Unit ThisUnit = (Unit) inEvent.getEntity();&#xA;                if (ThisUnit == null) {&#xA;                    LOGGER.error(&quot;Reference to Unit not found!&quot;);&#xA;                    logErrorAndReturn(&quot;Reference to Unit not found!&quot;);&#xA;                } else&#xA;                    LOGGER.info(&quot;Unit: &quot; + ThisUnit);&#xA;&#xA;                Facility ThisFacility = ContextHelper.getThreadFacility();&#xA;                /*UnitFacilityVisit ThisUFV = ThisUnit.getUfvForFacilityAndEventTime(ThisFacility,&#xA;                        inEvent.getEvent().getEventTime());&#xA;                if (ThisUFV == null) {&#xA;                    LOGGER.error(&quot;Reference to UFV not found!&quot;);&#xA;                    logErrorAndReturn(&quot;Reference to UFV not found!&quot;)&#xA;                    LOGGER.error(&quot;Container owner update failed, no UFV found&quot;)&#xA;                    return;&#xA;                } else&#xA;                    LOGGER.info(&quot;UFV: &quot; + ThisUFV);*/&#xA;&#xA;                UnitEquipment ThisUnitEquip = ThisUnit.getUnitPrimaryUe();&#xA;                Equipment equipment = ThisUnitEquip.getUeEquipment();&#xA;                LOGGER.info(&quot;ThisUnitEquip  &quot; + ThisUnitEquip);&#xA;                LOGGER.info(&quot;Equipment  &quot; + equipment + &quot; getEqDataSource  &quot; + equipment.getEqDataSource());&#xA;&#xA;                if (equipment.getEqDataSource().equals(DataSourceEnum.EDI_STOW)&#xA;                        || equipment.getEqDataSource().equals(DataSourceEnum.SNX)) {&#xA;                    EquipmentState ThisEqState = ThisUnitEquip.getUeEquipmentState();&#xA;                    EqUnitRoleEnum UeRole = ThisUnitEquip.getUeEqRole();&#xA;                    EquipClassEnum equipClass = ThisUnitEquip.getUeEquipment().getEqEquipType().getEqtypClass();&#xA;                    LOGGER.info(&quot;getUeEquipmentState    &quot; + ThisEqState + &quot;     UeRole  &quot; + UeRole + &quot;      equipClass  &quot; + equipClass);&#xA;&#xA;&#xA;                    if (EqUnitRoleEnum.PRIMARY.equals(UeRole) &amp;&amp; EquipClassEnum.CONTAINER.equals(equipClass)) {&#xA;                        //String containerIdFull = ThisUnit.getUnitId();&#xA;                        String originalEquipmentOwner = ThisEqState.getEqsEqOwner().getBzuId();&#xA;                        String originalEquipmentOperator = ThisEqState.getEqsEqOperator().getBzuId();&#xA;&#xA;                        /*&#xA;                        * Check the Original Equipment, if the owner is Maersk, the update the stripped empty operator to MAE&#xA;                        */&#xA;                        LOGGER.info(&quot;The Equipment Original Owner is &quot; + originalEquipmentOwner + &quot; Operator is &quot; + originalEquipmentOperator);&#xA;&#xA;                        boolean isOwnerIDInManipulationList = isOwnerIdInOperatorManipulatioList(originalEquipmentOwner);&#xA;                        if (isOwnerIDInManipulationList)&#xA;                            LOGGER.info(&quot;The Equipment Original Owner ID &quot; + originalEquipmentOwner + &quot; is available in the Manipulation List&quot;);&#xA;                        if (isOwnerIDInManipulationList &amp;&amp; originalEquipmentOwner != null &amp;&amp; originalEquipmentOwner.length() &lt; 4) {&#xA;                            String newOwnerCode = get4LetterOwnerCode(originalEquipmentOwner);&#xA;                            if (newOwnerCode != null &amp;&amp; newOwnerCode.length() &gt; 3) {&#xA;                                ScopedBizUnit changedContainerOwner = ScopedBizUnit.findScopedBizUnit(newOwnerCode, BizRoleEnum.LINEOP);&#xA;                                // try finding line operator&#xA;                                if (changedContainerOwner == null) {&#xA;                                    LOGGER.error(&quot;There is no Line Operator for ID  &quot; + newOwnerCode);&#xA;                                    LOGGER.info(&quot;Finding the Leasing Company&quot;);&#xA;                                    changedContainerOwner = ScopedBizUnit.findScopedBizUnit(newOwnerCode, BizRoleEnum.LEASINGCO);//Find Leasing Company, in absence of line operator &#xA;                                }&#xA;                                if (changedContainerOwner != null) {&#xA;                                    LOGGER.info(&quot;New 4 letter owner code is &quot; + changedContainerOwner.getBzuId());&#xA;                                    EquipmentState.upgradeEqOwner(equipment, changedContainerOwner, DataSourceEnum.SNX);&#xA;                                } else {&#xA;                                    LOGGER.error(&quot;There is no Leasing Company for ID   &quot; + newOwnerCode);&#xA;                                }&#xA;                            } else {&#xA;                                logErrorAndReturn(&quot;There is no valid 4 letter owner code in configuration for &quot; + originalEquipmentOwner);&#xA;                            }&#xA;                        }&#xA;                    }&#xA;                }&#xA;                LOGGER.info(&quot;Update Successful.&quot;)&#xA;            }&#xA;            catch (Exception e) {&#xA;                LOGGER.error(&quot;Update Failed. Exception [&quot; + e + &quot;].&quot;);&#xA;                logError(&quot;Update Failed.&quot;, e);&#xA;            }&#xA;            finally {&#xA;                LOGGER.info(&quot;MATUpdateEquipmentOwnerOnUnitCreate Execution Ended.&quot;)&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    private void logErrorAndReturn(String inMessage) {&#xA;        LOGGER.error(inMessage);&#xA;        //logError(inMessage, null);&#xA;        return;&#xA;    }&#xA;&#xA;    private void logError(String inMessage, Exception inException) {&#xA;        LOGGER.error(inMessage, inException);&#xA;    }&#xA;&#xA;    /*public boolean isValidEvent(Object event) {&#xA;        try {&#xA;            def eventType = event.event.getEventTypeId();&#xA;            eventType = eventType != null ? eventType : &quot;&quot;;&#xA;            if (eventType.equalsIgnoreCase(&quot;UNIT_CREATE&quot;)) {&#xA;                return true;&#xA;            }&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace()&#xA;        }&#xA;        return false;&#xA;    }*/&#xA;&#xA;    public boolean isOwnerIdInOperatorManipulatioList(String inEquipmentOwnerId) {&#xA;        GeneralReference reference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;OPERATOR&quot;, &quot;OWNER&quot;, &quot;MAPPING&quot;);&#xA;        String operatorAsString = reference.getRefValue1() != null ? reference.getRefValue1() : null;&#xA;        LOGGER.info(&quot;GeneralReference.findUniqueEntryById(\&quot;MATSON\&quot;, \&quot;OPERATOR\&quot;, \&quot;OWNER\&quot;, \&quot;MAPPING\&quot;) = &quot; + operatorAsString);&#xA;        if (operatorAsString != null &amp;&amp; !operatorAsString.isEmpty()) {&#xA;            String[] operators = operatorAsString.split(&quot;\\,&quot;);&#xA;            for (String operator : operators) {&#xA;                LOGGER.info(&quot;Operator &quot; + operator + &quot;Matching against&quot; + inEquipmentOwnerId);&#xA;                if (inEquipmentOwnerId.equalsIgnoreCase(operator)) {&#xA;                    LOGGER.info(&quot;Match Found&quot;)&#xA;                    return true;&#xA;                }&#xA;            }&#xA;        }&#xA;        return false;&#xA;    }&#xA;&#xA;    String get4LetterOwnerCode(String inEquipmentOwnerId) {&#xA;        GeneralReference reference = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;OPERATOR&quot;, &quot;OWNER&quot;, inEquipmentOwnerId);&#xA;        LOGGER.info(&quot;GeneralReference.findUniqueEntryById(\&quot;MATSON\&quot;, \&quot;OPERATOR\&quot;, \&quot;OWNER\&quot;, &quot; + inEquipmentOwnerId + &quot;)&quot; + reference.getRefValue1());&#xA;        return reference.getRefValue1();&#xA;    }&#xA;&#xA;}" />
<extension name="MATUnitRollBookingUpdateExt" scope="MATSON/ALASKA" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="package codeExtensions&#xA;&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.BizRequest&#xA;import com.navis.framework.portal.BizResponse&#xA;import com.navis.framework.portal.CrudOperation&#xA;import com.navis.framework.portal.FieldChange&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.inventory.InventoryBizMetafield&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.business.InventoryFacade&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;&#xA;&#xA;/**&#xA; * Created by VNatesan on 8/1/2016.&#xA; */&#xA;class MATUnitRollBookingUpdateExt extends AbstractGeneralNoticeCodeExtension{&#xA;&#xA;&#xA;    /**&#xA;     * execute&#xA;     * @param inEvent&#xA;     */&#xA;    public void execute(GroovyEvent inEvent) {&#xA;&#xA;        GroovyApi api = new GroovyApi();&#xA;        Event  thisEvent = inEvent.getEvent();&#xA;&#xA;        if (thisEvent == null) {&#xA;            return;&#xA;        }&#xA;&#xA;        Unit unit = (Unit) inEvent.getEntity();&#xA;&#xA;        if (unit == null) {&#xA;            return;&#xA;        }&#xA;        this.log(&quot;Start Event ---:&quot;+thisEvent.getEventTypeId()+ &quot; on Unit :&quot;+unit.getUnitId()+&quot; ---:&quot;)&#xA;        &#xA;         //Removing duplicate code ,this is exist in interceptors&#xA;/**&#xA;         def bookingNbr;&#xA;         UnitEquipment  ue = unit.getUnitPrimaryUe();&#xA;         if (ue.getUeDepartureOrderItem() != null) {&#xA;         bookingNbr = ue.getUeDepartureOrderItem().getEqboiOrder().getEqboNbr();&#xA;&#xA;         }&#xA;         this.log(&quot;Booking Nbr for Event  +++987+++---:&quot;+thisEvent.getEventTypeId()+ &quot; Booking Nbr :&quot;+bookingNbr)&#xA;         unit.getUnitGoods().setGdsBlNbr(bookingNbr);&#xA;      **/   &#xA;        def doer = thisEvent.getEvntAppliedBy()&#xA;        boolean isAlwaysSendIGT = false;&#xA;&#xA;&#xA;&#xA;        try {&#xA;            if (unit != null) {&#xA;                UnitEquipment unitEquipment = unit.getUnitPrimaryUe();&#xA;                EquipmentState ueEquipmentState = unitEquipment.getUeEquipmentState()&#xA;                def equipFlex01 = ueEquipmentState != null ? ueEquipmentState.getEqsFlexString01() : ''&#xA;                this.log(&quot;ueEquipmentState :equipFlex01(getEqsFlexString01) Value---:&quot;+equipFlex01)&#xA;                def gvyEquiObj = api.getGroovyClassInstance(&quot;GvyCmisEquiDetail&quot;);&#xA;                //gvyEquiObj.setEqCntrSvr(inEvent);&#xA;                this.log(&quot;ueEquipmentState :equipFlex01(getEqsFlexString01) Value1---:&quot;);&#xA;                this.log(equipFlex01)&#xA;                if (equipFlex01 != null) {&#xA;                    ueEquipmentState = unitEquipment.getUeEquipmentState();&#xA;                    def newEquipFlex01 = ueEquipmentState != null ? ueEquipmentState.getEqsFlexString01() : '';&#xA;                    this.log(&quot;ueEquipmentState :newEquipFlex01(getEqsFlexString01) Value-11--:&quot;);&#xA;                    this.log(newEquipFlex01);&#xA;                    if (newEquipFlex01!= null &amp;&amp; &quot;MAT&quot;.equalsIgnoreCase(newEquipFlex01) &amp;&amp; !&quot;MAT&quot;.equalsIgnoreCase(equipFlex01)) {&#xA;                        isAlwaysSendIGT = true;&#xA;                        this.log(&quot;isAlwaysSendIGT true&quot;)&#xA;                    }&#xA;                }&#xA;&#xA;            }&#xA;        } catch(Exception e) {&#xA;            this.log(&quot;exception thrown : &quot;+e.getMessage());&#xA;        }&#xA;        if(!doer.contains('FRUCTOSE_MTY')){&#xA;            this.log(&quot; ! FRUCTOSE_MTY&quot;)&#xA;            def gvyPropUpdtObj = api.getGroovyClassInstance(&quot;GvyCmisEventUnitPropertyUpdate&quot;)&#xA;            //gvyPropUpdtObj.processUnitPropertyUpdate(inEvent,api,  isAlwaysSendIGT)&#xA;        }&#xA;    }&#xA;}&#xA;" />
<extension name="MATGateReeferTempRI" scope="MATSON/ALASKA" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2016 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.atoms.EquipRfrTypeEnum&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.metafields.Metafield&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.framework.util.internationalization.ITranslationContext&#xA;import com.navis.framework.util.internationalization.PropertyKey&#xA;import com.navis.framework.util.internationalization.PropertyKeyFactory&#xA;import com.navis.framework.util.internationalization.TranslationUtils&#xA;import com.navis.framework.util.message.MessageLevel&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.road.business.atoms.TranSubTypeEnum&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import org.apache.commons.lang.StringUtils&#xA;&#xA;/**&#xA; * Validates and applies the reefer temperature entered in the gate screen.&#xA; * The reefer temperature is captured in a unit flex field.&#xA; * The validation rules will result in an error if any of the conditions below is true:&#xA; * 1) Any Unit with KFF&#xA; * 2) Any Unit with AMB&#xA; * 3) Non-reefer with temp. entered&#xA; * 4) Reefer equipment and reefer temperature is not entered.&#xA; *&#xA; * Date: Feb. 10, 2016&#xA; * Peter Seiler&#xA; * JIRA: CSDV-3161&#xA; *&#xA; * Copy the MATGateReeferTemp to make a new code extension specificly for the Dray-in&#xA; * Make changes to allow clerk to adjust temperature on receiving back a split container&#xA; *&#xA; */&#xA;&#xA;public class MATGateReeferTempRI extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;{&#xA;    // These properties defined in the resource bundle&#xA;&#xA;    // {0} translated field name&#xA;    // {1} equipment type&#xA;    public static PropertyKey REEFER_TEMP_NOT_ALLOWED = PropertyKeyFactory.valueOf(&quot;gate.reefer_temp_not_allowed&quot;)&#xA;    // {0} translated field name&#xA;    public static PropertyKey REEFER_TEMP_INVALID = PropertyKeyFactory.valueOf(&quot;gate.reefer_temp_invalid&quot;)&#xA;&#xA;    public static String REEFER_TEMP_FLEX_FIELD = &quot;ufvFlexString07&quot;&#xA;    public static String AMB_REEFER_TEMP_STRING = &quot;AMB&quot;&#xA;    public static String KFF_REEFER_TEMP_STRING = &quot;KFF&quot;&#xA;&#xA;    public void execute(TransactionAndVisitHolder dao)&#xA;    {&#xA;&#xA;        /* Execute the built-in logic got the business task. */&#xA;        executeInternal(dao);&#xA;&#xA;        TruckTransaction tran = dao.tran;&#xA;        Container container = tran.tranContainer;&#xA;&#xA;        // No container, exit&#xA;        if (container == null) {&#xA;            return&#xA;        }&#xA;&#xA;        Unit unit = tran.getTranUnit();&#xA;&#xA;        if (unit == null)&#xA;            return;&#xA;&#xA;        EquipRfrTypeEnum rfrType = container.eqRfrType;&#xA;        String fieldValue = tran.getFieldString(getFlexFieldMetafieldId(REEFER_TEMP_FLEX_FIELD));&#xA;        String fieldName = getFlexFieldTranslatedName(REEFER_TEMP_FLEX_FIELD);&#xA;        String eqTypeId = container.eqEquipType.eqtypId;&#xA;&#xA;        TranSubTypeEnum tranType = tran.getTranSubType();&#xA;&#xA;        if(StringUtils.isEmpty(fieldValue))&#xA;        {&#xA;            return;&#xA;        }&#xA;&#xA;        if(fieldValue.equals(AMB_REEFER_TEMP_STRING || fieldValue.equals(KFF_REEFER_TEMP_STRING)))&#xA;        {&#xA;            return;&#xA;        }&#xA;&#xA;        // NON-REEFER WITH TEMP SETTING ENTERED (NOT AMB or KFF)&#xA;        if (EquipRfrTypeEnum.NON_RFR.equals(rfrType))&#xA;        {&#xA;            RoadBizUtil.appendMessage(MessageLevel.SEVERE, REEFER_TEMP_NOT_ALLOWED, fieldName, eqTypeId);&#xA;            return;&#xA;        }&#xA;&#xA;        // Reefer equipment type and non-empty temp value.&#xA;&#xA;        Double reefer1TempC = 0.0;&#xA;        Double reefer1TempF = 0.0;&#xA;        Double reefer2TempC = null;&#xA;        Double reefer2TempF = null;&#xA;&#xA;        /* parse out both reefer temperatures */&#xA;&#xA;        String Temp1Txt = null;  //A6&#xA;        String Temp2Txt = null;  //A6&#xA;&#xA;        /* find if there is a slash in the string */&#xA;&#xA;        int SlashPos = fieldValue.indexOf('/');  //A6&#xA;&#xA;        if (SlashPos == -1)  //A6&#xA;        {&#xA;            /* there is no slash assume only the first temperature is specified. */&#xA;            Temp1Txt = fieldValue;  //A6&#xA;        }&#xA;        else&#xA;        {&#xA;            /* two temperature were entered parse them both */&#xA;&#xA;            def tokens = fieldValue.split('/'); //A8&#xA;            Temp1Txt = tokens[1];&#xA;            Temp2Txt = tokens[2];&#xA;        }&#xA;&#xA;&#xA;        // Parse and convert temp 1&#xA;        try  //A6&#xA;        {&#xA;            /* convert the first entry to numeric */&#xA;            reefer1TempF = Double.parseDouble(Temp1Txt);  //A6&#xA;            reefer1TempC = this.fahrenheitToCelsius(reefer1TempF);  //A6&#xA;&#xA;            // if dual temp, parse and convert temp 2&#xA;            if (Temp2Txt != null)&#xA;            {&#xA;                reefer2TempF = Double.parseDouble(Temp2Txt);    //A6&#xA;                reefer2TempC = this.fahrenheitToCelsius(reefer2TempF);  //A6&#xA;            }&#xA;        }&#xA;        catch (Exception e)&#xA;        {&#xA;            RoadBizUtil.appendMessage(MessageLevel.SEVERE, REEFER_TEMP_INVALID, fieldName);&#xA;            this.log(&quot;Exception parsing temperatures: &quot; + e);&#xA;            return;&#xA;        }&#xA;&#xA;        //gets the unit temp to check for temp discrepancy&#xA;        if (unit != null &amp;&amp; unit.getUnitGoods() != null &amp;&amp; unit.getUnitGoods().getGdsReeferRqmnts() != null)&#xA;        {&#xA;            unit.getUnitGoods().getGdsReeferRqmnts().setRfreqTempRequiredC(reefer1TempC);&#xA;            unit.getUnitGoods().getGdsReeferRqmnts().setRfreqTempLimitMinC(reefer1TempC);&#xA;            unit.getUnitGoods().getGdsReeferRqmnts().setRfreqTempLimitMaxC(reefer2TempC);&#xA;        }&#xA;        tran.tranTempRequired = reefer1TempC;&#xA;    }&#xA;&#xA;    // Returns the MetafieldId of the flex field on the truck transaction.&#xA;    private MetafieldId getFlexFieldMetafieldId(String idString) {&#xA;        MetafieldIdFactory.valueOf(&quot;tran${idString[0].toUpperCase()}${idString[1..-1]}&quot;)&#xA;    }&#xA;&#xA;    // Returns the user-friendly name for the flex field.&#xA;    private String getFlexFieldTranslatedName(String idString) {&#xA;        MetafieldId fieldId = MetafieldIdFactory.valueOf(idString)&#xA;        ITranslationContext translator = TranslationUtils.getTranslationContext(ContextHelper.getThreadUserContext())&#xA;        Metafield metafield = translator.getIMetafieldDictionary().findMetafield(fieldId)&#xA;&#xA;        return translator.getMessageTranslator().getMessage(metafield.getLongLabelKey())&#xA;    }&#xA;&#xA;    private Double fahrenheitToCelsius(Double fahrenheit)&#xA;    {&#xA;        Double result = (fahrenheit - 32) * 5.0/9;&#xA;        return result;&#xA;    }&#xA;}&#xA;" />
<extension name="MATDeliverDomestic" scope="MATSON/ALASKA" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA;* Copyright (c) 2016 Navis LLC. All Rights Reserved.&#xA;*&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;/**&#xA; * This allow a DOMESTIC unit to be delivered with the DI transaction&#xA; *&#xA; * Author: Peter Seiler&#xA; * Date: 02/06/16&#xA; * JIRA: CSDV-3208&#xA; *&#xA; *&#xA; */&#xA;&#xA;public class MATDeliverDomestic extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        this.log(&quot;Execution Started MATDeliverDomestic&quot;);&#xA;&#xA;        TruckTransaction ThisTran = inDao.getTran();&#xA;&#xA;        /* get out if no gate transaction is found */&#xA;&#xA;        if (ThisTran == null)&#xA;            return;&#xA;&#xA;        /* get the unit */&#xA;&#xA;        Unit ThisUnit = ThisTran.getTranUnit();&#xA;&#xA;        /* if it is a DOMESTIC unit retuen to allow the deliver transaction to be executed. */&#xA;&#xA;        if (ThisUnit != null &amp;&amp; ThisUnit.getUnitCategory() == UnitCategoryEnum.DOMESTIC)&#xA;            return;&#xA;&#xA;        /* process the DI transaction */&#xA;&#xA;        executeInternal(inDao);&#xA;    }&#xA;}" />
<extension name="MATVesselVisitValidationsELI" scope="MATSON/ALASKA" type="ENTITY_LIFECYCLE_INTERCEPTION" language="GROOVY" is-enabled="Y" contents="import com.navis.argo.ArgoField&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.atoms.CarrierModeEnum&#xA;import com.navis.argo.business.atoms.CarrierVisitPhaseEnum&#xA;import com.navis.argo.business.atoms.LocTypeEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.external.framework.entity.AbstractEntityLifecycleInterceptor&#xA;import com.navis.external.framework.entity.EEntityView&#xA;import com.navis.external.framework.util.EFieldChanges&#xA;import com.navis.external.framework.util.EFieldChangesView&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.portal.QueryUtils&#xA;import com.navis.framework.portal.query.DomainQuery&#xA;import com.navis.framework.portal.query.PredicateFactory&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.InventoryPropertyKeys&#xA;import com.navis.inventory.business.api.UnitField&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.vessel.api.VesselVisitField&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails&#xA;&#xA;/**&#xA; * Created  on 3/29/2016.&#xA; */&#xA;public class MATVesselVisitValidationsELI extends AbstractEntityLifecycleInterceptor {&#xA;&#xA;    @Override&#xA;    void onCreate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges) {&#xA;        //this.onCreateOrUpdate(inEntity, inOriginalFieldChanges, inMoreFieldChanges);&#xA;    }&#xA;&#xA;    @Override&#xA;    void onUpdate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges) {&#xA;        onCreateOrUpdate(inEntity, inOriginalFieldChanges, inMoreFieldChanges);&#xA;    }&#xA;&#xA;    void onCreateOrUpdate(EEntityView inEntity, EFieldChangesView inOriginalFieldChanges, EFieldChanges inMoreFieldChanges)&#xA;    {&#xA;        GroovyApi groovyApi = new GroovyApi();&#xA;        if (inOriginalFieldChanges == null) {&#xA;            return;&#xA;        }&#xA;        CarrierVisit cv = (CarrierVisit) inEntity._entity;&#xA;//        CarrierVisit cv = vesselVisitDetails.getCvdCv();&#xA;        if (cv == null) {&#xA;            return;&#xA;        }&#xA;        if (cv.getCvCarrierMode()==null || !LocTypeEnum.VESSEL.equals(cv.getCvCarrierMode())) {&#xA;            return;&#xA;        }&#xA;        CarrierVisitPhaseEnum cvPhase;&#xA;        if (inOriginalFieldChanges.hasFieldChange(ArgoField.CV_VISIT_PHASE)) {&#xA;            cvPhase = (CarrierVisitPhaseEnum) inOriginalFieldChanges.findFieldChange(ArgoField.CV_VISIT_PHASE).getNewValue();&#xA;        }&#xA;        if (cvPhase==null) {&#xA;            return;&#xA;            //cvPhase = cv.getCvVisitPhase();&#xA;        }&#xA;        Date atd;&#xA;        //VesselVisitDetails vesselVisitDetails = cv.get&#xA;        if (inOriginalFieldChanges.hasFieldChange(VesselVisitField.VVD_A_T_D)) {&#xA;            atd = (Date) inOriginalFieldChanges.findFieldChange(VesselVisitField.VVD_A_T_D).getNewValue();&#xA;        }&#xA;        if (atd == null) {&#xA;            atd = cv.getCvATD();&#xA;        }&#xA;        Serializable[] onBoardKeys;&#xA;        if (cvPhase != null &amp;&amp; CarrierVisitPhaseEnum.DEPARTED.equals(cvPhase)) {&#xA;            onBoardKeys = findUfvsWithInTimeLaterThanDepartTime(cv, atd);&#xA;            if (onBoardKeys != null &amp;&amp; onBoardKeys.length &gt; 0) {&#xA;                StringBuffer units = new StringBuffer();&#xA;                for (Serializable ufvGkey : onBoardKeys) {&#xA;                    UnitFacilityVisit ufv = (UnitFacilityVisit) HibernateApi.getInstance().load(UnitFacilityVisit.class, ufvGkey);&#xA;                    if (ufv != null) {&#xA;                        units.append(ufv.getUfvUnit().getUnitId() + &quot; &quot;);&#xA;                    }&#xA;                }&#xA;                //BizViolation bizViolation = BizViolation.create(InventoryPropertyKeys.FACILITY_TIME_IN_DATE_IS_AFTER_TIME_OUT_DATE, null, &quot;Units have in time after the ATD &quot; + units.toString());&#xA;                //groovyApi.sendEmail(&quot;gbabu@matson.com&quot;,&quot;gbabu@matson.com&quot;,&quot;Biz violation while departing&quot;, units.toString());&#xA;                this.registerError(&quot;Units have in time after the Actual Time of Departure of vessel : &quot; + units.toString());&#xA;                //throw bizViolation;&#xA;            }&#xA;            onBoardKeys = findUfvsWithPODasCurrentPort(cv);&#xA;            if (onBoardKeys != null &amp;&amp; onBoardKeys.length &gt; 0) {&#xA;                StringBuffer unitsforCurrentFacility= new StringBuffer();&#xA;                for (Serializable ufvGkey : onBoardKeys) {&#xA;                    UnitFacilityVisit ufv = (UnitFacilityVisit) HibernateApi.getInstance().load(UnitFacilityVisit.class, ufvGkey);&#xA;                    if (ufv != null) {&#xA;                        unitsforCurrentFacility.append(ufv.getUfvUnit().getUnitId() + &quot; &quot;);&#xA;                    }&#xA;                }&#xA;                //BizViolation bizViolation = BizViolation.create(InventoryPropertyKeys.FACILITY_TIME_IN_DATE_IS_AFTER_TIME_OUT_DATE, null, &quot;Units have in time after the ATD &quot; + units.toString());&#xA;                //groovyApi.sendEmail(&quot;gbabu@matson.com&quot;,&quot;gbabu@matson.com&quot;,&quot;Biz violation while departing&quot;, units.toString());&#xA;                this.registerError(&quot;Units with POD as current Port still on board the vessel : &quot; + unitsforCurrentFacility.toString());&#xA;                //throw bizViolation;&#xA;            }&#xA;            onBoardKeys = findUfvsWithNoPOD(cv);&#xA;            if (onBoardKeys != null &amp;&amp; onBoardKeys.length &gt; 0) {&#xA;                StringBuffer unitsforNoFacility= new StringBuffer();&#xA;                for (Serializable ufvGkey : onBoardKeys) {&#xA;                    UnitFacilityVisit ufv = (UnitFacilityVisit) HibernateApi.getInstance().load(UnitFacilityVisit.class, ufvGkey);&#xA;                    if (ufv != null) {&#xA;                        unitsforNoFacility.append(ufv.getUfvUnit().getUnitId() + &quot; &quot;);&#xA;                    }&#xA;                }&#xA;                //BizViolation bizViolation = BizViolation.create(InventoryPropertyKeys.FACILITY_TIME_IN_DATE_IS_AFTER_TIME_OUT_DATE, null, &quot;Units have in time after the ATD &quot; + units.toString());&#xA;                //groovyApi.sendEmail(&quot;gbabu@matson.com&quot;,&quot;gbabu@matson.com&quot;,&quot;Biz violation while departing&quot;, units.toString());&#xA;                this.registerError(&quot;Units without POD is loaded on the vessel : &quot; + unitsforNoFacility.toString());&#xA;                //throw bizViolation;&#xA;            }&#xA;&#xA;        }&#xA;    }&#xA;    // This method returns a list of UFV gkeys that are on board with intime after departure time.&#xA;    private Serializable[] findUfvsWithInTimeLaterThanDepartTime(CarrierVisit inCv, Date inAtd) {&#xA;        if (inCv == null || inCv.getCvFacility() == null) {&#xA;            return null;&#xA;        }&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT_FACILITY_VISIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UFV_FACILITY, inCv.getCvFacility().getFcyGkey()))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UFV_POS_LOC_GKEY, inCv.getCvGkey()))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UFV_POS_LOC_TYPE, LocTypeEnum.VESSEL))&#xA;                .addDqPredicate(PredicateFactory.ne(UnitField.UFV_VISIT_STATE, UnitVisitStateEnum.RETIRED))&#xA;                //.addDqPredicate(PredicateFactory.eq(UnitField.UFV_POD, inCv.getCvFacility().getFcyRoutingPoint().getPointGkey()))&#xA;                .addDqPredicate(PredicateFactory.gt(InventoryField.UFV_TIME_IN, inAtd));&#xA;        dq.setScopingEnabled(false);&#xA;        return HibernateApi.getInstance().findPrimaryKeysByDomainQuery(dq);&#xA;    }&#xA;&#xA;    private Serializable[] findUfvsWithPODasCurrentPort(CarrierVisit inCv) {&#xA;        if (inCv == null || inCv.getCvFacility() == null) {&#xA;            return null;&#xA;        }&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT_FACILITY_VISIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UFV_FACILITY, inCv.getCvFacility().getFcyGkey()))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UFV_POS_LOC_GKEY, inCv.getCvGkey()))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UFV_POS_LOC_TYPE, LocTypeEnum.VESSEL))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UFV_TRANSIT_STATE, UfvTransitStateEnum.S20_INBOUND))&#xA;        .addDqPredicate(PredicateFactory.eq(UnitField.UFV_POD, inCv.getCvFacility().getFcyRoutingPoint().getPointGkey()));&#xA;        dq.setScopingEnabled(false);&#xA;        return HibernateApi.getInstance().findPrimaryKeysByDomainQuery(dq);&#xA;    }&#xA;    private Serializable[] findUfvsWithNoPOD(CarrierVisit inCv) {&#xA;        if (inCv == null || inCv.getCvFacility() == null) {&#xA;            return null;&#xA;        }&#xA;        DomainQuery dq = QueryUtils.createDomainQuery(InventoryEntity.UNIT_FACILITY_VISIT)&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UFV_FACILITY, inCv.getCvFacility().getFcyGkey()))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UFV_POS_LOC_GKEY, inCv.getCvGkey()))&#xA;                .addDqPredicate(PredicateFactory.eq(UnitField.UFV_POS_LOC_TYPE, LocTypeEnum.VESSEL))&#xA;                //.addDqPredicate(PredicateFactory.eq(UnitField.UFV_TRANSIT_STATE, UfvTransitStateEnum.S20_INBOUND))&#xA;                .addDqPredicate(PredicateFactory.isNull(UnitField.UFV_POD));&#xA;        dq.setScopingEnabled(false);&#xA;        return HibernateApi.getInstance().findPrimaryKeysByDomainQuery(dq);&#xA;    }&#xA;&#xA;}&#xA;" />
<extension name="MATBookingUpdateOnBargeEmpty" scope="MATSON/ALASKA/DUT" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="import com.navis.external.services.AbstractGeneralNoticeCodeExtension;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.services.business.event.EventFieldChange;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import org.apache.log4j.Level;&#xA;import org.apache.log4j.Logger;&#xA;&#xA;import java.util.Iterator;&#xA;import java.util.Set;&#xA;&#xA;/**&#xA; * Created by psethuraman on 8/23/2016.&#xA; */&#xA;public class MATBookingUpdateOnBargeEmpty extends AbstractGeneralNoticeCodeExtension {&#xA;    private Logger LOGGER = Logger.getLogger(MATBookingUpdateOnBargeEmpty.class);&#xA;&#xA;    public void execute(GroovyEvent inEvent)&#xA;&#xA;    {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot;MATBookingUpdateOnBargeEmpty Execution Started&quot;);&#xA;&#xA;        try {&#xA;            Unit ThisUnit = (Unit) inEvent.getEntity();&#xA;            if (ThisUnit == null) {&#xA;                LOGGER.error(&quot;Reference to Unit not found!&quot;);&#xA;                return;&#xA;            } else&#xA;                LOGGER.info(&quot;Unit: &quot; + ThisUnit);&#xA;&#xA;&#xA;            Set set = inEvent.getEvent().getEvntFieldChanges();&#xA;            LOGGER.info(&quot;field change size : &quot;+set.size());&#xA;            Iterator iter = set.iterator();&#xA;            EventFieldChange efc;&#xA;            while ( iter.hasNext()) {&#xA;                efc = (EventFieldChange)iter.next();&#xA;                LOGGER.info(&quot;get feild change id :&quot;+efc.getMetafieldId());&#xA;                LOGGER.info(&quot;get feild change old Value :&quot;+efc.getPrevVal());&#xA;                LOGGER.info(&quot;get feild change new Value :&quot;+efc.getNewVal());&#xA;                LOGGER.info(&quot;get feild change fc new Value :&quot;+efc.getEvntfcNewVal());&#xA;&#xA;               /* String oldVal = efc.getPrevVal();&#xA;                String newVal = efc.getNewVal();&#xA;&#xA;                LOGGER.info(&quot;Values changed to ::&quot;+oldVal +&quot;::::&quot;+newVal);*/&#xA;&#xA;            }&#xA;&#xA;            /*if(inOutChanges.hasFieldChange(com.navis.inventory.InventoryBizMetafield.BKG_AND_ERO)) {&#xA;                LOGGER.info(&quot;Got my Booking : &quot;+inOutChanges.getFieldChange(InventoryBizMetafield.BKG_AND_ERO));&#xA;&#xA;            }*/&#xA;        String expGateBkgNbr = (String) ThisUnit.getFieldValue(&quot;unitPrimaryUe.ueArrivalOrderItem.eqboiOrder.eqboNbr&quot;);&#xA;        LOGGER.info(&quot;BOOKING EMPTY UNIT_CREATE::::::::&quot;+expGateBkgNbr);&#xA;    } catch (Exception e) {&#xA;        LOGGER.error(&quot;Update Failed. Exception [&quot; + e + &quot;].&quot;);&#xA;    } finally {&#xA;        LOGGER.info(&quot;MATBookingUpdateOnBargeEmpty Execution Ended.&quot;);&#xA;    }&#xA;}&#xA;}&#xA;" />
<extension name="MatGvyUpdateEqOperator" scope="MATSON/ALASKA" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.argo.business.reference.LineOperator&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.inventory.business.units.EqBaseOrder&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import com.navis.orders.business.eqorders.EquipmentOrder&#xA;import com.navis.orders.business.eqorders.EquipmentOrderItem&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;&#xA;/**&#xA; * Created by psethuraman on 11/2/2016.&#xA; */&#xA;class MatGvyUpdateEqOperator extends AbstractGateTaskInterceptor implements EGateTaskInterceptor {&#xA;    public void execute(TransactionAndVisitHolder inDao) {&#xA;        this.log(&quot;Execution Started MatGvyUpdateEqOperator&quot;);&#xA;        if (inDao == null)&#xA;            return;&#xA;&#xA;        TruckTransaction tran = inDao.getTran();&#xA;&#xA;        if (tran == null)&#xA;            return;&#xA;&#xA;        /* Execute the built-in logic got the business task. */&#xA;&#xA;        executeInternal(inDao);&#xA;&#xA;&#xA;        EquipmentOrderItem orderItem = tran.getTranEqoItem();&#xA;        if (orderItem != null) {&#xA;            EqBaseOrder baseOrder = orderItem.getEqboiOrder();&#xA;            if (baseOrder != null) {&#xA;                EquipmentOrder order = EquipmentOrder.resolveEqoFromEqbo(baseOrder);&#xA;                this.log(&quot;Order : &quot;+order.getEqboNbr());&#xA;                if (order != null) {&#xA;                    Container container = tran.getTranContainer();&#xA;                    if (container != null) {&#xA;                        if (order != null) {&#xA;                            ScopedBizUnit line = order.getEqoLine();&#xA;                            this.log(&quot;Line for Booking : &quot;+line);&#xA;                            if (line != null) {&#xA;                                EquipmentState eqState = EquipmentState.findEquipmentState(container, ContextHelper.getThreadOperator());&#xA;                                if (eqState != null) {&#xA;                                    eqState.setEqsEqOperator(line);&#xA;                                    this.log(&quot;Update booking Operator to Eq Operator : &quot;+line);&#xA;                                }&#xA;                            }&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        this.log(&quot;Execution Ended MatGvyUpdateEqOperator&quot;);&#xA;&#xA;    }&#xA;}&#xA;" />
<extension name="MATCheckBookingFreightKind" scope="MATSON/ALASKA/ANK" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="import com.navis.argo.business.atoms.FreightKindEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.ScopedBizUnit&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.units.EqBaseOrder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.orders.business.api.OrdersFinder&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.orders.business.eqorders.EquipmentOrder&#xA;import com.navis.orders.business.eqorders.EquipmentOrderItem&#xA;import com.navis.road.business.adaptor.order.ReadOrder&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import com.navis.argo.business.reference.Equipment;&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; *&#xA; */&#xA;public class MATCheckBookingFreightKind extends AbstractGateTaskInterceptor implements EGateTaskInterceptor{&#xA;&#xA;&#xA;    public void execute(TransactionAndVisitHolder inDao){&#xA;&#xA;        LOGGER.warn(&quot; MatCheckBookingFreightKind Execution Started &quot;);&#xA;&#xA;        executeInternal(inDao);&#xA;        if (inDao == null ){&#xA;            LOGGER.warn(&quot;Transaction visit holder is null&quot;);&#xA;            return;&#xA;        }&#xA;        TruckTransaction tran = inDao.getTran();&#xA;        if (tran == null) {&#xA;            LOGGER.warn(&quot;Transaction is null&quot;);&#xA;            return;&#xA;        }&#xA;        String bookingNbr = tran.getTranEqoNbr();&#xA;        LOGGER.warn(&quot; Tran Booking : &quot; + bookingNbr);&#xA;&#xA;         String unitNbr=tran.getTranUnit();&#xA;         LOGGER.warn(&quot; unit : &quot; + unitNbr);&#xA;&#xA;         String chassis=tran.getTranChassis();&#xA;         LOGGER.warn(&quot; Chassis : &quot; + chassis);&#xA; &#xA;&#xA;        Unit unit = tran.getTranUnit();&#xA;        if (unit != null) {&#xA;            Booking booking = null;&#xA;            if (unit.getUnitPrimaryUe().getUeArrivalOrderItem() == null) {&#xA;                UnitFacilityVisit ufv = (UnitFacilityVisit) unit.getUnitUfvSet().iterator().next();&#xA;                LOGGER.warn(&quot;UFV :::: &quot; + ufv);&#xA;                booking = Booking.findBooking(bookingNbr, unit.getUnitLineOperator(), ufv.getUfvActualObCv());&#xA;                LOGGER.warn(&quot;Find Booking from Line/CV : &quot;+booking);&#xA;                OrdersFinder finder = (OrdersFinder) Roastery.getBean(OrdersFinder.BEAN_ID);&#xA;                EquipmentOrderItem orderItem = finder.findEqoItemByEqType(booking, unit.getUnitPrimaryUe().getUeEquipment().getEqEquipType());&#xA;                LOGGER.warn(&quot;Order Item found : &quot;+orderItem);&#xA;                if (orderItem !=null) {&#xA;                    unit.getUnitPrimaryUe().setFieldValue(InventoryField.UE_DEPARTURE_ORDER_ITEM, orderItem);&#xA;                } else if (booking != null &amp;&amp; booking.getEqboOrderItems() != null &amp;&amp; booking.getEqboOrderItems().iterator().hasNext()) {&#xA;                    unit.getUnitPrimaryUe().setFieldValue(InventoryField.UE_DEPARTURE_ORDER_ITEM, booking.getEqboOrderItems().iterator().next());&#xA;                }&#xA;                //unit.getUnitPrimaryUe().setUeArrivalOrderItem(orderItem);&#xA;            } else if (unit.getUnitPrimaryUe().getUeDepartureOrderItem() != null) {&#xA;                LOGGER.warn(&quot; Arrival item : &quot; + unit.getUnitPrimaryUe().getUeDepartureOrderItem());&#xA;&#xA;                    if (unit.getUnitPrimaryUe().getUeDepartureOrderItem().getEqboiOrder() != null) {&#xA;&#xA;                        String eqBaseGkey = unit.getUnitPrimaryUe().getUeDepartureOrderItem().getEqboiOrder().getEqboGkey();&#xA;                        LOGGER.warn(&quot; Booking Gkey: &quot; + eqBaseGkey);&#xA;                        EqBaseOrder baseOrder = HibernateApi.getInstance().load(EqBaseOrder.class, eqBaseGkey)&#xA;                        EquipmentOrder eqOrder = EquipmentOrder.resolveEqoFromEqbo(baseOrder);&#xA;                        booking = (Booking) Booking.resolveBkgFromEqo(eqOrder);&#xA;                        LOGGER.warn(&quot; Booking : &quot; + booking);&#xA;                    }else {&#xA;                        LOGGER.warn(&quot; booking not found : &quot;+booking);&#xA;                    }&#xA;&#xA;            } else {&#xA;                LOGGER.error(&quot;Order item not found for unit : &quot;+unit.getUnitId());&#xA;            }&#xA;            if (booking != null) {&#xA;&#xA;                LOGGER.warn(&quot; Equipment Order Status: &quot; + booking.getEqoEqStatus());&#xA;                FreightKindEnum fke = booking.getEqoEqStatus();&#xA;                if (!FreightKindEnum.MTY.equals(fke)) {&#xA;                    this.reportUserError(&quot;For Receive Empty Containers, Full Booking Cannot be Used &quot;);&#xA;                    return;&#xA;                }&#xA;                tran.setTranOrigin(booking.getEqoOrigin());&#xA;                tran.setTranDestination(booking.getEqoDestination());&#xA;                if (unit.getUnitGoods() != null) {&#xA;                    unit.getUnitGoods().setOrigin(booking.getEqoOrigin());&#xA;                    unit.getUnitGoods().setDestination(booking.getEqoDestination())&#xA;                }&#xA;                RoadBizUtil.commit();&#xA;            }&#xA;        } else {&#xA;            LOGGER.error(&quot;Unit not found : &quot;+unit);&#xA;        }&#xA;    }&#xA;&#xA;    private void reportUserError(String message) {&#xA;        RoadBizUtil.messageCollector.appendMessage(BizFailure.create(message));&#xA;&#xA;    }&#xA;    private static Logger LOGGER = Logger.getLogger(MATCheckBookingFreightKind.class);&#xA;&#xA;}" />
<extension name="MATCollapseAutoFrame" scope="MATSON/ALASKA" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2016 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;&#xA;import com.navis.argo.business.atoms.DataSourceEnum&#xA;import com.navis.argo.business.atoms.FreightKindEnum&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;/**&#xA; * When an Auto rack is stripped the frame is collapsed.&#xA; *&#xA; * Peter Seiler&#xA; *&#xA; * Date: 02/08/2016&#xA; * JIRA: CSDV-3208&#xA; * SFDC:&#xA; *&#xA; * Called from: General Notices for user-created event COLLAPSE AUTO FRAME&#xA; *&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; *&#xA; * Peter Seiler&#xA; *&#xA; * Date: 02/16/2016&#xA; *&#xA; * Fix the unit gross weight to be the tare weight.&#xA; *&#xA; */&#xA;class MATCollapseAutoFrame extends AbstractGeneralNoticeCodeExtension&#xA;{&#xA;    public void execute(GroovyEvent inGroovyEvent)&#xA;    {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot; MATCollapseAutoFrame execute Started.&quot;);&#xA;&#xA;        if (inGroovyEvent == null)&#xA;            return;&#xA;&#xA;        Event thisEvent = inGroovyEvent.getEvent();&#xA;&#xA;        if (thisEvent == null)&#xA;            return;&#xA;&#xA;        /* Get the unit */&#xA;&#xA;        Unit ThisUnit = (Unit) inGroovyEvent.getEntity();&#xA;&#xA;        if (ThisUnit == null)&#xA;            return;&#xA;&#xA;        /* it has to be empty */&#xA;&#xA;        if (ThisUnit.getUnitFreightKind() != FreightKindEnum.MTY)&#xA;            return;&#xA;&#xA;        /* get the unit equipment */&#xA;&#xA;        UnitEquipment ThisUE = ThisUnit.getUnitPrimaryUe();&#xA;&#xA;        if(ThisUE == null)&#xA;            return;&#xA;&#xA;        Equipment ThisEquip = ThisUE.getUeEquipment();&#xA;&#xA;        if(ThisEquip == null)&#xA;            return;&#xA;&#xA;        /* if the height is not 8'6&quot; set it to 8'6&quot; */&#xA;&#xA;        if (ThisEquip.eqHeightMm != 2591)&#xA;        {&#xA;            ThisEquip.upgradeEqHeight((Long) 2591, DataSourceEnum.USER_LCL)&#xA;        }&#xA;&#xA;        if (ThisUnit.getUnitGoodsAndCtrWtKg() != ThisEquip.getEqTareWeightKg() &amp;&amp; ThisEquip.getEqTareWeightKg() &gt; 0)&#xA;        {&#xA;&#xA;            /* if the unit gross weight is not the tare weight set the unit gross = to equipment tare */&#xA;&#xA;            ThisUnit.updateGoodsAndCtrWtKg(ThisEquip.getEqTareWeightKg());&#xA;        }&#xA;    }&#xA;    private Logger LOGGER = Logger.getLogger(MATCollapseAutoFrame.class);&#xA;}" />
<extension name="MATGateReeferTemp" scope="MATSON/ALASKA" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA;*  Change   Changer  Date       Desc&#xA;*  A1       GR       12/16/11   Updated Reefer Variable for navis case#89220&#xA;*  A2       GR       02/17/12   TOS2.1 : Updt Field unitFlexString07 to UfvFlexString07&#xA;*  A3       LC       07/20/12   Create Temp discrepancy report on Dray-In&#xA;*  A4       LC       04/16/13   Check for the Receive Export Ingate, copies booking req temp to unit req temp&#xA;*  A5       LC       09/25/13   Get the trans booking temp required&#xA;*  A6       PS       07/30/15   Change to code extension.  Implement for Alaska.  Add KFF logic&#xA;*  A7       Bruno Chiarini 27-Sep-2015 Added AMB logic, added comments, reorganized code&#xA;*  A8       Bruno Chiarini 23-Oct-2015 Removed validation. Code is now used only to retrieve values from booking and&#xA;*                                       apply to unit in transaction.&#xA;*/&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.atoms.EquipRfrTypeEnum&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.argo.business.reference.EquipGrade&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.metafields.Metafield&#xA;import com.navis.framework.metafields.MetafieldId&#xA;import com.navis.framework.metafields.MetafieldIdFactory&#xA;import com.navis.framework.util.internationalization.ITranslationContext&#xA;import com.navis.framework.util.internationalization.PropertyKey&#xA;import com.navis.framework.util.internationalization.PropertyKeyFactory&#xA;import com.navis.framework.util.internationalization.TranslationUtils&#xA;import com.navis.framework.util.message.MessageLevel&#xA;import com.navis.inventory.business.units.EquipmentState&#xA;import com.navis.inventory.business.units.GoodsBase&#xA;import com.navis.inventory.business.units.ReeferRqmnts&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.orders.business.eqorders.EquipmentOrder&#xA;import com.navis.orders.business.eqorders.EquipmentOrderItem&#xA;import com.navis.road.RoadPropertyKeys&#xA;import com.navis.road.business.atoms.TranSubTypeEnum&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import org.apache.commons.lang.StringUtils&#xA;&#xA;&#xA;/**&#xA; * Validates and applies the reefer temperature entered in the gate screen.&#xA; * The reefer temperature is captured in a unit flex field.&#xA; * The validation rules will result in an error if any of the conditions below is true:&#xA; * 1) Any Unit with KFF&#xA; * 2) Any Unit with AMB&#xA; * 3) Non-reefer with temp. entered&#xA; * 4) Reefer equipment and reefer temperature is not entered.&#xA; *&#xA; * Date: Aug. 14, 2015&#xA; * Peter Seiler (A6)&#xA; * SFDC: 142197&#xA; * JIRA: CSDV-3161&#xA; *&#xA; */&#xA;&#xA;public class MATGateReeferTemp extends AbstractGateTaskInterceptor implements EGateTaskInterceptor //A6&#xA;{&#xA;    // These properties defined in the resource bundle&#xA;&#xA;    public static String BEAN_ID = &quot;applyReeferTempToTranTempSetting&quot;&#xA;    // {0} translated field name&#xA;    // {1} equipment type&#xA;    public static PropertyKey REEFER_TEMP_NOT_ALLOWED = PropertyKeyFactory.valueOf(&quot;gate.reefer_temp_not_allowed&quot;)&#xA;    // {0} translated field name&#xA;    // {1} equipment type&#xA;    public static PropertyKey REEFER_TEMP_REQUIRED = PropertyKeyFactory.valueOf(&quot;gate.reefer_temp_required&quot;)&#xA;    // {0} translated field name&#xA;    public static PropertyKey REEFER_TEMP_INVALID = PropertyKeyFactory.valueOf(&quot;gate.reefer_temp_invalid&quot;)&#xA;&#xA;    public static String REEFER_TEMP_FLEX_FIELD = &quot;ufvFlexString07&quot; //A2&#xA;    public static String AMB_REEFER_TEMP_STRING = &quot;AMB&quot;&#xA;    public static String KFF_REEFER_TEMP_STRING = &quot;KFF&quot;&#xA;    public static String DUAL_REEFER_TEMP_STRING = &quot;DUAL&quot;//A6&#xA;    public static PropertyKey BOOKING_REQUIRES_KFF = PropertyKeyFactory.valueOf(&quot;gate.keep_from_freezing_required&quot;)//A6&#xA;    // {1} booking number&#xA;    public static PropertyKey BOOKING_REQUIRES_AMB = PropertyKeyFactory.valueOf(&quot;gate.ambient_required&quot;)  //A7&#xA;    // {1} booking number&#xA;&#xA;    public void execute(TransactionAndVisitHolder dao)&#xA;    {&#xA;&#xA;        TruckTransaction tran = dao.tran;&#xA;        Container container = tran.tranContainer;&#xA;&#xA;        // No container, exit&#xA;        if (container == null) {&#xA;            return&#xA;        }&#xA;&#xA;        EquipRfrTypeEnum rfrType = container.eqRfrType;&#xA;        String fieldValue = tran.getFieldString(getFlexFieldMetafieldId(REEFER_TEMP_FLEX_FIELD));&#xA;        String fieldName = getFlexFieldTranslatedName(REEFER_TEMP_FLEX_FIELD);&#xA;        String eqTypeId = container.eqEquipType.eqtypId&#xA;        String ctrNbr = tran.getTranCtrNbr();   //A6&#xA;        String dest = tran.getTranDestination();   //A6&#xA;&#xA;        // GET BOOKING TEMP REQUIREMENTS (STORED IN BOOKING ITEM REMARKS)&#xA;        EquipmentOrderItem ThisEQOI = tran.getTranEqoItem();&#xA;        String bkItemRemarks = &quot;&quot;;&#xA;        if (ThisEQOI != null)&#xA;        {&#xA;            bkItemRemarks = ThisEQOI.getEqoiRemarks();&#xA;            if (bkItemRemarks == null || bkItemRemarks.length() == 0) {&#xA;                bkItemRemarks = &quot;&quot;;&#xA;            }&#xA;        }&#xA;&#xA;        fieldValue = bkItemRemarks;                 // A8&#xA;        tran.setTranUfvFlexString07(bkItemRemarks); // A8&#xA;&#xA;        this.log(&quot;Booking Item Remarks: [&quot; + bkItemRemarks + &quot;]&quot;);&#xA;&#xA;        // CASE 1: ANY UNIT (REEFER OR NON-REEFER) WITH KFF SETTING&#xA;        if (bkItemRemarks == KFF_REEFER_TEMP_STRING)    //Booking says it should be a KF&#xA;        {&#xA;//            if (fieldValue != KFF_REEFER_TEMP_STRING )   //but field value in gate doesn't match&#xA;//            {&#xA;//                EquipmentOrder ThisEQO = tran.getTranEqo(); //Booking Number&#xA;//                RoadBizUtil.appendMessage(MessageLevel.SEVERE, BOOKING_REQUIRES_KFF, fieldName, ThisEQO.getEqboNbr());  //A6&#xA;//            }&#xA;            return;&#xA;        }&#xA;&#xA;        // CASE 2: ANY UNIT (REEFER OR NON-REEFER) WITH AMB SETTING&#xA;        if (bkItemRemarks == AMB_REEFER_TEMP_STRING)     //Booking says it should be an AMB&#xA;        {&#xA;//            if (fieldValue != AMB_REEFER_TEMP_STRING )  //but field value in gate doesn't match&#xA;//            {&#xA;//                EquipmentOrder ThisEQO = tran.getTranEqo(); //Booking Number&#xA;//                RoadBizUtil.appendMessage(MessageLevel.SEVERE, BOOKING_REQUIRES_AMB, fieldName, ThisEQO.getEqboNbr());  //A6&#xA;//            }&#xA;            return;&#xA;        }&#xA;&#xA;        // CASE 3: NON-REEFER WITH TEMP SETTING ENTERED (NOT AMB or KFF)&#xA;        if (EquipRfrTypeEnum.NON_RFR.equals(rfrType))&#xA;        {&#xA;            //Unit is not a reefer, check if there's a temp.&#xA;            if (StringUtils.isNotEmpty(fieldValue))&#xA;            {&#xA;                RoadBizUtil.appendMessage(MessageLevel.SEVERE, REEFER_TEMP_NOT_ALLOWED, fieldName, eqTypeId);&#xA;            }&#xA;            return;&#xA;        }&#xA;&#xA;        // CASE 4: Reefer equipment types must have a value in the &quot;Reefer Temp&quot; flex field.&#xA;        if (!EquipRfrTypeEnum.NON_RFR.equals(rfrType)       //It's a reefer&#xA;                &amp;&amp; StringUtils.isEmpty(fieldValue))         //and Temp field in gate is empty&#xA;        {&#xA;            RoadBizUtil.appendMessage(MessageLevel.SEVERE, REEFER_TEMP_REQUIRED, fieldName, eqTypeId, bkItemRemarks);&#xA;            return;&#xA;        }&#xA;&#xA;        Unit unit = tran.getTranUnit();&#xA;        if (unit != null) {&#xA;            UnitEquipment unitEquipment = unit.getUnitPrimaryUe();&#xA;            EquipmentState eqs = unitEquipment.getUeEquipmentState();&#xA;            if (eqs != null ){&#xA;                EquipGrade equipGrade = eqs.getEqsGradeID();&#xA;                Boolean isDualBooking = bkItemRemarks!= null &amp;&amp; bkItemRemarks.toUpperCase().contains(DUAL_REEFER_TEMP_STRING);&#xA;                Boolean isDualCtr = equipGrade!= null &amp;&amp; (DT.equals(equipGrade.getEqgrdId()))&#xA;                if (isDualCtr) {&#xA;                    if (!isDualBooking) {&#xA;                        RoadBizUtil.appendMessage(MessageLevel.SEVERE, RoadPropertyKeys.GATE__USER_MESSAGE_3,&#xA;                                &quot;Cannot receive an Unit of dual temperature grade against this booking with single or no temperature&quot;, null);&#xA;                        return;&#xA;                    }&#xA;                } else&#xA;                if (isDualBooking)&#xA;                {&#xA;                    RoadBizUtil.appendMessage(MessageLevel.SEVERE, RoadPropertyKeys.GATE__USER_MESSAGE_2,&#xA;                            &quot;Unit not of type dual temp, cannot be received against this booking&quot;, null);&#xA;                    return;&#xA;                }&#xA;            }&#xA;        }&#xA;        // Reefer equipment type and non-empty temp value.&#xA;&#xA;        Double reefer1TempC = 0.0;  //A6&#xA;        Double reefer1TempF = 0.0;  //A6&#xA;        Double reefer2TempC = null;  //A6&#xA;        Double reefer2TempF = null;  //A6&#xA;&#xA;        /* parse out both reefer temperatures */&#xA;&#xA;        String Temp1Txt = null;  //A6&#xA;        String Temp2Txt = null;  //A6&#xA;&#xA;        /* find if there is a slash in the string */&#xA;&#xA;        int SlashPos = fieldValue.indexOf('/');  //A6&#xA;&#xA;        if (SlashPos == -1)  //A6&#xA;        {&#xA;            /* there is no slash assume only the first temperature is specified. */&#xA;            Temp1Txt = fieldValue;  //A6&#xA;        }&#xA;        else&#xA;        {&#xA;            /* two temperature were entered parse them both */&#xA;//            Temp1Txt = fieldValue[0 .. SlashPos-1];  //A6&#xA;//            Temp2Txt = fieldValue[SlashPos+1 .. value.length()-1];  //A6&#xA;&#xA;            def tokens = fieldValue.split('/'); //A8&#xA;            Temp1Txt = tokens[1];&#xA;            Temp2Txt = tokens[2];&#xA;            log(&quot;Temp1Txt----&gt;&quot;+Temp1Txt);&#xA;            log(&quot;Temp2Txt----&gt;&quot;+Temp2Txt);&#xA;        }&#xA;&#xA;&#xA;        // Parse and convert temp 1&#xA;        try  //A6&#xA;        {&#xA;            /* convert the first entry to numeric */&#xA;            reefer1TempF = Double.parseDouble(Temp1Txt);  //A6&#xA;            reefer1TempC = this.fahrenheitToCelsius(reefer1TempF);  //A6&#xA;&#xA;            // if dual temp, parse and convert temp 2&#xA;            if (Temp2Txt != null)&#xA;            {&#xA;                reefer2TempF = Double.parseDouble(Temp2Txt);    //A6&#xA;                reefer2TempC = this.fahrenheitToCelsius(reefer2TempF);  //A6&#xA;            }&#xA;        }&#xA;        catch (Exception e)&#xA;        {&#xA;            RoadBizUtil.appendMessage(MessageLevel.SEVERE, REEFER_TEMP_INVALID, fieldName);&#xA;            this.log(&quot;Exception parsing temperatures: &quot; + e);&#xA;            return;&#xA;        }&#xA;&#xA;        //gvyApi.logWarn(&quot;reeferTempC:&quot;+reeferTempC);&#xA;        //gvyApi.logWarn(&quot;reeferTempF:&quot;+reeferTempF);&#xA;        // Copy the temp value entered to the tranTempSetting field on the transaction so that CreateContainerVisit&#xA;        // will create a ReeferRecord&#xA;        // with this value in the rfrecSetPointTmp field.&#xA;        TranSubTypeEnum tranType = tran.getTranSubType(); //A1&#xA;        //For DrayIn Set TempRequired for RE set TempSetting&#xA;        if(TranSubTypeEnum.RI.equals(tranType)){&#xA;            unit = tran.getTranUnit();&#xA;            //gets the unit temp to check for temp discrepancy&#xA;            if (unit != null &amp;&amp; unit.getUnitGoods() != null &amp;&amp; unit.getUnitGoods().getGdsReeferRqmnts() != null)&#xA;            {&#xA;                Double tempRequiredC = unit.getUnitGoods().getGdsReeferRqmnts().getRfreqTempRequiredC();&#xA;                Double tempRequiredF = this.celsiusToFahrenheit(tempRequiredC);&#xA;&#xA;                def blNbr = unit.getUnitGoods().getGdsBlNbr();  //A6&#xA;                int comparisonVal = 0;&#xA;                unit.updateRequiresPower(true); //A8&#xA;&#xA;                //if (tempRequiredF != null &amp;&amp; (tempRequiredF.compareTo(reefer1TempF)!= 0)) {&#xA;                //    log(&quot;Sending email to notify discrepancy in temperature&quot;);&#xA;                // }&#xA;            }&#xA;            tran.tranTempRequired = reefer1TempC;  //A6&#xA;        }&#xA;        else&#xA;        {&#xA;            tran.tranTempSetting = reefer1TempC;  //A6&#xA;&#xA;            if(TranSubTypeEnum.RE.equals(tranType)){&#xA;                //for RE - copy unit's booking temp required&#xA;                def tranBooking;&#xA;                def tranBookingTemp;&#xA;                if(tran != null &amp;&amp; tran.getTranEqoItem()!=null)  {&#xA;                    tranBooking = tran.getTranEqoNbr();  //get the booking number at the ingate&#xA;                    log(&quot;Booking Number:&quot;+tranBooking);&#xA;                    tranBookingTemp = tran.getTranEqoItem().getEqoiTempRequired(); //get the temp req from booking&#xA;                    log(&quot;tranTempRequired----&gt;&quot;+tranBookingTemp);&#xA;                    log(&quot;Booking Item Remarks (temp setting): &quot; + bkItemRemarks);&#xA;                }&#xA;                tran.tranTempRequired =  tranBookingTemp;&#xA;&#xA;                /* set the unit's temperatures to be the values entered */&#xA;&#xA;                GoodsBase ThisUnitGoods = null;  //A6&#xA;                ReeferRqmnts ThisReeferReq = null;  //A6&#xA;&#xA;                Unit ThisUnit = tran.getTranUnit();  //A6&#xA;                if (ThisUnit != null)  //A6&#xA;                {&#xA;                    ThisUnitGoods = ThisUnit.getUnitGoods();  //A6&#xA;                    ThisUnit.updateRequiresPower(true); //A8&#xA;                }&#xA;                if (ThisUnitGoods != null)  //A6&#xA;                {&#xA;                    ThisReeferReq = ThisUnitGoods.getGdsReeferRqmnts();  //A6&#xA;                }&#xA;                // if not temp is set then use the temp in the gate&#xA;                if (ThisReeferReq != null)  //A6&#xA;                {&#xA;                    ThisReeferReq.setRfreqTempRequiredC(reefer1TempC);  //A6&#xA;                    ThisReeferReq.setRfreqTempLimitMinC(reefer1TempC);  //A6&#xA;                    ThisReeferReq.setRfreqTempLimitMaxC(reefer2TempC);  //A6&#xA;                }&#xA;            }&#xA;        }&#xA;        /* Execute the built-in logic got the business task. */&#xA;        executeInternal(dao); //A6&#xA;    }&#xA;&#xA;    // Returns the MetafieldId of the flex field on the truck transaction.&#xA;    private MetafieldId getFlexFieldMetafieldId(String idString) {&#xA;        MetafieldIdFactory.valueOf(&quot;tran${idString[0].toUpperCase()}${idString[1..-1]}&quot;)&#xA;    }&#xA;&#xA;    // Returns the user-friendly name for the flex field.&#xA;    private String getFlexFieldTranslatedName(String idString) {&#xA;        MetafieldId fieldId = MetafieldIdFactory.valueOf(idString)&#xA;        ITranslationContext translator = TranslationUtils.getTranslationContext(ContextHelper.getThreadUserContext())&#xA;        Metafield metafield = translator.getIMetafieldDictionary().findMetafield(fieldId)&#xA;&#xA;        return translator.getMessageTranslator().getMessage(metafield.getLongLabelKey())&#xA;    }&#xA;&#xA;    private Double fahrenheitToCelsius(Double fahrenheit)&#xA;    {&#xA;        Double result = (fahrenheit - 32) * 5.0/9;&#xA;        return result;&#xA;    }&#xA;&#xA;    private Double celsiusToFahrenheit(Double celsius)&#xA;    {&#xA;        Double result = (celsius * 9.0/5) + 32;&#xA;        return result;&#xA;    }&#xA;    private String DT = &quot;DT&quot;;&#xA;    private String DV = &quot;DV&quot;;&#xA;&#xA;}&#xA;" />
<extension name="MATCallTransloadStrip" scope="MATSON/ALASKA" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="package codeExtensions&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.api.ServicesManager&#xA;import com.navis.argo.business.model.N4EntityScoper&#xA;import com.navis.argo.portal.context.ArgoUserContextProvider&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.persistence.hibernate.CarinaPersistenceCallback&#xA;import com.navis.framework.persistence.hibernate.PersistenceTemplate&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.portal.context.IUserContextProvider&#xA;import com.navis.framework.portal.context.PortalApplicationContext&#xA;import com.navis.framework.util.TransactionParms&#xA;import com.navis.framework.util.message.MessageCollector&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.services.business.rules.EventType&#xA;&#xA;&#xA;/**&#xA; * Created by VNatesan on 7/19/2016.&#xA; * Purpose of this class is to create event for strip during transload  funtionality&#xA; */&#xA;class MATCallTransloadStrip extends AbstractGeneralNoticeCodeExtension{&#xA;&#xA;    private ServicesManager _sm = (ServicesManager) Roastery.getBean(ServicesManager.BEAN_ID);&#xA;&#xA;    public void execute(GroovyEvent inEvent){&#xA;&#xA;        this.log(&quot;Execution Started MATCallTransloadStrip&quot;);&#xA;        //get the event&#xA;        Event thisEvent = inEvent.getEvent();&#xA;        GroovyApi groovyApi = new GroovyApi();&#xA;        if (thisEvent == null) {&#xA;            return;&#xA;        }&#xA;        //get the Unit&#xA;        def unit =  inEvent.getEntity();&#xA;        if (unit == null) {&#xA;            return;&#xA;        }&#xA;&#xA;        Set fieldChanges = thisEvent.getEvntFieldChanges();&#xA;        final UserContext userContext = ContextHelper.getThreadUserContext();&#xA;        PersistenceTemplate template = new PersistenceTemplate(userContext);&#xA;        MessageCollector mc = template.invoke(new CarinaPersistenceCallback() {&#xA;            @Override&#xA;            protected void doInTransaction() {&#xA;                try {&#xA;                    TransactionParms.getBoundParms().setUserContext(userContext);&#xA;                    String evnt= &quot;UNIT_STRIP&quot;;&#xA;                    EventType event = EventType.findEventType(evnt);&#xA;                    if (event != null &amp;&amp; !_sm.hasEventTypeBeenRecorded(event, unit)) {&#xA;                        Date eventTime = new Date(System.currentTimeMillis());&#xA;                        _sm.recordEvent(event, &quot;sending unit strip &quot;, null, null, unit, (FieldChanges) null, eventTime);&#xA;                        }&#xA;&#xA;                }&#xA;                finally {&#xA;                    // restore original user context&#xA;                    TransactionParms.getBoundParms().setUserContext(userContext);&#xA;                }&#xA;            }&#xA;        });&#xA;    }&#xA;}&#xA;" />
<extension name="MATClearGenSetRouting" scope="MATSON/ALASKA" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2016 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;package com.navis.road.business.adaptor.document&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.atoms.EquipClassEnum&#xA;import com.navis.argo.business.atoms.FreightKindEnum&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.argo.business.model.CarrierVisit&#xA;import com.navis.argo.business.reference.Equipment&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.inventory.business.units.Routing&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitEquipment&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;/**&#xA; * When an accessory is detached from a unit the accessory's routing has to be cleared&#xA; *&#xA; * Peter Seiler&#xA; *&#xA; * Date: 02/08/2016&#xA; * JIRA: ARGO-87850&#xA; * SFDC: 150401&#xA; *&#xA; * Called from: General Notices for event Unit_Acivate if unit is for bare accessory&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;class MATClearGenSetRouting extends AbstractGeneralNoticeCodeExtension&#xA;{&#xA;    public void execute(GroovyEvent inGroovyEvent)&#xA;    {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot; MATClearGenSetRouting execute Started.&quot;);&#xA;&#xA;        if (inGroovyEvent == null)&#xA;            return;&#xA;&#xA;        Event thisEvent = inGroovyEvent.getEvent();&#xA;&#xA;        if (thisEvent == null)&#xA;            return;&#xA;&#xA;        /* Get the unit */&#xA;&#xA;        Unit ThisUnit = (Unit) inGroovyEvent.getEntity();&#xA;&#xA;        if (ThisUnit == null)&#xA;            return;&#xA;&#xA;        UnitFacilityVisit ThisUFV = ThisUnit.getUnitActiveUfvNowActive();&#xA;&#xA;        if (ThisUFV == null)&#xA;            return;&#xA;&#xA;        /* check if the unit is for a bare accessory */&#xA;&#xA;        UnitEquipment ThisUE = ThisUnit.getUnitPrimaryUe();&#xA;&#xA;        if(ThisUE == null)&#xA;            return;&#xA;&#xA;        Equipment ThisEquip = ThisUE.getUeEquipment();&#xA;&#xA;        if(ThisEquip == null)&#xA;            return;&#xA;&#xA;        if (ThisEquip.getEqClass() == EquipClassEnum.ACCESSORY)&#xA;        {&#xA;            /* the uit being activated is for a bare accessory.  Clear the routig details */&#xA;&#xA;            ThisUnit.updateCategory(UnitCategoryEnum.STORAGE);&#xA;            ThisUnit.updateFreightKind(FreightKindEnum.MTY);&#xA;&#xA;            CarrierVisit GenTruck = CarrierVisit.getGenericTruckVisit(ContextHelper.getThreadComplex());&#xA;&#xA;            ThisUnit.updateDeclaredIbCv(GenTruck);&#xA;&#xA;            Routing newRouting = ThisUnit.getUnitRouting();&#xA;&#xA;            newRouting.setRtgDeclaredCv(GenTruck);&#xA;&#xA;            ThisUnit.setUnitRouting(newRouting);&#xA;&#xA;            ThisUFV.updateActualIbCv(GenTruck);&#xA;            ThisUFV.updateObCv(GenTruck);&#xA;        }&#xA;    }&#xA;    private Logger LOGGER = Logger.getLogger(MATClearGenSetRouting.class);&#xA;}" />
<extension name="MatMassUpdateYardPositionExt" scope="MATSON/ALASKA/ANK" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="import com.navis.argo.ContextHelper;&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension;&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.portal.BizRequest&#xA;import com.navis.framework.portal.BizResponse&#xA;import com.navis.framework.portal.CrudOperation&#xA;import com.navis.framework.portal.FieldChange&#xA;import com.navis.framework.portal.FieldChanges;&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.util.message.MessageCollector&#xA;import com.navis.inventory.InventoryBizMetafield&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.business.InventoryFacade;&#xA;import com.navis.inventory.business.api.UnitManager&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;&#xA;import com.navis.security.business.user.BaseUser&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import org.apache.log4j.Logger;&#xA;&#xA;public class MatMassUpdateYardPositionExt extends AbstractGeneralNoticeCodeExtension {&#xA;    public void execute(GroovyEvent inEvent) {&#xA;        GroovyApi api = new GroovyApi();&#xA;        Event thisEvent = inEvent.getEvent();&#xA;        MessageCollector collector = getMessageCollector();&#xA;&#xA;        if (thisEvent == null)&#xA;            return;&#xA;&#xA;        Unit inUnit = (Unit) inEvent.getEntity();&#xA;&#xA;        if (inUnit == null)&#xA;            return;&#xA;&#xA;        this.log(&quot;UPDATE POSITION executed for &quot;+inUnit.getUnitId());&#xA;        String inSlot = thisEvent.getEvntNote();&#xA;        this.log(&quot;Updating Position for : &quot;+inUnit.getUnitId() +&quot; with postion &lt;&lt;&quot;+thisEvent.getEvntNote()+&quot;&gt;&gt;&quot;);&#xA;        if (inUnit != null &amp;&amp; inSlot != null) {&#xA;            UnitFacilityVisit ufv = inUnit.getUfvForFacilityLiveOnly(ContextHelper.getThreadFacility());&#xA;            if (ufv!= null ) {&#xA;                UnitManager unitManager = (UnitManager) Roastery.getBean(UnitManager.BEAN_ID);&#xA;                try {&#xA;                    BizRequest request = new BizRequest(getUserContext());&#xA;                    Serializable[] ufvGkeys = new Serializable[1];&#xA;                    ufvGkeys[0] = ufv.getUfvGkey();&#xA;                    FieldChanges fieldChanges = new FieldChanges();&#xA;&#xA;                    FieldChange change = new FieldChange(InventoryBizMetafield.UNIT_DIGITS, inUnit.getUnitId());&#xA;                    fieldChanges.setFieldChange(change);&#xA;&#xA;                    change = new FieldChange(InventoryBizMetafield.UNIT_YARD_SLOT, thisEvent.getEvntNote());&#xA;                    fieldChanges.setFieldChange(change);&#xA;                    CrudOperation crud = new CrudOperation(null, CrudOperation.TASK_UPDATE, InventoryEntity.UNIT_FACILITY_VISIT, fieldChanges, ufvGkeys);&#xA;                    request.addCrudOperation(crud);&#xA;                    BizResponse response = new BizResponse();&#xA;                    INVENTORY_FACADE.recordYardMove(request, response);&#xA;                    collector.getMessages().addAll(response.getMessages());&#xA;                    this.log(&quot;Position updated for &quot;+ inUnit.getUnitId());&#xA;&#xA;                    //unitManager.recordUnitYardMove(ufv, inSlot, (String) null);&#xA;                } catch (BizViolation bizViolation) {&#xA;                    this.log(&quot;Cannot record yard move &quot;+bizViolation.toString());&#xA;                    String userId = ContextHelper.getThreadUserId();&#xA;                    String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;                    if (userId!= null) {&#xA;                        BaseUser baseUser = BaseUser.findBaseUser(userId);&#xA;                        if (baseUser!= null &amp;&amp; baseUser.getBuserEMail()!=null) {&#xA;                            emailTo = baseUser.getBuserEMail();&#xA;                        }&#xA;                    }&#xA;                    api.sendEmail(emailTo, emailTo,&quot;Test Update Position Failed&quot;, &quot; Update of position failed for unit &quot;+ufv.getUfvUnit().getUnitId() +&quot; with error&quot;+bizViolation.toString());&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;    private static InventoryFacade INVENTORY_FACADE = (InventoryFacade) Roastery.getBean(InventoryFacade.BEAN_ID);&#xA;&#xA;}&#xA;" />
<extension name="MATSetCtrAndLineOperator" scope="MATSON/ALASKA" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="import com.navis.argo.ArgoField&#xA;import com.navis.argo.ArgoRefField;&#xA;import com.navis.argo.ContextHelper;&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.argo.business.atoms.BizRoleEnum;&#xA;import com.navis.argo.business.atoms.DataSourceEnum&#xA;import com.navis.argo.business.reference.Container;&#xA;import com.navis.argo.business.reference.LineOperator;&#xA;import com.navis.argo.business.reference.ScopedBizUnit;&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.inventory.business.units.*&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.road.business.atoms.TranSubTypeEnum&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;/**&#xA; * This groovy set the unit line operator and container operator to either MAE or APL, while receiving empty&#xA; */&#xA;&#xA;public class MATSetCtrAndLineOperator extends AbstractGateTaskInterceptor implements EGateTaskInterceptor&#xA;&#xA;{&#xA;    public void execute(TransactionAndVisitHolder inDao)&#xA;&#xA;    {&#xA;        this.log(&quot;Execution Started MATSetCtrAnLineOperator&quot;);&#xA;        /* check various components of the gate transaction to insure everything needed is present. */&#xA;&#xA;        if (inDao == null)&#xA;            return;&#xA;&#xA;        TruckTransaction ThisTran = inDao.getTran();&#xA;&#xA;        if (ThisTran == null)&#xA;            return;&#xA;&#xA;        /* Execute the built-in logic got the business task. */&#xA;&#xA;        executeInternal(inDao);&#xA;&#xA;        /* set the unit priority stow code to the booking stow block */&#xA;&#xA;        Unit ThisUnit = ThisTran.getTranUnit();&#xA;&#xA;        /* for RM transactions set OB routing if VV/POD specified */&#xA;        if (TranSubTypeEnum.RM.equals(ThisTran.getTranSubType())&#xA;                &amp;&amp; ThisTran.getTranCtrOwnerId() != null &amp;&amp; (&quot;APLU&quot;.equalsIgnoreCase(ThisTran.getTranCtrOwnerId()) ||&#xA;                &quot;MAEU&quot;.equalsIgnoreCase(ThisTran.getTranCtrOwnerId())) &amp;&amp; ThisTran.getTranEqo() == null) {&#xA;            String operatorId=&quot;MAE&quot;;&#xA;            if (&quot;APLU&quot;.equalsIgnoreCase(ThisTran.getTranCtrOwnerId())) {&#xA;                operatorId = &quot;APL&quot;;&#xA;            }&#xA;            LineOperator lineOperator = LineOperator.findLineOperatorById(operatorId);&#xA;            this.log(&quot;Tran Eqo Nbr String : &quot;+ThisTran.getTranEqoNbr());&#xA;            this.log(&quot;Tran Eqo Nbr : &quot;+ThisTran.getTranEqo());&#xA;            this.log(&quot;Tran VV : &quot;+ThisTran.getTranCarrierVisit());&#xA;            if (ThisTran.getTranEqoNbr() == null &amp;&amp; ThisTran.getTranCarrierVisit() == null) {&#xA;                if (lineOperator != null) {&#xA;                    ThisTran.setTranLine(lineOperator);&#xA;                    ThisTran.setTranLineId(operatorId);&#xA;                    ThisTran.setTranCtrOperator(lineOperator);&#xA;                    EquipmentState equipmentState = EquipmentState.findEquipmentState(ThisTran.getTranContainer(), ContextHelper.getThreadOperator());&#xA;                    if (equipmentState != null) {&#xA;                        equipmentState.setEqsFlexString01(&quot;CLI&quot;);&#xA;&#x9; // TODO REVERTED EQ OPERATOR FIX, HAVE TO PUT IT BACK AGAIN AFTER NAVIS TESTED&#xA;                        equipmentState.setEqsEqOperator(lineOperator);&#xA;                    }&#xA;                    //EquipmentState.upgradeEqOperator(ThisTran.getTranContainer(), lineOperator, DataSourceEnum.IN_GATE);&#xA;                    if (ThisUnit != null) {&#xA;                        ThisUnit.setUnitLineOperator(lineOperator);&#xA;                    }&#xA;&#xA;                    this.log(&quot;Operator updated to : &quot; + lineOperator.getBzuId());&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}" />
<extension name="MATHazmatHazardRefresh" scope="MATSON/ALASKA/ANK" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="/**&#xA; * Created by psethuraman on 4/26/2016.&#xA; */&#xA;&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.framework.AllOtherFrameworkPropertyKeys&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.inventory.InventoryPropertyKeys&#xA;import com.navis.inventory.business.atoms.UnitVisitStateEnum&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import org.apache.commons.io.IOUtils&#xA;&#xA;&#xA;public class MATHazmatHazardRefresh extends AbstractGeneralNoticeCodeExtension&#xA;&#xA;{&#xA;    public void execute(GroovyEvent inEvent) {&#xA;        this.log(&quot;Execution Started MATHazmatHazardRefresh&quot;);&#xA;        /* get the event */&#xA;        Event ThisEvent = inEvent.getEvent();&#xA;        if (ThisEvent == null)&#xA;            return;&#xA;        /* Get the unit and the Booking */&#xA;        Unit thisUnit = (Unit) inEvent.getEntity();&#xA;        String unitId = thisUnit.getUnitId();&#xA;        if (thisUnit != null) {&#xA;            String currentFacility = ContextHelper.getThreadFacility().getFcyId();&#xA;            UnitFacilityVisit thisUfv = thisUnit.getUnitActiveUfvNowActive();&#xA;            if (thisUfv != null) {&#xA;                String ufvFacility = thisUfv.getUfvFacility().getFcyId();&#xA;                if (currentFacility != null &amp;&amp; ufvFacility != null&#xA;                        &amp;&amp; currentFacility.equalsIgnoreCase(ufvFacility)) {&#xA;                    if (UnitVisitStateEnum.ACTIVE.equals(thisUfv.getUfvVisitState())) {&#xA;                        String transitState = thisUfv.getUfvTransitState().getKey().substring(4);&#xA;                        callTDPHazRefreshService(unitId, ufvFacility, transitState);&#xA;                    } else {&#xA;                        BizViolation.create(InventoryPropertyKeys.UNIT_IS_NOT_IN_THE_YARD, unitId);&#xA;                    }&#xA;                } else {&#xA;                    BizViolation.create(InventoryPropertyKeys.UNITS_NOT_ACTIVE_IN_FACILITY, unitId);&#xA;                }&#xA;            } else {&#xA;                BizViolation.create(InventoryPropertyKeys.UNITS__NOT_ACTIVE, unitId);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    private boolean callTDPHazRefreshService(String inUnitNbr, String facility, String transitState) throws Exception {&#xA;        this.log(&quot;Start of WS call&quot;);&#xA;        InputStream stream = null;&#xA;        try {&#xA;            //@todo configure the WS URL in General Reference&#xA;            GeneralReference genRef = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;RESTHAZTDP&quot;, &quot;URL&quot;);&#xA;            URL url = new URL(genRef.getRefValue1() + &quot;/hazmatinterface/refreshunithaz/?&quot;&#xA;                    + &quot;equipmentId=&quot; + inUnitNbr + &quot;&amp;facilityId=&quot;+ facility + &quot;&amp;transitState=&quot; + transitState);&#xA;&#xA;            this.log(&quot;TDP Haz Service URL : &quot; + url.toString());&#xA;            URLConnection connection = url.openConnection();&#xA;            this.log(&quot;Connection : &quot;+connection);&#xA;            stream = connection != null ? connection.getInputStream() : null;&#xA;            this.log(&quot;Stream : &quot;+stream);&#xA;            if (stream != null) {&#xA;                String StringFromInputStream = IOUtils.toString(stream, &quot;UTF-8&quot;);&#xA;                this.log(&quot;String format of stream : &quot;+StringFromInputStream);&#xA;            } else {&#xA;                RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                        &quot;No hazard record found from webservice for Unit:&quot; + inUnitNbr + &quot; in facility :&quot; + facility));&#xA;            }&#xA;        } catch (Exception e) {&#xA;            RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__SERVICE_NOT_AVAILABLE, null,&#xA;                    &quot; Haz Refresh Service call failed for :&quot; + inUnitNbr + &quot; in facility :&quot; + facility));&#xA;            return false;&#xA;        } finally {&#xA;            if (stream != null) {&#xA;                stream.close();&#xA;            }&#xA;        }&#xA;        this.log(&quot;End of WS call&quot;);&#xA;        return true;&#xA;    }&#xA;}&#xA;" />
<extension name="MatGvyHideAdvisedContainer" scope="MATSON/ALASKA/ANK" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.argo.business.atoms.UnitCategoryEnum&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;&#xA;/**&#xA; * Created by psethuraman on 10/4/2016.&#xA; */&#xA;class MatGvyHideAdvisedContainer extends AbstractGeneralNoticeCodeExtension {&#xA;&#xA;    /**&#xA;     * execute&#xA;     * @param inEvent&#xA;     */&#xA;    public void execute(GroovyEvent inEvent) {&#xA;&#xA;        GroovyApi api = new GroovyApi();&#xA;        Event thisEvent = inEvent.getEvent();&#xA;        if (thisEvent == null) {&#xA;            return;&#xA;        }&#xA;        this.log(&quot;Start Event ---:&quot; + thisEvent.getEventTypeId());&#xA;        if (!&quot;ANK&quot;.equals(ContextHelper.getThreadFacility().getFcyRoutingPoint().getPointId())) {&#xA;            return&#xA;        }&#xA;&#xA;        Unit unit = (Unit) inEvent.getEntity();&#xA;&#xA;        if (unit == null) {&#xA;            return;&#xA;        }&#xA;&#xA;         this.log(&quot; on Unit :&quot; + unit.getUnitId() + &quot; ---:&quot;)&#xA;&#xA;        if (!(UnitCategoryEnum.EXPORT.equals(unit.getUnitCategory())&#xA;                || UnitCategoryEnum.STORAGE.equals(unit.getUnitCategory()))) {&#xA;            return&#xA;        }&#xA;        UnitFacilityVisit ufv = unit.getUnitActiveUfvNowActive();&#xA;        if (ufv == null) {&#xA;            return&#xA;        }&#xA;&#xA;        if (!UfvTransitStateEnum.S20_INBOUND.equals(ufv.getUfvTransitState())) {&#xA;            return&#xA;        }&#xA;&#xA;        try {&#xA;            this.log(&quot;Updating visibility for : &quot;+unit.getUnitId());&#xA;            ufv.setFieldValue(InventoryField.UFV_VISIBLE_IN_SPARCS, Boolean.FALSE);&#xA;            HibernateApi.getInstance().flush();&#xA;            this.log(&quot;Updated visibility for : &quot;+unit.getUnitId());&#xA;        } catch (Exception e) {&#xA;            this.registerError(e.getMessage());&#xA;        }&#xA;        this.log(&quot;END Event ---:&quot; + thisEvent.getEventTypeId() + &quot; on Unit :&quot; + unit.getUnitId() + &quot; ---:&quot;)&#xA;    }&#xA;&#xA;}&#xA;&#xA;&#xA;" />
<extension name="HazmatUpdateNBSplit" scope="MATSON/ALASKA" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="N" contents="package codeExtensions&#xA;&#xA;import com.navis.argo.ArgoPropertyKeys&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.framework.util.BizFailure&#xA;import com.navis.inventory.InventoryField&#xA;import com.navis.inventory.business.atoms.HazardsNumberTypeEnum&#xA;import com.navis.inventory.business.imdg.HazardItem&#xA;import com.navis.inventory.business.imdg.Hazards&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.sun.jersey.api.client.Client&#xA;import com.sun.jersey.api.client.ClientResponse&#xA;import com.sun.jersey.api.client.WebResource&#xA;import com.sun.jersey.api.client.config.ClientConfig&#xA;import com.sun.jersey.api.client.config.DefaultClientConfig&#xA;import org.apache.log4j.Logger&#xA;import org.codehaus.jackson.map.ObjectMapper&#xA;import org.codehaus.jackson.type.TypeReference&#xA;&#xA;import javax.ws.rs.core.MediaType&#xA;&#xA;/**&#xA; * Created by kramachandran on 7/6/2016.&#xA; */&#xA;class HazmatUpdateNBSplit extends AbstractGeneralNoticeCodeExtension {&#xA;    public static final String SEPERATOR = &quot;/&quot;;&#xA;    private static Logger logger = Logger.getLogger(HazmatUpdateNBSplit.class);&#xA;    private String facility = null;&#xA;&#xA;    public String getDestinationBaseURL() {&#xA;        GeneralReference genRef = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;HAZMAT&quot;, &quot;URL&quot;);&#xA;        return genRef.getRefValue1();&#xA;    }&#xA;&#xA;    public void execute(GroovyEvent inGroovyEvent) throws BizFailure {&#xA;        this.log(&quot;Execution Started HazmatUpdateNBSplit&quot;);&#xA;        String inBillNo = &quot;&quot;;&#xA;        String inContainerNo = null;&#xA;        if (inGroovyEvent != null) {&#xA;            Event event = inGroovyEvent.getEvent();&#xA;            this.log(&quot;Found event : &quot; + event.getEvntEventType());&#xA;            if (event != null) {&#xA;                Unit unit = (Unit) inGroovyEvent.getEntity();&#xA;                if (unit != null) {&#xA;                    this.log(&quot;Found Unit : &quot; + unit.getUnitId());&#xA;                    inContainerNo = unit.getUnitId() != null &amp;&amp; unit.getUnitId().length() == 11 ? unit.getUnitId().subSequence(0, 10) : unit.getUnitId();&#xA;                    if (unit.getUnitGoods() != null) {&#xA;                        inBillNo = unit.getUnitGoods().getGdsBlNbr();&#xA;                        if (inBillNo != null) {&#xA;                            inBillNo = inBillNo.trim();&#xA;                            if (inBillNo.length() &gt; 7) {&#xA;                                inBillNo = inBillNo.substring(0, 7);&#xA;                            }&#xA;                        }&#xA;                    }&#xA;&#xA;                    this.log(&quot;Input paramters are \t BillNo : &quot; + inBillNo + &quot; Container No : &quot; + inContainerNo);&#xA;                    if (inBillNo == null &amp;&amp; inContainerNo == null) {&#xA;                        throw new BizFailure(&quot;No BL Number to retrieve Hazards : &quot; + unit.getUnitId());&#xA;                    }&#xA;                    ClientConfig clientConfig = new DefaultClientConfig();&#xA;                    Client client = Client.create(clientConfig);&#xA;                    //for usage with TDP app, add an method to construct the URI&#xA;                    //psethuraman : Changes to retrieve HAZMAT details for container&#xA;                    WebResource resource = null;&#xA;&#xA;                    /*if (inContainerNo != null) {&#xA;                        resource = client.resource(getDestinationBaseURL() + &quot;lclcontainer&quot; + SEPERATOR + inContainerNo);&#xA;                    } else*/ if (inBillNo != null) {&#xA;                        resource = client.resource(getDestinationBaseURL() + &quot;booking&quot; + SEPERATOR + inBillNo /*+ SEPERATOR + inConatinerNo*/);&#xA;                    }&#xA;                    ClientResponse response = resource != null ? resource.accept(MediaType.APPLICATION_JSON).get(ClientResponse.class) : null;&#xA;                    if (response == null || response.getStatus() != 200) {&#xA;                        this.log(&quot;Request failed&quot;);&#xA;                        this.log(response.toString());&#xA;                        throw new BizFailure(&quot;JSON response failed&quot; + response.toString());&#xA;                    } else {&#xA;                        this.log(&quot;Got Response from HAZMAT : &quot; + response.toString());&#xA;                        String hazmatString = response.getEntity(String.class);&#xA;                        this.log(&quot;the response from hazmat is &quot; + hazmatString);&#xA;                        if (hazmatString.length() &lt; 10) {&#xA;                            throw new BizFailure(&quot;JSON dont have necessary Data&quot;);&#xA;                        }&#xA;                        Collection&lt;Map&lt;String, Object&gt;&gt; hazmat = null;&#xA;                        try {&#xA;                            this.log(&quot;parsing json to java map - start&quot;);&#xA;                            hazmat = new ObjectMapper().readValue(hazmatString, new TypeReference&lt;Collection&lt;Map&lt;String, Object&gt;&gt;&gt;() {&#xA;                            });&#xA;&#xA;                        } catch (IOException e) {&#xA;                            this.log(&quot;Error thrown while parsing JSON to Object mapping : &quot; + hazmatString);&#xA;                            this.log(e.printStackTrace());&#xA;                            //logger.error(e);&#xA;                            throw new BizFailure(ArgoPropertyKeys.GROOVY_EXECUTION_FAILURE, e, hazmat);&#xA;                        }&#xA;                        this.log(&quot;parsing json to java map - complete&quot;);&#xA;                        Hazards hazards = null;&#xA;                        try {&#xA;                            Unit ThisUnit = (Unit) inGroovyEvent.getEntity();&#xA;                            if (ThisUnit == null) {&#xA;                                this.log(&quot;Reference to Unit not found!&quot;);&#xA;                                sendMailAndReturn(&quot;Reference to Unit not found!&quot;);&#xA;                            } else&#xA;                                this.log(&quot;Unit: &quot; + ThisUnit);&#xA;                            //ThisUnit.getUnitGoods().attachHazards(hazards);&#xA;&#xA;                            if (hazmat != null) {&#xA;                                Map&lt;String, List&lt;Object&gt;&gt; stringObjectMap = hazmat.iterator().next();&#xA;                                /*for (String s : stringObjectMap.keySet()) {&#xA;                                    //log(s + &quot;    &quot; + stringObjectMap.get(s).toString());&#xA;                                }&#xA;                                List&lt;Map&lt;String, Object&gt;&gt; hazardousCommodityLines = stringObjectMap.get(&quot;hazardousCommodityLines&quot;);&#xA;                                //log(hazardousCommodityLines.toString());&#xA;                                for (Map&lt;String, Object&gt; o : hazardousCommodityLines) {&#xA;                                    for (String s1 : o.keySet()) {&#xA;                                        log(o.get(s1).toString());&#xA;                                    }&#xA;                                }*/&#xA;                                this.log(&quot;Manipulating new Hazards&quot;);&#xA;                                Hazards newHazards = getHazardsFromMap(stringObjectMap, ThisUnit.getUnitGoods().getGdsHazards()) as Hazards;&#xA;                                this.log(&quot;Received Hazards from the map&quot;);&#xA;                                this.log(newHazards.toString());&#xA;                                this.log(&quot;Start Clearing all Hazards&quot;);&#xA;                                ThisUnit.ensureGoods().clearHazardsRef();&#xA;                                this.log(&quot;Complete Clearing all Hazards&quot;);&#xA;                                this.log(&quot;Start - Attaching the hazards&quot; + newHazards.toString() + &quot; to Unit&quot; + ThisUnit.toString());&#xA;                                ThisUnit.attachHazards(newHazards);&#xA;                                this.log(&quot;Complete - Attaching the hazards&quot; + newHazards.toString() + &quot; to Unit&quot; + ThisUnit.toString());&#xA;                            }&#xA;                        }&#xA;                        catch (Exception ex) {&#xA;                            throw new BizFailure(ArgoPropertyKeys.GROOVY_EXECUTION_FAILURE, ex, hazmat);&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;        }&#xA;        this.log(&quot;Execution End HazmatUpdateNBSplit&quot;);&#xA;    }&#xA;&#xA;&#xA;    Hazards getHazardsFromMap(Map&lt;String, List&lt;Object&gt;&gt; inHazardsMap, Hazards inHazards) {&#xA;        this.log(&quot;creating new hazards&quot;);&#xA;        Hazards hazardsNew = Hazards.createHazardsEntity();&#xA;        this.log(&quot;creating new hazard item and adding to hazards&quot;);&#xA;        List&lt;Map&lt;String, Object&gt;&gt; hazardousCommodityLines = inHazardsMap.get(&quot;hazardousCommodityLines&quot;);&#xA;        for (Map&lt;String, Object&gt; o : hazardousCommodityLines) {&#xA;            hazardsNew.addHazardItem(getHazard(o));&#xA;            this.log(&quot;new hazard item added to hazard&quot;);&#xA;        }&#xA;        this.log(hazardsNew.toString());&#xA;        this.log(&quot;creating new hazards completed and returning to caller&quot;);&#xA;        return hazardsNew;&#xA;    }&#xA;&#xA;    private HazardItem getHazard(Map&lt;String, Object&gt; commodityLine) {&#xA;        HazardItem hazardItem = new HazardItem();&#xA;        this.log(&quot;creating new hazard item start : &quot;+commodityLine.get(&quot;hazPrimaryClass&quot;) +&quot;/&quot;);&#xA;        if (commodityLine.get(&quot;hazPrimaryClass&quot;) == null&#xA;                || &quot;&quot;.equals(commodityLine.get(&quot;hazPrimaryClass&quot;).toString().trim())&#xA;                || &quot;X&quot;.equalsIgnoreCase(commodityLine.get(&quot;hazPrimaryClass&quot;).toString().trim())) {&#xA;            hazardItem.setFieldValue(InventoryField.HZRDI_IMDG_CLASS, &quot;X&quot;);&#xA;        } else {&#xA;            hazardItem.setFieldValue(InventoryField.HZRDI_IMDG_CLASS, commodityLine.get(&quot;hazPrimaryClass&quot;));&#xA;        }&#xA;        //hazardItem.setFieldValue(InventoryField.HZRDI_IMDG_CODE, commodityLine.get(&quot;&quot;));&#xA;        HazardsNumberTypeEnum hazardsNumberTypeEnum = null;&#xA;        if (commodityLine.get(&quot;hazType&quot;) != null &amp;&amp; commodityLine.get(&quot;hazType&quot;).equals(&quot;UN&quot;))&#xA;            hazardsNumberTypeEnum = HazardsNumberTypeEnum.UN;&#xA;        else if (commodityLine.get(&quot;hazType&quot;) != null &amp;&amp; commodityLine.get(&quot;hazType&quot;).equals(&quot;NA&quot;))&#xA;            hazardsNumberTypeEnum = HazardsNumberTypeEnum.NA;&#xA;        hazardItem.setFieldValue(InventoryField.HZRDI_NBR_TYPE, hazardsNumberTypeEnum);&#xA;&#xA;        hazardItem.setFieldValue(InventoryField.HZRDI_U_NNUM, commodityLine.get(&quot;hazNumber&quot;));&#xA;&#xA;        String ltdQtyFlag = commodityLine.get(&quot;hazLimitedQuantity&quot;) != null &amp;&amp; !commodityLine.get(&quot;hazLimitedQuantity&quot;).isEmpty() &amp;&amp; &quot;1&quot;.equals(commodityLine.get(&quot;hazLimitedQuantity&quot;)) ? &quot;Y&quot; : &quot;N&quot;;&#xA;        hazardItem.setFieldValue(InventoryField.HZRDI_LTD_QTY, ltdQtyFlag);&#xA;        Double flashPoint = commodityLine.get(&quot;hazFlashPoint&quot;) != null &amp;&amp; !commodityLine.get(&quot;hazFlashPoint&quot;).isEmpty() ? Double.valueOf(commodityLine.get(&quot;hazFlashPoint&quot;)) : null;&#xA;        hazardItem.setFieldValue(InventoryField.HZRDI_FLASH_POINT, flashPoint);&#xA;        hazardItem.setFieldValue(InventoryField.HZRDI_TECH_NAME, commodityLine.get(&quot;hazCommodityName&quot;));&#xA;        hazardItem.setFieldValue(InventoryField.HZRDI_PROPER_NAME, commodityLine.get(&quot;hazCommodityName&quot;));&#xA;        String packingGroup = &quot;&quot;;&#xA;        if (commodityLine.get(&quot;hazPackageGroup&quot;) != null &amp;&amp; &quot;1&quot;.equals(commodityLine.get(&quot;hazPackageGroup&quot;))) {&#xA;            packingGroup = &quot;I&quot;;&#xA;        } else if (commodityLine.get(&quot;hazPackageGroup&quot;) != null &amp;&amp; &quot;2&quot;.equals(commodityLine.get(&quot;hazPackageGroup&quot;))) {&#xA;            packingGroup = &quot;II&quot;;&#xA;        } else if (commodityLine.get(&quot;hazPackageGroup&quot;) != null &amp;&amp; &quot;3&quot;.equals(commodityLine.get(&quot;hazPackageGroup&quot;))) {&#xA;            packingGroup = &quot;III&quot;;&#xA;        }&#xA;        if (!packingGroup.isEmpty())&#xA;            hazardItem.setFieldValue(InventoryField.HZRDI_PACKING_GROUP, packingGroup);&#xA;&#xA;        String weightStr = commodityLine.get(&quot;hazWeight&quot;) != null ?&#xA;                BigDecimal.valueOf(commodityLine.get(&quot;hazWeight&quot;)).toString() : BigDecimal.valueOf(0l).toString();&#xA;        String weightKg = &quot;&quot;;&#xA;        if (commodityLine.get(&quot;hazWeightUomCode&quot;) != null &amp;&amp; (commodityLine.get(&quot;hazWeightUomCode&quot;).contains(&quot;kg&quot;) || commodityLine.get(&quot;hazWeightUomCode&quot;).contains(&quot;KG&quot;))) {&#xA;            weightKg = weightStr;&#xA;        } else {&#xA;            weightKg = weightFromLBToKg(weightStr);&#xA;        }&#xA;        this.log(&quot;Hazard weight for &quot; + hazardItem.getHzrdiUNnum() + &quot;, is to SNX KG : &quot; + weightKg);&#xA;        hazardItem.setFieldValue(InventoryField.HZRDI_WEIGHT, weightKg);&#xA;&#xA;        if (commodityLine.get(&quot;hazPiecesUomCode&quot;) != null &amp;&amp; !commodityLine.get(&quot;hazPiecesUomCode&quot;).isEmpty())&#xA;            hazardItem.setFieldValue(InventoryField.HZRDI_PACKAGE_TYPE, commodityLine.get(&quot;hazPiecesUomCode&quot;));&#xA;        if (commodityLine.get(&quot;hazPieces&quot;) != null &amp;&amp; commodityLine.get(&quot;hazPieces&quot;) != 0l)&#xA;            hazardItem.setFieldValue(InventoryField.HZRDI_QUANTITY, commodityLine.get(&quot;hazPieces&quot;));&#xA;        if (commodityLine.get(&quot;hazSecondaryClass&quot;) != null &amp;&amp; !commodityLine.get(&quot;hazSecondaryClass&quot;).isEmpty())&#xA;            hazardItem.setFieldValue(InventoryField.HZRDI_SECONDARY_I_M_O1, commodityLine.get(&quot;hazSecondaryClass&quot;));&#xA;        if (commodityLine.get(&quot;hazTertiaryClass&quot;) != null &amp;&amp; !commodityLine.get(&quot;hazTertiaryClass&quot;).isEmpty())&#xA;            hazardItem.setFieldValue(InventoryField.HZRDI_SECONDARY_I_M_O2, commodityLine.get(&quot;hazTertiaryClass&quot;));&#xA;        String marinePollutants = commodityLine.get(&quot;hazMarinePollutant&quot;) != null &amp;&amp; !commodityLine.get(&quot;hazMarinePollutant&quot;).isEmpty() &amp;&amp;&#xA;                &quot;1&quot;.equals(commodityLine.get(&quot;hazMarinePollutant&quot;)) ? &quot;Y&quot; : &quot;N&quot;;&#xA;        hazardItem.setFieldValue(InventoryField.HZRDI_MARINE_POLLUTANTS, marinePollutants);&#xA;        hazardItem.setFieldValue(InventoryField.HZRDI_EMERGENCY_TELEPHONE, commodityLine.get(&quot;hazEmergencyContactPhone&quot;));&#xA;        this.log(hazardItem.toString());&#xA;        return hazardItem;&#xA;    }&#xA;&#xA;    public static String weightFromLBToKg(String kgWeight) {&#xA;        try {&#xA;            String lbsWeight = null;&#xA;            if (kgWeight == null || kgWeight.trim().length() == 0) {&#xA;                return &quot;&quot;;&#xA;            }&#xA;            double convtWeight = Double.parseDouble(kgWeight) * 0.45359237;&#xA;            double result = new BigDecimal(&quot;&quot; + convtWeight).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();&#xA;            lbsWeight = String.valueOf(result);&#xA;&#xA;            return lbsWeight;&#xA;        } catch (Exception e) {&#xA;            return &quot;0&quot;;&#xA;        }&#xA;    }&#xA;&#xA;    static&#xA;    final String json1 = &quot;[{\&quot;associationId\&quot;:6449,\&quot;bookingNumber\&quot;:\&quot;9076671\&quot;,\&quot;containerNumber\&quot;:\&quot;MATU246905\&quot;,\&quot;alfrescoDocId\&quot;:null,\&quot;isActive\&quot;:\&quot;Y\&quot;,\&quot;createUser\&quot;:\&quot;mmoore3\&quot;,\&quot;createDate\&quot;:\&quot;2016-07-09 00:00:46\&quot;,\&quot;lastUpdateUser\&quot;:\&quot;mmoore3\&quot;,\&quot;lastUpdateDate\&quot;:\&quot;2016-07-09 00:00:46\&quot;,\&quot;unitId\&quot;:null,\&quot;hazardousCommodityLines\&quot;:[{\&quot;commodityLineId\&quot;:46206,\&quot;hazUniqueId\&quot;:\&quot;17916\&quot;,\&quot;hazType\&quot;:\&quot;UN\&quot;,\&quot;hazNumber\&quot;:\&quot;1963\&quot;,\&quot;hazCommodityName\&quot;:\&quot;HELIUM, REFRIGERATED LIQUID\&quot;,\&quot;hazPrimaryClass\&quot;:\&quot;2.2\&quot;,\&quot;hazPrimaryClassName\&quot;:null,\&quot;hazSecondaryClass\&quot;:\&quot;\&quot;,\&quot;hazTertiaryClass\&quot;:\&quot;\&quot;,\&quot;hazEmergencyContactName\&quot;:\&quot;LYNDEN\&quot;,\&quot;hazEmergencyContactPhone\&quot;:\&quot;(800) 424-9300\&quot;,\&quot;hazSecondaryEmergencyContactName\&quot;:\&quot;\&quot;,\&quot;hazSecondaryEmergencyContactPhone\&quot;:\&quot;\&quot;,\&quot;hazPackageGroup\&quot;:null,\&quot;hazPieces\&quot;:2,\&quot;hazPiecesUomCode\&quot;:\&quot;CYL\&quot;,\&quot;hazWeight\&quot;:1600.000000,\&quot;hazWeightUomCode\&quot;:\&quot;LBS\&quot;,\&quot;hazFlashPoint\&quot;:\&quot;\&quot;,\&quot;hazFlashPointUomCode\&quot;:\&quot;C\&quot;,\&quot;hazImdgCfrIndicator\&quot;:\&quot;CFR\&quot;,\&quot;hazLimitedQuantity\&quot;:\&quot;0\&quot;,\&quot;hazMarinePollutant\&quot;:\&quot;0\&quot;,\&quot;hazExplosivePowderWeight\&quot;:null,\&quot;hazExplosivePowderWeightUomCode\&quot;:\&quot;\&quot;,\&quot;hazSpecialPermitNumber\&quot;:null,\&quot;isActive\&quot;:\&quot;Y\&quot;,\&quot;createUser\&quot;:\&quot;mmoore3\&quot;,\&quot;createDate\&quot;:\&quot;2016-07-09 00:46:24\&quot;,\&quot;lastUpdateUser\&quot;:\&quot;mmoore3\&quot;,\&quot;lastUpdateDate\&quot;:\&quot;2016-07-09 00:46:24\&quot;,\&quot;notes\&quot;:\&quot;\&quot;,\&quot;moreThan50PercentFlag\&quot;:null,\&quot;stowageRestriction\&quot;:null,\&quot;explosivePowderWeightApplicable\&quot;:null},{\&quot;commodityLineId\&quot;:46207,\&quot;hazUniqueId\&quot;:\&quot;17916\&quot;,\&quot;hazType\&quot;:\&quot;UN\&quot;,\&quot;hazNumber\&quot;:\&quot;1963\&quot;,\&quot;hazCommodityName\&quot;:\&quot;HELIUM, REFRIGERATED LIQUID\&quot;,\&quot;hazPrimaryClass\&quot;:\&quot;2.2\&quot;,\&quot;hazPrimaryClassName\&quot;:null,\&quot;hazSecondaryClass\&quot;:\&quot;\&quot;,\&quot;hazTertiaryClass\&quot;:\&quot;\&quot;,\&quot;hazEmergencyContactName\&quot;:\&quot;lynden\&quot;,\&quot;hazEmergencyContactPhone\&quot;:\&quot;(800) 424-9300\&quot;,\&quot;hazSecondaryEmergencyContactName\&quot;:\&quot;\&quot;,\&quot;hazSecondaryEmergencyContactPhone\&quot;:\&quot;\&quot;,\&quot;hazPackageGroup\&quot;:null,\&quot;hazPieces\&quot;:1,\&quot;hazPiecesUomCode\&quot;:\&quot;CYL\&quot;,\&quot;hazWeight\&quot;:420.000000,\&quot;hazWeightUomCode\&quot;:\&quot;LBS\&quot;,\&quot;hazFlashPoint\&quot;:\&quot;\&quot;,\&quot;hazFlashPointUomCode\&quot;:\&quot;F\&quot;,\&quot;hazImdgCfrIndicator\&quot;:\&quot;CFR\&quot;,\&quot;hazLimitedQuantity\&quot;:\&quot;0\&quot;,\&quot;hazMarinePollutant\&quot;:\&quot;0\&quot;,\&quot;hazExplosivePowderWeight\&quot;:null,\&quot;hazExplosivePowderWeightUomCode\&quot;:\&quot;\&quot;,\&quot;hazSpecialPermitNumber\&quot;:null,\&quot;isActive\&quot;:\&quot;Y\&quot;,\&quot;createUser\&quot;:\&quot;mmoore3\&quot;,\&quot;createDate\&quot;:\&quot;2016-07-09 00:46:55\&quot;,\&quot;lastUpdateUser\&quot;:\&quot;mmoore3\&quot;,\&quot;lastUpdateDate\&quot;:\&quot;2016-07-09 00:46:55\&quot;,\&quot;notes\&quot;:\&quot;\&quot;,\&quot;moreThan50PercentFlag\&quot;:null,\&quot;stowageRestriction\&quot;:null,\&quot;explosivePowderWeightApplicable\&quot;:null},{\&quot;commodityLineId\&quot;:46264,\&quot;hazUniqueId\&quot;:\&quot;334\&quot;,\&quot;hazType\&quot;:\&quot;UN\&quot;,\&quot;hazNumber\&quot;:\&quot;3267\&quot;,\&quot;hazCommodityName\&quot;:\&quot;CORROSIVE LIQUID, BASIC, ORGANIC, N.O.S.\&quot;,\&quot;hazPrimaryClass\&quot;:\&quot;8\&quot;,\&quot;hazPrimaryClassName\&quot;:null,\&quot;hazSecondaryClass\&quot;:\&quot;\&quot;,\&quot;hazTertiaryClass\&quot;:\&quot;\&quot;,\&quot;hazEmergencyContactName\&quot;:\&quot;LYNDEN\&quot;,\&quot;hazEmergencyContactPhone\&quot;:\&quot;(800) 424-9300\&quot;,\&quot;hazSecondaryEmergencyContactName\&quot;:\&quot;\&quot;,\&quot;hazSecondaryEmergencyContactPhone\&quot;:\&quot;\&quot;,\&quot;hazPackageGroup\&quot;:3,\&quot;hazPieces\&quot;:1,\&quot;hazPiecesUomCode\&quot;:\&quot;DRUM\&quot;,\&quot;hazWeight\&quot;:101.000000,\&quot;hazWeightUomCode\&quot;:\&quot;LBS\&quot;,\&quot;hazFlashPoint\&quot;:\&quot;\&quot;,\&quot;hazFlashPointUomCode\&quot;:\&quot;F\&quot;,\&quot;hazImdgCfrIndicator\&quot;:\&quot;CFR\&quot;,\&quot;hazLimitedQuantity\&quot;:\&quot;0\&quot;,\&quot;hazMarinePollutant\&quot;:\&quot;0\&quot;,\&quot;hazExplosivePowderWeight\&quot;:null,\&quot;hazExplosivePowderWeightUomCode\&quot;:\&quot;\&quot;,\&quot;hazSpecialPermitNumber\&quot;:null,\&quot;isActive\&quot;:\&quot;Y\&quot;,\&quot;createUser\&quot;:\&quot;mmoore3\&quot;,\&quot;createDate\&quot;:\&quot;2016-07-09 01:55:41\&quot;,\&quot;lastUpdateUser\&quot;:\&quot;mmoore3\&quot;,\&quot;lastUpdateDate\&quot;:\&quot;2016-07-09 01:55:41\&quot;,\&quot;notes\&quot;:null,\&quot;moreThan50PercentFlag\&quot;:null,\&quot;stowageRestriction\&quot;:null,\&quot;explosivePowderWeightApplicable\&quot;:null}]}]&quot;;&#xA;}&#xA;" />
<extension name="MatMassUpdateVesselPositionExt" scope="MATSON/ALASKA/ANK" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="/**&#xA; * Created by psethuraman on 12/17/2016.&#xA; */&#xA;&#xA;&#xA;import com.navis.argo.ContextHelper;&#xA;import com.navis.argo.business.api.GroovyApi&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension;&#xA;import com.navis.framework.business.Roastery&#xA;import com.navis.framework.portal.BizRequest&#xA;import com.navis.framework.portal.BizResponse&#xA;import com.navis.framework.portal.CrudOperation&#xA;import com.navis.framework.portal.FieldChange&#xA;import com.navis.framework.portal.FieldChanges;&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.framework.util.message.MessageCollector&#xA;import com.navis.inventory.InventoryBizMetafield&#xA;import com.navis.inventory.InventoryEntity&#xA;import com.navis.inventory.business.InventoryFacade;&#xA;import com.navis.inventory.business.api.UnitManager&#xA;import com.navis.inventory.business.atoms.UfvTransitStateEnum;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;&#xA;import com.navis.security.business.user.BaseUser&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import org.apache.log4j.Logger;&#xA;&#xA;public class MatMassUpdateVesselPositionExt extends AbstractGeneralNoticeCodeExtension {&#xA;    public void execute(GroovyEvent inEvent) {&#xA;        GroovyApi api = new GroovyApi();&#xA;        Event thisEvent = inEvent.getEvent();&#xA;        MessageCollector collector = getMessageCollector();&#xA;&#xA;        if (thisEvent == null)&#xA;            return;&#xA;&#xA;        Unit inUnit = (Unit) inEvent.getEntity();&#xA;&#xA;        if (inUnit == null)&#xA;            return;&#xA;&#xA;        this.log(&quot;UPDATE POSITION MatMassUpdateVesselPositionExt executed for &quot;+inUnit.getUnitId());&#xA;        String inSlot = thisEvent.getEvntNote();&#xA;        this.log(&quot;Updating Position for : &quot;+inUnit.getUnitId() +&quot; with postion &lt;&lt;&quot;+thisEvent.getEvntNote()+&quot;&gt;&gt;&quot;);&#xA;        if (inUnit != null &amp;&amp; inSlot != null) {&#xA;            UnitFacilityVisit ufv = inUnit.getUfvForFacilityLiveOnly(ContextHelper.getThreadFacility());&#xA;            if (ufv!= null ) {&#xA;                UnitManager unitManager = (UnitManager) Roastery.getBean(UnitManager.BEAN_ID);&#xA;                try {&#xA;                    BizRequest request = new BizRequest(getUserContext());&#xA;                    Serializable[] ufvGkeys = new Serializable[1];&#xA;                    ufvGkeys[0] = ufv.getUfvGkey();&#xA;                    FieldChanges fieldChanges = new FieldChanges();&#xA;&#xA;                    FieldChange change = new FieldChange(InventoryBizMetafield.UNIT_DIGITS, inUnit.getUnitId());&#xA;                    fieldChanges.setFieldChange(change);&#xA;&#xA;                    change = new FieldChange(InventoryBizMetafield.UNIT_SLOT, thisEvent.getEvntNote());&#xA;                    fieldChanges.setFieldChange(change);&#xA;                    CrudOperation crud = new CrudOperation(null, CrudOperation.TASK_UPDATE, InventoryEntity.UNIT_FACILITY_VISIT, fieldChanges, ufvGkeys);&#xA;                    request.addCrudOperation(crud);&#xA;                    BizResponse response = new BizResponse();&#xA;                    INVENTORY_FACADE.recordSlotCorrection(request, response);&#xA;                    collector.getMessages().addAll(response.getMessages());&#xA;                    this.log(&quot;Position updated for &quot;+ inUnit.getUnitId());&#xA;&#xA;                    //unitManager.recordUnitYardMove(ufv, inSlot, (String) null);&#xA;                } catch (BizViolation bizViolation) {&#xA;                    this.log(&quot;Cannot record yard move &quot;+bizViolation.toString());&#xA;                    String userId = ContextHelper.getThreadUserId();&#xA;                    String emailTo = &quot;1aktosdevteam@matson.com&quot;;&#xA;                    if (userId!= null) {&#xA;                        BaseUser baseUser = BaseUser.findBaseUser(userId);&#xA;                        if (baseUser!= null &amp;&amp; baseUser.getBuserEMail()!=null) {&#xA;                            emailTo = baseUser.getBuserEMail();&#xA;                        }&#xA;                    }&#xA;                    api.sendEmail(emailTo, emailTo,&quot;Test Update Position MatMassUpdateVesselPositionExt Failed&quot;, &quot; Update of position failed for unit &quot;+ufv.getUfvUnit().getUnitId() +&quot; with error&quot;+bizViolation.toString());&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;    private static InventoryFacade INVENTORY_FACADE = (InventoryFacade) Roastery.getBean(InventoryFacade.BEAN_ID);&#xA;&#xA;}&#xA;" />
<extension name="MATUpdateTempSettingOnUnitRoll" scope="MATSON/ALASKA" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="import com.navis.argo.ContextHelper&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.framework.persistence.HibernateApi&#xA;import com.navis.inventory.business.units.EqBaseOrderItem&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.GroovyEvent&#xA;public class MATUpdateTempSettingOnUnitRoll extends AbstractGeneralNoticeCodeExtension {&#xA;    public void execute(GroovyEvent inEvent) {&#xA;        this.log(&quot;Execution Started MATUpdateTempSettingOnUnitRoll&quot;);&#xA;        /* get the event */&#xA;        Event thisEvent = inEvent.getEvent();&#xA;                if (thisEvent == null)&#xA;            return;&#xA;        Unit unit = (Unit) inEvent.getEntity();&#xA;        if (unit == null)&#xA;            return;&#xA;        UnitFacilityVisit ufv = unit.getUfvForFacilityLiveOnly(ContextHelper.getThreadFacility());&#xA;        if (ufv == null) {&#xA;            return;&#xA;        }&#xA;        if (&quot;UNIT_ROLL&quot;.equalsIgnoreCase(thisEvent.getEventTypeId())) {&#xA;            EqBaseOrderItem eqboi = unit.getUnitPrimaryUe().getUeDepartureOrderItem();&#xA;            if (eqboi != null) {&#xA;                // got the booking item, now get the remarks from it and copy to ufvFlexString07&#xA;                String strAux = eqboi.getEqoiRemarks();&#xA;                if (strAux != null) {&#xA;                    ufv.setUfvFlexString07(strAux);&#xA;                } else {&#xA;                    ufv.setUfvFlexString07(&quot;&quot;);&#xA;                }&#xA;            } else {&#xA;                ufv.setUfvFlexString07(&quot;&quot;);&#xA;            }&#xA;            HibernateApi.getInstance().saveOrUpdate(ufv);&#xA;        }&#xA;    }&#xA;}" />
<extension name="MATUpdateGroupOnBargeDischargeLoad" scope="MATSON/ALASKA/DUT" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="import com.navis.argo.ContextHelper;&#xA;import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.argo.business.atoms.LocTypeEnum;&#xA;import com.navis.argo.business.model.CarrierVisit;&#xA;import com.navis.argo.business.reference.Group;&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension;&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.inventory.business.units.Routing;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.inventory.business.units.UnitFacilityVisit;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import com.navis.vessel.business.schedule.VesselVisitDetails;&#xA;&#xA;public class MATUpdateGroupOnBargeDischargeLoad extends AbstractGeneralNoticeCodeExtension&#xA;&#xA;    {&#xA;        public void execute(GroovyEvent inEvent){&#xA;        this.log(&quot;Execution Started MATUpdateGroupOnBargeDischargeLoad&quot;);&#xA;&#xA;    /* get the event */&#xA;&#xA;        Event thisEvent = inEvent.getEvent();&#xA;        GroovyApi groovyApi = new GroovyApi();&#xA;        if (thisEvent == null)&#xA;            return;&#xA;&#xA;        Unit unit = (Unit) inEvent.getEntity();&#xA;&#xA;        if (unit == null)&#xA;            return;&#xA;&#xA;        UnitFacilityVisit ufv = unit.getUfvForFacilityLiveOnly(ContextHelper.getThreadFacility());&#xA;        if (ufv == null){&#xA;            return;&#xA;        }&#xA;        Routing routing = unit.getUnitRouting();&#xA;        CarrierVisit cv = null;&#xA;        if (&quot;UNIT_DISCH&quot;.equalsIgnoreCase(thisEvent.getEventTypeId())) {&#xA;            cv = ufv.getInboundCarrierVisit();&#xA;        } else if (&quot;UNIT_LOAD&quot;.equalsIgnoreCase(thisEvent.getEventTypeId())){&#xA;            cv = ufv.getUfvActualObCv();&#xA;        }&#xA;&#xA;        // look only for the Inbound containers on a Vessel&#xA;        if (cv == null || !LocTypeEnum.VESSEL.equals(cv.getCvCarrierMode())){&#xA;            return;&#xA;        }&#xA;&#xA;        // only look for a barge&#xA;        VesselVisitDetails vvd = VesselVisitDetails.resolveVvdFromCv(cv);&#xA;        boolean isUpdated = false;&#xA;        if (vvd == null || !vvd.isBarge() ||!cv.getCvId().startsWith(&quot;ILB&quot;)){&#xA;            if (routing!=null &amp;&amp; routing.getRtgGroup() != null &amp;&amp; &quot;ILB&quot;.equalsIgnoreCase(routing.getRtgGroup().getGrpId())) {&#xA;                routing.setRtgGroup(null);&#xA;                isUpdated = true;&#xA;            }&#xA;        } else if (cv.getCvId().startsWith(&quot;ILB&quot;)) {&#xA;            if (routing!=null) {&#xA;                Group group = Group.findOrCreateGroup(&quot;ILB&quot;);&#xA;                routing.setRtgGroup(group);&#xA;                isUpdated = true;&#xA;            }&#xA;        }&#xA;        if (isUpdated) {&#xA;            unit.setUnitRouting(routing);&#xA;            HibernateApi.getInstance().saveOrUpdate(unit);&#xA;        }&#xA;    }&#xA;}&#xA;" />
<extension name="MatsonUnitVGMVerifiedCalcLibrary" scope="MATSON/ALASKA" type="LIBRARY" language="GROOVY" is-enabled="Y" contents="import com.navis.external.framework.AbstractExtensionCallback&#xA;import com.navis.framework.AllOtherFrameworkPropertyKeys&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.inventory.business.units.EqBaseOrder&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.orders.business.eqorders.EquipmentOrder&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;&#xA;/**&#xA; *&#xA; * This groovy library applies the associated booking's 'full return location' value to the unit's 'VGM verified' (UnitFlexStingXX)&#xA; *&#xA; * SOLAS VGM&#xA; * Date: 12/05/2016&#xA; * Called from:  MatsonSetUnitVGMVerified groovy&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;class MatsonUnitVGMVerifiedCalcLibrary extends AbstractExtensionCallback {&#xA;&#xA;    private Logger LOGGER = Logger.getLogger(MatsonUnitVGMVerifiedCalcLibrary.class);&#xA;&#xA;    public void resolveVGMRequiredFlagForUnit(Unit inUnit) {&#xA;&#xA;        try {&#xA;            if (inUnit == null) {&#xA;                return;&#xA;            }&#xA;            String VgmVerified = &quot;YES&quot;;&#xA;&#xA;            EqBaseOrder baseOrder = inUnit.getDepartureOrder();&#xA;&#xA;            if (baseOrder!= null ){&#xA;                EquipmentOrder equipmentOrder = EquipmentOrder.resolveEqoFromEqbo(baseOrder);&#xA;                if (equipmentOrder!= null) {&#xA;                    Booking booking = Booking.resolveBkgFromEqo(equipmentOrder);&#xA;                    if (booking != null &amp;&amp; booking.getEqoFullReturnLocation() != null &amp;&amp; &quot;YES&quot;.equalsIgnoreCase(booking.getEqoFullReturnLocation())) {&#xA;                        VgmVerified = &quot;NO&quot;;&#xA;                    }&#xA;                }&#xA;            }&#xA;            inUnit.setUnitFlexString06(VgmVerified);&#xA;&#xA;        } catch (Throwable e) {&#xA;            e.printStackTrace();&#xA;            LOGGER.error(&quot;resolveVGMRequiredFlagForUnit: Problem occured while attempting to set VGM Required flag &quot;, e);&#xA;        }&#xA;    }&#xA;}&#xA;" />
<extension name="MatsonUnitSetVGMVerifiedFromBooking" scope="MATSON/ALASKA" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="import com.navis.argo.business.api.GroovyApi;&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension;&#xA;import com.navis.framework.portal.FieldChanges;&#xA;import com.navis.inventory.business.units.EqBaseOrder;&#xA;import com.navis.inventory.business.units.Unit;&#xA;import com.navis.orders.business.eqorders.Booking;&#xA;import com.navis.orders.business.eqorders.EquipmentOrder;&#xA;import com.navis.services.business.event.Event;&#xA;import com.navis.services.business.event.GroovyEvent;&#xA;import com.navis.services.business.rules.EventType;&#xA;import org.apache.log4j.Level;&#xA;import org.apache.log4j.Logger;&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.argo.business.api.ServicesManager;&#xA;&#xA;/**&#xA; * This groovy calls the library to retrieve the weight and set VGMRequired field&#xA; * &lt;p/&gt;&#xA; * SOLAS VGM&#xA; * Date: 25/05/2016&#xA; * call to:  MatsonUnitGetWeightWSLibrary groovy&#xA; */&#xA;&#xA;class MatsonUnitSetVGMVerifiedFromBooking extends AbstractGeneralNoticeCodeExtension {&#xA;&#xA;    private Logger LOGGER = Logger.getLogger(MatsonUnitSetVGMVerifiedFromBooking.class);&#xA;&#xA;    public void execute(GroovyEvent inGroovyEvent) {&#xA;&#xA;        try {&#xA;            LOGGER.setLevel(Level.INFO);&#xA;            LOGGER.info(&quot; MatsonUnitSetVGMVerifiedFromBooking execute Started.&quot;);&#xA;&#xA;            String FLAG_YES = &quot;YES&quot;;&#xA;            String FLAG_NO = &quot;NO&quot;;&#xA;            String vgmVerified = FLAG_YES;&#xA;            String bookingNo = &quot;&quot;, equipmentId = &quot;&quot;;&#xA;            def weight = &quot;&quot;;&#xA;            String eventIdentifier = &quot;VGM_UPDATE&quot;;&#xA;&#xA;            if (inGroovyEvent != null) {&#xA;                Event event = inGroovyEvent.getEvent();&#xA;                if (event != null) {&#xA;                    Unit unit = (Unit) inGroovyEvent.getEntity();&#xA;                    if (unit != null) {&#xA;                        EqBaseOrder baseOrder = unit.getDepartureOrder();&#xA;                        if (baseOrder != null) {&#xA;                            EquipmentOrder equipmentOrder = EquipmentOrder.resolveEqoFromEqbo(baseOrder);&#xA;                            if (equipmentOrder != null) {&#xA;                                Booking booking = Booking.resolveBkgFromEqo(equipmentOrder);&#xA;                                bookingNo = booking.getEqboNbr();&#xA;                                equipmentId = unit.getUnitId();&#xA;&#xA;                                String fullReturnLocation = booking.getEqoFullReturnLocation();&#xA;                                if (fullReturnLocation != null &amp;&amp; FLAG_YES.equalsIgnoreCase(fullReturnLocation)) {&#xA;                                    try {&#xA;                                        vgmVerified = FLAG_NO;&#xA;                                        def getWeightLibrary = getLibrary(&quot;MatsonUnitGetWeightWSLibrary&quot;);&#xA;                                        LOGGER.info(&quot;About to execute MatsonUnitGetWeightWSLibrary&quot;);&#xA;&#xA;                                        weight = getWeightLibrary.getUnitWeight(bookingNo, equipmentId);&#xA;                                        // call WS to identify the weight&#xA;                                    } catch (Exception e) {&#xA;                                        LOGGER.error(&quot;MatsonUnitSetVGMVerifiedFromBooking : Problem occured while attempting to set VGM Required flag &quot;, e);&#xA;                                    }&#xA;                                }&#xA;&#xA;                                LOGGER.info(&quot;returned weight value: &quot; + weight);&#xA;&#xA;                                if (weight != null &amp;&amp; !weight.isEmpty()) {&#xA;                                    BigInteger biWeight = new BigInteger(weight);&#xA;                                    if (biWeight &gt; 0) {&#xA;                                        vgmVerified = FLAG_YES;&#xA;                                    }&#xA;                                }&#xA;                            }&#xA;                        }&#xA;                        unit.setUnitFlexString06(vgmVerified);  //Set the VGM verified flag of Unit&#xA;                        getLibrary(&quot;CommonUtils&quot;).recordEvent(unit, eventIdentifier);&#xA;                        GroovyApi groovyApi = new GroovyApi();&#xA;                        groovyApi.getGroovyClassInstance(&quot;MATUtil&quot;).refreshUnit(unit);&#xA;                    }&#xA;                }&#xA;            }&#xA;            LOGGER.info(&quot; MatsonUnitSetVGMVerifiedFromBooking execute End.&quot;);&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;            LOGGER.error(&quot;MatsonUnitSetVGMVerifiedFromBooking : Problem occured while attempting to set VGM Required flag &quot;, e);&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;" />
<extension name="MatsonUnitVGMUpdateForBookingFieldChange" scope="MATSON/ALASKA" type="GENERAL_NOTICES_CODE_EXTENSION" language="GROOVY" is-enabled="Y" contents="import com.navis.apex.business.model.GroovyInjectionBase&#xA;import com.navis.argo.ArgoBizMetafield&#xA;import com.navis.external.services.AbstractGeneralNoticeCodeExtension&#xA;import com.navis.framework.portal.FieldChanges&#xA;import com.navis.inventory.business.api.UnitFinder&#xA;import com.navis.inventory.business.units.EqBaseOrder&#xA;import com.navis.inventory.business.units.EqBaseOrderItem&#xA;import com.navis.inventory.business.units.Unit&#xA;import com.navis.orders.business.eqorders.Booking&#xA;import com.navis.services.business.event.Event&#xA;import com.navis.services.business.event.EventFieldChange&#xA;import com.navis.services.business.event.GroovyEvent&#xA;import com.navis.services.business.rules.EventType&#xA;import org.apache.log4j.Level&#xA;import org.apache.log4j.Logger&#xA;import com.navis.framework.business.Roastery;&#xA;import com.navis.argo.business.api.ServicesManager;&#xA;&#xA;import java.util.Collection;&#xA;&#xA;/**&#xA; * This groovy record the event UNIT_BOOKING_VGM_UPDATE for units that's been associated with the given booking&#xA; * SOLAS VGM&#xA; * Date: 02-June-2016&#xA; */&#xA;&#xA;&#xA;public class MatsonUnitVGMUpdateOnBookingFieldChange extends AbstractGeneralNoticeCodeExtension {&#xA;&#xA;    private static Logger LOGGER = Logger.getLogger(MatsonUnitVGMUpdateOnBookingFieldChange.class);&#xA;&#xA;    public void execute(GroovyEvent inGroovyEvent) {&#xA;        LOGGER.setLevel(Level.INFO);&#xA;        LOGGER.info(&quot; MatsonUnitVGMUpdateOnBookingFieldChange execute Started.&quot;);&#xA;&#xA;        String uiFieldName = &quot;eqoFullReturnLocation&quot;;&#xA;        String FLAG_YES = &quot;YES&quot;;&#xA;        String FLAG_NO = &quot;NO&quot;;&#xA;        String vgmUpdateEventId = &quot;UNIT_BOOKING_VGM_UPDATE&quot;;&#xA;&#xA;        try {&#xA;            if (inGroovyEvent != null) {&#xA;                Booking booking = (Booking) inGroovyEvent.getEntity();&#xA;                if (booking == null) {&#xA;                    return;&#xA;                }&#xA;                Event event = inGroovyEvent.getEvent();&#xA;                if (event != null) {&#xA;                    if (inGroovyEvent.wasFieldChanged(uiFieldName)) {&#xA;                        EventFieldChange fieldChange = (EventFieldChange) inGroovyEvent.getFieldChange(uiFieldName);&#xA;                        if (fieldChange != null) {&#xA;                            //String prevVal = (String) fieldChange.getPrevVal();&#xA;                            String newVal  = (String) fieldChange.getNewVal();&#xA;                            //if (prevVal != null &amp;&amp; FLAG_NO.equalsIgnoreCase(prevVal) &amp;&amp; newVal != null &amp;&amp; FLAG_YES.equalsIgnoreCase(newVal) ) {&#xA;                             if(newVal != null &amp;&amp; FLAG_YES.equalsIgnoreCase(newVal) ) {&#xA;&#xA;                                if (booking != null) {&#xA;                                    EqBaseOrder baseOrder = (EqBaseOrder) booking;                                   &#xA;                                    GroovyInjectionBase injBase = new GroovyInjectionBase();&#xA;                                    UnitFinder unitFinder = injBase.getUnitFinder();&#xA;&#xA;                                    Collection&lt;Unit&gt; units = unitFinder.findUnitsForOrder(baseOrder);&#xA;                                    for(Unit unit : units) {&#xA;                                        if(unit != null) {&#xA;                                            LOGGER.info(&quot;MatsonUnitVGMUpdateOnBookingFieldChange : recording event for unit &quot;+unit.getUnitId());&#xA;&#x9;               getLibrary(&quot;CommonUtils&quot;).recordEvent(unit, vgmUpdateEventId);&#xA;                                        }&#xA;                                    }&#xA;                                }&#xA;                            }&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;        } catch(Exception e) {&#xA;            LOGGER.error(&quot;MatsonUnitVGMUpdateOnBookingFieldChange error : &quot;+e.getMessage());&#xA;        }&#xA;    }&#xA;&#xA;}" />
</argo:snx>

