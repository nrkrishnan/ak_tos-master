import com.navis.argo.business.atoms.FreightKindEnum
import com.navis.argo.business.model.CarrierVisit
import com.navis.argo.business.reference.ScopedBizUnit
import com.navis.external.road.AbstractGateTaskInterceptor
import com.navis.external.road.EGateTaskInterceptor
import com.navis.framework.persistence.HibernateApi
import com.navis.framework.util.BizFailure
import com.navis.inventory.business.units.Unit
import com.navis.orders.business.eqorders.Booking
import com.navis.orders.business.eqorders.EquipmentOrder
import com.navis.road.business.adaptor.order.ReadOrder
import com.navis.road.business.model.TruckTransaction
import com.navis.road.business.util.RoadBizUtil
import com.navis.road.business.workflow.TransactionAndVisitHolder
import com.navis.argo.business.reference.Equipment;
import org.apache.log4j.Logger

/**
 *
 */
public class MATCheckBookingFreightKind extends AbstractGateTaskInterceptor implements EGateTaskInterceptor{


    public void execute(TransactionAndVisitHolder inDao){

        LOGGER.warn(" MatCheckBookingFreightKind Execution Started ");

        executeInternal(inDao);
        if (inDao == null ){
            LOGGER.warn("Transaction visit holder is null");
            return;
        }
        TruckTransaction tran = inDao.getTran();
        if (tran == null) {
            LOGGER.warn("Transaction is null");
            return;
        }
        EquipmentOrder order = tran.getTranEqo();
        Unit unit = tran.getTranUnit();
        if (unit != null) {
            LOGGER.warn(" Departure item : " + unit.getUnitPrimaryUe().getUeDepartureOrderItem());
            if (unit.getUnitPrimaryUe().getUeDepartureOrderItem() != null) {
                if (unit.getUnitPrimaryUe().getUeDepartureOrderItem().getEqboiOrder() != null) {

                    String bookingGkey = unit.getUnitPrimaryUe().getUeDepartureOrderItem().getEqboiOrder().getEqboGkey();
                    LOGGER.warn(" Booking Gkey: " + bookingGkey);

                    Booking booking = (Booking) HibernateApi.getInstance().load(Booking.class, bookingGkey);
                    LOGGER.warn(" Booking : " + booking);

                    if (booking != null) {
                        LOGGER.warn(" Equipment Order Status: " + booking.getEqoEqStatus());
                        FreightKindEnum fke = booking.getEqoEqStatus();
                        tran.setTranOrigin(booking.getEqoOrigin());
                        tran.setTranDestination(booking.getEqoDestination());
                        if (unit.getUnitGoods() != null) {
                            unit.getUnitGoods().setOrigin(booking.getEqoOrigin());
                            unit.getUnitGoods().setDestination(booking.getEqoDestination())
                        }
                        RoadBizUtil.commit();
                        if (!FreightKindEnum.MTY.equals(fke)) {
                            this.reportUserError("For Receive Empty Containers, Full Booking Cannot be Used ");
                            return;
                        }
                    } else {
                        LOGGER.warn(" booking not found : "+booking);
                    }
                } else {
                    LOGGER.error("Order not found for unit : "+unit.getUnitId());
                }
            } else {
                LOGGER.warn(" booking item not found : ");
            }
        } else {
            LOGGER.warn(" Unit not found : " + unit);

        }
    }

    private void reportUserError(String message) {
        RoadBizUtil.messageCollector.appendMessage(BizFailure.create(message));

    }
    private static Logger LOGGER = Logger.getLogger(MATCheckBookingFreightKind.class);

}