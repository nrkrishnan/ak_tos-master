<?xml version="1.0" encoding="UTF-8"?>
<argo:snx xmlns:argo="http://www.navis.com/argo" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.navis.com/argo snx.xsd">
<extension name="GEMSPreTripCheck" scope="MATSON/ALASKA" type="GATE_TASK_INTERCEPTOR" language="GROOVY" is-enabled="Y" contents="/*&#xA; * Copyright (c) 2015 Navis LLC. All Rights Reserved.&#xA; *&#xA; */&#xA;&#xA;&#xA;import com.navis.argo.ContextHelper&#xA;import com.navis.argo.business.model.GeneralReference&#xA;import com.navis.argo.business.model.Lane&#xA;import com.navis.argo.business.reference.Container&#xA;import com.navis.external.road.AbstractGateTaskInterceptor&#xA;import com.navis.external.road.EGateTaskInterceptor&#xA;import com.navis.framework.AllOtherFrameworkPropertyKeys&#xA;import com.navis.framework.MailServerConfig&#xA;import com.navis.framework.persistence.HibernateApi;&#xA;import com.navis.framework.portal.UserContext&#xA;import com.navis.framework.util.BizViolation&#xA;import com.navis.inventory.business.units.UnitFacilityVisit&#xA;import com.navis.road.business.model.TruckTransaction&#xA;import com.navis.road.business.util.RoadBizUtil&#xA;import com.navis.road.business.workflow.TransactionAndVisitHolder&#xA;import com.sun.jersey.api.client.Client&#xA;import com.sun.jersey.api.client.ClientResponse&#xA;import com.sun.jersey.api.client.WebResource&#xA;import com.sun.jersey.api.client.config.ClientConfig&#xA;import com.sun.jersey.api.client.config.DefaultClientConfig&#xA;import org.apache.log4j.Logger&#xA;import org.springframework.mail.MailSendException&#xA;import org.springframework.mail.javamail.JavaMailSenderImpl&#xA;import org.springframework.mail.javamail.MimeMessageHelper&#xA;&#xA;import javax.mail.internet.MimeMessage&#xA;import javax.ws.rs.core.MediaType&#xA;&#xA;/**&#xA; * GEMSPreTripCheck.&#xA; *&#xA; * @author &lt;a href=&quot;mailto:kramachandran@matson.com&quot;&gt; Keerthi Ramachandran&lt;/a&gt;&#xA; * @since 01/18/2016&#xA; * @api none&#xA; * Called from: Gate Configuration&#xA; * &lt;p&gt;This code used to run an webservice call to GEMS to determine if the equipment is due for Pre-Trip inspection&lt;/p&gt;&#xA; * &lt;p&gt;The container ID is passed to GEMS and Boolean is required as reponse&lt;/p&gt;&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; * Revision History&#xA; * ---------------------------------------------------------------------------------------------------------------------------------------------------&#xA; */&#xA;public class GEMSPreTripCheck extends AbstractGateTaskInterceptor implements EGateTaskInterceptor {&#xA;&#xA;    /**&#xA;     * Print document based on the configuration docTypeId parameter&#xA;     *&#xA;     * @param inOutDao&#xA;     */&#xA;&#xA;    public static final String PRE_TRIP_REQUIRED = &quot;&lt;preTripDueFlag&gt;Y&lt;/preTripDueFlag&gt;&quot;&#xA;&#xA;    public void execute(TransactionAndVisitHolder inOutDao) {&#xA;        super.executeInternal(inOutDao);&#xA;        logMsg(&quot;execute Stared&quot;);&#xA;        TruckTransaction tran = inOutDao.getTran();&#xA;        UnitFacilityVisit unitFacilityVisit = tran.getTranUfv();&#xA;        Container container = tran.tranContainer;&#xA;        logMsg(container.toString());&#xA;        String equipmentId = tran.getTranCtrNbr();&#xA;        //if (unitFacilityVisit != null) equipmentId = unitFacilityVisit.getUnitId();&#xA;        logMsg(&quot;Equipment ID for pre-trip validation&quot; + equipmentId);&#xA;        if (equipmentId == null) {&#xA;            logMsg(&quot;The Transaction Container can't be read. Something wrong with container read logic&quot;);&#xA;            /*RoadBizUtil.appendExceptionChainAsWarnings(&#xA;                    BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                            &quot;Can't determine if the Equipment is due for Pretrip. Please Perform Manual Validation&quot;));*/&#xA;            return;&#xA;        }&#xA;        Lane lane = inOutDao.getLane();&#xA;        if (lane != null) {&#xA;            logMsg(&quot;Gate Lane : &quot; + lane.getLaneId());&#xA;            if (&quot;LINE HAUL&quot;.equalsIgnoreCase(lane.getLaneId())) {&#xA;                logMsg(&quot;Validation not needed for Lane : &quot; + lane.getLaneId());&#xA;                return;&#xA;            } else {&#xA;                logMsg(&quot;Validation needed for Lane : &quot; + lane.getLaneId());&#xA;            }&#xA;        }&#xA;&#xA;        Boolean preTripRequired = false;&#xA;        String owner = null;&#xA;        if (inOutDao.getTran().getTranContainer() != null) {&#xA;            owner = inOutDao.getTran().getTranContainer().getEquipmentOwnerId();&#xA;        }&#xA;        /*&#xA;         * Pre-trip only for Matson Equipment&#xA;         */&#xA;        Boolean isMatsonEquipment = false;&#xA;        if (owner != null &amp;&amp; (&quot;MAT&quot;.equalsIgnoreCase(owner) || &quot;MATU&quot;.equalsIgnoreCase(owner)))&#xA;            isMatsonEquipment = true;&#xA;        if (!isMatsonEquipment)&#xA;            return;&#xA;&#xA;        /*&#xA;         * If the UCC code is not Equal to UN, prevent the User from completing the transaction&#xA;         */&#xA;        String ucc = inOutDao.getTran().getTranUnitFlexString15();&#xA;&#xA;        Boolean overRideByUCC = false;&#xA;        logMsg(&quot;UCC from transaction &quot; + ucc);&#xA;        /*if (ucc == null &amp;&amp; inOutDao.getTran().getTranUfv() != null &amp;&amp; inOutDao.getTran().getTranUfv().getUfvUnit() != null)&#xA;            ucc = inOutDao.getTran().getTranUfv().getUfvUnit().getUnitFlexString15();*/&#xA;        if (ucc != null &amp;&amp; (&quot;UN&quot;.equalsIgnoreCase(ucc) || &quot;DL&quot;.equalsIgnoreCase(ucc) || &quot;DN&quot;.equalsIgnoreCase(ucc) || &quot;SF&quot;.equalsIgnoreCase(ucc) || &quot;.&quot;.equalsIgnoreCase(ucc)))&#xA;            overRideByUCC = true;&#xA;&#xA;        try {&#xA;            preTripRequired = isPreTripRequired(equipmentId); // call WS here with Equipment ID&#xA;        }&#xA;        catch (Exception exception) {&#xA;            //send email to dev team&#xA;            sendFailureMail(equipmentId, exception);&#xA;        }&#xA;        String preTripVal = tran.getTranUnit() != null ? tran.getTranUnit().getUnitFlexString05():&quot;&quot;;&#xA;        if (preTripRequired) {&#xA;            if(!overRideByUCC ){&#xA;                RoadBizUtil.appendExceptionChain(BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                        &quot;The Unit &quot; + equipmentId + &quot; is due for PreTrip&quot;));&#xA;            }&#xA;            /*if(!overRideByUCC &amp;&amp; !(overRideByUCC &amp;&amp; tran.getTranUnitFlexString05()!= null &amp;&amp; &quot;PRETRIP&quot;.equalsIgnoreCase(tran.getTranFlexString05()))) {&#xA;                tran.setTranUnitFlexString05(&quot;PRETRIP&quot;);&#xA;                RoadBizUtil.appendExceptionChain(&#xA;                        BizViolation.create(AllOtherFrameworkPropertyKeys.ERROR__NULL_MESSAGE, null,&#xA;                                &quot;The Unit &quot; + equipmentId + &quot; is due for PreTrip&quot;));&#xA;            }&#xA;            */&#xA;        }&#xA;    }&#xA;&#xA;    private logMsg(String inMsg) {&#xA;        log(this.getClass().getName() + &quot; &quot; + inMsg);&#xA;    }&#xA;&#xA;    private Boolean isPreTripRequired(String inEquipmentID) {&#xA;        String equipmentId, checkDigit;&#xA;        if (inEquipmentID.length() &gt; 10) equipmentId = inEquipmentID.substring(0, 10); else equipmentId = inEquipmentID;&#xA;        if (inEquipmentID.length() &gt; 10) checkDigit = inEquipmentID.substring(10); else checkDigit = &quot;X&quot;;&#xA;&#xA;        GeneralReference genRef = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;GEMSPRETRIP&quot;, &quot;URL&quot;);&#xA;        log(genRef.getRefValue1());&#xA;        URL url = new URL(genRef.getRefValue1() + &quot;equipment/&quot; + equipmentId + &quot;/checkdigit/&quot; + checkDigit);&#xA;        logMsg(url.toString());&#xA;        DefaultClientConfig clientConfig1 = new DefaultClientConfig();&#xA;        clientConfig1.getProperties().put(ClientConfig.PROPERTY_CONNECT_TIMEOUT, Integer.parseInt(genRef.getRefValue2()));&#xA;        clientConfig1.getProperties().put(ClientConfig.PROPERTY_READ_TIMEOUT, Integer.parseInt(genRef.getRefValue3()));&#xA;        Client client = Client.create(clientConfig1);&#xA;&#xA;        WebResource resource = client.resource(url.toString());&#xA;        ClientResponse response = (ClientResponse) resource.accept(MediaType.APPLICATION_XML).get(ClientResponse.class);&#xA;        if (response.getStatus() != 200) {&#xA;            logMsg(&quot;Request failed&quot;);&#xA;            logMsg(response.toString());&#xA;        } else {&#xA;            logMsg(&quot;Request Success&quot;);&#xA;            logMsg(response.toString());&#xA;        }&#xA;        String xmlResponse = response.getEntity(String.class);&#xA;        logMsg(xmlResponse);&#xA;        if (xmlResponse.contains(PRE_TRIP_REQUIRED))&#xA;            return Boolean.TRUE;&#xA;        else&#xA;            return Boolean.FALSE;&#xA;    }&#xA;    /**&#xA;     * Send simple email message&#xA;     *&#xA;     * @param inTo TO email address&#xA;     * @param inFrom FROM email address&#xA;     * @param inSubject Text in the subject line&#xA;     * @param inBody Text in the body of the email&#xA;     * @return TRUE/FALSE     True if email has been sent or not&#xA;     */&#xA;    public Boolean sendEmail(String inTo, String inFrom, String inSubject, String inBody) {&#xA;        GroovyEmailSender sender = new GroovyEmailSender();&#xA;        MimeMessage msg = sender.createMimeMessage();&#xA;        MimeMessageHelper helper = new MimeMessageHelper(msg, &quot;UTF-8&quot;);&#xA;        helper.setFrom(inFrom);&#xA;        helper.setReplyTo(inFrom);&#xA;        helper.setTo(inTo);&#xA;        helper.setSubject(inSubject);&#xA;        helper.setText(inBody, true);&#xA;        try {&#xA;            sender.send(msg);&#xA;        } catch (Exception inException) {&#xA;            LOGGER.error(&quot;GEMSPreTripCheck: Exception in email attempt: &quot; + inException);&#xA;            return false;&#xA;        }&#xA;        return true;&#xA;    }&#xA;&#xA;    private class GroovyEmailSender extends JavaMailSenderImpl {&#xA;        GroovyEmailSender() {&#xA;            setMailServerPropertiesFromUserContext();&#xA;        }&#xA;        /**&#xA;         * Sets the Host, Port, and Protocol from the config settings based on the UserContext from the email message.&#xA;         *&#xA;         * @param inEmailMessage&#xA;         */&#xA;        private void setMailServerPropertiesFromUserContext() {&#xA;            try {&#xA;                UserContext userContext = ContextHelper.getThreadUserContext();&#xA;                setHost(MailServerConfig.HOST.getSetting(userContext));&#xA;                setPort(Integer.parseInt(MailServerConfig.PORT.getSetting(userContext)));&#xA;                String protocol = MailServerConfig.PROTOCOL.getSetting(userContext);&#xA;                long timeout = MailServerConfig.TIMEOUT.getValue(userContext);&#xA;                Properties props = new Properties();&#xA;                props.setProperty(&quot;mail.pop3.timeout&quot;, String.valueOf(timeout));&#xA;                setProtocol(protocol);&#xA;                if (&quot;smtps&quot;.equals(protocol)) {&#xA;                    setUsername(MailServerConfig.SMTPS_USER.getSetting(userContext));&#xA;                    setPassword(MailServerConfig.SMTPS_PASSWORD.getSetting(userContext));&#xA;                    props.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);&#xA;                    props.put(&quot;mail.smtps.auth&quot;, &quot;true&quot;);&#xA;                    props.put(&quot;mail.smtp.ssl.enable&quot;, &quot;true&quot;);&#xA;                    props.put(&quot;mail.transport.protocol&quot;, &quot;smtps&quot;);&#xA;                }&#xA;                setJavaMailProperties(props);&#xA;                LOGGER.info(&quot;Initialized SMTP Mail Server Configuration.&quot;);&#xA;            } catch (Throwable throwable) {&#xA;                String error = &quot;Initializing the SMTP Mail Server configuration encountered the following error:&quot;;&#xA;                LOGGER.error(error, throwable);&#xA;                throw new MailSendException(error, throwable);&#xA;            }&#xA;        }&#xA;        private Logger LOGGER = Logger.getLogger(GroovyEmailSender.class);&#xA;    }&#xA;&#xA;    public void sendFailureMail(String inEquipmentId, Throwable inThrowable) {&#xA;        GeneralReference genRef = GeneralReference.findUniqueEntryById(&quot;ENV&quot;, &quot;ENVIRONMENT&quot;);&#xA;        String environment = genRef.getRefValue1();&#xA;        genRef = GeneralReference.findUniqueEntryById(&quot;MATSON&quot;, &quot;EMAIL&quot;, &quot;NOTIFICATION&quot;);&#xA;        String emailFrom = genRef.getRefValue1();&#xA;        String emailTo = genRef.getRefValue2();&#xA;        String emailSubject = environment + &quot; - GEMS Equipment pretrip check failure &quot; + inEquipmentId;&#xA;        String emailBody = inThrowable.message + &quot;\n&quot; + inThrowable.toString();&#xA;        sendEmail(emailTo, emailFrom, emailSubject, emailBody);&#xA;    }&#xA;&#xA;&#xA;}" />
</argo:snx>

